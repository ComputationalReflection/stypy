
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: # TODO:
2: # * Loop Delay is broken on GTKAgg. This is because source_remove() is not
3: #   working as we want. PyGTK bug?
4: # * Documentation -- this will need a new section of the User's Guide.
5: #      Both for Animations and just timers.
6: #   - Also need to update http://www.scipy.org/Cookbook/Matplotlib/Animations
7: # * Blit
8: #   * Currently broken with Qt4 for widgets that don't start on screen
9: #   * Still a few edge cases that aren't working correctly
10: #   * Can this integrate better with existing matplotlib animation artist flag?
11: #     - If animated removes from default draw(), perhaps we could use this to
12: #       simplify initial draw.
13: # * Example
14: #   * Frameless animation - pure procedural with no loop
15: #   * Need example that uses something like inotify or subprocess
16: #   * Complex syncing examples
17: # * Movies
18: #   * Can blit be enabled for movies?
19: # * Need to consider event sources to allow clicking through multiple figures
20: from __future__ import (absolute_import, division, print_function,
21:                         unicode_literals)
22: 
23: import six
24: from six.moves import xrange, zip
25: 
26: import numpy as np
27: import os
28: import platform
29: import sys
30: import itertools
31: try:
32:     # python3
33:     from base64 import encodebytes
34: except ImportError:
35:     # python2
36:     from base64 import encodestring as encodebytes
37: import abc
38: import contextlib
39: import tempfile
40: import uuid
41: import warnings
42: from matplotlib._animation_data import (DISPLAY_TEMPLATE, INCLUDED_FRAMES,
43:                                         JS_INCLUDE)
44: from matplotlib.cbook import iterable, deprecated
45: from matplotlib.compat import subprocess
46: from matplotlib import verbose
47: from matplotlib import rcParams, rcParamsDefault, rc_context
48: if sys.version_info < (3, 0):
49:     from cStringIO import StringIO as InMemory
50: else:
51:     from io import BytesIO as InMemory
52: 
53: # Process creation flag for subprocess to prevent it raising a terminal
54: # window. See for example:
55: # https://stackoverflow.com/questions/24130623/using-python-subprocess-popen-cant-prevent-exe-stopped-working-prompt
56: if platform.system() == 'Windows':
57:     subprocess_creation_flags = CREATE_NO_WINDOW = 0x08000000
58: else:
59:     # Apparently None won't work here
60:     subprocess_creation_flags = 0
61: 
62: # Other potential writing methods:
63: # * http://pymedia.org/
64: # * libmng (produces swf) python wrappers: https://github.com/libming/libming
65: # * Wrap x264 API:
66: 
67: # (http://stackoverflow.com/questions/2940671/
68: # how-to-encode-series-of-images-into-h264-using-x264-api-c-c )
69: 
70: 
71: def adjusted_figsize(w, h, dpi, n):
72:     '''Compute figure size so that pixels are a multiple of n
73: 
74:     Parameters
75:     ----------
76:     w, h : float
77:         Size in inches
78: 
79:     dpi : float
80:         The dpi
81: 
82:     n : int
83:         The target multiple
84: 
85:     Returns
86:     -------
87:     wnew, hnew : float
88:         The new figure size in inches.
89:     '''
90: 
91:     # this maybe simplified if / when we adopt consistent rounding for
92:     # pixel size across the whole library
93:     def correct_roundoff(x, dpi, n):
94:         if int(x*dpi) % n != 0:
95:             if int(np.nextafter(x, np.inf)*dpi) % n == 0:
96:                 x = np.nextafter(x, np.inf)
97:             elif int(np.nextafter(x, -np.inf)*dpi) % n == 0:
98:                 x = np.nextafter(x, -np.inf)
99:         return x
100: 
101:     wnew = int(w * dpi / n) * n / dpi
102:     hnew = int(h * dpi / n) * n / dpi
103:     return (correct_roundoff(wnew, dpi, n), correct_roundoff(hnew, dpi, n))
104: 
105: 
106: # A registry for available MovieWriter classes
107: class MovieWriterRegistry(object):
108:     '''Registry of available writer classes by human readable name.'''
109:     def __init__(self):
110:         self.avail = dict()
111:         self._registered = dict()
112:         self._dirty = False
113: 
114:     def set_dirty(self):
115:         '''Sets a flag to re-setup the writers.'''
116:         self._dirty = True
117: 
118:     def register(self, name):
119:         '''Decorator for registering a class under a name.
120: 
121:         Example use::
122: 
123:             @registry.register(name)
124:             class Foo:
125:                 pass
126:         '''
127:         def wrapper(writerClass):
128:             self._registered[name] = writerClass
129:             if writerClass.isAvailable():
130:                 self.avail[name] = writerClass
131:             return writerClass
132:         return wrapper
133: 
134:     def ensure_not_dirty(self):
135:         '''If dirty, reasks the writers if they are available'''
136:         if self._dirty:
137:             self.reset_available_writers()
138: 
139:     def reset_available_writers(self):
140:         '''Reset the available state of all registered writers'''
141:         self.avail = {}
142:         for name, writerClass in self._registered.items():
143:             if writerClass.isAvailable():
144:                 self.avail[name] = writerClass
145:         self._dirty = False
146: 
147:     def list(self):
148:         '''Get a list of available MovieWriters.'''
149:         self.ensure_not_dirty()
150:         return list(self.avail)
151: 
152:     def is_available(self, name):
153:         '''Check if given writer is available by name.
154: 
155:         Parameters
156:         ----------
157:         name : str
158: 
159:         Returns
160:         -------
161:         available : bool
162:         '''
163:         self.ensure_not_dirty()
164:         return name in self.avail
165: 
166:     def __getitem__(self, name):
167:         self.ensure_not_dirty()
168:         if not self.avail:
169:             raise RuntimeError("No MovieWriters available!")
170:         return self.avail[name]
171: 
172: writers = MovieWriterRegistry()
173: 
174: 
175: class AbstractMovieWriter(six.with_metaclass(abc.ABCMeta)):
176:     '''
177:     Abstract base class for writing movies. Fundamentally, what a MovieWriter
178:     does is provide is a way to grab frames by calling grab_frame().
179: 
180:     setup() is called to start the process and finish() is called afterwards.
181: 
182:     This class is set up to provide for writing movie frame data to a pipe.
183:     saving() is provided as a context manager to facilitate this process as::
184: 
185:         with moviewriter.saving(fig, outfile='myfile.mp4', dpi=100):
186:             # Iterate over frames
187:             moviewriter.grab_frame(**savefig_kwargs)
188: 
189:     The use of the context manager ensures that setup() and finish() are
190:     performed as necessary.
191: 
192:     An instance of a concrete subclass of this class can be given as the
193:     ``writer`` argument of `Animation.save()`.
194:     '''
195: 
196:     @abc.abstractmethod
197:     def setup(self, fig, outfile, dpi=None):
198:         '''
199:         Perform setup for writing the movie file.
200: 
201:         Parameters
202:         ----------
203:         fig: `matplotlib.figure.Figure` instance
204:             The figure object that contains the information for frames
205:         outfile: string
206:             The filename of the resulting movie file
207:         dpi: int, optional
208:             The DPI (or resolution) for the file.  This controls the size
209:             in pixels of the resulting movie file. Default is ``fig.dpi``.
210:         '''
211: 
212:     @abc.abstractmethod
213:     def grab_frame(self, **savefig_kwargs):
214:         '''
215:         Grab the image information from the figure and save as a movie frame.
216: 
217:         All keyword arguments in savefig_kwargs are passed on to the `savefig`
218:         command that saves the figure.
219:         '''
220: 
221:     @abc.abstractmethod
222:     def finish(self):
223:         '''Finish any processing for writing the movie.'''
224: 
225:     @contextlib.contextmanager
226:     def saving(self, fig, outfile, dpi, *args, **kwargs):
227:         '''
228:         Context manager to facilitate writing the movie file.
229: 
230:         ``*args, **kw`` are any parameters that should be passed to `setup`.
231:         '''
232:         # This particular sequence is what contextlib.contextmanager wants
233:         self.setup(fig, outfile, dpi, *args, **kwargs)
234:         try:
235:             yield self
236:         finally:
237:             self.finish()
238: 
239: 
240: class MovieWriter(AbstractMovieWriter):
241:     '''Base class for writing movies.
242: 
243:     This class is set up to provide for writing movie frame data to a pipe.
244:     See examples for how to use these classes.
245: 
246:     Attributes
247:     ----------
248:     frame_format : str
249:         The format used in writing frame data, defaults to 'rgba'
250:     fig : `~matplotlib.figure.Figure`
251:         The figure to capture data from.
252:         This must be provided by the sub-classes.
253: 
254:     '''
255: 
256:     def __init__(self, fps=5, codec=None, bitrate=None, extra_args=None,
257:                  metadata=None):
258:         '''MovieWriter
259: 
260:         Parameters
261:         ----------
262:         fps: int
263:             Framerate for movie.
264:         codec: string or None, optional
265:             The codec to use. If ``None`` (the default) the ``animation.codec``
266:             rcParam is used.
267:         bitrate: int or None, optional
268:             The bitrate for the saved movie file, which is one way to control
269:             the output file size and quality. The default value is ``None``,
270:             which uses the ``animation.bitrate`` rcParam.  A value of -1
271:             implies that the bitrate should be determined automatically by the
272:             underlying utility.
273:         extra_args: list of strings or None, optional
274:             A list of extra string arguments to be passed to the underlying
275:             movie utility. The default is ``None``, which passes the additional
276:             arguments in the ``animation.extra_args`` rcParam.
277:         metadata: Dict[str, str] or None
278:             A dictionary of keys and values for metadata to include in the
279:             output file. Some keys that may be of use include:
280:             title, artist, genre, subject, copyright, srcform, comment.
281:         '''
282:         self.fps = fps
283:         self.frame_format = 'rgba'
284: 
285:         if codec is None:
286:             self.codec = rcParams['animation.codec']
287:         else:
288:             self.codec = codec
289: 
290:         if bitrate is None:
291:             self.bitrate = rcParams['animation.bitrate']
292:         else:
293:             self.bitrate = bitrate
294: 
295:         if extra_args is None:
296:             self.extra_args = list(rcParams[self.args_key])
297:         else:
298:             self.extra_args = extra_args
299: 
300:         if metadata is None:
301:             self.metadata = dict()
302:         else:
303:             self.metadata = metadata
304: 
305:     @property
306:     def frame_size(self):
307:         '''A tuple ``(width, height)`` in pixels of a movie frame.'''
308:         w, h = self.fig.get_size_inches()
309:         return int(w * self.dpi), int(h * self.dpi)
310: 
311:     def _adjust_frame_size(self):
312:         if self.codec == 'h264':
313:             wo, ho = self.fig.get_size_inches()
314:             w, h = adjusted_figsize(wo, ho, self.dpi, 2)
315:             if not (wo, ho) == (w, h):
316:                 self.fig.set_size_inches(w, h, forward=True)
317:                 verbose.report('figure size (inches) has been adjusted '
318:                                'from %s x %s to %s x %s' % (wo, ho, w, h),
319:                                level='helpful')
320:         else:
321:             w, h = self.fig.get_size_inches()
322:         verbose.report('frame size in pixels is %s x %s' % self.frame_size,
323:                        level='debug')
324:         return w, h
325: 
326:     def setup(self, fig, outfile, dpi=None):
327:         '''
328:         Perform setup for writing the movie file.
329: 
330:         Parameters
331:         ----------
332:         fig : matplotlib.figure.Figure
333:             The figure object that contains the information for frames
334:         outfile : string
335:             The filename of the resulting movie file
336:         dpi : int, optional
337:             The DPI (or resolution) for the file.  This controls the size
338:             in pixels of the resulting movie file. Default is fig.dpi.
339:         '''
340:         self.outfile = outfile
341:         self.fig = fig
342:         if dpi is None:
343:             dpi = self.fig.dpi
344:         self.dpi = dpi
345:         self._w, self._h = self._adjust_frame_size()
346: 
347:         # Run here so that grab_frame() can write the data to a pipe. This
348:         # eliminates the need for temp files.
349:         self._run()
350: 
351:     def _run(self):
352:         # Uses subprocess to call the program for assembling frames into a
353:         # movie file.  *args* returns the sequence of command line arguments
354:         # from a few configuration options.
355:         command = self._args()
356:         if verbose.ge('debug'):
357:             output = sys.stdout
358:         else:
359:             output = subprocess.PIPE
360:         verbose.report('MovieWriter.run: running command: %s' %
361:                        ' '.join(command))
362:         self._proc = subprocess.Popen(command, shell=False,
363:                                       stdout=output, stderr=output,
364:                                       stdin=subprocess.PIPE,
365:                                       creationflags=subprocess_creation_flags)
366: 
367:     def finish(self):
368:         '''Finish any processing for writing the movie.'''
369:         self.cleanup()
370: 
371:     def grab_frame(self, **savefig_kwargs):
372:         '''
373:         Grab the image information from the figure and save as a movie frame.
374: 
375:         All keyword arguments in savefig_kwargs are passed on to the `savefig`
376:         command that saves the figure.
377:         '''
378:         verbose.report('MovieWriter.grab_frame: Grabbing frame.',
379:                        level='debug')
380:         try:
381:             # re-adjust the figure size in case it has been changed by the
382:             # user.  We must ensure that every frame is the same size or
383:             # the movie will not save correctly.
384:             self.fig.set_size_inches(self._w, self._h)
385:             # Tell the figure to save its data to the sink, using the
386:             # frame format and dpi.
387:             self.fig.savefig(self._frame_sink(), format=self.frame_format,
388:                              dpi=self.dpi, **savefig_kwargs)
389:         except (RuntimeError, IOError) as e:
390:             out, err = self._proc.communicate()
391:             verbose.report('MovieWriter -- Error '
392:                            'running proc:\n%s\n%s' % (out, err),
393:                            level='helpful')
394:             raise IOError('Error saving animation to file (cause: {0}) '
395:                           'Stdout: {1} StdError: {2}. It may help to re-run '
396:                           'with --verbose-debug.'.format(e, out, err))
397: 
398:     def _frame_sink(self):
399:         '''Returns the place to which frames should be written.'''
400:         return self._proc.stdin
401: 
402:     def _args(self):
403:         '''Assemble list of utility-specific command-line arguments.'''
404:         return NotImplementedError("args needs to be implemented by subclass.")
405: 
406:     def cleanup(self):
407:         '''Clean-up and collect the process used to write the movie file.'''
408:         out, err = self._proc.communicate()
409:         self._frame_sink().close()
410:         verbose.report('MovieWriter -- '
411:                        'Command stdout:\n%s' % out, level='debug')
412:         verbose.report('MovieWriter -- '
413:                        'Command stderr:\n%s' % err, level='debug')
414: 
415:     @classmethod
416:     def bin_path(cls):
417:         '''
418:         Returns the binary path to the commandline tool used by a specific
419:         subclass. This is a class method so that the tool can be looked for
420:         before making a particular MovieWriter subclass available.
421:         '''
422:         return str(rcParams[cls.exec_key])
423: 
424:     @classmethod
425:     def isAvailable(cls):
426:         '''
427:         Check to see if a MovieWriter subclass is actually available by
428:         running the commandline tool.
429:         '''
430:         bin_path = cls.bin_path()
431:         if not bin_path:
432:             return False
433:         try:
434:             p = subprocess.Popen(
435:                 bin_path,
436:                 shell=False,
437:                 stdout=subprocess.PIPE,
438:                 stderr=subprocess.PIPE,
439:                 creationflags=subprocess_creation_flags)
440:             return cls._handle_subprocess(p)
441:         except OSError:
442:             return False
443: 
444:     @classmethod
445:     def _handle_subprocess(cls, process):
446:         process.communicate()
447:         return True
448: 
449: 
450: class FileMovieWriter(MovieWriter):
451:     '''`MovieWriter` for writing to individual files and stitching at the end.
452: 
453:     This must be sub-classed to be useful.
454:     '''
455:     def __init__(self, *args, **kwargs):
456:         MovieWriter.__init__(self, *args, **kwargs)
457:         self.frame_format = rcParams['animation.frame_format']
458: 
459:     def setup(self, fig, outfile, dpi=None, frame_prefix='_tmp',
460:               clear_temp=True):
461:         '''Perform setup for writing the movie file.
462: 
463:         Parameters
464:         ----------
465:         fig : matplotlib.figure.Figure
466:             The figure to grab the rendered frames from.
467:         outfile : str
468:             The filename of the resulting movie file.
469:         dpi : number, optional
470:             The dpi of the output file. This, with the figure size,
471:             controls the size in pixels of the resulting movie file.
472:             Default is fig.dpi.
473:         frame_prefix : str, optional
474:             The filename prefix to use for temporary files.  Defaults to
475:             ``'_tmp'``.
476:         clear_temp : bool, optional
477:             If the temporary files should be deleted after stitching
478:             the final result.  Setting this to ``False`` can be useful for
479:             debugging.  Defaults to ``True``.
480: 
481:         '''
482:         self.fig = fig
483:         self.outfile = outfile
484:         if dpi is None:
485:             dpi = self.fig.dpi
486:         self.dpi = dpi
487:         self._adjust_frame_size()
488: 
489:         self.clear_temp = clear_temp
490:         self.temp_prefix = frame_prefix
491:         self._frame_counter = 0  # used for generating sequential file names
492:         self._temp_names = list()
493:         self.fname_format_str = '%s%%07d.%s'
494: 
495:     @property
496:     def frame_format(self):
497:         '''
498:         Format (png, jpeg, etc.) to use for saving the frames, which can be
499:         decided by the individual subclasses.
500:         '''
501:         return self._frame_format
502: 
503:     @frame_format.setter
504:     def frame_format(self, frame_format):
505:         if frame_format in self.supported_formats:
506:             self._frame_format = frame_format
507:         else:
508:             self._frame_format = self.supported_formats[0]
509: 
510:     def _base_temp_name(self):
511:         # Generates a template name (without number) given the frame format
512:         # for extension and the prefix.
513:         return self.fname_format_str % (self.temp_prefix, self.frame_format)
514: 
515:     def _frame_sink(self):
516:         # Creates a filename for saving using the basename and the current
517:         # counter.
518:         fname = self._base_temp_name() % self._frame_counter
519: 
520:         # Save the filename so we can delete it later if necessary
521:         self._temp_names.append(fname)
522:         verbose.report(
523:             'FileMovieWriter.frame_sink: saving frame %d to fname=%s' %
524:             (self._frame_counter, fname),
525:             level='debug')
526:         self._frame_counter += 1  # Ensures each created name is 'unique'
527: 
528:         # This file returned here will be closed once it's used by savefig()
529:         # because it will no longer be referenced and will be gc-ed.
530:         return open(fname, 'wb')
531: 
532:     def grab_frame(self, **savefig_kwargs):
533:         '''
534:         Grab the image information from the figure and save as a movie frame.
535:         All keyword arguments in savefig_kwargs are passed on to the `savefig`
536:         command that saves the figure.
537:         '''
538:         # Overloaded to explicitly close temp file.
539:         verbose.report('MovieWriter.grab_frame: Grabbing frame.',
540:                        level='debug')
541:         try:
542:             # Tell the figure to save its data to the sink, using the
543:             # frame format and dpi.
544:             with self._frame_sink() as myframesink:
545:                 self.fig.savefig(myframesink, format=self.frame_format,
546:                                  dpi=self.dpi, **savefig_kwargs)
547: 
548:         except RuntimeError:
549:             out, err = self._proc.communicate()
550:             verbose.report('MovieWriter -- Error '
551:                            'running proc:\n%s\n%s' % (out,
552:                                                       err), level='helpful')
553:             raise
554: 
555:     def finish(self):
556:         # Call run here now that all frame grabbing is done. All temp files
557:         # are available to be assembled.
558:         self._run()
559:         MovieWriter.finish(self)  # Will call clean-up
560: 
561:         # Check error code for creating file here, since we just run
562:         # the process here, rather than having an open pipe.
563:         if self._proc.returncode:
564:             try:
565:                 stdout = [s.decode() for s in self._proc._stdout_buff]
566:                 stderr = [s.decode() for s in self._proc._stderr_buff]
567:                 verbose.report("MovieWriter.finish: stdout: %s" % stdout,
568:                                level='helpful')
569:                 verbose.report("MovieWriter.finish: stderr: %s" % stderr,
570:                                level='helpful')
571:             except Exception as e:
572:                 pass
573:             msg = ('Error creating movie, return code: ' +
574:                    str(self._proc.returncode) +
575:                    ' Try setting mpl.verbose.set_level("helpful")')
576:             raise RuntimeError(msg)
577: 
578:     def cleanup(self):
579:         MovieWriter.cleanup(self)
580: 
581:         # Delete temporary files
582:         if self.clear_temp:
583:             verbose.report(
584:                 'MovieWriter: clearing temporary fnames=%s' %
585:                 str(self._temp_names),
586:                 level='debug')
587:             for fname in self._temp_names:
588:                 os.remove(fname)
589: 
590: 
591: # Base class of ffmpeg information. Has the config keys and the common set
592: # of arguments that controls the *output* side of things.
593: class FFMpegBase(object):
594:     '''Mixin class for FFMpeg output.
595: 
596:     To be useful this must be multiply-inherited from with a
597:     `MovieWriterBase` sub-class.
598:     '''
599: 
600:     exec_key = 'animation.ffmpeg_path'
601:     args_key = 'animation.ffmpeg_args'
602: 
603:     @property
604:     def output_args(self):
605:         args = ['-vcodec', self.codec]
606:         # For h264, the default format is yuv444p, which is not compatible
607:         # with quicktime (and others). Specifying yuv420p fixes playback on
608:         # iOS,as well as HTML5 video in firefox and safari (on both Win and
609:         # OSX). Also fixes internet explorer. This is as of 2015/10/29.
610:         if self.codec == 'h264' and '-pix_fmt' not in self.extra_args:
611:             args.extend(['-pix_fmt', 'yuv420p'])
612:         # The %dk adds 'k' as a suffix so that ffmpeg treats our bitrate as in
613:         # kbps
614:         if self.bitrate > 0:
615:             args.extend(['-b', '%dk' % self.bitrate])
616:         if self.extra_args:
617:             args.extend(self.extra_args)
618:         for k, v in six.iteritems(self.metadata):
619:             args.extend(['-metadata', '%s=%s' % (k, v)])
620: 
621:         return args + ['-y', self.outfile]
622: 
623:     @classmethod
624:     def _handle_subprocess(cls, process):
625:         _, err = process.communicate()
626:         # Ubuntu 12.04 ships a broken ffmpeg binary which we shouldn't use
627:         # NOTE : when removed, remove the same method in AVConvBase.
628:         if 'Libav' in err.decode():
629:             return False
630:         return True
631: 
632: 
633: # Combine FFMpeg options with pipe-based writing
634: @writers.register('ffmpeg')
635: class FFMpegWriter(FFMpegBase, MovieWriter):
636:     '''Pipe-based ffmpeg writer.
637: 
638:     Frames are streamed directly to ffmpeg via a pipe and written in a single
639:     pass.
640:     '''
641:     def _args(self):
642:         # Returns the command line parameters for subprocess to use
643:         # ffmpeg to create a movie using a pipe.
644:         args = [self.bin_path(), '-f', 'rawvideo', '-vcodec', 'rawvideo',
645:                 '-s', '%dx%d' % self.frame_size, '-pix_fmt', self.frame_format,
646:                 '-r', str(self.fps)]
647:         # Logging is quieted because subprocess.PIPE has limited buffer size.
648:         if not verbose.ge('debug'):
649:             args += ['-loglevel', 'quiet']
650:         args += ['-i', 'pipe:'] + self.output_args
651:         return args
652: 
653: 
654: # Combine FFMpeg options with temp file-based writing
655: @writers.register('ffmpeg_file')
656: class FFMpegFileWriter(FFMpegBase, FileMovieWriter):
657:     '''File-based ffmpeg writer.
658: 
659:     Frames are written to temporary files on disk and then stitched
660:     together at the end.
661: 
662:     '''
663:     supported_formats = ['png', 'jpeg', 'ppm', 'tiff', 'sgi', 'bmp',
664:                          'pbm', 'raw', 'rgba']
665: 
666:     def _args(self):
667:         # Returns the command line parameters for subprocess to use
668:         # ffmpeg to create a movie using a collection of temp images
669:         return [self.bin_path(), '-r', str(self.fps),
670:                 '-i', self._base_temp_name(),
671:                 '-vframes', str(self._frame_counter)] + self.output_args
672: 
673: 
674: # Base class of avconv information.  AVConv has identical arguments to
675: # FFMpeg
676: class AVConvBase(FFMpegBase):
677:     '''Mixin class for avconv output.
678: 
679:     To be useful this must be multiply-inherited from with a
680:     `MovieWriterBase` sub-class.
681:     '''
682: 
683:     exec_key = 'animation.avconv_path'
684:     args_key = 'animation.avconv_args'
685: 
686:     # NOTE : should be removed when the same method is removed in FFMpegBase.
687:     @classmethod
688:     def _handle_subprocess(cls, process):
689:         return MovieWriter._handle_subprocess(process)
690: 
691: 
692: # Combine AVConv options with pipe-based writing
693: @writers.register('avconv')
694: class AVConvWriter(AVConvBase, FFMpegWriter):
695:     '''Pipe-based avconv writer.
696: 
697:     Frames are streamed directly to avconv via a pipe and written in a single
698:     pass.
699:     '''
700: 
701: 
702: # Combine AVConv options with file-based writing
703: @writers.register('avconv_file')
704: class AVConvFileWriter(AVConvBase, FFMpegFileWriter):
705:     '''File-based avconv writer.
706: 
707:     Frames are written to temporary files on disk and then stitched
708:     together at the end.
709: 
710:     '''
711: 
712: 
713: # Base class of mencoder information. Contains configuration key information
714: # as well as arguments for controlling *output*
715: class MencoderBase(object):
716:     exec_key = 'animation.mencoder_path'
717:     args_key = 'animation.mencoder_args'
718: 
719:     # Mencoder only allows certain keys, other ones cause the program
720:     # to fail.
721:     allowed_metadata = ['name', 'artist', 'genre', 'subject', 'copyright',
722:                         'srcform', 'comment']
723: 
724:     # Mencoder mandates using name, but 'title' works better with ffmpeg.
725:     # If we find it, just put it's value into name
726:     def _remap_metadata(self):
727:         if 'title' in self.metadata:
728:             self.metadata['name'] = self.metadata['title']
729: 
730:     @property
731:     def output_args(self):
732:         self._remap_metadata()
733:         lavcopts = {'vcodec': self.codec}
734:         if self.bitrate > 0:
735:             lavcopts.update(vbitrate=self.bitrate)
736:         args = ['-o', self.outfile, '-ovc', 'lavc', '-lavcopts',
737:                 ':'.join(itertools.starmap('{0}={1}'.format,
738:                                            lavcopts.items()))]
739:         if self.extra_args:
740:             args.extend(self.extra_args)
741:         if self.metadata:
742:             args.extend(['-info', ':'.join('%s=%s' % (k, v)
743:                          for k, v in six.iteritems(self.metadata)
744:                          if k in self.allowed_metadata)])
745:         return args
746: 
747: 
748: # The message must be a single line; internal newlines cause sphinx failure.
749: mencoder_dep = ("Support for mencoder is only partially functional, "
750:                 "and will be removed entirely in 2.2. "
751:                 "Please use ffmpeg instead.")
752: 
753: 
754: @writers.register('mencoder')
755: class MencoderWriter(MovieWriter, MencoderBase):
756: 
757:     @deprecated('2.0', message=mencoder_dep)
758:     def __init__(self, *args, **kwargs):
759:         with rc_context(rc={'animation.codec': 'mpeg4'}):
760:             super(MencoderWriter, self).__init__(*args, **kwargs)
761: 
762:     def _args(self):
763:         # Returns the command line parameters for subprocess to use
764:         # mencoder to create a movie
765:         return [self.bin_path(), '-', '-demuxer', 'rawvideo', '-rawvideo',
766:                 ('w=%i:h=%i:' % self.frame_size +
767:                 'fps=%i:format=%s' % (self.fps,
768:                                       self.frame_format))] + self.output_args
769: 
770: 
771: # Combine Mencoder options with temp file-based writing
772: @writers.register('mencoder_file')
773: class MencoderFileWriter(FileMovieWriter, MencoderBase):
774:     supported_formats = ['png', 'jpeg', 'tga', 'sgi']
775: 
776:     @deprecated('2.0', message=mencoder_dep)
777:     def __init__(self, *args, **kwargs):
778:         with rc_context(rc={'animation.codec': 'mpeg4'}):
779:             super(MencoderFileWriter, self).__init__(*args, **kwargs)
780: 
781:     def _args(self):
782:         # Returns the command line parameters for subprocess to use
783:         # mencoder to create a movie
784:         return [self.bin_path(),
785:                 'mf://%s*.%s' % (self.temp_prefix, self.frame_format),
786:                 '-frames', str(self._frame_counter), '-mf',
787:                 'type=%s:fps=%d' % (self.frame_format,
788:                                     self.fps)] + self.output_args
789: 
790: 
791: # Base class for animated GIFs with convert utility
792: class ImageMagickBase(object):
793:     '''Mixin class for ImageMagick output.
794: 
795:     To be useful this must be multiply-inherited from with a
796:     `MovieWriterBase` sub-class.
797:     '''
798: 
799:     exec_key = 'animation.convert_path'
800:     args_key = 'animation.convert_args'
801: 
802:     @property
803:     def delay(self):
804:         return 100. / self.fps
805: 
806:     @property
807:     def output_args(self):
808:         return [self.outfile]
809: 
810:     @classmethod
811:     def _init_from_registry(cls):
812:         if sys.platform != 'win32' or rcParams[cls.exec_key] != 'convert':
813:             return
814:         from six.moves import winreg
815:         for flag in (0, winreg.KEY_WOW64_32KEY, winreg.KEY_WOW64_64KEY):
816:             try:
817:                 hkey = winreg.OpenKeyEx(winreg.HKEY_LOCAL_MACHINE,
818:                                         'Software\\Imagemagick\\Current',
819:                                         0, winreg.KEY_QUERY_VALUE | flag)
820:                 binpath = winreg.QueryValueEx(hkey, 'BinPath')[0]
821:                 winreg.CloseKey(hkey)
822:                 binpath += '\\convert.exe'
823:                 break
824:             except Exception:
825:                 binpath = ''
826:         rcParams[cls.exec_key] = rcParamsDefault[cls.exec_key] = binpath
827: 
828:     @classmethod
829:     def isAvailable(cls):
830:         '''
831:         Check to see if a ImageMagickWriter is actually available.
832: 
833:         Done by first checking the windows registry (if applicable) and then
834:         running the commandline tool.
835:         '''
836:         bin_path = cls.bin_path()
837:         if bin_path == "convert":
838:             cls._init_from_registry()
839:         return super(ImageMagickBase, cls).isAvailable()
840: 
841: ImageMagickBase._init_from_registry()
842: 
843: 
844: # Note: the base classes need to be in that order to get
845: # isAvailable() from ImageMagickBase called and not the
846: # one from MovieWriter. The latter is then called by the
847: # former.
848: @writers.register('imagemagick')
849: class ImageMagickWriter(ImageMagickBase, MovieWriter):
850:     '''Pipe-based animated gif.
851: 
852:     Frames are streamed directly to ImageMagick via a pipe and written
853:     in a single pass.
854: 
855:     '''
856:     def _args(self):
857:         return ([self.bin_path(),
858:                  '-size', '%ix%i' % self.frame_size, '-depth', '8',
859:                  '-delay', str(self.delay), '-loop', '0',
860:                  '%s:-' % self.frame_format]
861:                 + self.output_args)
862: 
863: 
864: # Note: the base classes need to be in that order to get
865: # isAvailable() from ImageMagickBase called and not the
866: # one from MovieWriter. The latter is then called by the
867: # former.
868: @writers.register('imagemagick_file')
869: class ImageMagickFileWriter(ImageMagickBase, FileMovieWriter):
870:     '''File-based animated gif writer.
871: 
872:     Frames are written to temporary files on disk and then stitched
873:     together at the end.
874: 
875:     '''
876: 
877:     supported_formats = ['png', 'jpeg', 'ppm', 'tiff', 'sgi', 'bmp',
878:                          'pbm', 'raw', 'rgba']
879: 
880:     def _args(self):
881:         return ([self.bin_path(), '-delay', str(self.delay), '-loop', '0',
882:                  '%s*.%s' % (self.temp_prefix, self.frame_format)]
883:                 + self.output_args)
884: 
885: 
886: # Taken directly from jakevdp's JSAnimation package at
887: # http://github.com/jakevdp/JSAnimation
888: def _included_frames(frame_list, frame_format):
889:     '''frame_list should be a list of filenames'''
890:     return INCLUDED_FRAMES.format(Nframes=len(frame_list),
891:                                   frame_dir=os.path.dirname(frame_list[0]),
892:                                   frame_format=frame_format)
893: 
894: 
895: def _embedded_frames(frame_list, frame_format):
896:     '''frame_list should be a list of base64-encoded png files'''
897:     template = '  frames[{0}] = "data:image/{1};base64,{2}"\n'
898:     embedded = "\n"
899:     for i, frame_data in enumerate(frame_list):
900:         embedded += template.format(i, frame_format,
901:                                     frame_data.replace('\n', '\\\n'))
902:     return embedded
903: 
904: 
905: @writers.register('html')
906: class HTMLWriter(FileMovieWriter):
907:     supported_formats = ['png', 'jpeg', 'tiff', 'svg']
908:     args_key = 'animation.html_args'
909: 
910:     @classmethod
911:     def isAvailable(cls):
912:         return True
913: 
914:     def __init__(self, fps=30, codec=None, bitrate=None, extra_args=None,
915:                  metadata=None, embed_frames=False, default_mode='loop',
916:                  embed_limit=None):
917:         self.embed_frames = embed_frames
918:         self.default_mode = default_mode.lower()
919: 
920:         # Save embed limit, which is given in MB
921:         if embed_limit is None:
922:             self._bytes_limit = rcParams['animation.embed_limit']
923:         else:
924:             self._bytes_limit = embed_limit
925: 
926:         # Convert from MB to bytes
927:         self._bytes_limit *= 1024 * 1024
928: 
929:         if self.default_mode not in ['loop', 'once', 'reflect']:
930:             self.default_mode = 'loop'
931:             warnings.warn("unrecognized default_mode: using 'loop'")
932: 
933:         self._saved_frames = []
934:         self._total_bytes = 0
935:         self._hit_limit = False
936:         super(HTMLWriter, self).__init__(fps, codec, bitrate,
937:                                          extra_args, metadata)
938: 
939:     def setup(self, fig, outfile, dpi, frame_dir=None):
940:         if os.path.splitext(outfile)[-1] not in ['.html', '.htm']:
941:             raise ValueError("outfile must be *.htm or *.html")
942: 
943:         if not self.embed_frames:
944:             if frame_dir is None:
945:                 frame_dir = outfile.rstrip('.html') + '_frames'
946:             if not os.path.exists(frame_dir):
947:                 os.makedirs(frame_dir)
948:             frame_prefix = os.path.join(frame_dir, 'frame')
949:         else:
950:             frame_prefix = None
951: 
952:         super(HTMLWriter, self).setup(fig, outfile, dpi,
953:                                       frame_prefix, clear_temp=False)
954: 
955:     def grab_frame(self, **savefig_kwargs):
956:         if self.embed_frames:
957:             # Just stop processing if we hit the limit
958:             if self._hit_limit:
959:                 return
960:             suffix = '.' + self.frame_format
961:             f = InMemory()
962:             self.fig.savefig(f, format=self.frame_format,
963:                              dpi=self.dpi, **savefig_kwargs)
964:             imgdata64 = encodebytes(f.getvalue()).decode('ascii')
965:             self._total_bytes += len(imgdata64)
966:             if self._total_bytes >= self._bytes_limit:
967:                 warnings.warn("Animation size has reached {0._total_bytes} "
968:                               "bytes, exceeding the limit of "
969:                               "{0._bytes_limit}. If you're sure you want "
970:                               "a larger animation embedded, set the "
971:                               "animation.embed_limit rc parameter to a "
972:                               "larger value (in MB). This and further frames"
973:                               " will be dropped.".format(self))
974:                 self._hit_limit = True
975:             else:
976:                 self._saved_frames.append(imgdata64)
977:         else:
978:             return super(HTMLWriter, self).grab_frame(**savefig_kwargs)
979: 
980:     def _run(self):
981:         # make a duck-typed subprocess stand in
982:         # this is called by the MovieWriter base class, but not used here.
983:         class ProcessStandin(object):
984:             returncode = 0
985: 
986:             def communicate(self):
987:                 return '', ''
988: 
989:         self._proc = ProcessStandin()
990: 
991:         # save the frames to an html file
992:         if self.embed_frames:
993:             fill_frames = _embedded_frames(self._saved_frames,
994:                                            self.frame_format)
995:         else:
996:             # temp names is filled by FileMovieWriter
997:             fill_frames = _included_frames(self._temp_names,
998:                                            self.frame_format)
999: 
1000:         mode_dict = dict(once_checked='',
1001:                          loop_checked='',
1002:                          reflect_checked='')
1003:         mode_dict[self.default_mode + '_checked'] = 'checked'
1004: 
1005:         interval = 1000 // self.fps
1006: 
1007:         with open(self.outfile, 'w') as of:
1008:             of.write(JS_INCLUDE)
1009:             of.write(DISPLAY_TEMPLATE.format(id=uuid.uuid4().hex,
1010:                                              Nframes=len(self._temp_names),
1011:                                              fill_frames=fill_frames,
1012:                                              interval=interval,
1013:                                              **mode_dict))
1014: 
1015: 
1016: class Animation(object):
1017:     '''This class wraps the creation of an animation using matplotlib.
1018: 
1019:     It is only a base class which should be subclassed to provide
1020:     needed behavior.
1021: 
1022:     This class is not typically used directly.
1023: 
1024:     Parameters
1025:     ----------
1026:     fig : matplotlib.figure.Figure
1027:        The figure object that is used to get draw, resize, and any
1028:        other needed events.
1029: 
1030:     event_source : object, optional
1031:        A class that can run a callback when desired events
1032:        are generated, as well as be stopped and started.
1033: 
1034:        Examples include timers (see :class:`TimedAnimation`) and file
1035:        system notifications.
1036: 
1037:     blit : bool, optional
1038:        controls whether blitting is used to optimize drawing.  Defaults
1039:        to ``False``.
1040: 
1041:     See Also
1042:     --------
1043:     FuncAnimation,  ArtistAnimation
1044: 
1045:     '''
1046:     def __init__(self, fig, event_source=None, blit=False):
1047:         self._fig = fig
1048:         # Disables blitting for backends that don't support it.  This
1049:         # allows users to request it if available, but still have a
1050:         # fallback that works if it is not.
1051:         self._blit = blit and fig.canvas.supports_blit
1052: 
1053:         # These are the basics of the animation.  The frame sequence represents
1054:         # information for each frame of the animation and depends on how the
1055:         # drawing is handled by the subclasses. The event source fires events
1056:         # that cause the frame sequence to be iterated.
1057:         self.frame_seq = self.new_frame_seq()
1058:         self.event_source = event_source
1059: 
1060:         # Instead of starting the event source now, we connect to the figure's
1061:         # draw_event, so that we only start once the figure has been drawn.
1062:         self._first_draw_id = fig.canvas.mpl_connect('draw_event', self._start)
1063: 
1064:         # Connect to the figure's close_event so that we don't continue to
1065:         # fire events and try to draw to a deleted figure.
1066:         self._close_id = self._fig.canvas.mpl_connect('close_event',
1067:                                                       self._stop)
1068:         if self._blit:
1069:             self._setup_blit()
1070: 
1071:     def _start(self, *args):
1072:         '''
1073:         Starts interactive animation. Adds the draw frame command to the GUI
1074:         handler, calls show to start the event loop.
1075:         '''
1076:         # First disconnect our draw event handler
1077:         self._fig.canvas.mpl_disconnect(self._first_draw_id)
1078:         self._first_draw_id = None  # So we can check on save
1079: 
1080:         # Now do any initial draw
1081:         self._init_draw()
1082: 
1083:         # Add our callback for stepping the animation and
1084:         # actually start the event_source.
1085:         self.event_source.add_callback(self._step)
1086:         self.event_source.start()
1087: 
1088:     def _stop(self, *args):
1089:         # On stop we disconnect all of our events.
1090:         if self._blit:
1091:             self._fig.canvas.mpl_disconnect(self._resize_id)
1092:         self._fig.canvas.mpl_disconnect(self._close_id)
1093:         self.event_source.remove_callback(self._step)
1094:         self.event_source = None
1095: 
1096:     def save(self, filename, writer=None, fps=None, dpi=None, codec=None,
1097:              bitrate=None, extra_args=None, metadata=None, extra_anim=None,
1098:              savefig_kwargs=None):
1099:         '''Saves a movie file by drawing every frame.
1100: 
1101:         Parameters
1102:         ----------
1103: 
1104:         filename : str
1105:             The output filename, e.g., :file:`mymovie.mp4`.
1106: 
1107:         writer : :class:`MovieWriter` or str, optional
1108:             A `MovieWriter` instance to use or a key that identifies a
1109:             class to use, such as 'ffmpeg' or 'mencoder'. If ``None``,
1110:             defaults to ``rcParams['animation.writer']``.
1111: 
1112:         fps : number, optional
1113:            Frames per second in the movie. Defaults to ``None``, which will use
1114:            the animation's specified interval to set the frames per second.
1115: 
1116:         dpi : number, optional
1117:            Controls the dots per inch for the movie frames.  This
1118:            combined with the figure's size in inches controls the size of
1119:            the movie.  If ``None``, defaults to ``rcparam['savefig.dpi']``.
1120: 
1121:         codec : str, optional
1122:            The video codec to be used. Not all codecs are supported by
1123:            a given :class:`MovieWriter`. If ``None``,
1124:            default to ``rcParams['animation.codec']``.
1125: 
1126:         bitrate : number, optional
1127:            Specifies the number of bits used per second in the compressed
1128:            movie, in kilobits per second. A higher number means a higher
1129:            quality movie, but at the cost of increased file size. If ``None``,
1130:            defaults to ``rcParam['animation.bitrate']``.
1131: 
1132:         extra_args : list, optional
1133:            List of extra string arguments to be passed to the
1134:            underlying movie utility. If ``None``, defaults to
1135:            ``rcParams['animation.extra_args']``
1136: 
1137:         metadata : Dict[str, str], optional
1138:            Dictionary of keys and values for metadata to include in
1139:            the output file. Some keys that may be of use include:
1140:            title, artist, genre, subject, copyright, srcform, comment.
1141: 
1142:         extra_anim : list, optional
1143:            Additional `Animation` objects that should be included
1144:            in the saved movie file. These need to be from the same
1145:            `matplotlib.figure.Figure` instance. Also, animation frames will
1146:            just be simply combined, so there should be a 1:1 correspondence
1147:            between the frames from the different animations.
1148: 
1149:         savefig_kwargs : dict, optional
1150:            Is a dictionary containing keyword arguments to be passed
1151:            on to the `savefig` command which is called repeatedly to
1152:            save the individual frames.
1153: 
1154:         Notes
1155:         -----
1156:         fps, codec, bitrate, extra_args, metadata are used to
1157:         construct a :class:`MovieWriter` instance and can only be
1158:         passed if `writer` is a string.  If they are passed as
1159:         non-`None` and ``writer`` is a :class:`MovieWriter`, a
1160:         `RuntimeError` will be raised.
1161: 
1162:         '''
1163:         # If the writer is None, use the rc param to find the name of the one
1164:         # to use
1165:         if writer is None:
1166:             writer = rcParams['animation.writer']
1167:         elif (not isinstance(writer, six.string_types) and
1168:                 any(arg is not None
1169:                     for arg in (fps, codec, bitrate, extra_args, metadata))):
1170:             raise RuntimeError('Passing in values for arguments '
1171:                                'fps, codec, bitrate, extra_args, or metadata '
1172:                                'is not supported when writer is an existing '
1173:                                'MovieWriter instance. These should instead be '
1174:                                'passed as arguments when creating the '
1175:                                'MovieWriter instance.')
1176: 
1177:         if savefig_kwargs is None:
1178:             savefig_kwargs = {}
1179: 
1180:         # Need to disconnect the first draw callback, since we'll be doing
1181:         # draws. Otherwise, we'll end up starting the animation.
1182:         if self._first_draw_id is not None:
1183:             self._fig.canvas.mpl_disconnect(self._first_draw_id)
1184:             reconnect_first_draw = True
1185:         else:
1186:             reconnect_first_draw = False
1187: 
1188:         if fps is None and hasattr(self, '_interval'):
1189:             # Convert interval in ms to frames per second
1190:             fps = 1000. / self._interval
1191: 
1192:         # Re-use the savefig DPI for ours if none is given
1193:         if dpi is None:
1194:             dpi = rcParams['savefig.dpi']
1195:         if dpi == 'figure':
1196:             dpi = self._fig.dpi
1197: 
1198:         if codec is None:
1199:             codec = rcParams['animation.codec']
1200: 
1201:         if bitrate is None:
1202:             bitrate = rcParams['animation.bitrate']
1203: 
1204:         all_anim = [self]
1205:         if extra_anim is not None:
1206:             all_anim.extend(anim
1207:                             for anim
1208:                             in extra_anim if anim._fig is self._fig)
1209: 
1210:         # If we have the name of a writer, instantiate an instance of the
1211:         # registered class.
1212:         if isinstance(writer, six.string_types):
1213:             if writer in writers.avail:
1214:                 writer = writers[writer](fps, codec, bitrate,
1215:                                          extra_args=extra_args,
1216:                                          metadata=metadata)
1217:             else:
1218:                 warnings.warn("MovieWriter %s unavailable" % writer)
1219: 
1220:                 try:
1221:                     writer = writers[writers.list()[0]](fps, codec, bitrate,
1222:                                                         extra_args=extra_args,
1223:                                                         metadata=metadata)
1224:                 except IndexError:
1225:                     raise ValueError("Cannot save animation: no writers are "
1226:                                      "available. Please install "
1227:                                      "ffmpeg to save animations.")
1228: 
1229:         verbose.report('Animation.save using %s' % type(writer),
1230:                        level='helpful')
1231: 
1232:         if 'bbox_inches' in savefig_kwargs:
1233:             warnings.warn("Warning: discarding the 'bbox_inches' argument in "
1234:                           "'savefig_kwargs' as it may cause frame size "
1235:                           "to vary, which is inappropriate for animation.")
1236:             savefig_kwargs.pop('bbox_inches')
1237: 
1238:         # Create a new sequence of frames for saved data. This is different
1239:         # from new_frame_seq() to give the ability to save 'live' generated
1240:         # frame information to be saved later.
1241:         # TODO: Right now, after closing the figure, saving a movie won't work
1242:         # since GUI widgets are gone. Either need to remove extra code to
1243:         # allow for this non-existent use case or find a way to make it work.
1244:         with rc_context():
1245:             if rcParams['savefig.bbox'] == 'tight':
1246:                 verbose.report("Disabling savefig.bbox = 'tight', as it "
1247:                                "may cause frame size to vary, which "
1248:                                "is inappropriate for animation.",
1249:                                level='helpful')
1250:                 rcParams['savefig.bbox'] = None
1251:             with writer.saving(self._fig, filename, dpi):
1252:                 for anim in all_anim:
1253:                     # Clear the initial frame
1254:                     anim._init_draw()
1255:                 for data in zip(*[a.new_saved_frame_seq()
1256:                                   for a in all_anim]):
1257:                     for anim, d in zip(all_anim, data):
1258:                         # TODO: See if turning off blit is really necessary
1259:                         anim._draw_next_frame(d, blit=False)
1260:                     writer.grab_frame(**savefig_kwargs)
1261: 
1262:         # Reconnect signal for first draw if necessary
1263:         if reconnect_first_draw:
1264:             self._first_draw_id = self._fig.canvas.mpl_connect('draw_event',
1265:                                                                self._start)
1266: 
1267:     def _step(self, *args):
1268:         '''
1269:         Handler for getting events. By default, gets the next frame in the
1270:         sequence and hands the data off to be drawn.
1271:         '''
1272:         # Returns True to indicate that the event source should continue to
1273:         # call _step, until the frame sequence reaches the end of iteration,
1274:         # at which point False will be returned.
1275:         try:
1276:             framedata = next(self.frame_seq)
1277:             self._draw_next_frame(framedata, self._blit)
1278:             return True
1279:         except StopIteration:
1280:             return False
1281: 
1282:     def new_frame_seq(self):
1283:         '''Creates a new sequence of frame information.'''
1284:         # Default implementation is just an iterator over self._framedata
1285:         return iter(self._framedata)
1286: 
1287:     def new_saved_frame_seq(self):
1288:         '''Creates a new sequence of saved/cached frame information.'''
1289:         # Default is the same as the regular frame sequence
1290:         return self.new_frame_seq()
1291: 
1292:     def _draw_next_frame(self, framedata, blit):
1293:         # Breaks down the drawing of the next frame into steps of pre- and
1294:         # post- draw, as well as the drawing of the frame itself.
1295:         self._pre_draw(framedata, blit)
1296:         self._draw_frame(framedata)
1297:         self._post_draw(framedata, blit)
1298: 
1299:     def _init_draw(self):
1300:         # Initial draw to clear the frame. Also used by the blitting code
1301:         # when a clean base is required.
1302:         pass
1303: 
1304:     def _pre_draw(self, framedata, blit):
1305:         # Perform any cleaning or whatnot before the drawing of the frame.
1306:         # This default implementation allows blit to clear the frame.
1307:         if blit:
1308:             self._blit_clear(self._drawn_artists, self._blit_cache)
1309: 
1310:     def _draw_frame(self, framedata):
1311:         # Performs actual drawing of the frame.
1312:         raise NotImplementedError('Needs to be implemented by subclasses to'
1313:                                   ' actually make an animation.')
1314: 
1315:     def _post_draw(self, framedata, blit):
1316:         # After the frame is rendered, this handles the actual flushing of
1317:         # the draw, which can be a direct draw_idle() or make use of the
1318:         # blitting.
1319:         if blit and self._drawn_artists:
1320:             self._blit_draw(self._drawn_artists, self._blit_cache)
1321:         else:
1322:             self._fig.canvas.draw_idle()
1323: 
1324:     # The rest of the code in this class is to facilitate easy blitting
1325:     def _blit_draw(self, artists, bg_cache):
1326:         # Handles blitted drawing, which renders only the artists given instead
1327:         # of the entire figure.
1328:         updated_ax = []
1329:         for a in artists:
1330:             # If we haven't cached the background for this axes object, do
1331:             # so now. This might not always be reliable, but it's an attempt
1332:             # to automate the process.
1333:             if a.axes not in bg_cache:
1334:                 bg_cache[a.axes] = a.figure.canvas.copy_from_bbox(a.axes.bbox)
1335:             a.axes.draw_artist(a)
1336:             updated_ax.append(a.axes)
1337: 
1338:         # After rendering all the needed artists, blit each axes individually.
1339:         for ax in set(updated_ax):
1340:             ax.figure.canvas.blit(ax.bbox)
1341: 
1342:     def _blit_clear(self, artists, bg_cache):
1343:         # Get a list of the axes that need clearing from the artists that
1344:         # have been drawn. Grab the appropriate saved background from the
1345:         # cache and restore.
1346:         axes = set(a.axes for a in artists)
1347:         for a in axes:
1348:             if a in bg_cache:
1349:                 a.figure.canvas.restore_region(bg_cache[a])
1350: 
1351:     def _setup_blit(self):
1352:         # Setting up the blit requires: a cache of the background for the
1353:         # axes
1354:         self._blit_cache = dict()
1355:         self._drawn_artists = []
1356:         self._resize_id = self._fig.canvas.mpl_connect('resize_event',
1357:                                                        self._handle_resize)
1358:         self._post_draw(None, self._blit)
1359: 
1360:     def _handle_resize(self, *args):
1361:         # On resize, we need to disable the resize event handling so we don't
1362:         # get too many events. Also stop the animation events, so that
1363:         # we're paused. Reset the cache and re-init. Set up an event handler
1364:         # to catch once the draw has actually taken place.
1365:         self._fig.canvas.mpl_disconnect(self._resize_id)
1366:         self.event_source.stop()
1367:         self._blit_cache.clear()
1368:         self._init_draw()
1369:         self._resize_id = self._fig.canvas.mpl_connect('draw_event',
1370:                                                        self._end_redraw)
1371: 
1372:     def _end_redraw(self, evt):
1373:         # Now that the redraw has happened, do the post draw flushing and
1374:         # blit handling. Then re-enable all of the original events.
1375:         self._post_draw(None, False)
1376:         self.event_source.start()
1377:         self._fig.canvas.mpl_disconnect(self._resize_id)
1378:         self._resize_id = self._fig.canvas.mpl_connect('resize_event',
1379:                                                        self._handle_resize)
1380: 
1381:     def to_html5_video(self, embed_limit=None):
1382:         '''Returns animation as an HTML5 video tag.
1383: 
1384:         This saves the animation as an h264 video, encoded in base64
1385:         directly into the HTML5 video tag. This respects the rc parameters
1386:         for the writer as well as the bitrate. This also makes use of the
1387:         ``interval`` to control the speed, and uses the ``repeat``
1388:         parameter to decide whether to loop.
1389:         '''
1390:         VIDEO_TAG = r'''<video {size} {options}>
1391:   <source type="video/mp4" src="data:video/mp4;base64,{video}">
1392:   Your browser does not support the video tag.
1393: </video>'''
1394:         # Cache the rendering of the video as HTML
1395:         if not hasattr(self, '_base64_video'):
1396:             # Save embed limit, which is given in MB
1397:             if embed_limit is None:
1398:                 embed_limit = rcParams['animation.embed_limit']
1399: 
1400:             # Convert from MB to bytes
1401:             embed_limit *= 1024 * 1024
1402: 
1403:             # First write the video to a tempfile. Set delete to False
1404:             # so we can re-open to read binary data.
1405:             with tempfile.NamedTemporaryFile(suffix='.m4v',
1406:                                              delete=False) as f:
1407:                 # We create a writer manually so that we can get the
1408:                 # appropriate size for the tag
1409:                 Writer = writers[rcParams['animation.writer']]
1410:                 writer = Writer(codec='h264',
1411:                                 bitrate=rcParams['animation.bitrate'],
1412:                                 fps=1000. / self._interval)
1413:                 self.save(f.name, writer=writer)
1414: 
1415:             # Now open and base64 encode
1416:             with open(f.name, 'rb') as video:
1417:                 vid64 = encodebytes(video.read())
1418:                 vid_len = len(vid64)
1419:                 if vid_len >= embed_limit:
1420:                     warnings.warn("Animation movie is {} bytes, exceeding "
1421:                                   "the limit of {}. If you're sure you want a "
1422:                                   "large animation embedded, set the "
1423:                                   "animation.embed_limit rc parameter to a "
1424:                                   "larger value (in MB).".format(vid_len,
1425:                                                                  embed_limit))
1426:                 else:
1427:                     self._base64_video = vid64.decode('ascii')
1428:                     self._video_size = 'width="{}" height="{}"'.format(
1429:                             *writer.frame_size)
1430: 
1431:             # Now we can remove
1432:             os.remove(f.name)
1433: 
1434:         # If we exceeded the size, this attribute won't exist
1435:         if hasattr(self, '_base64_video'):
1436:             # Default HTML5 options are to autoplay and display video controls
1437:             options = ['controls', 'autoplay']
1438: 
1439:             # If we're set to repeat, make it loop
1440:             if hasattr(self, 'repeat') and self.repeat:
1441:                 options.append('loop')
1442: 
1443:             return VIDEO_TAG.format(video=self._base64_video,
1444:                                     size=self._video_size,
1445:                                     options=' '.join(options))
1446:         else:
1447:             return 'Video too large to embed.'
1448: 
1449:     def to_jshtml(self, fps=None, embed_frames=True, default_mode=None):
1450:         '''Generate HTML representation of the animation'''
1451:         if fps is None and hasattr(self, '_interval'):
1452:             # Convert interval in ms to frames per second
1453:             fps = 1000 / self._interval
1454: 
1455:         # If we're not given a default mode, choose one base on the value of
1456:         # the repeat attribute
1457:         if default_mode is None:
1458:             default_mode = 'loop' if self.repeat else 'once'
1459: 
1460:         if hasattr(self, "_html_representation"):
1461:             return self._html_representation
1462:         else:
1463:             # Can't open a second time while opened on windows. So we avoid
1464:             # deleting when closed, and delete manually later.
1465:             with tempfile.NamedTemporaryFile(suffix='.html',
1466:                                              delete=False) as f:
1467:                 self.save(f.name, writer=HTMLWriter(fps=fps,
1468:                                                     embed_frames=embed_frames,
1469:                                                     default_mode=default_mode))
1470:             # Re-open and get content
1471:             with open(f.name) as fobj:
1472:                 html = fobj.read()
1473: 
1474:             # Now we can delete
1475:             os.remove(f.name)
1476: 
1477:             self._html_representation = html
1478:             return html
1479: 
1480:     def _repr_html_(self):
1481:         '''IPython display hook for rendering.'''
1482:         fmt = rcParams['animation.html']
1483:         if fmt == 'html5':
1484:             return self.to_html5_video()
1485:         elif fmt == 'jshtml':
1486:             return self.to_jshtml()
1487: 
1488: 
1489: class TimedAnimation(Animation):
1490:     ''':class:`Animation` subclass for time-based animation.
1491: 
1492:     A new frame is drawn every *interval* milliseconds.
1493: 
1494:     Parameters
1495:     ----------
1496:     fig : matplotlib.figure.Figure
1497:        The figure object that is used to get draw, resize, and any
1498:        other needed events.
1499: 
1500:     interval : number, optional
1501:        Delay between frames in milliseconds.  Defaults to 200.
1502: 
1503:     repeat_delay : number, optional
1504:         If the animation in repeated, adds a delay in milliseconds
1505:         before repeating the animation.  Defaults to ``None``.
1506: 
1507:     repeat : bool, optional
1508:         Controls whether the animation should repeat when the sequence
1509:         of frames is completed.  Defaults to ``True``.
1510: 
1511:     blit : bool, optional
1512:         Controls whether blitting is used to optimize drawing.  Defaults
1513:         to ``False``.
1514: 
1515:     '''
1516:     def __init__(self, fig, interval=200, repeat_delay=None, repeat=True,
1517:                  event_source=None, *args, **kwargs):
1518:         # Store the timing information
1519:         self._interval = interval
1520:         self._repeat_delay = repeat_delay
1521:         self.repeat = repeat
1522: 
1523:         # If we're not given an event source, create a new timer. This permits
1524:         # sharing timers between animation objects for syncing animations.
1525:         if event_source is None:
1526:             event_source = fig.canvas.new_timer()
1527:             event_source.interval = self._interval
1528: 
1529:         Animation.__init__(self, fig, event_source=event_source,
1530:                            *args, **kwargs)
1531: 
1532:     def _step(self, *args):
1533:         '''
1534:         Handler for getting events.
1535:         '''
1536:         # Extends the _step() method for the Animation class.  If
1537:         # Animation._step signals that it reached the end and we want to
1538:         # repeat, we refresh the frame sequence and return True. If
1539:         # _repeat_delay is set, change the event_source's interval to our loop
1540:         # delay and set the callback to one which will then set the interval
1541:         # back.
1542:         still_going = Animation._step(self, *args)
1543:         if not still_going and self.repeat:
1544:             self._init_draw()
1545:             self.frame_seq = self.new_frame_seq()
1546:             if self._repeat_delay:
1547:                 self.event_source.remove_callback(self._step)
1548:                 self.event_source.add_callback(self._loop_delay)
1549:                 self.event_source.interval = self._repeat_delay
1550:                 return True
1551:             else:
1552:                 return Animation._step(self, *args)
1553:         else:
1554:             return still_going
1555: 
1556:     def _stop(self, *args):
1557:         # If we stop in the middle of a loop delay (which is relatively likely
1558:         # given the potential pause here, remove the loop_delay callback as
1559:         # well.
1560:         self.event_source.remove_callback(self._loop_delay)
1561:         Animation._stop(self)
1562: 
1563:     def _loop_delay(self, *args):
1564:         # Reset the interval and change callbacks after the delay.
1565:         self.event_source.remove_callback(self._loop_delay)
1566:         self.event_source.interval = self._interval
1567:         self.event_source.add_callback(self._step)
1568:         Animation._step(self)
1569: 
1570: 
1571: class ArtistAnimation(TimedAnimation):
1572:     '''Animation using a fixed set of `Artist` objects.
1573: 
1574:     Before creating an instance, all plotting should have taken place
1575:     and the relevant artists saved.
1576: 
1577:     Parameters
1578:     ----------
1579:     fig : matplotlib.figure.Figure
1580:        The figure object that is used to get draw, resize, and any
1581:        other needed events.
1582: 
1583:     artists : list
1584:         Each list entry a collection of artists that represent what
1585:         needs to be enabled on each frame. These will be disabled for
1586:         other frames.
1587: 
1588:     interval : number, optional
1589:        Delay between frames in milliseconds.  Defaults to 200.
1590: 
1591:     repeat_delay : number, optional
1592:         If the animation in repeated, adds a delay in milliseconds
1593:         before repeating the animation.  Defaults to ``None``.
1594: 
1595:     repeat : bool, optional
1596:         Controls whether the animation should repeat when the sequence
1597:         of frames is completed. Defaults to ``True``.
1598: 
1599:     blit : bool, optional
1600:         Controls whether blitting is used to optimize drawing.  Defaults
1601:         to ``False``.
1602: 
1603:     '''
1604:     def __init__(self, fig, artists, *args, **kwargs):
1605:         # Internal list of artists drawn in the most recent frame.
1606:         self._drawn_artists = []
1607: 
1608:         # Use the list of artists as the framedata, which will be iterated
1609:         # over by the machinery.
1610:         self._framedata = artists
1611:         TimedAnimation.__init__(self, fig, *args, **kwargs)
1612: 
1613:     def _init_draw(self):
1614:         # Make all the artists involved in *any* frame invisible
1615:         figs = set()
1616:         for f in self.new_frame_seq():
1617:             for artist in f:
1618:                 artist.set_visible(False)
1619:                 artist.set_animated(self._blit)
1620:                 # Assemble a list of unique figures that need flushing
1621:                 if artist.get_figure() not in figs:
1622:                     figs.add(artist.get_figure())
1623: 
1624:         # Flush the needed figures
1625:         for fig in figs:
1626:             fig.canvas.draw_idle()
1627: 
1628:     def _pre_draw(self, framedata, blit):
1629:         '''
1630:         Clears artists from the last frame.
1631:         '''
1632:         if blit:
1633:             # Let blit handle clearing
1634:             self._blit_clear(self._drawn_artists, self._blit_cache)
1635:         else:
1636:             # Otherwise, make all the artists from the previous frame invisible
1637:             for artist in self._drawn_artists:
1638:                 artist.set_visible(False)
1639: 
1640:     def _draw_frame(self, artists):
1641:         # Save the artists that were passed in as framedata for the other
1642:         # steps (esp. blitting) to use.
1643:         self._drawn_artists = artists
1644: 
1645:         # Make all the artists from the current frame visible
1646:         for artist in artists:
1647:             artist.set_visible(True)
1648: 
1649: 
1650: class FuncAnimation(TimedAnimation):
1651:     '''
1652:     Makes an animation by repeatedly calling a function ``func``.
1653: 
1654:     Parameters
1655:     ----------
1656:     fig : matplotlib.figure.Figure
1657:        The figure object that is used to get draw, resize, and any
1658:        other needed events.
1659: 
1660:     func : callable
1661:        The function to call at each frame.  The first argument will
1662:        be the next value in ``frames``.   Any additional positional
1663:        arguments can be supplied via the ``fargs`` parameter.
1664: 
1665:        The required signature is::
1666: 
1667:           def func(frame, *fargs) -> iterable_of_artists:
1668: 
1669:     frames : iterable, int, generator function, or None, optional
1670:         Source of data to pass ``func`` and each frame of the animation
1671: 
1672:         If an iterable, then simply use the values provided.  If the
1673:         iterable has a length, it will override the ``save_count`` kwarg.
1674: 
1675:         If an integer, then equivalent to passing ``range(frames)``
1676: 
1677:         If a generator function, then must have the signature::
1678: 
1679:            def gen_function() -> obj:
1680: 
1681:         If ``None``, then equivalent to passing ``itertools.count``.
1682: 
1683:         In all of these cases, the values in *frames* is simply passed through
1684:         to the user-supplied *func* and thus can be of any type.
1685: 
1686:     init_func : callable, optional
1687:        A function used to draw a clear frame. If not given, the
1688:        results of drawing from the first item in the frames sequence
1689:        will be used. This function will be called once before the
1690:        first frame.
1691: 
1692:        If ``blit == True``, ``init_func`` must return an iterable of artists
1693:        to be re-drawn.
1694: 
1695:        The required signature is::
1696: 
1697:           def init_func() -> iterable_of_artists:
1698: 
1699:     fargs : tuple or None, optional
1700:        Additional arguments to pass to each call to *func*.
1701: 
1702:     save_count : int, optional
1703:        The number of values from *frames* to cache.
1704: 
1705:     interval : number, optional
1706:        Delay between frames in milliseconds.  Defaults to 200.
1707: 
1708:     repeat_delay : number, optional
1709:        If the animation in repeated, adds a delay in milliseconds
1710:        before repeating the animation.  Defaults to ``None``.
1711: 
1712:     repeat : bool, optional
1713:        Controls whether the animation should repeat when the sequence
1714:        of frames is completed.  Defaults to ``True``.
1715: 
1716:     blit : bool, optional
1717:        Controls whether blitting is used to optimize drawing.  Defaults
1718:        to ``False``.
1719: 
1720:     '''
1721:     def __init__(self, fig, func, frames=None, init_func=None, fargs=None,
1722:                  save_count=None, **kwargs):
1723:         if fargs:
1724:             self._args = fargs
1725:         else:
1726:             self._args = ()
1727:         self._func = func
1728: 
1729:         # Amount of framedata to keep around for saving movies. This is only
1730:         # used if we don't know how many frames there will be: in the case
1731:         # of no generator or in the case of a callable.
1732:         self.save_count = save_count
1733:         # Set up a function that creates a new iterable when needed. If nothing
1734:         # is passed in for frames, just use itertools.count, which will just
1735:         # keep counting from 0. A callable passed in for frames is assumed to
1736:         # be a generator. An iterable will be used as is, and anything else
1737:         # will be treated as a number of frames.
1738:         if frames is None:
1739:             self._iter_gen = itertools.count
1740:         elif callable(frames):
1741:             self._iter_gen = frames
1742:         elif iterable(frames):
1743:             self._iter_gen = lambda: iter(frames)
1744:             if hasattr(frames, '__len__'):
1745:                 self.save_count = len(frames)
1746:         else:
1747:             self._iter_gen = lambda: iter(xrange(frames))
1748:             self.save_count = frames
1749: 
1750:         if self.save_count is None:
1751:             # If we're passed in and using the default, set save_count to 100.
1752:             self.save_count = 100
1753:         else:
1754:             # itertools.islice returns an error when passed a numpy int instead
1755:             # of a native python int (http://bugs.python.org/issue30537).
1756:             # As a workaround, convert save_count to a native python int.
1757:             self.save_count = int(self.save_count)
1758: 
1759:         self._init_func = init_func
1760: 
1761:         # Needs to be initialized so the draw functions work without checking
1762:         self._save_seq = []
1763: 
1764:         TimedAnimation.__init__(self, fig, **kwargs)
1765: 
1766:         # Need to reset the saved seq, since right now it will contain data
1767:         # for a single frame from init, which is not what we want.
1768:         self._save_seq = []
1769: 
1770:     def new_frame_seq(self):
1771:         # Use the generating function to generate a new frame sequence
1772:         return self._iter_gen()
1773: 
1774:     def new_saved_frame_seq(self):
1775:         # Generate an iterator for the sequence of saved data. If there are
1776:         # no saved frames, generate a new frame sequence and take the first
1777:         # save_count entries in it.
1778:         if self._save_seq:
1779:             # While iterating we are going to update _save_seq
1780:             # so make a copy to safely iterate over
1781:             self._old_saved_seq = list(self._save_seq)
1782:             return iter(self._old_saved_seq)
1783:         else:
1784:             return itertools.islice(self.new_frame_seq(), self.save_count)
1785: 
1786:     def _init_draw(self):
1787:         # Initialize the drawing either using the given init_func or by
1788:         # calling the draw function with the first item of the frame sequence.
1789:         # For blitting, the init_func should return a sequence of modified
1790:         # artists.
1791:         if self._init_func is None:
1792:             self._draw_frame(next(self.new_frame_seq()))
1793: 
1794:         else:
1795:             self._drawn_artists = self._init_func()
1796:             if self._blit:
1797:                 if self._drawn_artists is None:
1798:                     raise RuntimeError('The init_func must return a '
1799:                                        'sequence of Artist objects.')
1800:                 for a in self._drawn_artists:
1801:                     a.set_animated(self._blit)
1802:         self._save_seq = []
1803: 
1804:     def _draw_frame(self, framedata):
1805:         # Save the data for potential saving of movies.
1806:         self._save_seq.append(framedata)
1807: 
1808:         # Make sure to respect save_count (keep only the last save_count
1809:         # around)
1810:         self._save_seq = self._save_seq[-self.save_count:]
1811: 
1812:         # Call the func with framedata and args. If blitting is desired,
1813:         # func needs to return a sequence of any artists that were modified.
1814:         self._drawn_artists = self._func(framedata, *self._args)
1815:         if self._blit:
1816:             if self._drawn_artists is None:
1817:                     raise RuntimeError('The animation function must return a '
1818:                                        'sequence of Artist objects.')
1819:             for a in self._drawn_artists:
1820:                 a.set_animated(self._blit)
1821: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'import six' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_1311 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'six')

if (type(import_1311) is not StypyTypeError):

    if (import_1311 != 'pyd_module'):
        __import__(import_1311)
        sys_modules_1312 = sys.modules[import_1311]
        import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'six', sys_modules_1312.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'six', import_1311)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'from six.moves import xrange, zip' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_1313 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'six.moves')

if (type(import_1313) is not StypyTypeError):

    if (import_1313 != 'pyd_module'):
        __import__(import_1313)
        sys_modules_1314 = sys.modules[import_1313]
        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'six.moves', sys_modules_1314.module_type_store, module_type_store, ['xrange', 'zip'])
        nest_module(stypy.reporting.localization.Localization(__file__, 24, 0), __file__, sys_modules_1314, sys_modules_1314.module_type_store, module_type_store)
    else:
        from six.moves import xrange, zip

        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'six.moves', None, module_type_store, ['xrange', 'zip'], [xrange, zip])

else:
    # Assigning a type to the variable 'six.moves' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'six.moves', import_1313)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'import numpy' statement (line 26)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_1315 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'numpy')

if (type(import_1315) is not StypyTypeError):

    if (import_1315 != 'pyd_module'):
        __import__(import_1315)
        sys_modules_1316 = sys.modules[import_1315]
        import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'np', sys_modules_1316.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 26)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'numpy', import_1315)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'import os' statement (line 27)
import os

import_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'import platform' statement (line 28)
import platform

import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'platform', platform, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'import sys' statement (line 29)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'import itertools' statement (line 30)
import itertools

import_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'itertools', itertools, module_type_store)



# SSA begins for try-except statement (line 31)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 33, 4))

# 'from base64 import encodebytes' statement (line 33)
try:
    from base64 import encodebytes

except:
    encodebytes = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 33, 4), 'base64', None, module_type_store, ['encodebytes'], [encodebytes])

# SSA branch for the except part of a try statement (line 31)
# SSA branch for the except 'ImportError' branch of a try statement (line 31)
module_type_store.open_ssa_branch('except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 36, 4))

# 'from base64 import encodebytes' statement (line 36)
try:
    from base64 import encodestring as encodebytes

except:
    encodebytes = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 36, 4), 'base64', None, module_type_store, ['encodestring'], [encodebytes])
# Adding an alias
module_type_store.add_alias('encodebytes', 'encodestring')

# SSA join for try-except statement (line 31)
module_type_store = module_type_store.join_ssa_context()

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 37, 0))

# 'import abc' statement (line 37)
import abc

import_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'abc', abc, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 38, 0))

# 'import contextlib' statement (line 38)
import contextlib

import_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'contextlib', contextlib, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 39, 0))

# 'import tempfile' statement (line 39)
import tempfile

import_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'tempfile', tempfile, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 40, 0))

# 'import uuid' statement (line 40)
import uuid

import_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'uuid', uuid, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 41, 0))

# 'import warnings' statement (line 41)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 42, 0))

# 'from matplotlib._animation_data import DISPLAY_TEMPLATE, INCLUDED_FRAMES, JS_INCLUDE' statement (line 42)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_1317 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib._animation_data')

if (type(import_1317) is not StypyTypeError):

    if (import_1317 != 'pyd_module'):
        __import__(import_1317)
        sys_modules_1318 = sys.modules[import_1317]
        import_from_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib._animation_data', sys_modules_1318.module_type_store, module_type_store, ['DISPLAY_TEMPLATE', 'INCLUDED_FRAMES', 'JS_INCLUDE'])
        nest_module(stypy.reporting.localization.Localization(__file__, 42, 0), __file__, sys_modules_1318, sys_modules_1318.module_type_store, module_type_store)
    else:
        from matplotlib._animation_data import DISPLAY_TEMPLATE, INCLUDED_FRAMES, JS_INCLUDE

        import_from_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib._animation_data', None, module_type_store, ['DISPLAY_TEMPLATE', 'INCLUDED_FRAMES', 'JS_INCLUDE'], [DISPLAY_TEMPLATE, INCLUDED_FRAMES, JS_INCLUDE])

else:
    # Assigning a type to the variable 'matplotlib._animation_data' (line 42)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib._animation_data', import_1317)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 44, 0))

# 'from matplotlib.cbook import iterable, deprecated' statement (line 44)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_1319 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.cbook')

if (type(import_1319) is not StypyTypeError):

    if (import_1319 != 'pyd_module'):
        __import__(import_1319)
        sys_modules_1320 = sys.modules[import_1319]
        import_from_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.cbook', sys_modules_1320.module_type_store, module_type_store, ['iterable', 'deprecated'])
        nest_module(stypy.reporting.localization.Localization(__file__, 44, 0), __file__, sys_modules_1320, sys_modules_1320.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import iterable, deprecated

        import_from_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.cbook', None, module_type_store, ['iterable', 'deprecated'], [iterable, deprecated])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 44)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.cbook', import_1319)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 45, 0))

# 'from matplotlib.compat import subprocess' statement (line 45)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_1321 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 45, 0), 'matplotlib.compat')

if (type(import_1321) is not StypyTypeError):

    if (import_1321 != 'pyd_module'):
        __import__(import_1321)
        sys_modules_1322 = sys.modules[import_1321]
        import_from_module(stypy.reporting.localization.Localization(__file__, 45, 0), 'matplotlib.compat', sys_modules_1322.module_type_store, module_type_store, ['subprocess'])
        nest_module(stypy.reporting.localization.Localization(__file__, 45, 0), __file__, sys_modules_1322, sys_modules_1322.module_type_store, module_type_store)
    else:
        from matplotlib.compat import subprocess

        import_from_module(stypy.reporting.localization.Localization(__file__, 45, 0), 'matplotlib.compat', None, module_type_store, ['subprocess'], [subprocess])

else:
    # Assigning a type to the variable 'matplotlib.compat' (line 45)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 45, 0), 'matplotlib.compat', import_1321)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 46, 0))

# 'from matplotlib import verbose' statement (line 46)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_1323 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 46, 0), 'matplotlib')

if (type(import_1323) is not StypyTypeError):

    if (import_1323 != 'pyd_module'):
        __import__(import_1323)
        sys_modules_1324 = sys.modules[import_1323]
        import_from_module(stypy.reporting.localization.Localization(__file__, 46, 0), 'matplotlib', sys_modules_1324.module_type_store, module_type_store, ['verbose'])
        nest_module(stypy.reporting.localization.Localization(__file__, 46, 0), __file__, sys_modules_1324, sys_modules_1324.module_type_store, module_type_store)
    else:
        from matplotlib import verbose

        import_from_module(stypy.reporting.localization.Localization(__file__, 46, 0), 'matplotlib', None, module_type_store, ['verbose'], [verbose])

else:
    # Assigning a type to the variable 'matplotlib' (line 46)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 0), 'matplotlib', import_1323)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 47, 0))

# 'from matplotlib import rcParams, rcParamsDefault, rc_context' statement (line 47)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_1325 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 47, 0), 'matplotlib')

if (type(import_1325) is not StypyTypeError):

    if (import_1325 != 'pyd_module'):
        __import__(import_1325)
        sys_modules_1326 = sys.modules[import_1325]
        import_from_module(stypy.reporting.localization.Localization(__file__, 47, 0), 'matplotlib', sys_modules_1326.module_type_store, module_type_store, ['rcParams', 'rcParamsDefault', 'rc_context'])
        nest_module(stypy.reporting.localization.Localization(__file__, 47, 0), __file__, sys_modules_1326, sys_modules_1326.module_type_store, module_type_store)
    else:
        from matplotlib import rcParams, rcParamsDefault, rc_context

        import_from_module(stypy.reporting.localization.Localization(__file__, 47, 0), 'matplotlib', None, module_type_store, ['rcParams', 'rcParamsDefault', 'rc_context'], [rcParams, rcParamsDefault, rc_context])

else:
    # Assigning a type to the variable 'matplotlib' (line 47)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 0), 'matplotlib', import_1325)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')



# Getting the type of 'sys' (line 48)
sys_1327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 3), 'sys')
# Obtaining the member 'version_info' of a type (line 48)
version_info_1328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 48, 3), sys_1327, 'version_info')

# Obtaining an instance of the builtin type 'tuple' (line 48)
tuple_1329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 23), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 48)
# Adding element type (line 48)
int_1330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 23), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 48, 23), tuple_1329, int_1330)
# Adding element type (line 48)
int_1331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 26), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 48, 23), tuple_1329, int_1331)

# Applying the binary operator '<' (line 48)
result_lt_1332 = python_operator(stypy.reporting.localization.Localization(__file__, 48, 3), '<', version_info_1328, tuple_1329)

# Testing the type of an if condition (line 48)
if_condition_1333 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 48, 0), result_lt_1332)
# Assigning a type to the variable 'if_condition_1333' (line 48)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 0), 'if_condition_1333', if_condition_1333)
# SSA begins for if statement (line 48)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 49, 4))

# 'from cStringIO import InMemory' statement (line 49)
try:
    from cStringIO import StringIO as InMemory

except:
    InMemory = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 49, 4), 'cStringIO', None, module_type_store, ['StringIO'], [InMemory])
# Adding an alias
module_type_store.add_alias('InMemory', 'StringIO')

# SSA branch for the else part of an if statement (line 48)
module_type_store.open_ssa_branch('else')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 51, 4))

# 'from io import InMemory' statement (line 51)
try:
    from io import BytesIO as InMemory

except:
    InMemory = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 51, 4), 'io', None, module_type_store, ['BytesIO'], [InMemory])
# Adding an alias
module_type_store.add_alias('InMemory', 'BytesIO')

# SSA join for if statement (line 48)
module_type_store = module_type_store.join_ssa_context()




# Call to system(...): (line 56)
# Processing the call keyword arguments (line 56)
kwargs_1336 = {}
# Getting the type of 'platform' (line 56)
platform_1334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 3), 'platform', False)
# Obtaining the member 'system' of a type (line 56)
system_1335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 56, 3), platform_1334, 'system')
# Calling system(args, kwargs) (line 56)
system_call_result_1337 = invoke(stypy.reporting.localization.Localization(__file__, 56, 3), system_1335, *[], **kwargs_1336)

unicode_1338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 24), 'unicode', u'Windows')
# Applying the binary operator '==' (line 56)
result_eq_1339 = python_operator(stypy.reporting.localization.Localization(__file__, 56, 3), '==', system_call_result_1337, unicode_1338)

# Testing the type of an if condition (line 56)
if_condition_1340 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 56, 0), result_eq_1339)
# Assigning a type to the variable 'if_condition_1340' (line 56)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 0), 'if_condition_1340', if_condition_1340)
# SSA begins for if statement (line 56)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Multiple assignment of 2 elements.

# Assigning a Num to a Name (line 57):
int_1341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 57, 51), 'int')
# Assigning a type to the variable 'CREATE_NO_WINDOW' (line 57)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 32), 'CREATE_NO_WINDOW', int_1341)

# Assigning a Name to a Name (line 57):
# Getting the type of 'CREATE_NO_WINDOW' (line 57)
CREATE_NO_WINDOW_1342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 32), 'CREATE_NO_WINDOW')
# Assigning a type to the variable 'subprocess_creation_flags' (line 57)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 4), 'subprocess_creation_flags', CREATE_NO_WINDOW_1342)
# SSA branch for the else part of an if statement (line 56)
module_type_store.open_ssa_branch('else')

# Assigning a Num to a Name (line 60):

# Assigning a Num to a Name (line 60):
int_1343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 32), 'int')
# Assigning a type to the variable 'subprocess_creation_flags' (line 60)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 4), 'subprocess_creation_flags', int_1343)
# SSA join for if statement (line 56)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def adjusted_figsize(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'adjusted_figsize'
    module_type_store = module_type_store.open_function_context('adjusted_figsize', 71, 0, False)
    
    # Passed parameters checking function
    adjusted_figsize.stypy_localization = localization
    adjusted_figsize.stypy_type_of_self = None
    adjusted_figsize.stypy_type_store = module_type_store
    adjusted_figsize.stypy_function_name = 'adjusted_figsize'
    adjusted_figsize.stypy_param_names_list = ['w', 'h', 'dpi', 'n']
    adjusted_figsize.stypy_varargs_param_name = None
    adjusted_figsize.stypy_kwargs_param_name = None
    adjusted_figsize.stypy_call_defaults = defaults
    adjusted_figsize.stypy_call_varargs = varargs
    adjusted_figsize.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'adjusted_figsize', ['w', 'h', 'dpi', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'adjusted_figsize', localization, ['w', 'h', 'dpi', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'adjusted_figsize(...)' code ##################

    unicode_1344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, (-1)), 'unicode', u'Compute figure size so that pixels are a multiple of n\n\n    Parameters\n    ----------\n    w, h : float\n        Size in inches\n\n    dpi : float\n        The dpi\n\n    n : int\n        The target multiple\n\n    Returns\n    -------\n    wnew, hnew : float\n        The new figure size in inches.\n    ')

    @norecursion
    def correct_roundoff(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'correct_roundoff'
        module_type_store = module_type_store.open_function_context('correct_roundoff', 93, 4, False)
        
        # Passed parameters checking function
        correct_roundoff.stypy_localization = localization
        correct_roundoff.stypy_type_of_self = None
        correct_roundoff.stypy_type_store = module_type_store
        correct_roundoff.stypy_function_name = 'correct_roundoff'
        correct_roundoff.stypy_param_names_list = ['x', 'dpi', 'n']
        correct_roundoff.stypy_varargs_param_name = None
        correct_roundoff.stypy_kwargs_param_name = None
        correct_roundoff.stypy_call_defaults = defaults
        correct_roundoff.stypy_call_varargs = varargs
        correct_roundoff.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'correct_roundoff', ['x', 'dpi', 'n'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'correct_roundoff', localization, ['x', 'dpi', 'n'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'correct_roundoff(...)' code ##################

        
        
        
        # Call to int(...): (line 94)
        # Processing the call arguments (line 94)
        # Getting the type of 'x' (line 94)
        x_1346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 15), 'x', False)
        # Getting the type of 'dpi' (line 94)
        dpi_1347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 17), 'dpi', False)
        # Applying the binary operator '*' (line 94)
        result_mul_1348 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 15), '*', x_1346, dpi_1347)
        
        # Processing the call keyword arguments (line 94)
        kwargs_1349 = {}
        # Getting the type of 'int' (line 94)
        int_1345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 11), 'int', False)
        # Calling int(args, kwargs) (line 94)
        int_call_result_1350 = invoke(stypy.reporting.localization.Localization(__file__, 94, 11), int_1345, *[result_mul_1348], **kwargs_1349)
        
        # Getting the type of 'n' (line 94)
        n_1351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 24), 'n')
        # Applying the binary operator '%' (line 94)
        result_mod_1352 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 11), '%', int_call_result_1350, n_1351)
        
        int_1353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 29), 'int')
        # Applying the binary operator '!=' (line 94)
        result_ne_1354 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 11), '!=', result_mod_1352, int_1353)
        
        # Testing the type of an if condition (line 94)
        if_condition_1355 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 94, 8), result_ne_1354)
        # Assigning a type to the variable 'if_condition_1355' (line 94)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 8), 'if_condition_1355', if_condition_1355)
        # SSA begins for if statement (line 94)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to int(...): (line 95)
        # Processing the call arguments (line 95)
        
        # Call to nextafter(...): (line 95)
        # Processing the call arguments (line 95)
        # Getting the type of 'x' (line 95)
        x_1359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 32), 'x', False)
        # Getting the type of 'np' (line 95)
        np_1360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 35), 'np', False)
        # Obtaining the member 'inf' of a type (line 95)
        inf_1361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 35), np_1360, 'inf')
        # Processing the call keyword arguments (line 95)
        kwargs_1362 = {}
        # Getting the type of 'np' (line 95)
        np_1357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 19), 'np', False)
        # Obtaining the member 'nextafter' of a type (line 95)
        nextafter_1358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 19), np_1357, 'nextafter')
        # Calling nextafter(args, kwargs) (line 95)
        nextafter_call_result_1363 = invoke(stypy.reporting.localization.Localization(__file__, 95, 19), nextafter_1358, *[x_1359, inf_1361], **kwargs_1362)
        
        # Getting the type of 'dpi' (line 95)
        dpi_1364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 43), 'dpi', False)
        # Applying the binary operator '*' (line 95)
        result_mul_1365 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 19), '*', nextafter_call_result_1363, dpi_1364)
        
        # Processing the call keyword arguments (line 95)
        kwargs_1366 = {}
        # Getting the type of 'int' (line 95)
        int_1356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 15), 'int', False)
        # Calling int(args, kwargs) (line 95)
        int_call_result_1367 = invoke(stypy.reporting.localization.Localization(__file__, 95, 15), int_1356, *[result_mul_1365], **kwargs_1366)
        
        # Getting the type of 'n' (line 95)
        n_1368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 50), 'n')
        # Applying the binary operator '%' (line 95)
        result_mod_1369 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 15), '%', int_call_result_1367, n_1368)
        
        int_1370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 55), 'int')
        # Applying the binary operator '==' (line 95)
        result_eq_1371 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 15), '==', result_mod_1369, int_1370)
        
        # Testing the type of an if condition (line 95)
        if_condition_1372 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 95, 12), result_eq_1371)
        # Assigning a type to the variable 'if_condition_1372' (line 95)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 12), 'if_condition_1372', if_condition_1372)
        # SSA begins for if statement (line 95)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 96):
        
        # Assigning a Call to a Name (line 96):
        
        # Call to nextafter(...): (line 96)
        # Processing the call arguments (line 96)
        # Getting the type of 'x' (line 96)
        x_1375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 33), 'x', False)
        # Getting the type of 'np' (line 96)
        np_1376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 36), 'np', False)
        # Obtaining the member 'inf' of a type (line 96)
        inf_1377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 36), np_1376, 'inf')
        # Processing the call keyword arguments (line 96)
        kwargs_1378 = {}
        # Getting the type of 'np' (line 96)
        np_1373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 20), 'np', False)
        # Obtaining the member 'nextafter' of a type (line 96)
        nextafter_1374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 20), np_1373, 'nextafter')
        # Calling nextafter(args, kwargs) (line 96)
        nextafter_call_result_1379 = invoke(stypy.reporting.localization.Localization(__file__, 96, 20), nextafter_1374, *[x_1375, inf_1377], **kwargs_1378)
        
        # Assigning a type to the variable 'x' (line 96)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 16), 'x', nextafter_call_result_1379)
        # SSA branch for the else part of an if statement (line 95)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to int(...): (line 97)
        # Processing the call arguments (line 97)
        
        # Call to nextafter(...): (line 97)
        # Processing the call arguments (line 97)
        # Getting the type of 'x' (line 97)
        x_1383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 34), 'x', False)
        
        # Getting the type of 'np' (line 97)
        np_1384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 38), 'np', False)
        # Obtaining the member 'inf' of a type (line 97)
        inf_1385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 97, 38), np_1384, 'inf')
        # Applying the 'usub' unary operator (line 97)
        result___neg___1386 = python_operator(stypy.reporting.localization.Localization(__file__, 97, 37), 'usub', inf_1385)
        
        # Processing the call keyword arguments (line 97)
        kwargs_1387 = {}
        # Getting the type of 'np' (line 97)
        np_1381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 21), 'np', False)
        # Obtaining the member 'nextafter' of a type (line 97)
        nextafter_1382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 97, 21), np_1381, 'nextafter')
        # Calling nextafter(args, kwargs) (line 97)
        nextafter_call_result_1388 = invoke(stypy.reporting.localization.Localization(__file__, 97, 21), nextafter_1382, *[x_1383, result___neg___1386], **kwargs_1387)
        
        # Getting the type of 'dpi' (line 97)
        dpi_1389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 46), 'dpi', False)
        # Applying the binary operator '*' (line 97)
        result_mul_1390 = python_operator(stypy.reporting.localization.Localization(__file__, 97, 21), '*', nextafter_call_result_1388, dpi_1389)
        
        # Processing the call keyword arguments (line 97)
        kwargs_1391 = {}
        # Getting the type of 'int' (line 97)
        int_1380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 17), 'int', False)
        # Calling int(args, kwargs) (line 97)
        int_call_result_1392 = invoke(stypy.reporting.localization.Localization(__file__, 97, 17), int_1380, *[result_mul_1390], **kwargs_1391)
        
        # Getting the type of 'n' (line 97)
        n_1393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 53), 'n')
        # Applying the binary operator '%' (line 97)
        result_mod_1394 = python_operator(stypy.reporting.localization.Localization(__file__, 97, 17), '%', int_call_result_1392, n_1393)
        
        int_1395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 58), 'int')
        # Applying the binary operator '==' (line 97)
        result_eq_1396 = python_operator(stypy.reporting.localization.Localization(__file__, 97, 17), '==', result_mod_1394, int_1395)
        
        # Testing the type of an if condition (line 97)
        if_condition_1397 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 97, 17), result_eq_1396)
        # Assigning a type to the variable 'if_condition_1397' (line 97)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 17), 'if_condition_1397', if_condition_1397)
        # SSA begins for if statement (line 97)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 98):
        
        # Assigning a Call to a Name (line 98):
        
        # Call to nextafter(...): (line 98)
        # Processing the call arguments (line 98)
        # Getting the type of 'x' (line 98)
        x_1400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 33), 'x', False)
        
        # Getting the type of 'np' (line 98)
        np_1401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 37), 'np', False)
        # Obtaining the member 'inf' of a type (line 98)
        inf_1402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 98, 37), np_1401, 'inf')
        # Applying the 'usub' unary operator (line 98)
        result___neg___1403 = python_operator(stypy.reporting.localization.Localization(__file__, 98, 36), 'usub', inf_1402)
        
        # Processing the call keyword arguments (line 98)
        kwargs_1404 = {}
        # Getting the type of 'np' (line 98)
        np_1398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 20), 'np', False)
        # Obtaining the member 'nextafter' of a type (line 98)
        nextafter_1399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 98, 20), np_1398, 'nextafter')
        # Calling nextafter(args, kwargs) (line 98)
        nextafter_call_result_1405 = invoke(stypy.reporting.localization.Localization(__file__, 98, 20), nextafter_1399, *[x_1400, result___neg___1403], **kwargs_1404)
        
        # Assigning a type to the variable 'x' (line 98)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 16), 'x', nextafter_call_result_1405)
        # SSA join for if statement (line 97)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 95)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 94)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'x' (line 99)
        x_1406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 15), 'x')
        # Assigning a type to the variable 'stypy_return_type' (line 99)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 8), 'stypy_return_type', x_1406)
        
        # ################# End of 'correct_roundoff(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'correct_roundoff' in the type store
        # Getting the type of 'stypy_return_type' (line 93)
        stypy_return_type_1407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1407)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'correct_roundoff'
        return stypy_return_type_1407

    # Assigning a type to the variable 'correct_roundoff' (line 93)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 93, 4), 'correct_roundoff', correct_roundoff)
    
    # Assigning a BinOp to a Name (line 101):
    
    # Assigning a BinOp to a Name (line 101):
    
    # Call to int(...): (line 101)
    # Processing the call arguments (line 101)
    # Getting the type of 'w' (line 101)
    w_1409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 15), 'w', False)
    # Getting the type of 'dpi' (line 101)
    dpi_1410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 19), 'dpi', False)
    # Applying the binary operator '*' (line 101)
    result_mul_1411 = python_operator(stypy.reporting.localization.Localization(__file__, 101, 15), '*', w_1409, dpi_1410)
    
    # Getting the type of 'n' (line 101)
    n_1412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 25), 'n', False)
    # Applying the binary operator 'div' (line 101)
    result_div_1413 = python_operator(stypy.reporting.localization.Localization(__file__, 101, 23), 'div', result_mul_1411, n_1412)
    
    # Processing the call keyword arguments (line 101)
    kwargs_1414 = {}
    # Getting the type of 'int' (line 101)
    int_1408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 11), 'int', False)
    # Calling int(args, kwargs) (line 101)
    int_call_result_1415 = invoke(stypy.reporting.localization.Localization(__file__, 101, 11), int_1408, *[result_div_1413], **kwargs_1414)
    
    # Getting the type of 'n' (line 101)
    n_1416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 30), 'n')
    # Applying the binary operator '*' (line 101)
    result_mul_1417 = python_operator(stypy.reporting.localization.Localization(__file__, 101, 11), '*', int_call_result_1415, n_1416)
    
    # Getting the type of 'dpi' (line 101)
    dpi_1418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 34), 'dpi')
    # Applying the binary operator 'div' (line 101)
    result_div_1419 = python_operator(stypy.reporting.localization.Localization(__file__, 101, 32), 'div', result_mul_1417, dpi_1418)
    
    # Assigning a type to the variable 'wnew' (line 101)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 4), 'wnew', result_div_1419)
    
    # Assigning a BinOp to a Name (line 102):
    
    # Assigning a BinOp to a Name (line 102):
    
    # Call to int(...): (line 102)
    # Processing the call arguments (line 102)
    # Getting the type of 'h' (line 102)
    h_1421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 15), 'h', False)
    # Getting the type of 'dpi' (line 102)
    dpi_1422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 19), 'dpi', False)
    # Applying the binary operator '*' (line 102)
    result_mul_1423 = python_operator(stypy.reporting.localization.Localization(__file__, 102, 15), '*', h_1421, dpi_1422)
    
    # Getting the type of 'n' (line 102)
    n_1424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 25), 'n', False)
    # Applying the binary operator 'div' (line 102)
    result_div_1425 = python_operator(stypy.reporting.localization.Localization(__file__, 102, 23), 'div', result_mul_1423, n_1424)
    
    # Processing the call keyword arguments (line 102)
    kwargs_1426 = {}
    # Getting the type of 'int' (line 102)
    int_1420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 11), 'int', False)
    # Calling int(args, kwargs) (line 102)
    int_call_result_1427 = invoke(stypy.reporting.localization.Localization(__file__, 102, 11), int_1420, *[result_div_1425], **kwargs_1426)
    
    # Getting the type of 'n' (line 102)
    n_1428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 30), 'n')
    # Applying the binary operator '*' (line 102)
    result_mul_1429 = python_operator(stypy.reporting.localization.Localization(__file__, 102, 11), '*', int_call_result_1427, n_1428)
    
    # Getting the type of 'dpi' (line 102)
    dpi_1430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 34), 'dpi')
    # Applying the binary operator 'div' (line 102)
    result_div_1431 = python_operator(stypy.reporting.localization.Localization(__file__, 102, 32), 'div', result_mul_1429, dpi_1430)
    
    # Assigning a type to the variable 'hnew' (line 102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 102, 4), 'hnew', result_div_1431)
    
    # Obtaining an instance of the builtin type 'tuple' (line 103)
    tuple_1432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 103)
    # Adding element type (line 103)
    
    # Call to correct_roundoff(...): (line 103)
    # Processing the call arguments (line 103)
    # Getting the type of 'wnew' (line 103)
    wnew_1434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 29), 'wnew', False)
    # Getting the type of 'dpi' (line 103)
    dpi_1435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 35), 'dpi', False)
    # Getting the type of 'n' (line 103)
    n_1436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 40), 'n', False)
    # Processing the call keyword arguments (line 103)
    kwargs_1437 = {}
    # Getting the type of 'correct_roundoff' (line 103)
    correct_roundoff_1433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 12), 'correct_roundoff', False)
    # Calling correct_roundoff(args, kwargs) (line 103)
    correct_roundoff_call_result_1438 = invoke(stypy.reporting.localization.Localization(__file__, 103, 12), correct_roundoff_1433, *[wnew_1434, dpi_1435, n_1436], **kwargs_1437)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 103, 12), tuple_1432, correct_roundoff_call_result_1438)
    # Adding element type (line 103)
    
    # Call to correct_roundoff(...): (line 103)
    # Processing the call arguments (line 103)
    # Getting the type of 'hnew' (line 103)
    hnew_1440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 61), 'hnew', False)
    # Getting the type of 'dpi' (line 103)
    dpi_1441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 67), 'dpi', False)
    # Getting the type of 'n' (line 103)
    n_1442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 72), 'n', False)
    # Processing the call keyword arguments (line 103)
    kwargs_1443 = {}
    # Getting the type of 'correct_roundoff' (line 103)
    correct_roundoff_1439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 44), 'correct_roundoff', False)
    # Calling correct_roundoff(args, kwargs) (line 103)
    correct_roundoff_call_result_1444 = invoke(stypy.reporting.localization.Localization(__file__, 103, 44), correct_roundoff_1439, *[hnew_1440, dpi_1441, n_1442], **kwargs_1443)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 103, 12), tuple_1432, correct_roundoff_call_result_1444)
    
    # Assigning a type to the variable 'stypy_return_type' (line 103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 4), 'stypy_return_type', tuple_1432)
    
    # ################# End of 'adjusted_figsize(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'adjusted_figsize' in the type store
    # Getting the type of 'stypy_return_type' (line 71)
    stypy_return_type_1445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1445)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'adjusted_figsize'
    return stypy_return_type_1445

# Assigning a type to the variable 'adjusted_figsize' (line 71)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 71, 0), 'adjusted_figsize', adjusted_figsize)
# Declaration of the 'MovieWriterRegistry' class

class MovieWriterRegistry(object, ):
    unicode_1446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, 4), 'unicode', u'Registry of available writer classes by human readable name.')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 109, 4, False)
        # Assigning a type to the variable 'self' (line 110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 110, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriterRegistry.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 110):
        
        # Assigning a Call to a Attribute (line 110):
        
        # Call to dict(...): (line 110)
        # Processing the call keyword arguments (line 110)
        kwargs_1448 = {}
        # Getting the type of 'dict' (line 110)
        dict_1447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 21), 'dict', False)
        # Calling dict(args, kwargs) (line 110)
        dict_call_result_1449 = invoke(stypy.reporting.localization.Localization(__file__, 110, 21), dict_1447, *[], **kwargs_1448)
        
        # Getting the type of 'self' (line 110)
        self_1450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 8), 'self')
        # Setting the type of the member 'avail' of a type (line 110)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 110, 8), self_1450, 'avail', dict_call_result_1449)
        
        # Assigning a Call to a Attribute (line 111):
        
        # Assigning a Call to a Attribute (line 111):
        
        # Call to dict(...): (line 111)
        # Processing the call keyword arguments (line 111)
        kwargs_1452 = {}
        # Getting the type of 'dict' (line 111)
        dict_1451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 27), 'dict', False)
        # Calling dict(args, kwargs) (line 111)
        dict_call_result_1453 = invoke(stypy.reporting.localization.Localization(__file__, 111, 27), dict_1451, *[], **kwargs_1452)
        
        # Getting the type of 'self' (line 111)
        self_1454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 8), 'self')
        # Setting the type of the member '_registered' of a type (line 111)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 111, 8), self_1454, '_registered', dict_call_result_1453)
        
        # Assigning a Name to a Attribute (line 112):
        
        # Assigning a Name to a Attribute (line 112):
        # Getting the type of 'False' (line 112)
        False_1455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 22), 'False')
        # Getting the type of 'self' (line 112)
        self_1456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 8), 'self')
        # Setting the type of the member '_dirty' of a type (line 112)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 112, 8), self_1456, '_dirty', False_1455)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_dirty(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_dirty'
        module_type_store = module_type_store.open_function_context('set_dirty', 114, 4, False)
        # Assigning a type to the variable 'self' (line 115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 115, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriterRegistry.set_dirty.__dict__.__setitem__('stypy_localization', localization)
        MovieWriterRegistry.set_dirty.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriterRegistry.set_dirty.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriterRegistry.set_dirty.__dict__.__setitem__('stypy_function_name', 'MovieWriterRegistry.set_dirty')
        MovieWriterRegistry.set_dirty.__dict__.__setitem__('stypy_param_names_list', [])
        MovieWriterRegistry.set_dirty.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriterRegistry.set_dirty.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriterRegistry.set_dirty.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriterRegistry.set_dirty.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriterRegistry.set_dirty.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriterRegistry.set_dirty.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriterRegistry.set_dirty', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_dirty', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_dirty(...)' code ##################

        unicode_1457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 8), 'unicode', u'Sets a flag to re-setup the writers.')
        
        # Assigning a Name to a Attribute (line 116):
        
        # Assigning a Name to a Attribute (line 116):
        # Getting the type of 'True' (line 116)
        True_1458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 22), 'True')
        # Getting the type of 'self' (line 116)
        self_1459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 8), 'self')
        # Setting the type of the member '_dirty' of a type (line 116)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 116, 8), self_1459, '_dirty', True_1458)
        
        # ################# End of 'set_dirty(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_dirty' in the type store
        # Getting the type of 'stypy_return_type' (line 114)
        stypy_return_type_1460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1460)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_dirty'
        return stypy_return_type_1460


    @norecursion
    def register(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'register'
        module_type_store = module_type_store.open_function_context('register', 118, 4, False)
        # Assigning a type to the variable 'self' (line 119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriterRegistry.register.__dict__.__setitem__('stypy_localization', localization)
        MovieWriterRegistry.register.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriterRegistry.register.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriterRegistry.register.__dict__.__setitem__('stypy_function_name', 'MovieWriterRegistry.register')
        MovieWriterRegistry.register.__dict__.__setitem__('stypy_param_names_list', ['name'])
        MovieWriterRegistry.register.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriterRegistry.register.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriterRegistry.register.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriterRegistry.register.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriterRegistry.register.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriterRegistry.register.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriterRegistry.register', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'register', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'register(...)' code ##################

        unicode_1461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, (-1)), 'unicode', u'Decorator for registering a class under a name.\n\n        Example use::\n\n            @registry.register(name)\n            class Foo:\n                pass\n        ')

        @norecursion
        def wrapper(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'wrapper'
            module_type_store = module_type_store.open_function_context('wrapper', 127, 8, False)
            
            # Passed parameters checking function
            wrapper.stypy_localization = localization
            wrapper.stypy_type_of_self = None
            wrapper.stypy_type_store = module_type_store
            wrapper.stypy_function_name = 'wrapper'
            wrapper.stypy_param_names_list = ['writerClass']
            wrapper.stypy_varargs_param_name = None
            wrapper.stypy_kwargs_param_name = None
            wrapper.stypy_call_defaults = defaults
            wrapper.stypy_call_varargs = varargs
            wrapper.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'wrapper', ['writerClass'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'wrapper', localization, ['writerClass'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'wrapper(...)' code ##################

            
            # Assigning a Name to a Subscript (line 128):
            
            # Assigning a Name to a Subscript (line 128):
            # Getting the type of 'writerClass' (line 128)
            writerClass_1462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 37), 'writerClass')
            # Getting the type of 'self' (line 128)
            self_1463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 12), 'self')
            # Obtaining the member '_registered' of a type (line 128)
            _registered_1464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 128, 12), self_1463, '_registered')
            # Getting the type of 'name' (line 128)
            name_1465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 29), 'name')
            # Storing an element on a container (line 128)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 128, 12), _registered_1464, (name_1465, writerClass_1462))
            
            
            # Call to isAvailable(...): (line 129)
            # Processing the call keyword arguments (line 129)
            kwargs_1468 = {}
            # Getting the type of 'writerClass' (line 129)
            writerClass_1466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 15), 'writerClass', False)
            # Obtaining the member 'isAvailable' of a type (line 129)
            isAvailable_1467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 129, 15), writerClass_1466, 'isAvailable')
            # Calling isAvailable(args, kwargs) (line 129)
            isAvailable_call_result_1469 = invoke(stypy.reporting.localization.Localization(__file__, 129, 15), isAvailable_1467, *[], **kwargs_1468)
            
            # Testing the type of an if condition (line 129)
            if_condition_1470 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 129, 12), isAvailable_call_result_1469)
            # Assigning a type to the variable 'if_condition_1470' (line 129)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 12), 'if_condition_1470', if_condition_1470)
            # SSA begins for if statement (line 129)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Subscript (line 130):
            
            # Assigning a Name to a Subscript (line 130):
            # Getting the type of 'writerClass' (line 130)
            writerClass_1471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 35), 'writerClass')
            # Getting the type of 'self' (line 130)
            self_1472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 16), 'self')
            # Obtaining the member 'avail' of a type (line 130)
            avail_1473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 16), self_1472, 'avail')
            # Getting the type of 'name' (line 130)
            name_1474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 27), 'name')
            # Storing an element on a container (line 130)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 130, 16), avail_1473, (name_1474, writerClass_1471))
            # SSA join for if statement (line 129)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'writerClass' (line 131)
            writerClass_1475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 19), 'writerClass')
            # Assigning a type to the variable 'stypy_return_type' (line 131)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 131, 12), 'stypy_return_type', writerClass_1475)
            
            # ################# End of 'wrapper(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'wrapper' in the type store
            # Getting the type of 'stypy_return_type' (line 127)
            stypy_return_type_1476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_1476)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'wrapper'
            return stypy_return_type_1476

        # Assigning a type to the variable 'wrapper' (line 127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 8), 'wrapper', wrapper)
        # Getting the type of 'wrapper' (line 132)
        wrapper_1477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 15), 'wrapper')
        # Assigning a type to the variable 'stypy_return_type' (line 132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 8), 'stypy_return_type', wrapper_1477)
        
        # ################# End of 'register(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'register' in the type store
        # Getting the type of 'stypy_return_type' (line 118)
        stypy_return_type_1478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1478)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'register'
        return stypy_return_type_1478


    @norecursion
    def ensure_not_dirty(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ensure_not_dirty'
        module_type_store = module_type_store.open_function_context('ensure_not_dirty', 134, 4, False)
        # Assigning a type to the variable 'self' (line 135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 135, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriterRegistry.ensure_not_dirty.__dict__.__setitem__('stypy_localization', localization)
        MovieWriterRegistry.ensure_not_dirty.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriterRegistry.ensure_not_dirty.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriterRegistry.ensure_not_dirty.__dict__.__setitem__('stypy_function_name', 'MovieWriterRegistry.ensure_not_dirty')
        MovieWriterRegistry.ensure_not_dirty.__dict__.__setitem__('stypy_param_names_list', [])
        MovieWriterRegistry.ensure_not_dirty.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriterRegistry.ensure_not_dirty.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriterRegistry.ensure_not_dirty.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriterRegistry.ensure_not_dirty.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriterRegistry.ensure_not_dirty.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriterRegistry.ensure_not_dirty.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriterRegistry.ensure_not_dirty', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ensure_not_dirty', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ensure_not_dirty(...)' code ##################

        unicode_1479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 135, 8), 'unicode', u'If dirty, reasks the writers if they are available')
        
        # Getting the type of 'self' (line 136)
        self_1480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 11), 'self')
        # Obtaining the member '_dirty' of a type (line 136)
        _dirty_1481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 136, 11), self_1480, '_dirty')
        # Testing the type of an if condition (line 136)
        if_condition_1482 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 136, 8), _dirty_1481)
        # Assigning a type to the variable 'if_condition_1482' (line 136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 8), 'if_condition_1482', if_condition_1482)
        # SSA begins for if statement (line 136)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to reset_available_writers(...): (line 137)
        # Processing the call keyword arguments (line 137)
        kwargs_1485 = {}
        # Getting the type of 'self' (line 137)
        self_1483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 12), 'self', False)
        # Obtaining the member 'reset_available_writers' of a type (line 137)
        reset_available_writers_1484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 137, 12), self_1483, 'reset_available_writers')
        # Calling reset_available_writers(args, kwargs) (line 137)
        reset_available_writers_call_result_1486 = invoke(stypy.reporting.localization.Localization(__file__, 137, 12), reset_available_writers_1484, *[], **kwargs_1485)
        
        # SSA join for if statement (line 136)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'ensure_not_dirty(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ensure_not_dirty' in the type store
        # Getting the type of 'stypy_return_type' (line 134)
        stypy_return_type_1487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1487)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ensure_not_dirty'
        return stypy_return_type_1487


    @norecursion
    def reset_available_writers(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'reset_available_writers'
        module_type_store = module_type_store.open_function_context('reset_available_writers', 139, 4, False)
        # Assigning a type to the variable 'self' (line 140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 140, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriterRegistry.reset_available_writers.__dict__.__setitem__('stypy_localization', localization)
        MovieWriterRegistry.reset_available_writers.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriterRegistry.reset_available_writers.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriterRegistry.reset_available_writers.__dict__.__setitem__('stypy_function_name', 'MovieWriterRegistry.reset_available_writers')
        MovieWriterRegistry.reset_available_writers.__dict__.__setitem__('stypy_param_names_list', [])
        MovieWriterRegistry.reset_available_writers.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriterRegistry.reset_available_writers.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriterRegistry.reset_available_writers.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriterRegistry.reset_available_writers.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriterRegistry.reset_available_writers.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriterRegistry.reset_available_writers.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriterRegistry.reset_available_writers', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'reset_available_writers', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'reset_available_writers(...)' code ##################

        unicode_1488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 8), 'unicode', u'Reset the available state of all registered writers')
        
        # Assigning a Dict to a Attribute (line 141):
        
        # Assigning a Dict to a Attribute (line 141):
        
        # Obtaining an instance of the builtin type 'dict' (line 141)
        dict_1489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 21), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 141)
        
        # Getting the type of 'self' (line 141)
        self_1490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 8), 'self')
        # Setting the type of the member 'avail' of a type (line 141)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 141, 8), self_1490, 'avail', dict_1489)
        
        
        # Call to items(...): (line 142)
        # Processing the call keyword arguments (line 142)
        kwargs_1494 = {}
        # Getting the type of 'self' (line 142)
        self_1491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 33), 'self', False)
        # Obtaining the member '_registered' of a type (line 142)
        _registered_1492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 142, 33), self_1491, '_registered')
        # Obtaining the member 'items' of a type (line 142)
        items_1493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 142, 33), _registered_1492, 'items')
        # Calling items(args, kwargs) (line 142)
        items_call_result_1495 = invoke(stypy.reporting.localization.Localization(__file__, 142, 33), items_1493, *[], **kwargs_1494)
        
        # Testing the type of a for loop iterable (line 142)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 142, 8), items_call_result_1495)
        # Getting the type of the for loop variable (line 142)
        for_loop_var_1496 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 142, 8), items_call_result_1495)
        # Assigning a type to the variable 'name' (line 142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 8), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 142, 8), for_loop_var_1496))
        # Assigning a type to the variable 'writerClass' (line 142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 8), 'writerClass', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 142, 8), for_loop_var_1496))
        # SSA begins for a for statement (line 142)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to isAvailable(...): (line 143)
        # Processing the call keyword arguments (line 143)
        kwargs_1499 = {}
        # Getting the type of 'writerClass' (line 143)
        writerClass_1497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 15), 'writerClass', False)
        # Obtaining the member 'isAvailable' of a type (line 143)
        isAvailable_1498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 143, 15), writerClass_1497, 'isAvailable')
        # Calling isAvailable(args, kwargs) (line 143)
        isAvailable_call_result_1500 = invoke(stypy.reporting.localization.Localization(__file__, 143, 15), isAvailable_1498, *[], **kwargs_1499)
        
        # Testing the type of an if condition (line 143)
        if_condition_1501 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 143, 12), isAvailable_call_result_1500)
        # Assigning a type to the variable 'if_condition_1501' (line 143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 12), 'if_condition_1501', if_condition_1501)
        # SSA begins for if statement (line 143)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 144):
        
        # Assigning a Name to a Subscript (line 144):
        # Getting the type of 'writerClass' (line 144)
        writerClass_1502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 35), 'writerClass')
        # Getting the type of 'self' (line 144)
        self_1503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 16), 'self')
        # Obtaining the member 'avail' of a type (line 144)
        avail_1504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 16), self_1503, 'avail')
        # Getting the type of 'name' (line 144)
        name_1505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 27), 'name')
        # Storing an element on a container (line 144)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 144, 16), avail_1504, (name_1505, writerClass_1502))
        # SSA join for if statement (line 143)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 145):
        
        # Assigning a Name to a Attribute (line 145):
        # Getting the type of 'False' (line 145)
        False_1506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 22), 'False')
        # Getting the type of 'self' (line 145)
        self_1507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 8), 'self')
        # Setting the type of the member '_dirty' of a type (line 145)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 8), self_1507, '_dirty', False_1506)
        
        # ################# End of 'reset_available_writers(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'reset_available_writers' in the type store
        # Getting the type of 'stypy_return_type' (line 139)
        stypy_return_type_1508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1508)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'reset_available_writers'
        return stypy_return_type_1508


    @norecursion
    def list(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'list'
        module_type_store = module_type_store.open_function_context('list', 147, 4, False)
        # Assigning a type to the variable 'self' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriterRegistry.list.__dict__.__setitem__('stypy_localization', localization)
        MovieWriterRegistry.list.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriterRegistry.list.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriterRegistry.list.__dict__.__setitem__('stypy_function_name', 'MovieWriterRegistry.list')
        MovieWriterRegistry.list.__dict__.__setitem__('stypy_param_names_list', [])
        MovieWriterRegistry.list.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriterRegistry.list.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriterRegistry.list.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriterRegistry.list.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriterRegistry.list.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriterRegistry.list.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriterRegistry.list', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'list', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'list(...)' code ##################

        unicode_1509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 8), 'unicode', u'Get a list of available MovieWriters.')
        
        # Call to ensure_not_dirty(...): (line 149)
        # Processing the call keyword arguments (line 149)
        kwargs_1512 = {}
        # Getting the type of 'self' (line 149)
        self_1510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 8), 'self', False)
        # Obtaining the member 'ensure_not_dirty' of a type (line 149)
        ensure_not_dirty_1511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 149, 8), self_1510, 'ensure_not_dirty')
        # Calling ensure_not_dirty(args, kwargs) (line 149)
        ensure_not_dirty_call_result_1513 = invoke(stypy.reporting.localization.Localization(__file__, 149, 8), ensure_not_dirty_1511, *[], **kwargs_1512)
        
        
        # Call to list(...): (line 150)
        # Processing the call arguments (line 150)
        # Getting the type of 'self' (line 150)
        self_1515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 20), 'self', False)
        # Obtaining the member 'avail' of a type (line 150)
        avail_1516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 20), self_1515, 'avail')
        # Processing the call keyword arguments (line 150)
        kwargs_1517 = {}
        # Getting the type of 'list' (line 150)
        list_1514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 15), 'list', False)
        # Calling list(args, kwargs) (line 150)
        list_call_result_1518 = invoke(stypy.reporting.localization.Localization(__file__, 150, 15), list_1514, *[avail_1516], **kwargs_1517)
        
        # Assigning a type to the variable 'stypy_return_type' (line 150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 8), 'stypy_return_type', list_call_result_1518)
        
        # ################# End of 'list(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'list' in the type store
        # Getting the type of 'stypy_return_type' (line 147)
        stypy_return_type_1519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1519)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'list'
        return stypy_return_type_1519


    @norecursion
    def is_available(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'is_available'
        module_type_store = module_type_store.open_function_context('is_available', 152, 4, False)
        # Assigning a type to the variable 'self' (line 153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriterRegistry.is_available.__dict__.__setitem__('stypy_localization', localization)
        MovieWriterRegistry.is_available.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriterRegistry.is_available.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriterRegistry.is_available.__dict__.__setitem__('stypy_function_name', 'MovieWriterRegistry.is_available')
        MovieWriterRegistry.is_available.__dict__.__setitem__('stypy_param_names_list', ['name'])
        MovieWriterRegistry.is_available.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriterRegistry.is_available.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriterRegistry.is_available.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriterRegistry.is_available.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriterRegistry.is_available.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriterRegistry.is_available.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriterRegistry.is_available', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_available', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_available(...)' code ##################

        unicode_1520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, (-1)), 'unicode', u'Check if given writer is available by name.\n\n        Parameters\n        ----------\n        name : str\n\n        Returns\n        -------\n        available : bool\n        ')
        
        # Call to ensure_not_dirty(...): (line 163)
        # Processing the call keyword arguments (line 163)
        kwargs_1523 = {}
        # Getting the type of 'self' (line 163)
        self_1521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 8), 'self', False)
        # Obtaining the member 'ensure_not_dirty' of a type (line 163)
        ensure_not_dirty_1522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 163, 8), self_1521, 'ensure_not_dirty')
        # Calling ensure_not_dirty(args, kwargs) (line 163)
        ensure_not_dirty_call_result_1524 = invoke(stypy.reporting.localization.Localization(__file__, 163, 8), ensure_not_dirty_1522, *[], **kwargs_1523)
        
        
        # Getting the type of 'name' (line 164)
        name_1525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 15), 'name')
        # Getting the type of 'self' (line 164)
        self_1526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 23), 'self')
        # Obtaining the member 'avail' of a type (line 164)
        avail_1527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 23), self_1526, 'avail')
        # Applying the binary operator 'in' (line 164)
        result_contains_1528 = python_operator(stypy.reporting.localization.Localization(__file__, 164, 15), 'in', name_1525, avail_1527)
        
        # Assigning a type to the variable 'stypy_return_type' (line 164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 8), 'stypy_return_type', result_contains_1528)
        
        # ################# End of 'is_available(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_available' in the type store
        # Getting the type of 'stypy_return_type' (line 152)
        stypy_return_type_1529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1529)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_available'
        return stypy_return_type_1529


    @norecursion
    def __getitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getitem__'
        module_type_store = module_type_store.open_function_context('__getitem__', 166, 4, False)
        # Assigning a type to the variable 'self' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriterRegistry.__getitem__.__dict__.__setitem__('stypy_localization', localization)
        MovieWriterRegistry.__getitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriterRegistry.__getitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriterRegistry.__getitem__.__dict__.__setitem__('stypy_function_name', 'MovieWriterRegistry.__getitem__')
        MovieWriterRegistry.__getitem__.__dict__.__setitem__('stypy_param_names_list', ['name'])
        MovieWriterRegistry.__getitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriterRegistry.__getitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriterRegistry.__getitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriterRegistry.__getitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriterRegistry.__getitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriterRegistry.__getitem__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriterRegistry.__getitem__', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getitem__', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getitem__(...)' code ##################

        
        # Call to ensure_not_dirty(...): (line 167)
        # Processing the call keyword arguments (line 167)
        kwargs_1532 = {}
        # Getting the type of 'self' (line 167)
        self_1530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'self', False)
        # Obtaining the member 'ensure_not_dirty' of a type (line 167)
        ensure_not_dirty_1531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 8), self_1530, 'ensure_not_dirty')
        # Calling ensure_not_dirty(args, kwargs) (line 167)
        ensure_not_dirty_call_result_1533 = invoke(stypy.reporting.localization.Localization(__file__, 167, 8), ensure_not_dirty_1531, *[], **kwargs_1532)
        
        
        
        # Getting the type of 'self' (line 168)
        self_1534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 15), 'self')
        # Obtaining the member 'avail' of a type (line 168)
        avail_1535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 15), self_1534, 'avail')
        # Applying the 'not' unary operator (line 168)
        result_not__1536 = python_operator(stypy.reporting.localization.Localization(__file__, 168, 11), 'not', avail_1535)
        
        # Testing the type of an if condition (line 168)
        if_condition_1537 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 168, 8), result_not__1536)
        # Assigning a type to the variable 'if_condition_1537' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 8), 'if_condition_1537', if_condition_1537)
        # SSA begins for if statement (line 168)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 169)
        # Processing the call arguments (line 169)
        unicode_1539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 31), 'unicode', u'No MovieWriters available!')
        # Processing the call keyword arguments (line 169)
        kwargs_1540 = {}
        # Getting the type of 'RuntimeError' (line 169)
        RuntimeError_1538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 169)
        RuntimeError_call_result_1541 = invoke(stypy.reporting.localization.Localization(__file__, 169, 18), RuntimeError_1538, *[unicode_1539], **kwargs_1540)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 169, 12), RuntimeError_call_result_1541, 'raise parameter', BaseException)
        # SSA join for if statement (line 168)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 170)
        name_1542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 26), 'name')
        # Getting the type of 'self' (line 170)
        self_1543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 15), 'self')
        # Obtaining the member 'avail' of a type (line 170)
        avail_1544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 170, 15), self_1543, 'avail')
        # Obtaining the member '__getitem__' of a type (line 170)
        getitem___1545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 170, 15), avail_1544, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 170)
        subscript_call_result_1546 = invoke(stypy.reporting.localization.Localization(__file__, 170, 15), getitem___1545, name_1542)
        
        # Assigning a type to the variable 'stypy_return_type' (line 170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 170, 8), 'stypy_return_type', subscript_call_result_1546)
        
        # ################# End of '__getitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 166)
        stypy_return_type_1547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1547)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getitem__'
        return stypy_return_type_1547


# Assigning a type to the variable 'MovieWriterRegistry' (line 107)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 0), 'MovieWriterRegistry', MovieWriterRegistry)

# Assigning a Call to a Name (line 172):

# Assigning a Call to a Name (line 172):

# Call to MovieWriterRegistry(...): (line 172)
# Processing the call keyword arguments (line 172)
kwargs_1549 = {}
# Getting the type of 'MovieWriterRegistry' (line 172)
MovieWriterRegistry_1548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 10), 'MovieWriterRegistry', False)
# Calling MovieWriterRegistry(args, kwargs) (line 172)
MovieWriterRegistry_call_result_1550 = invoke(stypy.reporting.localization.Localization(__file__, 172, 10), MovieWriterRegistry_1548, *[], **kwargs_1549)

# Assigning a type to the variable 'writers' (line 172)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 0), 'writers', MovieWriterRegistry_call_result_1550)
# Declaration of the 'AbstractMovieWriter' class

# Call to with_metaclass(...): (line 175)
# Processing the call arguments (line 175)
# Getting the type of 'abc' (line 175)
abc_1553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 45), 'abc', False)
# Obtaining the member 'ABCMeta' of a type (line 175)
ABCMeta_1554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 45), abc_1553, 'ABCMeta')
# Processing the call keyword arguments (line 175)
kwargs_1555 = {}
# Getting the type of 'six' (line 175)
six_1551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 26), 'six', False)
# Obtaining the member 'with_metaclass' of a type (line 175)
with_metaclass_1552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 26), six_1551, 'with_metaclass')
# Calling with_metaclass(args, kwargs) (line 175)
with_metaclass_call_result_1556 = invoke(stypy.reporting.localization.Localization(__file__, 175, 26), with_metaclass_1552, *[ABCMeta_1554], **kwargs_1555)


class AbstractMovieWriter(with_metaclass_call_result_1556, ):
    unicode_1557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, (-1)), 'unicode', u"\n    Abstract base class for writing movies. Fundamentally, what a MovieWriter\n    does is provide is a way to grab frames by calling grab_frame().\n\n    setup() is called to start the process and finish() is called afterwards.\n\n    This class is set up to provide for writing movie frame data to a pipe.\n    saving() is provided as a context manager to facilitate this process as::\n\n        with moviewriter.saving(fig, outfile='myfile.mp4', dpi=100):\n            # Iterate over frames\n            moviewriter.grab_frame(**savefig_kwargs)\n\n    The use of the context manager ensures that setup() and finish() are\n    performed as necessary.\n\n    An instance of a concrete subclass of this class can be given as the\n    ``writer`` argument of `Animation.save()`.\n    ")

    @norecursion
    def setup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 197)
        None_1558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 38), 'None')
        defaults = [None_1558]
        # Create a new context for function 'setup'
        module_type_store = module_type_store.open_function_context('setup', 196, 4, False)
        # Assigning a type to the variable 'self' (line 197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AbstractMovieWriter.setup.__dict__.__setitem__('stypy_localization', localization)
        AbstractMovieWriter.setup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AbstractMovieWriter.setup.__dict__.__setitem__('stypy_type_store', module_type_store)
        AbstractMovieWriter.setup.__dict__.__setitem__('stypy_function_name', 'AbstractMovieWriter.setup')
        AbstractMovieWriter.setup.__dict__.__setitem__('stypy_param_names_list', ['fig', 'outfile', 'dpi'])
        AbstractMovieWriter.setup.__dict__.__setitem__('stypy_varargs_param_name', None)
        AbstractMovieWriter.setup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AbstractMovieWriter.setup.__dict__.__setitem__('stypy_call_defaults', defaults)
        AbstractMovieWriter.setup.__dict__.__setitem__('stypy_call_varargs', varargs)
        AbstractMovieWriter.setup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AbstractMovieWriter.setup.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AbstractMovieWriter.setup', ['fig', 'outfile', 'dpi'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'setup', localization, ['fig', 'outfile', 'dpi'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'setup(...)' code ##################

        unicode_1559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, (-1)), 'unicode', u'\n        Perform setup for writing the movie file.\n\n        Parameters\n        ----------\n        fig: `matplotlib.figure.Figure` instance\n            The figure object that contains the information for frames\n        outfile: string\n            The filename of the resulting movie file\n        dpi: int, optional\n            The DPI (or resolution) for the file.  This controls the size\n            in pixels of the resulting movie file. Default is ``fig.dpi``.\n        ')
        
        # ################# End of 'setup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'setup' in the type store
        # Getting the type of 'stypy_return_type' (line 196)
        stypy_return_type_1560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1560)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'setup'
        return stypy_return_type_1560


    @norecursion
    def grab_frame(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'grab_frame'
        module_type_store = module_type_store.open_function_context('grab_frame', 212, 4, False)
        # Assigning a type to the variable 'self' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AbstractMovieWriter.grab_frame.__dict__.__setitem__('stypy_localization', localization)
        AbstractMovieWriter.grab_frame.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AbstractMovieWriter.grab_frame.__dict__.__setitem__('stypy_type_store', module_type_store)
        AbstractMovieWriter.grab_frame.__dict__.__setitem__('stypy_function_name', 'AbstractMovieWriter.grab_frame')
        AbstractMovieWriter.grab_frame.__dict__.__setitem__('stypy_param_names_list', [])
        AbstractMovieWriter.grab_frame.__dict__.__setitem__('stypy_varargs_param_name', None)
        AbstractMovieWriter.grab_frame.__dict__.__setitem__('stypy_kwargs_param_name', 'savefig_kwargs')
        AbstractMovieWriter.grab_frame.__dict__.__setitem__('stypy_call_defaults', defaults)
        AbstractMovieWriter.grab_frame.__dict__.__setitem__('stypy_call_varargs', varargs)
        AbstractMovieWriter.grab_frame.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AbstractMovieWriter.grab_frame.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AbstractMovieWriter.grab_frame', [], None, 'savefig_kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'grab_frame', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'grab_frame(...)' code ##################

        unicode_1561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, (-1)), 'unicode', u'\n        Grab the image information from the figure and save as a movie frame.\n\n        All keyword arguments in savefig_kwargs are passed on to the `savefig`\n        command that saves the figure.\n        ')
        
        # ################# End of 'grab_frame(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'grab_frame' in the type store
        # Getting the type of 'stypy_return_type' (line 212)
        stypy_return_type_1562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1562)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'grab_frame'
        return stypy_return_type_1562


    @norecursion
    def finish(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'finish'
        module_type_store = module_type_store.open_function_context('finish', 221, 4, False)
        # Assigning a type to the variable 'self' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AbstractMovieWriter.finish.__dict__.__setitem__('stypy_localization', localization)
        AbstractMovieWriter.finish.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AbstractMovieWriter.finish.__dict__.__setitem__('stypy_type_store', module_type_store)
        AbstractMovieWriter.finish.__dict__.__setitem__('stypy_function_name', 'AbstractMovieWriter.finish')
        AbstractMovieWriter.finish.__dict__.__setitem__('stypy_param_names_list', [])
        AbstractMovieWriter.finish.__dict__.__setitem__('stypy_varargs_param_name', None)
        AbstractMovieWriter.finish.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AbstractMovieWriter.finish.__dict__.__setitem__('stypy_call_defaults', defaults)
        AbstractMovieWriter.finish.__dict__.__setitem__('stypy_call_varargs', varargs)
        AbstractMovieWriter.finish.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AbstractMovieWriter.finish.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AbstractMovieWriter.finish', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'finish', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'finish(...)' code ##################

        unicode_1563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 8), 'unicode', u'Finish any processing for writing the movie.')
        
        # ################# End of 'finish(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'finish' in the type store
        # Getting the type of 'stypy_return_type' (line 221)
        stypy_return_type_1564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1564)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'finish'
        return stypy_return_type_1564


    @norecursion
    def saving(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'saving'
        module_type_store = module_type_store.open_function_context('saving', 225, 4, False)
        # Assigning a type to the variable 'self' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AbstractMovieWriter.saving.__dict__.__setitem__('stypy_localization', localization)
        AbstractMovieWriter.saving.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AbstractMovieWriter.saving.__dict__.__setitem__('stypy_type_store', module_type_store)
        AbstractMovieWriter.saving.__dict__.__setitem__('stypy_function_name', 'AbstractMovieWriter.saving')
        AbstractMovieWriter.saving.__dict__.__setitem__('stypy_param_names_list', ['fig', 'outfile', 'dpi'])
        AbstractMovieWriter.saving.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        AbstractMovieWriter.saving.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        AbstractMovieWriter.saving.__dict__.__setitem__('stypy_call_defaults', defaults)
        AbstractMovieWriter.saving.__dict__.__setitem__('stypy_call_varargs', varargs)
        AbstractMovieWriter.saving.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AbstractMovieWriter.saving.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AbstractMovieWriter.saving', ['fig', 'outfile', 'dpi'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'saving', localization, ['fig', 'outfile', 'dpi'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'saving(...)' code ##################

        unicode_1565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, (-1)), 'unicode', u'\n        Context manager to facilitate writing the movie file.\n\n        ``*args, **kw`` are any parameters that should be passed to `setup`.\n        ')
        
        # Call to setup(...): (line 233)
        # Processing the call arguments (line 233)
        # Getting the type of 'fig' (line 233)
        fig_1568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 19), 'fig', False)
        # Getting the type of 'outfile' (line 233)
        outfile_1569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 24), 'outfile', False)
        # Getting the type of 'dpi' (line 233)
        dpi_1570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 33), 'dpi', False)
        # Getting the type of 'args' (line 233)
        args_1571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 39), 'args', False)
        # Processing the call keyword arguments (line 233)
        # Getting the type of 'kwargs' (line 233)
        kwargs_1572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 47), 'kwargs', False)
        kwargs_1573 = {'kwargs_1572': kwargs_1572}
        # Getting the type of 'self' (line 233)
        self_1566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'self', False)
        # Obtaining the member 'setup' of a type (line 233)
        setup_1567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 8), self_1566, 'setup')
        # Calling setup(args, kwargs) (line 233)
        setup_call_result_1574 = invoke(stypy.reporting.localization.Localization(__file__, 233, 8), setup_1567, *[fig_1568, outfile_1569, dpi_1570, args_1571], **kwargs_1573)
        
        
        # Try-finally block (line 234)
        # Creating a generator
        # Getting the type of 'self' (line 235)
        self_1575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 18), 'self')
        GeneratorType_1576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 235, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 235, 12), GeneratorType_1576, self_1575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 235, 12), 'stypy_return_type', GeneratorType_1576)
        
        # finally branch of the try-finally block (line 234)
        
        # Call to finish(...): (line 237)
        # Processing the call keyword arguments (line 237)
        kwargs_1579 = {}
        # Getting the type of 'self' (line 237)
        self_1577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 12), 'self', False)
        # Obtaining the member 'finish' of a type (line 237)
        finish_1578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 12), self_1577, 'finish')
        # Calling finish(args, kwargs) (line 237)
        finish_call_result_1580 = invoke(stypy.reporting.localization.Localization(__file__, 237, 12), finish_1578, *[], **kwargs_1579)
        
        
        
        # ################# End of 'saving(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'saving' in the type store
        # Getting the type of 'stypy_return_type' (line 225)
        stypy_return_type_1581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1581)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'saving'
        return stypy_return_type_1581


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 175, 0, False)
        # Assigning a type to the variable 'self' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AbstractMovieWriter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'AbstractMovieWriter' (line 175)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 0), 'AbstractMovieWriter', AbstractMovieWriter)
# Declaration of the 'MovieWriter' class
# Getting the type of 'AbstractMovieWriter' (line 240)
AbstractMovieWriter_1582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 18), 'AbstractMovieWriter')

class MovieWriter(AbstractMovieWriter_1582, ):
    unicode_1583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, (-1)), 'unicode', u"Base class for writing movies.\n\n    This class is set up to provide for writing movie frame data to a pipe.\n    See examples for how to use these classes.\n\n    Attributes\n    ----------\n    frame_format : str\n        The format used in writing frame data, defaults to 'rgba'\n    fig : `~matplotlib.figure.Figure`\n        The figure to capture data from.\n        This must be provided by the sub-classes.\n\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_1584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 27), 'int')
        # Getting the type of 'None' (line 256)
        None_1585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 36), 'None')
        # Getting the type of 'None' (line 256)
        None_1586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 50), 'None')
        # Getting the type of 'None' (line 256)
        None_1587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 67), 'None')
        # Getting the type of 'None' (line 257)
        None_1588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 26), 'None')
        defaults = [int_1584, None_1585, None_1586, None_1587, None_1588]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 256, 4, False)
        # Assigning a type to the variable 'self' (line 257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriter.__init__', ['fps', 'codec', 'bitrate', 'extra_args', 'metadata'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fps', 'codec', 'bitrate', 'extra_args', 'metadata'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_1589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, (-1)), 'unicode', u'MovieWriter\n\n        Parameters\n        ----------\n        fps: int\n            Framerate for movie.\n        codec: string or None, optional\n            The codec to use. If ``None`` (the default) the ``animation.codec``\n            rcParam is used.\n        bitrate: int or None, optional\n            The bitrate for the saved movie file, which is one way to control\n            the output file size and quality. The default value is ``None``,\n            which uses the ``animation.bitrate`` rcParam.  A value of -1\n            implies that the bitrate should be determined automatically by the\n            underlying utility.\n        extra_args: list of strings or None, optional\n            A list of extra string arguments to be passed to the underlying\n            movie utility. The default is ``None``, which passes the additional\n            arguments in the ``animation.extra_args`` rcParam.\n        metadata: Dict[str, str] or None\n            A dictionary of keys and values for metadata to include in the\n            output file. Some keys that may be of use include:\n            title, artist, genre, subject, copyright, srcform, comment.\n        ')
        
        # Assigning a Name to a Attribute (line 282):
        
        # Assigning a Name to a Attribute (line 282):
        # Getting the type of 'fps' (line 282)
        fps_1590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 19), 'fps')
        # Getting the type of 'self' (line 282)
        self_1591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 8), 'self')
        # Setting the type of the member 'fps' of a type (line 282)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 282, 8), self_1591, 'fps', fps_1590)
        
        # Assigning a Str to a Attribute (line 283):
        
        # Assigning a Str to a Attribute (line 283):
        unicode_1592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 283, 28), 'unicode', u'rgba')
        # Getting the type of 'self' (line 283)
        self_1593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 8), 'self')
        # Setting the type of the member 'frame_format' of a type (line 283)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 283, 8), self_1593, 'frame_format', unicode_1592)
        
        # Type idiom detected: calculating its left and rigth part (line 285)
        # Getting the type of 'codec' (line 285)
        codec_1594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 11), 'codec')
        # Getting the type of 'None' (line 285)
        None_1595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 20), 'None')
        
        (may_be_1596, more_types_in_union_1597) = may_be_none(codec_1594, None_1595)

        if may_be_1596:

            if more_types_in_union_1597:
                # Runtime conditional SSA (line 285)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Attribute (line 286):
            
            # Assigning a Subscript to a Attribute (line 286):
            
            # Obtaining the type of the subscript
            unicode_1598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 34), 'unicode', u'animation.codec')
            # Getting the type of 'rcParams' (line 286)
            rcParams_1599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 25), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 286)
            getitem___1600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 25), rcParams_1599, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 286)
            subscript_call_result_1601 = invoke(stypy.reporting.localization.Localization(__file__, 286, 25), getitem___1600, unicode_1598)
            
            # Getting the type of 'self' (line 286)
            self_1602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 12), 'self')
            # Setting the type of the member 'codec' of a type (line 286)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 12), self_1602, 'codec', subscript_call_result_1601)

            if more_types_in_union_1597:
                # Runtime conditional SSA for else branch (line 285)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_1596) or more_types_in_union_1597):
            
            # Assigning a Name to a Attribute (line 288):
            
            # Assigning a Name to a Attribute (line 288):
            # Getting the type of 'codec' (line 288)
            codec_1603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 25), 'codec')
            # Getting the type of 'self' (line 288)
            self_1604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 12), 'self')
            # Setting the type of the member 'codec' of a type (line 288)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 12), self_1604, 'codec', codec_1603)

            if (may_be_1596 and more_types_in_union_1597):
                # SSA join for if statement (line 285)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 290)
        # Getting the type of 'bitrate' (line 290)
        bitrate_1605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 11), 'bitrate')
        # Getting the type of 'None' (line 290)
        None_1606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 22), 'None')
        
        (may_be_1607, more_types_in_union_1608) = may_be_none(bitrate_1605, None_1606)

        if may_be_1607:

            if more_types_in_union_1608:
                # Runtime conditional SSA (line 290)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Attribute (line 291):
            
            # Assigning a Subscript to a Attribute (line 291):
            
            # Obtaining the type of the subscript
            unicode_1609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 36), 'unicode', u'animation.bitrate')
            # Getting the type of 'rcParams' (line 291)
            rcParams_1610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 27), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 291)
            getitem___1611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 291, 27), rcParams_1610, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 291)
            subscript_call_result_1612 = invoke(stypy.reporting.localization.Localization(__file__, 291, 27), getitem___1611, unicode_1609)
            
            # Getting the type of 'self' (line 291)
            self_1613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 12), 'self')
            # Setting the type of the member 'bitrate' of a type (line 291)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 291, 12), self_1613, 'bitrate', subscript_call_result_1612)

            if more_types_in_union_1608:
                # Runtime conditional SSA for else branch (line 290)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_1607) or more_types_in_union_1608):
            
            # Assigning a Name to a Attribute (line 293):
            
            # Assigning a Name to a Attribute (line 293):
            # Getting the type of 'bitrate' (line 293)
            bitrate_1614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 27), 'bitrate')
            # Getting the type of 'self' (line 293)
            self_1615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 12), 'self')
            # Setting the type of the member 'bitrate' of a type (line 293)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 12), self_1615, 'bitrate', bitrate_1614)

            if (may_be_1607 and more_types_in_union_1608):
                # SSA join for if statement (line 290)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 295)
        # Getting the type of 'extra_args' (line 295)
        extra_args_1616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 11), 'extra_args')
        # Getting the type of 'None' (line 295)
        None_1617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 25), 'None')
        
        (may_be_1618, more_types_in_union_1619) = may_be_none(extra_args_1616, None_1617)

        if may_be_1618:

            if more_types_in_union_1619:
                # Runtime conditional SSA (line 295)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 296):
            
            # Assigning a Call to a Attribute (line 296):
            
            # Call to list(...): (line 296)
            # Processing the call arguments (line 296)
            
            # Obtaining the type of the subscript
            # Getting the type of 'self' (line 296)
            self_1621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 44), 'self', False)
            # Obtaining the member 'args_key' of a type (line 296)
            args_key_1622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 44), self_1621, 'args_key')
            # Getting the type of 'rcParams' (line 296)
            rcParams_1623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 35), 'rcParams', False)
            # Obtaining the member '__getitem__' of a type (line 296)
            getitem___1624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 35), rcParams_1623, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 296)
            subscript_call_result_1625 = invoke(stypy.reporting.localization.Localization(__file__, 296, 35), getitem___1624, args_key_1622)
            
            # Processing the call keyword arguments (line 296)
            kwargs_1626 = {}
            # Getting the type of 'list' (line 296)
            list_1620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 30), 'list', False)
            # Calling list(args, kwargs) (line 296)
            list_call_result_1627 = invoke(stypy.reporting.localization.Localization(__file__, 296, 30), list_1620, *[subscript_call_result_1625], **kwargs_1626)
            
            # Getting the type of 'self' (line 296)
            self_1628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 12), 'self')
            # Setting the type of the member 'extra_args' of a type (line 296)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 12), self_1628, 'extra_args', list_call_result_1627)

            if more_types_in_union_1619:
                # Runtime conditional SSA for else branch (line 295)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_1618) or more_types_in_union_1619):
            
            # Assigning a Name to a Attribute (line 298):
            
            # Assigning a Name to a Attribute (line 298):
            # Getting the type of 'extra_args' (line 298)
            extra_args_1629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 30), 'extra_args')
            # Getting the type of 'self' (line 298)
            self_1630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 12), 'self')
            # Setting the type of the member 'extra_args' of a type (line 298)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 12), self_1630, 'extra_args', extra_args_1629)

            if (may_be_1618 and more_types_in_union_1619):
                # SSA join for if statement (line 295)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 300)
        # Getting the type of 'metadata' (line 300)
        metadata_1631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 11), 'metadata')
        # Getting the type of 'None' (line 300)
        None_1632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 23), 'None')
        
        (may_be_1633, more_types_in_union_1634) = may_be_none(metadata_1631, None_1632)

        if may_be_1633:

            if more_types_in_union_1634:
                # Runtime conditional SSA (line 300)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 301):
            
            # Assigning a Call to a Attribute (line 301):
            
            # Call to dict(...): (line 301)
            # Processing the call keyword arguments (line 301)
            kwargs_1636 = {}
            # Getting the type of 'dict' (line 301)
            dict_1635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 28), 'dict', False)
            # Calling dict(args, kwargs) (line 301)
            dict_call_result_1637 = invoke(stypy.reporting.localization.Localization(__file__, 301, 28), dict_1635, *[], **kwargs_1636)
            
            # Getting the type of 'self' (line 301)
            self_1638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 12), 'self')
            # Setting the type of the member 'metadata' of a type (line 301)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 12), self_1638, 'metadata', dict_call_result_1637)

            if more_types_in_union_1634:
                # Runtime conditional SSA for else branch (line 300)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_1633) or more_types_in_union_1634):
            
            # Assigning a Name to a Attribute (line 303):
            
            # Assigning a Name to a Attribute (line 303):
            # Getting the type of 'metadata' (line 303)
            metadata_1639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 28), 'metadata')
            # Getting the type of 'self' (line 303)
            self_1640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 12), 'self')
            # Setting the type of the member 'metadata' of a type (line 303)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 303, 12), self_1640, 'metadata', metadata_1639)

            if (may_be_1633 and more_types_in_union_1634):
                # SSA join for if statement (line 300)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def frame_size(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'frame_size'
        module_type_store = module_type_store.open_function_context('frame_size', 305, 4, False)
        # Assigning a type to the variable 'self' (line 306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriter.frame_size.__dict__.__setitem__('stypy_localization', localization)
        MovieWriter.frame_size.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriter.frame_size.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriter.frame_size.__dict__.__setitem__('stypy_function_name', 'MovieWriter.frame_size')
        MovieWriter.frame_size.__dict__.__setitem__('stypy_param_names_list', [])
        MovieWriter.frame_size.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriter.frame_size.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriter.frame_size.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriter.frame_size.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriter.frame_size.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriter.frame_size.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriter.frame_size', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'frame_size', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'frame_size(...)' code ##################

        unicode_1641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 307, 8), 'unicode', u'A tuple ``(width, height)`` in pixels of a movie frame.')
        
        # Assigning a Call to a Tuple (line 308):
        
        # Assigning a Call to a Name:
        
        # Call to get_size_inches(...): (line 308)
        # Processing the call keyword arguments (line 308)
        kwargs_1645 = {}
        # Getting the type of 'self' (line 308)
        self_1642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 15), 'self', False)
        # Obtaining the member 'fig' of a type (line 308)
        fig_1643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 15), self_1642, 'fig')
        # Obtaining the member 'get_size_inches' of a type (line 308)
        get_size_inches_1644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 15), fig_1643, 'get_size_inches')
        # Calling get_size_inches(args, kwargs) (line 308)
        get_size_inches_call_result_1646 = invoke(stypy.reporting.localization.Localization(__file__, 308, 15), get_size_inches_1644, *[], **kwargs_1645)
        
        # Assigning a type to the variable 'call_assignment_1284' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'call_assignment_1284', get_size_inches_call_result_1646)
        
        # Assigning a Call to a Name (line 308):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_1649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 8), 'int')
        # Processing the call keyword arguments
        kwargs_1650 = {}
        # Getting the type of 'call_assignment_1284' (line 308)
        call_assignment_1284_1647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'call_assignment_1284', False)
        # Obtaining the member '__getitem__' of a type (line 308)
        getitem___1648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 8), call_assignment_1284_1647, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_1651 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___1648, *[int_1649], **kwargs_1650)
        
        # Assigning a type to the variable 'call_assignment_1285' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'call_assignment_1285', getitem___call_result_1651)
        
        # Assigning a Name to a Name (line 308):
        # Getting the type of 'call_assignment_1285' (line 308)
        call_assignment_1285_1652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'call_assignment_1285')
        # Assigning a type to the variable 'w' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'w', call_assignment_1285_1652)
        
        # Assigning a Call to a Name (line 308):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_1655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 8), 'int')
        # Processing the call keyword arguments
        kwargs_1656 = {}
        # Getting the type of 'call_assignment_1284' (line 308)
        call_assignment_1284_1653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'call_assignment_1284', False)
        # Obtaining the member '__getitem__' of a type (line 308)
        getitem___1654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 8), call_assignment_1284_1653, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_1657 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___1654, *[int_1655], **kwargs_1656)
        
        # Assigning a type to the variable 'call_assignment_1286' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'call_assignment_1286', getitem___call_result_1657)
        
        # Assigning a Name to a Name (line 308):
        # Getting the type of 'call_assignment_1286' (line 308)
        call_assignment_1286_1658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'call_assignment_1286')
        # Assigning a type to the variable 'h' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 11), 'h', call_assignment_1286_1658)
        
        # Obtaining an instance of the builtin type 'tuple' (line 309)
        tuple_1659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 309, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 309)
        # Adding element type (line 309)
        
        # Call to int(...): (line 309)
        # Processing the call arguments (line 309)
        # Getting the type of 'w' (line 309)
        w_1661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 19), 'w', False)
        # Getting the type of 'self' (line 309)
        self_1662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 23), 'self', False)
        # Obtaining the member 'dpi' of a type (line 309)
        dpi_1663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 23), self_1662, 'dpi')
        # Applying the binary operator '*' (line 309)
        result_mul_1664 = python_operator(stypy.reporting.localization.Localization(__file__, 309, 19), '*', w_1661, dpi_1663)
        
        # Processing the call keyword arguments (line 309)
        kwargs_1665 = {}
        # Getting the type of 'int' (line 309)
        int_1660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 15), 'int', False)
        # Calling int(args, kwargs) (line 309)
        int_call_result_1666 = invoke(stypy.reporting.localization.Localization(__file__, 309, 15), int_1660, *[result_mul_1664], **kwargs_1665)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 15), tuple_1659, int_call_result_1666)
        # Adding element type (line 309)
        
        # Call to int(...): (line 309)
        # Processing the call arguments (line 309)
        # Getting the type of 'h' (line 309)
        h_1668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 38), 'h', False)
        # Getting the type of 'self' (line 309)
        self_1669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 42), 'self', False)
        # Obtaining the member 'dpi' of a type (line 309)
        dpi_1670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 42), self_1669, 'dpi')
        # Applying the binary operator '*' (line 309)
        result_mul_1671 = python_operator(stypy.reporting.localization.Localization(__file__, 309, 38), '*', h_1668, dpi_1670)
        
        # Processing the call keyword arguments (line 309)
        kwargs_1672 = {}
        # Getting the type of 'int' (line 309)
        int_1667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 34), 'int', False)
        # Calling int(args, kwargs) (line 309)
        int_call_result_1673 = invoke(stypy.reporting.localization.Localization(__file__, 309, 34), int_1667, *[result_mul_1671], **kwargs_1672)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 15), tuple_1659, int_call_result_1673)
        
        # Assigning a type to the variable 'stypy_return_type' (line 309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 8), 'stypy_return_type', tuple_1659)
        
        # ################# End of 'frame_size(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'frame_size' in the type store
        # Getting the type of 'stypy_return_type' (line 305)
        stypy_return_type_1674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1674)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'frame_size'
        return stypy_return_type_1674


    @norecursion
    def _adjust_frame_size(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_adjust_frame_size'
        module_type_store = module_type_store.open_function_context('_adjust_frame_size', 311, 4, False)
        # Assigning a type to the variable 'self' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriter._adjust_frame_size.__dict__.__setitem__('stypy_localization', localization)
        MovieWriter._adjust_frame_size.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriter._adjust_frame_size.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriter._adjust_frame_size.__dict__.__setitem__('stypy_function_name', 'MovieWriter._adjust_frame_size')
        MovieWriter._adjust_frame_size.__dict__.__setitem__('stypy_param_names_list', [])
        MovieWriter._adjust_frame_size.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriter._adjust_frame_size.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriter._adjust_frame_size.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriter._adjust_frame_size.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriter._adjust_frame_size.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriter._adjust_frame_size.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriter._adjust_frame_size', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_adjust_frame_size', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_adjust_frame_size(...)' code ##################

        
        
        # Getting the type of 'self' (line 312)
        self_1675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 11), 'self')
        # Obtaining the member 'codec' of a type (line 312)
        codec_1676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 312, 11), self_1675, 'codec')
        unicode_1677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 25), 'unicode', u'h264')
        # Applying the binary operator '==' (line 312)
        result_eq_1678 = python_operator(stypy.reporting.localization.Localization(__file__, 312, 11), '==', codec_1676, unicode_1677)
        
        # Testing the type of an if condition (line 312)
        if_condition_1679 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 312, 8), result_eq_1678)
        # Assigning a type to the variable 'if_condition_1679' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'if_condition_1679', if_condition_1679)
        # SSA begins for if statement (line 312)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 313):
        
        # Assigning a Call to a Name:
        
        # Call to get_size_inches(...): (line 313)
        # Processing the call keyword arguments (line 313)
        kwargs_1683 = {}
        # Getting the type of 'self' (line 313)
        self_1680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 21), 'self', False)
        # Obtaining the member 'fig' of a type (line 313)
        fig_1681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 313, 21), self_1680, 'fig')
        # Obtaining the member 'get_size_inches' of a type (line 313)
        get_size_inches_1682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 313, 21), fig_1681, 'get_size_inches')
        # Calling get_size_inches(args, kwargs) (line 313)
        get_size_inches_call_result_1684 = invoke(stypy.reporting.localization.Localization(__file__, 313, 21), get_size_inches_1682, *[], **kwargs_1683)
        
        # Assigning a type to the variable 'call_assignment_1287' (line 313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 12), 'call_assignment_1287', get_size_inches_call_result_1684)
        
        # Assigning a Call to a Name (line 313):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_1687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 313, 12), 'int')
        # Processing the call keyword arguments
        kwargs_1688 = {}
        # Getting the type of 'call_assignment_1287' (line 313)
        call_assignment_1287_1685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 12), 'call_assignment_1287', False)
        # Obtaining the member '__getitem__' of a type (line 313)
        getitem___1686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 313, 12), call_assignment_1287_1685, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_1689 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___1686, *[int_1687], **kwargs_1688)
        
        # Assigning a type to the variable 'call_assignment_1288' (line 313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 12), 'call_assignment_1288', getitem___call_result_1689)
        
        # Assigning a Name to a Name (line 313):
        # Getting the type of 'call_assignment_1288' (line 313)
        call_assignment_1288_1690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 12), 'call_assignment_1288')
        # Assigning a type to the variable 'wo' (line 313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 12), 'wo', call_assignment_1288_1690)
        
        # Assigning a Call to a Name (line 313):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_1693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 313, 12), 'int')
        # Processing the call keyword arguments
        kwargs_1694 = {}
        # Getting the type of 'call_assignment_1287' (line 313)
        call_assignment_1287_1691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 12), 'call_assignment_1287', False)
        # Obtaining the member '__getitem__' of a type (line 313)
        getitem___1692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 313, 12), call_assignment_1287_1691, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_1695 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___1692, *[int_1693], **kwargs_1694)
        
        # Assigning a type to the variable 'call_assignment_1289' (line 313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 12), 'call_assignment_1289', getitem___call_result_1695)
        
        # Assigning a Name to a Name (line 313):
        # Getting the type of 'call_assignment_1289' (line 313)
        call_assignment_1289_1696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 12), 'call_assignment_1289')
        # Assigning a type to the variable 'ho' (line 313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 16), 'ho', call_assignment_1289_1696)
        
        # Assigning a Call to a Tuple (line 314):
        
        # Assigning a Call to a Name:
        
        # Call to adjusted_figsize(...): (line 314)
        # Processing the call arguments (line 314)
        # Getting the type of 'wo' (line 314)
        wo_1698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 36), 'wo', False)
        # Getting the type of 'ho' (line 314)
        ho_1699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 40), 'ho', False)
        # Getting the type of 'self' (line 314)
        self_1700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 44), 'self', False)
        # Obtaining the member 'dpi' of a type (line 314)
        dpi_1701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 44), self_1700, 'dpi')
        int_1702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 54), 'int')
        # Processing the call keyword arguments (line 314)
        kwargs_1703 = {}
        # Getting the type of 'adjusted_figsize' (line 314)
        adjusted_figsize_1697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 19), 'adjusted_figsize', False)
        # Calling adjusted_figsize(args, kwargs) (line 314)
        adjusted_figsize_call_result_1704 = invoke(stypy.reporting.localization.Localization(__file__, 314, 19), adjusted_figsize_1697, *[wo_1698, ho_1699, dpi_1701, int_1702], **kwargs_1703)
        
        # Assigning a type to the variable 'call_assignment_1290' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 12), 'call_assignment_1290', adjusted_figsize_call_result_1704)
        
        # Assigning a Call to a Name (line 314):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_1707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 12), 'int')
        # Processing the call keyword arguments
        kwargs_1708 = {}
        # Getting the type of 'call_assignment_1290' (line 314)
        call_assignment_1290_1705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 12), 'call_assignment_1290', False)
        # Obtaining the member '__getitem__' of a type (line 314)
        getitem___1706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 12), call_assignment_1290_1705, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_1709 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___1706, *[int_1707], **kwargs_1708)
        
        # Assigning a type to the variable 'call_assignment_1291' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 12), 'call_assignment_1291', getitem___call_result_1709)
        
        # Assigning a Name to a Name (line 314):
        # Getting the type of 'call_assignment_1291' (line 314)
        call_assignment_1291_1710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 12), 'call_assignment_1291')
        # Assigning a type to the variable 'w' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 12), 'w', call_assignment_1291_1710)
        
        # Assigning a Call to a Name (line 314):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_1713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 12), 'int')
        # Processing the call keyword arguments
        kwargs_1714 = {}
        # Getting the type of 'call_assignment_1290' (line 314)
        call_assignment_1290_1711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 12), 'call_assignment_1290', False)
        # Obtaining the member '__getitem__' of a type (line 314)
        getitem___1712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 12), call_assignment_1290_1711, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_1715 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___1712, *[int_1713], **kwargs_1714)
        
        # Assigning a type to the variable 'call_assignment_1292' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 12), 'call_assignment_1292', getitem___call_result_1715)
        
        # Assigning a Name to a Name (line 314):
        # Getting the type of 'call_assignment_1292' (line 314)
        call_assignment_1292_1716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 12), 'call_assignment_1292')
        # Assigning a type to the variable 'h' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 15), 'h', call_assignment_1292_1716)
        
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 315)
        tuple_1717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 315)
        # Adding element type (line 315)
        # Getting the type of 'wo' (line 315)
        wo_1718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 20), 'wo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 315, 20), tuple_1717, wo_1718)
        # Adding element type (line 315)
        # Getting the type of 'ho' (line 315)
        ho_1719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 24), 'ho')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 315, 20), tuple_1717, ho_1719)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 315)
        tuple_1720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 315)
        # Adding element type (line 315)
        # Getting the type of 'w' (line 315)
        w_1721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 32), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 315, 32), tuple_1720, w_1721)
        # Adding element type (line 315)
        # Getting the type of 'h' (line 315)
        h_1722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 35), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 315, 32), tuple_1720, h_1722)
        
        # Applying the binary operator '==' (line 315)
        result_eq_1723 = python_operator(stypy.reporting.localization.Localization(__file__, 315, 19), '==', tuple_1717, tuple_1720)
        
        # Applying the 'not' unary operator (line 315)
        result_not__1724 = python_operator(stypy.reporting.localization.Localization(__file__, 315, 15), 'not', result_eq_1723)
        
        # Testing the type of an if condition (line 315)
        if_condition_1725 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 315, 12), result_not__1724)
        # Assigning a type to the variable 'if_condition_1725' (line 315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 315, 12), 'if_condition_1725', if_condition_1725)
        # SSA begins for if statement (line 315)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_size_inches(...): (line 316)
        # Processing the call arguments (line 316)
        # Getting the type of 'w' (line 316)
        w_1729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 41), 'w', False)
        # Getting the type of 'h' (line 316)
        h_1730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 44), 'h', False)
        # Processing the call keyword arguments (line 316)
        # Getting the type of 'True' (line 316)
        True_1731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 55), 'True', False)
        keyword_1732 = True_1731
        kwargs_1733 = {'forward': keyword_1732}
        # Getting the type of 'self' (line 316)
        self_1726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 16), 'self', False)
        # Obtaining the member 'fig' of a type (line 316)
        fig_1727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 316, 16), self_1726, 'fig')
        # Obtaining the member 'set_size_inches' of a type (line 316)
        set_size_inches_1728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 316, 16), fig_1727, 'set_size_inches')
        # Calling set_size_inches(args, kwargs) (line 316)
        set_size_inches_call_result_1734 = invoke(stypy.reporting.localization.Localization(__file__, 316, 16), set_size_inches_1728, *[w_1729, h_1730], **kwargs_1733)
        
        
        # Call to report(...): (line 317)
        # Processing the call arguments (line 317)
        unicode_1737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 31), 'unicode', u'figure size (inches) has been adjusted from %s x %s to %s x %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 318)
        tuple_1738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 60), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 318)
        # Adding element type (line 318)
        # Getting the type of 'wo' (line 318)
        wo_1739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 60), 'wo', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 60), tuple_1738, wo_1739)
        # Adding element type (line 318)
        # Getting the type of 'ho' (line 318)
        ho_1740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 64), 'ho', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 60), tuple_1738, ho_1740)
        # Adding element type (line 318)
        # Getting the type of 'w' (line 318)
        w_1741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 68), 'w', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 60), tuple_1738, w_1741)
        # Adding element type (line 318)
        # Getting the type of 'h' (line 318)
        h_1742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 71), 'h', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 60), tuple_1738, h_1742)
        
        # Applying the binary operator '%' (line 317)
        result_mod_1743 = python_operator(stypy.reporting.localization.Localization(__file__, 317, 31), '%', unicode_1737, tuple_1738)
        
        # Processing the call keyword arguments (line 317)
        unicode_1744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 37), 'unicode', u'helpful')
        keyword_1745 = unicode_1744
        kwargs_1746 = {'level': keyword_1745}
        # Getting the type of 'verbose' (line 317)
        verbose_1735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 16), 'verbose', False)
        # Obtaining the member 'report' of a type (line 317)
        report_1736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 16), verbose_1735, 'report')
        # Calling report(args, kwargs) (line 317)
        report_call_result_1747 = invoke(stypy.reporting.localization.Localization(__file__, 317, 16), report_1736, *[result_mod_1743], **kwargs_1746)
        
        # SSA join for if statement (line 315)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 312)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 321):
        
        # Assigning a Call to a Name:
        
        # Call to get_size_inches(...): (line 321)
        # Processing the call keyword arguments (line 321)
        kwargs_1751 = {}
        # Getting the type of 'self' (line 321)
        self_1748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 19), 'self', False)
        # Obtaining the member 'fig' of a type (line 321)
        fig_1749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 19), self_1748, 'fig')
        # Obtaining the member 'get_size_inches' of a type (line 321)
        get_size_inches_1750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 19), fig_1749, 'get_size_inches')
        # Calling get_size_inches(args, kwargs) (line 321)
        get_size_inches_call_result_1752 = invoke(stypy.reporting.localization.Localization(__file__, 321, 19), get_size_inches_1750, *[], **kwargs_1751)
        
        # Assigning a type to the variable 'call_assignment_1293' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 12), 'call_assignment_1293', get_size_inches_call_result_1752)
        
        # Assigning a Call to a Name (line 321):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_1755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, 12), 'int')
        # Processing the call keyword arguments
        kwargs_1756 = {}
        # Getting the type of 'call_assignment_1293' (line 321)
        call_assignment_1293_1753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 12), 'call_assignment_1293', False)
        # Obtaining the member '__getitem__' of a type (line 321)
        getitem___1754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 12), call_assignment_1293_1753, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_1757 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___1754, *[int_1755], **kwargs_1756)
        
        # Assigning a type to the variable 'call_assignment_1294' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 12), 'call_assignment_1294', getitem___call_result_1757)
        
        # Assigning a Name to a Name (line 321):
        # Getting the type of 'call_assignment_1294' (line 321)
        call_assignment_1294_1758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 12), 'call_assignment_1294')
        # Assigning a type to the variable 'w' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 12), 'w', call_assignment_1294_1758)
        
        # Assigning a Call to a Name (line 321):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_1761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, 12), 'int')
        # Processing the call keyword arguments
        kwargs_1762 = {}
        # Getting the type of 'call_assignment_1293' (line 321)
        call_assignment_1293_1759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 12), 'call_assignment_1293', False)
        # Obtaining the member '__getitem__' of a type (line 321)
        getitem___1760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 12), call_assignment_1293_1759, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_1763 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___1760, *[int_1761], **kwargs_1762)
        
        # Assigning a type to the variable 'call_assignment_1295' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 12), 'call_assignment_1295', getitem___call_result_1763)
        
        # Assigning a Name to a Name (line 321):
        # Getting the type of 'call_assignment_1295' (line 321)
        call_assignment_1295_1764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 12), 'call_assignment_1295')
        # Assigning a type to the variable 'h' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 15), 'h', call_assignment_1295_1764)
        # SSA join for if statement (line 312)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to report(...): (line 322)
        # Processing the call arguments (line 322)
        unicode_1767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 322, 23), 'unicode', u'frame size in pixels is %s x %s')
        # Getting the type of 'self' (line 322)
        self_1768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 59), 'self', False)
        # Obtaining the member 'frame_size' of a type (line 322)
        frame_size_1769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 59), self_1768, 'frame_size')
        # Applying the binary operator '%' (line 322)
        result_mod_1770 = python_operator(stypy.reporting.localization.Localization(__file__, 322, 23), '%', unicode_1767, frame_size_1769)
        
        # Processing the call keyword arguments (line 322)
        unicode_1771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 29), 'unicode', u'debug')
        keyword_1772 = unicode_1771
        kwargs_1773 = {'level': keyword_1772}
        # Getting the type of 'verbose' (line 322)
        verbose_1765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'verbose', False)
        # Obtaining the member 'report' of a type (line 322)
        report_1766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 8), verbose_1765, 'report')
        # Calling report(args, kwargs) (line 322)
        report_call_result_1774 = invoke(stypy.reporting.localization.Localization(__file__, 322, 8), report_1766, *[result_mod_1770], **kwargs_1773)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 324)
        tuple_1775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 324, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 324)
        # Adding element type (line 324)
        # Getting the type of 'w' (line 324)
        w_1776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 15), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 324, 15), tuple_1775, w_1776)
        # Adding element type (line 324)
        # Getting the type of 'h' (line 324)
        h_1777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 18), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 324, 15), tuple_1775, h_1777)
        
        # Assigning a type to the variable 'stypy_return_type' (line 324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 324, 8), 'stypy_return_type', tuple_1775)
        
        # ################# End of '_adjust_frame_size(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_adjust_frame_size' in the type store
        # Getting the type of 'stypy_return_type' (line 311)
        stypy_return_type_1778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1778)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_adjust_frame_size'
        return stypy_return_type_1778


    @norecursion
    def setup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 326)
        None_1779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 38), 'None')
        defaults = [None_1779]
        # Create a new context for function 'setup'
        module_type_store = module_type_store.open_function_context('setup', 326, 4, False)
        # Assigning a type to the variable 'self' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriter.setup.__dict__.__setitem__('stypy_localization', localization)
        MovieWriter.setup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriter.setup.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriter.setup.__dict__.__setitem__('stypy_function_name', 'MovieWriter.setup')
        MovieWriter.setup.__dict__.__setitem__('stypy_param_names_list', ['fig', 'outfile', 'dpi'])
        MovieWriter.setup.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriter.setup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriter.setup.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriter.setup.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriter.setup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriter.setup.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriter.setup', ['fig', 'outfile', 'dpi'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'setup', localization, ['fig', 'outfile', 'dpi'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'setup(...)' code ##################

        unicode_1780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 339, (-1)), 'unicode', u'\n        Perform setup for writing the movie file.\n\n        Parameters\n        ----------\n        fig : matplotlib.figure.Figure\n            The figure object that contains the information for frames\n        outfile : string\n            The filename of the resulting movie file\n        dpi : int, optional\n            The DPI (or resolution) for the file.  This controls the size\n            in pixels of the resulting movie file. Default is fig.dpi.\n        ')
        
        # Assigning a Name to a Attribute (line 340):
        
        # Assigning a Name to a Attribute (line 340):
        # Getting the type of 'outfile' (line 340)
        outfile_1781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 23), 'outfile')
        # Getting the type of 'self' (line 340)
        self_1782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 8), 'self')
        # Setting the type of the member 'outfile' of a type (line 340)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 8), self_1782, 'outfile', outfile_1781)
        
        # Assigning a Name to a Attribute (line 341):
        
        # Assigning a Name to a Attribute (line 341):
        # Getting the type of 'fig' (line 341)
        fig_1783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 19), 'fig')
        # Getting the type of 'self' (line 341)
        self_1784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 8), 'self')
        # Setting the type of the member 'fig' of a type (line 341)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 8), self_1784, 'fig', fig_1783)
        
        # Type idiom detected: calculating its left and rigth part (line 342)
        # Getting the type of 'dpi' (line 342)
        dpi_1785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 11), 'dpi')
        # Getting the type of 'None' (line 342)
        None_1786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 18), 'None')
        
        (may_be_1787, more_types_in_union_1788) = may_be_none(dpi_1785, None_1786)

        if may_be_1787:

            if more_types_in_union_1788:
                # Runtime conditional SSA (line 342)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 343):
            
            # Assigning a Attribute to a Name (line 343):
            # Getting the type of 'self' (line 343)
            self_1789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 18), 'self')
            # Obtaining the member 'fig' of a type (line 343)
            fig_1790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 18), self_1789, 'fig')
            # Obtaining the member 'dpi' of a type (line 343)
            dpi_1791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 18), fig_1790, 'dpi')
            # Assigning a type to the variable 'dpi' (line 343)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 12), 'dpi', dpi_1791)

            if more_types_in_union_1788:
                # SSA join for if statement (line 342)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 344):
        
        # Assigning a Name to a Attribute (line 344):
        # Getting the type of 'dpi' (line 344)
        dpi_1792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 19), 'dpi')
        # Getting the type of 'self' (line 344)
        self_1793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 8), 'self')
        # Setting the type of the member 'dpi' of a type (line 344)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 344, 8), self_1793, 'dpi', dpi_1792)
        
        # Assigning a Call to a Tuple (line 345):
        
        # Assigning a Call to a Name:
        
        # Call to _adjust_frame_size(...): (line 345)
        # Processing the call keyword arguments (line 345)
        kwargs_1796 = {}
        # Getting the type of 'self' (line 345)
        self_1794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 27), 'self', False)
        # Obtaining the member '_adjust_frame_size' of a type (line 345)
        _adjust_frame_size_1795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 27), self_1794, '_adjust_frame_size')
        # Calling _adjust_frame_size(args, kwargs) (line 345)
        _adjust_frame_size_call_result_1797 = invoke(stypy.reporting.localization.Localization(__file__, 345, 27), _adjust_frame_size_1795, *[], **kwargs_1796)
        
        # Assigning a type to the variable 'call_assignment_1296' (line 345)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'call_assignment_1296', _adjust_frame_size_call_result_1797)
        
        # Assigning a Call to a Name (line 345):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_1800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 345, 8), 'int')
        # Processing the call keyword arguments
        kwargs_1801 = {}
        # Getting the type of 'call_assignment_1296' (line 345)
        call_assignment_1296_1798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'call_assignment_1296', False)
        # Obtaining the member '__getitem__' of a type (line 345)
        getitem___1799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 8), call_assignment_1296_1798, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_1802 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___1799, *[int_1800], **kwargs_1801)
        
        # Assigning a type to the variable 'call_assignment_1297' (line 345)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'call_assignment_1297', getitem___call_result_1802)
        
        # Assigning a Name to a Attribute (line 345):
        # Getting the type of 'call_assignment_1297' (line 345)
        call_assignment_1297_1803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'call_assignment_1297')
        # Getting the type of 'self' (line 345)
        self_1804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'self')
        # Setting the type of the member '_w' of a type (line 345)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 8), self_1804, '_w', call_assignment_1297_1803)
        
        # Assigning a Call to a Name (line 345):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_1807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 345, 8), 'int')
        # Processing the call keyword arguments
        kwargs_1808 = {}
        # Getting the type of 'call_assignment_1296' (line 345)
        call_assignment_1296_1805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'call_assignment_1296', False)
        # Obtaining the member '__getitem__' of a type (line 345)
        getitem___1806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 8), call_assignment_1296_1805, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_1809 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___1806, *[int_1807], **kwargs_1808)
        
        # Assigning a type to the variable 'call_assignment_1298' (line 345)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'call_assignment_1298', getitem___call_result_1809)
        
        # Assigning a Name to a Attribute (line 345):
        # Getting the type of 'call_assignment_1298' (line 345)
        call_assignment_1298_1810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'call_assignment_1298')
        # Getting the type of 'self' (line 345)
        self_1811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 17), 'self')
        # Setting the type of the member '_h' of a type (line 345)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 17), self_1811, '_h', call_assignment_1298_1810)
        
        # Call to _run(...): (line 349)
        # Processing the call keyword arguments (line 349)
        kwargs_1814 = {}
        # Getting the type of 'self' (line 349)
        self_1812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'self', False)
        # Obtaining the member '_run' of a type (line 349)
        _run_1813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 8), self_1812, '_run')
        # Calling _run(args, kwargs) (line 349)
        _run_call_result_1815 = invoke(stypy.reporting.localization.Localization(__file__, 349, 8), _run_1813, *[], **kwargs_1814)
        
        
        # ################# End of 'setup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'setup' in the type store
        # Getting the type of 'stypy_return_type' (line 326)
        stypy_return_type_1816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1816)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'setup'
        return stypy_return_type_1816


    @norecursion
    def _run(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_run'
        module_type_store = module_type_store.open_function_context('_run', 351, 4, False)
        # Assigning a type to the variable 'self' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriter._run.__dict__.__setitem__('stypy_localization', localization)
        MovieWriter._run.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriter._run.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriter._run.__dict__.__setitem__('stypy_function_name', 'MovieWriter._run')
        MovieWriter._run.__dict__.__setitem__('stypy_param_names_list', [])
        MovieWriter._run.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriter._run.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriter._run.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriter._run.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriter._run.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriter._run.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriter._run', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_run', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_run(...)' code ##################

        
        # Assigning a Call to a Name (line 355):
        
        # Assigning a Call to a Name (line 355):
        
        # Call to _args(...): (line 355)
        # Processing the call keyword arguments (line 355)
        kwargs_1819 = {}
        # Getting the type of 'self' (line 355)
        self_1817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 18), 'self', False)
        # Obtaining the member '_args' of a type (line 355)
        _args_1818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 18), self_1817, '_args')
        # Calling _args(args, kwargs) (line 355)
        _args_call_result_1820 = invoke(stypy.reporting.localization.Localization(__file__, 355, 18), _args_1818, *[], **kwargs_1819)
        
        # Assigning a type to the variable 'command' (line 355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 8), 'command', _args_call_result_1820)
        
        
        # Call to ge(...): (line 356)
        # Processing the call arguments (line 356)
        unicode_1823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 22), 'unicode', u'debug')
        # Processing the call keyword arguments (line 356)
        kwargs_1824 = {}
        # Getting the type of 'verbose' (line 356)
        verbose_1821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 11), 'verbose', False)
        # Obtaining the member 'ge' of a type (line 356)
        ge_1822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 11), verbose_1821, 'ge')
        # Calling ge(args, kwargs) (line 356)
        ge_call_result_1825 = invoke(stypy.reporting.localization.Localization(__file__, 356, 11), ge_1822, *[unicode_1823], **kwargs_1824)
        
        # Testing the type of an if condition (line 356)
        if_condition_1826 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 356, 8), ge_call_result_1825)
        # Assigning a type to the variable 'if_condition_1826' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 8), 'if_condition_1826', if_condition_1826)
        # SSA begins for if statement (line 356)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 357):
        
        # Assigning a Attribute to a Name (line 357):
        # Getting the type of 'sys' (line 357)
        sys_1827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 21), 'sys')
        # Obtaining the member 'stdout' of a type (line 357)
        stdout_1828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 357, 21), sys_1827, 'stdout')
        # Assigning a type to the variable 'output' (line 357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 357, 12), 'output', stdout_1828)
        # SSA branch for the else part of an if statement (line 356)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 359):
        
        # Assigning a Attribute to a Name (line 359):
        # Getting the type of 'subprocess' (line 359)
        subprocess_1829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 21), 'subprocess')
        # Obtaining the member 'PIPE' of a type (line 359)
        PIPE_1830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 21), subprocess_1829, 'PIPE')
        # Assigning a type to the variable 'output' (line 359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'output', PIPE_1830)
        # SSA join for if statement (line 356)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to report(...): (line 360)
        # Processing the call arguments (line 360)
        unicode_1833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 23), 'unicode', u'MovieWriter.run: running command: %s')
        
        # Call to join(...): (line 361)
        # Processing the call arguments (line 361)
        # Getting the type of 'command' (line 361)
        command_1836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 32), 'command', False)
        # Processing the call keyword arguments (line 361)
        kwargs_1837 = {}
        unicode_1834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 23), 'unicode', u' ')
        # Obtaining the member 'join' of a type (line 361)
        join_1835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 23), unicode_1834, 'join')
        # Calling join(args, kwargs) (line 361)
        join_call_result_1838 = invoke(stypy.reporting.localization.Localization(__file__, 361, 23), join_1835, *[command_1836], **kwargs_1837)
        
        # Applying the binary operator '%' (line 360)
        result_mod_1839 = python_operator(stypy.reporting.localization.Localization(__file__, 360, 23), '%', unicode_1833, join_call_result_1838)
        
        # Processing the call keyword arguments (line 360)
        kwargs_1840 = {}
        # Getting the type of 'verbose' (line 360)
        verbose_1831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 8), 'verbose', False)
        # Obtaining the member 'report' of a type (line 360)
        report_1832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 360, 8), verbose_1831, 'report')
        # Calling report(args, kwargs) (line 360)
        report_call_result_1841 = invoke(stypy.reporting.localization.Localization(__file__, 360, 8), report_1832, *[result_mod_1839], **kwargs_1840)
        
        
        # Assigning a Call to a Attribute (line 362):
        
        # Assigning a Call to a Attribute (line 362):
        
        # Call to Popen(...): (line 362)
        # Processing the call arguments (line 362)
        # Getting the type of 'command' (line 362)
        command_1844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 38), 'command', False)
        # Processing the call keyword arguments (line 362)
        # Getting the type of 'False' (line 362)
        False_1845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 53), 'False', False)
        keyword_1846 = False_1845
        # Getting the type of 'output' (line 363)
        output_1847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 45), 'output', False)
        keyword_1848 = output_1847
        # Getting the type of 'output' (line 363)
        output_1849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 60), 'output', False)
        keyword_1850 = output_1849
        # Getting the type of 'subprocess' (line 364)
        subprocess_1851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 44), 'subprocess', False)
        # Obtaining the member 'PIPE' of a type (line 364)
        PIPE_1852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 44), subprocess_1851, 'PIPE')
        keyword_1853 = PIPE_1852
        # Getting the type of 'subprocess_creation_flags' (line 365)
        subprocess_creation_flags_1854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 52), 'subprocess_creation_flags', False)
        keyword_1855 = subprocess_creation_flags_1854
        kwargs_1856 = {'stdin': keyword_1853, 'shell': keyword_1846, 'creationflags': keyword_1855, 'stderr': keyword_1850, 'stdout': keyword_1848}
        # Getting the type of 'subprocess' (line 362)
        subprocess_1842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 21), 'subprocess', False)
        # Obtaining the member 'Popen' of a type (line 362)
        Popen_1843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 21), subprocess_1842, 'Popen')
        # Calling Popen(args, kwargs) (line 362)
        Popen_call_result_1857 = invoke(stypy.reporting.localization.Localization(__file__, 362, 21), Popen_1843, *[command_1844], **kwargs_1856)
        
        # Getting the type of 'self' (line 362)
        self_1858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 8), 'self')
        # Setting the type of the member '_proc' of a type (line 362)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 8), self_1858, '_proc', Popen_call_result_1857)
        
        # ################# End of '_run(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_run' in the type store
        # Getting the type of 'stypy_return_type' (line 351)
        stypy_return_type_1859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1859)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_run'
        return stypy_return_type_1859


    @norecursion
    def finish(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'finish'
        module_type_store = module_type_store.open_function_context('finish', 367, 4, False)
        # Assigning a type to the variable 'self' (line 368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriter.finish.__dict__.__setitem__('stypy_localization', localization)
        MovieWriter.finish.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriter.finish.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriter.finish.__dict__.__setitem__('stypy_function_name', 'MovieWriter.finish')
        MovieWriter.finish.__dict__.__setitem__('stypy_param_names_list', [])
        MovieWriter.finish.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriter.finish.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriter.finish.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriter.finish.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriter.finish.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriter.finish.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriter.finish', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'finish', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'finish(...)' code ##################

        unicode_1860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 368, 8), 'unicode', u'Finish any processing for writing the movie.')
        
        # Call to cleanup(...): (line 369)
        # Processing the call keyword arguments (line 369)
        kwargs_1863 = {}
        # Getting the type of 'self' (line 369)
        self_1861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 8), 'self', False)
        # Obtaining the member 'cleanup' of a type (line 369)
        cleanup_1862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 8), self_1861, 'cleanup')
        # Calling cleanup(args, kwargs) (line 369)
        cleanup_call_result_1864 = invoke(stypy.reporting.localization.Localization(__file__, 369, 8), cleanup_1862, *[], **kwargs_1863)
        
        
        # ################# End of 'finish(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'finish' in the type store
        # Getting the type of 'stypy_return_type' (line 367)
        stypy_return_type_1865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1865)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'finish'
        return stypy_return_type_1865


    @norecursion
    def grab_frame(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'grab_frame'
        module_type_store = module_type_store.open_function_context('grab_frame', 371, 4, False)
        # Assigning a type to the variable 'self' (line 372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriter.grab_frame.__dict__.__setitem__('stypy_localization', localization)
        MovieWriter.grab_frame.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriter.grab_frame.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriter.grab_frame.__dict__.__setitem__('stypy_function_name', 'MovieWriter.grab_frame')
        MovieWriter.grab_frame.__dict__.__setitem__('stypy_param_names_list', [])
        MovieWriter.grab_frame.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriter.grab_frame.__dict__.__setitem__('stypy_kwargs_param_name', 'savefig_kwargs')
        MovieWriter.grab_frame.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriter.grab_frame.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriter.grab_frame.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriter.grab_frame.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriter.grab_frame', [], None, 'savefig_kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'grab_frame', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'grab_frame(...)' code ##################

        unicode_1866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 377, (-1)), 'unicode', u'\n        Grab the image information from the figure and save as a movie frame.\n\n        All keyword arguments in savefig_kwargs are passed on to the `savefig`\n        command that saves the figure.\n        ')
        
        # Call to report(...): (line 378)
        # Processing the call arguments (line 378)
        unicode_1869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 378, 23), 'unicode', u'MovieWriter.grab_frame: Grabbing frame.')
        # Processing the call keyword arguments (line 378)
        unicode_1870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 29), 'unicode', u'debug')
        keyword_1871 = unicode_1870
        kwargs_1872 = {'level': keyword_1871}
        # Getting the type of 'verbose' (line 378)
        verbose_1867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 8), 'verbose', False)
        # Obtaining the member 'report' of a type (line 378)
        report_1868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 8), verbose_1867, 'report')
        # Calling report(args, kwargs) (line 378)
        report_call_result_1873 = invoke(stypy.reporting.localization.Localization(__file__, 378, 8), report_1868, *[unicode_1869], **kwargs_1872)
        
        
        
        # SSA begins for try-except statement (line 380)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to set_size_inches(...): (line 384)
        # Processing the call arguments (line 384)
        # Getting the type of 'self' (line 384)
        self_1877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 37), 'self', False)
        # Obtaining the member '_w' of a type (line 384)
        _w_1878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 37), self_1877, '_w')
        # Getting the type of 'self' (line 384)
        self_1879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 46), 'self', False)
        # Obtaining the member '_h' of a type (line 384)
        _h_1880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 46), self_1879, '_h')
        # Processing the call keyword arguments (line 384)
        kwargs_1881 = {}
        # Getting the type of 'self' (line 384)
        self_1874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 12), 'self', False)
        # Obtaining the member 'fig' of a type (line 384)
        fig_1875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 12), self_1874, 'fig')
        # Obtaining the member 'set_size_inches' of a type (line 384)
        set_size_inches_1876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 12), fig_1875, 'set_size_inches')
        # Calling set_size_inches(args, kwargs) (line 384)
        set_size_inches_call_result_1882 = invoke(stypy.reporting.localization.Localization(__file__, 384, 12), set_size_inches_1876, *[_w_1878, _h_1880], **kwargs_1881)
        
        
        # Call to savefig(...): (line 387)
        # Processing the call arguments (line 387)
        
        # Call to _frame_sink(...): (line 387)
        # Processing the call keyword arguments (line 387)
        kwargs_1888 = {}
        # Getting the type of 'self' (line 387)
        self_1886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 29), 'self', False)
        # Obtaining the member '_frame_sink' of a type (line 387)
        _frame_sink_1887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 29), self_1886, '_frame_sink')
        # Calling _frame_sink(args, kwargs) (line 387)
        _frame_sink_call_result_1889 = invoke(stypy.reporting.localization.Localization(__file__, 387, 29), _frame_sink_1887, *[], **kwargs_1888)
        
        # Processing the call keyword arguments (line 387)
        # Getting the type of 'self' (line 387)
        self_1890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 56), 'self', False)
        # Obtaining the member 'frame_format' of a type (line 387)
        frame_format_1891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 56), self_1890, 'frame_format')
        keyword_1892 = frame_format_1891
        # Getting the type of 'self' (line 388)
        self_1893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 33), 'self', False)
        # Obtaining the member 'dpi' of a type (line 388)
        dpi_1894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 33), self_1893, 'dpi')
        keyword_1895 = dpi_1894
        # Getting the type of 'savefig_kwargs' (line 388)
        savefig_kwargs_1896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 45), 'savefig_kwargs', False)
        kwargs_1897 = {'savefig_kwargs_1896': savefig_kwargs_1896, 'dpi': keyword_1895, 'format': keyword_1892}
        # Getting the type of 'self' (line 387)
        self_1883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 12), 'self', False)
        # Obtaining the member 'fig' of a type (line 387)
        fig_1884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 12), self_1883, 'fig')
        # Obtaining the member 'savefig' of a type (line 387)
        savefig_1885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 12), fig_1884, 'savefig')
        # Calling savefig(args, kwargs) (line 387)
        savefig_call_result_1898 = invoke(stypy.reporting.localization.Localization(__file__, 387, 12), savefig_1885, *[_frame_sink_call_result_1889], **kwargs_1897)
        
        # SSA branch for the except part of a try statement (line 380)
        # SSA branch for the except 'Tuple' branch of a try statement (line 380)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        
        # Obtaining an instance of the builtin type 'tuple' (line 389)
        tuple_1899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 389)
        # Adding element type (line 389)
        # Getting the type of 'RuntimeError' (line 389)
        RuntimeError_1900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 16), 'RuntimeError')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 389, 16), tuple_1899, RuntimeError_1900)
        # Adding element type (line 389)
        # Getting the type of 'IOError' (line 389)
        IOError_1901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 30), 'IOError')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 389, 16), tuple_1899, IOError_1901)
        
        # Assigning a type to the variable 'e' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'e', tuple_1899)
        
        # Assigning a Call to a Tuple (line 390):
        
        # Assigning a Call to a Name:
        
        # Call to communicate(...): (line 390)
        # Processing the call keyword arguments (line 390)
        kwargs_1905 = {}
        # Getting the type of 'self' (line 390)
        self_1902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 23), 'self', False)
        # Obtaining the member '_proc' of a type (line 390)
        _proc_1903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 23), self_1902, '_proc')
        # Obtaining the member 'communicate' of a type (line 390)
        communicate_1904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 23), _proc_1903, 'communicate')
        # Calling communicate(args, kwargs) (line 390)
        communicate_call_result_1906 = invoke(stypy.reporting.localization.Localization(__file__, 390, 23), communicate_1904, *[], **kwargs_1905)
        
        # Assigning a type to the variable 'call_assignment_1299' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 12), 'call_assignment_1299', communicate_call_result_1906)
        
        # Assigning a Call to a Name (line 390):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_1909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 12), 'int')
        # Processing the call keyword arguments
        kwargs_1910 = {}
        # Getting the type of 'call_assignment_1299' (line 390)
        call_assignment_1299_1907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 12), 'call_assignment_1299', False)
        # Obtaining the member '__getitem__' of a type (line 390)
        getitem___1908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 12), call_assignment_1299_1907, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_1911 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___1908, *[int_1909], **kwargs_1910)
        
        # Assigning a type to the variable 'call_assignment_1300' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 12), 'call_assignment_1300', getitem___call_result_1911)
        
        # Assigning a Name to a Name (line 390):
        # Getting the type of 'call_assignment_1300' (line 390)
        call_assignment_1300_1912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 12), 'call_assignment_1300')
        # Assigning a type to the variable 'out' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 12), 'out', call_assignment_1300_1912)
        
        # Assigning a Call to a Name (line 390):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_1915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 12), 'int')
        # Processing the call keyword arguments
        kwargs_1916 = {}
        # Getting the type of 'call_assignment_1299' (line 390)
        call_assignment_1299_1913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 12), 'call_assignment_1299', False)
        # Obtaining the member '__getitem__' of a type (line 390)
        getitem___1914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 12), call_assignment_1299_1913, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_1917 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___1914, *[int_1915], **kwargs_1916)
        
        # Assigning a type to the variable 'call_assignment_1301' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 12), 'call_assignment_1301', getitem___call_result_1917)
        
        # Assigning a Name to a Name (line 390):
        # Getting the type of 'call_assignment_1301' (line 390)
        call_assignment_1301_1918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 12), 'call_assignment_1301')
        # Assigning a type to the variable 'err' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 17), 'err', call_assignment_1301_1918)
        
        # Call to report(...): (line 391)
        # Processing the call arguments (line 391)
        unicode_1921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 27), 'unicode', u'MovieWriter -- Error running proc:\n%s\n%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 392)
        tuple_1922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 54), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 392)
        # Adding element type (line 392)
        # Getting the type of 'out' (line 392)
        out_1923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 54), 'out', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 392, 54), tuple_1922, out_1923)
        # Adding element type (line 392)
        # Getting the type of 'err' (line 392)
        err_1924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 59), 'err', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 392, 54), tuple_1922, err_1924)
        
        # Applying the binary operator '%' (line 391)
        result_mod_1925 = python_operator(stypy.reporting.localization.Localization(__file__, 391, 27), '%', unicode_1921, tuple_1922)
        
        # Processing the call keyword arguments (line 391)
        unicode_1926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 33), 'unicode', u'helpful')
        keyword_1927 = unicode_1926
        kwargs_1928 = {'level': keyword_1927}
        # Getting the type of 'verbose' (line 391)
        verbose_1919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 12), 'verbose', False)
        # Obtaining the member 'report' of a type (line 391)
        report_1920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 12), verbose_1919, 'report')
        # Calling report(args, kwargs) (line 391)
        report_call_result_1929 = invoke(stypy.reporting.localization.Localization(__file__, 391, 12), report_1920, *[result_mod_1925], **kwargs_1928)
        
        
        # Call to IOError(...): (line 394)
        # Processing the call arguments (line 394)
        
        # Call to format(...): (line 394)
        # Processing the call arguments (line 394)
        # Getting the type of 'e' (line 396)
        e_1933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 57), 'e', False)
        # Getting the type of 'out' (line 396)
        out_1934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 60), 'out', False)
        # Getting the type of 'err' (line 396)
        err_1935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 65), 'err', False)
        # Processing the call keyword arguments (line 394)
        kwargs_1936 = {}
        unicode_1931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 26), 'unicode', u'Error saving animation to file (cause: {0}) Stdout: {1} StdError: {2}. It may help to re-run with --verbose-debug.')
        # Obtaining the member 'format' of a type (line 394)
        format_1932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 26), unicode_1931, 'format')
        # Calling format(args, kwargs) (line 394)
        format_call_result_1937 = invoke(stypy.reporting.localization.Localization(__file__, 394, 26), format_1932, *[e_1933, out_1934, err_1935], **kwargs_1936)
        
        # Processing the call keyword arguments (line 394)
        kwargs_1938 = {}
        # Getting the type of 'IOError' (line 394)
        IOError_1930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 18), 'IOError', False)
        # Calling IOError(args, kwargs) (line 394)
        IOError_call_result_1939 = invoke(stypy.reporting.localization.Localization(__file__, 394, 18), IOError_1930, *[format_call_result_1937], **kwargs_1938)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 394, 12), IOError_call_result_1939, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 380)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'grab_frame(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'grab_frame' in the type store
        # Getting the type of 'stypy_return_type' (line 371)
        stypy_return_type_1940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1940)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'grab_frame'
        return stypy_return_type_1940


    @norecursion
    def _frame_sink(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_frame_sink'
        module_type_store = module_type_store.open_function_context('_frame_sink', 398, 4, False)
        # Assigning a type to the variable 'self' (line 399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriter._frame_sink.__dict__.__setitem__('stypy_localization', localization)
        MovieWriter._frame_sink.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriter._frame_sink.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriter._frame_sink.__dict__.__setitem__('stypy_function_name', 'MovieWriter._frame_sink')
        MovieWriter._frame_sink.__dict__.__setitem__('stypy_param_names_list', [])
        MovieWriter._frame_sink.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriter._frame_sink.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriter._frame_sink.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriter._frame_sink.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriter._frame_sink.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriter._frame_sink.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriter._frame_sink', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_frame_sink', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_frame_sink(...)' code ##################

        unicode_1941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 8), 'unicode', u'Returns the place to which frames should be written.')
        # Getting the type of 'self' (line 400)
        self_1942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 15), 'self')
        # Obtaining the member '_proc' of a type (line 400)
        _proc_1943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 15), self_1942, '_proc')
        # Obtaining the member 'stdin' of a type (line 400)
        stdin_1944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 15), _proc_1943, 'stdin')
        # Assigning a type to the variable 'stypy_return_type' (line 400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 8), 'stypy_return_type', stdin_1944)
        
        # ################# End of '_frame_sink(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_frame_sink' in the type store
        # Getting the type of 'stypy_return_type' (line 398)
        stypy_return_type_1945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1945)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_frame_sink'
        return stypy_return_type_1945


    @norecursion
    def _args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_args'
        module_type_store = module_type_store.open_function_context('_args', 402, 4, False)
        # Assigning a type to the variable 'self' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriter._args.__dict__.__setitem__('stypy_localization', localization)
        MovieWriter._args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriter._args.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriter._args.__dict__.__setitem__('stypy_function_name', 'MovieWriter._args')
        MovieWriter._args.__dict__.__setitem__('stypy_param_names_list', [])
        MovieWriter._args.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriter._args.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriter._args.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriter._args.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriter._args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriter._args.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriter._args', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_args', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_args(...)' code ##################

        unicode_1946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 8), 'unicode', u'Assemble list of utility-specific command-line arguments.')
        
        # Call to NotImplementedError(...): (line 404)
        # Processing the call arguments (line 404)
        unicode_1948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, 35), 'unicode', u'args needs to be implemented by subclass.')
        # Processing the call keyword arguments (line 404)
        kwargs_1949 = {}
        # Getting the type of 'NotImplementedError' (line 404)
        NotImplementedError_1947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 15), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 404)
        NotImplementedError_call_result_1950 = invoke(stypy.reporting.localization.Localization(__file__, 404, 15), NotImplementedError_1947, *[unicode_1948], **kwargs_1949)
        
        # Assigning a type to the variable 'stypy_return_type' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 8), 'stypy_return_type', NotImplementedError_call_result_1950)
        
        # ################# End of '_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_args' in the type store
        # Getting the type of 'stypy_return_type' (line 402)
        stypy_return_type_1951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1951)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_args'
        return stypy_return_type_1951


    @norecursion
    def cleanup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'cleanup'
        module_type_store = module_type_store.open_function_context('cleanup', 406, 4, False)
        # Assigning a type to the variable 'self' (line 407)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 407, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriter.cleanup.__dict__.__setitem__('stypy_localization', localization)
        MovieWriter.cleanup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriter.cleanup.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriter.cleanup.__dict__.__setitem__('stypy_function_name', 'MovieWriter.cleanup')
        MovieWriter.cleanup.__dict__.__setitem__('stypy_param_names_list', [])
        MovieWriter.cleanup.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriter.cleanup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriter.cleanup.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriter.cleanup.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriter.cleanup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriter.cleanup.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriter.cleanup', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cleanup', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cleanup(...)' code ##################

        unicode_1952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 407, 8), 'unicode', u'Clean-up and collect the process used to write the movie file.')
        
        # Assigning a Call to a Tuple (line 408):
        
        # Assigning a Call to a Name:
        
        # Call to communicate(...): (line 408)
        # Processing the call keyword arguments (line 408)
        kwargs_1956 = {}
        # Getting the type of 'self' (line 408)
        self_1953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 19), 'self', False)
        # Obtaining the member '_proc' of a type (line 408)
        _proc_1954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 19), self_1953, '_proc')
        # Obtaining the member 'communicate' of a type (line 408)
        communicate_1955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 19), _proc_1954, 'communicate')
        # Calling communicate(args, kwargs) (line 408)
        communicate_call_result_1957 = invoke(stypy.reporting.localization.Localization(__file__, 408, 19), communicate_1955, *[], **kwargs_1956)
        
        # Assigning a type to the variable 'call_assignment_1302' (line 408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'call_assignment_1302', communicate_call_result_1957)
        
        # Assigning a Call to a Name (line 408):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_1960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 408, 8), 'int')
        # Processing the call keyword arguments
        kwargs_1961 = {}
        # Getting the type of 'call_assignment_1302' (line 408)
        call_assignment_1302_1958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'call_assignment_1302', False)
        # Obtaining the member '__getitem__' of a type (line 408)
        getitem___1959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 8), call_assignment_1302_1958, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_1962 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___1959, *[int_1960], **kwargs_1961)
        
        # Assigning a type to the variable 'call_assignment_1303' (line 408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'call_assignment_1303', getitem___call_result_1962)
        
        # Assigning a Name to a Name (line 408):
        # Getting the type of 'call_assignment_1303' (line 408)
        call_assignment_1303_1963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'call_assignment_1303')
        # Assigning a type to the variable 'out' (line 408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'out', call_assignment_1303_1963)
        
        # Assigning a Call to a Name (line 408):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_1966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 408, 8), 'int')
        # Processing the call keyword arguments
        kwargs_1967 = {}
        # Getting the type of 'call_assignment_1302' (line 408)
        call_assignment_1302_1964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'call_assignment_1302', False)
        # Obtaining the member '__getitem__' of a type (line 408)
        getitem___1965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 8), call_assignment_1302_1964, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_1968 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___1965, *[int_1966], **kwargs_1967)
        
        # Assigning a type to the variable 'call_assignment_1304' (line 408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'call_assignment_1304', getitem___call_result_1968)
        
        # Assigning a Name to a Name (line 408):
        # Getting the type of 'call_assignment_1304' (line 408)
        call_assignment_1304_1969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'call_assignment_1304')
        # Assigning a type to the variable 'err' (line 408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 13), 'err', call_assignment_1304_1969)
        
        # Call to close(...): (line 409)
        # Processing the call keyword arguments (line 409)
        kwargs_1975 = {}
        
        # Call to _frame_sink(...): (line 409)
        # Processing the call keyword arguments (line 409)
        kwargs_1972 = {}
        # Getting the type of 'self' (line 409)
        self_1970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 8), 'self', False)
        # Obtaining the member '_frame_sink' of a type (line 409)
        _frame_sink_1971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 8), self_1970, '_frame_sink')
        # Calling _frame_sink(args, kwargs) (line 409)
        _frame_sink_call_result_1973 = invoke(stypy.reporting.localization.Localization(__file__, 409, 8), _frame_sink_1971, *[], **kwargs_1972)
        
        # Obtaining the member 'close' of a type (line 409)
        close_1974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 8), _frame_sink_call_result_1973, 'close')
        # Calling close(args, kwargs) (line 409)
        close_call_result_1976 = invoke(stypy.reporting.localization.Localization(__file__, 409, 8), close_1974, *[], **kwargs_1975)
        
        
        # Call to report(...): (line 410)
        # Processing the call arguments (line 410)
        unicode_1979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 23), 'unicode', u'MovieWriter -- Command stdout:\n%s')
        # Getting the type of 'out' (line 411)
        out_1980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 47), 'out', False)
        # Applying the binary operator '%' (line 410)
        result_mod_1981 = python_operator(stypy.reporting.localization.Localization(__file__, 410, 23), '%', unicode_1979, out_1980)
        
        # Processing the call keyword arguments (line 410)
        unicode_1982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 411, 58), 'unicode', u'debug')
        keyword_1983 = unicode_1982
        kwargs_1984 = {'level': keyword_1983}
        # Getting the type of 'verbose' (line 410)
        verbose_1977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'verbose', False)
        # Obtaining the member 'report' of a type (line 410)
        report_1978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 8), verbose_1977, 'report')
        # Calling report(args, kwargs) (line 410)
        report_call_result_1985 = invoke(stypy.reporting.localization.Localization(__file__, 410, 8), report_1978, *[result_mod_1981], **kwargs_1984)
        
        
        # Call to report(...): (line 412)
        # Processing the call arguments (line 412)
        unicode_1988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 412, 23), 'unicode', u'MovieWriter -- Command stderr:\n%s')
        # Getting the type of 'err' (line 413)
        err_1989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 47), 'err', False)
        # Applying the binary operator '%' (line 412)
        result_mod_1990 = python_operator(stypy.reporting.localization.Localization(__file__, 412, 23), '%', unicode_1988, err_1989)
        
        # Processing the call keyword arguments (line 412)
        unicode_1991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 413, 58), 'unicode', u'debug')
        keyword_1992 = unicode_1991
        kwargs_1993 = {'level': keyword_1992}
        # Getting the type of 'verbose' (line 412)
        verbose_1986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'verbose', False)
        # Obtaining the member 'report' of a type (line 412)
        report_1987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 8), verbose_1986, 'report')
        # Calling report(args, kwargs) (line 412)
        report_call_result_1994 = invoke(stypy.reporting.localization.Localization(__file__, 412, 8), report_1987, *[result_mod_1990], **kwargs_1993)
        
        
        # ################# End of 'cleanup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cleanup' in the type store
        # Getting the type of 'stypy_return_type' (line 406)
        stypy_return_type_1995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1995)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cleanup'
        return stypy_return_type_1995


    @norecursion
    def bin_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'bin_path'
        module_type_store = module_type_store.open_function_context('bin_path', 415, 4, False)
        # Assigning a type to the variable 'self' (line 416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriter.bin_path.__dict__.__setitem__('stypy_localization', localization)
        MovieWriter.bin_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriter.bin_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriter.bin_path.__dict__.__setitem__('stypy_function_name', 'MovieWriter.bin_path')
        MovieWriter.bin_path.__dict__.__setitem__('stypy_param_names_list', [])
        MovieWriter.bin_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriter.bin_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriter.bin_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriter.bin_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriter.bin_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriter.bin_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriter.bin_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'bin_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'bin_path(...)' code ##################

        unicode_1996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 421, (-1)), 'unicode', u'\n        Returns the binary path to the commandline tool used by a specific\n        subclass. This is a class method so that the tool can be looked for\n        before making a particular MovieWriter subclass available.\n        ')
        
        # Call to str(...): (line 422)
        # Processing the call arguments (line 422)
        
        # Obtaining the type of the subscript
        # Getting the type of 'cls' (line 422)
        cls_1998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 28), 'cls', False)
        # Obtaining the member 'exec_key' of a type (line 422)
        exec_key_1999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 28), cls_1998, 'exec_key')
        # Getting the type of 'rcParams' (line 422)
        rcParams_2000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 19), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 422)
        getitem___2001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 19), rcParams_2000, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 422)
        subscript_call_result_2002 = invoke(stypy.reporting.localization.Localization(__file__, 422, 19), getitem___2001, exec_key_1999)
        
        # Processing the call keyword arguments (line 422)
        kwargs_2003 = {}
        # Getting the type of 'str' (line 422)
        str_1997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 15), 'str', False)
        # Calling str(args, kwargs) (line 422)
        str_call_result_2004 = invoke(stypy.reporting.localization.Localization(__file__, 422, 15), str_1997, *[subscript_call_result_2002], **kwargs_2003)
        
        # Assigning a type to the variable 'stypy_return_type' (line 422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 8), 'stypy_return_type', str_call_result_2004)
        
        # ################# End of 'bin_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'bin_path' in the type store
        # Getting the type of 'stypy_return_type' (line 415)
        stypy_return_type_2005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2005)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'bin_path'
        return stypy_return_type_2005


    @norecursion
    def isAvailable(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'isAvailable'
        module_type_store = module_type_store.open_function_context('isAvailable', 424, 4, False)
        # Assigning a type to the variable 'self' (line 425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriter.isAvailable.__dict__.__setitem__('stypy_localization', localization)
        MovieWriter.isAvailable.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriter.isAvailable.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriter.isAvailable.__dict__.__setitem__('stypy_function_name', 'MovieWriter.isAvailable')
        MovieWriter.isAvailable.__dict__.__setitem__('stypy_param_names_list', [])
        MovieWriter.isAvailable.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriter.isAvailable.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriter.isAvailable.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriter.isAvailable.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriter.isAvailable.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriter.isAvailable.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriter.isAvailable', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'isAvailable', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'isAvailable(...)' code ##################

        unicode_2006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 429, (-1)), 'unicode', u'\n        Check to see if a MovieWriter subclass is actually available by\n        running the commandline tool.\n        ')
        
        # Assigning a Call to a Name (line 430):
        
        # Assigning a Call to a Name (line 430):
        
        # Call to bin_path(...): (line 430)
        # Processing the call keyword arguments (line 430)
        kwargs_2009 = {}
        # Getting the type of 'cls' (line 430)
        cls_2007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 19), 'cls', False)
        # Obtaining the member 'bin_path' of a type (line 430)
        bin_path_2008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 19), cls_2007, 'bin_path')
        # Calling bin_path(args, kwargs) (line 430)
        bin_path_call_result_2010 = invoke(stypy.reporting.localization.Localization(__file__, 430, 19), bin_path_2008, *[], **kwargs_2009)
        
        # Assigning a type to the variable 'bin_path' (line 430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 8), 'bin_path', bin_path_call_result_2010)
        
        
        # Getting the type of 'bin_path' (line 431)
        bin_path_2011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 15), 'bin_path')
        # Applying the 'not' unary operator (line 431)
        result_not__2012 = python_operator(stypy.reporting.localization.Localization(__file__, 431, 11), 'not', bin_path_2011)
        
        # Testing the type of an if condition (line 431)
        if_condition_2013 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 431, 8), result_not__2012)
        # Assigning a type to the variable 'if_condition_2013' (line 431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 431, 8), 'if_condition_2013', if_condition_2013)
        # SSA begins for if statement (line 431)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'False' (line 432)
        False_2014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 12), 'stypy_return_type', False_2014)
        # SSA join for if statement (line 431)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 433)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 434):
        
        # Assigning a Call to a Name (line 434):
        
        # Call to Popen(...): (line 434)
        # Processing the call arguments (line 434)
        # Getting the type of 'bin_path' (line 435)
        bin_path_2017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 16), 'bin_path', False)
        # Processing the call keyword arguments (line 434)
        # Getting the type of 'False' (line 436)
        False_2018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 22), 'False', False)
        keyword_2019 = False_2018
        # Getting the type of 'subprocess' (line 437)
        subprocess_2020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 23), 'subprocess', False)
        # Obtaining the member 'PIPE' of a type (line 437)
        PIPE_2021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 437, 23), subprocess_2020, 'PIPE')
        keyword_2022 = PIPE_2021
        # Getting the type of 'subprocess' (line 438)
        subprocess_2023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 23), 'subprocess', False)
        # Obtaining the member 'PIPE' of a type (line 438)
        PIPE_2024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 23), subprocess_2023, 'PIPE')
        keyword_2025 = PIPE_2024
        # Getting the type of 'subprocess_creation_flags' (line 439)
        subprocess_creation_flags_2026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 30), 'subprocess_creation_flags', False)
        keyword_2027 = subprocess_creation_flags_2026
        kwargs_2028 = {'shell': keyword_2019, 'creationflags': keyword_2027, 'stderr': keyword_2025, 'stdout': keyword_2022}
        # Getting the type of 'subprocess' (line 434)
        subprocess_2015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 16), 'subprocess', False)
        # Obtaining the member 'Popen' of a type (line 434)
        Popen_2016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 16), subprocess_2015, 'Popen')
        # Calling Popen(args, kwargs) (line 434)
        Popen_call_result_2029 = invoke(stypy.reporting.localization.Localization(__file__, 434, 16), Popen_2016, *[bin_path_2017], **kwargs_2028)
        
        # Assigning a type to the variable 'p' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 12), 'p', Popen_call_result_2029)
        
        # Call to _handle_subprocess(...): (line 440)
        # Processing the call arguments (line 440)
        # Getting the type of 'p' (line 440)
        p_2032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 42), 'p', False)
        # Processing the call keyword arguments (line 440)
        kwargs_2033 = {}
        # Getting the type of 'cls' (line 440)
        cls_2030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 19), 'cls', False)
        # Obtaining the member '_handle_subprocess' of a type (line 440)
        _handle_subprocess_2031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 19), cls_2030, '_handle_subprocess')
        # Calling _handle_subprocess(args, kwargs) (line 440)
        _handle_subprocess_call_result_2034 = invoke(stypy.reporting.localization.Localization(__file__, 440, 19), _handle_subprocess_2031, *[p_2032], **kwargs_2033)
        
        # Assigning a type to the variable 'stypy_return_type' (line 440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 12), 'stypy_return_type', _handle_subprocess_call_result_2034)
        # SSA branch for the except part of a try statement (line 433)
        # SSA branch for the except 'OSError' branch of a try statement (line 433)
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'False' (line 442)
        False_2035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 442, 12), 'stypy_return_type', False_2035)
        # SSA join for try-except statement (line 433)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'isAvailable(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'isAvailable' in the type store
        # Getting the type of 'stypy_return_type' (line 424)
        stypy_return_type_2036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2036)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'isAvailable'
        return stypy_return_type_2036


    @norecursion
    def _handle_subprocess(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_handle_subprocess'
        module_type_store = module_type_store.open_function_context('_handle_subprocess', 444, 4, False)
        # Assigning a type to the variable 'self' (line 445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MovieWriter._handle_subprocess.__dict__.__setitem__('stypy_localization', localization)
        MovieWriter._handle_subprocess.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MovieWriter._handle_subprocess.__dict__.__setitem__('stypy_type_store', module_type_store)
        MovieWriter._handle_subprocess.__dict__.__setitem__('stypy_function_name', 'MovieWriter._handle_subprocess')
        MovieWriter._handle_subprocess.__dict__.__setitem__('stypy_param_names_list', ['process'])
        MovieWriter._handle_subprocess.__dict__.__setitem__('stypy_varargs_param_name', None)
        MovieWriter._handle_subprocess.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MovieWriter._handle_subprocess.__dict__.__setitem__('stypy_call_defaults', defaults)
        MovieWriter._handle_subprocess.__dict__.__setitem__('stypy_call_varargs', varargs)
        MovieWriter._handle_subprocess.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MovieWriter._handle_subprocess.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MovieWriter._handle_subprocess', ['process'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_handle_subprocess', localization, ['process'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_handle_subprocess(...)' code ##################

        
        # Call to communicate(...): (line 446)
        # Processing the call keyword arguments (line 446)
        kwargs_2039 = {}
        # Getting the type of 'process' (line 446)
        process_2037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 8), 'process', False)
        # Obtaining the member 'communicate' of a type (line 446)
        communicate_2038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 8), process_2037, 'communicate')
        # Calling communicate(args, kwargs) (line 446)
        communicate_call_result_2040 = invoke(stypy.reporting.localization.Localization(__file__, 446, 8), communicate_2038, *[], **kwargs_2039)
        
        # Getting the type of 'True' (line 447)
        True_2041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'stypy_return_type', True_2041)
        
        # ################# End of '_handle_subprocess(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_handle_subprocess' in the type store
        # Getting the type of 'stypy_return_type' (line 444)
        stypy_return_type_2042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2042)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_handle_subprocess'
        return stypy_return_type_2042


# Assigning a type to the variable 'MovieWriter' (line 240)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 0), 'MovieWriter', MovieWriter)
# Declaration of the 'FileMovieWriter' class
# Getting the type of 'MovieWriter' (line 450)
MovieWriter_2043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 22), 'MovieWriter')

class FileMovieWriter(MovieWriter_2043, ):
    unicode_2044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 454, (-1)), 'unicode', u'`MovieWriter` for writing to individual files and stitching at the end.\n\n    This must be sub-classed to be useful.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 455, 4, False)
        # Assigning a type to the variable 'self' (line 456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FileMovieWriter.__init__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 456)
        # Processing the call arguments (line 456)
        # Getting the type of 'self' (line 456)
        self_2047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 29), 'self', False)
        # Getting the type of 'args' (line 456)
        args_2048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 36), 'args', False)
        # Processing the call keyword arguments (line 456)
        # Getting the type of 'kwargs' (line 456)
        kwargs_2049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 44), 'kwargs', False)
        kwargs_2050 = {'kwargs_2049': kwargs_2049}
        # Getting the type of 'MovieWriter' (line 456)
        MovieWriter_2045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 8), 'MovieWriter', False)
        # Obtaining the member '__init__' of a type (line 456)
        init___2046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 8), MovieWriter_2045, '__init__')
        # Calling __init__(args, kwargs) (line 456)
        init___call_result_2051 = invoke(stypy.reporting.localization.Localization(__file__, 456, 8), init___2046, *[self_2047, args_2048], **kwargs_2050)
        
        
        # Assigning a Subscript to a Attribute (line 457):
        
        # Assigning a Subscript to a Attribute (line 457):
        
        # Obtaining the type of the subscript
        unicode_2052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 457, 37), 'unicode', u'animation.frame_format')
        # Getting the type of 'rcParams' (line 457)
        rcParams_2053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 28), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 457)
        getitem___2054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 28), rcParams_2053, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 457)
        subscript_call_result_2055 = invoke(stypy.reporting.localization.Localization(__file__, 457, 28), getitem___2054, unicode_2052)
        
        # Getting the type of 'self' (line 457)
        self_2056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 8), 'self')
        # Setting the type of the member 'frame_format' of a type (line 457)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 8), self_2056, 'frame_format', subscript_call_result_2055)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def setup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 459)
        None_2057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 38), 'None')
        unicode_2058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, 57), 'unicode', u'_tmp')
        # Getting the type of 'True' (line 460)
        True_2059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 25), 'True')
        defaults = [None_2057, unicode_2058, True_2059]
        # Create a new context for function 'setup'
        module_type_store = module_type_store.open_function_context('setup', 459, 4, False)
        # Assigning a type to the variable 'self' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FileMovieWriter.setup.__dict__.__setitem__('stypy_localization', localization)
        FileMovieWriter.setup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FileMovieWriter.setup.__dict__.__setitem__('stypy_type_store', module_type_store)
        FileMovieWriter.setup.__dict__.__setitem__('stypy_function_name', 'FileMovieWriter.setup')
        FileMovieWriter.setup.__dict__.__setitem__('stypy_param_names_list', ['fig', 'outfile', 'dpi', 'frame_prefix', 'clear_temp'])
        FileMovieWriter.setup.__dict__.__setitem__('stypy_varargs_param_name', None)
        FileMovieWriter.setup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FileMovieWriter.setup.__dict__.__setitem__('stypy_call_defaults', defaults)
        FileMovieWriter.setup.__dict__.__setitem__('stypy_call_varargs', varargs)
        FileMovieWriter.setup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FileMovieWriter.setup.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FileMovieWriter.setup', ['fig', 'outfile', 'dpi', 'frame_prefix', 'clear_temp'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'setup', localization, ['fig', 'outfile', 'dpi', 'frame_prefix', 'clear_temp'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'setup(...)' code ##################

        unicode_2060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, (-1)), 'unicode', u"Perform setup for writing the movie file.\n\n        Parameters\n        ----------\n        fig : matplotlib.figure.Figure\n            The figure to grab the rendered frames from.\n        outfile : str\n            The filename of the resulting movie file.\n        dpi : number, optional\n            The dpi of the output file. This, with the figure size,\n            controls the size in pixels of the resulting movie file.\n            Default is fig.dpi.\n        frame_prefix : str, optional\n            The filename prefix to use for temporary files.  Defaults to\n            ``'_tmp'``.\n        clear_temp : bool, optional\n            If the temporary files should be deleted after stitching\n            the final result.  Setting this to ``False`` can be useful for\n            debugging.  Defaults to ``True``.\n\n        ")
        
        # Assigning a Name to a Attribute (line 482):
        
        # Assigning a Name to a Attribute (line 482):
        # Getting the type of 'fig' (line 482)
        fig_2061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 19), 'fig')
        # Getting the type of 'self' (line 482)
        self_2062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 8), 'self')
        # Setting the type of the member 'fig' of a type (line 482)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 8), self_2062, 'fig', fig_2061)
        
        # Assigning a Name to a Attribute (line 483):
        
        # Assigning a Name to a Attribute (line 483):
        # Getting the type of 'outfile' (line 483)
        outfile_2063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 23), 'outfile')
        # Getting the type of 'self' (line 483)
        self_2064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'self')
        # Setting the type of the member 'outfile' of a type (line 483)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 8), self_2064, 'outfile', outfile_2063)
        
        # Type idiom detected: calculating its left and rigth part (line 484)
        # Getting the type of 'dpi' (line 484)
        dpi_2065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 11), 'dpi')
        # Getting the type of 'None' (line 484)
        None_2066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 18), 'None')
        
        (may_be_2067, more_types_in_union_2068) = may_be_none(dpi_2065, None_2066)

        if may_be_2067:

            if more_types_in_union_2068:
                # Runtime conditional SSA (line 484)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 485):
            
            # Assigning a Attribute to a Name (line 485):
            # Getting the type of 'self' (line 485)
            self_2069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 18), 'self')
            # Obtaining the member 'fig' of a type (line 485)
            fig_2070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 18), self_2069, 'fig')
            # Obtaining the member 'dpi' of a type (line 485)
            dpi_2071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 18), fig_2070, 'dpi')
            # Assigning a type to the variable 'dpi' (line 485)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 12), 'dpi', dpi_2071)

            if more_types_in_union_2068:
                # SSA join for if statement (line 484)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 486):
        
        # Assigning a Name to a Attribute (line 486):
        # Getting the type of 'dpi' (line 486)
        dpi_2072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 19), 'dpi')
        # Getting the type of 'self' (line 486)
        self_2073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 8), 'self')
        # Setting the type of the member 'dpi' of a type (line 486)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 8), self_2073, 'dpi', dpi_2072)
        
        # Call to _adjust_frame_size(...): (line 487)
        # Processing the call keyword arguments (line 487)
        kwargs_2076 = {}
        # Getting the type of 'self' (line 487)
        self_2074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 8), 'self', False)
        # Obtaining the member '_adjust_frame_size' of a type (line 487)
        _adjust_frame_size_2075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 8), self_2074, '_adjust_frame_size')
        # Calling _adjust_frame_size(args, kwargs) (line 487)
        _adjust_frame_size_call_result_2077 = invoke(stypy.reporting.localization.Localization(__file__, 487, 8), _adjust_frame_size_2075, *[], **kwargs_2076)
        
        
        # Assigning a Name to a Attribute (line 489):
        
        # Assigning a Name to a Attribute (line 489):
        # Getting the type of 'clear_temp' (line 489)
        clear_temp_2078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 26), 'clear_temp')
        # Getting the type of 'self' (line 489)
        self_2079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'self')
        # Setting the type of the member 'clear_temp' of a type (line 489)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 8), self_2079, 'clear_temp', clear_temp_2078)
        
        # Assigning a Name to a Attribute (line 490):
        
        # Assigning a Name to a Attribute (line 490):
        # Getting the type of 'frame_prefix' (line 490)
        frame_prefix_2080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 27), 'frame_prefix')
        # Getting the type of 'self' (line 490)
        self_2081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 8), 'self')
        # Setting the type of the member 'temp_prefix' of a type (line 490)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 8), self_2081, 'temp_prefix', frame_prefix_2080)
        
        # Assigning a Num to a Attribute (line 491):
        
        # Assigning a Num to a Attribute (line 491):
        int_2082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, 30), 'int')
        # Getting the type of 'self' (line 491)
        self_2083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 8), 'self')
        # Setting the type of the member '_frame_counter' of a type (line 491)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 8), self_2083, '_frame_counter', int_2082)
        
        # Assigning a Call to a Attribute (line 492):
        
        # Assigning a Call to a Attribute (line 492):
        
        # Call to list(...): (line 492)
        # Processing the call keyword arguments (line 492)
        kwargs_2085 = {}
        # Getting the type of 'list' (line 492)
        list_2084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 27), 'list', False)
        # Calling list(args, kwargs) (line 492)
        list_call_result_2086 = invoke(stypy.reporting.localization.Localization(__file__, 492, 27), list_2084, *[], **kwargs_2085)
        
        # Getting the type of 'self' (line 492)
        self_2087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'self')
        # Setting the type of the member '_temp_names' of a type (line 492)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 8), self_2087, '_temp_names', list_call_result_2086)
        
        # Assigning a Str to a Attribute (line 493):
        
        # Assigning a Str to a Attribute (line 493):
        unicode_2088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 32), 'unicode', u'%s%%07d.%s')
        # Getting the type of 'self' (line 493)
        self_2089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'self')
        # Setting the type of the member 'fname_format_str' of a type (line 493)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 8), self_2089, 'fname_format_str', unicode_2088)
        
        # ################# End of 'setup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'setup' in the type store
        # Getting the type of 'stypy_return_type' (line 459)
        stypy_return_type_2090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2090)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'setup'
        return stypy_return_type_2090


    @norecursion
    def frame_format(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'frame_format'
        module_type_store = module_type_store.open_function_context('frame_format', 495, 4, False)
        # Assigning a type to the variable 'self' (line 496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_localization', localization)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_type_store', module_type_store)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_function_name', 'FileMovieWriter.frame_format')
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_param_names_list', [])
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_varargs_param_name', None)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_call_defaults', defaults)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_call_varargs', varargs)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FileMovieWriter.frame_format', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'frame_format', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'frame_format(...)' code ##################

        unicode_2091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, (-1)), 'unicode', u'\n        Format (png, jpeg, etc.) to use for saving the frames, which can be\n        decided by the individual subclasses.\n        ')
        # Getting the type of 'self' (line 501)
        self_2092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 15), 'self')
        # Obtaining the member '_frame_format' of a type (line 501)
        _frame_format_2093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 501, 15), self_2092, '_frame_format')
        # Assigning a type to the variable 'stypy_return_type' (line 501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 8), 'stypy_return_type', _frame_format_2093)
        
        # ################# End of 'frame_format(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'frame_format' in the type store
        # Getting the type of 'stypy_return_type' (line 495)
        stypy_return_type_2094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2094)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'frame_format'
        return stypy_return_type_2094


    @norecursion
    def frame_format(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'frame_format'
        module_type_store = module_type_store.open_function_context('frame_format', 503, 4, False)
        # Assigning a type to the variable 'self' (line 504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 504, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_localization', localization)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_type_store', module_type_store)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_function_name', 'FileMovieWriter.frame_format')
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_param_names_list', ['frame_format'])
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_varargs_param_name', None)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_call_defaults', defaults)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_call_varargs', varargs)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FileMovieWriter.frame_format.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FileMovieWriter.frame_format', ['frame_format'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'frame_format', localization, ['frame_format'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'frame_format(...)' code ##################

        
        
        # Getting the type of 'frame_format' (line 505)
        frame_format_2095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 11), 'frame_format')
        # Getting the type of 'self' (line 505)
        self_2096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 27), 'self')
        # Obtaining the member 'supported_formats' of a type (line 505)
        supported_formats_2097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 505, 27), self_2096, 'supported_formats')
        # Applying the binary operator 'in' (line 505)
        result_contains_2098 = python_operator(stypy.reporting.localization.Localization(__file__, 505, 11), 'in', frame_format_2095, supported_formats_2097)
        
        # Testing the type of an if condition (line 505)
        if_condition_2099 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 505, 8), result_contains_2098)
        # Assigning a type to the variable 'if_condition_2099' (line 505)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 505, 8), 'if_condition_2099', if_condition_2099)
        # SSA begins for if statement (line 505)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 506):
        
        # Assigning a Name to a Attribute (line 506):
        # Getting the type of 'frame_format' (line 506)
        frame_format_2100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 33), 'frame_format')
        # Getting the type of 'self' (line 506)
        self_2101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 12), 'self')
        # Setting the type of the member '_frame_format' of a type (line 506)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 12), self_2101, '_frame_format', frame_format_2100)
        # SSA branch for the else part of an if statement (line 505)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Attribute (line 508):
        
        # Assigning a Subscript to a Attribute (line 508):
        
        # Obtaining the type of the subscript
        int_2102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 56), 'int')
        # Getting the type of 'self' (line 508)
        self_2103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 33), 'self')
        # Obtaining the member 'supported_formats' of a type (line 508)
        supported_formats_2104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 33), self_2103, 'supported_formats')
        # Obtaining the member '__getitem__' of a type (line 508)
        getitem___2105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 33), supported_formats_2104, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 508)
        subscript_call_result_2106 = invoke(stypy.reporting.localization.Localization(__file__, 508, 33), getitem___2105, int_2102)
        
        # Getting the type of 'self' (line 508)
        self_2107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 12), 'self')
        # Setting the type of the member '_frame_format' of a type (line 508)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 12), self_2107, '_frame_format', subscript_call_result_2106)
        # SSA join for if statement (line 505)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'frame_format(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'frame_format' in the type store
        # Getting the type of 'stypy_return_type' (line 503)
        stypy_return_type_2108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2108)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'frame_format'
        return stypy_return_type_2108


    @norecursion
    def _base_temp_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_base_temp_name'
        module_type_store = module_type_store.open_function_context('_base_temp_name', 510, 4, False)
        # Assigning a type to the variable 'self' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FileMovieWriter._base_temp_name.__dict__.__setitem__('stypy_localization', localization)
        FileMovieWriter._base_temp_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FileMovieWriter._base_temp_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        FileMovieWriter._base_temp_name.__dict__.__setitem__('stypy_function_name', 'FileMovieWriter._base_temp_name')
        FileMovieWriter._base_temp_name.__dict__.__setitem__('stypy_param_names_list', [])
        FileMovieWriter._base_temp_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        FileMovieWriter._base_temp_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FileMovieWriter._base_temp_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        FileMovieWriter._base_temp_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        FileMovieWriter._base_temp_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FileMovieWriter._base_temp_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FileMovieWriter._base_temp_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_base_temp_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_base_temp_name(...)' code ##################

        # Getting the type of 'self' (line 513)
        self_2109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 15), 'self')
        # Obtaining the member 'fname_format_str' of a type (line 513)
        fname_format_str_2110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 15), self_2109, 'fname_format_str')
        
        # Obtaining an instance of the builtin type 'tuple' (line 513)
        tuple_2111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 513)
        # Adding element type (line 513)
        # Getting the type of 'self' (line 513)
        self_2112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 40), 'self')
        # Obtaining the member 'temp_prefix' of a type (line 513)
        temp_prefix_2113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 40), self_2112, 'temp_prefix')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 513, 40), tuple_2111, temp_prefix_2113)
        # Adding element type (line 513)
        # Getting the type of 'self' (line 513)
        self_2114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 58), 'self')
        # Obtaining the member 'frame_format' of a type (line 513)
        frame_format_2115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 58), self_2114, 'frame_format')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 513, 40), tuple_2111, frame_format_2115)
        
        # Applying the binary operator '%' (line 513)
        result_mod_2116 = python_operator(stypy.reporting.localization.Localization(__file__, 513, 15), '%', fname_format_str_2110, tuple_2111)
        
        # Assigning a type to the variable 'stypy_return_type' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 8), 'stypy_return_type', result_mod_2116)
        
        # ################# End of '_base_temp_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_base_temp_name' in the type store
        # Getting the type of 'stypy_return_type' (line 510)
        stypy_return_type_2117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2117)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_base_temp_name'
        return stypy_return_type_2117


    @norecursion
    def _frame_sink(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_frame_sink'
        module_type_store = module_type_store.open_function_context('_frame_sink', 515, 4, False)
        # Assigning a type to the variable 'self' (line 516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FileMovieWriter._frame_sink.__dict__.__setitem__('stypy_localization', localization)
        FileMovieWriter._frame_sink.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FileMovieWriter._frame_sink.__dict__.__setitem__('stypy_type_store', module_type_store)
        FileMovieWriter._frame_sink.__dict__.__setitem__('stypy_function_name', 'FileMovieWriter._frame_sink')
        FileMovieWriter._frame_sink.__dict__.__setitem__('stypy_param_names_list', [])
        FileMovieWriter._frame_sink.__dict__.__setitem__('stypy_varargs_param_name', None)
        FileMovieWriter._frame_sink.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FileMovieWriter._frame_sink.__dict__.__setitem__('stypy_call_defaults', defaults)
        FileMovieWriter._frame_sink.__dict__.__setitem__('stypy_call_varargs', varargs)
        FileMovieWriter._frame_sink.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FileMovieWriter._frame_sink.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FileMovieWriter._frame_sink', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_frame_sink', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_frame_sink(...)' code ##################

        
        # Assigning a BinOp to a Name (line 518):
        
        # Assigning a BinOp to a Name (line 518):
        
        # Call to _base_temp_name(...): (line 518)
        # Processing the call keyword arguments (line 518)
        kwargs_2120 = {}
        # Getting the type of 'self' (line 518)
        self_2118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 16), 'self', False)
        # Obtaining the member '_base_temp_name' of a type (line 518)
        _base_temp_name_2119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 16), self_2118, '_base_temp_name')
        # Calling _base_temp_name(args, kwargs) (line 518)
        _base_temp_name_call_result_2121 = invoke(stypy.reporting.localization.Localization(__file__, 518, 16), _base_temp_name_2119, *[], **kwargs_2120)
        
        # Getting the type of 'self' (line 518)
        self_2122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 41), 'self')
        # Obtaining the member '_frame_counter' of a type (line 518)
        _frame_counter_2123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 41), self_2122, '_frame_counter')
        # Applying the binary operator '%' (line 518)
        result_mod_2124 = python_operator(stypy.reporting.localization.Localization(__file__, 518, 16), '%', _base_temp_name_call_result_2121, _frame_counter_2123)
        
        # Assigning a type to the variable 'fname' (line 518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 8), 'fname', result_mod_2124)
        
        # Call to append(...): (line 521)
        # Processing the call arguments (line 521)
        # Getting the type of 'fname' (line 521)
        fname_2128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 32), 'fname', False)
        # Processing the call keyword arguments (line 521)
        kwargs_2129 = {}
        # Getting the type of 'self' (line 521)
        self_2125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 8), 'self', False)
        # Obtaining the member '_temp_names' of a type (line 521)
        _temp_names_2126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 8), self_2125, '_temp_names')
        # Obtaining the member 'append' of a type (line 521)
        append_2127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 8), _temp_names_2126, 'append')
        # Calling append(args, kwargs) (line 521)
        append_call_result_2130 = invoke(stypy.reporting.localization.Localization(__file__, 521, 8), append_2127, *[fname_2128], **kwargs_2129)
        
        
        # Call to report(...): (line 522)
        # Processing the call arguments (line 522)
        unicode_2133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 12), 'unicode', u'FileMovieWriter.frame_sink: saving frame %d to fname=%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 524)
        tuple_2134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 524)
        # Adding element type (line 524)
        # Getting the type of 'self' (line 524)
        self_2135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 13), 'self', False)
        # Obtaining the member '_frame_counter' of a type (line 524)
        _frame_counter_2136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 13), self_2135, '_frame_counter')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 524, 13), tuple_2134, _frame_counter_2136)
        # Adding element type (line 524)
        # Getting the type of 'fname' (line 524)
        fname_2137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 34), 'fname', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 524, 13), tuple_2134, fname_2137)
        
        # Applying the binary operator '%' (line 523)
        result_mod_2138 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 12), '%', unicode_2133, tuple_2134)
        
        # Processing the call keyword arguments (line 522)
        unicode_2139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 525, 18), 'unicode', u'debug')
        keyword_2140 = unicode_2139
        kwargs_2141 = {'level': keyword_2140}
        # Getting the type of 'verbose' (line 522)
        verbose_2131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 8), 'verbose', False)
        # Obtaining the member 'report' of a type (line 522)
        report_2132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 8), verbose_2131, 'report')
        # Calling report(args, kwargs) (line 522)
        report_call_result_2142 = invoke(stypy.reporting.localization.Localization(__file__, 522, 8), report_2132, *[result_mod_2138], **kwargs_2141)
        
        
        # Getting the type of 'self' (line 526)
        self_2143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'self')
        # Obtaining the member '_frame_counter' of a type (line 526)
        _frame_counter_2144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 8), self_2143, '_frame_counter')
        int_2145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 31), 'int')
        # Applying the binary operator '+=' (line 526)
        result_iadd_2146 = python_operator(stypy.reporting.localization.Localization(__file__, 526, 8), '+=', _frame_counter_2144, int_2145)
        # Getting the type of 'self' (line 526)
        self_2147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'self')
        # Setting the type of the member '_frame_counter' of a type (line 526)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 8), self_2147, '_frame_counter', result_iadd_2146)
        
        
        # Call to open(...): (line 530)
        # Processing the call arguments (line 530)
        # Getting the type of 'fname' (line 530)
        fname_2149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 20), 'fname', False)
        unicode_2150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 27), 'unicode', u'wb')
        # Processing the call keyword arguments (line 530)
        kwargs_2151 = {}
        # Getting the type of 'open' (line 530)
        open_2148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 15), 'open', False)
        # Calling open(args, kwargs) (line 530)
        open_call_result_2152 = invoke(stypy.reporting.localization.Localization(__file__, 530, 15), open_2148, *[fname_2149, unicode_2150], **kwargs_2151)
        
        # Assigning a type to the variable 'stypy_return_type' (line 530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 8), 'stypy_return_type', open_call_result_2152)
        
        # ################# End of '_frame_sink(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_frame_sink' in the type store
        # Getting the type of 'stypy_return_type' (line 515)
        stypy_return_type_2153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2153)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_frame_sink'
        return stypy_return_type_2153


    @norecursion
    def grab_frame(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'grab_frame'
        module_type_store = module_type_store.open_function_context('grab_frame', 532, 4, False)
        # Assigning a type to the variable 'self' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FileMovieWriter.grab_frame.__dict__.__setitem__('stypy_localization', localization)
        FileMovieWriter.grab_frame.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FileMovieWriter.grab_frame.__dict__.__setitem__('stypy_type_store', module_type_store)
        FileMovieWriter.grab_frame.__dict__.__setitem__('stypy_function_name', 'FileMovieWriter.grab_frame')
        FileMovieWriter.grab_frame.__dict__.__setitem__('stypy_param_names_list', [])
        FileMovieWriter.grab_frame.__dict__.__setitem__('stypy_varargs_param_name', None)
        FileMovieWriter.grab_frame.__dict__.__setitem__('stypy_kwargs_param_name', 'savefig_kwargs')
        FileMovieWriter.grab_frame.__dict__.__setitem__('stypy_call_defaults', defaults)
        FileMovieWriter.grab_frame.__dict__.__setitem__('stypy_call_varargs', varargs)
        FileMovieWriter.grab_frame.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FileMovieWriter.grab_frame.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FileMovieWriter.grab_frame', [], None, 'savefig_kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'grab_frame', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'grab_frame(...)' code ##################

        unicode_2154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 537, (-1)), 'unicode', u'\n        Grab the image information from the figure and save as a movie frame.\n        All keyword arguments in savefig_kwargs are passed on to the `savefig`\n        command that saves the figure.\n        ')
        
        # Call to report(...): (line 539)
        # Processing the call arguments (line 539)
        unicode_2157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 23), 'unicode', u'MovieWriter.grab_frame: Grabbing frame.')
        # Processing the call keyword arguments (line 539)
        unicode_2158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 29), 'unicode', u'debug')
        keyword_2159 = unicode_2158
        kwargs_2160 = {'level': keyword_2159}
        # Getting the type of 'verbose' (line 539)
        verbose_2155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 8), 'verbose', False)
        # Obtaining the member 'report' of a type (line 539)
        report_2156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 8), verbose_2155, 'report')
        # Calling report(args, kwargs) (line 539)
        report_call_result_2161 = invoke(stypy.reporting.localization.Localization(__file__, 539, 8), report_2156, *[unicode_2157], **kwargs_2160)
        
        
        
        # SSA begins for try-except statement (line 541)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to _frame_sink(...): (line 544)
        # Processing the call keyword arguments (line 544)
        kwargs_2164 = {}
        # Getting the type of 'self' (line 544)
        self_2162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 17), 'self', False)
        # Obtaining the member '_frame_sink' of a type (line 544)
        _frame_sink_2163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 17), self_2162, '_frame_sink')
        # Calling _frame_sink(args, kwargs) (line 544)
        _frame_sink_call_result_2165 = invoke(stypy.reporting.localization.Localization(__file__, 544, 17), _frame_sink_2163, *[], **kwargs_2164)
        
        with_2166 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 544, 17), _frame_sink_call_result_2165, 'with parameter', '__enter__', '__exit__')

        if with_2166:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 544)
            enter___2167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 17), _frame_sink_call_result_2165, '__enter__')
            with_enter_2168 = invoke(stypy.reporting.localization.Localization(__file__, 544, 17), enter___2167)
            # Assigning a type to the variable 'myframesink' (line 544)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 17), 'myframesink', with_enter_2168)
            
            # Call to savefig(...): (line 545)
            # Processing the call arguments (line 545)
            # Getting the type of 'myframesink' (line 545)
            myframesink_2172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 33), 'myframesink', False)
            # Processing the call keyword arguments (line 545)
            # Getting the type of 'self' (line 545)
            self_2173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 53), 'self', False)
            # Obtaining the member 'frame_format' of a type (line 545)
            frame_format_2174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 53), self_2173, 'frame_format')
            keyword_2175 = frame_format_2174
            # Getting the type of 'self' (line 546)
            self_2176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 37), 'self', False)
            # Obtaining the member 'dpi' of a type (line 546)
            dpi_2177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 37), self_2176, 'dpi')
            keyword_2178 = dpi_2177
            # Getting the type of 'savefig_kwargs' (line 546)
            savefig_kwargs_2179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 49), 'savefig_kwargs', False)
            kwargs_2180 = {'savefig_kwargs_2179': savefig_kwargs_2179, 'dpi': keyword_2178, 'format': keyword_2175}
            # Getting the type of 'self' (line 545)
            self_2169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 16), 'self', False)
            # Obtaining the member 'fig' of a type (line 545)
            fig_2170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 16), self_2169, 'fig')
            # Obtaining the member 'savefig' of a type (line 545)
            savefig_2171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 16), fig_2170, 'savefig')
            # Calling savefig(args, kwargs) (line 545)
            savefig_call_result_2181 = invoke(stypy.reporting.localization.Localization(__file__, 545, 16), savefig_2171, *[myframesink_2172], **kwargs_2180)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 544)
            exit___2182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 17), _frame_sink_call_result_2165, '__exit__')
            with_exit_2183 = invoke(stypy.reporting.localization.Localization(__file__, 544, 17), exit___2182, None, None, None)

        # SSA branch for the except part of a try statement (line 541)
        # SSA branch for the except 'RuntimeError' branch of a try statement (line 541)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Tuple (line 549):
        
        # Assigning a Call to a Name:
        
        # Call to communicate(...): (line 549)
        # Processing the call keyword arguments (line 549)
        kwargs_2187 = {}
        # Getting the type of 'self' (line 549)
        self_2184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 23), 'self', False)
        # Obtaining the member '_proc' of a type (line 549)
        _proc_2185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 23), self_2184, '_proc')
        # Obtaining the member 'communicate' of a type (line 549)
        communicate_2186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 23), _proc_2185, 'communicate')
        # Calling communicate(args, kwargs) (line 549)
        communicate_call_result_2188 = invoke(stypy.reporting.localization.Localization(__file__, 549, 23), communicate_2186, *[], **kwargs_2187)
        
        # Assigning a type to the variable 'call_assignment_1305' (line 549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'call_assignment_1305', communicate_call_result_2188)
        
        # Assigning a Call to a Name (line 549):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_2191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 12), 'int')
        # Processing the call keyword arguments
        kwargs_2192 = {}
        # Getting the type of 'call_assignment_1305' (line 549)
        call_assignment_1305_2189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'call_assignment_1305', False)
        # Obtaining the member '__getitem__' of a type (line 549)
        getitem___2190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 12), call_assignment_1305_2189, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_2193 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___2190, *[int_2191], **kwargs_2192)
        
        # Assigning a type to the variable 'call_assignment_1306' (line 549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'call_assignment_1306', getitem___call_result_2193)
        
        # Assigning a Name to a Name (line 549):
        # Getting the type of 'call_assignment_1306' (line 549)
        call_assignment_1306_2194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'call_assignment_1306')
        # Assigning a type to the variable 'out' (line 549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'out', call_assignment_1306_2194)
        
        # Assigning a Call to a Name (line 549):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_2197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 12), 'int')
        # Processing the call keyword arguments
        kwargs_2198 = {}
        # Getting the type of 'call_assignment_1305' (line 549)
        call_assignment_1305_2195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'call_assignment_1305', False)
        # Obtaining the member '__getitem__' of a type (line 549)
        getitem___2196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 12), call_assignment_1305_2195, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_2199 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___2196, *[int_2197], **kwargs_2198)
        
        # Assigning a type to the variable 'call_assignment_1307' (line 549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'call_assignment_1307', getitem___call_result_2199)
        
        # Assigning a Name to a Name (line 549):
        # Getting the type of 'call_assignment_1307' (line 549)
        call_assignment_1307_2200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'call_assignment_1307')
        # Assigning a type to the variable 'err' (line 549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 17), 'err', call_assignment_1307_2200)
        
        # Call to report(...): (line 550)
        # Processing the call arguments (line 550)
        unicode_2203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 550, 27), 'unicode', u'MovieWriter -- Error running proc:\n%s\n%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 551)
        tuple_2204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 54), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 551)
        # Adding element type (line 551)
        # Getting the type of 'out' (line 551)
        out_2205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 54), 'out', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 551, 54), tuple_2204, out_2205)
        # Adding element type (line 551)
        # Getting the type of 'err' (line 552)
        err_2206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 54), 'err', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 551, 54), tuple_2204, err_2206)
        
        # Applying the binary operator '%' (line 550)
        result_mod_2207 = python_operator(stypy.reporting.localization.Localization(__file__, 550, 27), '%', unicode_2203, tuple_2204)
        
        # Processing the call keyword arguments (line 550)
        unicode_2208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 66), 'unicode', u'helpful')
        keyword_2209 = unicode_2208
        kwargs_2210 = {'level': keyword_2209}
        # Getting the type of 'verbose' (line 550)
        verbose_2201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 12), 'verbose', False)
        # Obtaining the member 'report' of a type (line 550)
        report_2202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 550, 12), verbose_2201, 'report')
        # Calling report(args, kwargs) (line 550)
        report_call_result_2211 = invoke(stypy.reporting.localization.Localization(__file__, 550, 12), report_2202, *[result_mod_2207], **kwargs_2210)
        
        # SSA join for try-except statement (line 541)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'grab_frame(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'grab_frame' in the type store
        # Getting the type of 'stypy_return_type' (line 532)
        stypy_return_type_2212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2212)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'grab_frame'
        return stypy_return_type_2212


    @norecursion
    def finish(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'finish'
        module_type_store = module_type_store.open_function_context('finish', 555, 4, False)
        # Assigning a type to the variable 'self' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FileMovieWriter.finish.__dict__.__setitem__('stypy_localization', localization)
        FileMovieWriter.finish.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FileMovieWriter.finish.__dict__.__setitem__('stypy_type_store', module_type_store)
        FileMovieWriter.finish.__dict__.__setitem__('stypy_function_name', 'FileMovieWriter.finish')
        FileMovieWriter.finish.__dict__.__setitem__('stypy_param_names_list', [])
        FileMovieWriter.finish.__dict__.__setitem__('stypy_varargs_param_name', None)
        FileMovieWriter.finish.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FileMovieWriter.finish.__dict__.__setitem__('stypy_call_defaults', defaults)
        FileMovieWriter.finish.__dict__.__setitem__('stypy_call_varargs', varargs)
        FileMovieWriter.finish.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FileMovieWriter.finish.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FileMovieWriter.finish', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'finish', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'finish(...)' code ##################

        
        # Call to _run(...): (line 558)
        # Processing the call keyword arguments (line 558)
        kwargs_2215 = {}
        # Getting the type of 'self' (line 558)
        self_2213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 8), 'self', False)
        # Obtaining the member '_run' of a type (line 558)
        _run_2214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 558, 8), self_2213, '_run')
        # Calling _run(args, kwargs) (line 558)
        _run_call_result_2216 = invoke(stypy.reporting.localization.Localization(__file__, 558, 8), _run_2214, *[], **kwargs_2215)
        
        
        # Call to finish(...): (line 559)
        # Processing the call arguments (line 559)
        # Getting the type of 'self' (line 559)
        self_2219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 27), 'self', False)
        # Processing the call keyword arguments (line 559)
        kwargs_2220 = {}
        # Getting the type of 'MovieWriter' (line 559)
        MovieWriter_2217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 8), 'MovieWriter', False)
        # Obtaining the member 'finish' of a type (line 559)
        finish_2218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 8), MovieWriter_2217, 'finish')
        # Calling finish(args, kwargs) (line 559)
        finish_call_result_2221 = invoke(stypy.reporting.localization.Localization(__file__, 559, 8), finish_2218, *[self_2219], **kwargs_2220)
        
        
        # Getting the type of 'self' (line 563)
        self_2222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 11), 'self')
        # Obtaining the member '_proc' of a type (line 563)
        _proc_2223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 11), self_2222, '_proc')
        # Obtaining the member 'returncode' of a type (line 563)
        returncode_2224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 11), _proc_2223, 'returncode')
        # Testing the type of an if condition (line 563)
        if_condition_2225 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 563, 8), returncode_2224)
        # Assigning a type to the variable 'if_condition_2225' (line 563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 563, 8), 'if_condition_2225', if_condition_2225)
        # SSA begins for if statement (line 563)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 564)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a ListComp to a Name (line 565):
        
        # Assigning a ListComp to a Name (line 565):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'self' (line 565)
        self_2230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 46), 'self')
        # Obtaining the member '_proc' of a type (line 565)
        _proc_2231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 46), self_2230, '_proc')
        # Obtaining the member '_stdout_buff' of a type (line 565)
        _stdout_buff_2232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 46), _proc_2231, '_stdout_buff')
        comprehension_2233 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 565, 26), _stdout_buff_2232)
        # Assigning a type to the variable 's' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 26), 's', comprehension_2233)
        
        # Call to decode(...): (line 565)
        # Processing the call keyword arguments (line 565)
        kwargs_2228 = {}
        # Getting the type of 's' (line 565)
        s_2226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 26), 's', False)
        # Obtaining the member 'decode' of a type (line 565)
        decode_2227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 26), s_2226, 'decode')
        # Calling decode(args, kwargs) (line 565)
        decode_call_result_2229 = invoke(stypy.reporting.localization.Localization(__file__, 565, 26), decode_2227, *[], **kwargs_2228)
        
        list_2234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 26), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 565, 26), list_2234, decode_call_result_2229)
        # Assigning a type to the variable 'stdout' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 16), 'stdout', list_2234)
        
        # Assigning a ListComp to a Name (line 566):
        
        # Assigning a ListComp to a Name (line 566):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'self' (line 566)
        self_2239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 46), 'self')
        # Obtaining the member '_proc' of a type (line 566)
        _proc_2240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 46), self_2239, '_proc')
        # Obtaining the member '_stderr_buff' of a type (line 566)
        _stderr_buff_2241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 46), _proc_2240, '_stderr_buff')
        comprehension_2242 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 566, 26), _stderr_buff_2241)
        # Assigning a type to the variable 's' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 26), 's', comprehension_2242)
        
        # Call to decode(...): (line 566)
        # Processing the call keyword arguments (line 566)
        kwargs_2237 = {}
        # Getting the type of 's' (line 566)
        s_2235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 26), 's', False)
        # Obtaining the member 'decode' of a type (line 566)
        decode_2236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 26), s_2235, 'decode')
        # Calling decode(args, kwargs) (line 566)
        decode_call_result_2238 = invoke(stypy.reporting.localization.Localization(__file__, 566, 26), decode_2236, *[], **kwargs_2237)
        
        list_2243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 566, 26), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 566, 26), list_2243, decode_call_result_2238)
        # Assigning a type to the variable 'stderr' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 16), 'stderr', list_2243)
        
        # Call to report(...): (line 567)
        # Processing the call arguments (line 567)
        unicode_2246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 31), 'unicode', u'MovieWriter.finish: stdout: %s')
        # Getting the type of 'stdout' (line 567)
        stdout_2247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 66), 'stdout', False)
        # Applying the binary operator '%' (line 567)
        result_mod_2248 = python_operator(stypy.reporting.localization.Localization(__file__, 567, 31), '%', unicode_2246, stdout_2247)
        
        # Processing the call keyword arguments (line 567)
        unicode_2249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 37), 'unicode', u'helpful')
        keyword_2250 = unicode_2249
        kwargs_2251 = {'level': keyword_2250}
        # Getting the type of 'verbose' (line 567)
        verbose_2244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 16), 'verbose', False)
        # Obtaining the member 'report' of a type (line 567)
        report_2245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 16), verbose_2244, 'report')
        # Calling report(args, kwargs) (line 567)
        report_call_result_2252 = invoke(stypy.reporting.localization.Localization(__file__, 567, 16), report_2245, *[result_mod_2248], **kwargs_2251)
        
        
        # Call to report(...): (line 569)
        # Processing the call arguments (line 569)
        unicode_2255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 31), 'unicode', u'MovieWriter.finish: stderr: %s')
        # Getting the type of 'stderr' (line 569)
        stderr_2256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 66), 'stderr', False)
        # Applying the binary operator '%' (line 569)
        result_mod_2257 = python_operator(stypy.reporting.localization.Localization(__file__, 569, 31), '%', unicode_2255, stderr_2256)
        
        # Processing the call keyword arguments (line 569)
        unicode_2258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 37), 'unicode', u'helpful')
        keyword_2259 = unicode_2258
        kwargs_2260 = {'level': keyword_2259}
        # Getting the type of 'verbose' (line 569)
        verbose_2253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 16), 'verbose', False)
        # Obtaining the member 'report' of a type (line 569)
        report_2254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 16), verbose_2253, 'report')
        # Calling report(args, kwargs) (line 569)
        report_call_result_2261 = invoke(stypy.reporting.localization.Localization(__file__, 569, 16), report_2254, *[result_mod_2257], **kwargs_2260)
        
        # SSA branch for the except part of a try statement (line 564)
        # SSA branch for the except 'Exception' branch of a try statement (line 564)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'Exception' (line 571)
        Exception_2262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 19), 'Exception')
        # Assigning a type to the variable 'e' (line 571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 12), 'e', Exception_2262)
        pass
        # SSA join for try-except statement (line 564)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 573):
        
        # Assigning a BinOp to a Name (line 573):
        unicode_2263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 19), 'unicode', u'Error creating movie, return code: ')
        
        # Call to str(...): (line 574)
        # Processing the call arguments (line 574)
        # Getting the type of 'self' (line 574)
        self_2265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 23), 'self', False)
        # Obtaining the member '_proc' of a type (line 574)
        _proc_2266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 23), self_2265, '_proc')
        # Obtaining the member 'returncode' of a type (line 574)
        returncode_2267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 23), _proc_2266, 'returncode')
        # Processing the call keyword arguments (line 574)
        kwargs_2268 = {}
        # Getting the type of 'str' (line 574)
        str_2264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 19), 'str', False)
        # Calling str(args, kwargs) (line 574)
        str_call_result_2269 = invoke(stypy.reporting.localization.Localization(__file__, 574, 19), str_2264, *[returncode_2267], **kwargs_2268)
        
        # Applying the binary operator '+' (line 573)
        result_add_2270 = python_operator(stypy.reporting.localization.Localization(__file__, 573, 19), '+', unicode_2263, str_call_result_2269)
        
        unicode_2271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 575, 19), 'unicode', u' Try setting mpl.verbose.set_level("helpful")')
        # Applying the binary operator '+' (line 574)
        result_add_2272 = python_operator(stypy.reporting.localization.Localization(__file__, 574, 46), '+', result_add_2270, unicode_2271)
        
        # Assigning a type to the variable 'msg' (line 573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 12), 'msg', result_add_2272)
        
        # Call to RuntimeError(...): (line 576)
        # Processing the call arguments (line 576)
        # Getting the type of 'msg' (line 576)
        msg_2274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 31), 'msg', False)
        # Processing the call keyword arguments (line 576)
        kwargs_2275 = {}
        # Getting the type of 'RuntimeError' (line 576)
        RuntimeError_2273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 576)
        RuntimeError_call_result_2276 = invoke(stypy.reporting.localization.Localization(__file__, 576, 18), RuntimeError_2273, *[msg_2274], **kwargs_2275)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 576, 12), RuntimeError_call_result_2276, 'raise parameter', BaseException)
        # SSA join for if statement (line 563)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'finish(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'finish' in the type store
        # Getting the type of 'stypy_return_type' (line 555)
        stypy_return_type_2277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2277)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'finish'
        return stypy_return_type_2277


    @norecursion
    def cleanup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'cleanup'
        module_type_store = module_type_store.open_function_context('cleanup', 578, 4, False)
        # Assigning a type to the variable 'self' (line 579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 579, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FileMovieWriter.cleanup.__dict__.__setitem__('stypy_localization', localization)
        FileMovieWriter.cleanup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FileMovieWriter.cleanup.__dict__.__setitem__('stypy_type_store', module_type_store)
        FileMovieWriter.cleanup.__dict__.__setitem__('stypy_function_name', 'FileMovieWriter.cleanup')
        FileMovieWriter.cleanup.__dict__.__setitem__('stypy_param_names_list', [])
        FileMovieWriter.cleanup.__dict__.__setitem__('stypy_varargs_param_name', None)
        FileMovieWriter.cleanup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FileMovieWriter.cleanup.__dict__.__setitem__('stypy_call_defaults', defaults)
        FileMovieWriter.cleanup.__dict__.__setitem__('stypy_call_varargs', varargs)
        FileMovieWriter.cleanup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FileMovieWriter.cleanup.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FileMovieWriter.cleanup', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cleanup', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cleanup(...)' code ##################

        
        # Call to cleanup(...): (line 579)
        # Processing the call arguments (line 579)
        # Getting the type of 'self' (line 579)
        self_2280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 28), 'self', False)
        # Processing the call keyword arguments (line 579)
        kwargs_2281 = {}
        # Getting the type of 'MovieWriter' (line 579)
        MovieWriter_2278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 8), 'MovieWriter', False)
        # Obtaining the member 'cleanup' of a type (line 579)
        cleanup_2279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 579, 8), MovieWriter_2278, 'cleanup')
        # Calling cleanup(args, kwargs) (line 579)
        cleanup_call_result_2282 = invoke(stypy.reporting.localization.Localization(__file__, 579, 8), cleanup_2279, *[self_2280], **kwargs_2281)
        
        
        # Getting the type of 'self' (line 582)
        self_2283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 11), 'self')
        # Obtaining the member 'clear_temp' of a type (line 582)
        clear_temp_2284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 11), self_2283, 'clear_temp')
        # Testing the type of an if condition (line 582)
        if_condition_2285 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 582, 8), clear_temp_2284)
        # Assigning a type to the variable 'if_condition_2285' (line 582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 8), 'if_condition_2285', if_condition_2285)
        # SSA begins for if statement (line 582)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to report(...): (line 583)
        # Processing the call arguments (line 583)
        unicode_2288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 16), 'unicode', u'MovieWriter: clearing temporary fnames=%s')
        
        # Call to str(...): (line 585)
        # Processing the call arguments (line 585)
        # Getting the type of 'self' (line 585)
        self_2290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 20), 'self', False)
        # Obtaining the member '_temp_names' of a type (line 585)
        _temp_names_2291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 20), self_2290, '_temp_names')
        # Processing the call keyword arguments (line 585)
        kwargs_2292 = {}
        # Getting the type of 'str' (line 585)
        str_2289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 16), 'str', False)
        # Calling str(args, kwargs) (line 585)
        str_call_result_2293 = invoke(stypy.reporting.localization.Localization(__file__, 585, 16), str_2289, *[_temp_names_2291], **kwargs_2292)
        
        # Applying the binary operator '%' (line 584)
        result_mod_2294 = python_operator(stypy.reporting.localization.Localization(__file__, 584, 16), '%', unicode_2288, str_call_result_2293)
        
        # Processing the call keyword arguments (line 583)
        unicode_2295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 586, 22), 'unicode', u'debug')
        keyword_2296 = unicode_2295
        kwargs_2297 = {'level': keyword_2296}
        # Getting the type of 'verbose' (line 583)
        verbose_2286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 12), 'verbose', False)
        # Obtaining the member 'report' of a type (line 583)
        report_2287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 12), verbose_2286, 'report')
        # Calling report(args, kwargs) (line 583)
        report_call_result_2298 = invoke(stypy.reporting.localization.Localization(__file__, 583, 12), report_2287, *[result_mod_2294], **kwargs_2297)
        
        
        # Getting the type of 'self' (line 587)
        self_2299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 25), 'self')
        # Obtaining the member '_temp_names' of a type (line 587)
        _temp_names_2300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 25), self_2299, '_temp_names')
        # Testing the type of a for loop iterable (line 587)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 587, 12), _temp_names_2300)
        # Getting the type of the for loop variable (line 587)
        for_loop_var_2301 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 587, 12), _temp_names_2300)
        # Assigning a type to the variable 'fname' (line 587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 12), 'fname', for_loop_var_2301)
        # SSA begins for a for statement (line 587)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to remove(...): (line 588)
        # Processing the call arguments (line 588)
        # Getting the type of 'fname' (line 588)
        fname_2304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 26), 'fname', False)
        # Processing the call keyword arguments (line 588)
        kwargs_2305 = {}
        # Getting the type of 'os' (line 588)
        os_2302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 16), 'os', False)
        # Obtaining the member 'remove' of a type (line 588)
        remove_2303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 16), os_2302, 'remove')
        # Calling remove(args, kwargs) (line 588)
        remove_call_result_2306 = invoke(stypy.reporting.localization.Localization(__file__, 588, 16), remove_2303, *[fname_2304], **kwargs_2305)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 582)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'cleanup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cleanup' in the type store
        # Getting the type of 'stypy_return_type' (line 578)
        stypy_return_type_2307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2307)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cleanup'
        return stypy_return_type_2307


# Assigning a type to the variable 'FileMovieWriter' (line 450)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 0), 'FileMovieWriter', FileMovieWriter)
# Declaration of the 'FFMpegBase' class

class FFMpegBase(object, ):
    unicode_2308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, (-1)), 'unicode', u'Mixin class for FFMpeg output.\n\n    To be useful this must be multiply-inherited from with a\n    `MovieWriterBase` sub-class.\n    ')
    
    # Assigning a Str to a Name (line 600):
    
    # Assigning a Str to a Name (line 601):

    @norecursion
    def output_args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'output_args'
        module_type_store = module_type_store.open_function_context('output_args', 603, 4, False)
        # Assigning a type to the variable 'self' (line 604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FFMpegBase.output_args.__dict__.__setitem__('stypy_localization', localization)
        FFMpegBase.output_args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FFMpegBase.output_args.__dict__.__setitem__('stypy_type_store', module_type_store)
        FFMpegBase.output_args.__dict__.__setitem__('stypy_function_name', 'FFMpegBase.output_args')
        FFMpegBase.output_args.__dict__.__setitem__('stypy_param_names_list', [])
        FFMpegBase.output_args.__dict__.__setitem__('stypy_varargs_param_name', None)
        FFMpegBase.output_args.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FFMpegBase.output_args.__dict__.__setitem__('stypy_call_defaults', defaults)
        FFMpegBase.output_args.__dict__.__setitem__('stypy_call_varargs', varargs)
        FFMpegBase.output_args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FFMpegBase.output_args.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FFMpegBase.output_args', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'output_args', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'output_args(...)' code ##################

        
        # Assigning a List to a Name (line 605):
        
        # Assigning a List to a Name (line 605):
        
        # Obtaining an instance of the builtin type 'list' (line 605)
        list_2309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 605)
        # Adding element type (line 605)
        unicode_2310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 16), 'unicode', u'-vcodec')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 15), list_2309, unicode_2310)
        # Adding element type (line 605)
        # Getting the type of 'self' (line 605)
        self_2311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 27), 'self')
        # Obtaining the member 'codec' of a type (line 605)
        codec_2312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 27), self_2311, 'codec')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 15), list_2309, codec_2312)
        
        # Assigning a type to the variable 'args' (line 605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'args', list_2309)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 610)
        self_2313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 11), 'self')
        # Obtaining the member 'codec' of a type (line 610)
        codec_2314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 11), self_2313, 'codec')
        unicode_2315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 25), 'unicode', u'h264')
        # Applying the binary operator '==' (line 610)
        result_eq_2316 = python_operator(stypy.reporting.localization.Localization(__file__, 610, 11), '==', codec_2314, unicode_2315)
        
        
        unicode_2317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 36), 'unicode', u'-pix_fmt')
        # Getting the type of 'self' (line 610)
        self_2318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 54), 'self')
        # Obtaining the member 'extra_args' of a type (line 610)
        extra_args_2319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 54), self_2318, 'extra_args')
        # Applying the binary operator 'notin' (line 610)
        result_contains_2320 = python_operator(stypy.reporting.localization.Localization(__file__, 610, 36), 'notin', unicode_2317, extra_args_2319)
        
        # Applying the binary operator 'and' (line 610)
        result_and_keyword_2321 = python_operator(stypy.reporting.localization.Localization(__file__, 610, 11), 'and', result_eq_2316, result_contains_2320)
        
        # Testing the type of an if condition (line 610)
        if_condition_2322 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 610, 8), result_and_keyword_2321)
        # Assigning a type to the variable 'if_condition_2322' (line 610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 8), 'if_condition_2322', if_condition_2322)
        # SSA begins for if statement (line 610)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 611)
        # Processing the call arguments (line 611)
        
        # Obtaining an instance of the builtin type 'list' (line 611)
        list_2325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 611)
        # Adding element type (line 611)
        unicode_2326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 25), 'unicode', u'-pix_fmt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 611, 24), list_2325, unicode_2326)
        # Adding element type (line 611)
        unicode_2327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 37), 'unicode', u'yuv420p')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 611, 24), list_2325, unicode_2327)
        
        # Processing the call keyword arguments (line 611)
        kwargs_2328 = {}
        # Getting the type of 'args' (line 611)
        args_2323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 12), 'args', False)
        # Obtaining the member 'extend' of a type (line 611)
        extend_2324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 12), args_2323, 'extend')
        # Calling extend(args, kwargs) (line 611)
        extend_call_result_2329 = invoke(stypy.reporting.localization.Localization(__file__, 611, 12), extend_2324, *[list_2325], **kwargs_2328)
        
        # SSA join for if statement (line 610)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 614)
        self_2330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 11), 'self')
        # Obtaining the member 'bitrate' of a type (line 614)
        bitrate_2331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 11), self_2330, 'bitrate')
        int_2332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 26), 'int')
        # Applying the binary operator '>' (line 614)
        result_gt_2333 = python_operator(stypy.reporting.localization.Localization(__file__, 614, 11), '>', bitrate_2331, int_2332)
        
        # Testing the type of an if condition (line 614)
        if_condition_2334 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 614, 8), result_gt_2333)
        # Assigning a type to the variable 'if_condition_2334' (line 614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 8), 'if_condition_2334', if_condition_2334)
        # SSA begins for if statement (line 614)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 615)
        # Processing the call arguments (line 615)
        
        # Obtaining an instance of the builtin type 'list' (line 615)
        list_2337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 615)
        # Adding element type (line 615)
        unicode_2338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 25), 'unicode', u'-b')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 24), list_2337, unicode_2338)
        # Adding element type (line 615)
        unicode_2339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 31), 'unicode', u'%dk')
        # Getting the type of 'self' (line 615)
        self_2340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 39), 'self', False)
        # Obtaining the member 'bitrate' of a type (line 615)
        bitrate_2341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 39), self_2340, 'bitrate')
        # Applying the binary operator '%' (line 615)
        result_mod_2342 = python_operator(stypy.reporting.localization.Localization(__file__, 615, 31), '%', unicode_2339, bitrate_2341)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 24), list_2337, result_mod_2342)
        
        # Processing the call keyword arguments (line 615)
        kwargs_2343 = {}
        # Getting the type of 'args' (line 615)
        args_2335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 12), 'args', False)
        # Obtaining the member 'extend' of a type (line 615)
        extend_2336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 12), args_2335, 'extend')
        # Calling extend(args, kwargs) (line 615)
        extend_call_result_2344 = invoke(stypy.reporting.localization.Localization(__file__, 615, 12), extend_2336, *[list_2337], **kwargs_2343)
        
        # SSA join for if statement (line 614)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 616)
        self_2345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 11), 'self')
        # Obtaining the member 'extra_args' of a type (line 616)
        extra_args_2346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 11), self_2345, 'extra_args')
        # Testing the type of an if condition (line 616)
        if_condition_2347 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 616, 8), extra_args_2346)
        # Assigning a type to the variable 'if_condition_2347' (line 616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'if_condition_2347', if_condition_2347)
        # SSA begins for if statement (line 616)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 617)
        # Processing the call arguments (line 617)
        # Getting the type of 'self' (line 617)
        self_2350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 24), 'self', False)
        # Obtaining the member 'extra_args' of a type (line 617)
        extra_args_2351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 24), self_2350, 'extra_args')
        # Processing the call keyword arguments (line 617)
        kwargs_2352 = {}
        # Getting the type of 'args' (line 617)
        args_2348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 12), 'args', False)
        # Obtaining the member 'extend' of a type (line 617)
        extend_2349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 12), args_2348, 'extend')
        # Calling extend(args, kwargs) (line 617)
        extend_call_result_2353 = invoke(stypy.reporting.localization.Localization(__file__, 617, 12), extend_2349, *[extra_args_2351], **kwargs_2352)
        
        # SSA join for if statement (line 616)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to iteritems(...): (line 618)
        # Processing the call arguments (line 618)
        # Getting the type of 'self' (line 618)
        self_2356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 34), 'self', False)
        # Obtaining the member 'metadata' of a type (line 618)
        metadata_2357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 34), self_2356, 'metadata')
        # Processing the call keyword arguments (line 618)
        kwargs_2358 = {}
        # Getting the type of 'six' (line 618)
        six_2354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 20), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 618)
        iteritems_2355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 20), six_2354, 'iteritems')
        # Calling iteritems(args, kwargs) (line 618)
        iteritems_call_result_2359 = invoke(stypy.reporting.localization.Localization(__file__, 618, 20), iteritems_2355, *[metadata_2357], **kwargs_2358)
        
        # Testing the type of a for loop iterable (line 618)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 618, 8), iteritems_call_result_2359)
        # Getting the type of the for loop variable (line 618)
        for_loop_var_2360 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 618, 8), iteritems_call_result_2359)
        # Assigning a type to the variable 'k' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 8), for_loop_var_2360))
        # Assigning a type to the variable 'v' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 8), for_loop_var_2360))
        # SSA begins for a for statement (line 618)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to extend(...): (line 619)
        # Processing the call arguments (line 619)
        
        # Obtaining an instance of the builtin type 'list' (line 619)
        list_2363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 619)
        # Adding element type (line 619)
        unicode_2364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 25), 'unicode', u'-metadata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 619, 24), list_2363, unicode_2364)
        # Adding element type (line 619)
        unicode_2365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 38), 'unicode', u'%s=%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 619)
        tuple_2366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 49), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 619)
        # Adding element type (line 619)
        # Getting the type of 'k' (line 619)
        k_2367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 49), 'k', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 619, 49), tuple_2366, k_2367)
        # Adding element type (line 619)
        # Getting the type of 'v' (line 619)
        v_2368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 52), 'v', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 619, 49), tuple_2366, v_2368)
        
        # Applying the binary operator '%' (line 619)
        result_mod_2369 = python_operator(stypy.reporting.localization.Localization(__file__, 619, 38), '%', unicode_2365, tuple_2366)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 619, 24), list_2363, result_mod_2369)
        
        # Processing the call keyword arguments (line 619)
        kwargs_2370 = {}
        # Getting the type of 'args' (line 619)
        args_2361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 12), 'args', False)
        # Obtaining the member 'extend' of a type (line 619)
        extend_2362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 12), args_2361, 'extend')
        # Calling extend(args, kwargs) (line 619)
        extend_call_result_2371 = invoke(stypy.reporting.localization.Localization(__file__, 619, 12), extend_2362, *[list_2363], **kwargs_2370)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'args' (line 621)
        args_2372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 15), 'args')
        
        # Obtaining an instance of the builtin type 'list' (line 621)
        list_2373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 621)
        # Adding element type (line 621)
        unicode_2374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 23), 'unicode', u'-y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 621, 22), list_2373, unicode_2374)
        # Adding element type (line 621)
        # Getting the type of 'self' (line 621)
        self_2375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 29), 'self')
        # Obtaining the member 'outfile' of a type (line 621)
        outfile_2376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 29), self_2375, 'outfile')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 621, 22), list_2373, outfile_2376)
        
        # Applying the binary operator '+' (line 621)
        result_add_2377 = python_operator(stypy.reporting.localization.Localization(__file__, 621, 15), '+', args_2372, list_2373)
        
        # Assigning a type to the variable 'stypy_return_type' (line 621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 8), 'stypy_return_type', result_add_2377)
        
        # ################# End of 'output_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'output_args' in the type store
        # Getting the type of 'stypy_return_type' (line 603)
        stypy_return_type_2378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2378)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'output_args'
        return stypy_return_type_2378


    @norecursion
    def _handle_subprocess(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_handle_subprocess'
        module_type_store = module_type_store.open_function_context('_handle_subprocess', 623, 4, False)
        # Assigning a type to the variable 'self' (line 624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FFMpegBase._handle_subprocess.__dict__.__setitem__('stypy_localization', localization)
        FFMpegBase._handle_subprocess.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FFMpegBase._handle_subprocess.__dict__.__setitem__('stypy_type_store', module_type_store)
        FFMpegBase._handle_subprocess.__dict__.__setitem__('stypy_function_name', 'FFMpegBase._handle_subprocess')
        FFMpegBase._handle_subprocess.__dict__.__setitem__('stypy_param_names_list', ['process'])
        FFMpegBase._handle_subprocess.__dict__.__setitem__('stypy_varargs_param_name', None)
        FFMpegBase._handle_subprocess.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FFMpegBase._handle_subprocess.__dict__.__setitem__('stypy_call_defaults', defaults)
        FFMpegBase._handle_subprocess.__dict__.__setitem__('stypy_call_varargs', varargs)
        FFMpegBase._handle_subprocess.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FFMpegBase._handle_subprocess.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FFMpegBase._handle_subprocess', ['process'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_handle_subprocess', localization, ['process'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_handle_subprocess(...)' code ##################

        
        # Assigning a Call to a Tuple (line 625):
        
        # Assigning a Call to a Name:
        
        # Call to communicate(...): (line 625)
        # Processing the call keyword arguments (line 625)
        kwargs_2381 = {}
        # Getting the type of 'process' (line 625)
        process_2379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 17), 'process', False)
        # Obtaining the member 'communicate' of a type (line 625)
        communicate_2380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 17), process_2379, 'communicate')
        # Calling communicate(args, kwargs) (line 625)
        communicate_call_result_2382 = invoke(stypy.reporting.localization.Localization(__file__, 625, 17), communicate_2380, *[], **kwargs_2381)
        
        # Assigning a type to the variable 'call_assignment_1308' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'call_assignment_1308', communicate_call_result_2382)
        
        # Assigning a Call to a Name (line 625):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_2385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 8), 'int')
        # Processing the call keyword arguments
        kwargs_2386 = {}
        # Getting the type of 'call_assignment_1308' (line 625)
        call_assignment_1308_2383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'call_assignment_1308', False)
        # Obtaining the member '__getitem__' of a type (line 625)
        getitem___2384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 8), call_assignment_1308_2383, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_2387 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___2384, *[int_2385], **kwargs_2386)
        
        # Assigning a type to the variable 'call_assignment_1309' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'call_assignment_1309', getitem___call_result_2387)
        
        # Assigning a Name to a Name (line 625):
        # Getting the type of 'call_assignment_1309' (line 625)
        call_assignment_1309_2388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'call_assignment_1309')
        # Assigning a type to the variable '_' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), '_', call_assignment_1309_2388)
        
        # Assigning a Call to a Name (line 625):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_2391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 8), 'int')
        # Processing the call keyword arguments
        kwargs_2392 = {}
        # Getting the type of 'call_assignment_1308' (line 625)
        call_assignment_1308_2389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'call_assignment_1308', False)
        # Obtaining the member '__getitem__' of a type (line 625)
        getitem___2390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 8), call_assignment_1308_2389, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_2393 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___2390, *[int_2391], **kwargs_2392)
        
        # Assigning a type to the variable 'call_assignment_1310' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'call_assignment_1310', getitem___call_result_2393)
        
        # Assigning a Name to a Name (line 625):
        # Getting the type of 'call_assignment_1310' (line 625)
        call_assignment_1310_2394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'call_assignment_1310')
        # Assigning a type to the variable 'err' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 11), 'err', call_assignment_1310_2394)
        
        
        unicode_2395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 11), 'unicode', u'Libav')
        
        # Call to decode(...): (line 628)
        # Processing the call keyword arguments (line 628)
        kwargs_2398 = {}
        # Getting the type of 'err' (line 628)
        err_2396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 22), 'err', False)
        # Obtaining the member 'decode' of a type (line 628)
        decode_2397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 22), err_2396, 'decode')
        # Calling decode(args, kwargs) (line 628)
        decode_call_result_2399 = invoke(stypy.reporting.localization.Localization(__file__, 628, 22), decode_2397, *[], **kwargs_2398)
        
        # Applying the binary operator 'in' (line 628)
        result_contains_2400 = python_operator(stypy.reporting.localization.Localization(__file__, 628, 11), 'in', unicode_2395, decode_call_result_2399)
        
        # Testing the type of an if condition (line 628)
        if_condition_2401 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 628, 8), result_contains_2400)
        # Assigning a type to the variable 'if_condition_2401' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 8), 'if_condition_2401', if_condition_2401)
        # SSA begins for if statement (line 628)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'False' (line 629)
        False_2402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 12), 'stypy_return_type', False_2402)
        # SSA join for if statement (line 628)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'True' (line 630)
        True_2403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 8), 'stypy_return_type', True_2403)
        
        # ################# End of '_handle_subprocess(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_handle_subprocess' in the type store
        # Getting the type of 'stypy_return_type' (line 623)
        stypy_return_type_2404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2404)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_handle_subprocess'
        return stypy_return_type_2404


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 593, 0, False)
        # Assigning a type to the variable 'self' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FFMpegBase.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'FFMpegBase' (line 593)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 0), 'FFMpegBase', FFMpegBase)

# Assigning a Str to a Name (line 600):
unicode_2405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 600, 15), 'unicode', u'animation.ffmpeg_path')
# Getting the type of 'FFMpegBase'
FFMpegBase_2406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FFMpegBase')
# Setting the type of the member 'exec_key' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FFMpegBase_2406, 'exec_key', unicode_2405)

# Assigning a Str to a Name (line 601):
unicode_2407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 15), 'unicode', u'animation.ffmpeg_args')
# Getting the type of 'FFMpegBase'
FFMpegBase_2408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FFMpegBase')
# Setting the type of the member 'args_key' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FFMpegBase_2408, 'args_key', unicode_2407)
# Declaration of the 'FFMpegWriter' class
# Getting the type of 'FFMpegBase' (line 635)
FFMpegBase_2409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 19), 'FFMpegBase')
# Getting the type of 'MovieWriter' (line 635)
MovieWriter_2410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 31), 'MovieWriter')

class FFMpegWriter(FFMpegBase_2409, MovieWriter_2410, ):
    unicode_2411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, (-1)), 'unicode', u'Pipe-based ffmpeg writer.\n\n    Frames are streamed directly to ffmpeg via a pipe and written in a single\n    pass.\n    ')

    @norecursion
    def _args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_args'
        module_type_store = module_type_store.open_function_context('_args', 641, 4, False)
        # Assigning a type to the variable 'self' (line 642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FFMpegWriter._args.__dict__.__setitem__('stypy_localization', localization)
        FFMpegWriter._args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FFMpegWriter._args.__dict__.__setitem__('stypy_type_store', module_type_store)
        FFMpegWriter._args.__dict__.__setitem__('stypy_function_name', 'FFMpegWriter._args')
        FFMpegWriter._args.__dict__.__setitem__('stypy_param_names_list', [])
        FFMpegWriter._args.__dict__.__setitem__('stypy_varargs_param_name', None)
        FFMpegWriter._args.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FFMpegWriter._args.__dict__.__setitem__('stypy_call_defaults', defaults)
        FFMpegWriter._args.__dict__.__setitem__('stypy_call_varargs', varargs)
        FFMpegWriter._args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FFMpegWriter._args.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FFMpegWriter._args', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_args', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_args(...)' code ##################

        
        # Assigning a List to a Name (line 644):
        
        # Assigning a List to a Name (line 644):
        
        # Obtaining an instance of the builtin type 'list' (line 644)
        list_2412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 644)
        # Adding element type (line 644)
        
        # Call to bin_path(...): (line 644)
        # Processing the call keyword arguments (line 644)
        kwargs_2415 = {}
        # Getting the type of 'self' (line 644)
        self_2413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 16), 'self', False)
        # Obtaining the member 'bin_path' of a type (line 644)
        bin_path_2414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 16), self_2413, 'bin_path')
        # Calling bin_path(args, kwargs) (line 644)
        bin_path_call_result_2416 = invoke(stypy.reporting.localization.Localization(__file__, 644, 16), bin_path_2414, *[], **kwargs_2415)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 15), list_2412, bin_path_call_result_2416)
        # Adding element type (line 644)
        unicode_2417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 33), 'unicode', u'-f')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 15), list_2412, unicode_2417)
        # Adding element type (line 644)
        unicode_2418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 39), 'unicode', u'rawvideo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 15), list_2412, unicode_2418)
        # Adding element type (line 644)
        unicode_2419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 51), 'unicode', u'-vcodec')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 15), list_2412, unicode_2419)
        # Adding element type (line 644)
        unicode_2420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 62), 'unicode', u'rawvideo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 15), list_2412, unicode_2420)
        # Adding element type (line 644)
        unicode_2421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, 16), 'unicode', u'-s')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 15), list_2412, unicode_2421)
        # Adding element type (line 644)
        unicode_2422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, 22), 'unicode', u'%dx%d')
        # Getting the type of 'self' (line 645)
        self_2423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 32), 'self')
        # Obtaining the member 'frame_size' of a type (line 645)
        frame_size_2424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 32), self_2423, 'frame_size')
        # Applying the binary operator '%' (line 645)
        result_mod_2425 = python_operator(stypy.reporting.localization.Localization(__file__, 645, 22), '%', unicode_2422, frame_size_2424)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 15), list_2412, result_mod_2425)
        # Adding element type (line 644)
        unicode_2426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, 49), 'unicode', u'-pix_fmt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 15), list_2412, unicode_2426)
        # Adding element type (line 644)
        # Getting the type of 'self' (line 645)
        self_2427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 61), 'self')
        # Obtaining the member 'frame_format' of a type (line 645)
        frame_format_2428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 61), self_2427, 'frame_format')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 15), list_2412, frame_format_2428)
        # Adding element type (line 644)
        unicode_2429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 646, 16), 'unicode', u'-r')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 15), list_2412, unicode_2429)
        # Adding element type (line 644)
        
        # Call to str(...): (line 646)
        # Processing the call arguments (line 646)
        # Getting the type of 'self' (line 646)
        self_2431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 26), 'self', False)
        # Obtaining the member 'fps' of a type (line 646)
        fps_2432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 26), self_2431, 'fps')
        # Processing the call keyword arguments (line 646)
        kwargs_2433 = {}
        # Getting the type of 'str' (line 646)
        str_2430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 22), 'str', False)
        # Calling str(args, kwargs) (line 646)
        str_call_result_2434 = invoke(stypy.reporting.localization.Localization(__file__, 646, 22), str_2430, *[fps_2432], **kwargs_2433)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 15), list_2412, str_call_result_2434)
        
        # Assigning a type to the variable 'args' (line 644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 8), 'args', list_2412)
        
        
        
        # Call to ge(...): (line 648)
        # Processing the call arguments (line 648)
        unicode_2437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 26), 'unicode', u'debug')
        # Processing the call keyword arguments (line 648)
        kwargs_2438 = {}
        # Getting the type of 'verbose' (line 648)
        verbose_2435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 15), 'verbose', False)
        # Obtaining the member 'ge' of a type (line 648)
        ge_2436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 15), verbose_2435, 'ge')
        # Calling ge(args, kwargs) (line 648)
        ge_call_result_2439 = invoke(stypy.reporting.localization.Localization(__file__, 648, 15), ge_2436, *[unicode_2437], **kwargs_2438)
        
        # Applying the 'not' unary operator (line 648)
        result_not__2440 = python_operator(stypy.reporting.localization.Localization(__file__, 648, 11), 'not', ge_call_result_2439)
        
        # Testing the type of an if condition (line 648)
        if_condition_2441 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 648, 8), result_not__2440)
        # Assigning a type to the variable 'if_condition_2441' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'if_condition_2441', if_condition_2441)
        # SSA begins for if statement (line 648)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'args' (line 649)
        args_2442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 12), 'args')
        
        # Obtaining an instance of the builtin type 'list' (line 649)
        list_2443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 649, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 649)
        # Adding element type (line 649)
        unicode_2444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 649, 21), 'unicode', u'-loglevel')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 649, 20), list_2443, unicode_2444)
        # Adding element type (line 649)
        unicode_2445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 649, 34), 'unicode', u'quiet')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 649, 20), list_2443, unicode_2445)
        
        # Applying the binary operator '+=' (line 649)
        result_iadd_2446 = python_operator(stypy.reporting.localization.Localization(__file__, 649, 12), '+=', args_2442, list_2443)
        # Assigning a type to the variable 'args' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 12), 'args', result_iadd_2446)
        
        # SSA join for if statement (line 648)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'args' (line 650)
        args_2447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'args')
        
        # Obtaining an instance of the builtin type 'list' (line 650)
        list_2448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 650)
        # Adding element type (line 650)
        unicode_2449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 17), 'unicode', u'-i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 650, 16), list_2448, unicode_2449)
        # Adding element type (line 650)
        unicode_2450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 23), 'unicode', u'pipe:')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 650, 16), list_2448, unicode_2450)
        
        # Getting the type of 'self' (line 650)
        self_2451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 34), 'self')
        # Obtaining the member 'output_args' of a type (line 650)
        output_args_2452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 34), self_2451, 'output_args')
        # Applying the binary operator '+' (line 650)
        result_add_2453 = python_operator(stypy.reporting.localization.Localization(__file__, 650, 16), '+', list_2448, output_args_2452)
        
        # Applying the binary operator '+=' (line 650)
        result_iadd_2454 = python_operator(stypy.reporting.localization.Localization(__file__, 650, 8), '+=', args_2447, result_add_2453)
        # Assigning a type to the variable 'args' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'args', result_iadd_2454)
        
        # Getting the type of 'args' (line 651)
        args_2455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 15), 'args')
        # Assigning a type to the variable 'stypy_return_type' (line 651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 651, 8), 'stypy_return_type', args_2455)
        
        # ################# End of '_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_args' in the type store
        # Getting the type of 'stypy_return_type' (line 641)
        stypy_return_type_2456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2456)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_args'
        return stypy_return_type_2456


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 634, 0, False)
        # Assigning a type to the variable 'self' (line 635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FFMpegWriter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'FFMpegWriter' (line 634)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 0), 'FFMpegWriter', FFMpegWriter)
# Declaration of the 'FFMpegFileWriter' class
# Getting the type of 'FFMpegBase' (line 656)
FFMpegBase_2457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 23), 'FFMpegBase')
# Getting the type of 'FileMovieWriter' (line 656)
FileMovieWriter_2458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 35), 'FileMovieWriter')

class FFMpegFileWriter(FFMpegBase_2457, FileMovieWriter_2458, ):
    unicode_2459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 662, (-1)), 'unicode', u'File-based ffmpeg writer.\n\n    Frames are written to temporary files on disk and then stitched\n    together at the end.\n\n    ')
    
    # Assigning a List to a Name (line 663):

    @norecursion
    def _args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_args'
        module_type_store = module_type_store.open_function_context('_args', 666, 4, False)
        # Assigning a type to the variable 'self' (line 667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FFMpegFileWriter._args.__dict__.__setitem__('stypy_localization', localization)
        FFMpegFileWriter._args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FFMpegFileWriter._args.__dict__.__setitem__('stypy_type_store', module_type_store)
        FFMpegFileWriter._args.__dict__.__setitem__('stypy_function_name', 'FFMpegFileWriter._args')
        FFMpegFileWriter._args.__dict__.__setitem__('stypy_param_names_list', [])
        FFMpegFileWriter._args.__dict__.__setitem__('stypy_varargs_param_name', None)
        FFMpegFileWriter._args.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FFMpegFileWriter._args.__dict__.__setitem__('stypy_call_defaults', defaults)
        FFMpegFileWriter._args.__dict__.__setitem__('stypy_call_varargs', varargs)
        FFMpegFileWriter._args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FFMpegFileWriter._args.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FFMpegFileWriter._args', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_args', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_args(...)' code ##################

        
        # Obtaining an instance of the builtin type 'list' (line 669)
        list_2460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 669, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 669)
        # Adding element type (line 669)
        
        # Call to bin_path(...): (line 669)
        # Processing the call keyword arguments (line 669)
        kwargs_2463 = {}
        # Getting the type of 'self' (line 669)
        self_2461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 16), 'self', False)
        # Obtaining the member 'bin_path' of a type (line 669)
        bin_path_2462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 16), self_2461, 'bin_path')
        # Calling bin_path(args, kwargs) (line 669)
        bin_path_call_result_2464 = invoke(stypy.reporting.localization.Localization(__file__, 669, 16), bin_path_2462, *[], **kwargs_2463)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 669, 15), list_2460, bin_path_call_result_2464)
        # Adding element type (line 669)
        unicode_2465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 669, 33), 'unicode', u'-r')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 669, 15), list_2460, unicode_2465)
        # Adding element type (line 669)
        
        # Call to str(...): (line 669)
        # Processing the call arguments (line 669)
        # Getting the type of 'self' (line 669)
        self_2467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 43), 'self', False)
        # Obtaining the member 'fps' of a type (line 669)
        fps_2468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 43), self_2467, 'fps')
        # Processing the call keyword arguments (line 669)
        kwargs_2469 = {}
        # Getting the type of 'str' (line 669)
        str_2466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 39), 'str', False)
        # Calling str(args, kwargs) (line 669)
        str_call_result_2470 = invoke(stypy.reporting.localization.Localization(__file__, 669, 39), str_2466, *[fps_2468], **kwargs_2469)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 669, 15), list_2460, str_call_result_2470)
        # Adding element type (line 669)
        unicode_2471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 16), 'unicode', u'-i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 669, 15), list_2460, unicode_2471)
        # Adding element type (line 669)
        
        # Call to _base_temp_name(...): (line 670)
        # Processing the call keyword arguments (line 670)
        kwargs_2474 = {}
        # Getting the type of 'self' (line 670)
        self_2472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 22), 'self', False)
        # Obtaining the member '_base_temp_name' of a type (line 670)
        _base_temp_name_2473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 22), self_2472, '_base_temp_name')
        # Calling _base_temp_name(args, kwargs) (line 670)
        _base_temp_name_call_result_2475 = invoke(stypy.reporting.localization.Localization(__file__, 670, 22), _base_temp_name_2473, *[], **kwargs_2474)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 669, 15), list_2460, _base_temp_name_call_result_2475)
        # Adding element type (line 669)
        unicode_2476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 671, 16), 'unicode', u'-vframes')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 669, 15), list_2460, unicode_2476)
        # Adding element type (line 669)
        
        # Call to str(...): (line 671)
        # Processing the call arguments (line 671)
        # Getting the type of 'self' (line 671)
        self_2478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 32), 'self', False)
        # Obtaining the member '_frame_counter' of a type (line 671)
        _frame_counter_2479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 32), self_2478, '_frame_counter')
        # Processing the call keyword arguments (line 671)
        kwargs_2480 = {}
        # Getting the type of 'str' (line 671)
        str_2477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 28), 'str', False)
        # Calling str(args, kwargs) (line 671)
        str_call_result_2481 = invoke(stypy.reporting.localization.Localization(__file__, 671, 28), str_2477, *[_frame_counter_2479], **kwargs_2480)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 669, 15), list_2460, str_call_result_2481)
        
        # Getting the type of 'self' (line 671)
        self_2482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 56), 'self')
        # Obtaining the member 'output_args' of a type (line 671)
        output_args_2483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 56), self_2482, 'output_args')
        # Applying the binary operator '+' (line 669)
        result_add_2484 = python_operator(stypy.reporting.localization.Localization(__file__, 669, 15), '+', list_2460, output_args_2483)
        
        # Assigning a type to the variable 'stypy_return_type' (line 669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 8), 'stypy_return_type', result_add_2484)
        
        # ################# End of '_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_args' in the type store
        # Getting the type of 'stypy_return_type' (line 666)
        stypy_return_type_2485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2485)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_args'
        return stypy_return_type_2485


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 655, 0, False)
        # Assigning a type to the variable 'self' (line 656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FFMpegFileWriter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'FFMpegFileWriter' (line 655)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 0), 'FFMpegFileWriter', FFMpegFileWriter)

# Assigning a List to a Name (line 663):

# Obtaining an instance of the builtin type 'list' (line 663)
list_2486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 24), 'list')
# Adding type elements to the builtin type 'list' instance (line 663)
# Adding element type (line 663)
unicode_2487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 25), 'unicode', u'png')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 663, 24), list_2486, unicode_2487)
# Adding element type (line 663)
unicode_2488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 32), 'unicode', u'jpeg')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 663, 24), list_2486, unicode_2488)
# Adding element type (line 663)
unicode_2489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 40), 'unicode', u'ppm')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 663, 24), list_2486, unicode_2489)
# Adding element type (line 663)
unicode_2490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 47), 'unicode', u'tiff')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 663, 24), list_2486, unicode_2490)
# Adding element type (line 663)
unicode_2491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 55), 'unicode', u'sgi')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 663, 24), list_2486, unicode_2491)
# Adding element type (line 663)
unicode_2492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 62), 'unicode', u'bmp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 663, 24), list_2486, unicode_2492)
# Adding element type (line 663)
unicode_2493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 25), 'unicode', u'pbm')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 663, 24), list_2486, unicode_2493)
# Adding element type (line 663)
unicode_2494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 32), 'unicode', u'raw')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 663, 24), list_2486, unicode_2494)
# Adding element type (line 663)
unicode_2495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 39), 'unicode', u'rgba')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 663, 24), list_2486, unicode_2495)

# Getting the type of 'FFMpegFileWriter'
FFMpegFileWriter_2496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FFMpegFileWriter')
# Setting the type of the member 'supported_formats' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FFMpegFileWriter_2496, 'supported_formats', list_2486)
# Declaration of the 'AVConvBase' class
# Getting the type of 'FFMpegBase' (line 676)
FFMpegBase_2497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 17), 'FFMpegBase')

class AVConvBase(FFMpegBase_2497, ):
    unicode_2498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 681, (-1)), 'unicode', u'Mixin class for avconv output.\n\n    To be useful this must be multiply-inherited from with a\n    `MovieWriterBase` sub-class.\n    ')
    
    # Assigning a Str to a Name (line 683):
    
    # Assigning a Str to a Name (line 684):

    @norecursion
    def _handle_subprocess(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_handle_subprocess'
        module_type_store = module_type_store.open_function_context('_handle_subprocess', 687, 4, False)
        # Assigning a type to the variable 'self' (line 688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AVConvBase._handle_subprocess.__dict__.__setitem__('stypy_localization', localization)
        AVConvBase._handle_subprocess.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AVConvBase._handle_subprocess.__dict__.__setitem__('stypy_type_store', module_type_store)
        AVConvBase._handle_subprocess.__dict__.__setitem__('stypy_function_name', 'AVConvBase._handle_subprocess')
        AVConvBase._handle_subprocess.__dict__.__setitem__('stypy_param_names_list', ['process'])
        AVConvBase._handle_subprocess.__dict__.__setitem__('stypy_varargs_param_name', None)
        AVConvBase._handle_subprocess.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AVConvBase._handle_subprocess.__dict__.__setitem__('stypy_call_defaults', defaults)
        AVConvBase._handle_subprocess.__dict__.__setitem__('stypy_call_varargs', varargs)
        AVConvBase._handle_subprocess.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AVConvBase._handle_subprocess.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AVConvBase._handle_subprocess', ['process'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_handle_subprocess', localization, ['process'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_handle_subprocess(...)' code ##################

        
        # Call to _handle_subprocess(...): (line 689)
        # Processing the call arguments (line 689)
        # Getting the type of 'process' (line 689)
        process_2501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 46), 'process', False)
        # Processing the call keyword arguments (line 689)
        kwargs_2502 = {}
        # Getting the type of 'MovieWriter' (line 689)
        MovieWriter_2499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 15), 'MovieWriter', False)
        # Obtaining the member '_handle_subprocess' of a type (line 689)
        _handle_subprocess_2500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 15), MovieWriter_2499, '_handle_subprocess')
        # Calling _handle_subprocess(args, kwargs) (line 689)
        _handle_subprocess_call_result_2503 = invoke(stypy.reporting.localization.Localization(__file__, 689, 15), _handle_subprocess_2500, *[process_2501], **kwargs_2502)
        
        # Assigning a type to the variable 'stypy_return_type' (line 689)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 689, 8), 'stypy_return_type', _handle_subprocess_call_result_2503)
        
        # ################# End of '_handle_subprocess(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_handle_subprocess' in the type store
        # Getting the type of 'stypy_return_type' (line 687)
        stypy_return_type_2504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2504)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_handle_subprocess'
        return stypy_return_type_2504


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 676, 0, False)
        # Assigning a type to the variable 'self' (line 677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AVConvBase.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'AVConvBase' (line 676)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 676, 0), 'AVConvBase', AVConvBase)

# Assigning a Str to a Name (line 683):
unicode_2505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 683, 15), 'unicode', u'animation.avconv_path')
# Getting the type of 'AVConvBase'
AVConvBase_2506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'AVConvBase')
# Setting the type of the member 'exec_key' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), AVConvBase_2506, 'exec_key', unicode_2505)

# Assigning a Str to a Name (line 684):
unicode_2507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 684, 15), 'unicode', u'animation.avconv_args')
# Getting the type of 'AVConvBase'
AVConvBase_2508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'AVConvBase')
# Setting the type of the member 'args_key' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), AVConvBase_2508, 'args_key', unicode_2507)
# Declaration of the 'AVConvWriter' class
# Getting the type of 'AVConvBase' (line 694)
AVConvBase_2509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 19), 'AVConvBase')
# Getting the type of 'FFMpegWriter' (line 694)
FFMpegWriter_2510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 31), 'FFMpegWriter')

class AVConvWriter(AVConvBase_2509, FFMpegWriter_2510, ):
    unicode_2511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, (-1)), 'unicode', u'Pipe-based avconv writer.\n\n    Frames are streamed directly to avconv via a pipe and written in a single\n    pass.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 693, 0, False)
        # Assigning a type to the variable 'self' (line 694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AVConvWriter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'AVConvWriter' (line 693)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 693, 0), 'AVConvWriter', AVConvWriter)
# Declaration of the 'AVConvFileWriter' class
# Getting the type of 'AVConvBase' (line 704)
AVConvBase_2512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 23), 'AVConvBase')
# Getting the type of 'FFMpegFileWriter' (line 704)
FFMpegFileWriter_2513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 35), 'FFMpegFileWriter')

class AVConvFileWriter(AVConvBase_2512, FFMpegFileWriter_2513, ):
    unicode_2514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, (-1)), 'unicode', u'File-based avconv writer.\n\n    Frames are written to temporary files on disk and then stitched\n    together at the end.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 703, 0, False)
        # Assigning a type to the variable 'self' (line 704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AVConvFileWriter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'AVConvFileWriter' (line 703)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 0), 'AVConvFileWriter', AVConvFileWriter)
# Declaration of the 'MencoderBase' class

class MencoderBase(object, ):
    
    # Assigning a Str to a Name (line 716):
    
    # Assigning a Str to a Name (line 717):
    
    # Assigning a List to a Name (line 721):

    @norecursion
    def _remap_metadata(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_remap_metadata'
        module_type_store = module_type_store.open_function_context('_remap_metadata', 726, 4, False)
        # Assigning a type to the variable 'self' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MencoderBase._remap_metadata.__dict__.__setitem__('stypy_localization', localization)
        MencoderBase._remap_metadata.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MencoderBase._remap_metadata.__dict__.__setitem__('stypy_type_store', module_type_store)
        MencoderBase._remap_metadata.__dict__.__setitem__('stypy_function_name', 'MencoderBase._remap_metadata')
        MencoderBase._remap_metadata.__dict__.__setitem__('stypy_param_names_list', [])
        MencoderBase._remap_metadata.__dict__.__setitem__('stypy_varargs_param_name', None)
        MencoderBase._remap_metadata.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MencoderBase._remap_metadata.__dict__.__setitem__('stypy_call_defaults', defaults)
        MencoderBase._remap_metadata.__dict__.__setitem__('stypy_call_varargs', varargs)
        MencoderBase._remap_metadata.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MencoderBase._remap_metadata.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MencoderBase._remap_metadata', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_remap_metadata', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_remap_metadata(...)' code ##################

        
        
        unicode_2515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 11), 'unicode', u'title')
        # Getting the type of 'self' (line 727)
        self_2516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 22), 'self')
        # Obtaining the member 'metadata' of a type (line 727)
        metadata_2517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 22), self_2516, 'metadata')
        # Applying the binary operator 'in' (line 727)
        result_contains_2518 = python_operator(stypy.reporting.localization.Localization(__file__, 727, 11), 'in', unicode_2515, metadata_2517)
        
        # Testing the type of an if condition (line 727)
        if_condition_2519 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 727, 8), result_contains_2518)
        # Assigning a type to the variable 'if_condition_2519' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'if_condition_2519', if_condition_2519)
        # SSA begins for if statement (line 727)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Subscript (line 728):
        
        # Assigning a Subscript to a Subscript (line 728):
        
        # Obtaining the type of the subscript
        unicode_2520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 50), 'unicode', u'title')
        # Getting the type of 'self' (line 728)
        self_2521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 36), 'self')
        # Obtaining the member 'metadata' of a type (line 728)
        metadata_2522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 36), self_2521, 'metadata')
        # Obtaining the member '__getitem__' of a type (line 728)
        getitem___2523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 36), metadata_2522, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 728)
        subscript_call_result_2524 = invoke(stypy.reporting.localization.Localization(__file__, 728, 36), getitem___2523, unicode_2520)
        
        # Getting the type of 'self' (line 728)
        self_2525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'self')
        # Obtaining the member 'metadata' of a type (line 728)
        metadata_2526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 12), self_2525, 'metadata')
        unicode_2527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 26), 'unicode', u'name')
        # Storing an element on a container (line 728)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 728, 12), metadata_2526, (unicode_2527, subscript_call_result_2524))
        # SSA join for if statement (line 727)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_remap_metadata(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_remap_metadata' in the type store
        # Getting the type of 'stypy_return_type' (line 726)
        stypy_return_type_2528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2528)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_remap_metadata'
        return stypy_return_type_2528


    @norecursion
    def output_args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'output_args'
        module_type_store = module_type_store.open_function_context('output_args', 730, 4, False)
        # Assigning a type to the variable 'self' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MencoderBase.output_args.__dict__.__setitem__('stypy_localization', localization)
        MencoderBase.output_args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MencoderBase.output_args.__dict__.__setitem__('stypy_type_store', module_type_store)
        MencoderBase.output_args.__dict__.__setitem__('stypy_function_name', 'MencoderBase.output_args')
        MencoderBase.output_args.__dict__.__setitem__('stypy_param_names_list', [])
        MencoderBase.output_args.__dict__.__setitem__('stypy_varargs_param_name', None)
        MencoderBase.output_args.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MencoderBase.output_args.__dict__.__setitem__('stypy_call_defaults', defaults)
        MencoderBase.output_args.__dict__.__setitem__('stypy_call_varargs', varargs)
        MencoderBase.output_args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MencoderBase.output_args.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MencoderBase.output_args', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'output_args', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'output_args(...)' code ##################

        
        # Call to _remap_metadata(...): (line 732)
        # Processing the call keyword arguments (line 732)
        kwargs_2531 = {}
        # Getting the type of 'self' (line 732)
        self_2529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 8), 'self', False)
        # Obtaining the member '_remap_metadata' of a type (line 732)
        _remap_metadata_2530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 8), self_2529, '_remap_metadata')
        # Calling _remap_metadata(args, kwargs) (line 732)
        _remap_metadata_call_result_2532 = invoke(stypy.reporting.localization.Localization(__file__, 732, 8), _remap_metadata_2530, *[], **kwargs_2531)
        
        
        # Assigning a Dict to a Name (line 733):
        
        # Assigning a Dict to a Name (line 733):
        
        # Obtaining an instance of the builtin type 'dict' (line 733)
        dict_2533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 733, 19), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 733)
        # Adding element type (key, value) (line 733)
        unicode_2534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 733, 20), 'unicode', u'vcodec')
        # Getting the type of 'self' (line 733)
        self_2535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 30), 'self')
        # Obtaining the member 'codec' of a type (line 733)
        codec_2536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 30), self_2535, 'codec')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 733, 19), dict_2533, (unicode_2534, codec_2536))
        
        # Assigning a type to the variable 'lavcopts' (line 733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 8), 'lavcopts', dict_2533)
        
        
        # Getting the type of 'self' (line 734)
        self_2537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 11), 'self')
        # Obtaining the member 'bitrate' of a type (line 734)
        bitrate_2538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 11), self_2537, 'bitrate')
        int_2539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 26), 'int')
        # Applying the binary operator '>' (line 734)
        result_gt_2540 = python_operator(stypy.reporting.localization.Localization(__file__, 734, 11), '>', bitrate_2538, int_2539)
        
        # Testing the type of an if condition (line 734)
        if_condition_2541 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 734, 8), result_gt_2540)
        # Assigning a type to the variable 'if_condition_2541' (line 734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'if_condition_2541', if_condition_2541)
        # SSA begins for if statement (line 734)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update(...): (line 735)
        # Processing the call keyword arguments (line 735)
        # Getting the type of 'self' (line 735)
        self_2544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 37), 'self', False)
        # Obtaining the member 'bitrate' of a type (line 735)
        bitrate_2545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 37), self_2544, 'bitrate')
        keyword_2546 = bitrate_2545
        kwargs_2547 = {'vbitrate': keyword_2546}
        # Getting the type of 'lavcopts' (line 735)
        lavcopts_2542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 12), 'lavcopts', False)
        # Obtaining the member 'update' of a type (line 735)
        update_2543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 12), lavcopts_2542, 'update')
        # Calling update(args, kwargs) (line 735)
        update_call_result_2548 = invoke(stypy.reporting.localization.Localization(__file__, 735, 12), update_2543, *[], **kwargs_2547)
        
        # SSA join for if statement (line 734)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Name (line 736):
        
        # Assigning a List to a Name (line 736):
        
        # Obtaining an instance of the builtin type 'list' (line 736)
        list_2549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 736, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 736)
        # Adding element type (line 736)
        unicode_2550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 736, 16), 'unicode', u'-o')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 736, 15), list_2549, unicode_2550)
        # Adding element type (line 736)
        # Getting the type of 'self' (line 736)
        self_2551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 22), 'self')
        # Obtaining the member 'outfile' of a type (line 736)
        outfile_2552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 22), self_2551, 'outfile')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 736, 15), list_2549, outfile_2552)
        # Adding element type (line 736)
        unicode_2553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 736, 36), 'unicode', u'-ovc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 736, 15), list_2549, unicode_2553)
        # Adding element type (line 736)
        unicode_2554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 736, 44), 'unicode', u'lavc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 736, 15), list_2549, unicode_2554)
        # Adding element type (line 736)
        unicode_2555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 736, 52), 'unicode', u'-lavcopts')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 736, 15), list_2549, unicode_2555)
        # Adding element type (line 736)
        
        # Call to join(...): (line 737)
        # Processing the call arguments (line 737)
        
        # Call to starmap(...): (line 737)
        # Processing the call arguments (line 737)
        unicode_2560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 737, 43), 'unicode', u'{0}={1}')
        # Obtaining the member 'format' of a type (line 737)
        format_2561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 43), unicode_2560, 'format')
        
        # Call to items(...): (line 738)
        # Processing the call keyword arguments (line 738)
        kwargs_2564 = {}
        # Getting the type of 'lavcopts' (line 738)
        lavcopts_2562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 43), 'lavcopts', False)
        # Obtaining the member 'items' of a type (line 738)
        items_2563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 43), lavcopts_2562, 'items')
        # Calling items(args, kwargs) (line 738)
        items_call_result_2565 = invoke(stypy.reporting.localization.Localization(__file__, 738, 43), items_2563, *[], **kwargs_2564)
        
        # Processing the call keyword arguments (line 737)
        kwargs_2566 = {}
        # Getting the type of 'itertools' (line 737)
        itertools_2558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 25), 'itertools', False)
        # Obtaining the member 'starmap' of a type (line 737)
        starmap_2559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 25), itertools_2558, 'starmap')
        # Calling starmap(args, kwargs) (line 737)
        starmap_call_result_2567 = invoke(stypy.reporting.localization.Localization(__file__, 737, 25), starmap_2559, *[format_2561, items_call_result_2565], **kwargs_2566)
        
        # Processing the call keyword arguments (line 737)
        kwargs_2568 = {}
        unicode_2556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 737, 16), 'unicode', u':')
        # Obtaining the member 'join' of a type (line 737)
        join_2557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 16), unicode_2556, 'join')
        # Calling join(args, kwargs) (line 737)
        join_call_result_2569 = invoke(stypy.reporting.localization.Localization(__file__, 737, 16), join_2557, *[starmap_call_result_2567], **kwargs_2568)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 736, 15), list_2549, join_call_result_2569)
        
        # Assigning a type to the variable 'args' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 8), 'args', list_2549)
        
        # Getting the type of 'self' (line 739)
        self_2570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 11), 'self')
        # Obtaining the member 'extra_args' of a type (line 739)
        extra_args_2571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 11), self_2570, 'extra_args')
        # Testing the type of an if condition (line 739)
        if_condition_2572 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 739, 8), extra_args_2571)
        # Assigning a type to the variable 'if_condition_2572' (line 739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'if_condition_2572', if_condition_2572)
        # SSA begins for if statement (line 739)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 740)
        # Processing the call arguments (line 740)
        # Getting the type of 'self' (line 740)
        self_2575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 24), 'self', False)
        # Obtaining the member 'extra_args' of a type (line 740)
        extra_args_2576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 24), self_2575, 'extra_args')
        # Processing the call keyword arguments (line 740)
        kwargs_2577 = {}
        # Getting the type of 'args' (line 740)
        args_2573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 12), 'args', False)
        # Obtaining the member 'extend' of a type (line 740)
        extend_2574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 12), args_2573, 'extend')
        # Calling extend(args, kwargs) (line 740)
        extend_call_result_2578 = invoke(stypy.reporting.localization.Localization(__file__, 740, 12), extend_2574, *[extra_args_2576], **kwargs_2577)
        
        # SSA join for if statement (line 739)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 741)
        self_2579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 11), 'self')
        # Obtaining the member 'metadata' of a type (line 741)
        metadata_2580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 11), self_2579, 'metadata')
        # Testing the type of an if condition (line 741)
        if_condition_2581 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 741, 8), metadata_2580)
        # Assigning a type to the variable 'if_condition_2581' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 8), 'if_condition_2581', if_condition_2581)
        # SSA begins for if statement (line 741)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 742)
        # Processing the call arguments (line 742)
        
        # Obtaining an instance of the builtin type 'list' (line 742)
        list_2584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 742)
        # Adding element type (line 742)
        unicode_2585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 25), 'unicode', u'-info')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 24), list_2584, unicode_2585)
        # Adding element type (line 742)
        
        # Call to join(...): (line 742)
        # Processing the call arguments (line 742)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 742, 43, True)
        # Calculating comprehension expression
        
        # Call to iteritems(...): (line 743)
        # Processing the call arguments (line 743)
        # Getting the type of 'self' (line 743)
        self_2599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 51), 'self', False)
        # Obtaining the member 'metadata' of a type (line 743)
        metadata_2600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 51), self_2599, 'metadata')
        # Processing the call keyword arguments (line 743)
        kwargs_2601 = {}
        # Getting the type of 'six' (line 743)
        six_2597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 37), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 743)
        iteritems_2598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 37), six_2597, 'iteritems')
        # Calling iteritems(args, kwargs) (line 743)
        iteritems_call_result_2602 = invoke(stypy.reporting.localization.Localization(__file__, 743, 37), iteritems_2598, *[metadata_2600], **kwargs_2601)
        
        comprehension_2603 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 43), iteritems_call_result_2602)
        # Assigning a type to the variable 'k' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 43), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 43), comprehension_2603))
        # Assigning a type to the variable 'v' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 43), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 43), comprehension_2603))
        
        # Getting the type of 'k' (line 744)
        k_2593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 28), 'k', False)
        # Getting the type of 'self' (line 744)
        self_2594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 33), 'self', False)
        # Obtaining the member 'allowed_metadata' of a type (line 744)
        allowed_metadata_2595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 33), self_2594, 'allowed_metadata')
        # Applying the binary operator 'in' (line 744)
        result_contains_2596 = python_operator(stypy.reporting.localization.Localization(__file__, 744, 28), 'in', k_2593, allowed_metadata_2595)
        
        unicode_2588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 43), 'unicode', u'%s=%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 742)
        tuple_2589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 54), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 742)
        # Adding element type (line 742)
        # Getting the type of 'k' (line 742)
        k_2590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 54), 'k', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 54), tuple_2589, k_2590)
        # Adding element type (line 742)
        # Getting the type of 'v' (line 742)
        v_2591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 57), 'v', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 54), tuple_2589, v_2591)
        
        # Applying the binary operator '%' (line 742)
        result_mod_2592 = python_operator(stypy.reporting.localization.Localization(__file__, 742, 43), '%', unicode_2588, tuple_2589)
        
        list_2604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 43), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 43), list_2604, result_mod_2592)
        # Processing the call keyword arguments (line 742)
        kwargs_2605 = {}
        unicode_2586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 34), 'unicode', u':')
        # Obtaining the member 'join' of a type (line 742)
        join_2587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 34), unicode_2586, 'join')
        # Calling join(args, kwargs) (line 742)
        join_call_result_2606 = invoke(stypy.reporting.localization.Localization(__file__, 742, 34), join_2587, *[list_2604], **kwargs_2605)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 24), list_2584, join_call_result_2606)
        
        # Processing the call keyword arguments (line 742)
        kwargs_2607 = {}
        # Getting the type of 'args' (line 742)
        args_2582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 12), 'args', False)
        # Obtaining the member 'extend' of a type (line 742)
        extend_2583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 12), args_2582, 'extend')
        # Calling extend(args, kwargs) (line 742)
        extend_call_result_2608 = invoke(stypy.reporting.localization.Localization(__file__, 742, 12), extend_2583, *[list_2584], **kwargs_2607)
        
        # SSA join for if statement (line 741)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'args' (line 745)
        args_2609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 15), 'args')
        # Assigning a type to the variable 'stypy_return_type' (line 745)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 745, 8), 'stypy_return_type', args_2609)
        
        # ################# End of 'output_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'output_args' in the type store
        # Getting the type of 'stypy_return_type' (line 730)
        stypy_return_type_2610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2610)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'output_args'
        return stypy_return_type_2610


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 715, 0, False)
        # Assigning a type to the variable 'self' (line 716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MencoderBase.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'MencoderBase' (line 715)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 0), 'MencoderBase', MencoderBase)

# Assigning a Str to a Name (line 716):
unicode_2611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 716, 15), 'unicode', u'animation.mencoder_path')
# Getting the type of 'MencoderBase'
MencoderBase_2612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MencoderBase')
# Setting the type of the member 'exec_key' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MencoderBase_2612, 'exec_key', unicode_2611)

# Assigning a Str to a Name (line 717):
unicode_2613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 717, 15), 'unicode', u'animation.mencoder_args')
# Getting the type of 'MencoderBase'
MencoderBase_2614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MencoderBase')
# Setting the type of the member 'args_key' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MencoderBase_2614, 'args_key', unicode_2613)

# Assigning a List to a Name (line 721):

# Obtaining an instance of the builtin type 'list' (line 721)
list_2615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 23), 'list')
# Adding type elements to the builtin type 'list' instance (line 721)
# Adding element type (line 721)
unicode_2616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 24), 'unicode', u'name')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 23), list_2615, unicode_2616)
# Adding element type (line 721)
unicode_2617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 32), 'unicode', u'artist')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 23), list_2615, unicode_2617)
# Adding element type (line 721)
unicode_2618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 42), 'unicode', u'genre')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 23), list_2615, unicode_2618)
# Adding element type (line 721)
unicode_2619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 51), 'unicode', u'subject')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 23), list_2615, unicode_2619)
# Adding element type (line 721)
unicode_2620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 62), 'unicode', u'copyright')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 23), list_2615, unicode_2620)
# Adding element type (line 721)
unicode_2621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 24), 'unicode', u'srcform')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 23), list_2615, unicode_2621)
# Adding element type (line 721)
unicode_2622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 35), 'unicode', u'comment')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 23), list_2615, unicode_2622)

# Getting the type of 'MencoderBase'
MencoderBase_2623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MencoderBase')
# Setting the type of the member 'allowed_metadata' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MencoderBase_2623, 'allowed_metadata', list_2615)

# Assigning a Str to a Name (line 749):

# Assigning a Str to a Name (line 749):
unicode_2624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 749, 16), 'unicode', u'Support for mencoder is only partially functional, and will be removed entirely in 2.2. Please use ffmpeg instead.')
# Assigning a type to the variable 'mencoder_dep' (line 749)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 0), 'mencoder_dep', unicode_2624)
# Declaration of the 'MencoderWriter' class
# Getting the type of 'MovieWriter' (line 755)
MovieWriter_2625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 21), 'MovieWriter')
# Getting the type of 'MencoderBase' (line 755)
MencoderBase_2626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 34), 'MencoderBase')

class MencoderWriter(MovieWriter_2625, MencoderBase_2626, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 757, 4, False)
        # Assigning a type to the variable 'self' (line 758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 758, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MencoderWriter.__init__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to rc_context(...): (line 759)
        # Processing the call keyword arguments (line 759)
        
        # Obtaining an instance of the builtin type 'dict' (line 759)
        dict_2628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 27), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 759)
        # Adding element type (key, value) (line 759)
        unicode_2629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 28), 'unicode', u'animation.codec')
        unicode_2630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 47), 'unicode', u'mpeg4')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 759, 27), dict_2628, (unicode_2629, unicode_2630))
        
        keyword_2631 = dict_2628
        kwargs_2632 = {'rc': keyword_2631}
        # Getting the type of 'rc_context' (line 759)
        rc_context_2627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 13), 'rc_context', False)
        # Calling rc_context(args, kwargs) (line 759)
        rc_context_call_result_2633 = invoke(stypy.reporting.localization.Localization(__file__, 759, 13), rc_context_2627, *[], **kwargs_2632)
        
        with_2634 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 759, 13), rc_context_call_result_2633, 'with parameter', '__enter__', '__exit__')

        if with_2634:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 759)
            enter___2635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 13), rc_context_call_result_2633, '__enter__')
            with_enter_2636 = invoke(stypy.reporting.localization.Localization(__file__, 759, 13), enter___2635)
            
            # Call to __init__(...): (line 760)
            # Getting the type of 'args' (line 760)
            args_2643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 50), 'args', False)
            # Processing the call keyword arguments (line 760)
            # Getting the type of 'kwargs' (line 760)
            kwargs_2644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 58), 'kwargs', False)
            kwargs_2645 = {'kwargs_2644': kwargs_2644}
            
            # Call to super(...): (line 760)
            # Processing the call arguments (line 760)
            # Getting the type of 'MencoderWriter' (line 760)
            MencoderWriter_2638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 18), 'MencoderWriter', False)
            # Getting the type of 'self' (line 760)
            self_2639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 34), 'self', False)
            # Processing the call keyword arguments (line 760)
            kwargs_2640 = {}
            # Getting the type of 'super' (line 760)
            super_2637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 12), 'super', False)
            # Calling super(args, kwargs) (line 760)
            super_call_result_2641 = invoke(stypy.reporting.localization.Localization(__file__, 760, 12), super_2637, *[MencoderWriter_2638, self_2639], **kwargs_2640)
            
            # Obtaining the member '__init__' of a type (line 760)
            init___2642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 12), super_call_result_2641, '__init__')
            # Calling __init__(args, kwargs) (line 760)
            init___call_result_2646 = invoke(stypy.reporting.localization.Localization(__file__, 760, 12), init___2642, *[args_2643], **kwargs_2645)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 759)
            exit___2647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 13), rc_context_call_result_2633, '__exit__')
            with_exit_2648 = invoke(stypy.reporting.localization.Localization(__file__, 759, 13), exit___2647, None, None, None)

        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_args'
        module_type_store = module_type_store.open_function_context('_args', 762, 4, False)
        # Assigning a type to the variable 'self' (line 763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MencoderWriter._args.__dict__.__setitem__('stypy_localization', localization)
        MencoderWriter._args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MencoderWriter._args.__dict__.__setitem__('stypy_type_store', module_type_store)
        MencoderWriter._args.__dict__.__setitem__('stypy_function_name', 'MencoderWriter._args')
        MencoderWriter._args.__dict__.__setitem__('stypy_param_names_list', [])
        MencoderWriter._args.__dict__.__setitem__('stypy_varargs_param_name', None)
        MencoderWriter._args.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MencoderWriter._args.__dict__.__setitem__('stypy_call_defaults', defaults)
        MencoderWriter._args.__dict__.__setitem__('stypy_call_varargs', varargs)
        MencoderWriter._args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MencoderWriter._args.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MencoderWriter._args', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_args', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_args(...)' code ##################

        
        # Obtaining an instance of the builtin type 'list' (line 765)
        list_2649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 765)
        # Adding element type (line 765)
        
        # Call to bin_path(...): (line 765)
        # Processing the call keyword arguments (line 765)
        kwargs_2652 = {}
        # Getting the type of 'self' (line 765)
        self_2650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 16), 'self', False)
        # Obtaining the member 'bin_path' of a type (line 765)
        bin_path_2651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 16), self_2650, 'bin_path')
        # Calling bin_path(args, kwargs) (line 765)
        bin_path_call_result_2653 = invoke(stypy.reporting.localization.Localization(__file__, 765, 16), bin_path_2651, *[], **kwargs_2652)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 765, 15), list_2649, bin_path_call_result_2653)
        # Adding element type (line 765)
        unicode_2654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 33), 'unicode', u'-')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 765, 15), list_2649, unicode_2654)
        # Adding element type (line 765)
        unicode_2655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 38), 'unicode', u'-demuxer')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 765, 15), list_2649, unicode_2655)
        # Adding element type (line 765)
        unicode_2656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 50), 'unicode', u'rawvideo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 765, 15), list_2649, unicode_2656)
        # Adding element type (line 765)
        unicode_2657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 62), 'unicode', u'-rawvideo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 765, 15), list_2649, unicode_2657)
        # Adding element type (line 765)
        unicode_2658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 17), 'unicode', u'w=%i:h=%i:')
        # Getting the type of 'self' (line 766)
        self_2659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 32), 'self')
        # Obtaining the member 'frame_size' of a type (line 766)
        frame_size_2660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 32), self_2659, 'frame_size')
        # Applying the binary operator '%' (line 766)
        result_mod_2661 = python_operator(stypy.reporting.localization.Localization(__file__, 766, 17), '%', unicode_2658, frame_size_2660)
        
        unicode_2662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 16), 'unicode', u'fps=%i:format=%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 767)
        tuple_2663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 767)
        # Adding element type (line 767)
        # Getting the type of 'self' (line 767)
        self_2664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 38), 'self')
        # Obtaining the member 'fps' of a type (line 767)
        fps_2665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 767, 38), self_2664, 'fps')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 767, 38), tuple_2663, fps_2665)
        # Adding element type (line 767)
        # Getting the type of 'self' (line 768)
        self_2666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 38), 'self')
        # Obtaining the member 'frame_format' of a type (line 768)
        frame_format_2667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 38), self_2666, 'frame_format')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 767, 38), tuple_2663, frame_format_2667)
        
        # Applying the binary operator '%' (line 767)
        result_mod_2668 = python_operator(stypy.reporting.localization.Localization(__file__, 767, 16), '%', unicode_2662, tuple_2663)
        
        # Applying the binary operator '+' (line 766)
        result_add_2669 = python_operator(stypy.reporting.localization.Localization(__file__, 766, 17), '+', result_mod_2661, result_mod_2668)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 765, 15), list_2649, result_add_2669)
        
        # Getting the type of 'self' (line 768)
        self_2670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 61), 'self')
        # Obtaining the member 'output_args' of a type (line 768)
        output_args_2671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 61), self_2670, 'output_args')
        # Applying the binary operator '+' (line 765)
        result_add_2672 = python_operator(stypy.reporting.localization.Localization(__file__, 765, 15), '+', list_2649, output_args_2671)
        
        # Assigning a type to the variable 'stypy_return_type' (line 765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 8), 'stypy_return_type', result_add_2672)
        
        # ################# End of '_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_args' in the type store
        # Getting the type of 'stypy_return_type' (line 762)
        stypy_return_type_2673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2673)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_args'
        return stypy_return_type_2673


# Assigning a type to the variable 'MencoderWriter' (line 754)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 0), 'MencoderWriter', MencoderWriter)
# Declaration of the 'MencoderFileWriter' class
# Getting the type of 'FileMovieWriter' (line 773)
FileMovieWriter_2674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 25), 'FileMovieWriter')
# Getting the type of 'MencoderBase' (line 773)
MencoderBase_2675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 42), 'MencoderBase')

class MencoderFileWriter(FileMovieWriter_2674, MencoderBase_2675, ):
    
    # Assigning a List to a Name (line 774):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 776, 4, False)
        # Assigning a type to the variable 'self' (line 777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MencoderFileWriter.__init__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to rc_context(...): (line 778)
        # Processing the call keyword arguments (line 778)
        
        # Obtaining an instance of the builtin type 'dict' (line 778)
        dict_2677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, 27), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 778)
        # Adding element type (key, value) (line 778)
        unicode_2678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, 28), 'unicode', u'animation.codec')
        unicode_2679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, 47), 'unicode', u'mpeg4')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 778, 27), dict_2677, (unicode_2678, unicode_2679))
        
        keyword_2680 = dict_2677
        kwargs_2681 = {'rc': keyword_2680}
        # Getting the type of 'rc_context' (line 778)
        rc_context_2676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 13), 'rc_context', False)
        # Calling rc_context(args, kwargs) (line 778)
        rc_context_call_result_2682 = invoke(stypy.reporting.localization.Localization(__file__, 778, 13), rc_context_2676, *[], **kwargs_2681)
        
        with_2683 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 778, 13), rc_context_call_result_2682, 'with parameter', '__enter__', '__exit__')

        if with_2683:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 778)
            enter___2684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 13), rc_context_call_result_2682, '__enter__')
            with_enter_2685 = invoke(stypy.reporting.localization.Localization(__file__, 778, 13), enter___2684)
            
            # Call to __init__(...): (line 779)
            # Getting the type of 'args' (line 779)
            args_2692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 54), 'args', False)
            # Processing the call keyword arguments (line 779)
            # Getting the type of 'kwargs' (line 779)
            kwargs_2693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 62), 'kwargs', False)
            kwargs_2694 = {'kwargs_2693': kwargs_2693}
            
            # Call to super(...): (line 779)
            # Processing the call arguments (line 779)
            # Getting the type of 'MencoderFileWriter' (line 779)
            MencoderFileWriter_2687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 18), 'MencoderFileWriter', False)
            # Getting the type of 'self' (line 779)
            self_2688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 38), 'self', False)
            # Processing the call keyword arguments (line 779)
            kwargs_2689 = {}
            # Getting the type of 'super' (line 779)
            super_2686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 12), 'super', False)
            # Calling super(args, kwargs) (line 779)
            super_call_result_2690 = invoke(stypy.reporting.localization.Localization(__file__, 779, 12), super_2686, *[MencoderFileWriter_2687, self_2688], **kwargs_2689)
            
            # Obtaining the member '__init__' of a type (line 779)
            init___2691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 12), super_call_result_2690, '__init__')
            # Calling __init__(args, kwargs) (line 779)
            init___call_result_2695 = invoke(stypy.reporting.localization.Localization(__file__, 779, 12), init___2691, *[args_2692], **kwargs_2694)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 778)
            exit___2696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 13), rc_context_call_result_2682, '__exit__')
            with_exit_2697 = invoke(stypy.reporting.localization.Localization(__file__, 778, 13), exit___2696, None, None, None)

        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_args'
        module_type_store = module_type_store.open_function_context('_args', 781, 4, False)
        # Assigning a type to the variable 'self' (line 782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MencoderFileWriter._args.__dict__.__setitem__('stypy_localization', localization)
        MencoderFileWriter._args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MencoderFileWriter._args.__dict__.__setitem__('stypy_type_store', module_type_store)
        MencoderFileWriter._args.__dict__.__setitem__('stypy_function_name', 'MencoderFileWriter._args')
        MencoderFileWriter._args.__dict__.__setitem__('stypy_param_names_list', [])
        MencoderFileWriter._args.__dict__.__setitem__('stypy_varargs_param_name', None)
        MencoderFileWriter._args.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MencoderFileWriter._args.__dict__.__setitem__('stypy_call_defaults', defaults)
        MencoderFileWriter._args.__dict__.__setitem__('stypy_call_varargs', varargs)
        MencoderFileWriter._args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MencoderFileWriter._args.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MencoderFileWriter._args', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_args', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_args(...)' code ##################

        
        # Obtaining an instance of the builtin type 'list' (line 784)
        list_2698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 784, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 784)
        # Adding element type (line 784)
        
        # Call to bin_path(...): (line 784)
        # Processing the call keyword arguments (line 784)
        kwargs_2701 = {}
        # Getting the type of 'self' (line 784)
        self_2699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 16), 'self', False)
        # Obtaining the member 'bin_path' of a type (line 784)
        bin_path_2700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 16), self_2699, 'bin_path')
        # Calling bin_path(args, kwargs) (line 784)
        bin_path_call_result_2702 = invoke(stypy.reporting.localization.Localization(__file__, 784, 16), bin_path_2700, *[], **kwargs_2701)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 784, 15), list_2698, bin_path_call_result_2702)
        # Adding element type (line 784)
        unicode_2703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 16), 'unicode', u'mf://%s*.%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 785)
        tuple_2704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 785)
        # Adding element type (line 785)
        # Getting the type of 'self' (line 785)
        self_2705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 33), 'self')
        # Obtaining the member 'temp_prefix' of a type (line 785)
        temp_prefix_2706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 33), self_2705, 'temp_prefix')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 785, 33), tuple_2704, temp_prefix_2706)
        # Adding element type (line 785)
        # Getting the type of 'self' (line 785)
        self_2707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 51), 'self')
        # Obtaining the member 'frame_format' of a type (line 785)
        frame_format_2708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 51), self_2707, 'frame_format')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 785, 33), tuple_2704, frame_format_2708)
        
        # Applying the binary operator '%' (line 785)
        result_mod_2709 = python_operator(stypy.reporting.localization.Localization(__file__, 785, 16), '%', unicode_2703, tuple_2704)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 784, 15), list_2698, result_mod_2709)
        # Adding element type (line 784)
        unicode_2710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 16), 'unicode', u'-frames')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 784, 15), list_2698, unicode_2710)
        # Adding element type (line 784)
        
        # Call to str(...): (line 786)
        # Processing the call arguments (line 786)
        # Getting the type of 'self' (line 786)
        self_2712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 31), 'self', False)
        # Obtaining the member '_frame_counter' of a type (line 786)
        _frame_counter_2713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 31), self_2712, '_frame_counter')
        # Processing the call keyword arguments (line 786)
        kwargs_2714 = {}
        # Getting the type of 'str' (line 786)
        str_2711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 27), 'str', False)
        # Calling str(args, kwargs) (line 786)
        str_call_result_2715 = invoke(stypy.reporting.localization.Localization(__file__, 786, 27), str_2711, *[_frame_counter_2713], **kwargs_2714)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 784, 15), list_2698, str_call_result_2715)
        # Adding element type (line 784)
        unicode_2716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 53), 'unicode', u'-mf')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 784, 15), list_2698, unicode_2716)
        # Adding element type (line 784)
        unicode_2717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 787, 16), 'unicode', u'type=%s:fps=%d')
        
        # Obtaining an instance of the builtin type 'tuple' (line 787)
        tuple_2718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 787, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 787)
        # Adding element type (line 787)
        # Getting the type of 'self' (line 787)
        self_2719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 36), 'self')
        # Obtaining the member 'frame_format' of a type (line 787)
        frame_format_2720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 36), self_2719, 'frame_format')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 787, 36), tuple_2718, frame_format_2720)
        # Adding element type (line 787)
        # Getting the type of 'self' (line 788)
        self_2721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 36), 'self')
        # Obtaining the member 'fps' of a type (line 788)
        fps_2722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 36), self_2721, 'fps')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 787, 36), tuple_2718, fps_2722)
        
        # Applying the binary operator '%' (line 787)
        result_mod_2723 = python_operator(stypy.reporting.localization.Localization(__file__, 787, 16), '%', unicode_2717, tuple_2718)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 784, 15), list_2698, result_mod_2723)
        
        # Getting the type of 'self' (line 788)
        self_2724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 49), 'self')
        # Obtaining the member 'output_args' of a type (line 788)
        output_args_2725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 49), self_2724, 'output_args')
        # Applying the binary operator '+' (line 784)
        result_add_2726 = python_operator(stypy.reporting.localization.Localization(__file__, 784, 15), '+', list_2698, output_args_2725)
        
        # Assigning a type to the variable 'stypy_return_type' (line 784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 784, 8), 'stypy_return_type', result_add_2726)
        
        # ################# End of '_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_args' in the type store
        # Getting the type of 'stypy_return_type' (line 781)
        stypy_return_type_2727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2727)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_args'
        return stypy_return_type_2727


# Assigning a type to the variable 'MencoderFileWriter' (line 772)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 0), 'MencoderFileWriter', MencoderFileWriter)

# Assigning a List to a Name (line 774):

# Obtaining an instance of the builtin type 'list' (line 774)
list_2728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 24), 'list')
# Adding type elements to the builtin type 'list' instance (line 774)
# Adding element type (line 774)
unicode_2729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 25), 'unicode', u'png')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 24), list_2728, unicode_2729)
# Adding element type (line 774)
unicode_2730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 32), 'unicode', u'jpeg')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 24), list_2728, unicode_2730)
# Adding element type (line 774)
unicode_2731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 40), 'unicode', u'tga')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 24), list_2728, unicode_2731)
# Adding element type (line 774)
unicode_2732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 47), 'unicode', u'sgi')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 24), list_2728, unicode_2732)

# Getting the type of 'MencoderFileWriter'
MencoderFileWriter_2733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MencoderFileWriter')
# Setting the type of the member 'supported_formats' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MencoderFileWriter_2733, 'supported_formats', list_2728)
# Declaration of the 'ImageMagickBase' class

class ImageMagickBase(object, ):
    unicode_2734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, (-1)), 'unicode', u'Mixin class for ImageMagick output.\n\n    To be useful this must be multiply-inherited from with a\n    `MovieWriterBase` sub-class.\n    ')
    
    # Assigning a Str to a Name (line 799):
    
    # Assigning a Str to a Name (line 800):

    @norecursion
    def delay(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'delay'
        module_type_store = module_type_store.open_function_context('delay', 802, 4, False)
        # Assigning a type to the variable 'self' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ImageMagickBase.delay.__dict__.__setitem__('stypy_localization', localization)
        ImageMagickBase.delay.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ImageMagickBase.delay.__dict__.__setitem__('stypy_type_store', module_type_store)
        ImageMagickBase.delay.__dict__.__setitem__('stypy_function_name', 'ImageMagickBase.delay')
        ImageMagickBase.delay.__dict__.__setitem__('stypy_param_names_list', [])
        ImageMagickBase.delay.__dict__.__setitem__('stypy_varargs_param_name', None)
        ImageMagickBase.delay.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ImageMagickBase.delay.__dict__.__setitem__('stypy_call_defaults', defaults)
        ImageMagickBase.delay.__dict__.__setitem__('stypy_call_varargs', varargs)
        ImageMagickBase.delay.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ImageMagickBase.delay.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ImageMagickBase.delay', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'delay', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'delay(...)' code ##################

        float_2735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 15), 'float')
        # Getting the type of 'self' (line 804)
        self_2736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 22), 'self')
        # Obtaining the member 'fps' of a type (line 804)
        fps_2737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 22), self_2736, 'fps')
        # Applying the binary operator 'div' (line 804)
        result_div_2738 = python_operator(stypy.reporting.localization.Localization(__file__, 804, 15), 'div', float_2735, fps_2737)
        
        # Assigning a type to the variable 'stypy_return_type' (line 804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 8), 'stypy_return_type', result_div_2738)
        
        # ################# End of 'delay(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'delay' in the type store
        # Getting the type of 'stypy_return_type' (line 802)
        stypy_return_type_2739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2739)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'delay'
        return stypy_return_type_2739


    @norecursion
    def output_args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'output_args'
        module_type_store = module_type_store.open_function_context('output_args', 806, 4, False)
        # Assigning a type to the variable 'self' (line 807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ImageMagickBase.output_args.__dict__.__setitem__('stypy_localization', localization)
        ImageMagickBase.output_args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ImageMagickBase.output_args.__dict__.__setitem__('stypy_type_store', module_type_store)
        ImageMagickBase.output_args.__dict__.__setitem__('stypy_function_name', 'ImageMagickBase.output_args')
        ImageMagickBase.output_args.__dict__.__setitem__('stypy_param_names_list', [])
        ImageMagickBase.output_args.__dict__.__setitem__('stypy_varargs_param_name', None)
        ImageMagickBase.output_args.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ImageMagickBase.output_args.__dict__.__setitem__('stypy_call_defaults', defaults)
        ImageMagickBase.output_args.__dict__.__setitem__('stypy_call_varargs', varargs)
        ImageMagickBase.output_args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ImageMagickBase.output_args.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ImageMagickBase.output_args', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'output_args', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'output_args(...)' code ##################

        
        # Obtaining an instance of the builtin type 'list' (line 808)
        list_2740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 808)
        # Adding element type (line 808)
        # Getting the type of 'self' (line 808)
        self_2741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 16), 'self')
        # Obtaining the member 'outfile' of a type (line 808)
        outfile_2742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 16), self_2741, 'outfile')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 15), list_2740, outfile_2742)
        
        # Assigning a type to the variable 'stypy_return_type' (line 808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 808, 8), 'stypy_return_type', list_2740)
        
        # ################# End of 'output_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'output_args' in the type store
        # Getting the type of 'stypy_return_type' (line 806)
        stypy_return_type_2743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2743)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'output_args'
        return stypy_return_type_2743


    @norecursion
    def _init_from_registry(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_init_from_registry'
        module_type_store = module_type_store.open_function_context('_init_from_registry', 810, 4, False)
        # Assigning a type to the variable 'self' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ImageMagickBase._init_from_registry.__dict__.__setitem__('stypy_localization', localization)
        ImageMagickBase._init_from_registry.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ImageMagickBase._init_from_registry.__dict__.__setitem__('stypy_type_store', module_type_store)
        ImageMagickBase._init_from_registry.__dict__.__setitem__('stypy_function_name', 'ImageMagickBase._init_from_registry')
        ImageMagickBase._init_from_registry.__dict__.__setitem__('stypy_param_names_list', [])
        ImageMagickBase._init_from_registry.__dict__.__setitem__('stypy_varargs_param_name', None)
        ImageMagickBase._init_from_registry.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ImageMagickBase._init_from_registry.__dict__.__setitem__('stypy_call_defaults', defaults)
        ImageMagickBase._init_from_registry.__dict__.__setitem__('stypy_call_varargs', varargs)
        ImageMagickBase._init_from_registry.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ImageMagickBase._init_from_registry.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ImageMagickBase._init_from_registry', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_init_from_registry', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_init_from_registry(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'sys' (line 812)
        sys_2744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 812)
        platform_2745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 11), sys_2744, 'platform')
        unicode_2746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 27), 'unicode', u'win32')
        # Applying the binary operator '!=' (line 812)
        result_ne_2747 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 11), '!=', platform_2745, unicode_2746)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'cls' (line 812)
        cls_2748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 47), 'cls')
        # Obtaining the member 'exec_key' of a type (line 812)
        exec_key_2749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 47), cls_2748, 'exec_key')
        # Getting the type of 'rcParams' (line 812)
        rcParams_2750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 38), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 812)
        getitem___2751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 38), rcParams_2750, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 812)
        subscript_call_result_2752 = invoke(stypy.reporting.localization.Localization(__file__, 812, 38), getitem___2751, exec_key_2749)
        
        unicode_2753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 64), 'unicode', u'convert')
        # Applying the binary operator '!=' (line 812)
        result_ne_2754 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 38), '!=', subscript_call_result_2752, unicode_2753)
        
        # Applying the binary operator 'or' (line 812)
        result_or_keyword_2755 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 11), 'or', result_ne_2747, result_ne_2754)
        
        # Testing the type of an if condition (line 812)
        if_condition_2756 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 812, 8), result_or_keyword_2755)
        # Assigning a type to the variable 'if_condition_2756' (line 812)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 812, 8), 'if_condition_2756', if_condition_2756)
        # SSA begins for if statement (line 812)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 813, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 812)
        module_type_store = module_type_store.join_ssa_context()
        
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 814, 8))
        
        # 'from six.moves import winreg' statement (line 814)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_2757 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 814, 8), 'six.moves')

        if (type(import_2757) is not StypyTypeError):

            if (import_2757 != 'pyd_module'):
                __import__(import_2757)
                sys_modules_2758 = sys.modules[import_2757]
                import_from_module(stypy.reporting.localization.Localization(__file__, 814, 8), 'six.moves', sys_modules_2758.module_type_store, module_type_store, ['winreg'])
                nest_module(stypy.reporting.localization.Localization(__file__, 814, 8), __file__, sys_modules_2758, sys_modules_2758.module_type_store, module_type_store)
            else:
                from six.moves import winreg

                import_from_module(stypy.reporting.localization.Localization(__file__, 814, 8), 'six.moves', None, module_type_store, ['winreg'], [winreg])

        else:
            # Assigning a type to the variable 'six.moves' (line 814)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 8), 'six.moves', import_2757)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 815)
        tuple_2759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 815)
        # Adding element type (line 815)
        int_2760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 815, 21), tuple_2759, int_2760)
        # Adding element type (line 815)
        # Getting the type of 'winreg' (line 815)
        winreg_2761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 24), 'winreg')
        # Obtaining the member 'KEY_WOW64_32KEY' of a type (line 815)
        KEY_WOW64_32KEY_2762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 24), winreg_2761, 'KEY_WOW64_32KEY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 815, 21), tuple_2759, KEY_WOW64_32KEY_2762)
        # Adding element type (line 815)
        # Getting the type of 'winreg' (line 815)
        winreg_2763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 48), 'winreg')
        # Obtaining the member 'KEY_WOW64_64KEY' of a type (line 815)
        KEY_WOW64_64KEY_2764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 48), winreg_2763, 'KEY_WOW64_64KEY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 815, 21), tuple_2759, KEY_WOW64_64KEY_2764)
        
        # Testing the type of a for loop iterable (line 815)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 815, 8), tuple_2759)
        # Getting the type of the for loop variable (line 815)
        for_loop_var_2765 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 815, 8), tuple_2759)
        # Assigning a type to the variable 'flag' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 8), 'flag', for_loop_var_2765)
        # SSA begins for a for statement (line 815)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # SSA begins for try-except statement (line 816)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 817):
        
        # Assigning a Call to a Name (line 817):
        
        # Call to OpenKeyEx(...): (line 817)
        # Processing the call arguments (line 817)
        # Getting the type of 'winreg' (line 817)
        winreg_2768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 40), 'winreg', False)
        # Obtaining the member 'HKEY_LOCAL_MACHINE' of a type (line 817)
        HKEY_LOCAL_MACHINE_2769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 40), winreg_2768, 'HKEY_LOCAL_MACHINE')
        unicode_2770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 40), 'unicode', u'Software\\Imagemagick\\Current')
        int_2771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, 40), 'int')
        # Getting the type of 'winreg' (line 819)
        winreg_2772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 43), 'winreg', False)
        # Obtaining the member 'KEY_QUERY_VALUE' of a type (line 819)
        KEY_QUERY_VALUE_2773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 43), winreg_2772, 'KEY_QUERY_VALUE')
        # Getting the type of 'flag' (line 819)
        flag_2774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 68), 'flag', False)
        # Applying the binary operator '|' (line 819)
        result_or__2775 = python_operator(stypy.reporting.localization.Localization(__file__, 819, 43), '|', KEY_QUERY_VALUE_2773, flag_2774)
        
        # Processing the call keyword arguments (line 817)
        kwargs_2776 = {}
        # Getting the type of 'winreg' (line 817)
        winreg_2766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 23), 'winreg', False)
        # Obtaining the member 'OpenKeyEx' of a type (line 817)
        OpenKeyEx_2767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 23), winreg_2766, 'OpenKeyEx')
        # Calling OpenKeyEx(args, kwargs) (line 817)
        OpenKeyEx_call_result_2777 = invoke(stypy.reporting.localization.Localization(__file__, 817, 23), OpenKeyEx_2767, *[HKEY_LOCAL_MACHINE_2769, unicode_2770, int_2771, result_or__2775], **kwargs_2776)
        
        # Assigning a type to the variable 'hkey' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 16), 'hkey', OpenKeyEx_call_result_2777)
        
        # Assigning a Subscript to a Name (line 820):
        
        # Assigning a Subscript to a Name (line 820):
        
        # Obtaining the type of the subscript
        int_2778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 63), 'int')
        
        # Call to QueryValueEx(...): (line 820)
        # Processing the call arguments (line 820)
        # Getting the type of 'hkey' (line 820)
        hkey_2781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 46), 'hkey', False)
        unicode_2782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 52), 'unicode', u'BinPath')
        # Processing the call keyword arguments (line 820)
        kwargs_2783 = {}
        # Getting the type of 'winreg' (line 820)
        winreg_2779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 26), 'winreg', False)
        # Obtaining the member 'QueryValueEx' of a type (line 820)
        QueryValueEx_2780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 26), winreg_2779, 'QueryValueEx')
        # Calling QueryValueEx(args, kwargs) (line 820)
        QueryValueEx_call_result_2784 = invoke(stypy.reporting.localization.Localization(__file__, 820, 26), QueryValueEx_2780, *[hkey_2781, unicode_2782], **kwargs_2783)
        
        # Obtaining the member '__getitem__' of a type (line 820)
        getitem___2785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 26), QueryValueEx_call_result_2784, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 820)
        subscript_call_result_2786 = invoke(stypy.reporting.localization.Localization(__file__, 820, 26), getitem___2785, int_2778)
        
        # Assigning a type to the variable 'binpath' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 16), 'binpath', subscript_call_result_2786)
        
        # Call to CloseKey(...): (line 821)
        # Processing the call arguments (line 821)
        # Getting the type of 'hkey' (line 821)
        hkey_2789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 32), 'hkey', False)
        # Processing the call keyword arguments (line 821)
        kwargs_2790 = {}
        # Getting the type of 'winreg' (line 821)
        winreg_2787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 16), 'winreg', False)
        # Obtaining the member 'CloseKey' of a type (line 821)
        CloseKey_2788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 821, 16), winreg_2787, 'CloseKey')
        # Calling CloseKey(args, kwargs) (line 821)
        CloseKey_call_result_2791 = invoke(stypy.reporting.localization.Localization(__file__, 821, 16), CloseKey_2788, *[hkey_2789], **kwargs_2790)
        
        
        # Getting the type of 'binpath' (line 822)
        binpath_2792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 16), 'binpath')
        unicode_2793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 27), 'unicode', u'\\convert.exe')
        # Applying the binary operator '+=' (line 822)
        result_iadd_2794 = python_operator(stypy.reporting.localization.Localization(__file__, 822, 16), '+=', binpath_2792, unicode_2793)
        # Assigning a type to the variable 'binpath' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 16), 'binpath', result_iadd_2794)
        
        # SSA branch for the except part of a try statement (line 816)
        # SSA branch for the except 'Exception' branch of a try statement (line 816)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Str to a Name (line 825):
        
        # Assigning a Str to a Name (line 825):
        unicode_2795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 26), 'unicode', u'')
        # Assigning a type to the variable 'binpath' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 16), 'binpath', unicode_2795)
        # SSA join for try-except statement (line 816)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Name to a Subscript (line 826):
        # Getting the type of 'binpath' (line 826)
        binpath_2796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 65), 'binpath')
        # Getting the type of 'rcParamsDefault' (line 826)
        rcParamsDefault_2797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 33), 'rcParamsDefault')
        # Getting the type of 'cls' (line 826)
        cls_2798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 49), 'cls')
        # Obtaining the member 'exec_key' of a type (line 826)
        exec_key_2799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 49), cls_2798, 'exec_key')
        # Storing an element on a container (line 826)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 33), rcParamsDefault_2797, (exec_key_2799, binpath_2796))
        
        # Assigning a Subscript to a Subscript (line 826):
        
        # Obtaining the type of the subscript
        # Getting the type of 'cls' (line 826)
        cls_2800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 49), 'cls')
        # Obtaining the member 'exec_key' of a type (line 826)
        exec_key_2801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 49), cls_2800, 'exec_key')
        # Getting the type of 'rcParamsDefault' (line 826)
        rcParamsDefault_2802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 33), 'rcParamsDefault')
        # Obtaining the member '__getitem__' of a type (line 826)
        getitem___2803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 33), rcParamsDefault_2802, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 826)
        subscript_call_result_2804 = invoke(stypy.reporting.localization.Localization(__file__, 826, 33), getitem___2803, exec_key_2801)
        
        # Getting the type of 'rcParams' (line 826)
        rcParams_2805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'rcParams')
        # Getting the type of 'cls' (line 826)
        cls_2806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 17), 'cls')
        # Obtaining the member 'exec_key' of a type (line 826)
        exec_key_2807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 17), cls_2806, 'exec_key')
        # Storing an element on a container (line 826)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 8), rcParams_2805, (exec_key_2807, subscript_call_result_2804))
        
        # ################# End of '_init_from_registry(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_init_from_registry' in the type store
        # Getting the type of 'stypy_return_type' (line 810)
        stypy_return_type_2808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2808)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_init_from_registry'
        return stypy_return_type_2808


    @norecursion
    def isAvailable(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'isAvailable'
        module_type_store = module_type_store.open_function_context('isAvailable', 828, 4, False)
        # Assigning a type to the variable 'self' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ImageMagickBase.isAvailable.__dict__.__setitem__('stypy_localization', localization)
        ImageMagickBase.isAvailable.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ImageMagickBase.isAvailable.__dict__.__setitem__('stypy_type_store', module_type_store)
        ImageMagickBase.isAvailable.__dict__.__setitem__('stypy_function_name', 'ImageMagickBase.isAvailable')
        ImageMagickBase.isAvailable.__dict__.__setitem__('stypy_param_names_list', [])
        ImageMagickBase.isAvailable.__dict__.__setitem__('stypy_varargs_param_name', None)
        ImageMagickBase.isAvailable.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ImageMagickBase.isAvailable.__dict__.__setitem__('stypy_call_defaults', defaults)
        ImageMagickBase.isAvailable.__dict__.__setitem__('stypy_call_varargs', varargs)
        ImageMagickBase.isAvailable.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ImageMagickBase.isAvailable.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ImageMagickBase.isAvailable', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'isAvailable', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'isAvailable(...)' code ##################

        unicode_2809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, (-1)), 'unicode', u'\n        Check to see if a ImageMagickWriter is actually available.\n\n        Done by first checking the windows registry (if applicable) and then\n        running the commandline tool.\n        ')
        
        # Assigning a Call to a Name (line 836):
        
        # Assigning a Call to a Name (line 836):
        
        # Call to bin_path(...): (line 836)
        # Processing the call keyword arguments (line 836)
        kwargs_2812 = {}
        # Getting the type of 'cls' (line 836)
        cls_2810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 19), 'cls', False)
        # Obtaining the member 'bin_path' of a type (line 836)
        bin_path_2811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 19), cls_2810, 'bin_path')
        # Calling bin_path(args, kwargs) (line 836)
        bin_path_call_result_2813 = invoke(stypy.reporting.localization.Localization(__file__, 836, 19), bin_path_2811, *[], **kwargs_2812)
        
        # Assigning a type to the variable 'bin_path' (line 836)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 8), 'bin_path', bin_path_call_result_2813)
        
        
        # Getting the type of 'bin_path' (line 837)
        bin_path_2814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 11), 'bin_path')
        unicode_2815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 23), 'unicode', u'convert')
        # Applying the binary operator '==' (line 837)
        result_eq_2816 = python_operator(stypy.reporting.localization.Localization(__file__, 837, 11), '==', bin_path_2814, unicode_2815)
        
        # Testing the type of an if condition (line 837)
        if_condition_2817 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 837, 8), result_eq_2816)
        # Assigning a type to the variable 'if_condition_2817' (line 837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 837, 8), 'if_condition_2817', if_condition_2817)
        # SSA begins for if statement (line 837)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _init_from_registry(...): (line 838)
        # Processing the call keyword arguments (line 838)
        kwargs_2820 = {}
        # Getting the type of 'cls' (line 838)
        cls_2818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 12), 'cls', False)
        # Obtaining the member '_init_from_registry' of a type (line 838)
        _init_from_registry_2819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 12), cls_2818, '_init_from_registry')
        # Calling _init_from_registry(args, kwargs) (line 838)
        _init_from_registry_call_result_2821 = invoke(stypy.reporting.localization.Localization(__file__, 838, 12), _init_from_registry_2819, *[], **kwargs_2820)
        
        # SSA join for if statement (line 837)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to isAvailable(...): (line 839)
        # Processing the call keyword arguments (line 839)
        kwargs_2828 = {}
        
        # Call to super(...): (line 839)
        # Processing the call arguments (line 839)
        # Getting the type of 'ImageMagickBase' (line 839)
        ImageMagickBase_2823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 21), 'ImageMagickBase', False)
        # Getting the type of 'cls' (line 839)
        cls_2824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 38), 'cls', False)
        # Processing the call keyword arguments (line 839)
        kwargs_2825 = {}
        # Getting the type of 'super' (line 839)
        super_2822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 15), 'super', False)
        # Calling super(args, kwargs) (line 839)
        super_call_result_2826 = invoke(stypy.reporting.localization.Localization(__file__, 839, 15), super_2822, *[ImageMagickBase_2823, cls_2824], **kwargs_2825)
        
        # Obtaining the member 'isAvailable' of a type (line 839)
        isAvailable_2827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 15), super_call_result_2826, 'isAvailable')
        # Calling isAvailable(args, kwargs) (line 839)
        isAvailable_call_result_2829 = invoke(stypy.reporting.localization.Localization(__file__, 839, 15), isAvailable_2827, *[], **kwargs_2828)
        
        # Assigning a type to the variable 'stypy_return_type' (line 839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 8), 'stypy_return_type', isAvailable_call_result_2829)
        
        # ################# End of 'isAvailable(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'isAvailable' in the type store
        # Getting the type of 'stypy_return_type' (line 828)
        stypy_return_type_2830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2830)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'isAvailable'
        return stypy_return_type_2830


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 792, 0, False)
        # Assigning a type to the variable 'self' (line 793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ImageMagickBase.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ImageMagickBase' (line 792)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 0), 'ImageMagickBase', ImageMagickBase)

# Assigning a Str to a Name (line 799):
unicode_2831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 15), 'unicode', u'animation.convert_path')
# Getting the type of 'ImageMagickBase'
ImageMagickBase_2832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ImageMagickBase')
# Setting the type of the member 'exec_key' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ImageMagickBase_2832, 'exec_key', unicode_2831)

# Assigning a Str to a Name (line 800):
unicode_2833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 800, 15), 'unicode', u'animation.convert_args')
# Getting the type of 'ImageMagickBase'
ImageMagickBase_2834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ImageMagickBase')
# Setting the type of the member 'args_key' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ImageMagickBase_2834, 'args_key', unicode_2833)

# Call to _init_from_registry(...): (line 841)
# Processing the call keyword arguments (line 841)
kwargs_2837 = {}
# Getting the type of 'ImageMagickBase' (line 841)
ImageMagickBase_2835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 0), 'ImageMagickBase', False)
# Obtaining the member '_init_from_registry' of a type (line 841)
_init_from_registry_2836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 0), ImageMagickBase_2835, '_init_from_registry')
# Calling _init_from_registry(args, kwargs) (line 841)
_init_from_registry_call_result_2838 = invoke(stypy.reporting.localization.Localization(__file__, 841, 0), _init_from_registry_2836, *[], **kwargs_2837)

# Declaration of the 'ImageMagickWriter' class
# Getting the type of 'ImageMagickBase' (line 849)
ImageMagickBase_2839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 24), 'ImageMagickBase')
# Getting the type of 'MovieWriter' (line 849)
MovieWriter_2840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 41), 'MovieWriter')

class ImageMagickWriter(ImageMagickBase_2839, MovieWriter_2840, ):
    unicode_2841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 855, (-1)), 'unicode', u'Pipe-based animated gif.\n\n    Frames are streamed directly to ImageMagick via a pipe and written\n    in a single pass.\n\n    ')

    @norecursion
    def _args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_args'
        module_type_store = module_type_store.open_function_context('_args', 856, 4, False)
        # Assigning a type to the variable 'self' (line 857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 857, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ImageMagickWriter._args.__dict__.__setitem__('stypy_localization', localization)
        ImageMagickWriter._args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ImageMagickWriter._args.__dict__.__setitem__('stypy_type_store', module_type_store)
        ImageMagickWriter._args.__dict__.__setitem__('stypy_function_name', 'ImageMagickWriter._args')
        ImageMagickWriter._args.__dict__.__setitem__('stypy_param_names_list', [])
        ImageMagickWriter._args.__dict__.__setitem__('stypy_varargs_param_name', None)
        ImageMagickWriter._args.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ImageMagickWriter._args.__dict__.__setitem__('stypy_call_defaults', defaults)
        ImageMagickWriter._args.__dict__.__setitem__('stypy_call_varargs', varargs)
        ImageMagickWriter._args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ImageMagickWriter._args.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ImageMagickWriter._args', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_args', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_args(...)' code ##################

        
        # Obtaining an instance of the builtin type 'list' (line 857)
        list_2842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 857, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 857)
        # Adding element type (line 857)
        
        # Call to bin_path(...): (line 857)
        # Processing the call keyword arguments (line 857)
        kwargs_2845 = {}
        # Getting the type of 'self' (line 857)
        self_2843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 17), 'self', False)
        # Obtaining the member 'bin_path' of a type (line 857)
        bin_path_2844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 857, 17), self_2843, 'bin_path')
        # Calling bin_path(args, kwargs) (line 857)
        bin_path_call_result_2846 = invoke(stypy.reporting.localization.Localization(__file__, 857, 17), bin_path_2844, *[], **kwargs_2845)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 857, 16), list_2842, bin_path_call_result_2846)
        # Adding element type (line 857)
        unicode_2847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 17), 'unicode', u'-size')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 857, 16), list_2842, unicode_2847)
        # Adding element type (line 857)
        unicode_2848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 26), 'unicode', u'%ix%i')
        # Getting the type of 'self' (line 858)
        self_2849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 36), 'self')
        # Obtaining the member 'frame_size' of a type (line 858)
        frame_size_2850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 858, 36), self_2849, 'frame_size')
        # Applying the binary operator '%' (line 858)
        result_mod_2851 = python_operator(stypy.reporting.localization.Localization(__file__, 858, 26), '%', unicode_2848, frame_size_2850)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 857, 16), list_2842, result_mod_2851)
        # Adding element type (line 857)
        unicode_2852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 53), 'unicode', u'-depth')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 857, 16), list_2842, unicode_2852)
        # Adding element type (line 857)
        unicode_2853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 63), 'unicode', u'8')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 857, 16), list_2842, unicode_2853)
        # Adding element type (line 857)
        unicode_2854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 859, 17), 'unicode', u'-delay')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 857, 16), list_2842, unicode_2854)
        # Adding element type (line 857)
        
        # Call to str(...): (line 859)
        # Processing the call arguments (line 859)
        # Getting the type of 'self' (line 859)
        self_2856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 31), 'self', False)
        # Obtaining the member 'delay' of a type (line 859)
        delay_2857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 31), self_2856, 'delay')
        # Processing the call keyword arguments (line 859)
        kwargs_2858 = {}
        # Getting the type of 'str' (line 859)
        str_2855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 27), 'str', False)
        # Calling str(args, kwargs) (line 859)
        str_call_result_2859 = invoke(stypy.reporting.localization.Localization(__file__, 859, 27), str_2855, *[delay_2857], **kwargs_2858)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 857, 16), list_2842, str_call_result_2859)
        # Adding element type (line 857)
        unicode_2860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 859, 44), 'unicode', u'-loop')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 857, 16), list_2842, unicode_2860)
        # Adding element type (line 857)
        unicode_2861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 859, 53), 'unicode', u'0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 857, 16), list_2842, unicode_2861)
        # Adding element type (line 857)
        unicode_2862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 17), 'unicode', u'%s:-')
        # Getting the type of 'self' (line 860)
        self_2863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 26), 'self')
        # Obtaining the member 'frame_format' of a type (line 860)
        frame_format_2864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 860, 26), self_2863, 'frame_format')
        # Applying the binary operator '%' (line 860)
        result_mod_2865 = python_operator(stypy.reporting.localization.Localization(__file__, 860, 17), '%', unicode_2862, frame_format_2864)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 857, 16), list_2842, result_mod_2865)
        
        # Getting the type of 'self' (line 861)
        self_2866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 18), 'self')
        # Obtaining the member 'output_args' of a type (line 861)
        output_args_2867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 18), self_2866, 'output_args')
        # Applying the binary operator '+' (line 857)
        result_add_2868 = python_operator(stypy.reporting.localization.Localization(__file__, 857, 16), '+', list_2842, output_args_2867)
        
        # Assigning a type to the variable 'stypy_return_type' (line 857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 857, 8), 'stypy_return_type', result_add_2868)
        
        # ################# End of '_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_args' in the type store
        # Getting the type of 'stypy_return_type' (line 856)
        stypy_return_type_2869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2869)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_args'
        return stypy_return_type_2869


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 848, 0, False)
        # Assigning a type to the variable 'self' (line 849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ImageMagickWriter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ImageMagickWriter' (line 848)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 0), 'ImageMagickWriter', ImageMagickWriter)
# Declaration of the 'ImageMagickFileWriter' class
# Getting the type of 'ImageMagickBase' (line 869)
ImageMagickBase_2870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 28), 'ImageMagickBase')
# Getting the type of 'FileMovieWriter' (line 869)
FileMovieWriter_2871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 45), 'FileMovieWriter')

class ImageMagickFileWriter(ImageMagickBase_2870, FileMovieWriter_2871, ):
    unicode_2872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 875, (-1)), 'unicode', u'File-based animated gif writer.\n\n    Frames are written to temporary files on disk and then stitched\n    together at the end.\n\n    ')
    
    # Assigning a List to a Name (line 877):

    @norecursion
    def _args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_args'
        module_type_store = module_type_store.open_function_context('_args', 880, 4, False)
        # Assigning a type to the variable 'self' (line 881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 881, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ImageMagickFileWriter._args.__dict__.__setitem__('stypy_localization', localization)
        ImageMagickFileWriter._args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ImageMagickFileWriter._args.__dict__.__setitem__('stypy_type_store', module_type_store)
        ImageMagickFileWriter._args.__dict__.__setitem__('stypy_function_name', 'ImageMagickFileWriter._args')
        ImageMagickFileWriter._args.__dict__.__setitem__('stypy_param_names_list', [])
        ImageMagickFileWriter._args.__dict__.__setitem__('stypy_varargs_param_name', None)
        ImageMagickFileWriter._args.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ImageMagickFileWriter._args.__dict__.__setitem__('stypy_call_defaults', defaults)
        ImageMagickFileWriter._args.__dict__.__setitem__('stypy_call_varargs', varargs)
        ImageMagickFileWriter._args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ImageMagickFileWriter._args.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ImageMagickFileWriter._args', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_args', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_args(...)' code ##################

        
        # Obtaining an instance of the builtin type 'list' (line 881)
        list_2873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 881)
        # Adding element type (line 881)
        
        # Call to bin_path(...): (line 881)
        # Processing the call keyword arguments (line 881)
        kwargs_2876 = {}
        # Getting the type of 'self' (line 881)
        self_2874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 17), 'self', False)
        # Obtaining the member 'bin_path' of a type (line 881)
        bin_path_2875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 17), self_2874, 'bin_path')
        # Calling bin_path(args, kwargs) (line 881)
        bin_path_call_result_2877 = invoke(stypy.reporting.localization.Localization(__file__, 881, 17), bin_path_2875, *[], **kwargs_2876)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 881, 16), list_2873, bin_path_call_result_2877)
        # Adding element type (line 881)
        unicode_2878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 34), 'unicode', u'-delay')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 881, 16), list_2873, unicode_2878)
        # Adding element type (line 881)
        
        # Call to str(...): (line 881)
        # Processing the call arguments (line 881)
        # Getting the type of 'self' (line 881)
        self_2880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 48), 'self', False)
        # Obtaining the member 'delay' of a type (line 881)
        delay_2881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 48), self_2880, 'delay')
        # Processing the call keyword arguments (line 881)
        kwargs_2882 = {}
        # Getting the type of 'str' (line 881)
        str_2879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 44), 'str', False)
        # Calling str(args, kwargs) (line 881)
        str_call_result_2883 = invoke(stypy.reporting.localization.Localization(__file__, 881, 44), str_2879, *[delay_2881], **kwargs_2882)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 881, 16), list_2873, str_call_result_2883)
        # Adding element type (line 881)
        unicode_2884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 61), 'unicode', u'-loop')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 881, 16), list_2873, unicode_2884)
        # Adding element type (line 881)
        unicode_2885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 70), 'unicode', u'0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 881, 16), list_2873, unicode_2885)
        # Adding element type (line 881)
        unicode_2886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 17), 'unicode', u'%s*.%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 882)
        tuple_2887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 882)
        # Adding element type (line 882)
        # Getting the type of 'self' (line 882)
        self_2888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 29), 'self')
        # Obtaining the member 'temp_prefix' of a type (line 882)
        temp_prefix_2889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 29), self_2888, 'temp_prefix')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 882, 29), tuple_2887, temp_prefix_2889)
        # Adding element type (line 882)
        # Getting the type of 'self' (line 882)
        self_2890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 47), 'self')
        # Obtaining the member 'frame_format' of a type (line 882)
        frame_format_2891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 47), self_2890, 'frame_format')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 882, 29), tuple_2887, frame_format_2891)
        
        # Applying the binary operator '%' (line 882)
        result_mod_2892 = python_operator(stypy.reporting.localization.Localization(__file__, 882, 17), '%', unicode_2886, tuple_2887)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 881, 16), list_2873, result_mod_2892)
        
        # Getting the type of 'self' (line 883)
        self_2893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 18), 'self')
        # Obtaining the member 'output_args' of a type (line 883)
        output_args_2894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 18), self_2893, 'output_args')
        # Applying the binary operator '+' (line 881)
        result_add_2895 = python_operator(stypy.reporting.localization.Localization(__file__, 881, 16), '+', list_2873, output_args_2894)
        
        # Assigning a type to the variable 'stypy_return_type' (line 881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 881, 8), 'stypy_return_type', result_add_2895)
        
        # ################# End of '_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_args' in the type store
        # Getting the type of 'stypy_return_type' (line 880)
        stypy_return_type_2896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2896)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_args'
        return stypy_return_type_2896


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 868, 0, False)
        # Assigning a type to the variable 'self' (line 869)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 869, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ImageMagickFileWriter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ImageMagickFileWriter' (line 868)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 0), 'ImageMagickFileWriter', ImageMagickFileWriter)

# Assigning a List to a Name (line 877):

# Obtaining an instance of the builtin type 'list' (line 877)
list_2897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 24), 'list')
# Adding type elements to the builtin type 'list' instance (line 877)
# Adding element type (line 877)
unicode_2898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 25), 'unicode', u'png')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 24), list_2897, unicode_2898)
# Adding element type (line 877)
unicode_2899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 32), 'unicode', u'jpeg')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 24), list_2897, unicode_2899)
# Adding element type (line 877)
unicode_2900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 40), 'unicode', u'ppm')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 24), list_2897, unicode_2900)
# Adding element type (line 877)
unicode_2901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 47), 'unicode', u'tiff')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 24), list_2897, unicode_2901)
# Adding element type (line 877)
unicode_2902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 55), 'unicode', u'sgi')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 24), list_2897, unicode_2902)
# Adding element type (line 877)
unicode_2903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 62), 'unicode', u'bmp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 24), list_2897, unicode_2903)
# Adding element type (line 877)
unicode_2904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 878, 25), 'unicode', u'pbm')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 24), list_2897, unicode_2904)
# Adding element type (line 877)
unicode_2905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 878, 32), 'unicode', u'raw')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 24), list_2897, unicode_2905)
# Adding element type (line 877)
unicode_2906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 878, 39), 'unicode', u'rgba')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 24), list_2897, unicode_2906)

# Getting the type of 'ImageMagickFileWriter'
ImageMagickFileWriter_2907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ImageMagickFileWriter')
# Setting the type of the member 'supported_formats' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ImageMagickFileWriter_2907, 'supported_formats', list_2897)

@norecursion
def _included_frames(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_included_frames'
    module_type_store = module_type_store.open_function_context('_included_frames', 888, 0, False)
    
    # Passed parameters checking function
    _included_frames.stypy_localization = localization
    _included_frames.stypy_type_of_self = None
    _included_frames.stypy_type_store = module_type_store
    _included_frames.stypy_function_name = '_included_frames'
    _included_frames.stypy_param_names_list = ['frame_list', 'frame_format']
    _included_frames.stypy_varargs_param_name = None
    _included_frames.stypy_kwargs_param_name = None
    _included_frames.stypy_call_defaults = defaults
    _included_frames.stypy_call_varargs = varargs
    _included_frames.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_included_frames', ['frame_list', 'frame_format'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_included_frames', localization, ['frame_list', 'frame_format'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_included_frames(...)' code ##################

    unicode_2908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 889, 4), 'unicode', u'frame_list should be a list of filenames')
    
    # Call to format(...): (line 890)
    # Processing the call keyword arguments (line 890)
    
    # Call to len(...): (line 890)
    # Processing the call arguments (line 890)
    # Getting the type of 'frame_list' (line 890)
    frame_list_2912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 46), 'frame_list', False)
    # Processing the call keyword arguments (line 890)
    kwargs_2913 = {}
    # Getting the type of 'len' (line 890)
    len_2911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 42), 'len', False)
    # Calling len(args, kwargs) (line 890)
    len_call_result_2914 = invoke(stypy.reporting.localization.Localization(__file__, 890, 42), len_2911, *[frame_list_2912], **kwargs_2913)
    
    keyword_2915 = len_call_result_2914
    
    # Call to dirname(...): (line 891)
    # Processing the call arguments (line 891)
    
    # Obtaining the type of the subscript
    int_2919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 891, 71), 'int')
    # Getting the type of 'frame_list' (line 891)
    frame_list_2920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 60), 'frame_list', False)
    # Obtaining the member '__getitem__' of a type (line 891)
    getitem___2921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 60), frame_list_2920, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 891)
    subscript_call_result_2922 = invoke(stypy.reporting.localization.Localization(__file__, 891, 60), getitem___2921, int_2919)
    
    # Processing the call keyword arguments (line 891)
    kwargs_2923 = {}
    # Getting the type of 'os' (line 891)
    os_2916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 44), 'os', False)
    # Obtaining the member 'path' of a type (line 891)
    path_2917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 44), os_2916, 'path')
    # Obtaining the member 'dirname' of a type (line 891)
    dirname_2918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 44), path_2917, 'dirname')
    # Calling dirname(args, kwargs) (line 891)
    dirname_call_result_2924 = invoke(stypy.reporting.localization.Localization(__file__, 891, 44), dirname_2918, *[subscript_call_result_2922], **kwargs_2923)
    
    keyword_2925 = dirname_call_result_2924
    # Getting the type of 'frame_format' (line 892)
    frame_format_2926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 47), 'frame_format', False)
    keyword_2927 = frame_format_2926
    kwargs_2928 = {'frame_format': keyword_2927, 'frame_dir': keyword_2925, 'Nframes': keyword_2915}
    # Getting the type of 'INCLUDED_FRAMES' (line 890)
    INCLUDED_FRAMES_2909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 11), 'INCLUDED_FRAMES', False)
    # Obtaining the member 'format' of a type (line 890)
    format_2910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 890, 11), INCLUDED_FRAMES_2909, 'format')
    # Calling format(args, kwargs) (line 890)
    format_call_result_2929 = invoke(stypy.reporting.localization.Localization(__file__, 890, 11), format_2910, *[], **kwargs_2928)
    
    # Assigning a type to the variable 'stypy_return_type' (line 890)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 4), 'stypy_return_type', format_call_result_2929)
    
    # ################# End of '_included_frames(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_included_frames' in the type store
    # Getting the type of 'stypy_return_type' (line 888)
    stypy_return_type_2930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_2930)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_included_frames'
    return stypy_return_type_2930

# Assigning a type to the variable '_included_frames' (line 888)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 888, 0), '_included_frames', _included_frames)

@norecursion
def _embedded_frames(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_embedded_frames'
    module_type_store = module_type_store.open_function_context('_embedded_frames', 895, 0, False)
    
    # Passed parameters checking function
    _embedded_frames.stypy_localization = localization
    _embedded_frames.stypy_type_of_self = None
    _embedded_frames.stypy_type_store = module_type_store
    _embedded_frames.stypy_function_name = '_embedded_frames'
    _embedded_frames.stypy_param_names_list = ['frame_list', 'frame_format']
    _embedded_frames.stypy_varargs_param_name = None
    _embedded_frames.stypy_kwargs_param_name = None
    _embedded_frames.stypy_call_defaults = defaults
    _embedded_frames.stypy_call_varargs = varargs
    _embedded_frames.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_embedded_frames', ['frame_list', 'frame_format'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_embedded_frames', localization, ['frame_list', 'frame_format'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_embedded_frames(...)' code ##################

    unicode_2931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 4), 'unicode', u'frame_list should be a list of base64-encoded png files')
    
    # Assigning a Str to a Name (line 897):
    
    # Assigning a Str to a Name (line 897):
    unicode_2932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 15), 'unicode', u'  frames[{0}] = "data:image/{1};base64,{2}"\n')
    # Assigning a type to the variable 'template' (line 897)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 897, 4), 'template', unicode_2932)
    
    # Assigning a Str to a Name (line 898):
    
    # Assigning a Str to a Name (line 898):
    unicode_2933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, 15), 'unicode', u'\n')
    # Assigning a type to the variable 'embedded' (line 898)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 898, 4), 'embedded', unicode_2933)
    
    
    # Call to enumerate(...): (line 899)
    # Processing the call arguments (line 899)
    # Getting the type of 'frame_list' (line 899)
    frame_list_2935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 35), 'frame_list', False)
    # Processing the call keyword arguments (line 899)
    kwargs_2936 = {}
    # Getting the type of 'enumerate' (line 899)
    enumerate_2934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 25), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 899)
    enumerate_call_result_2937 = invoke(stypy.reporting.localization.Localization(__file__, 899, 25), enumerate_2934, *[frame_list_2935], **kwargs_2936)
    
    # Testing the type of a for loop iterable (line 899)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 899, 4), enumerate_call_result_2937)
    # Getting the type of the for loop variable (line 899)
    for_loop_var_2938 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 899, 4), enumerate_call_result_2937)
    # Assigning a type to the variable 'i' (line 899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 899, 4), for_loop_var_2938))
    # Assigning a type to the variable 'frame_data' (line 899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 4), 'frame_data', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 899, 4), for_loop_var_2938))
    # SSA begins for a for statement (line 899)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'embedded' (line 900)
    embedded_2939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 8), 'embedded')
    
    # Call to format(...): (line 900)
    # Processing the call arguments (line 900)
    # Getting the type of 'i' (line 900)
    i_2942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 36), 'i', False)
    # Getting the type of 'frame_format' (line 900)
    frame_format_2943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 39), 'frame_format', False)
    
    # Call to replace(...): (line 901)
    # Processing the call arguments (line 901)
    unicode_2946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 901, 55), 'unicode', u'\n')
    unicode_2947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 901, 61), 'unicode', u'\\\n')
    # Processing the call keyword arguments (line 901)
    kwargs_2948 = {}
    # Getting the type of 'frame_data' (line 901)
    frame_data_2944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 36), 'frame_data', False)
    # Obtaining the member 'replace' of a type (line 901)
    replace_2945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 901, 36), frame_data_2944, 'replace')
    # Calling replace(args, kwargs) (line 901)
    replace_call_result_2949 = invoke(stypy.reporting.localization.Localization(__file__, 901, 36), replace_2945, *[unicode_2946, unicode_2947], **kwargs_2948)
    
    # Processing the call keyword arguments (line 900)
    kwargs_2950 = {}
    # Getting the type of 'template' (line 900)
    template_2940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 20), 'template', False)
    # Obtaining the member 'format' of a type (line 900)
    format_2941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 20), template_2940, 'format')
    # Calling format(args, kwargs) (line 900)
    format_call_result_2951 = invoke(stypy.reporting.localization.Localization(__file__, 900, 20), format_2941, *[i_2942, frame_format_2943, replace_call_result_2949], **kwargs_2950)
    
    # Applying the binary operator '+=' (line 900)
    result_iadd_2952 = python_operator(stypy.reporting.localization.Localization(__file__, 900, 8), '+=', embedded_2939, format_call_result_2951)
    # Assigning a type to the variable 'embedded' (line 900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 8), 'embedded', result_iadd_2952)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'embedded' (line 902)
    embedded_2953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 11), 'embedded')
    # Assigning a type to the variable 'stypy_return_type' (line 902)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 4), 'stypy_return_type', embedded_2953)
    
    # ################# End of '_embedded_frames(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_embedded_frames' in the type store
    # Getting the type of 'stypy_return_type' (line 895)
    stypy_return_type_2954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_2954)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_embedded_frames'
    return stypy_return_type_2954

# Assigning a type to the variable '_embedded_frames' (line 895)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 0), '_embedded_frames', _embedded_frames)
# Declaration of the 'HTMLWriter' class
# Getting the type of 'FileMovieWriter' (line 906)
FileMovieWriter_2955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 17), 'FileMovieWriter')

class HTMLWriter(FileMovieWriter_2955, ):
    
    # Assigning a List to a Name (line 907):
    
    # Assigning a Str to a Name (line 908):

    @norecursion
    def isAvailable(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'isAvailable'
        module_type_store = module_type_store.open_function_context('isAvailable', 910, 4, False)
        # Assigning a type to the variable 'self' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        HTMLWriter.isAvailable.__dict__.__setitem__('stypy_localization', localization)
        HTMLWriter.isAvailable.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        HTMLWriter.isAvailable.__dict__.__setitem__('stypy_type_store', module_type_store)
        HTMLWriter.isAvailable.__dict__.__setitem__('stypy_function_name', 'HTMLWriter.isAvailable')
        HTMLWriter.isAvailable.__dict__.__setitem__('stypy_param_names_list', [])
        HTMLWriter.isAvailable.__dict__.__setitem__('stypy_varargs_param_name', None)
        HTMLWriter.isAvailable.__dict__.__setitem__('stypy_kwargs_param_name', None)
        HTMLWriter.isAvailable.__dict__.__setitem__('stypy_call_defaults', defaults)
        HTMLWriter.isAvailable.__dict__.__setitem__('stypy_call_varargs', varargs)
        HTMLWriter.isAvailable.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        HTMLWriter.isAvailable.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'HTMLWriter.isAvailable', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'isAvailable', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'isAvailable(...)' code ##################

        # Getting the type of 'True' (line 912)
        True_2956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 8), 'stypy_return_type', True_2956)
        
        # ################# End of 'isAvailable(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'isAvailable' in the type store
        # Getting the type of 'stypy_return_type' (line 910)
        stypy_return_type_2957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_2957)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'isAvailable'
        return stypy_return_type_2957


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_2958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 27), 'int')
        # Getting the type of 'None' (line 914)
        None_2959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 37), 'None')
        # Getting the type of 'None' (line 914)
        None_2960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 51), 'None')
        # Getting the type of 'None' (line 914)
        None_2961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 68), 'None')
        # Getting the type of 'None' (line 915)
        None_2962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 26), 'None')
        # Getting the type of 'False' (line 915)
        False_2963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 45), 'False')
        unicode_2964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, 65), 'unicode', u'loop')
        # Getting the type of 'None' (line 916)
        None_2965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 29), 'None')
        defaults = [int_2958, None_2959, None_2960, None_2961, None_2962, False_2963, unicode_2964, None_2965]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 914, 4, False)
        # Assigning a type to the variable 'self' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'HTMLWriter.__init__', ['fps', 'codec', 'bitrate', 'extra_args', 'metadata', 'embed_frames', 'default_mode', 'embed_limit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fps', 'codec', 'bitrate', 'extra_args', 'metadata', 'embed_frames', 'default_mode', 'embed_limit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 917):
        
        # Assigning a Name to a Attribute (line 917):
        # Getting the type of 'embed_frames' (line 917)
        embed_frames_2966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 28), 'embed_frames')
        # Getting the type of 'self' (line 917)
        self_2967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 8), 'self')
        # Setting the type of the member 'embed_frames' of a type (line 917)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 8), self_2967, 'embed_frames', embed_frames_2966)
        
        # Assigning a Call to a Attribute (line 918):
        
        # Assigning a Call to a Attribute (line 918):
        
        # Call to lower(...): (line 918)
        # Processing the call keyword arguments (line 918)
        kwargs_2970 = {}
        # Getting the type of 'default_mode' (line 918)
        default_mode_2968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 28), 'default_mode', False)
        # Obtaining the member 'lower' of a type (line 918)
        lower_2969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 28), default_mode_2968, 'lower')
        # Calling lower(args, kwargs) (line 918)
        lower_call_result_2971 = invoke(stypy.reporting.localization.Localization(__file__, 918, 28), lower_2969, *[], **kwargs_2970)
        
        # Getting the type of 'self' (line 918)
        self_2972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 8), 'self')
        # Setting the type of the member 'default_mode' of a type (line 918)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 8), self_2972, 'default_mode', lower_call_result_2971)
        
        # Type idiom detected: calculating its left and rigth part (line 921)
        # Getting the type of 'embed_limit' (line 921)
        embed_limit_2973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 11), 'embed_limit')
        # Getting the type of 'None' (line 921)
        None_2974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 26), 'None')
        
        (may_be_2975, more_types_in_union_2976) = may_be_none(embed_limit_2973, None_2974)

        if may_be_2975:

            if more_types_in_union_2976:
                # Runtime conditional SSA (line 921)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Attribute (line 922):
            
            # Assigning a Subscript to a Attribute (line 922):
            
            # Obtaining the type of the subscript
            unicode_2977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 922, 41), 'unicode', u'animation.embed_limit')
            # Getting the type of 'rcParams' (line 922)
            rcParams_2978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 32), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 922)
            getitem___2979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 32), rcParams_2978, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 922)
            subscript_call_result_2980 = invoke(stypy.reporting.localization.Localization(__file__, 922, 32), getitem___2979, unicode_2977)
            
            # Getting the type of 'self' (line 922)
            self_2981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 12), 'self')
            # Setting the type of the member '_bytes_limit' of a type (line 922)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 12), self_2981, '_bytes_limit', subscript_call_result_2980)

            if more_types_in_union_2976:
                # Runtime conditional SSA for else branch (line 921)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_2975) or more_types_in_union_2976):
            
            # Assigning a Name to a Attribute (line 924):
            
            # Assigning a Name to a Attribute (line 924):
            # Getting the type of 'embed_limit' (line 924)
            embed_limit_2982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 32), 'embed_limit')
            # Getting the type of 'self' (line 924)
            self_2983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 12), 'self')
            # Setting the type of the member '_bytes_limit' of a type (line 924)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 12), self_2983, '_bytes_limit', embed_limit_2982)

            if (may_be_2975 and more_types_in_union_2976):
                # SSA join for if statement (line 921)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'self' (line 927)
        self_2984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 8), 'self')
        # Obtaining the member '_bytes_limit' of a type (line 927)
        _bytes_limit_2985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 927, 8), self_2984, '_bytes_limit')
        int_2986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 927, 29), 'int')
        int_2987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 927, 36), 'int')
        # Applying the binary operator '*' (line 927)
        result_mul_2988 = python_operator(stypy.reporting.localization.Localization(__file__, 927, 29), '*', int_2986, int_2987)
        
        # Applying the binary operator '*=' (line 927)
        result_imul_2989 = python_operator(stypy.reporting.localization.Localization(__file__, 927, 8), '*=', _bytes_limit_2985, result_mul_2988)
        # Getting the type of 'self' (line 927)
        self_2990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 8), 'self')
        # Setting the type of the member '_bytes_limit' of a type (line 927)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 927, 8), self_2990, '_bytes_limit', result_imul_2989)
        
        
        
        # Getting the type of 'self' (line 929)
        self_2991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 11), 'self')
        # Obtaining the member 'default_mode' of a type (line 929)
        default_mode_2992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 11), self_2991, 'default_mode')
        
        # Obtaining an instance of the builtin type 'list' (line 929)
        list_2993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 929)
        # Adding element type (line 929)
        unicode_2994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 37), 'unicode', u'loop')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 929, 36), list_2993, unicode_2994)
        # Adding element type (line 929)
        unicode_2995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 45), 'unicode', u'once')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 929, 36), list_2993, unicode_2995)
        # Adding element type (line 929)
        unicode_2996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 53), 'unicode', u'reflect')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 929, 36), list_2993, unicode_2996)
        
        # Applying the binary operator 'notin' (line 929)
        result_contains_2997 = python_operator(stypy.reporting.localization.Localization(__file__, 929, 11), 'notin', default_mode_2992, list_2993)
        
        # Testing the type of an if condition (line 929)
        if_condition_2998 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 929, 8), result_contains_2997)
        # Assigning a type to the variable 'if_condition_2998' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'if_condition_2998', if_condition_2998)
        # SSA begins for if statement (line 929)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Attribute (line 930):
        
        # Assigning a Str to a Attribute (line 930):
        unicode_2999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 930, 32), 'unicode', u'loop')
        # Getting the type of 'self' (line 930)
        self_3000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 12), 'self')
        # Setting the type of the member 'default_mode' of a type (line 930)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 930, 12), self_3000, 'default_mode', unicode_2999)
        
        # Call to warn(...): (line 931)
        # Processing the call arguments (line 931)
        unicode_3003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 26), 'unicode', u"unrecognized default_mode: using 'loop'")
        # Processing the call keyword arguments (line 931)
        kwargs_3004 = {}
        # Getting the type of 'warnings' (line 931)
        warnings_3001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 931)
        warn_3002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 12), warnings_3001, 'warn')
        # Calling warn(args, kwargs) (line 931)
        warn_call_result_3005 = invoke(stypy.reporting.localization.Localization(__file__, 931, 12), warn_3002, *[unicode_3003], **kwargs_3004)
        
        # SSA join for if statement (line 929)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Attribute (line 933):
        
        # Assigning a List to a Attribute (line 933):
        
        # Obtaining an instance of the builtin type 'list' (line 933)
        list_3006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 933)
        
        # Getting the type of 'self' (line 933)
        self_3007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 8), 'self')
        # Setting the type of the member '_saved_frames' of a type (line 933)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 8), self_3007, '_saved_frames', list_3006)
        
        # Assigning a Num to a Attribute (line 934):
        
        # Assigning a Num to a Attribute (line 934):
        int_3008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, 28), 'int')
        # Getting the type of 'self' (line 934)
        self_3009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'self')
        # Setting the type of the member '_total_bytes' of a type (line 934)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 8), self_3009, '_total_bytes', int_3008)
        
        # Assigning a Name to a Attribute (line 935):
        
        # Assigning a Name to a Attribute (line 935):
        # Getting the type of 'False' (line 935)
        False_3010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 26), 'False')
        # Getting the type of 'self' (line 935)
        self_3011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 8), 'self')
        # Setting the type of the member '_hit_limit' of a type (line 935)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 8), self_3011, '_hit_limit', False_3010)
        
        # Call to __init__(...): (line 936)
        # Processing the call arguments (line 936)
        # Getting the type of 'fps' (line 936)
        fps_3018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 41), 'fps', False)
        # Getting the type of 'codec' (line 936)
        codec_3019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 46), 'codec', False)
        # Getting the type of 'bitrate' (line 936)
        bitrate_3020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 53), 'bitrate', False)
        # Getting the type of 'extra_args' (line 937)
        extra_args_3021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 41), 'extra_args', False)
        # Getting the type of 'metadata' (line 937)
        metadata_3022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 53), 'metadata', False)
        # Processing the call keyword arguments (line 936)
        kwargs_3023 = {}
        
        # Call to super(...): (line 936)
        # Processing the call arguments (line 936)
        # Getting the type of 'HTMLWriter' (line 936)
        HTMLWriter_3013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 14), 'HTMLWriter', False)
        # Getting the type of 'self' (line 936)
        self_3014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 26), 'self', False)
        # Processing the call keyword arguments (line 936)
        kwargs_3015 = {}
        # Getting the type of 'super' (line 936)
        super_3012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 8), 'super', False)
        # Calling super(args, kwargs) (line 936)
        super_call_result_3016 = invoke(stypy.reporting.localization.Localization(__file__, 936, 8), super_3012, *[HTMLWriter_3013, self_3014], **kwargs_3015)
        
        # Obtaining the member '__init__' of a type (line 936)
        init___3017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 8), super_call_result_3016, '__init__')
        # Calling __init__(args, kwargs) (line 936)
        init___call_result_3024 = invoke(stypy.reporting.localization.Localization(__file__, 936, 8), init___3017, *[fps_3018, codec_3019, bitrate_3020, extra_args_3021, metadata_3022], **kwargs_3023)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def setup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 939)
        None_3025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 49), 'None')
        defaults = [None_3025]
        # Create a new context for function 'setup'
        module_type_store = module_type_store.open_function_context('setup', 939, 4, False)
        # Assigning a type to the variable 'self' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        HTMLWriter.setup.__dict__.__setitem__('stypy_localization', localization)
        HTMLWriter.setup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        HTMLWriter.setup.__dict__.__setitem__('stypy_type_store', module_type_store)
        HTMLWriter.setup.__dict__.__setitem__('stypy_function_name', 'HTMLWriter.setup')
        HTMLWriter.setup.__dict__.__setitem__('stypy_param_names_list', ['fig', 'outfile', 'dpi', 'frame_dir'])
        HTMLWriter.setup.__dict__.__setitem__('stypy_varargs_param_name', None)
        HTMLWriter.setup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        HTMLWriter.setup.__dict__.__setitem__('stypy_call_defaults', defaults)
        HTMLWriter.setup.__dict__.__setitem__('stypy_call_varargs', varargs)
        HTMLWriter.setup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        HTMLWriter.setup.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'HTMLWriter.setup', ['fig', 'outfile', 'dpi', 'frame_dir'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'setup', localization, ['fig', 'outfile', 'dpi', 'frame_dir'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'setup(...)' code ##################

        
        
        
        # Obtaining the type of the subscript
        int_3026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 37), 'int')
        
        # Call to splitext(...): (line 940)
        # Processing the call arguments (line 940)
        # Getting the type of 'outfile' (line 940)
        outfile_3030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 28), 'outfile', False)
        # Processing the call keyword arguments (line 940)
        kwargs_3031 = {}
        # Getting the type of 'os' (line 940)
        os_3027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 11), 'os', False)
        # Obtaining the member 'path' of a type (line 940)
        path_3028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 11), os_3027, 'path')
        # Obtaining the member 'splitext' of a type (line 940)
        splitext_3029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 11), path_3028, 'splitext')
        # Calling splitext(args, kwargs) (line 940)
        splitext_call_result_3032 = invoke(stypy.reporting.localization.Localization(__file__, 940, 11), splitext_3029, *[outfile_3030], **kwargs_3031)
        
        # Obtaining the member '__getitem__' of a type (line 940)
        getitem___3033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 11), splitext_call_result_3032, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 940)
        subscript_call_result_3034 = invoke(stypy.reporting.localization.Localization(__file__, 940, 11), getitem___3033, int_3026)
        
        
        # Obtaining an instance of the builtin type 'list' (line 940)
        list_3035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 48), 'list')
        # Adding type elements to the builtin type 'list' instance (line 940)
        # Adding element type (line 940)
        unicode_3036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 49), 'unicode', u'.html')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 940, 48), list_3035, unicode_3036)
        # Adding element type (line 940)
        unicode_3037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 58), 'unicode', u'.htm')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 940, 48), list_3035, unicode_3037)
        
        # Applying the binary operator 'notin' (line 940)
        result_contains_3038 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 11), 'notin', subscript_call_result_3034, list_3035)
        
        # Testing the type of an if condition (line 940)
        if_condition_3039 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 940, 8), result_contains_3038)
        # Assigning a type to the variable 'if_condition_3039' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 8), 'if_condition_3039', if_condition_3039)
        # SSA begins for if statement (line 940)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 941)
        # Processing the call arguments (line 941)
        unicode_3041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 29), 'unicode', u'outfile must be *.htm or *.html')
        # Processing the call keyword arguments (line 941)
        kwargs_3042 = {}
        # Getting the type of 'ValueError' (line 941)
        ValueError_3040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 941)
        ValueError_call_result_3043 = invoke(stypy.reporting.localization.Localization(__file__, 941, 18), ValueError_3040, *[unicode_3041], **kwargs_3042)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 941, 12), ValueError_call_result_3043, 'raise parameter', BaseException)
        # SSA join for if statement (line 940)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 943)
        self_3044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 15), 'self')
        # Obtaining the member 'embed_frames' of a type (line 943)
        embed_frames_3045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 15), self_3044, 'embed_frames')
        # Applying the 'not' unary operator (line 943)
        result_not__3046 = python_operator(stypy.reporting.localization.Localization(__file__, 943, 11), 'not', embed_frames_3045)
        
        # Testing the type of an if condition (line 943)
        if_condition_3047 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 943, 8), result_not__3046)
        # Assigning a type to the variable 'if_condition_3047' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 8), 'if_condition_3047', if_condition_3047)
        # SSA begins for if statement (line 943)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 944)
        # Getting the type of 'frame_dir' (line 944)
        frame_dir_3048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 15), 'frame_dir')
        # Getting the type of 'None' (line 944)
        None_3049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 28), 'None')
        
        (may_be_3050, more_types_in_union_3051) = may_be_none(frame_dir_3048, None_3049)

        if may_be_3050:

            if more_types_in_union_3051:
                # Runtime conditional SSA (line 944)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 945):
            
            # Assigning a BinOp to a Name (line 945):
            
            # Call to rstrip(...): (line 945)
            # Processing the call arguments (line 945)
            unicode_3054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 945, 43), 'unicode', u'.html')
            # Processing the call keyword arguments (line 945)
            kwargs_3055 = {}
            # Getting the type of 'outfile' (line 945)
            outfile_3052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 28), 'outfile', False)
            # Obtaining the member 'rstrip' of a type (line 945)
            rstrip_3053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 28), outfile_3052, 'rstrip')
            # Calling rstrip(args, kwargs) (line 945)
            rstrip_call_result_3056 = invoke(stypy.reporting.localization.Localization(__file__, 945, 28), rstrip_3053, *[unicode_3054], **kwargs_3055)
            
            unicode_3057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 945, 54), 'unicode', u'_frames')
            # Applying the binary operator '+' (line 945)
            result_add_3058 = python_operator(stypy.reporting.localization.Localization(__file__, 945, 28), '+', rstrip_call_result_3056, unicode_3057)
            
            # Assigning a type to the variable 'frame_dir' (line 945)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 16), 'frame_dir', result_add_3058)

            if more_types_in_union_3051:
                # SSA join for if statement (line 944)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to exists(...): (line 946)
        # Processing the call arguments (line 946)
        # Getting the type of 'frame_dir' (line 946)
        frame_dir_3062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 34), 'frame_dir', False)
        # Processing the call keyword arguments (line 946)
        kwargs_3063 = {}
        # Getting the type of 'os' (line 946)
        os_3059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 946)
        path_3060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 946, 19), os_3059, 'path')
        # Obtaining the member 'exists' of a type (line 946)
        exists_3061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 946, 19), path_3060, 'exists')
        # Calling exists(args, kwargs) (line 946)
        exists_call_result_3064 = invoke(stypy.reporting.localization.Localization(__file__, 946, 19), exists_3061, *[frame_dir_3062], **kwargs_3063)
        
        # Applying the 'not' unary operator (line 946)
        result_not__3065 = python_operator(stypy.reporting.localization.Localization(__file__, 946, 15), 'not', exists_call_result_3064)
        
        # Testing the type of an if condition (line 946)
        if_condition_3066 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 946, 12), result_not__3065)
        # Assigning a type to the variable 'if_condition_3066' (line 946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 12), 'if_condition_3066', if_condition_3066)
        # SSA begins for if statement (line 946)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to makedirs(...): (line 947)
        # Processing the call arguments (line 947)
        # Getting the type of 'frame_dir' (line 947)
        frame_dir_3069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 28), 'frame_dir', False)
        # Processing the call keyword arguments (line 947)
        kwargs_3070 = {}
        # Getting the type of 'os' (line 947)
        os_3067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 16), 'os', False)
        # Obtaining the member 'makedirs' of a type (line 947)
        makedirs_3068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 16), os_3067, 'makedirs')
        # Calling makedirs(args, kwargs) (line 947)
        makedirs_call_result_3071 = invoke(stypy.reporting.localization.Localization(__file__, 947, 16), makedirs_3068, *[frame_dir_3069], **kwargs_3070)
        
        # SSA join for if statement (line 946)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 948):
        
        # Assigning a Call to a Name (line 948):
        
        # Call to join(...): (line 948)
        # Processing the call arguments (line 948)
        # Getting the type of 'frame_dir' (line 948)
        frame_dir_3075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 40), 'frame_dir', False)
        unicode_3076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 51), 'unicode', u'frame')
        # Processing the call keyword arguments (line 948)
        kwargs_3077 = {}
        # Getting the type of 'os' (line 948)
        os_3072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 27), 'os', False)
        # Obtaining the member 'path' of a type (line 948)
        path_3073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 27), os_3072, 'path')
        # Obtaining the member 'join' of a type (line 948)
        join_3074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 27), path_3073, 'join')
        # Calling join(args, kwargs) (line 948)
        join_call_result_3078 = invoke(stypy.reporting.localization.Localization(__file__, 948, 27), join_3074, *[frame_dir_3075, unicode_3076], **kwargs_3077)
        
        # Assigning a type to the variable 'frame_prefix' (line 948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 12), 'frame_prefix', join_call_result_3078)
        # SSA branch for the else part of an if statement (line 943)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 950):
        
        # Assigning a Name to a Name (line 950):
        # Getting the type of 'None' (line 950)
        None_3079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 27), 'None')
        # Assigning a type to the variable 'frame_prefix' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 12), 'frame_prefix', None_3079)
        # SSA join for if statement (line 943)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to setup(...): (line 952)
        # Processing the call arguments (line 952)
        # Getting the type of 'fig' (line 952)
        fig_3086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 38), 'fig', False)
        # Getting the type of 'outfile' (line 952)
        outfile_3087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 43), 'outfile', False)
        # Getting the type of 'dpi' (line 952)
        dpi_3088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 52), 'dpi', False)
        # Getting the type of 'frame_prefix' (line 953)
        frame_prefix_3089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 38), 'frame_prefix', False)
        # Processing the call keyword arguments (line 952)
        # Getting the type of 'False' (line 953)
        False_3090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 63), 'False', False)
        keyword_3091 = False_3090
        kwargs_3092 = {'clear_temp': keyword_3091}
        
        # Call to super(...): (line 952)
        # Processing the call arguments (line 952)
        # Getting the type of 'HTMLWriter' (line 952)
        HTMLWriter_3081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 14), 'HTMLWriter', False)
        # Getting the type of 'self' (line 952)
        self_3082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 26), 'self', False)
        # Processing the call keyword arguments (line 952)
        kwargs_3083 = {}
        # Getting the type of 'super' (line 952)
        super_3080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'super', False)
        # Calling super(args, kwargs) (line 952)
        super_call_result_3084 = invoke(stypy.reporting.localization.Localization(__file__, 952, 8), super_3080, *[HTMLWriter_3081, self_3082], **kwargs_3083)
        
        # Obtaining the member 'setup' of a type (line 952)
        setup_3085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 8), super_call_result_3084, 'setup')
        # Calling setup(args, kwargs) (line 952)
        setup_call_result_3093 = invoke(stypy.reporting.localization.Localization(__file__, 952, 8), setup_3085, *[fig_3086, outfile_3087, dpi_3088, frame_prefix_3089], **kwargs_3092)
        
        
        # ################# End of 'setup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'setup' in the type store
        # Getting the type of 'stypy_return_type' (line 939)
        stypy_return_type_3094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3094)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'setup'
        return stypy_return_type_3094


    @norecursion
    def grab_frame(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'grab_frame'
        module_type_store = module_type_store.open_function_context('grab_frame', 955, 4, False)
        # Assigning a type to the variable 'self' (line 956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        HTMLWriter.grab_frame.__dict__.__setitem__('stypy_localization', localization)
        HTMLWriter.grab_frame.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        HTMLWriter.grab_frame.__dict__.__setitem__('stypy_type_store', module_type_store)
        HTMLWriter.grab_frame.__dict__.__setitem__('stypy_function_name', 'HTMLWriter.grab_frame')
        HTMLWriter.grab_frame.__dict__.__setitem__('stypy_param_names_list', [])
        HTMLWriter.grab_frame.__dict__.__setitem__('stypy_varargs_param_name', None)
        HTMLWriter.grab_frame.__dict__.__setitem__('stypy_kwargs_param_name', 'savefig_kwargs')
        HTMLWriter.grab_frame.__dict__.__setitem__('stypy_call_defaults', defaults)
        HTMLWriter.grab_frame.__dict__.__setitem__('stypy_call_varargs', varargs)
        HTMLWriter.grab_frame.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        HTMLWriter.grab_frame.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'HTMLWriter.grab_frame', [], None, 'savefig_kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'grab_frame', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'grab_frame(...)' code ##################

        
        # Getting the type of 'self' (line 956)
        self_3095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 11), 'self')
        # Obtaining the member 'embed_frames' of a type (line 956)
        embed_frames_3096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 956, 11), self_3095, 'embed_frames')
        # Testing the type of an if condition (line 956)
        if_condition_3097 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 956, 8), embed_frames_3096)
        # Assigning a type to the variable 'if_condition_3097' (line 956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 8), 'if_condition_3097', if_condition_3097)
        # SSA begins for if statement (line 956)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 958)
        self_3098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 15), 'self')
        # Obtaining the member '_hit_limit' of a type (line 958)
        _hit_limit_3099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 15), self_3098, '_hit_limit')
        # Testing the type of an if condition (line 958)
        if_condition_3100 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 958, 12), _hit_limit_3099)
        # Assigning a type to the variable 'if_condition_3100' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'if_condition_3100', if_condition_3100)
        # SSA begins for if statement (line 958)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 16), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 958)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 960):
        
        # Assigning a BinOp to a Name (line 960):
        unicode_3101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 21), 'unicode', u'.')
        # Getting the type of 'self' (line 960)
        self_3102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 27), 'self')
        # Obtaining the member 'frame_format' of a type (line 960)
        frame_format_3103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 27), self_3102, 'frame_format')
        # Applying the binary operator '+' (line 960)
        result_add_3104 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 21), '+', unicode_3101, frame_format_3103)
        
        # Assigning a type to the variable 'suffix' (line 960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 12), 'suffix', result_add_3104)
        
        # Assigning a Call to a Name (line 961):
        
        # Assigning a Call to a Name (line 961):
        
        # Call to InMemory(...): (line 961)
        # Processing the call keyword arguments (line 961)
        kwargs_3106 = {}
        # Getting the type of 'InMemory' (line 961)
        InMemory_3105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 16), 'InMemory', False)
        # Calling InMemory(args, kwargs) (line 961)
        InMemory_call_result_3107 = invoke(stypy.reporting.localization.Localization(__file__, 961, 16), InMemory_3105, *[], **kwargs_3106)
        
        # Assigning a type to the variable 'f' (line 961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 12), 'f', InMemory_call_result_3107)
        
        # Call to savefig(...): (line 962)
        # Processing the call arguments (line 962)
        # Getting the type of 'f' (line 962)
        f_3111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 29), 'f', False)
        # Processing the call keyword arguments (line 962)
        # Getting the type of 'self' (line 962)
        self_3112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 39), 'self', False)
        # Obtaining the member 'frame_format' of a type (line 962)
        frame_format_3113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 39), self_3112, 'frame_format')
        keyword_3114 = frame_format_3113
        # Getting the type of 'self' (line 963)
        self_3115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 33), 'self', False)
        # Obtaining the member 'dpi' of a type (line 963)
        dpi_3116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 33), self_3115, 'dpi')
        keyword_3117 = dpi_3116
        # Getting the type of 'savefig_kwargs' (line 963)
        savefig_kwargs_3118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 45), 'savefig_kwargs', False)
        kwargs_3119 = {'savefig_kwargs_3118': savefig_kwargs_3118, 'dpi': keyword_3117, 'format': keyword_3114}
        # Getting the type of 'self' (line 962)
        self_3108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'self', False)
        # Obtaining the member 'fig' of a type (line 962)
        fig_3109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 12), self_3108, 'fig')
        # Obtaining the member 'savefig' of a type (line 962)
        savefig_3110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 12), fig_3109, 'savefig')
        # Calling savefig(args, kwargs) (line 962)
        savefig_call_result_3120 = invoke(stypy.reporting.localization.Localization(__file__, 962, 12), savefig_3110, *[f_3111], **kwargs_3119)
        
        
        # Assigning a Call to a Name (line 964):
        
        # Assigning a Call to a Name (line 964):
        
        # Call to decode(...): (line 964)
        # Processing the call arguments (line 964)
        unicode_3129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 57), 'unicode', u'ascii')
        # Processing the call keyword arguments (line 964)
        kwargs_3130 = {}
        
        # Call to encodebytes(...): (line 964)
        # Processing the call arguments (line 964)
        
        # Call to getvalue(...): (line 964)
        # Processing the call keyword arguments (line 964)
        kwargs_3124 = {}
        # Getting the type of 'f' (line 964)
        f_3122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 36), 'f', False)
        # Obtaining the member 'getvalue' of a type (line 964)
        getvalue_3123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 36), f_3122, 'getvalue')
        # Calling getvalue(args, kwargs) (line 964)
        getvalue_call_result_3125 = invoke(stypy.reporting.localization.Localization(__file__, 964, 36), getvalue_3123, *[], **kwargs_3124)
        
        # Processing the call keyword arguments (line 964)
        kwargs_3126 = {}
        # Getting the type of 'encodebytes' (line 964)
        encodebytes_3121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 24), 'encodebytes', False)
        # Calling encodebytes(args, kwargs) (line 964)
        encodebytes_call_result_3127 = invoke(stypy.reporting.localization.Localization(__file__, 964, 24), encodebytes_3121, *[getvalue_call_result_3125], **kwargs_3126)
        
        # Obtaining the member 'decode' of a type (line 964)
        decode_3128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 24), encodebytes_call_result_3127, 'decode')
        # Calling decode(args, kwargs) (line 964)
        decode_call_result_3131 = invoke(stypy.reporting.localization.Localization(__file__, 964, 24), decode_3128, *[unicode_3129], **kwargs_3130)
        
        # Assigning a type to the variable 'imgdata64' (line 964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 12), 'imgdata64', decode_call_result_3131)
        
        # Getting the type of 'self' (line 965)
        self_3132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 12), 'self')
        # Obtaining the member '_total_bytes' of a type (line 965)
        _total_bytes_3133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 12), self_3132, '_total_bytes')
        
        # Call to len(...): (line 965)
        # Processing the call arguments (line 965)
        # Getting the type of 'imgdata64' (line 965)
        imgdata64_3135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 37), 'imgdata64', False)
        # Processing the call keyword arguments (line 965)
        kwargs_3136 = {}
        # Getting the type of 'len' (line 965)
        len_3134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 33), 'len', False)
        # Calling len(args, kwargs) (line 965)
        len_call_result_3137 = invoke(stypy.reporting.localization.Localization(__file__, 965, 33), len_3134, *[imgdata64_3135], **kwargs_3136)
        
        # Applying the binary operator '+=' (line 965)
        result_iadd_3138 = python_operator(stypy.reporting.localization.Localization(__file__, 965, 12), '+=', _total_bytes_3133, len_call_result_3137)
        # Getting the type of 'self' (line 965)
        self_3139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 12), 'self')
        # Setting the type of the member '_total_bytes' of a type (line 965)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 12), self_3139, '_total_bytes', result_iadd_3138)
        
        
        
        # Getting the type of 'self' (line 966)
        self_3140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 15), 'self')
        # Obtaining the member '_total_bytes' of a type (line 966)
        _total_bytes_3141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 15), self_3140, '_total_bytes')
        # Getting the type of 'self' (line 966)
        self_3142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 36), 'self')
        # Obtaining the member '_bytes_limit' of a type (line 966)
        _bytes_limit_3143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 36), self_3142, '_bytes_limit')
        # Applying the binary operator '>=' (line 966)
        result_ge_3144 = python_operator(stypy.reporting.localization.Localization(__file__, 966, 15), '>=', _total_bytes_3141, _bytes_limit_3143)
        
        # Testing the type of an if condition (line 966)
        if_condition_3145 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 966, 12), result_ge_3144)
        # Assigning a type to the variable 'if_condition_3145' (line 966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 12), 'if_condition_3145', if_condition_3145)
        # SSA begins for if statement (line 966)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 967)
        # Processing the call arguments (line 967)
        
        # Call to format(...): (line 967)
        # Processing the call arguments (line 967)
        # Getting the type of 'self' (line 973)
        self_3150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 57), 'self', False)
        # Processing the call keyword arguments (line 967)
        kwargs_3151 = {}
        unicode_3148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 30), 'unicode', u"Animation size has reached {0._total_bytes} bytes, exceeding the limit of {0._bytes_limit}. If you're sure you want a larger animation embedded, set the animation.embed_limit rc parameter to a larger value (in MB). This and further frames will be dropped.")
        # Obtaining the member 'format' of a type (line 967)
        format_3149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 30), unicode_3148, 'format')
        # Calling format(args, kwargs) (line 967)
        format_call_result_3152 = invoke(stypy.reporting.localization.Localization(__file__, 967, 30), format_3149, *[self_3150], **kwargs_3151)
        
        # Processing the call keyword arguments (line 967)
        kwargs_3153 = {}
        # Getting the type of 'warnings' (line 967)
        warnings_3146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 967)
        warn_3147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 16), warnings_3146, 'warn')
        # Calling warn(args, kwargs) (line 967)
        warn_call_result_3154 = invoke(stypy.reporting.localization.Localization(__file__, 967, 16), warn_3147, *[format_call_result_3152], **kwargs_3153)
        
        
        # Assigning a Name to a Attribute (line 974):
        
        # Assigning a Name to a Attribute (line 974):
        # Getting the type of 'True' (line 974)
        True_3155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 34), 'True')
        # Getting the type of 'self' (line 974)
        self_3156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 16), 'self')
        # Setting the type of the member '_hit_limit' of a type (line 974)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 16), self_3156, '_hit_limit', True_3155)
        # SSA branch for the else part of an if statement (line 966)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 976)
        # Processing the call arguments (line 976)
        # Getting the type of 'imgdata64' (line 976)
        imgdata64_3160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 42), 'imgdata64', False)
        # Processing the call keyword arguments (line 976)
        kwargs_3161 = {}
        # Getting the type of 'self' (line 976)
        self_3157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 16), 'self', False)
        # Obtaining the member '_saved_frames' of a type (line 976)
        _saved_frames_3158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 16), self_3157, '_saved_frames')
        # Obtaining the member 'append' of a type (line 976)
        append_3159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 16), _saved_frames_3158, 'append')
        # Calling append(args, kwargs) (line 976)
        append_call_result_3162 = invoke(stypy.reporting.localization.Localization(__file__, 976, 16), append_3159, *[imgdata64_3160], **kwargs_3161)
        
        # SSA join for if statement (line 966)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 956)
        module_type_store.open_ssa_branch('else')
        
        # Call to grab_frame(...): (line 978)
        # Processing the call keyword arguments (line 978)
        # Getting the type of 'savefig_kwargs' (line 978)
        savefig_kwargs_3169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 56), 'savefig_kwargs', False)
        kwargs_3170 = {'savefig_kwargs_3169': savefig_kwargs_3169}
        
        # Call to super(...): (line 978)
        # Processing the call arguments (line 978)
        # Getting the type of 'HTMLWriter' (line 978)
        HTMLWriter_3164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 25), 'HTMLWriter', False)
        # Getting the type of 'self' (line 978)
        self_3165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 37), 'self', False)
        # Processing the call keyword arguments (line 978)
        kwargs_3166 = {}
        # Getting the type of 'super' (line 978)
        super_3163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 19), 'super', False)
        # Calling super(args, kwargs) (line 978)
        super_call_result_3167 = invoke(stypy.reporting.localization.Localization(__file__, 978, 19), super_3163, *[HTMLWriter_3164, self_3165], **kwargs_3166)
        
        # Obtaining the member 'grab_frame' of a type (line 978)
        grab_frame_3168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 19), super_call_result_3167, 'grab_frame')
        # Calling grab_frame(args, kwargs) (line 978)
        grab_frame_call_result_3171 = invoke(stypy.reporting.localization.Localization(__file__, 978, 19), grab_frame_3168, *[], **kwargs_3170)
        
        # Assigning a type to the variable 'stypy_return_type' (line 978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 12), 'stypy_return_type', grab_frame_call_result_3171)
        # SSA join for if statement (line 956)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'grab_frame(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'grab_frame' in the type store
        # Getting the type of 'stypy_return_type' (line 955)
        stypy_return_type_3172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3172)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'grab_frame'
        return stypy_return_type_3172


    @norecursion
    def _run(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_run'
        module_type_store = module_type_store.open_function_context('_run', 980, 4, False)
        # Assigning a type to the variable 'self' (line 981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 981, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        HTMLWriter._run.__dict__.__setitem__('stypy_localization', localization)
        HTMLWriter._run.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        HTMLWriter._run.__dict__.__setitem__('stypy_type_store', module_type_store)
        HTMLWriter._run.__dict__.__setitem__('stypy_function_name', 'HTMLWriter._run')
        HTMLWriter._run.__dict__.__setitem__('stypy_param_names_list', [])
        HTMLWriter._run.__dict__.__setitem__('stypy_varargs_param_name', None)
        HTMLWriter._run.__dict__.__setitem__('stypy_kwargs_param_name', None)
        HTMLWriter._run.__dict__.__setitem__('stypy_call_defaults', defaults)
        HTMLWriter._run.__dict__.__setitem__('stypy_call_varargs', varargs)
        HTMLWriter._run.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        HTMLWriter._run.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'HTMLWriter._run', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_run', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_run(...)' code ##################

        # Declaration of the 'ProcessStandin' class

        class ProcessStandin(object, ):
            
            # Assigning a Num to a Name (line 984):
            
            # Assigning a Num to a Name (line 984):
            int_3173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 25), 'int')
            # Assigning a type to the variable 'returncode' (line 984)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 12), 'returncode', int_3173)

            @norecursion
            def communicate(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'communicate'
                module_type_store = module_type_store.open_function_context('communicate', 986, 12, False)
                # Assigning a type to the variable 'self' (line 987)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                ProcessStandin.communicate.__dict__.__setitem__('stypy_localization', localization)
                ProcessStandin.communicate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                ProcessStandin.communicate.__dict__.__setitem__('stypy_type_store', module_type_store)
                ProcessStandin.communicate.__dict__.__setitem__('stypy_function_name', 'ProcessStandin.communicate')
                ProcessStandin.communicate.__dict__.__setitem__('stypy_param_names_list', [])
                ProcessStandin.communicate.__dict__.__setitem__('stypy_varargs_param_name', None)
                ProcessStandin.communicate.__dict__.__setitem__('stypy_kwargs_param_name', None)
                ProcessStandin.communicate.__dict__.__setitem__('stypy_call_defaults', defaults)
                ProcessStandin.communicate.__dict__.__setitem__('stypy_call_varargs', varargs)
                ProcessStandin.communicate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                ProcessStandin.communicate.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'ProcessStandin.communicate', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'communicate', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'communicate(...)' code ##################

                
                # Obtaining an instance of the builtin type 'tuple' (line 987)
                tuple_3174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 987, 23), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 987)
                # Adding element type (line 987)
                unicode_3175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 987, 23), 'unicode', u'')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 987, 23), tuple_3174, unicode_3175)
                # Adding element type (line 987)
                unicode_3176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 987, 27), 'unicode', u'')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 987, 23), tuple_3174, unicode_3176)
                
                # Assigning a type to the variable 'stypy_return_type' (line 987)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 16), 'stypy_return_type', tuple_3174)
                
                # ################# End of 'communicate(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'communicate' in the type store
                # Getting the type of 'stypy_return_type' (line 986)
                stypy_return_type_3177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_3177)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'communicate'
                return stypy_return_type_3177

        
        # Assigning a type to the variable 'ProcessStandin' (line 983)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 983, 8), 'ProcessStandin', ProcessStandin)
        
        # Assigning a Call to a Attribute (line 989):
        
        # Assigning a Call to a Attribute (line 989):
        
        # Call to ProcessStandin(...): (line 989)
        # Processing the call keyword arguments (line 989)
        kwargs_3179 = {}
        # Getting the type of 'ProcessStandin' (line 989)
        ProcessStandin_3178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 21), 'ProcessStandin', False)
        # Calling ProcessStandin(args, kwargs) (line 989)
        ProcessStandin_call_result_3180 = invoke(stypy.reporting.localization.Localization(__file__, 989, 21), ProcessStandin_3178, *[], **kwargs_3179)
        
        # Getting the type of 'self' (line 989)
        self_3181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 8), 'self')
        # Setting the type of the member '_proc' of a type (line 989)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 989, 8), self_3181, '_proc', ProcessStandin_call_result_3180)
        
        # Getting the type of 'self' (line 992)
        self_3182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 11), 'self')
        # Obtaining the member 'embed_frames' of a type (line 992)
        embed_frames_3183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 11), self_3182, 'embed_frames')
        # Testing the type of an if condition (line 992)
        if_condition_3184 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 992, 8), embed_frames_3183)
        # Assigning a type to the variable 'if_condition_3184' (line 992)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 8), 'if_condition_3184', if_condition_3184)
        # SSA begins for if statement (line 992)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 993):
        
        # Assigning a Call to a Name (line 993):
        
        # Call to _embedded_frames(...): (line 993)
        # Processing the call arguments (line 993)
        # Getting the type of 'self' (line 993)
        self_3186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 43), 'self', False)
        # Obtaining the member '_saved_frames' of a type (line 993)
        _saved_frames_3187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 43), self_3186, '_saved_frames')
        # Getting the type of 'self' (line 994)
        self_3188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 43), 'self', False)
        # Obtaining the member 'frame_format' of a type (line 994)
        frame_format_3189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 43), self_3188, 'frame_format')
        # Processing the call keyword arguments (line 993)
        kwargs_3190 = {}
        # Getting the type of '_embedded_frames' (line 993)
        _embedded_frames_3185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 26), '_embedded_frames', False)
        # Calling _embedded_frames(args, kwargs) (line 993)
        _embedded_frames_call_result_3191 = invoke(stypy.reporting.localization.Localization(__file__, 993, 26), _embedded_frames_3185, *[_saved_frames_3187, frame_format_3189], **kwargs_3190)
        
        # Assigning a type to the variable 'fill_frames' (line 993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 12), 'fill_frames', _embedded_frames_call_result_3191)
        # SSA branch for the else part of an if statement (line 992)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 997):
        
        # Assigning a Call to a Name (line 997):
        
        # Call to _included_frames(...): (line 997)
        # Processing the call arguments (line 997)
        # Getting the type of 'self' (line 997)
        self_3193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 43), 'self', False)
        # Obtaining the member '_temp_names' of a type (line 997)
        _temp_names_3194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 43), self_3193, '_temp_names')
        # Getting the type of 'self' (line 998)
        self_3195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 43), 'self', False)
        # Obtaining the member 'frame_format' of a type (line 998)
        frame_format_3196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 43), self_3195, 'frame_format')
        # Processing the call keyword arguments (line 997)
        kwargs_3197 = {}
        # Getting the type of '_included_frames' (line 997)
        _included_frames_3192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 26), '_included_frames', False)
        # Calling _included_frames(args, kwargs) (line 997)
        _included_frames_call_result_3198 = invoke(stypy.reporting.localization.Localization(__file__, 997, 26), _included_frames_3192, *[_temp_names_3194, frame_format_3196], **kwargs_3197)
        
        # Assigning a type to the variable 'fill_frames' (line 997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 12), 'fill_frames', _included_frames_call_result_3198)
        # SSA join for if statement (line 992)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1000):
        
        # Assigning a Call to a Name (line 1000):
        
        # Call to dict(...): (line 1000)
        # Processing the call keyword arguments (line 1000)
        unicode_3200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1000, 38), 'unicode', u'')
        keyword_3201 = unicode_3200
        unicode_3202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, 38), 'unicode', u'')
        keyword_3203 = unicode_3202
        unicode_3204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1002, 41), 'unicode', u'')
        keyword_3205 = unicode_3204
        kwargs_3206 = {'loop_checked': keyword_3203, 'reflect_checked': keyword_3205, 'once_checked': keyword_3201}
        # Getting the type of 'dict' (line 1000)
        dict_3199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 20), 'dict', False)
        # Calling dict(args, kwargs) (line 1000)
        dict_call_result_3207 = invoke(stypy.reporting.localization.Localization(__file__, 1000, 20), dict_3199, *[], **kwargs_3206)
        
        # Assigning a type to the variable 'mode_dict' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'mode_dict', dict_call_result_3207)
        
        # Assigning a Str to a Subscript (line 1003):
        
        # Assigning a Str to a Subscript (line 1003):
        unicode_3208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1003, 52), 'unicode', u'checked')
        # Getting the type of 'mode_dict' (line 1003)
        mode_dict_3209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 8), 'mode_dict')
        # Getting the type of 'self' (line 1003)
        self_3210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 18), 'self')
        # Obtaining the member 'default_mode' of a type (line 1003)
        default_mode_3211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 18), self_3210, 'default_mode')
        unicode_3212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1003, 38), 'unicode', u'_checked')
        # Applying the binary operator '+' (line 1003)
        result_add_3213 = python_operator(stypy.reporting.localization.Localization(__file__, 1003, 18), '+', default_mode_3211, unicode_3212)
        
        # Storing an element on a container (line 1003)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1003, 8), mode_dict_3209, (result_add_3213, unicode_3208))
        
        # Assigning a BinOp to a Name (line 1005):
        
        # Assigning a BinOp to a Name (line 1005):
        int_3214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1005, 19), 'int')
        # Getting the type of 'self' (line 1005)
        self_3215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 27), 'self')
        # Obtaining the member 'fps' of a type (line 1005)
        fps_3216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 27), self_3215, 'fps')
        # Applying the binary operator '//' (line 1005)
        result_floordiv_3217 = python_operator(stypy.reporting.localization.Localization(__file__, 1005, 19), '//', int_3214, fps_3216)
        
        # Assigning a type to the variable 'interval' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 8), 'interval', result_floordiv_3217)
        
        # Call to open(...): (line 1007)
        # Processing the call arguments (line 1007)
        # Getting the type of 'self' (line 1007)
        self_3219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 18), 'self', False)
        # Obtaining the member 'outfile' of a type (line 1007)
        outfile_3220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1007, 18), self_3219, 'outfile')
        unicode_3221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1007, 32), 'unicode', u'w')
        # Processing the call keyword arguments (line 1007)
        kwargs_3222 = {}
        # Getting the type of 'open' (line 1007)
        open_3218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 13), 'open', False)
        # Calling open(args, kwargs) (line 1007)
        open_call_result_3223 = invoke(stypy.reporting.localization.Localization(__file__, 1007, 13), open_3218, *[outfile_3220, unicode_3221], **kwargs_3222)
        
        with_3224 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1007, 13), open_call_result_3223, 'with parameter', '__enter__', '__exit__')

        if with_3224:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 1007)
            enter___3225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1007, 13), open_call_result_3223, '__enter__')
            with_enter_3226 = invoke(stypy.reporting.localization.Localization(__file__, 1007, 13), enter___3225)
            # Assigning a type to the variable 'of' (line 1007)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1007, 13), 'of', with_enter_3226)
            
            # Call to write(...): (line 1008)
            # Processing the call arguments (line 1008)
            # Getting the type of 'JS_INCLUDE' (line 1008)
            JS_INCLUDE_3229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 21), 'JS_INCLUDE', False)
            # Processing the call keyword arguments (line 1008)
            kwargs_3230 = {}
            # Getting the type of 'of' (line 1008)
            of_3227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 12), 'of', False)
            # Obtaining the member 'write' of a type (line 1008)
            write_3228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1008, 12), of_3227, 'write')
            # Calling write(args, kwargs) (line 1008)
            write_call_result_3231 = invoke(stypy.reporting.localization.Localization(__file__, 1008, 12), write_3228, *[JS_INCLUDE_3229], **kwargs_3230)
            
            
            # Call to write(...): (line 1009)
            # Processing the call arguments (line 1009)
            
            # Call to format(...): (line 1009)
            # Processing the call keyword arguments (line 1009)
            
            # Call to uuid4(...): (line 1009)
            # Processing the call keyword arguments (line 1009)
            kwargs_3238 = {}
            # Getting the type of 'uuid' (line 1009)
            uuid_3236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 48), 'uuid', False)
            # Obtaining the member 'uuid4' of a type (line 1009)
            uuid4_3237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 48), uuid_3236, 'uuid4')
            # Calling uuid4(args, kwargs) (line 1009)
            uuid4_call_result_3239 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 48), uuid4_3237, *[], **kwargs_3238)
            
            # Obtaining the member 'hex' of a type (line 1009)
            hex_3240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 48), uuid4_call_result_3239, 'hex')
            keyword_3241 = hex_3240
            
            # Call to len(...): (line 1010)
            # Processing the call arguments (line 1010)
            # Getting the type of 'self' (line 1010)
            self_3243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 57), 'self', False)
            # Obtaining the member '_temp_names' of a type (line 1010)
            _temp_names_3244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 57), self_3243, '_temp_names')
            # Processing the call keyword arguments (line 1010)
            kwargs_3245 = {}
            # Getting the type of 'len' (line 1010)
            len_3242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 53), 'len', False)
            # Calling len(args, kwargs) (line 1010)
            len_call_result_3246 = invoke(stypy.reporting.localization.Localization(__file__, 1010, 53), len_3242, *[_temp_names_3244], **kwargs_3245)
            
            keyword_3247 = len_call_result_3246
            # Getting the type of 'fill_frames' (line 1011)
            fill_frames_3248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 57), 'fill_frames', False)
            keyword_3249 = fill_frames_3248
            # Getting the type of 'interval' (line 1012)
            interval_3250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 54), 'interval', False)
            keyword_3251 = interval_3250
            # Getting the type of 'mode_dict' (line 1013)
            mode_dict_3252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 47), 'mode_dict', False)
            kwargs_3253 = {'mode_dict_3252': mode_dict_3252, 'fill_frames': keyword_3249, 'id': keyword_3241, 'interval': keyword_3251, 'Nframes': keyword_3247}
            # Getting the type of 'DISPLAY_TEMPLATE' (line 1009)
            DISPLAY_TEMPLATE_3234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 21), 'DISPLAY_TEMPLATE', False)
            # Obtaining the member 'format' of a type (line 1009)
            format_3235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 21), DISPLAY_TEMPLATE_3234, 'format')
            # Calling format(args, kwargs) (line 1009)
            format_call_result_3254 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 21), format_3235, *[], **kwargs_3253)
            
            # Processing the call keyword arguments (line 1009)
            kwargs_3255 = {}
            # Getting the type of 'of' (line 1009)
            of_3232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 12), 'of', False)
            # Obtaining the member 'write' of a type (line 1009)
            write_3233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 12), of_3232, 'write')
            # Calling write(args, kwargs) (line 1009)
            write_call_result_3256 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 12), write_3233, *[format_call_result_3254], **kwargs_3255)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 1007)
            exit___3257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1007, 13), open_call_result_3223, '__exit__')
            with_exit_3258 = invoke(stypy.reporting.localization.Localization(__file__, 1007, 13), exit___3257, None, None, None)

        
        # ################# End of '_run(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_run' in the type store
        # Getting the type of 'stypy_return_type' (line 980)
        stypy_return_type_3259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3259)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_run'
        return stypy_return_type_3259


# Assigning a type to the variable 'HTMLWriter' (line 905)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 0), 'HTMLWriter', HTMLWriter)

# Assigning a List to a Name (line 907):

# Obtaining an instance of the builtin type 'list' (line 907)
list_3260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 24), 'list')
# Adding type elements to the builtin type 'list' instance (line 907)
# Adding element type (line 907)
unicode_3261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 25), 'unicode', u'png')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 907, 24), list_3260, unicode_3261)
# Adding element type (line 907)
unicode_3262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 32), 'unicode', u'jpeg')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 907, 24), list_3260, unicode_3262)
# Adding element type (line 907)
unicode_3263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 40), 'unicode', u'tiff')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 907, 24), list_3260, unicode_3263)
# Adding element type (line 907)
unicode_3264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 48), 'unicode', u'svg')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 907, 24), list_3260, unicode_3264)

# Getting the type of 'HTMLWriter'
HTMLWriter_3265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'HTMLWriter')
# Setting the type of the member 'supported_formats' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), HTMLWriter_3265, 'supported_formats', list_3260)

# Assigning a Str to a Name (line 908):
unicode_3266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, 15), 'unicode', u'animation.html_args')
# Getting the type of 'HTMLWriter'
HTMLWriter_3267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'HTMLWriter')
# Setting the type of the member 'args_key' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), HTMLWriter_3267, 'args_key', unicode_3266)
# Declaration of the 'Animation' class

class Animation(object, ):
    unicode_3268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, (-1)), 'unicode', u'This class wraps the creation of an animation using matplotlib.\n\n    It is only a base class which should be subclassed to provide\n    needed behavior.\n\n    This class is not typically used directly.\n\n    Parameters\n    ----------\n    fig : matplotlib.figure.Figure\n       The figure object that is used to get draw, resize, and any\n       other needed events.\n\n    event_source : object, optional\n       A class that can run a callback when desired events\n       are generated, as well as be stopped and started.\n\n       Examples include timers (see :class:`TimedAnimation`) and file\n       system notifications.\n\n    blit : bool, optional\n       controls whether blitting is used to optimize drawing.  Defaults\n       to ``False``.\n\n    See Also\n    --------\n    FuncAnimation,  ArtistAnimation\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1046)
        None_3269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 41), 'None')
        # Getting the type of 'False' (line 1046)
        False_3270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 52), 'False')
        defaults = [None_3269, False_3270]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1046, 4, False)
        # Assigning a type to the variable 'self' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation.__init__', ['fig', 'event_source', 'blit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fig', 'event_source', 'blit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1047):
        
        # Assigning a Name to a Attribute (line 1047):
        # Getting the type of 'fig' (line 1047)
        fig_3271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 20), 'fig')
        # Getting the type of 'self' (line 1047)
        self_3272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 8), 'self')
        # Setting the type of the member '_fig' of a type (line 1047)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 8), self_3272, '_fig', fig_3271)
        
        # Assigning a BoolOp to a Attribute (line 1051):
        
        # Assigning a BoolOp to a Attribute (line 1051):
        
        # Evaluating a boolean operation
        # Getting the type of 'blit' (line 1051)
        blit_3273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 21), 'blit')
        # Getting the type of 'fig' (line 1051)
        fig_3274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 30), 'fig')
        # Obtaining the member 'canvas' of a type (line 1051)
        canvas_3275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 30), fig_3274, 'canvas')
        # Obtaining the member 'supports_blit' of a type (line 1051)
        supports_blit_3276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 30), canvas_3275, 'supports_blit')
        # Applying the binary operator 'and' (line 1051)
        result_and_keyword_3277 = python_operator(stypy.reporting.localization.Localization(__file__, 1051, 21), 'and', blit_3273, supports_blit_3276)
        
        # Getting the type of 'self' (line 1051)
        self_3278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 8), 'self')
        # Setting the type of the member '_blit' of a type (line 1051)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 8), self_3278, '_blit', result_and_keyword_3277)
        
        # Assigning a Call to a Attribute (line 1057):
        
        # Assigning a Call to a Attribute (line 1057):
        
        # Call to new_frame_seq(...): (line 1057)
        # Processing the call keyword arguments (line 1057)
        kwargs_3281 = {}
        # Getting the type of 'self' (line 1057)
        self_3279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 25), 'self', False)
        # Obtaining the member 'new_frame_seq' of a type (line 1057)
        new_frame_seq_3280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 25), self_3279, 'new_frame_seq')
        # Calling new_frame_seq(args, kwargs) (line 1057)
        new_frame_seq_call_result_3282 = invoke(stypy.reporting.localization.Localization(__file__, 1057, 25), new_frame_seq_3280, *[], **kwargs_3281)
        
        # Getting the type of 'self' (line 1057)
        self_3283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 8), 'self')
        # Setting the type of the member 'frame_seq' of a type (line 1057)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 8), self_3283, 'frame_seq', new_frame_seq_call_result_3282)
        
        # Assigning a Name to a Attribute (line 1058):
        
        # Assigning a Name to a Attribute (line 1058):
        # Getting the type of 'event_source' (line 1058)
        event_source_3284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 28), 'event_source')
        # Getting the type of 'self' (line 1058)
        self_3285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 8), 'self')
        # Setting the type of the member 'event_source' of a type (line 1058)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1058, 8), self_3285, 'event_source', event_source_3284)
        
        # Assigning a Call to a Attribute (line 1062):
        
        # Assigning a Call to a Attribute (line 1062):
        
        # Call to mpl_connect(...): (line 1062)
        # Processing the call arguments (line 1062)
        unicode_3289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1062, 53), 'unicode', u'draw_event')
        # Getting the type of 'self' (line 1062)
        self_3290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 67), 'self', False)
        # Obtaining the member '_start' of a type (line 1062)
        _start_3291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 67), self_3290, '_start')
        # Processing the call keyword arguments (line 1062)
        kwargs_3292 = {}
        # Getting the type of 'fig' (line 1062)
        fig_3286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 30), 'fig', False)
        # Obtaining the member 'canvas' of a type (line 1062)
        canvas_3287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 30), fig_3286, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 1062)
        mpl_connect_3288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 30), canvas_3287, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1062)
        mpl_connect_call_result_3293 = invoke(stypy.reporting.localization.Localization(__file__, 1062, 30), mpl_connect_3288, *[unicode_3289, _start_3291], **kwargs_3292)
        
        # Getting the type of 'self' (line 1062)
        self_3294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 8), 'self')
        # Setting the type of the member '_first_draw_id' of a type (line 1062)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 8), self_3294, '_first_draw_id', mpl_connect_call_result_3293)
        
        # Assigning a Call to a Attribute (line 1066):
        
        # Assigning a Call to a Attribute (line 1066):
        
        # Call to mpl_connect(...): (line 1066)
        # Processing the call arguments (line 1066)
        unicode_3299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 54), 'unicode', u'close_event')
        # Getting the type of 'self' (line 1067)
        self_3300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 54), 'self', False)
        # Obtaining the member '_stop' of a type (line 1067)
        _stop_3301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 54), self_3300, '_stop')
        # Processing the call keyword arguments (line 1066)
        kwargs_3302 = {}
        # Getting the type of 'self' (line 1066)
        self_3295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 25), 'self', False)
        # Obtaining the member '_fig' of a type (line 1066)
        _fig_3296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1066, 25), self_3295, '_fig')
        # Obtaining the member 'canvas' of a type (line 1066)
        canvas_3297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1066, 25), _fig_3296, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 1066)
        mpl_connect_3298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1066, 25), canvas_3297, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1066)
        mpl_connect_call_result_3303 = invoke(stypy.reporting.localization.Localization(__file__, 1066, 25), mpl_connect_3298, *[unicode_3299, _stop_3301], **kwargs_3302)
        
        # Getting the type of 'self' (line 1066)
        self_3304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 8), 'self')
        # Setting the type of the member '_close_id' of a type (line 1066)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1066, 8), self_3304, '_close_id', mpl_connect_call_result_3303)
        
        # Getting the type of 'self' (line 1068)
        self_3305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 11), 'self')
        # Obtaining the member '_blit' of a type (line 1068)
        _blit_3306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 11), self_3305, '_blit')
        # Testing the type of an if condition (line 1068)
        if_condition_3307 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1068, 8), _blit_3306)
        # Assigning a type to the variable 'if_condition_3307' (line 1068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), 'if_condition_3307', if_condition_3307)
        # SSA begins for if statement (line 1068)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _setup_blit(...): (line 1069)
        # Processing the call keyword arguments (line 1069)
        kwargs_3310 = {}
        # Getting the type of 'self' (line 1069)
        self_3308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 12), 'self', False)
        # Obtaining the member '_setup_blit' of a type (line 1069)
        _setup_blit_3309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1069, 12), self_3308, '_setup_blit')
        # Calling _setup_blit(args, kwargs) (line 1069)
        _setup_blit_call_result_3311 = invoke(stypy.reporting.localization.Localization(__file__, 1069, 12), _setup_blit_3309, *[], **kwargs_3310)
        
        # SSA join for if statement (line 1068)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _start(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_start'
        module_type_store = module_type_store.open_function_context('_start', 1071, 4, False)
        # Assigning a type to the variable 'self' (line 1072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1072, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation._start.__dict__.__setitem__('stypy_localization', localization)
        Animation._start.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation._start.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation._start.__dict__.__setitem__('stypy_function_name', 'Animation._start')
        Animation._start.__dict__.__setitem__('stypy_param_names_list', [])
        Animation._start.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Animation._start.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation._start.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation._start.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation._start.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation._start.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation._start', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_start', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_start(...)' code ##################

        unicode_3312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1075, (-1)), 'unicode', u'\n        Starts interactive animation. Adds the draw frame command to the GUI\n        handler, calls show to start the event loop.\n        ')
        
        # Call to mpl_disconnect(...): (line 1077)
        # Processing the call arguments (line 1077)
        # Getting the type of 'self' (line 1077)
        self_3317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 40), 'self', False)
        # Obtaining the member '_first_draw_id' of a type (line 1077)
        _first_draw_id_3318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 40), self_3317, '_first_draw_id')
        # Processing the call keyword arguments (line 1077)
        kwargs_3319 = {}
        # Getting the type of 'self' (line 1077)
        self_3313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 8), 'self', False)
        # Obtaining the member '_fig' of a type (line 1077)
        _fig_3314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 8), self_3313, '_fig')
        # Obtaining the member 'canvas' of a type (line 1077)
        canvas_3315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 8), _fig_3314, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 1077)
        mpl_disconnect_3316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 8), canvas_3315, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 1077)
        mpl_disconnect_call_result_3320 = invoke(stypy.reporting.localization.Localization(__file__, 1077, 8), mpl_disconnect_3316, *[_first_draw_id_3318], **kwargs_3319)
        
        
        # Assigning a Name to a Attribute (line 1078):
        
        # Assigning a Name to a Attribute (line 1078):
        # Getting the type of 'None' (line 1078)
        None_3321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 30), 'None')
        # Getting the type of 'self' (line 1078)
        self_3322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 8), 'self')
        # Setting the type of the member '_first_draw_id' of a type (line 1078)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 8), self_3322, '_first_draw_id', None_3321)
        
        # Call to _init_draw(...): (line 1081)
        # Processing the call keyword arguments (line 1081)
        kwargs_3325 = {}
        # Getting the type of 'self' (line 1081)
        self_3323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 8), 'self', False)
        # Obtaining the member '_init_draw' of a type (line 1081)
        _init_draw_3324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1081, 8), self_3323, '_init_draw')
        # Calling _init_draw(args, kwargs) (line 1081)
        _init_draw_call_result_3326 = invoke(stypy.reporting.localization.Localization(__file__, 1081, 8), _init_draw_3324, *[], **kwargs_3325)
        
        
        # Call to add_callback(...): (line 1085)
        # Processing the call arguments (line 1085)
        # Getting the type of 'self' (line 1085)
        self_3330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 39), 'self', False)
        # Obtaining the member '_step' of a type (line 1085)
        _step_3331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 39), self_3330, '_step')
        # Processing the call keyword arguments (line 1085)
        kwargs_3332 = {}
        # Getting the type of 'self' (line 1085)
        self_3327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 8), 'self', False)
        # Obtaining the member 'event_source' of a type (line 1085)
        event_source_3328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 8), self_3327, 'event_source')
        # Obtaining the member 'add_callback' of a type (line 1085)
        add_callback_3329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 8), event_source_3328, 'add_callback')
        # Calling add_callback(args, kwargs) (line 1085)
        add_callback_call_result_3333 = invoke(stypy.reporting.localization.Localization(__file__, 1085, 8), add_callback_3329, *[_step_3331], **kwargs_3332)
        
        
        # Call to start(...): (line 1086)
        # Processing the call keyword arguments (line 1086)
        kwargs_3337 = {}
        # Getting the type of 'self' (line 1086)
        self_3334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 8), 'self', False)
        # Obtaining the member 'event_source' of a type (line 1086)
        event_source_3335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 8), self_3334, 'event_source')
        # Obtaining the member 'start' of a type (line 1086)
        start_3336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 8), event_source_3335, 'start')
        # Calling start(args, kwargs) (line 1086)
        start_call_result_3338 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 8), start_3336, *[], **kwargs_3337)
        
        
        # ################# End of '_start(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_start' in the type store
        # Getting the type of 'stypy_return_type' (line 1071)
        stypy_return_type_3339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3339)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_start'
        return stypy_return_type_3339


    @norecursion
    def _stop(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stop'
        module_type_store = module_type_store.open_function_context('_stop', 1088, 4, False)
        # Assigning a type to the variable 'self' (line 1089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation._stop.__dict__.__setitem__('stypy_localization', localization)
        Animation._stop.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation._stop.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation._stop.__dict__.__setitem__('stypy_function_name', 'Animation._stop')
        Animation._stop.__dict__.__setitem__('stypy_param_names_list', [])
        Animation._stop.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Animation._stop.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation._stop.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation._stop.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation._stop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation._stop.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation._stop', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_stop', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_stop(...)' code ##################

        
        # Getting the type of 'self' (line 1090)
        self_3340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 11), 'self')
        # Obtaining the member '_blit' of a type (line 1090)
        _blit_3341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 11), self_3340, '_blit')
        # Testing the type of an if condition (line 1090)
        if_condition_3342 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1090, 8), _blit_3341)
        # Assigning a type to the variable 'if_condition_3342' (line 1090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'if_condition_3342', if_condition_3342)
        # SSA begins for if statement (line 1090)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to mpl_disconnect(...): (line 1091)
        # Processing the call arguments (line 1091)
        # Getting the type of 'self' (line 1091)
        self_3347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 44), 'self', False)
        # Obtaining the member '_resize_id' of a type (line 1091)
        _resize_id_3348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 44), self_3347, '_resize_id')
        # Processing the call keyword arguments (line 1091)
        kwargs_3349 = {}
        # Getting the type of 'self' (line 1091)
        self_3343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 12), 'self', False)
        # Obtaining the member '_fig' of a type (line 1091)
        _fig_3344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 12), self_3343, '_fig')
        # Obtaining the member 'canvas' of a type (line 1091)
        canvas_3345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 12), _fig_3344, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 1091)
        mpl_disconnect_3346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 12), canvas_3345, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 1091)
        mpl_disconnect_call_result_3350 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 12), mpl_disconnect_3346, *[_resize_id_3348], **kwargs_3349)
        
        # SSA join for if statement (line 1090)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to mpl_disconnect(...): (line 1092)
        # Processing the call arguments (line 1092)
        # Getting the type of 'self' (line 1092)
        self_3355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 40), 'self', False)
        # Obtaining the member '_close_id' of a type (line 1092)
        _close_id_3356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 40), self_3355, '_close_id')
        # Processing the call keyword arguments (line 1092)
        kwargs_3357 = {}
        # Getting the type of 'self' (line 1092)
        self_3351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 8), 'self', False)
        # Obtaining the member '_fig' of a type (line 1092)
        _fig_3352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 8), self_3351, '_fig')
        # Obtaining the member 'canvas' of a type (line 1092)
        canvas_3353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 8), _fig_3352, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 1092)
        mpl_disconnect_3354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 8), canvas_3353, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 1092)
        mpl_disconnect_call_result_3358 = invoke(stypy.reporting.localization.Localization(__file__, 1092, 8), mpl_disconnect_3354, *[_close_id_3356], **kwargs_3357)
        
        
        # Call to remove_callback(...): (line 1093)
        # Processing the call arguments (line 1093)
        # Getting the type of 'self' (line 1093)
        self_3362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 42), 'self', False)
        # Obtaining the member '_step' of a type (line 1093)
        _step_3363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 42), self_3362, '_step')
        # Processing the call keyword arguments (line 1093)
        kwargs_3364 = {}
        # Getting the type of 'self' (line 1093)
        self_3359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 8), 'self', False)
        # Obtaining the member 'event_source' of a type (line 1093)
        event_source_3360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 8), self_3359, 'event_source')
        # Obtaining the member 'remove_callback' of a type (line 1093)
        remove_callback_3361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 8), event_source_3360, 'remove_callback')
        # Calling remove_callback(args, kwargs) (line 1093)
        remove_callback_call_result_3365 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 8), remove_callback_3361, *[_step_3363], **kwargs_3364)
        
        
        # Assigning a Name to a Attribute (line 1094):
        
        # Assigning a Name to a Attribute (line 1094):
        # Getting the type of 'None' (line 1094)
        None_3366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 28), 'None')
        # Getting the type of 'self' (line 1094)
        self_3367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 8), 'self')
        # Setting the type of the member 'event_source' of a type (line 1094)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 8), self_3367, 'event_source', None_3366)
        
        # ################# End of '_stop(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_stop' in the type store
        # Getting the type of 'stypy_return_type' (line 1088)
        stypy_return_type_3368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3368)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stop'
        return stypy_return_type_3368


    @norecursion
    def save(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1096)
        None_3369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 36), 'None')
        # Getting the type of 'None' (line 1096)
        None_3370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 46), 'None')
        # Getting the type of 'None' (line 1096)
        None_3371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 56), 'None')
        # Getting the type of 'None' (line 1096)
        None_3372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 68), 'None')
        # Getting the type of 'None' (line 1097)
        None_3373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 21), 'None')
        # Getting the type of 'None' (line 1097)
        None_3374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 38), 'None')
        # Getting the type of 'None' (line 1097)
        None_3375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 53), 'None')
        # Getting the type of 'None' (line 1097)
        None_3376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 70), 'None')
        # Getting the type of 'None' (line 1098)
        None_3377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 28), 'None')
        defaults = [None_3369, None_3370, None_3371, None_3372, None_3373, None_3374, None_3375, None_3376, None_3377]
        # Create a new context for function 'save'
        module_type_store = module_type_store.open_function_context('save', 1096, 4, False)
        # Assigning a type to the variable 'self' (line 1097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1097, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation.save.__dict__.__setitem__('stypy_localization', localization)
        Animation.save.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation.save.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation.save.__dict__.__setitem__('stypy_function_name', 'Animation.save')
        Animation.save.__dict__.__setitem__('stypy_param_names_list', ['filename', 'writer', 'fps', 'dpi', 'codec', 'bitrate', 'extra_args', 'metadata', 'extra_anim', 'savefig_kwargs'])
        Animation.save.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation.save.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation.save.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation.save.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation.save.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation.save.__dict__.__setitem__('stypy_declared_arg_number', 11)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation.save', ['filename', 'writer', 'fps', 'dpi', 'codec', 'bitrate', 'extra_args', 'metadata', 'extra_anim', 'savefig_kwargs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'save', localization, ['filename', 'writer', 'fps', 'dpi', 'codec', 'bitrate', 'extra_args', 'metadata', 'extra_anim', 'savefig_kwargs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'save(...)' code ##################

        unicode_3378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1162, (-1)), 'unicode', u"Saves a movie file by drawing every frame.\n\n        Parameters\n        ----------\n\n        filename : str\n            The output filename, e.g., :file:`mymovie.mp4`.\n\n        writer : :class:`MovieWriter` or str, optional\n            A `MovieWriter` instance to use or a key that identifies a\n            class to use, such as 'ffmpeg' or 'mencoder'. If ``None``,\n            defaults to ``rcParams['animation.writer']``.\n\n        fps : number, optional\n           Frames per second in the movie. Defaults to ``None``, which will use\n           the animation's specified interval to set the frames per second.\n\n        dpi : number, optional\n           Controls the dots per inch for the movie frames.  This\n           combined with the figure's size in inches controls the size of\n           the movie.  If ``None``, defaults to ``rcparam['savefig.dpi']``.\n\n        codec : str, optional\n           The video codec to be used. Not all codecs are supported by\n           a given :class:`MovieWriter`. If ``None``,\n           default to ``rcParams['animation.codec']``.\n\n        bitrate : number, optional\n           Specifies the number of bits used per second in the compressed\n           movie, in kilobits per second. A higher number means a higher\n           quality movie, but at the cost of increased file size. If ``None``,\n           defaults to ``rcParam['animation.bitrate']``.\n\n        extra_args : list, optional\n           List of extra string arguments to be passed to the\n           underlying movie utility. If ``None``, defaults to\n           ``rcParams['animation.extra_args']``\n\n        metadata : Dict[str, str], optional\n           Dictionary of keys and values for metadata to include in\n           the output file. Some keys that may be of use include:\n           title, artist, genre, subject, copyright, srcform, comment.\n\n        extra_anim : list, optional\n           Additional `Animation` objects that should be included\n           in the saved movie file. These need to be from the same\n           `matplotlib.figure.Figure` instance. Also, animation frames will\n           just be simply combined, so there should be a 1:1 correspondence\n           between the frames from the different animations.\n\n        savefig_kwargs : dict, optional\n           Is a dictionary containing keyword arguments to be passed\n           on to the `savefig` command which is called repeatedly to\n           save the individual frames.\n\n        Notes\n        -----\n        fps, codec, bitrate, extra_args, metadata are used to\n        construct a :class:`MovieWriter` instance and can only be\n        passed if `writer` is a string.  If they are passed as\n        non-`None` and ``writer`` is a :class:`MovieWriter`, a\n        `RuntimeError` will be raised.\n\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 1165)
        # Getting the type of 'writer' (line 1165)
        writer_3379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 11), 'writer')
        # Getting the type of 'None' (line 1165)
        None_3380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 21), 'None')
        
        (may_be_3381, more_types_in_union_3382) = may_be_none(writer_3379, None_3380)

        if may_be_3381:

            if more_types_in_union_3382:
                # Runtime conditional SSA (line 1165)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 1166):
            
            # Assigning a Subscript to a Name (line 1166):
            
            # Obtaining the type of the subscript
            unicode_3383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1166, 30), 'unicode', u'animation.writer')
            # Getting the type of 'rcParams' (line 1166)
            rcParams_3384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 21), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1166)
            getitem___3385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 21), rcParams_3384, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1166)
            subscript_call_result_3386 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 21), getitem___3385, unicode_3383)
            
            # Assigning a type to the variable 'writer' (line 1166)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 12), 'writer', subscript_call_result_3386)

            if more_types_in_union_3382:
                # Runtime conditional SSA for else branch (line 1165)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_3381) or more_types_in_union_3382):
            
            
            # Evaluating a boolean operation
            
            
            # Call to isinstance(...): (line 1167)
            # Processing the call arguments (line 1167)
            # Getting the type of 'writer' (line 1167)
            writer_3388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 29), 'writer', False)
            # Getting the type of 'six' (line 1167)
            six_3389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 37), 'six', False)
            # Obtaining the member 'string_types' of a type (line 1167)
            string_types_3390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1167, 37), six_3389, 'string_types')
            # Processing the call keyword arguments (line 1167)
            kwargs_3391 = {}
            # Getting the type of 'isinstance' (line 1167)
            isinstance_3387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 18), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1167)
            isinstance_call_result_3392 = invoke(stypy.reporting.localization.Localization(__file__, 1167, 18), isinstance_3387, *[writer_3388, string_types_3390], **kwargs_3391)
            
            # Applying the 'not' unary operator (line 1167)
            result_not__3393 = python_operator(stypy.reporting.localization.Localization(__file__, 1167, 14), 'not', isinstance_call_result_3392)
            
            
            # Call to any(...): (line 1168)
            # Processing the call arguments (line 1168)
            # Calculating generator expression
            module_type_store = module_type_store.open_function_context('list comprehension expression', 1168, 20, True)
            # Calculating comprehension expression
            
            # Obtaining an instance of the builtin type 'tuple' (line 1169)
            tuple_3398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1169, 32), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1169)
            # Adding element type (line 1169)
            # Getting the type of 'fps' (line 1169)
            fps_3399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 32), 'fps', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1169, 32), tuple_3398, fps_3399)
            # Adding element type (line 1169)
            # Getting the type of 'codec' (line 1169)
            codec_3400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 37), 'codec', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1169, 32), tuple_3398, codec_3400)
            # Adding element type (line 1169)
            # Getting the type of 'bitrate' (line 1169)
            bitrate_3401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 44), 'bitrate', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1169, 32), tuple_3398, bitrate_3401)
            # Adding element type (line 1169)
            # Getting the type of 'extra_args' (line 1169)
            extra_args_3402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 53), 'extra_args', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1169, 32), tuple_3398, extra_args_3402)
            # Adding element type (line 1169)
            # Getting the type of 'metadata' (line 1169)
            metadata_3403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 65), 'metadata', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1169, 32), tuple_3398, metadata_3403)
            
            comprehension_3404 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1168, 20), tuple_3398)
            # Assigning a type to the variable 'arg' (line 1168)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1168, 20), 'arg', comprehension_3404)
            
            # Getting the type of 'arg' (line 1168)
            arg_3395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 20), 'arg', False)
            # Getting the type of 'None' (line 1168)
            None_3396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 31), 'None', False)
            # Applying the binary operator 'isnot' (line 1168)
            result_is_not_3397 = python_operator(stypy.reporting.localization.Localization(__file__, 1168, 20), 'isnot', arg_3395, None_3396)
            
            list_3405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1168, 20), 'list')
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1168, 20), list_3405, result_is_not_3397)
            # Processing the call keyword arguments (line 1168)
            kwargs_3406 = {}
            # Getting the type of 'any' (line 1168)
            any_3394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 16), 'any', False)
            # Calling any(args, kwargs) (line 1168)
            any_call_result_3407 = invoke(stypy.reporting.localization.Localization(__file__, 1168, 16), any_3394, *[list_3405], **kwargs_3406)
            
            # Applying the binary operator 'and' (line 1167)
            result_and_keyword_3408 = python_operator(stypy.reporting.localization.Localization(__file__, 1167, 14), 'and', result_not__3393, any_call_result_3407)
            
            # Testing the type of an if condition (line 1167)
            if_condition_3409 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1167, 13), result_and_keyword_3408)
            # Assigning a type to the variable 'if_condition_3409' (line 1167)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1167, 13), 'if_condition_3409', if_condition_3409)
            # SSA begins for if statement (line 1167)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to RuntimeError(...): (line 1170)
            # Processing the call arguments (line 1170)
            unicode_3411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1170, 31), 'unicode', u'Passing in values for arguments fps, codec, bitrate, extra_args, or metadata is not supported when writer is an existing MovieWriter instance. These should instead be passed as arguments when creating the MovieWriter instance.')
            # Processing the call keyword arguments (line 1170)
            kwargs_3412 = {}
            # Getting the type of 'RuntimeError' (line 1170)
            RuntimeError_3410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 18), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 1170)
            RuntimeError_call_result_3413 = invoke(stypy.reporting.localization.Localization(__file__, 1170, 18), RuntimeError_3410, *[unicode_3411], **kwargs_3412)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1170, 12), RuntimeError_call_result_3413, 'raise parameter', BaseException)
            # SSA join for if statement (line 1167)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_3381 and more_types_in_union_3382):
                # SSA join for if statement (line 1165)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1177)
        # Getting the type of 'savefig_kwargs' (line 1177)
        savefig_kwargs_3414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 11), 'savefig_kwargs')
        # Getting the type of 'None' (line 1177)
        None_3415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 29), 'None')
        
        (may_be_3416, more_types_in_union_3417) = may_be_none(savefig_kwargs_3414, None_3415)

        if may_be_3416:

            if more_types_in_union_3417:
                # Runtime conditional SSA (line 1177)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Dict to a Name (line 1178):
            
            # Assigning a Dict to a Name (line 1178):
            
            # Obtaining an instance of the builtin type 'dict' (line 1178)
            dict_3418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1178, 29), 'dict')
            # Adding type elements to the builtin type 'dict' instance (line 1178)
            
            # Assigning a type to the variable 'savefig_kwargs' (line 1178)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1178, 12), 'savefig_kwargs', dict_3418)

            if more_types_in_union_3417:
                # SSA join for if statement (line 1177)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'self' (line 1182)
        self_3419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 11), 'self')
        # Obtaining the member '_first_draw_id' of a type (line 1182)
        _first_draw_id_3420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 11), self_3419, '_first_draw_id')
        # Getting the type of 'None' (line 1182)
        None_3421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 38), 'None')
        # Applying the binary operator 'isnot' (line 1182)
        result_is_not_3422 = python_operator(stypy.reporting.localization.Localization(__file__, 1182, 11), 'isnot', _first_draw_id_3420, None_3421)
        
        # Testing the type of an if condition (line 1182)
        if_condition_3423 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1182, 8), result_is_not_3422)
        # Assigning a type to the variable 'if_condition_3423' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'if_condition_3423', if_condition_3423)
        # SSA begins for if statement (line 1182)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to mpl_disconnect(...): (line 1183)
        # Processing the call arguments (line 1183)
        # Getting the type of 'self' (line 1183)
        self_3428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 44), 'self', False)
        # Obtaining the member '_first_draw_id' of a type (line 1183)
        _first_draw_id_3429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 44), self_3428, '_first_draw_id')
        # Processing the call keyword arguments (line 1183)
        kwargs_3430 = {}
        # Getting the type of 'self' (line 1183)
        self_3424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 12), 'self', False)
        # Obtaining the member '_fig' of a type (line 1183)
        _fig_3425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 12), self_3424, '_fig')
        # Obtaining the member 'canvas' of a type (line 1183)
        canvas_3426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 12), _fig_3425, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 1183)
        mpl_disconnect_3427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 12), canvas_3426, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 1183)
        mpl_disconnect_call_result_3431 = invoke(stypy.reporting.localization.Localization(__file__, 1183, 12), mpl_disconnect_3427, *[_first_draw_id_3429], **kwargs_3430)
        
        
        # Assigning a Name to a Name (line 1184):
        
        # Assigning a Name to a Name (line 1184):
        # Getting the type of 'True' (line 1184)
        True_3432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 35), 'True')
        # Assigning a type to the variable 'reconnect_first_draw' (line 1184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1184, 12), 'reconnect_first_draw', True_3432)
        # SSA branch for the else part of an if statement (line 1182)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1186):
        
        # Assigning a Name to a Name (line 1186):
        # Getting the type of 'False' (line 1186)
        False_3433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 35), 'False')
        # Assigning a type to the variable 'reconnect_first_draw' (line 1186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 12), 'reconnect_first_draw', False_3433)
        # SSA join for if statement (line 1182)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'fps' (line 1188)
        fps_3434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 11), 'fps')
        # Getting the type of 'None' (line 1188)
        None_3435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 18), 'None')
        # Applying the binary operator 'is' (line 1188)
        result_is__3436 = python_operator(stypy.reporting.localization.Localization(__file__, 1188, 11), 'is', fps_3434, None_3435)
        
        
        # Call to hasattr(...): (line 1188)
        # Processing the call arguments (line 1188)
        # Getting the type of 'self' (line 1188)
        self_3438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 35), 'self', False)
        unicode_3439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1188, 41), 'unicode', u'_interval')
        # Processing the call keyword arguments (line 1188)
        kwargs_3440 = {}
        # Getting the type of 'hasattr' (line 1188)
        hasattr_3437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 27), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 1188)
        hasattr_call_result_3441 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 27), hasattr_3437, *[self_3438, unicode_3439], **kwargs_3440)
        
        # Applying the binary operator 'and' (line 1188)
        result_and_keyword_3442 = python_operator(stypy.reporting.localization.Localization(__file__, 1188, 11), 'and', result_is__3436, hasattr_call_result_3441)
        
        # Testing the type of an if condition (line 1188)
        if_condition_3443 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1188, 8), result_and_keyword_3442)
        # Assigning a type to the variable 'if_condition_3443' (line 1188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 8), 'if_condition_3443', if_condition_3443)
        # SSA begins for if statement (line 1188)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1190):
        
        # Assigning a BinOp to a Name (line 1190):
        float_3444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 18), 'float')
        # Getting the type of 'self' (line 1190)
        self_3445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 26), 'self')
        # Obtaining the member '_interval' of a type (line 1190)
        _interval_3446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 26), self_3445, '_interval')
        # Applying the binary operator 'div' (line 1190)
        result_div_3447 = python_operator(stypy.reporting.localization.Localization(__file__, 1190, 18), 'div', float_3444, _interval_3446)
        
        # Assigning a type to the variable 'fps' (line 1190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1190, 12), 'fps', result_div_3447)
        # SSA join for if statement (line 1188)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1193)
        # Getting the type of 'dpi' (line 1193)
        dpi_3448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 11), 'dpi')
        # Getting the type of 'None' (line 1193)
        None_3449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 18), 'None')
        
        (may_be_3450, more_types_in_union_3451) = may_be_none(dpi_3448, None_3449)

        if may_be_3450:

            if more_types_in_union_3451:
                # Runtime conditional SSA (line 1193)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 1194):
            
            # Assigning a Subscript to a Name (line 1194):
            
            # Obtaining the type of the subscript
            unicode_3452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 27), 'unicode', u'savefig.dpi')
            # Getting the type of 'rcParams' (line 1194)
            rcParams_3453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 18), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1194)
            getitem___3454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1194, 18), rcParams_3453, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1194)
            subscript_call_result_3455 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 18), getitem___3454, unicode_3452)
            
            # Assigning a type to the variable 'dpi' (line 1194)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 12), 'dpi', subscript_call_result_3455)

            if more_types_in_union_3451:
                # SSA join for if statement (line 1193)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'dpi' (line 1195)
        dpi_3456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 11), 'dpi')
        unicode_3457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1195, 18), 'unicode', u'figure')
        # Applying the binary operator '==' (line 1195)
        result_eq_3458 = python_operator(stypy.reporting.localization.Localization(__file__, 1195, 11), '==', dpi_3456, unicode_3457)
        
        # Testing the type of an if condition (line 1195)
        if_condition_3459 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1195, 8), result_eq_3458)
        # Assigning a type to the variable 'if_condition_3459' (line 1195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 8), 'if_condition_3459', if_condition_3459)
        # SSA begins for if statement (line 1195)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1196):
        
        # Assigning a Attribute to a Name (line 1196):
        # Getting the type of 'self' (line 1196)
        self_3460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 18), 'self')
        # Obtaining the member '_fig' of a type (line 1196)
        _fig_3461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1196, 18), self_3460, '_fig')
        # Obtaining the member 'dpi' of a type (line 1196)
        dpi_3462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1196, 18), _fig_3461, 'dpi')
        # Assigning a type to the variable 'dpi' (line 1196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1196, 12), 'dpi', dpi_3462)
        # SSA join for if statement (line 1195)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1198)
        # Getting the type of 'codec' (line 1198)
        codec_3463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 11), 'codec')
        # Getting the type of 'None' (line 1198)
        None_3464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 20), 'None')
        
        (may_be_3465, more_types_in_union_3466) = may_be_none(codec_3463, None_3464)

        if may_be_3465:

            if more_types_in_union_3466:
                # Runtime conditional SSA (line 1198)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 1199):
            
            # Assigning a Subscript to a Name (line 1199):
            
            # Obtaining the type of the subscript
            unicode_3467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 29), 'unicode', u'animation.codec')
            # Getting the type of 'rcParams' (line 1199)
            rcParams_3468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 20), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1199)
            getitem___3469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 20), rcParams_3468, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1199)
            subscript_call_result_3470 = invoke(stypy.reporting.localization.Localization(__file__, 1199, 20), getitem___3469, unicode_3467)
            
            # Assigning a type to the variable 'codec' (line 1199)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 12), 'codec', subscript_call_result_3470)

            if more_types_in_union_3466:
                # SSA join for if statement (line 1198)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1201)
        # Getting the type of 'bitrate' (line 1201)
        bitrate_3471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 11), 'bitrate')
        # Getting the type of 'None' (line 1201)
        None_3472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 22), 'None')
        
        (may_be_3473, more_types_in_union_3474) = may_be_none(bitrate_3471, None_3472)

        if may_be_3473:

            if more_types_in_union_3474:
                # Runtime conditional SSA (line 1201)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 1202):
            
            # Assigning a Subscript to a Name (line 1202):
            
            # Obtaining the type of the subscript
            unicode_3475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 31), 'unicode', u'animation.bitrate')
            # Getting the type of 'rcParams' (line 1202)
            rcParams_3476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 22), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1202)
            getitem___3477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 22), rcParams_3476, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1202)
            subscript_call_result_3478 = invoke(stypy.reporting.localization.Localization(__file__, 1202, 22), getitem___3477, unicode_3475)
            
            # Assigning a type to the variable 'bitrate' (line 1202)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 12), 'bitrate', subscript_call_result_3478)

            if more_types_in_union_3474:
                # SSA join for if statement (line 1201)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a List to a Name (line 1204):
        
        # Assigning a List to a Name (line 1204):
        
        # Obtaining an instance of the builtin type 'list' (line 1204)
        list_3479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1204, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1204)
        # Adding element type (line 1204)
        # Getting the type of 'self' (line 1204)
        self_3480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 20), 'self')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1204, 19), list_3479, self_3480)
        
        # Assigning a type to the variable 'all_anim' (line 1204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1204, 8), 'all_anim', list_3479)
        
        # Type idiom detected: calculating its left and rigth part (line 1205)
        # Getting the type of 'extra_anim' (line 1205)
        extra_anim_3481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 8), 'extra_anim')
        # Getting the type of 'None' (line 1205)
        None_3482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 29), 'None')
        
        (may_be_3483, more_types_in_union_3484) = may_not_be_none(extra_anim_3481, None_3482)

        if may_be_3483:

            if more_types_in_union_3484:
                # Runtime conditional SSA (line 1205)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to extend(...): (line 1206)
            # Processing the call arguments (line 1206)
            # Calculating generator expression
            module_type_store = module_type_store.open_function_context('list comprehension expression', 1206, 28, True)
            # Calculating comprehension expression
            # Getting the type of 'extra_anim' (line 1208)
            extra_anim_3493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 31), 'extra_anim', False)
            comprehension_3494 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1206, 28), extra_anim_3493)
            # Assigning a type to the variable 'anim' (line 1206)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 28), 'anim', comprehension_3494)
            
            # Getting the type of 'anim' (line 1208)
            anim_3488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 45), 'anim', False)
            # Obtaining the member '_fig' of a type (line 1208)
            _fig_3489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 45), anim_3488, '_fig')
            # Getting the type of 'self' (line 1208)
            self_3490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 58), 'self', False)
            # Obtaining the member '_fig' of a type (line 1208)
            _fig_3491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 58), self_3490, '_fig')
            # Applying the binary operator 'is' (line 1208)
            result_is__3492 = python_operator(stypy.reporting.localization.Localization(__file__, 1208, 45), 'is', _fig_3489, _fig_3491)
            
            # Getting the type of 'anim' (line 1206)
            anim_3487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 28), 'anim', False)
            list_3495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1206, 28), 'list')
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1206, 28), list_3495, anim_3487)
            # Processing the call keyword arguments (line 1206)
            kwargs_3496 = {}
            # Getting the type of 'all_anim' (line 1206)
            all_anim_3485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 12), 'all_anim', False)
            # Obtaining the member 'extend' of a type (line 1206)
            extend_3486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 12), all_anim_3485, 'extend')
            # Calling extend(args, kwargs) (line 1206)
            extend_call_result_3497 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 12), extend_3486, *[list_3495], **kwargs_3496)
            

            if more_types_in_union_3484:
                # SSA join for if statement (line 1205)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to isinstance(...): (line 1212)
        # Processing the call arguments (line 1212)
        # Getting the type of 'writer' (line 1212)
        writer_3499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 22), 'writer', False)
        # Getting the type of 'six' (line 1212)
        six_3500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 30), 'six', False)
        # Obtaining the member 'string_types' of a type (line 1212)
        string_types_3501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1212, 30), six_3500, 'string_types')
        # Processing the call keyword arguments (line 1212)
        kwargs_3502 = {}
        # Getting the type of 'isinstance' (line 1212)
        isinstance_3498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1212)
        isinstance_call_result_3503 = invoke(stypy.reporting.localization.Localization(__file__, 1212, 11), isinstance_3498, *[writer_3499, string_types_3501], **kwargs_3502)
        
        # Testing the type of an if condition (line 1212)
        if_condition_3504 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1212, 8), isinstance_call_result_3503)
        # Assigning a type to the variable 'if_condition_3504' (line 1212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1212, 8), 'if_condition_3504', if_condition_3504)
        # SSA begins for if statement (line 1212)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'writer' (line 1213)
        writer_3505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 15), 'writer')
        # Getting the type of 'writers' (line 1213)
        writers_3506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 25), 'writers')
        # Obtaining the member 'avail' of a type (line 1213)
        avail_3507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1213, 25), writers_3506, 'avail')
        # Applying the binary operator 'in' (line 1213)
        result_contains_3508 = python_operator(stypy.reporting.localization.Localization(__file__, 1213, 15), 'in', writer_3505, avail_3507)
        
        # Testing the type of an if condition (line 1213)
        if_condition_3509 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1213, 12), result_contains_3508)
        # Assigning a type to the variable 'if_condition_3509' (line 1213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 12), 'if_condition_3509', if_condition_3509)
        # SSA begins for if statement (line 1213)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1214):
        
        # Assigning a Call to a Name (line 1214):
        
        # Call to (...): (line 1214)
        # Processing the call arguments (line 1214)
        # Getting the type of 'fps' (line 1214)
        fps_3514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 41), 'fps', False)
        # Getting the type of 'codec' (line 1214)
        codec_3515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 46), 'codec', False)
        # Getting the type of 'bitrate' (line 1214)
        bitrate_3516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 53), 'bitrate', False)
        # Processing the call keyword arguments (line 1214)
        # Getting the type of 'extra_args' (line 1215)
        extra_args_3517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 52), 'extra_args', False)
        keyword_3518 = extra_args_3517
        # Getting the type of 'metadata' (line 1216)
        metadata_3519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 50), 'metadata', False)
        keyword_3520 = metadata_3519
        kwargs_3521 = {'extra_args': keyword_3518, 'metadata': keyword_3520}
        
        # Obtaining the type of the subscript
        # Getting the type of 'writer' (line 1214)
        writer_3510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 33), 'writer', False)
        # Getting the type of 'writers' (line 1214)
        writers_3511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 25), 'writers', False)
        # Obtaining the member '__getitem__' of a type (line 1214)
        getitem___3512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 25), writers_3511, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1214)
        subscript_call_result_3513 = invoke(stypy.reporting.localization.Localization(__file__, 1214, 25), getitem___3512, writer_3510)
        
        # Calling (args, kwargs) (line 1214)
        _call_result_3522 = invoke(stypy.reporting.localization.Localization(__file__, 1214, 25), subscript_call_result_3513, *[fps_3514, codec_3515, bitrate_3516], **kwargs_3521)
        
        # Assigning a type to the variable 'writer' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 16), 'writer', _call_result_3522)
        # SSA branch for the else part of an if statement (line 1213)
        module_type_store.open_ssa_branch('else')
        
        # Call to warn(...): (line 1218)
        # Processing the call arguments (line 1218)
        unicode_3525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1218, 30), 'unicode', u'MovieWriter %s unavailable')
        # Getting the type of 'writer' (line 1218)
        writer_3526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 61), 'writer', False)
        # Applying the binary operator '%' (line 1218)
        result_mod_3527 = python_operator(stypy.reporting.localization.Localization(__file__, 1218, 30), '%', unicode_3525, writer_3526)
        
        # Processing the call keyword arguments (line 1218)
        kwargs_3528 = {}
        # Getting the type of 'warnings' (line 1218)
        warnings_3523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1218)
        warn_3524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 16), warnings_3523, 'warn')
        # Calling warn(args, kwargs) (line 1218)
        warn_call_result_3529 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 16), warn_3524, *[result_mod_3527], **kwargs_3528)
        
        
        
        # SSA begins for try-except statement (line 1220)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1221):
        
        # Assigning a Call to a Name (line 1221):
        
        # Call to (...): (line 1221)
        # Processing the call arguments (line 1221)
        # Getting the type of 'fps' (line 1221)
        fps_3540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 56), 'fps', False)
        # Getting the type of 'codec' (line 1221)
        codec_3541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 61), 'codec', False)
        # Getting the type of 'bitrate' (line 1221)
        bitrate_3542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 68), 'bitrate', False)
        # Processing the call keyword arguments (line 1221)
        # Getting the type of 'extra_args' (line 1222)
        extra_args_3543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 67), 'extra_args', False)
        keyword_3544 = extra_args_3543
        # Getting the type of 'metadata' (line 1223)
        metadata_3545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 65), 'metadata', False)
        keyword_3546 = metadata_3545
        kwargs_3547 = {'extra_args': keyword_3544, 'metadata': keyword_3546}
        
        # Obtaining the type of the subscript
        
        # Obtaining the type of the subscript
        int_3530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, 52), 'int')
        
        # Call to list(...): (line 1221)
        # Processing the call keyword arguments (line 1221)
        kwargs_3533 = {}
        # Getting the type of 'writers' (line 1221)
        writers_3531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 37), 'writers', False)
        # Obtaining the member 'list' of a type (line 1221)
        list_3532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 37), writers_3531, 'list')
        # Calling list(args, kwargs) (line 1221)
        list_call_result_3534 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 37), list_3532, *[], **kwargs_3533)
        
        # Obtaining the member '__getitem__' of a type (line 1221)
        getitem___3535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 37), list_call_result_3534, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1221)
        subscript_call_result_3536 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 37), getitem___3535, int_3530)
        
        # Getting the type of 'writers' (line 1221)
        writers_3537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 29), 'writers', False)
        # Obtaining the member '__getitem__' of a type (line 1221)
        getitem___3538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 29), writers_3537, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1221)
        subscript_call_result_3539 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 29), getitem___3538, subscript_call_result_3536)
        
        # Calling (args, kwargs) (line 1221)
        _call_result_3548 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 29), subscript_call_result_3539, *[fps_3540, codec_3541, bitrate_3542], **kwargs_3547)
        
        # Assigning a type to the variable 'writer' (line 1221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 20), 'writer', _call_result_3548)
        # SSA branch for the except part of a try statement (line 1220)
        # SSA branch for the except 'IndexError' branch of a try statement (line 1220)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 1225)
        # Processing the call arguments (line 1225)
        unicode_3550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, 37), 'unicode', u'Cannot save animation: no writers are available. Please install ffmpeg to save animations.')
        # Processing the call keyword arguments (line 1225)
        kwargs_3551 = {}
        # Getting the type of 'ValueError' (line 1225)
        ValueError_3549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1225)
        ValueError_call_result_3552 = invoke(stypy.reporting.localization.Localization(__file__, 1225, 26), ValueError_3549, *[unicode_3550], **kwargs_3551)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1225, 20), ValueError_call_result_3552, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 1220)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1213)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1212)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to report(...): (line 1229)
        # Processing the call arguments (line 1229)
        unicode_3555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1229, 23), 'unicode', u'Animation.save using %s')
        
        # Call to type(...): (line 1229)
        # Processing the call arguments (line 1229)
        # Getting the type of 'writer' (line 1229)
        writer_3557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 56), 'writer', False)
        # Processing the call keyword arguments (line 1229)
        kwargs_3558 = {}
        # Getting the type of 'type' (line 1229)
        type_3556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 51), 'type', False)
        # Calling type(args, kwargs) (line 1229)
        type_call_result_3559 = invoke(stypy.reporting.localization.Localization(__file__, 1229, 51), type_3556, *[writer_3557], **kwargs_3558)
        
        # Applying the binary operator '%' (line 1229)
        result_mod_3560 = python_operator(stypy.reporting.localization.Localization(__file__, 1229, 23), '%', unicode_3555, type_call_result_3559)
        
        # Processing the call keyword arguments (line 1229)
        unicode_3561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1230, 29), 'unicode', u'helpful')
        keyword_3562 = unicode_3561
        kwargs_3563 = {'level': keyword_3562}
        # Getting the type of 'verbose' (line 1229)
        verbose_3553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'verbose', False)
        # Obtaining the member 'report' of a type (line 1229)
        report_3554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 8), verbose_3553, 'report')
        # Calling report(args, kwargs) (line 1229)
        report_call_result_3564 = invoke(stypy.reporting.localization.Localization(__file__, 1229, 8), report_3554, *[result_mod_3560], **kwargs_3563)
        
        
        
        unicode_3565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 11), 'unicode', u'bbox_inches')
        # Getting the type of 'savefig_kwargs' (line 1232)
        savefig_kwargs_3566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 28), 'savefig_kwargs')
        # Applying the binary operator 'in' (line 1232)
        result_contains_3567 = python_operator(stypy.reporting.localization.Localization(__file__, 1232, 11), 'in', unicode_3565, savefig_kwargs_3566)
        
        # Testing the type of an if condition (line 1232)
        if_condition_3568 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1232, 8), result_contains_3567)
        # Assigning a type to the variable 'if_condition_3568' (line 1232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'if_condition_3568', if_condition_3568)
        # SSA begins for if statement (line 1232)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1233)
        # Processing the call arguments (line 1233)
        unicode_3571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1233, 26), 'unicode', u"Warning: discarding the 'bbox_inches' argument in 'savefig_kwargs' as it may cause frame size to vary, which is inappropriate for animation.")
        # Processing the call keyword arguments (line 1233)
        kwargs_3572 = {}
        # Getting the type of 'warnings' (line 1233)
        warnings_3569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1233)
        warn_3570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1233, 12), warnings_3569, 'warn')
        # Calling warn(args, kwargs) (line 1233)
        warn_call_result_3573 = invoke(stypy.reporting.localization.Localization(__file__, 1233, 12), warn_3570, *[unicode_3571], **kwargs_3572)
        
        
        # Call to pop(...): (line 1236)
        # Processing the call arguments (line 1236)
        unicode_3576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1236, 31), 'unicode', u'bbox_inches')
        # Processing the call keyword arguments (line 1236)
        kwargs_3577 = {}
        # Getting the type of 'savefig_kwargs' (line 1236)
        savefig_kwargs_3574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 12), 'savefig_kwargs', False)
        # Obtaining the member 'pop' of a type (line 1236)
        pop_3575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 12), savefig_kwargs_3574, 'pop')
        # Calling pop(args, kwargs) (line 1236)
        pop_call_result_3578 = invoke(stypy.reporting.localization.Localization(__file__, 1236, 12), pop_3575, *[unicode_3576], **kwargs_3577)
        
        # SSA join for if statement (line 1232)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to rc_context(...): (line 1244)
        # Processing the call keyword arguments (line 1244)
        kwargs_3580 = {}
        # Getting the type of 'rc_context' (line 1244)
        rc_context_3579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 13), 'rc_context', False)
        # Calling rc_context(args, kwargs) (line 1244)
        rc_context_call_result_3581 = invoke(stypy.reporting.localization.Localization(__file__, 1244, 13), rc_context_3579, *[], **kwargs_3580)
        
        with_3582 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1244, 13), rc_context_call_result_3581, 'with parameter', '__enter__', '__exit__')

        if with_3582:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 1244)
            enter___3583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1244, 13), rc_context_call_result_3581, '__enter__')
            with_enter_3584 = invoke(stypy.reporting.localization.Localization(__file__, 1244, 13), enter___3583)
            
            
            
            # Obtaining the type of the subscript
            unicode_3585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1245, 24), 'unicode', u'savefig.bbox')
            # Getting the type of 'rcParams' (line 1245)
            rcParams_3586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 15), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1245)
            getitem___3587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1245, 15), rcParams_3586, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1245)
            subscript_call_result_3588 = invoke(stypy.reporting.localization.Localization(__file__, 1245, 15), getitem___3587, unicode_3585)
            
            unicode_3589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1245, 43), 'unicode', u'tight')
            # Applying the binary operator '==' (line 1245)
            result_eq_3590 = python_operator(stypy.reporting.localization.Localization(__file__, 1245, 15), '==', subscript_call_result_3588, unicode_3589)
            
            # Testing the type of an if condition (line 1245)
            if_condition_3591 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1245, 12), result_eq_3590)
            # Assigning a type to the variable 'if_condition_3591' (line 1245)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 12), 'if_condition_3591', if_condition_3591)
            # SSA begins for if statement (line 1245)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to report(...): (line 1246)
            # Processing the call arguments (line 1246)
            unicode_3594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 31), 'unicode', u"Disabling savefig.bbox = 'tight', as it may cause frame size to vary, which is inappropriate for animation.")
            # Processing the call keyword arguments (line 1246)
            unicode_3595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 37), 'unicode', u'helpful')
            keyword_3596 = unicode_3595
            kwargs_3597 = {'level': keyword_3596}
            # Getting the type of 'verbose' (line 1246)
            verbose_3592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 16), 'verbose', False)
            # Obtaining the member 'report' of a type (line 1246)
            report_3593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1246, 16), verbose_3592, 'report')
            # Calling report(args, kwargs) (line 1246)
            report_call_result_3598 = invoke(stypy.reporting.localization.Localization(__file__, 1246, 16), report_3593, *[unicode_3594], **kwargs_3597)
            
            
            # Assigning a Name to a Subscript (line 1250):
            
            # Assigning a Name to a Subscript (line 1250):
            # Getting the type of 'None' (line 1250)
            None_3599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 43), 'None')
            # Getting the type of 'rcParams' (line 1250)
            rcParams_3600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 16), 'rcParams')
            unicode_3601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1250, 25), 'unicode', u'savefig.bbox')
            # Storing an element on a container (line 1250)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1250, 16), rcParams_3600, (unicode_3601, None_3599))
            # SSA join for if statement (line 1245)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to saving(...): (line 1251)
            # Processing the call arguments (line 1251)
            # Getting the type of 'self' (line 1251)
            self_3604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 31), 'self', False)
            # Obtaining the member '_fig' of a type (line 1251)
            _fig_3605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 31), self_3604, '_fig')
            # Getting the type of 'filename' (line 1251)
            filename_3606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 42), 'filename', False)
            # Getting the type of 'dpi' (line 1251)
            dpi_3607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 52), 'dpi', False)
            # Processing the call keyword arguments (line 1251)
            kwargs_3608 = {}
            # Getting the type of 'writer' (line 1251)
            writer_3602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 17), 'writer', False)
            # Obtaining the member 'saving' of a type (line 1251)
            saving_3603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 17), writer_3602, 'saving')
            # Calling saving(args, kwargs) (line 1251)
            saving_call_result_3609 = invoke(stypy.reporting.localization.Localization(__file__, 1251, 17), saving_3603, *[_fig_3605, filename_3606, dpi_3607], **kwargs_3608)
            
            with_3610 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1251, 17), saving_call_result_3609, 'with parameter', '__enter__', '__exit__')

            if with_3610:
                # Calling the __enter__ method to initiate a with section
                # Obtaining the member '__enter__' of a type (line 1251)
                enter___3611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 17), saving_call_result_3609, '__enter__')
                with_enter_3612 = invoke(stypy.reporting.localization.Localization(__file__, 1251, 17), enter___3611)
                
                # Getting the type of 'all_anim' (line 1252)
                all_anim_3613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 28), 'all_anim')
                # Testing the type of a for loop iterable (line 1252)
                is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1252, 16), all_anim_3613)
                # Getting the type of the for loop variable (line 1252)
                for_loop_var_3614 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1252, 16), all_anim_3613)
                # Assigning a type to the variable 'anim' (line 1252)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 16), 'anim', for_loop_var_3614)
                # SSA begins for a for statement (line 1252)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
                
                # Call to _init_draw(...): (line 1254)
                # Processing the call keyword arguments (line 1254)
                kwargs_3617 = {}
                # Getting the type of 'anim' (line 1254)
                anim_3615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 20), 'anim', False)
                # Obtaining the member '_init_draw' of a type (line 1254)
                _init_draw_3616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1254, 20), anim_3615, '_init_draw')
                # Calling _init_draw(args, kwargs) (line 1254)
                _init_draw_call_result_3618 = invoke(stypy.reporting.localization.Localization(__file__, 1254, 20), _init_draw_3616, *[], **kwargs_3617)
                
                # SSA join for a for statement
                module_type_store = module_type_store.join_ssa_context()
                
                
                
                # Call to zip(...): (line 1255)
                # Calculating list comprehension
                # Calculating comprehension expression
                # Getting the type of 'all_anim' (line 1256)
                all_anim_3624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 43), 'all_anim', False)
                comprehension_3625 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 34), all_anim_3624)
                # Assigning a type to the variable 'a' (line 1255)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 34), 'a', comprehension_3625)
                
                # Call to new_saved_frame_seq(...): (line 1255)
                # Processing the call keyword arguments (line 1255)
                kwargs_3622 = {}
                # Getting the type of 'a' (line 1255)
                a_3620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 34), 'a', False)
                # Obtaining the member 'new_saved_frame_seq' of a type (line 1255)
                new_saved_frame_seq_3621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1255, 34), a_3620, 'new_saved_frame_seq')
                # Calling new_saved_frame_seq(args, kwargs) (line 1255)
                new_saved_frame_seq_call_result_3623 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 34), new_saved_frame_seq_3621, *[], **kwargs_3622)
                
                list_3626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 34), 'list')
                set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 34), list_3626, new_saved_frame_seq_call_result_3623)
                # Processing the call keyword arguments (line 1255)
                kwargs_3627 = {}
                # Getting the type of 'zip' (line 1255)
                zip_3619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 28), 'zip', False)
                # Calling zip(args, kwargs) (line 1255)
                zip_call_result_3628 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 28), zip_3619, *[list_3626], **kwargs_3627)
                
                # Testing the type of a for loop iterable (line 1255)
                is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1255, 16), zip_call_result_3628)
                # Getting the type of the for loop variable (line 1255)
                for_loop_var_3629 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1255, 16), zip_call_result_3628)
                # Assigning a type to the variable 'data' (line 1255)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 16), 'data', for_loop_var_3629)
                # SSA begins for a for statement (line 1255)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
                
                
                # Call to zip(...): (line 1257)
                # Processing the call arguments (line 1257)
                # Getting the type of 'all_anim' (line 1257)
                all_anim_3631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 39), 'all_anim', False)
                # Getting the type of 'data' (line 1257)
                data_3632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 49), 'data', False)
                # Processing the call keyword arguments (line 1257)
                kwargs_3633 = {}
                # Getting the type of 'zip' (line 1257)
                zip_3630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 35), 'zip', False)
                # Calling zip(args, kwargs) (line 1257)
                zip_call_result_3634 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 35), zip_3630, *[all_anim_3631, data_3632], **kwargs_3633)
                
                # Testing the type of a for loop iterable (line 1257)
                is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1257, 20), zip_call_result_3634)
                # Getting the type of the for loop variable (line 1257)
                for_loop_var_3635 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1257, 20), zip_call_result_3634)
                # Assigning a type to the variable 'anim' (line 1257)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 20), 'anim', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1257, 20), for_loop_var_3635))
                # Assigning a type to the variable 'd' (line 1257)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 20), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1257, 20), for_loop_var_3635))
                # SSA begins for a for statement (line 1257)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
                
                # Call to _draw_next_frame(...): (line 1259)
                # Processing the call arguments (line 1259)
                # Getting the type of 'd' (line 1259)
                d_3638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 46), 'd', False)
                # Processing the call keyword arguments (line 1259)
                # Getting the type of 'False' (line 1259)
                False_3639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 54), 'False', False)
                keyword_3640 = False_3639
                kwargs_3641 = {'blit': keyword_3640}
                # Getting the type of 'anim' (line 1259)
                anim_3636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 24), 'anim', False)
                # Obtaining the member '_draw_next_frame' of a type (line 1259)
                _draw_next_frame_3637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 24), anim_3636, '_draw_next_frame')
                # Calling _draw_next_frame(args, kwargs) (line 1259)
                _draw_next_frame_call_result_3642 = invoke(stypy.reporting.localization.Localization(__file__, 1259, 24), _draw_next_frame_3637, *[d_3638], **kwargs_3641)
                
                # SSA join for a for statement
                module_type_store = module_type_store.join_ssa_context()
                
                
                # Call to grab_frame(...): (line 1260)
                # Processing the call keyword arguments (line 1260)
                # Getting the type of 'savefig_kwargs' (line 1260)
                savefig_kwargs_3645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 40), 'savefig_kwargs', False)
                kwargs_3646 = {'savefig_kwargs_3645': savefig_kwargs_3645}
                # Getting the type of 'writer' (line 1260)
                writer_3643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 20), 'writer', False)
                # Obtaining the member 'grab_frame' of a type (line 1260)
                grab_frame_3644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1260, 20), writer_3643, 'grab_frame')
                # Calling grab_frame(args, kwargs) (line 1260)
                grab_frame_call_result_3647 = invoke(stypy.reporting.localization.Localization(__file__, 1260, 20), grab_frame_3644, *[], **kwargs_3646)
                
                # SSA join for a for statement
                module_type_store = module_type_store.join_ssa_context()
                
                # Calling the __exit__ method to finish a with section
                # Obtaining the member '__exit__' of a type (line 1251)
                exit___3648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 17), saving_call_result_3609, '__exit__')
                with_exit_3649 = invoke(stypy.reporting.localization.Localization(__file__, 1251, 17), exit___3648, None, None, None)

            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 1244)
            exit___3650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1244, 13), rc_context_call_result_3581, '__exit__')
            with_exit_3651 = invoke(stypy.reporting.localization.Localization(__file__, 1244, 13), exit___3650, None, None, None)

        
        # Getting the type of 'reconnect_first_draw' (line 1263)
        reconnect_first_draw_3652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 11), 'reconnect_first_draw')
        # Testing the type of an if condition (line 1263)
        if_condition_3653 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1263, 8), reconnect_first_draw_3652)
        # Assigning a type to the variable 'if_condition_3653' (line 1263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 8), 'if_condition_3653', if_condition_3653)
        # SSA begins for if statement (line 1263)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1264):
        
        # Assigning a Call to a Attribute (line 1264):
        
        # Call to mpl_connect(...): (line 1264)
        # Processing the call arguments (line 1264)
        unicode_3658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1264, 63), 'unicode', u'draw_event')
        # Getting the type of 'self' (line 1265)
        self_3659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 63), 'self', False)
        # Obtaining the member '_start' of a type (line 1265)
        _start_3660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1265, 63), self_3659, '_start')
        # Processing the call keyword arguments (line 1264)
        kwargs_3661 = {}
        # Getting the type of 'self' (line 1264)
        self_3654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 34), 'self', False)
        # Obtaining the member '_fig' of a type (line 1264)
        _fig_3655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 34), self_3654, '_fig')
        # Obtaining the member 'canvas' of a type (line 1264)
        canvas_3656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 34), _fig_3655, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 1264)
        mpl_connect_3657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 34), canvas_3656, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1264)
        mpl_connect_call_result_3662 = invoke(stypy.reporting.localization.Localization(__file__, 1264, 34), mpl_connect_3657, *[unicode_3658, _start_3660], **kwargs_3661)
        
        # Getting the type of 'self' (line 1264)
        self_3663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 12), 'self')
        # Setting the type of the member '_first_draw_id' of a type (line 1264)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 12), self_3663, '_first_draw_id', mpl_connect_call_result_3662)
        # SSA join for if statement (line 1263)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'save(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'save' in the type store
        # Getting the type of 'stypy_return_type' (line 1096)
        stypy_return_type_3664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3664)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'save'
        return stypy_return_type_3664


    @norecursion
    def _step(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_step'
        module_type_store = module_type_store.open_function_context('_step', 1267, 4, False)
        # Assigning a type to the variable 'self' (line 1268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1268, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation._step.__dict__.__setitem__('stypy_localization', localization)
        Animation._step.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation._step.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation._step.__dict__.__setitem__('stypy_function_name', 'Animation._step')
        Animation._step.__dict__.__setitem__('stypy_param_names_list', [])
        Animation._step.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Animation._step.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation._step.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation._step.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation._step.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation._step.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation._step', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_step', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_step(...)' code ##################

        unicode_3665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1271, (-1)), 'unicode', u'\n        Handler for getting events. By default, gets the next frame in the\n        sequence and hands the data off to be drawn.\n        ')
        
        
        # SSA begins for try-except statement (line 1275)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1276):
        
        # Assigning a Call to a Name (line 1276):
        
        # Call to next(...): (line 1276)
        # Processing the call arguments (line 1276)
        # Getting the type of 'self' (line 1276)
        self_3667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 29), 'self', False)
        # Obtaining the member 'frame_seq' of a type (line 1276)
        frame_seq_3668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1276, 29), self_3667, 'frame_seq')
        # Processing the call keyword arguments (line 1276)
        kwargs_3669 = {}
        # Getting the type of 'next' (line 1276)
        next_3666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 24), 'next', False)
        # Calling next(args, kwargs) (line 1276)
        next_call_result_3670 = invoke(stypy.reporting.localization.Localization(__file__, 1276, 24), next_3666, *[frame_seq_3668], **kwargs_3669)
        
        # Assigning a type to the variable 'framedata' (line 1276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 12), 'framedata', next_call_result_3670)
        
        # Call to _draw_next_frame(...): (line 1277)
        # Processing the call arguments (line 1277)
        # Getting the type of 'framedata' (line 1277)
        framedata_3673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 34), 'framedata', False)
        # Getting the type of 'self' (line 1277)
        self_3674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 45), 'self', False)
        # Obtaining the member '_blit' of a type (line 1277)
        _blit_3675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 45), self_3674, '_blit')
        # Processing the call keyword arguments (line 1277)
        kwargs_3676 = {}
        # Getting the type of 'self' (line 1277)
        self_3671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 12), 'self', False)
        # Obtaining the member '_draw_next_frame' of a type (line 1277)
        _draw_next_frame_3672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 12), self_3671, '_draw_next_frame')
        # Calling _draw_next_frame(args, kwargs) (line 1277)
        _draw_next_frame_call_result_3677 = invoke(stypy.reporting.localization.Localization(__file__, 1277, 12), _draw_next_frame_3672, *[framedata_3673, _blit_3675], **kwargs_3676)
        
        # Getting the type of 'True' (line 1278)
        True_3678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 19), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 12), 'stypy_return_type', True_3678)
        # SSA branch for the except part of a try statement (line 1275)
        # SSA branch for the except 'StopIteration' branch of a try statement (line 1275)
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'False' (line 1280)
        False_3679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 12), 'stypy_return_type', False_3679)
        # SSA join for try-except statement (line 1275)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_step(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_step' in the type store
        # Getting the type of 'stypy_return_type' (line 1267)
        stypy_return_type_3680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3680)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_step'
        return stypy_return_type_3680


    @norecursion
    def new_frame_seq(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_frame_seq'
        module_type_store = module_type_store.open_function_context('new_frame_seq', 1282, 4, False)
        # Assigning a type to the variable 'self' (line 1283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation.new_frame_seq.__dict__.__setitem__('stypy_localization', localization)
        Animation.new_frame_seq.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation.new_frame_seq.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation.new_frame_seq.__dict__.__setitem__('stypy_function_name', 'Animation.new_frame_seq')
        Animation.new_frame_seq.__dict__.__setitem__('stypy_param_names_list', [])
        Animation.new_frame_seq.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation.new_frame_seq.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation.new_frame_seq.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation.new_frame_seq.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation.new_frame_seq.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation.new_frame_seq.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation.new_frame_seq', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_frame_seq', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_frame_seq(...)' code ##################

        unicode_3681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 8), 'unicode', u'Creates a new sequence of frame information.')
        
        # Call to iter(...): (line 1285)
        # Processing the call arguments (line 1285)
        # Getting the type of 'self' (line 1285)
        self_3683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 20), 'self', False)
        # Obtaining the member '_framedata' of a type (line 1285)
        _framedata_3684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 20), self_3683, '_framedata')
        # Processing the call keyword arguments (line 1285)
        kwargs_3685 = {}
        # Getting the type of 'iter' (line 1285)
        iter_3682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 15), 'iter', False)
        # Calling iter(args, kwargs) (line 1285)
        iter_call_result_3686 = invoke(stypy.reporting.localization.Localization(__file__, 1285, 15), iter_3682, *[_framedata_3684], **kwargs_3685)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1285, 8), 'stypy_return_type', iter_call_result_3686)
        
        # ################# End of 'new_frame_seq(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_frame_seq' in the type store
        # Getting the type of 'stypy_return_type' (line 1282)
        stypy_return_type_3687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3687)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_frame_seq'
        return stypy_return_type_3687


    @norecursion
    def new_saved_frame_seq(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_saved_frame_seq'
        module_type_store = module_type_store.open_function_context('new_saved_frame_seq', 1287, 4, False)
        # Assigning a type to the variable 'self' (line 1288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1288, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation.new_saved_frame_seq.__dict__.__setitem__('stypy_localization', localization)
        Animation.new_saved_frame_seq.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation.new_saved_frame_seq.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation.new_saved_frame_seq.__dict__.__setitem__('stypy_function_name', 'Animation.new_saved_frame_seq')
        Animation.new_saved_frame_seq.__dict__.__setitem__('stypy_param_names_list', [])
        Animation.new_saved_frame_seq.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation.new_saved_frame_seq.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation.new_saved_frame_seq.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation.new_saved_frame_seq.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation.new_saved_frame_seq.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation.new_saved_frame_seq.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation.new_saved_frame_seq', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_saved_frame_seq', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_saved_frame_seq(...)' code ##################

        unicode_3688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1288, 8), 'unicode', u'Creates a new sequence of saved/cached frame information.')
        
        # Call to new_frame_seq(...): (line 1290)
        # Processing the call keyword arguments (line 1290)
        kwargs_3691 = {}
        # Getting the type of 'self' (line 1290)
        self_3689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 15), 'self', False)
        # Obtaining the member 'new_frame_seq' of a type (line 1290)
        new_frame_seq_3690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1290, 15), self_3689, 'new_frame_seq')
        # Calling new_frame_seq(args, kwargs) (line 1290)
        new_frame_seq_call_result_3692 = invoke(stypy.reporting.localization.Localization(__file__, 1290, 15), new_frame_seq_3690, *[], **kwargs_3691)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 8), 'stypy_return_type', new_frame_seq_call_result_3692)
        
        # ################# End of 'new_saved_frame_seq(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_saved_frame_seq' in the type store
        # Getting the type of 'stypy_return_type' (line 1287)
        stypy_return_type_3693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3693)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_saved_frame_seq'
        return stypy_return_type_3693


    @norecursion
    def _draw_next_frame(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_draw_next_frame'
        module_type_store = module_type_store.open_function_context('_draw_next_frame', 1292, 4, False)
        # Assigning a type to the variable 'self' (line 1293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation._draw_next_frame.__dict__.__setitem__('stypy_localization', localization)
        Animation._draw_next_frame.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation._draw_next_frame.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation._draw_next_frame.__dict__.__setitem__('stypy_function_name', 'Animation._draw_next_frame')
        Animation._draw_next_frame.__dict__.__setitem__('stypy_param_names_list', ['framedata', 'blit'])
        Animation._draw_next_frame.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation._draw_next_frame.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation._draw_next_frame.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation._draw_next_frame.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation._draw_next_frame.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation._draw_next_frame.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation._draw_next_frame', ['framedata', 'blit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_draw_next_frame', localization, ['framedata', 'blit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_draw_next_frame(...)' code ##################

        
        # Call to _pre_draw(...): (line 1295)
        # Processing the call arguments (line 1295)
        # Getting the type of 'framedata' (line 1295)
        framedata_3696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 23), 'framedata', False)
        # Getting the type of 'blit' (line 1295)
        blit_3697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 34), 'blit', False)
        # Processing the call keyword arguments (line 1295)
        kwargs_3698 = {}
        # Getting the type of 'self' (line 1295)
        self_3694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 8), 'self', False)
        # Obtaining the member '_pre_draw' of a type (line 1295)
        _pre_draw_3695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 8), self_3694, '_pre_draw')
        # Calling _pre_draw(args, kwargs) (line 1295)
        _pre_draw_call_result_3699 = invoke(stypy.reporting.localization.Localization(__file__, 1295, 8), _pre_draw_3695, *[framedata_3696, blit_3697], **kwargs_3698)
        
        
        # Call to _draw_frame(...): (line 1296)
        # Processing the call arguments (line 1296)
        # Getting the type of 'framedata' (line 1296)
        framedata_3702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 25), 'framedata', False)
        # Processing the call keyword arguments (line 1296)
        kwargs_3703 = {}
        # Getting the type of 'self' (line 1296)
        self_3700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 8), 'self', False)
        # Obtaining the member '_draw_frame' of a type (line 1296)
        _draw_frame_3701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 8), self_3700, '_draw_frame')
        # Calling _draw_frame(args, kwargs) (line 1296)
        _draw_frame_call_result_3704 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 8), _draw_frame_3701, *[framedata_3702], **kwargs_3703)
        
        
        # Call to _post_draw(...): (line 1297)
        # Processing the call arguments (line 1297)
        # Getting the type of 'framedata' (line 1297)
        framedata_3707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 24), 'framedata', False)
        # Getting the type of 'blit' (line 1297)
        blit_3708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 35), 'blit', False)
        # Processing the call keyword arguments (line 1297)
        kwargs_3709 = {}
        # Getting the type of 'self' (line 1297)
        self_3705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 8), 'self', False)
        # Obtaining the member '_post_draw' of a type (line 1297)
        _post_draw_3706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 8), self_3705, '_post_draw')
        # Calling _post_draw(args, kwargs) (line 1297)
        _post_draw_call_result_3710 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 8), _post_draw_3706, *[framedata_3707, blit_3708], **kwargs_3709)
        
        
        # ################# End of '_draw_next_frame(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_draw_next_frame' in the type store
        # Getting the type of 'stypy_return_type' (line 1292)
        stypy_return_type_3711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3711)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_draw_next_frame'
        return stypy_return_type_3711


    @norecursion
    def _init_draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_init_draw'
        module_type_store = module_type_store.open_function_context('_init_draw', 1299, 4, False)
        # Assigning a type to the variable 'self' (line 1300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation._init_draw.__dict__.__setitem__('stypy_localization', localization)
        Animation._init_draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation._init_draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation._init_draw.__dict__.__setitem__('stypy_function_name', 'Animation._init_draw')
        Animation._init_draw.__dict__.__setitem__('stypy_param_names_list', [])
        Animation._init_draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation._init_draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation._init_draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation._init_draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation._init_draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation._init_draw.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation._init_draw', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_init_draw', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_init_draw(...)' code ##################

        pass
        
        # ################# End of '_init_draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_init_draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1299)
        stypy_return_type_3712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3712)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_init_draw'
        return stypy_return_type_3712


    @norecursion
    def _pre_draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_pre_draw'
        module_type_store = module_type_store.open_function_context('_pre_draw', 1304, 4, False)
        # Assigning a type to the variable 'self' (line 1305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation._pre_draw.__dict__.__setitem__('stypy_localization', localization)
        Animation._pre_draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation._pre_draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation._pre_draw.__dict__.__setitem__('stypy_function_name', 'Animation._pre_draw')
        Animation._pre_draw.__dict__.__setitem__('stypy_param_names_list', ['framedata', 'blit'])
        Animation._pre_draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation._pre_draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation._pre_draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation._pre_draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation._pre_draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation._pre_draw.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation._pre_draw', ['framedata', 'blit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_pre_draw', localization, ['framedata', 'blit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_pre_draw(...)' code ##################

        
        # Getting the type of 'blit' (line 1307)
        blit_3713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 11), 'blit')
        # Testing the type of an if condition (line 1307)
        if_condition_3714 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1307, 8), blit_3713)
        # Assigning a type to the variable 'if_condition_3714' (line 1307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 8), 'if_condition_3714', if_condition_3714)
        # SSA begins for if statement (line 1307)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _blit_clear(...): (line 1308)
        # Processing the call arguments (line 1308)
        # Getting the type of 'self' (line 1308)
        self_3717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 29), 'self', False)
        # Obtaining the member '_drawn_artists' of a type (line 1308)
        _drawn_artists_3718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 29), self_3717, '_drawn_artists')
        # Getting the type of 'self' (line 1308)
        self_3719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 50), 'self', False)
        # Obtaining the member '_blit_cache' of a type (line 1308)
        _blit_cache_3720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 50), self_3719, '_blit_cache')
        # Processing the call keyword arguments (line 1308)
        kwargs_3721 = {}
        # Getting the type of 'self' (line 1308)
        self_3715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 12), 'self', False)
        # Obtaining the member '_blit_clear' of a type (line 1308)
        _blit_clear_3716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 12), self_3715, '_blit_clear')
        # Calling _blit_clear(args, kwargs) (line 1308)
        _blit_clear_call_result_3722 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 12), _blit_clear_3716, *[_drawn_artists_3718, _blit_cache_3720], **kwargs_3721)
        
        # SSA join for if statement (line 1307)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_pre_draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_pre_draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1304)
        stypy_return_type_3723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3723)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_pre_draw'
        return stypy_return_type_3723


    @norecursion
    def _draw_frame(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_draw_frame'
        module_type_store = module_type_store.open_function_context('_draw_frame', 1310, 4, False)
        # Assigning a type to the variable 'self' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation._draw_frame.__dict__.__setitem__('stypy_localization', localization)
        Animation._draw_frame.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation._draw_frame.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation._draw_frame.__dict__.__setitem__('stypy_function_name', 'Animation._draw_frame')
        Animation._draw_frame.__dict__.__setitem__('stypy_param_names_list', ['framedata'])
        Animation._draw_frame.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation._draw_frame.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation._draw_frame.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation._draw_frame.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation._draw_frame.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation._draw_frame.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation._draw_frame', ['framedata'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_draw_frame', localization, ['framedata'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_draw_frame(...)' code ##################

        
        # Call to NotImplementedError(...): (line 1312)
        # Processing the call arguments (line 1312)
        unicode_3725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 34), 'unicode', u'Needs to be implemented by subclasses to actually make an animation.')
        # Processing the call keyword arguments (line 1312)
        kwargs_3726 = {}
        # Getting the type of 'NotImplementedError' (line 1312)
        NotImplementedError_3724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1312)
        NotImplementedError_call_result_3727 = invoke(stypy.reporting.localization.Localization(__file__, 1312, 14), NotImplementedError_3724, *[unicode_3725], **kwargs_3726)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1312, 8), NotImplementedError_call_result_3727, 'raise parameter', BaseException)
        
        # ################# End of '_draw_frame(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_draw_frame' in the type store
        # Getting the type of 'stypy_return_type' (line 1310)
        stypy_return_type_3728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3728)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_draw_frame'
        return stypy_return_type_3728


    @norecursion
    def _post_draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_post_draw'
        module_type_store = module_type_store.open_function_context('_post_draw', 1315, 4, False)
        # Assigning a type to the variable 'self' (line 1316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation._post_draw.__dict__.__setitem__('stypy_localization', localization)
        Animation._post_draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation._post_draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation._post_draw.__dict__.__setitem__('stypy_function_name', 'Animation._post_draw')
        Animation._post_draw.__dict__.__setitem__('stypy_param_names_list', ['framedata', 'blit'])
        Animation._post_draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation._post_draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation._post_draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation._post_draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation._post_draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation._post_draw.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation._post_draw', ['framedata', 'blit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_post_draw', localization, ['framedata', 'blit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_post_draw(...)' code ##################

        
        
        # Evaluating a boolean operation
        # Getting the type of 'blit' (line 1319)
        blit_3729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 11), 'blit')
        # Getting the type of 'self' (line 1319)
        self_3730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 20), 'self')
        # Obtaining the member '_drawn_artists' of a type (line 1319)
        _drawn_artists_3731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 20), self_3730, '_drawn_artists')
        # Applying the binary operator 'and' (line 1319)
        result_and_keyword_3732 = python_operator(stypy.reporting.localization.Localization(__file__, 1319, 11), 'and', blit_3729, _drawn_artists_3731)
        
        # Testing the type of an if condition (line 1319)
        if_condition_3733 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1319, 8), result_and_keyword_3732)
        # Assigning a type to the variable 'if_condition_3733' (line 1319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1319, 8), 'if_condition_3733', if_condition_3733)
        # SSA begins for if statement (line 1319)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _blit_draw(...): (line 1320)
        # Processing the call arguments (line 1320)
        # Getting the type of 'self' (line 1320)
        self_3736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 28), 'self', False)
        # Obtaining the member '_drawn_artists' of a type (line 1320)
        _drawn_artists_3737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 28), self_3736, '_drawn_artists')
        # Getting the type of 'self' (line 1320)
        self_3738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 49), 'self', False)
        # Obtaining the member '_blit_cache' of a type (line 1320)
        _blit_cache_3739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 49), self_3738, '_blit_cache')
        # Processing the call keyword arguments (line 1320)
        kwargs_3740 = {}
        # Getting the type of 'self' (line 1320)
        self_3734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'self', False)
        # Obtaining the member '_blit_draw' of a type (line 1320)
        _blit_draw_3735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 12), self_3734, '_blit_draw')
        # Calling _blit_draw(args, kwargs) (line 1320)
        _blit_draw_call_result_3741 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 12), _blit_draw_3735, *[_drawn_artists_3737, _blit_cache_3739], **kwargs_3740)
        
        # SSA branch for the else part of an if statement (line 1319)
        module_type_store.open_ssa_branch('else')
        
        # Call to draw_idle(...): (line 1322)
        # Processing the call keyword arguments (line 1322)
        kwargs_3746 = {}
        # Getting the type of 'self' (line 1322)
        self_3742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 12), 'self', False)
        # Obtaining the member '_fig' of a type (line 1322)
        _fig_3743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1322, 12), self_3742, '_fig')
        # Obtaining the member 'canvas' of a type (line 1322)
        canvas_3744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1322, 12), _fig_3743, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 1322)
        draw_idle_3745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1322, 12), canvas_3744, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 1322)
        draw_idle_call_result_3747 = invoke(stypy.reporting.localization.Localization(__file__, 1322, 12), draw_idle_3745, *[], **kwargs_3746)
        
        # SSA join for if statement (line 1319)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_post_draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_post_draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1315)
        stypy_return_type_3748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3748)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_post_draw'
        return stypy_return_type_3748


    @norecursion
    def _blit_draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_blit_draw'
        module_type_store = module_type_store.open_function_context('_blit_draw', 1325, 4, False)
        # Assigning a type to the variable 'self' (line 1326)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1326, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation._blit_draw.__dict__.__setitem__('stypy_localization', localization)
        Animation._blit_draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation._blit_draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation._blit_draw.__dict__.__setitem__('stypy_function_name', 'Animation._blit_draw')
        Animation._blit_draw.__dict__.__setitem__('stypy_param_names_list', ['artists', 'bg_cache'])
        Animation._blit_draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation._blit_draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation._blit_draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation._blit_draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation._blit_draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation._blit_draw.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation._blit_draw', ['artists', 'bg_cache'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_blit_draw', localization, ['artists', 'bg_cache'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_blit_draw(...)' code ##################

        
        # Assigning a List to a Name (line 1328):
        
        # Assigning a List to a Name (line 1328):
        
        # Obtaining an instance of the builtin type 'list' (line 1328)
        list_3749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1328)
        
        # Assigning a type to the variable 'updated_ax' (line 1328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 8), 'updated_ax', list_3749)
        
        # Getting the type of 'artists' (line 1329)
        artists_3750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 17), 'artists')
        # Testing the type of a for loop iterable (line 1329)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1329, 8), artists_3750)
        # Getting the type of the for loop variable (line 1329)
        for_loop_var_3751 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1329, 8), artists_3750)
        # Assigning a type to the variable 'a' (line 1329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 8), 'a', for_loop_var_3751)
        # SSA begins for a for statement (line 1329)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'a' (line 1333)
        a_3752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 15), 'a')
        # Obtaining the member 'axes' of a type (line 1333)
        axes_3753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1333, 15), a_3752, 'axes')
        # Getting the type of 'bg_cache' (line 1333)
        bg_cache_3754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 29), 'bg_cache')
        # Applying the binary operator 'notin' (line 1333)
        result_contains_3755 = python_operator(stypy.reporting.localization.Localization(__file__, 1333, 15), 'notin', axes_3753, bg_cache_3754)
        
        # Testing the type of an if condition (line 1333)
        if_condition_3756 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1333, 12), result_contains_3755)
        # Assigning a type to the variable 'if_condition_3756' (line 1333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 12), 'if_condition_3756', if_condition_3756)
        # SSA begins for if statement (line 1333)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 1334):
        
        # Assigning a Call to a Subscript (line 1334):
        
        # Call to copy_from_bbox(...): (line 1334)
        # Processing the call arguments (line 1334)
        # Getting the type of 'a' (line 1334)
        a_3761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 66), 'a', False)
        # Obtaining the member 'axes' of a type (line 1334)
        axes_3762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 66), a_3761, 'axes')
        # Obtaining the member 'bbox' of a type (line 1334)
        bbox_3763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 66), axes_3762, 'bbox')
        # Processing the call keyword arguments (line 1334)
        kwargs_3764 = {}
        # Getting the type of 'a' (line 1334)
        a_3757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 35), 'a', False)
        # Obtaining the member 'figure' of a type (line 1334)
        figure_3758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 35), a_3757, 'figure')
        # Obtaining the member 'canvas' of a type (line 1334)
        canvas_3759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 35), figure_3758, 'canvas')
        # Obtaining the member 'copy_from_bbox' of a type (line 1334)
        copy_from_bbox_3760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 35), canvas_3759, 'copy_from_bbox')
        # Calling copy_from_bbox(args, kwargs) (line 1334)
        copy_from_bbox_call_result_3765 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 35), copy_from_bbox_3760, *[bbox_3763], **kwargs_3764)
        
        # Getting the type of 'bg_cache' (line 1334)
        bg_cache_3766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 16), 'bg_cache')
        # Getting the type of 'a' (line 1334)
        a_3767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 25), 'a')
        # Obtaining the member 'axes' of a type (line 1334)
        axes_3768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 25), a_3767, 'axes')
        # Storing an element on a container (line 1334)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1334, 16), bg_cache_3766, (axes_3768, copy_from_bbox_call_result_3765))
        # SSA join for if statement (line 1333)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw_artist(...): (line 1335)
        # Processing the call arguments (line 1335)
        # Getting the type of 'a' (line 1335)
        a_3772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 31), 'a', False)
        # Processing the call keyword arguments (line 1335)
        kwargs_3773 = {}
        # Getting the type of 'a' (line 1335)
        a_3769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 12), 'a', False)
        # Obtaining the member 'axes' of a type (line 1335)
        axes_3770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 12), a_3769, 'axes')
        # Obtaining the member 'draw_artist' of a type (line 1335)
        draw_artist_3771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 12), axes_3770, 'draw_artist')
        # Calling draw_artist(args, kwargs) (line 1335)
        draw_artist_call_result_3774 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 12), draw_artist_3771, *[a_3772], **kwargs_3773)
        
        
        # Call to append(...): (line 1336)
        # Processing the call arguments (line 1336)
        # Getting the type of 'a' (line 1336)
        a_3777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 30), 'a', False)
        # Obtaining the member 'axes' of a type (line 1336)
        axes_3778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 30), a_3777, 'axes')
        # Processing the call keyword arguments (line 1336)
        kwargs_3779 = {}
        # Getting the type of 'updated_ax' (line 1336)
        updated_ax_3775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 12), 'updated_ax', False)
        # Obtaining the member 'append' of a type (line 1336)
        append_3776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 12), updated_ax_3775, 'append')
        # Calling append(args, kwargs) (line 1336)
        append_call_result_3780 = invoke(stypy.reporting.localization.Localization(__file__, 1336, 12), append_3776, *[axes_3778], **kwargs_3779)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to set(...): (line 1339)
        # Processing the call arguments (line 1339)
        # Getting the type of 'updated_ax' (line 1339)
        updated_ax_3782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 22), 'updated_ax', False)
        # Processing the call keyword arguments (line 1339)
        kwargs_3783 = {}
        # Getting the type of 'set' (line 1339)
        set_3781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 18), 'set', False)
        # Calling set(args, kwargs) (line 1339)
        set_call_result_3784 = invoke(stypy.reporting.localization.Localization(__file__, 1339, 18), set_3781, *[updated_ax_3782], **kwargs_3783)
        
        # Testing the type of a for loop iterable (line 1339)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1339, 8), set_call_result_3784)
        # Getting the type of the for loop variable (line 1339)
        for_loop_var_3785 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1339, 8), set_call_result_3784)
        # Assigning a type to the variable 'ax' (line 1339)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1339, 8), 'ax', for_loop_var_3785)
        # SSA begins for a for statement (line 1339)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to blit(...): (line 1340)
        # Processing the call arguments (line 1340)
        # Getting the type of 'ax' (line 1340)
        ax_3790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 34), 'ax', False)
        # Obtaining the member 'bbox' of a type (line 1340)
        bbox_3791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 34), ax_3790, 'bbox')
        # Processing the call keyword arguments (line 1340)
        kwargs_3792 = {}
        # Getting the type of 'ax' (line 1340)
        ax_3786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 12), 'ax', False)
        # Obtaining the member 'figure' of a type (line 1340)
        figure_3787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 12), ax_3786, 'figure')
        # Obtaining the member 'canvas' of a type (line 1340)
        canvas_3788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 12), figure_3787, 'canvas')
        # Obtaining the member 'blit' of a type (line 1340)
        blit_3789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 12), canvas_3788, 'blit')
        # Calling blit(args, kwargs) (line 1340)
        blit_call_result_3793 = invoke(stypy.reporting.localization.Localization(__file__, 1340, 12), blit_3789, *[bbox_3791], **kwargs_3792)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_blit_draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_blit_draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1325)
        stypy_return_type_3794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3794)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_blit_draw'
        return stypy_return_type_3794


    @norecursion
    def _blit_clear(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_blit_clear'
        module_type_store = module_type_store.open_function_context('_blit_clear', 1342, 4, False)
        # Assigning a type to the variable 'self' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation._blit_clear.__dict__.__setitem__('stypy_localization', localization)
        Animation._blit_clear.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation._blit_clear.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation._blit_clear.__dict__.__setitem__('stypy_function_name', 'Animation._blit_clear')
        Animation._blit_clear.__dict__.__setitem__('stypy_param_names_list', ['artists', 'bg_cache'])
        Animation._blit_clear.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation._blit_clear.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation._blit_clear.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation._blit_clear.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation._blit_clear.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation._blit_clear.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation._blit_clear', ['artists', 'bg_cache'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_blit_clear', localization, ['artists', 'bg_cache'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_blit_clear(...)' code ##################

        
        # Assigning a Call to a Name (line 1346):
        
        # Assigning a Call to a Name (line 1346):
        
        # Call to set(...): (line 1346)
        # Processing the call arguments (line 1346)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 1346, 19, True)
        # Calculating comprehension expression
        # Getting the type of 'artists' (line 1346)
        artists_3798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 35), 'artists', False)
        comprehension_3799 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1346, 19), artists_3798)
        # Assigning a type to the variable 'a' (line 1346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 19), 'a', comprehension_3799)
        # Getting the type of 'a' (line 1346)
        a_3796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 19), 'a', False)
        # Obtaining the member 'axes' of a type (line 1346)
        axes_3797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1346, 19), a_3796, 'axes')
        list_3800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1346, 19), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1346, 19), list_3800, axes_3797)
        # Processing the call keyword arguments (line 1346)
        kwargs_3801 = {}
        # Getting the type of 'set' (line 1346)
        set_3795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 15), 'set', False)
        # Calling set(args, kwargs) (line 1346)
        set_call_result_3802 = invoke(stypy.reporting.localization.Localization(__file__, 1346, 15), set_3795, *[list_3800], **kwargs_3801)
        
        # Assigning a type to the variable 'axes' (line 1346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 8), 'axes', set_call_result_3802)
        
        # Getting the type of 'axes' (line 1347)
        axes_3803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 17), 'axes')
        # Testing the type of a for loop iterable (line 1347)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1347, 8), axes_3803)
        # Getting the type of the for loop variable (line 1347)
        for_loop_var_3804 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1347, 8), axes_3803)
        # Assigning a type to the variable 'a' (line 1347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'a', for_loop_var_3804)
        # SSA begins for a for statement (line 1347)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'a' (line 1348)
        a_3805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 15), 'a')
        # Getting the type of 'bg_cache' (line 1348)
        bg_cache_3806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 20), 'bg_cache')
        # Applying the binary operator 'in' (line 1348)
        result_contains_3807 = python_operator(stypy.reporting.localization.Localization(__file__, 1348, 15), 'in', a_3805, bg_cache_3806)
        
        # Testing the type of an if condition (line 1348)
        if_condition_3808 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1348, 12), result_contains_3807)
        # Assigning a type to the variable 'if_condition_3808' (line 1348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 12), 'if_condition_3808', if_condition_3808)
        # SSA begins for if statement (line 1348)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to restore_region(...): (line 1349)
        # Processing the call arguments (line 1349)
        
        # Obtaining the type of the subscript
        # Getting the type of 'a' (line 1349)
        a_3813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 56), 'a', False)
        # Getting the type of 'bg_cache' (line 1349)
        bg_cache_3814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 47), 'bg_cache', False)
        # Obtaining the member '__getitem__' of a type (line 1349)
        getitem___3815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1349, 47), bg_cache_3814, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1349)
        subscript_call_result_3816 = invoke(stypy.reporting.localization.Localization(__file__, 1349, 47), getitem___3815, a_3813)
        
        # Processing the call keyword arguments (line 1349)
        kwargs_3817 = {}
        # Getting the type of 'a' (line 1349)
        a_3809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 16), 'a', False)
        # Obtaining the member 'figure' of a type (line 1349)
        figure_3810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1349, 16), a_3809, 'figure')
        # Obtaining the member 'canvas' of a type (line 1349)
        canvas_3811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1349, 16), figure_3810, 'canvas')
        # Obtaining the member 'restore_region' of a type (line 1349)
        restore_region_3812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1349, 16), canvas_3811, 'restore_region')
        # Calling restore_region(args, kwargs) (line 1349)
        restore_region_call_result_3818 = invoke(stypy.reporting.localization.Localization(__file__, 1349, 16), restore_region_3812, *[subscript_call_result_3816], **kwargs_3817)
        
        # SSA join for if statement (line 1348)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_blit_clear(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_blit_clear' in the type store
        # Getting the type of 'stypy_return_type' (line 1342)
        stypy_return_type_3819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3819)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_blit_clear'
        return stypy_return_type_3819


    @norecursion
    def _setup_blit(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_setup_blit'
        module_type_store = module_type_store.open_function_context('_setup_blit', 1351, 4, False)
        # Assigning a type to the variable 'self' (line 1352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1352, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation._setup_blit.__dict__.__setitem__('stypy_localization', localization)
        Animation._setup_blit.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation._setup_blit.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation._setup_blit.__dict__.__setitem__('stypy_function_name', 'Animation._setup_blit')
        Animation._setup_blit.__dict__.__setitem__('stypy_param_names_list', [])
        Animation._setup_blit.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation._setup_blit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation._setup_blit.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation._setup_blit.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation._setup_blit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation._setup_blit.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation._setup_blit', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_setup_blit', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_setup_blit(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1354):
        
        # Assigning a Call to a Attribute (line 1354):
        
        # Call to dict(...): (line 1354)
        # Processing the call keyword arguments (line 1354)
        kwargs_3821 = {}
        # Getting the type of 'dict' (line 1354)
        dict_3820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 27), 'dict', False)
        # Calling dict(args, kwargs) (line 1354)
        dict_call_result_3822 = invoke(stypy.reporting.localization.Localization(__file__, 1354, 27), dict_3820, *[], **kwargs_3821)
        
        # Getting the type of 'self' (line 1354)
        self_3823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'self')
        # Setting the type of the member '_blit_cache' of a type (line 1354)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 8), self_3823, '_blit_cache', dict_call_result_3822)
        
        # Assigning a List to a Attribute (line 1355):
        
        # Assigning a List to a Attribute (line 1355):
        
        # Obtaining an instance of the builtin type 'list' (line 1355)
        list_3824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1355, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1355)
        
        # Getting the type of 'self' (line 1355)
        self_3825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 8), 'self')
        # Setting the type of the member '_drawn_artists' of a type (line 1355)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 8), self_3825, '_drawn_artists', list_3824)
        
        # Assigning a Call to a Attribute (line 1356):
        
        # Assigning a Call to a Attribute (line 1356):
        
        # Call to mpl_connect(...): (line 1356)
        # Processing the call arguments (line 1356)
        unicode_3830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1356, 55), 'unicode', u'resize_event')
        # Getting the type of 'self' (line 1357)
        self_3831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 55), 'self', False)
        # Obtaining the member '_handle_resize' of a type (line 1357)
        _handle_resize_3832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1357, 55), self_3831, '_handle_resize')
        # Processing the call keyword arguments (line 1356)
        kwargs_3833 = {}
        # Getting the type of 'self' (line 1356)
        self_3826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 26), 'self', False)
        # Obtaining the member '_fig' of a type (line 1356)
        _fig_3827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1356, 26), self_3826, '_fig')
        # Obtaining the member 'canvas' of a type (line 1356)
        canvas_3828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1356, 26), _fig_3827, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 1356)
        mpl_connect_3829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1356, 26), canvas_3828, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1356)
        mpl_connect_call_result_3834 = invoke(stypy.reporting.localization.Localization(__file__, 1356, 26), mpl_connect_3829, *[unicode_3830, _handle_resize_3832], **kwargs_3833)
        
        # Getting the type of 'self' (line 1356)
        self_3835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 8), 'self')
        # Setting the type of the member '_resize_id' of a type (line 1356)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1356, 8), self_3835, '_resize_id', mpl_connect_call_result_3834)
        
        # Call to _post_draw(...): (line 1358)
        # Processing the call arguments (line 1358)
        # Getting the type of 'None' (line 1358)
        None_3838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 24), 'None', False)
        # Getting the type of 'self' (line 1358)
        self_3839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 30), 'self', False)
        # Obtaining the member '_blit' of a type (line 1358)
        _blit_3840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1358, 30), self_3839, '_blit')
        # Processing the call keyword arguments (line 1358)
        kwargs_3841 = {}
        # Getting the type of 'self' (line 1358)
        self_3836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 8), 'self', False)
        # Obtaining the member '_post_draw' of a type (line 1358)
        _post_draw_3837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1358, 8), self_3836, '_post_draw')
        # Calling _post_draw(args, kwargs) (line 1358)
        _post_draw_call_result_3842 = invoke(stypy.reporting.localization.Localization(__file__, 1358, 8), _post_draw_3837, *[None_3838, _blit_3840], **kwargs_3841)
        
        
        # ################# End of '_setup_blit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_setup_blit' in the type store
        # Getting the type of 'stypy_return_type' (line 1351)
        stypy_return_type_3843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3843)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_setup_blit'
        return stypy_return_type_3843


    @norecursion
    def _handle_resize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_handle_resize'
        module_type_store = module_type_store.open_function_context('_handle_resize', 1360, 4, False)
        # Assigning a type to the variable 'self' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation._handle_resize.__dict__.__setitem__('stypy_localization', localization)
        Animation._handle_resize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation._handle_resize.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation._handle_resize.__dict__.__setitem__('stypy_function_name', 'Animation._handle_resize')
        Animation._handle_resize.__dict__.__setitem__('stypy_param_names_list', [])
        Animation._handle_resize.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Animation._handle_resize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation._handle_resize.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation._handle_resize.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation._handle_resize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation._handle_resize.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation._handle_resize', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_handle_resize', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_handle_resize(...)' code ##################

        
        # Call to mpl_disconnect(...): (line 1365)
        # Processing the call arguments (line 1365)
        # Getting the type of 'self' (line 1365)
        self_3848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 40), 'self', False)
        # Obtaining the member '_resize_id' of a type (line 1365)
        _resize_id_3849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 40), self_3848, '_resize_id')
        # Processing the call keyword arguments (line 1365)
        kwargs_3850 = {}
        # Getting the type of 'self' (line 1365)
        self_3844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 8), 'self', False)
        # Obtaining the member '_fig' of a type (line 1365)
        _fig_3845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 8), self_3844, '_fig')
        # Obtaining the member 'canvas' of a type (line 1365)
        canvas_3846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 8), _fig_3845, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 1365)
        mpl_disconnect_3847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 8), canvas_3846, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 1365)
        mpl_disconnect_call_result_3851 = invoke(stypy.reporting.localization.Localization(__file__, 1365, 8), mpl_disconnect_3847, *[_resize_id_3849], **kwargs_3850)
        
        
        # Call to stop(...): (line 1366)
        # Processing the call keyword arguments (line 1366)
        kwargs_3855 = {}
        # Getting the type of 'self' (line 1366)
        self_3852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 8), 'self', False)
        # Obtaining the member 'event_source' of a type (line 1366)
        event_source_3853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 8), self_3852, 'event_source')
        # Obtaining the member 'stop' of a type (line 1366)
        stop_3854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 8), event_source_3853, 'stop')
        # Calling stop(args, kwargs) (line 1366)
        stop_call_result_3856 = invoke(stypy.reporting.localization.Localization(__file__, 1366, 8), stop_3854, *[], **kwargs_3855)
        
        
        # Call to clear(...): (line 1367)
        # Processing the call keyword arguments (line 1367)
        kwargs_3860 = {}
        # Getting the type of 'self' (line 1367)
        self_3857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 8), 'self', False)
        # Obtaining the member '_blit_cache' of a type (line 1367)
        _blit_cache_3858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 8), self_3857, '_blit_cache')
        # Obtaining the member 'clear' of a type (line 1367)
        clear_3859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 8), _blit_cache_3858, 'clear')
        # Calling clear(args, kwargs) (line 1367)
        clear_call_result_3861 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 8), clear_3859, *[], **kwargs_3860)
        
        
        # Call to _init_draw(...): (line 1368)
        # Processing the call keyword arguments (line 1368)
        kwargs_3864 = {}
        # Getting the type of 'self' (line 1368)
        self_3862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 8), 'self', False)
        # Obtaining the member '_init_draw' of a type (line 1368)
        _init_draw_3863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 8), self_3862, '_init_draw')
        # Calling _init_draw(args, kwargs) (line 1368)
        _init_draw_call_result_3865 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 8), _init_draw_3863, *[], **kwargs_3864)
        
        
        # Assigning a Call to a Attribute (line 1369):
        
        # Assigning a Call to a Attribute (line 1369):
        
        # Call to mpl_connect(...): (line 1369)
        # Processing the call arguments (line 1369)
        unicode_3870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1369, 55), 'unicode', u'draw_event')
        # Getting the type of 'self' (line 1370)
        self_3871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 55), 'self', False)
        # Obtaining the member '_end_redraw' of a type (line 1370)
        _end_redraw_3872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 55), self_3871, '_end_redraw')
        # Processing the call keyword arguments (line 1369)
        kwargs_3873 = {}
        # Getting the type of 'self' (line 1369)
        self_3866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 26), 'self', False)
        # Obtaining the member '_fig' of a type (line 1369)
        _fig_3867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1369, 26), self_3866, '_fig')
        # Obtaining the member 'canvas' of a type (line 1369)
        canvas_3868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1369, 26), _fig_3867, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 1369)
        mpl_connect_3869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1369, 26), canvas_3868, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1369)
        mpl_connect_call_result_3874 = invoke(stypy.reporting.localization.Localization(__file__, 1369, 26), mpl_connect_3869, *[unicode_3870, _end_redraw_3872], **kwargs_3873)
        
        # Getting the type of 'self' (line 1369)
        self_3875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 8), 'self')
        # Setting the type of the member '_resize_id' of a type (line 1369)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1369, 8), self_3875, '_resize_id', mpl_connect_call_result_3874)
        
        # ################# End of '_handle_resize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_handle_resize' in the type store
        # Getting the type of 'stypy_return_type' (line 1360)
        stypy_return_type_3876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3876)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_handle_resize'
        return stypy_return_type_3876


    @norecursion
    def _end_redraw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_end_redraw'
        module_type_store = module_type_store.open_function_context('_end_redraw', 1372, 4, False)
        # Assigning a type to the variable 'self' (line 1373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation._end_redraw.__dict__.__setitem__('stypy_localization', localization)
        Animation._end_redraw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation._end_redraw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation._end_redraw.__dict__.__setitem__('stypy_function_name', 'Animation._end_redraw')
        Animation._end_redraw.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        Animation._end_redraw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation._end_redraw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation._end_redraw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation._end_redraw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation._end_redraw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation._end_redraw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation._end_redraw', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_end_redraw', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_end_redraw(...)' code ##################

        
        # Call to _post_draw(...): (line 1375)
        # Processing the call arguments (line 1375)
        # Getting the type of 'None' (line 1375)
        None_3879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 24), 'None', False)
        # Getting the type of 'False' (line 1375)
        False_3880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 30), 'False', False)
        # Processing the call keyword arguments (line 1375)
        kwargs_3881 = {}
        # Getting the type of 'self' (line 1375)
        self_3877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 8), 'self', False)
        # Obtaining the member '_post_draw' of a type (line 1375)
        _post_draw_3878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 8), self_3877, '_post_draw')
        # Calling _post_draw(args, kwargs) (line 1375)
        _post_draw_call_result_3882 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 8), _post_draw_3878, *[None_3879, False_3880], **kwargs_3881)
        
        
        # Call to start(...): (line 1376)
        # Processing the call keyword arguments (line 1376)
        kwargs_3886 = {}
        # Getting the type of 'self' (line 1376)
        self_3883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 8), 'self', False)
        # Obtaining the member 'event_source' of a type (line 1376)
        event_source_3884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 8), self_3883, 'event_source')
        # Obtaining the member 'start' of a type (line 1376)
        start_3885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 8), event_source_3884, 'start')
        # Calling start(args, kwargs) (line 1376)
        start_call_result_3887 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 8), start_3885, *[], **kwargs_3886)
        
        
        # Call to mpl_disconnect(...): (line 1377)
        # Processing the call arguments (line 1377)
        # Getting the type of 'self' (line 1377)
        self_3892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 40), 'self', False)
        # Obtaining the member '_resize_id' of a type (line 1377)
        _resize_id_3893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 40), self_3892, '_resize_id')
        # Processing the call keyword arguments (line 1377)
        kwargs_3894 = {}
        # Getting the type of 'self' (line 1377)
        self_3888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 8), 'self', False)
        # Obtaining the member '_fig' of a type (line 1377)
        _fig_3889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 8), self_3888, '_fig')
        # Obtaining the member 'canvas' of a type (line 1377)
        canvas_3890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 8), _fig_3889, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 1377)
        mpl_disconnect_3891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 8), canvas_3890, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 1377)
        mpl_disconnect_call_result_3895 = invoke(stypy.reporting.localization.Localization(__file__, 1377, 8), mpl_disconnect_3891, *[_resize_id_3893], **kwargs_3894)
        
        
        # Assigning a Call to a Attribute (line 1378):
        
        # Assigning a Call to a Attribute (line 1378):
        
        # Call to mpl_connect(...): (line 1378)
        # Processing the call arguments (line 1378)
        unicode_3900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1378, 55), 'unicode', u'resize_event')
        # Getting the type of 'self' (line 1379)
        self_3901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 55), 'self', False)
        # Obtaining the member '_handle_resize' of a type (line 1379)
        _handle_resize_3902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1379, 55), self_3901, '_handle_resize')
        # Processing the call keyword arguments (line 1378)
        kwargs_3903 = {}
        # Getting the type of 'self' (line 1378)
        self_3896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 26), 'self', False)
        # Obtaining the member '_fig' of a type (line 1378)
        _fig_3897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 26), self_3896, '_fig')
        # Obtaining the member 'canvas' of a type (line 1378)
        canvas_3898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 26), _fig_3897, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 1378)
        mpl_connect_3899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 26), canvas_3898, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1378)
        mpl_connect_call_result_3904 = invoke(stypy.reporting.localization.Localization(__file__, 1378, 26), mpl_connect_3899, *[unicode_3900, _handle_resize_3902], **kwargs_3903)
        
        # Getting the type of 'self' (line 1378)
        self_3905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 8), 'self')
        # Setting the type of the member '_resize_id' of a type (line 1378)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 8), self_3905, '_resize_id', mpl_connect_call_result_3904)
        
        # ################# End of '_end_redraw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_end_redraw' in the type store
        # Getting the type of 'stypy_return_type' (line 1372)
        stypy_return_type_3906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_3906)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_end_redraw'
        return stypy_return_type_3906


    @norecursion
    def to_html5_video(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1381)
        None_3907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 41), 'None')
        defaults = [None_3907]
        # Create a new context for function 'to_html5_video'
        module_type_store = module_type_store.open_function_context('to_html5_video', 1381, 4, False)
        # Assigning a type to the variable 'self' (line 1382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation.to_html5_video.__dict__.__setitem__('stypy_localization', localization)
        Animation.to_html5_video.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation.to_html5_video.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation.to_html5_video.__dict__.__setitem__('stypy_function_name', 'Animation.to_html5_video')
        Animation.to_html5_video.__dict__.__setitem__('stypy_param_names_list', ['embed_limit'])
        Animation.to_html5_video.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation.to_html5_video.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation.to_html5_video.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation.to_html5_video.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation.to_html5_video.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation.to_html5_video.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation.to_html5_video', ['embed_limit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_html5_video', localization, ['embed_limit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_html5_video(...)' code ##################

        unicode_3908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1389, (-1)), 'unicode', u'Returns animation as an HTML5 video tag.\n\n        This saves the animation as an h264 video, encoded in base64\n        directly into the HTML5 video tag. This respects the rc parameters\n        for the writer as well as the bitrate. This also makes use of the\n        ``interval`` to control the speed, and uses the ``repeat``\n        parameter to decide whether to loop.\n        ')
        
        # Assigning a Str to a Name (line 1390):
        
        # Assigning a Str to a Name (line 1390):
        unicode_3909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1393, (-1)), 'unicode', u'<video {size} {options}>\n  <source type="video/mp4" src="data:video/mp4;base64,{video}">\n  Your browser does not support the video tag.\n</video>')
        # Assigning a type to the variable 'VIDEO_TAG' (line 1390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1390, 8), 'VIDEO_TAG', unicode_3909)
        
        # Type idiom detected: calculating its left and rigth part (line 1395)
        unicode_3910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1395, 29), 'unicode', u'_base64_video')
        # Getting the type of 'self' (line 1395)
        self_3911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 23), 'self')
        
        (may_be_3912, more_types_in_union_3913) = may_not_provide_member(unicode_3910, self_3911)

        if may_be_3912:

            if more_types_in_union_3913:
                # Runtime conditional SSA (line 1395)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 1395)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 8), 'self', remove_member_provider_from_union(self_3911, u'_base64_video'))
            
            # Type idiom detected: calculating its left and rigth part (line 1397)
            # Getting the type of 'embed_limit' (line 1397)
            embed_limit_3914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 15), 'embed_limit')
            # Getting the type of 'None' (line 1397)
            None_3915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 30), 'None')
            
            (may_be_3916, more_types_in_union_3917) = may_be_none(embed_limit_3914, None_3915)

            if may_be_3916:

                if more_types_in_union_3917:
                    # Runtime conditional SSA (line 1397)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Subscript to a Name (line 1398):
                
                # Assigning a Subscript to a Name (line 1398):
                
                # Obtaining the type of the subscript
                unicode_3918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, 39), 'unicode', u'animation.embed_limit')
                # Getting the type of 'rcParams' (line 1398)
                rcParams_3919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 30), 'rcParams')
                # Obtaining the member '__getitem__' of a type (line 1398)
                getitem___3920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1398, 30), rcParams_3919, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1398)
                subscript_call_result_3921 = invoke(stypy.reporting.localization.Localization(__file__, 1398, 30), getitem___3920, unicode_3918)
                
                # Assigning a type to the variable 'embed_limit' (line 1398)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 16), 'embed_limit', subscript_call_result_3921)

                if more_types_in_union_3917:
                    # SSA join for if statement (line 1397)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Getting the type of 'embed_limit' (line 1401)
            embed_limit_3922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 12), 'embed_limit')
            int_3923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 27), 'int')
            int_3924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 34), 'int')
            # Applying the binary operator '*' (line 1401)
            result_mul_3925 = python_operator(stypy.reporting.localization.Localization(__file__, 1401, 27), '*', int_3923, int_3924)
            
            # Applying the binary operator '*=' (line 1401)
            result_imul_3926 = python_operator(stypy.reporting.localization.Localization(__file__, 1401, 12), '*=', embed_limit_3922, result_mul_3925)
            # Assigning a type to the variable 'embed_limit' (line 1401)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1401, 12), 'embed_limit', result_imul_3926)
            
            
            # Call to NamedTemporaryFile(...): (line 1405)
            # Processing the call keyword arguments (line 1405)
            unicode_3929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, 52), 'unicode', u'.m4v')
            keyword_3930 = unicode_3929
            # Getting the type of 'False' (line 1406)
            False_3931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 52), 'False', False)
            keyword_3932 = False_3931
            kwargs_3933 = {'suffix': keyword_3930, 'delete': keyword_3932}
            # Getting the type of 'tempfile' (line 1405)
            tempfile_3927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 17), 'tempfile', False)
            # Obtaining the member 'NamedTemporaryFile' of a type (line 1405)
            NamedTemporaryFile_3928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 17), tempfile_3927, 'NamedTemporaryFile')
            # Calling NamedTemporaryFile(args, kwargs) (line 1405)
            NamedTemporaryFile_call_result_3934 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 17), NamedTemporaryFile_3928, *[], **kwargs_3933)
            
            with_3935 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1405, 17), NamedTemporaryFile_call_result_3934, 'with parameter', '__enter__', '__exit__')

            if with_3935:
                # Calling the __enter__ method to initiate a with section
                # Obtaining the member '__enter__' of a type (line 1405)
                enter___3936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 17), NamedTemporaryFile_call_result_3934, '__enter__')
                with_enter_3937 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 17), enter___3936)
                # Assigning a type to the variable 'f' (line 1405)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 17), 'f', with_enter_3937)
                
                # Assigning a Subscript to a Name (line 1409):
                
                # Assigning a Subscript to a Name (line 1409):
                
                # Obtaining the type of the subscript
                
                # Obtaining the type of the subscript
                unicode_3938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1409, 42), 'unicode', u'animation.writer')
                # Getting the type of 'rcParams' (line 1409)
                rcParams_3939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 33), 'rcParams')
                # Obtaining the member '__getitem__' of a type (line 1409)
                getitem___3940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 33), rcParams_3939, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1409)
                subscript_call_result_3941 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 33), getitem___3940, unicode_3938)
                
                # Getting the type of 'writers' (line 1409)
                writers_3942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 25), 'writers')
                # Obtaining the member '__getitem__' of a type (line 1409)
                getitem___3943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 25), writers_3942, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1409)
                subscript_call_result_3944 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 25), getitem___3943, subscript_call_result_3941)
                
                # Assigning a type to the variable 'Writer' (line 1409)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 16), 'Writer', subscript_call_result_3944)
                
                # Assigning a Call to a Name (line 1410):
                
                # Assigning a Call to a Name (line 1410):
                
                # Call to Writer(...): (line 1410)
                # Processing the call keyword arguments (line 1410)
                unicode_3946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1410, 38), 'unicode', u'h264')
                keyword_3947 = unicode_3946
                
                # Obtaining the type of the subscript
                unicode_3948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1411, 49), 'unicode', u'animation.bitrate')
                # Getting the type of 'rcParams' (line 1411)
                rcParams_3949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 40), 'rcParams', False)
                # Obtaining the member '__getitem__' of a type (line 1411)
                getitem___3950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 40), rcParams_3949, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1411)
                subscript_call_result_3951 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 40), getitem___3950, unicode_3948)
                
                keyword_3952 = subscript_call_result_3951
                float_3953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 36), 'float')
                # Getting the type of 'self' (line 1412)
                self_3954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 44), 'self', False)
                # Obtaining the member '_interval' of a type (line 1412)
                _interval_3955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1412, 44), self_3954, '_interval')
                # Applying the binary operator 'div' (line 1412)
                result_div_3956 = python_operator(stypy.reporting.localization.Localization(__file__, 1412, 36), 'div', float_3953, _interval_3955)
                
                keyword_3957 = result_div_3956
                kwargs_3958 = {'codec': keyword_3947, 'bitrate': keyword_3952, 'fps': keyword_3957}
                # Getting the type of 'Writer' (line 1410)
                Writer_3945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 25), 'Writer', False)
                # Calling Writer(args, kwargs) (line 1410)
                Writer_call_result_3959 = invoke(stypy.reporting.localization.Localization(__file__, 1410, 25), Writer_3945, *[], **kwargs_3958)
                
                # Assigning a type to the variable 'writer' (line 1410)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 16), 'writer', Writer_call_result_3959)
                
                # Call to save(...): (line 1413)
                # Processing the call arguments (line 1413)
                # Getting the type of 'f' (line 1413)
                f_3962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 26), 'f', False)
                # Obtaining the member 'name' of a type (line 1413)
                name_3963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 26), f_3962, 'name')
                # Processing the call keyword arguments (line 1413)
                # Getting the type of 'writer' (line 1413)
                writer_3964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 41), 'writer', False)
                keyword_3965 = writer_3964
                kwargs_3966 = {'writer': keyword_3965}
                # Getting the type of 'self' (line 1413)
                self_3960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 16), 'self', False)
                # Obtaining the member 'save' of a type (line 1413)
                save_3961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 16), self_3960, 'save')
                # Calling save(args, kwargs) (line 1413)
                save_call_result_3967 = invoke(stypy.reporting.localization.Localization(__file__, 1413, 16), save_3961, *[name_3963], **kwargs_3966)
                
                # Calling the __exit__ method to finish a with section
                # Obtaining the member '__exit__' of a type (line 1405)
                exit___3968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 17), NamedTemporaryFile_call_result_3934, '__exit__')
                with_exit_3969 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 17), exit___3968, None, None, None)

            
            # Call to open(...): (line 1416)
            # Processing the call arguments (line 1416)
            # Getting the type of 'f' (line 1416)
            f_3971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 22), 'f', False)
            # Obtaining the member 'name' of a type (line 1416)
            name_3972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 22), f_3971, 'name')
            unicode_3973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1416, 30), 'unicode', u'rb')
            # Processing the call keyword arguments (line 1416)
            kwargs_3974 = {}
            # Getting the type of 'open' (line 1416)
            open_3970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 17), 'open', False)
            # Calling open(args, kwargs) (line 1416)
            open_call_result_3975 = invoke(stypy.reporting.localization.Localization(__file__, 1416, 17), open_3970, *[name_3972, unicode_3973], **kwargs_3974)
            
            with_3976 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1416, 17), open_call_result_3975, 'with parameter', '__enter__', '__exit__')

            if with_3976:
                # Calling the __enter__ method to initiate a with section
                # Obtaining the member '__enter__' of a type (line 1416)
                enter___3977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 17), open_call_result_3975, '__enter__')
                with_enter_3978 = invoke(stypy.reporting.localization.Localization(__file__, 1416, 17), enter___3977)
                # Assigning a type to the variable 'video' (line 1416)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 17), 'video', with_enter_3978)
                
                # Assigning a Call to a Name (line 1417):
                
                # Assigning a Call to a Name (line 1417):
                
                # Call to encodebytes(...): (line 1417)
                # Processing the call arguments (line 1417)
                
                # Call to read(...): (line 1417)
                # Processing the call keyword arguments (line 1417)
                kwargs_3982 = {}
                # Getting the type of 'video' (line 1417)
                video_3980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 36), 'video', False)
                # Obtaining the member 'read' of a type (line 1417)
                read_3981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 36), video_3980, 'read')
                # Calling read(args, kwargs) (line 1417)
                read_call_result_3983 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 36), read_3981, *[], **kwargs_3982)
                
                # Processing the call keyword arguments (line 1417)
                kwargs_3984 = {}
                # Getting the type of 'encodebytes' (line 1417)
                encodebytes_3979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 24), 'encodebytes', False)
                # Calling encodebytes(args, kwargs) (line 1417)
                encodebytes_call_result_3985 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 24), encodebytes_3979, *[read_call_result_3983], **kwargs_3984)
                
                # Assigning a type to the variable 'vid64' (line 1417)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 16), 'vid64', encodebytes_call_result_3985)
                
                # Assigning a Call to a Name (line 1418):
                
                # Assigning a Call to a Name (line 1418):
                
                # Call to len(...): (line 1418)
                # Processing the call arguments (line 1418)
                # Getting the type of 'vid64' (line 1418)
                vid64_3987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 30), 'vid64', False)
                # Processing the call keyword arguments (line 1418)
                kwargs_3988 = {}
                # Getting the type of 'len' (line 1418)
                len_3986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 26), 'len', False)
                # Calling len(args, kwargs) (line 1418)
                len_call_result_3989 = invoke(stypy.reporting.localization.Localization(__file__, 1418, 26), len_3986, *[vid64_3987], **kwargs_3988)
                
                # Assigning a type to the variable 'vid_len' (line 1418)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 16), 'vid_len', len_call_result_3989)
                
                
                # Getting the type of 'vid_len' (line 1419)
                vid_len_3990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 19), 'vid_len')
                # Getting the type of 'embed_limit' (line 1419)
                embed_limit_3991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 30), 'embed_limit')
                # Applying the binary operator '>=' (line 1419)
                result_ge_3992 = python_operator(stypy.reporting.localization.Localization(__file__, 1419, 19), '>=', vid_len_3990, embed_limit_3991)
                
                # Testing the type of an if condition (line 1419)
                if_condition_3993 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1419, 16), result_ge_3992)
                # Assigning a type to the variable 'if_condition_3993' (line 1419)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 16), 'if_condition_3993', if_condition_3993)
                # SSA begins for if statement (line 1419)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Call to warn(...): (line 1420)
                # Processing the call arguments (line 1420)
                
                # Call to format(...): (line 1420)
                # Processing the call arguments (line 1420)
                # Getting the type of 'vid_len' (line 1424)
                vid_len_3998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 65), 'vid_len', False)
                # Getting the type of 'embed_limit' (line 1425)
                embed_limit_3999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 65), 'embed_limit', False)
                # Processing the call keyword arguments (line 1420)
                kwargs_4000 = {}
                unicode_3996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1420, 34), 'unicode', u"Animation movie is {} bytes, exceeding the limit of {}. If you're sure you want a large animation embedded, set the animation.embed_limit rc parameter to a larger value (in MB).")
                # Obtaining the member 'format' of a type (line 1420)
                format_3997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 34), unicode_3996, 'format')
                # Calling format(args, kwargs) (line 1420)
                format_call_result_4001 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 34), format_3997, *[vid_len_3998, embed_limit_3999], **kwargs_4000)
                
                # Processing the call keyword arguments (line 1420)
                kwargs_4002 = {}
                # Getting the type of 'warnings' (line 1420)
                warnings_3994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 20), 'warnings', False)
                # Obtaining the member 'warn' of a type (line 1420)
                warn_3995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 20), warnings_3994, 'warn')
                # Calling warn(args, kwargs) (line 1420)
                warn_call_result_4003 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 20), warn_3995, *[format_call_result_4001], **kwargs_4002)
                
                # SSA branch for the else part of an if statement (line 1419)
                module_type_store.open_ssa_branch('else')
                
                # Assigning a Call to a Attribute (line 1427):
                
                # Assigning a Call to a Attribute (line 1427):
                
                # Call to decode(...): (line 1427)
                # Processing the call arguments (line 1427)
                unicode_4006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1427, 54), 'unicode', u'ascii')
                # Processing the call keyword arguments (line 1427)
                kwargs_4007 = {}
                # Getting the type of 'vid64' (line 1427)
                vid64_4004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 41), 'vid64', False)
                # Obtaining the member 'decode' of a type (line 1427)
                decode_4005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1427, 41), vid64_4004, 'decode')
                # Calling decode(args, kwargs) (line 1427)
                decode_call_result_4008 = invoke(stypy.reporting.localization.Localization(__file__, 1427, 41), decode_4005, *[unicode_4006], **kwargs_4007)
                
                # Getting the type of 'self' (line 1427)
                self_4009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 20), 'self')
                # Setting the type of the member '_base64_video' of a type (line 1427)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1427, 20), self_4009, '_base64_video', decode_call_result_4008)
                
                # Assigning a Call to a Attribute (line 1428):
                
                # Assigning a Call to a Attribute (line 1428):
                
                # Call to format(...): (line 1428)
                # Getting the type of 'writer' (line 1429)
                writer_4012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 29), 'writer', False)
                # Obtaining the member 'frame_size' of a type (line 1429)
                frame_size_4013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1429, 29), writer_4012, 'frame_size')
                # Processing the call keyword arguments (line 1428)
                kwargs_4014 = {}
                unicode_4010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1428, 39), 'unicode', u'width="{}" height="{}"')
                # Obtaining the member 'format' of a type (line 1428)
                format_4011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1428, 39), unicode_4010, 'format')
                # Calling format(args, kwargs) (line 1428)
                format_call_result_4015 = invoke(stypy.reporting.localization.Localization(__file__, 1428, 39), format_4011, *[frame_size_4013], **kwargs_4014)
                
                # Getting the type of 'self' (line 1428)
                self_4016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 20), 'self')
                # Setting the type of the member '_video_size' of a type (line 1428)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1428, 20), self_4016, '_video_size', format_call_result_4015)
                # SSA join for if statement (line 1419)
                module_type_store = module_type_store.join_ssa_context()
                
                # Calling the __exit__ method to finish a with section
                # Obtaining the member '__exit__' of a type (line 1416)
                exit___4017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 17), open_call_result_3975, '__exit__')
                with_exit_4018 = invoke(stypy.reporting.localization.Localization(__file__, 1416, 17), exit___4017, None, None, None)

            
            # Call to remove(...): (line 1432)
            # Processing the call arguments (line 1432)
            # Getting the type of 'f' (line 1432)
            f_4021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 22), 'f', False)
            # Obtaining the member 'name' of a type (line 1432)
            name_4022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 22), f_4021, 'name')
            # Processing the call keyword arguments (line 1432)
            kwargs_4023 = {}
            # Getting the type of 'os' (line 1432)
            os_4019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 12), 'os', False)
            # Obtaining the member 'remove' of a type (line 1432)
            remove_4020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 12), os_4019, 'remove')
            # Calling remove(args, kwargs) (line 1432)
            remove_call_result_4024 = invoke(stypy.reporting.localization.Localization(__file__, 1432, 12), remove_4020, *[name_4022], **kwargs_4023)
            

            if more_types_in_union_3913:
                # SSA join for if statement (line 1395)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1435)
        unicode_4025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, 25), 'unicode', u'_base64_video')
        # Getting the type of 'self' (line 1435)
        self_4026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 19), 'self')
        
        (may_be_4027, more_types_in_union_4028) = may_provide_member(unicode_4025, self_4026)

        if may_be_4027:

            if more_types_in_union_4028:
                # Runtime conditional SSA (line 1435)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 1435)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1435, 8), 'self', remove_not_member_provider_from_union(self_4026, u'_base64_video'))
            
            # Assigning a List to a Name (line 1437):
            
            # Assigning a List to a Name (line 1437):
            
            # Obtaining an instance of the builtin type 'list' (line 1437)
            list_4029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1437, 22), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1437)
            # Adding element type (line 1437)
            unicode_4030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1437, 23), 'unicode', u'controls')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1437, 22), list_4029, unicode_4030)
            # Adding element type (line 1437)
            unicode_4031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1437, 35), 'unicode', u'autoplay')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1437, 22), list_4029, unicode_4031)
            
            # Assigning a type to the variable 'options' (line 1437)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 12), 'options', list_4029)
            
            
            # Evaluating a boolean operation
            
            # Call to hasattr(...): (line 1440)
            # Processing the call arguments (line 1440)
            # Getting the type of 'self' (line 1440)
            self_4033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 23), 'self', False)
            unicode_4034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1440, 29), 'unicode', u'repeat')
            # Processing the call keyword arguments (line 1440)
            kwargs_4035 = {}
            # Getting the type of 'hasattr' (line 1440)
            hasattr_4032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 15), 'hasattr', False)
            # Calling hasattr(args, kwargs) (line 1440)
            hasattr_call_result_4036 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 15), hasattr_4032, *[self_4033, unicode_4034], **kwargs_4035)
            
            # Getting the type of 'self' (line 1440)
            self_4037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 43), 'self')
            # Obtaining the member 'repeat' of a type (line 1440)
            repeat_4038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 43), self_4037, 'repeat')
            # Applying the binary operator 'and' (line 1440)
            result_and_keyword_4039 = python_operator(stypy.reporting.localization.Localization(__file__, 1440, 15), 'and', hasattr_call_result_4036, repeat_4038)
            
            # Testing the type of an if condition (line 1440)
            if_condition_4040 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1440, 12), result_and_keyword_4039)
            # Assigning a type to the variable 'if_condition_4040' (line 1440)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 12), 'if_condition_4040', if_condition_4040)
            # SSA begins for if statement (line 1440)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to append(...): (line 1441)
            # Processing the call arguments (line 1441)
            unicode_4043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 31), 'unicode', u'loop')
            # Processing the call keyword arguments (line 1441)
            kwargs_4044 = {}
            # Getting the type of 'options' (line 1441)
            options_4041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 16), 'options', False)
            # Obtaining the member 'append' of a type (line 1441)
            append_4042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1441, 16), options_4041, 'append')
            # Calling append(args, kwargs) (line 1441)
            append_call_result_4045 = invoke(stypy.reporting.localization.Localization(__file__, 1441, 16), append_4042, *[unicode_4043], **kwargs_4044)
            
            # SSA join for if statement (line 1440)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to format(...): (line 1443)
            # Processing the call keyword arguments (line 1443)
            # Getting the type of 'self' (line 1443)
            self_4048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 42), 'self', False)
            # Obtaining the member '_base64_video' of a type (line 1443)
            _base64_video_4049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1443, 42), self_4048, '_base64_video')
            keyword_4050 = _base64_video_4049
            # Getting the type of 'self' (line 1444)
            self_4051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 41), 'self', False)
            # Obtaining the member '_video_size' of a type (line 1444)
            _video_size_4052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 41), self_4051, '_video_size')
            keyword_4053 = _video_size_4052
            
            # Call to join(...): (line 1445)
            # Processing the call arguments (line 1445)
            # Getting the type of 'options' (line 1445)
            options_4056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 53), 'options', False)
            # Processing the call keyword arguments (line 1445)
            kwargs_4057 = {}
            unicode_4054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1445, 44), 'unicode', u' ')
            # Obtaining the member 'join' of a type (line 1445)
            join_4055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1445, 44), unicode_4054, 'join')
            # Calling join(args, kwargs) (line 1445)
            join_call_result_4058 = invoke(stypy.reporting.localization.Localization(__file__, 1445, 44), join_4055, *[options_4056], **kwargs_4057)
            
            keyword_4059 = join_call_result_4058
            kwargs_4060 = {'video': keyword_4050, 'options': keyword_4059, 'size': keyword_4053}
            # Getting the type of 'VIDEO_TAG' (line 1443)
            VIDEO_TAG_4046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 19), 'VIDEO_TAG', False)
            # Obtaining the member 'format' of a type (line 1443)
            format_4047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1443, 19), VIDEO_TAG_4046, 'format')
            # Calling format(args, kwargs) (line 1443)
            format_call_result_4061 = invoke(stypy.reporting.localization.Localization(__file__, 1443, 19), format_4047, *[], **kwargs_4060)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1443)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1443, 12), 'stypy_return_type', format_call_result_4061)

            if more_types_in_union_4028:
                # Runtime conditional SSA for else branch (line 1435)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_4027) or more_types_in_union_4028):
            # Assigning a type to the variable 'self' (line 1435)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1435, 8), 'self', remove_member_provider_from_union(self_4026, u'_base64_video'))
            unicode_4062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1447, 19), 'unicode', u'Video too large to embed.')
            # Assigning a type to the variable 'stypy_return_type' (line 1447)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 12), 'stypy_return_type', unicode_4062)

            if (may_be_4027 and more_types_in_union_4028):
                # SSA join for if statement (line 1435)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'to_html5_video(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_html5_video' in the type store
        # Getting the type of 'stypy_return_type' (line 1381)
        stypy_return_type_4063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_4063)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_html5_video'
        return stypy_return_type_4063


    @norecursion
    def to_jshtml(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1449)
        None_4064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 28), 'None')
        # Getting the type of 'True' (line 1449)
        True_4065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 47), 'True')
        # Getting the type of 'None' (line 1449)
        None_4066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 66), 'None')
        defaults = [None_4064, True_4065, None_4066]
        # Create a new context for function 'to_jshtml'
        module_type_store = module_type_store.open_function_context('to_jshtml', 1449, 4, False)
        # Assigning a type to the variable 'self' (line 1450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1450, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation.to_jshtml.__dict__.__setitem__('stypy_localization', localization)
        Animation.to_jshtml.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation.to_jshtml.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation.to_jshtml.__dict__.__setitem__('stypy_function_name', 'Animation.to_jshtml')
        Animation.to_jshtml.__dict__.__setitem__('stypy_param_names_list', ['fps', 'embed_frames', 'default_mode'])
        Animation.to_jshtml.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation.to_jshtml.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation.to_jshtml.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation.to_jshtml.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation.to_jshtml.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation.to_jshtml.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation.to_jshtml', ['fps', 'embed_frames', 'default_mode'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_jshtml', localization, ['fps', 'embed_frames', 'default_mode'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_jshtml(...)' code ##################

        unicode_4067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1450, 8), 'unicode', u'Generate HTML representation of the animation')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'fps' (line 1451)
        fps_4068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 11), 'fps')
        # Getting the type of 'None' (line 1451)
        None_4069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 18), 'None')
        # Applying the binary operator 'is' (line 1451)
        result_is__4070 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 11), 'is', fps_4068, None_4069)
        
        
        # Call to hasattr(...): (line 1451)
        # Processing the call arguments (line 1451)
        # Getting the type of 'self' (line 1451)
        self_4072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 35), 'self', False)
        unicode_4073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, 41), 'unicode', u'_interval')
        # Processing the call keyword arguments (line 1451)
        kwargs_4074 = {}
        # Getting the type of 'hasattr' (line 1451)
        hasattr_4071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 27), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 1451)
        hasattr_call_result_4075 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 27), hasattr_4071, *[self_4072, unicode_4073], **kwargs_4074)
        
        # Applying the binary operator 'and' (line 1451)
        result_and_keyword_4076 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 11), 'and', result_is__4070, hasattr_call_result_4075)
        
        # Testing the type of an if condition (line 1451)
        if_condition_4077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1451, 8), result_and_keyword_4076)
        # Assigning a type to the variable 'if_condition_4077' (line 1451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1451, 8), 'if_condition_4077', if_condition_4077)
        # SSA begins for if statement (line 1451)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1453):
        
        # Assigning a BinOp to a Name (line 1453):
        int_4078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1453, 18), 'int')
        # Getting the type of 'self' (line 1453)
        self_4079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 25), 'self')
        # Obtaining the member '_interval' of a type (line 1453)
        _interval_4080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1453, 25), self_4079, '_interval')
        # Applying the binary operator 'div' (line 1453)
        result_div_4081 = python_operator(stypy.reporting.localization.Localization(__file__, 1453, 18), 'div', int_4078, _interval_4080)
        
        # Assigning a type to the variable 'fps' (line 1453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1453, 12), 'fps', result_div_4081)
        # SSA join for if statement (line 1451)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1457)
        # Getting the type of 'default_mode' (line 1457)
        default_mode_4082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 11), 'default_mode')
        # Getting the type of 'None' (line 1457)
        None_4083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 27), 'None')
        
        (may_be_4084, more_types_in_union_4085) = may_be_none(default_mode_4082, None_4083)

        if may_be_4084:

            if more_types_in_union_4085:
                # Runtime conditional SSA (line 1457)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a IfExp to a Name (line 1458):
            
            # Assigning a IfExp to a Name (line 1458):
            
            # Getting the type of 'self' (line 1458)
            self_4086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 37), 'self')
            # Obtaining the member 'repeat' of a type (line 1458)
            repeat_4087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 37), self_4086, 'repeat')
            # Testing the type of an if expression (line 1458)
            is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1458, 27), repeat_4087)
            # SSA begins for if expression (line 1458)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
            unicode_4088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 27), 'unicode', u'loop')
            # SSA branch for the else part of an if expression (line 1458)
            module_type_store.open_ssa_branch('if expression else')
            unicode_4089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 54), 'unicode', u'once')
            # SSA join for if expression (line 1458)
            module_type_store = module_type_store.join_ssa_context()
            if_exp_4090 = union_type.UnionType.add(unicode_4088, unicode_4089)
            
            # Assigning a type to the variable 'default_mode' (line 1458)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 12), 'default_mode', if_exp_4090)

            if more_types_in_union_4085:
                # SSA join for if statement (line 1457)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1460)
        unicode_4091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1460, 25), 'unicode', u'_html_representation')
        # Getting the type of 'self' (line 1460)
        self_4092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 19), 'self')
        
        (may_be_4093, more_types_in_union_4094) = may_provide_member(unicode_4091, self_4092)

        if may_be_4093:

            if more_types_in_union_4094:
                # Runtime conditional SSA (line 1460)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 1460)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'self', remove_not_member_provider_from_union(self_4092, u'_html_representation'))
            # Getting the type of 'self' (line 1461)
            self_4095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 19), 'self')
            # Obtaining the member '_html_representation' of a type (line 1461)
            _html_representation_4096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 19), self_4095, '_html_representation')
            # Assigning a type to the variable 'stypy_return_type' (line 1461)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1461, 12), 'stypy_return_type', _html_representation_4096)

            if more_types_in_union_4094:
                # Runtime conditional SSA for else branch (line 1460)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_4093) or more_types_in_union_4094):
            # Assigning a type to the variable 'self' (line 1460)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'self', remove_member_provider_from_union(self_4092, u'_html_representation'))
            
            # Call to NamedTemporaryFile(...): (line 1465)
            # Processing the call keyword arguments (line 1465)
            unicode_4099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1465, 52), 'unicode', u'.html')
            keyword_4100 = unicode_4099
            # Getting the type of 'False' (line 1466)
            False_4101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 52), 'False', False)
            keyword_4102 = False_4101
            kwargs_4103 = {'suffix': keyword_4100, 'delete': keyword_4102}
            # Getting the type of 'tempfile' (line 1465)
            tempfile_4097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 17), 'tempfile', False)
            # Obtaining the member 'NamedTemporaryFile' of a type (line 1465)
            NamedTemporaryFile_4098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 17), tempfile_4097, 'NamedTemporaryFile')
            # Calling NamedTemporaryFile(args, kwargs) (line 1465)
            NamedTemporaryFile_call_result_4104 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 17), NamedTemporaryFile_4098, *[], **kwargs_4103)
            
            with_4105 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1465, 17), NamedTemporaryFile_call_result_4104, 'with parameter', '__enter__', '__exit__')

            if with_4105:
                # Calling the __enter__ method to initiate a with section
                # Obtaining the member '__enter__' of a type (line 1465)
                enter___4106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 17), NamedTemporaryFile_call_result_4104, '__enter__')
                with_enter_4107 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 17), enter___4106)
                # Assigning a type to the variable 'f' (line 1465)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1465, 17), 'f', with_enter_4107)
                
                # Call to save(...): (line 1467)
                # Processing the call arguments (line 1467)
                # Getting the type of 'f' (line 1467)
                f_4110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 26), 'f', False)
                # Obtaining the member 'name' of a type (line 1467)
                name_4111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 26), f_4110, 'name')
                # Processing the call keyword arguments (line 1467)
                
                # Call to HTMLWriter(...): (line 1467)
                # Processing the call keyword arguments (line 1467)
                # Getting the type of 'fps' (line 1467)
                fps_4113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 56), 'fps', False)
                keyword_4114 = fps_4113
                # Getting the type of 'embed_frames' (line 1468)
                embed_frames_4115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 65), 'embed_frames', False)
                keyword_4116 = embed_frames_4115
                # Getting the type of 'default_mode' (line 1469)
                default_mode_4117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 65), 'default_mode', False)
                keyword_4118 = default_mode_4117
                kwargs_4119 = {'embed_frames': keyword_4116, 'default_mode': keyword_4118, 'fps': keyword_4114}
                # Getting the type of 'HTMLWriter' (line 1467)
                HTMLWriter_4112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 41), 'HTMLWriter', False)
                # Calling HTMLWriter(args, kwargs) (line 1467)
                HTMLWriter_call_result_4120 = invoke(stypy.reporting.localization.Localization(__file__, 1467, 41), HTMLWriter_4112, *[], **kwargs_4119)
                
                keyword_4121 = HTMLWriter_call_result_4120
                kwargs_4122 = {'writer': keyword_4121}
                # Getting the type of 'self' (line 1467)
                self_4108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 16), 'self', False)
                # Obtaining the member 'save' of a type (line 1467)
                save_4109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 16), self_4108, 'save')
                # Calling save(args, kwargs) (line 1467)
                save_call_result_4123 = invoke(stypy.reporting.localization.Localization(__file__, 1467, 16), save_4109, *[name_4111], **kwargs_4122)
                
                # Calling the __exit__ method to finish a with section
                # Obtaining the member '__exit__' of a type (line 1465)
                exit___4124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 17), NamedTemporaryFile_call_result_4104, '__exit__')
                with_exit_4125 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 17), exit___4124, None, None, None)

            
            # Call to open(...): (line 1471)
            # Processing the call arguments (line 1471)
            # Getting the type of 'f' (line 1471)
            f_4127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 22), 'f', False)
            # Obtaining the member 'name' of a type (line 1471)
            name_4128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 22), f_4127, 'name')
            # Processing the call keyword arguments (line 1471)
            kwargs_4129 = {}
            # Getting the type of 'open' (line 1471)
            open_4126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 17), 'open', False)
            # Calling open(args, kwargs) (line 1471)
            open_call_result_4130 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 17), open_4126, *[name_4128], **kwargs_4129)
            
            with_4131 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1471, 17), open_call_result_4130, 'with parameter', '__enter__', '__exit__')

            if with_4131:
                # Calling the __enter__ method to initiate a with section
                # Obtaining the member '__enter__' of a type (line 1471)
                enter___4132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 17), open_call_result_4130, '__enter__')
                with_enter_4133 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 17), enter___4132)
                # Assigning a type to the variable 'fobj' (line 1471)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 17), 'fobj', with_enter_4133)
                
                # Assigning a Call to a Name (line 1472):
                
                # Assigning a Call to a Name (line 1472):
                
                # Call to read(...): (line 1472)
                # Processing the call keyword arguments (line 1472)
                kwargs_4136 = {}
                # Getting the type of 'fobj' (line 1472)
                fobj_4134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 23), 'fobj', False)
                # Obtaining the member 'read' of a type (line 1472)
                read_4135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 23), fobj_4134, 'read')
                # Calling read(args, kwargs) (line 1472)
                read_call_result_4137 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 23), read_4135, *[], **kwargs_4136)
                
                # Assigning a type to the variable 'html' (line 1472)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 16), 'html', read_call_result_4137)
                # Calling the __exit__ method to finish a with section
                # Obtaining the member '__exit__' of a type (line 1471)
                exit___4138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 17), open_call_result_4130, '__exit__')
                with_exit_4139 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 17), exit___4138, None, None, None)

            
            # Call to remove(...): (line 1475)
            # Processing the call arguments (line 1475)
            # Getting the type of 'f' (line 1475)
            f_4142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 22), 'f', False)
            # Obtaining the member 'name' of a type (line 1475)
            name_4143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 22), f_4142, 'name')
            # Processing the call keyword arguments (line 1475)
            kwargs_4144 = {}
            # Getting the type of 'os' (line 1475)
            os_4140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 12), 'os', False)
            # Obtaining the member 'remove' of a type (line 1475)
            remove_4141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 12), os_4140, 'remove')
            # Calling remove(args, kwargs) (line 1475)
            remove_call_result_4145 = invoke(stypy.reporting.localization.Localization(__file__, 1475, 12), remove_4141, *[name_4143], **kwargs_4144)
            
            
            # Assigning a Name to a Attribute (line 1477):
            
            # Assigning a Name to a Attribute (line 1477):
            # Getting the type of 'html' (line 1477)
            html_4146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 40), 'html')
            # Getting the type of 'self' (line 1477)
            self_4147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 12), 'self')
            # Setting the type of the member '_html_representation' of a type (line 1477)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 12), self_4147, '_html_representation', html_4146)
            # Getting the type of 'html' (line 1478)
            html_4148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 19), 'html')
            # Assigning a type to the variable 'stypy_return_type' (line 1478)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 12), 'stypy_return_type', html_4148)

            if (may_be_4093 and more_types_in_union_4094):
                # SSA join for if statement (line 1460)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'to_jshtml(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_jshtml' in the type store
        # Getting the type of 'stypy_return_type' (line 1449)
        stypy_return_type_4149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_4149)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_jshtml'
        return stypy_return_type_4149


    @norecursion
    def _repr_html_(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_repr_html_'
        module_type_store = module_type_store.open_function_context('_repr_html_', 1480, 4, False)
        # Assigning a type to the variable 'self' (line 1481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Animation._repr_html_.__dict__.__setitem__('stypy_localization', localization)
        Animation._repr_html_.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Animation._repr_html_.__dict__.__setitem__('stypy_type_store', module_type_store)
        Animation._repr_html_.__dict__.__setitem__('stypy_function_name', 'Animation._repr_html_')
        Animation._repr_html_.__dict__.__setitem__('stypy_param_names_list', [])
        Animation._repr_html_.__dict__.__setitem__('stypy_varargs_param_name', None)
        Animation._repr_html_.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Animation._repr_html_.__dict__.__setitem__('stypy_call_defaults', defaults)
        Animation._repr_html_.__dict__.__setitem__('stypy_call_varargs', varargs)
        Animation._repr_html_.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Animation._repr_html_.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Animation._repr_html_', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_repr_html_', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_repr_html_(...)' code ##################

        unicode_4150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1481, 8), 'unicode', u'IPython display hook for rendering.')
        
        # Assigning a Subscript to a Name (line 1482):
        
        # Assigning a Subscript to a Name (line 1482):
        
        # Obtaining the type of the subscript
        unicode_4151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, 23), 'unicode', u'animation.html')
        # Getting the type of 'rcParams' (line 1482)
        rcParams_4152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 14), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1482)
        getitem___4153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1482, 14), rcParams_4152, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1482)
        subscript_call_result_4154 = invoke(stypy.reporting.localization.Localization(__file__, 1482, 14), getitem___4153, unicode_4151)
        
        # Assigning a type to the variable 'fmt' (line 1482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 8), 'fmt', subscript_call_result_4154)
        
        
        # Getting the type of 'fmt' (line 1483)
        fmt_4155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 11), 'fmt')
        unicode_4156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, 18), 'unicode', u'html5')
        # Applying the binary operator '==' (line 1483)
        result_eq_4157 = python_operator(stypy.reporting.localization.Localization(__file__, 1483, 11), '==', fmt_4155, unicode_4156)
        
        # Testing the type of an if condition (line 1483)
        if_condition_4158 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1483, 8), result_eq_4157)
        # Assigning a type to the variable 'if_condition_4158' (line 1483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 8), 'if_condition_4158', if_condition_4158)
        # SSA begins for if statement (line 1483)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to to_html5_video(...): (line 1484)
        # Processing the call keyword arguments (line 1484)
        kwargs_4161 = {}
        # Getting the type of 'self' (line 1484)
        self_4159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 19), 'self', False)
        # Obtaining the member 'to_html5_video' of a type (line 1484)
        to_html5_video_4160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 19), self_4159, 'to_html5_video')
        # Calling to_html5_video(args, kwargs) (line 1484)
        to_html5_video_call_result_4162 = invoke(stypy.reporting.localization.Localization(__file__, 1484, 19), to_html5_video_4160, *[], **kwargs_4161)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 12), 'stypy_return_type', to_html5_video_call_result_4162)
        # SSA branch for the else part of an if statement (line 1483)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'fmt' (line 1485)
        fmt_4163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 13), 'fmt')
        unicode_4164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1485, 20), 'unicode', u'jshtml')
        # Applying the binary operator '==' (line 1485)
        result_eq_4165 = python_operator(stypy.reporting.localization.Localization(__file__, 1485, 13), '==', fmt_4163, unicode_4164)
        
        # Testing the type of an if condition (line 1485)
        if_condition_4166 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1485, 13), result_eq_4165)
        # Assigning a type to the variable 'if_condition_4166' (line 1485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 13), 'if_condition_4166', if_condition_4166)
        # SSA begins for if statement (line 1485)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to to_jshtml(...): (line 1486)
        # Processing the call keyword arguments (line 1486)
        kwargs_4169 = {}
        # Getting the type of 'self' (line 1486)
        self_4167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 19), 'self', False)
        # Obtaining the member 'to_jshtml' of a type (line 1486)
        to_jshtml_4168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1486, 19), self_4167, 'to_jshtml')
        # Calling to_jshtml(args, kwargs) (line 1486)
        to_jshtml_call_result_4170 = invoke(stypy.reporting.localization.Localization(__file__, 1486, 19), to_jshtml_4168, *[], **kwargs_4169)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 12), 'stypy_return_type', to_jshtml_call_result_4170)
        # SSA join for if statement (line 1485)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1483)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_repr_html_(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_repr_html_' in the type store
        # Getting the type of 'stypy_return_type' (line 1480)
        stypy_return_type_4171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_4171)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_repr_html_'
        return stypy_return_type_4171


# Assigning a type to the variable 'Animation' (line 1016)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 0), 'Animation', Animation)
# Declaration of the 'TimedAnimation' class
# Getting the type of 'Animation' (line 1489)
Animation_4172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 21), 'Animation')

class TimedAnimation(Animation_4172, ):
    unicode_4173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1515, (-1)), 'unicode', u':class:`Animation` subclass for time-based animation.\n\n    A new frame is drawn every *interval* milliseconds.\n\n    Parameters\n    ----------\n    fig : matplotlib.figure.Figure\n       The figure object that is used to get draw, resize, and any\n       other needed events.\n\n    interval : number, optional\n       Delay between frames in milliseconds.  Defaults to 200.\n\n    repeat_delay : number, optional\n        If the animation in repeated, adds a delay in milliseconds\n        before repeating the animation.  Defaults to ``None``.\n\n    repeat : bool, optional\n        Controls whether the animation should repeat when the sequence\n        of frames is completed.  Defaults to ``True``.\n\n    blit : bool, optional\n        Controls whether blitting is used to optimize drawing.  Defaults\n        to ``False``.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_4174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1516, 37), 'int')
        # Getting the type of 'None' (line 1516)
        None_4175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 55), 'None')
        # Getting the type of 'True' (line 1516)
        True_4176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 68), 'True')
        # Getting the type of 'None' (line 1517)
        None_4177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 30), 'None')
        defaults = [int_4174, None_4175, True_4176, None_4177]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1516, 4, False)
        # Assigning a type to the variable 'self' (line 1517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1517, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimedAnimation.__init__', ['fig', 'interval', 'repeat_delay', 'repeat', 'event_source'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fig', 'interval', 'repeat_delay', 'repeat', 'event_source'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1519):
        
        # Assigning a Name to a Attribute (line 1519):
        # Getting the type of 'interval' (line 1519)
        interval_4178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 25), 'interval')
        # Getting the type of 'self' (line 1519)
        self_4179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 8), 'self')
        # Setting the type of the member '_interval' of a type (line 1519)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1519, 8), self_4179, '_interval', interval_4178)
        
        # Assigning a Name to a Attribute (line 1520):
        
        # Assigning a Name to a Attribute (line 1520):
        # Getting the type of 'repeat_delay' (line 1520)
        repeat_delay_4180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 29), 'repeat_delay')
        # Getting the type of 'self' (line 1520)
        self_4181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 8), 'self')
        # Setting the type of the member '_repeat_delay' of a type (line 1520)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 8), self_4181, '_repeat_delay', repeat_delay_4180)
        
        # Assigning a Name to a Attribute (line 1521):
        
        # Assigning a Name to a Attribute (line 1521):
        # Getting the type of 'repeat' (line 1521)
        repeat_4182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 22), 'repeat')
        # Getting the type of 'self' (line 1521)
        self_4183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 8), 'self')
        # Setting the type of the member 'repeat' of a type (line 1521)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1521, 8), self_4183, 'repeat', repeat_4182)
        
        # Type idiom detected: calculating its left and rigth part (line 1525)
        # Getting the type of 'event_source' (line 1525)
        event_source_4184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 11), 'event_source')
        # Getting the type of 'None' (line 1525)
        None_4185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 27), 'None')
        
        (may_be_4186, more_types_in_union_4187) = may_be_none(event_source_4184, None_4185)

        if may_be_4186:

            if more_types_in_union_4187:
                # Runtime conditional SSA (line 1525)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1526):
            
            # Assigning a Call to a Name (line 1526):
            
            # Call to new_timer(...): (line 1526)
            # Processing the call keyword arguments (line 1526)
            kwargs_4191 = {}
            # Getting the type of 'fig' (line 1526)
            fig_4188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 27), 'fig', False)
            # Obtaining the member 'canvas' of a type (line 1526)
            canvas_4189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 27), fig_4188, 'canvas')
            # Obtaining the member 'new_timer' of a type (line 1526)
            new_timer_4190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 27), canvas_4189, 'new_timer')
            # Calling new_timer(args, kwargs) (line 1526)
            new_timer_call_result_4192 = invoke(stypy.reporting.localization.Localization(__file__, 1526, 27), new_timer_4190, *[], **kwargs_4191)
            
            # Assigning a type to the variable 'event_source' (line 1526)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 12), 'event_source', new_timer_call_result_4192)
            
            # Assigning a Attribute to a Attribute (line 1527):
            
            # Assigning a Attribute to a Attribute (line 1527):
            # Getting the type of 'self' (line 1527)
            self_4193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 36), 'self')
            # Obtaining the member '_interval' of a type (line 1527)
            _interval_4194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 36), self_4193, '_interval')
            # Getting the type of 'event_source' (line 1527)
            event_source_4195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'event_source')
            # Setting the type of the member 'interval' of a type (line 1527)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 12), event_source_4195, 'interval', _interval_4194)

            if more_types_in_union_4187:
                # SSA join for if statement (line 1525)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to __init__(...): (line 1529)
        # Processing the call arguments (line 1529)
        # Getting the type of 'self' (line 1529)
        self_4198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 27), 'self', False)
        # Getting the type of 'fig' (line 1529)
        fig_4199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 33), 'fig', False)
        # Getting the type of 'args' (line 1530)
        args_4200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 28), 'args', False)
        # Processing the call keyword arguments (line 1529)
        # Getting the type of 'event_source' (line 1529)
        event_source_4201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 51), 'event_source', False)
        keyword_4202 = event_source_4201
        # Getting the type of 'kwargs' (line 1530)
        kwargs_4203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 36), 'kwargs', False)
        kwargs_4204 = {'kwargs_4203': kwargs_4203, 'event_source': keyword_4202}
        # Getting the type of 'Animation' (line 1529)
        Animation_4196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 8), 'Animation', False)
        # Obtaining the member '__init__' of a type (line 1529)
        init___4197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 8), Animation_4196, '__init__')
        # Calling __init__(args, kwargs) (line 1529)
        init___call_result_4205 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 8), init___4197, *[self_4198, fig_4199, args_4200], **kwargs_4204)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _step(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_step'
        module_type_store = module_type_store.open_function_context('_step', 1532, 4, False)
        # Assigning a type to the variable 'self' (line 1533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimedAnimation._step.__dict__.__setitem__('stypy_localization', localization)
        TimedAnimation._step.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimedAnimation._step.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimedAnimation._step.__dict__.__setitem__('stypy_function_name', 'TimedAnimation._step')
        TimedAnimation._step.__dict__.__setitem__('stypy_param_names_list', [])
        TimedAnimation._step.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        TimedAnimation._step.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimedAnimation._step.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimedAnimation._step.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimedAnimation._step.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimedAnimation._step.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimedAnimation._step', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_step', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_step(...)' code ##################

        unicode_4206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, (-1)), 'unicode', u'\n        Handler for getting events.\n        ')
        
        # Assigning a Call to a Name (line 1542):
        
        # Assigning a Call to a Name (line 1542):
        
        # Call to _step(...): (line 1542)
        # Processing the call arguments (line 1542)
        # Getting the type of 'self' (line 1542)
        self_4209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 38), 'self', False)
        # Getting the type of 'args' (line 1542)
        args_4210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 45), 'args', False)
        # Processing the call keyword arguments (line 1542)
        kwargs_4211 = {}
        # Getting the type of 'Animation' (line 1542)
        Animation_4207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 22), 'Animation', False)
        # Obtaining the member '_step' of a type (line 1542)
        _step_4208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 22), Animation_4207, '_step')
        # Calling _step(args, kwargs) (line 1542)
        _step_call_result_4212 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 22), _step_4208, *[self_4209, args_4210], **kwargs_4211)
        
        # Assigning a type to the variable 'still_going' (line 1542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 8), 'still_going', _step_call_result_4212)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'still_going' (line 1543)
        still_going_4213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 15), 'still_going')
        # Applying the 'not' unary operator (line 1543)
        result_not__4214 = python_operator(stypy.reporting.localization.Localization(__file__, 1543, 11), 'not', still_going_4213)
        
        # Getting the type of 'self' (line 1543)
        self_4215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 31), 'self')
        # Obtaining the member 'repeat' of a type (line 1543)
        repeat_4216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 31), self_4215, 'repeat')
        # Applying the binary operator 'and' (line 1543)
        result_and_keyword_4217 = python_operator(stypy.reporting.localization.Localization(__file__, 1543, 11), 'and', result_not__4214, repeat_4216)
        
        # Testing the type of an if condition (line 1543)
        if_condition_4218 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1543, 8), result_and_keyword_4217)
        # Assigning a type to the variable 'if_condition_4218' (line 1543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 8), 'if_condition_4218', if_condition_4218)
        # SSA begins for if statement (line 1543)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _init_draw(...): (line 1544)
        # Processing the call keyword arguments (line 1544)
        kwargs_4221 = {}
        # Getting the type of 'self' (line 1544)
        self_4219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 12), 'self', False)
        # Obtaining the member '_init_draw' of a type (line 1544)
        _init_draw_4220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1544, 12), self_4219, '_init_draw')
        # Calling _init_draw(args, kwargs) (line 1544)
        _init_draw_call_result_4222 = invoke(stypy.reporting.localization.Localization(__file__, 1544, 12), _init_draw_4220, *[], **kwargs_4221)
        
        
        # Assigning a Call to a Attribute (line 1545):
        
        # Assigning a Call to a Attribute (line 1545):
        
        # Call to new_frame_seq(...): (line 1545)
        # Processing the call keyword arguments (line 1545)
        kwargs_4225 = {}
        # Getting the type of 'self' (line 1545)
        self_4223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 29), 'self', False)
        # Obtaining the member 'new_frame_seq' of a type (line 1545)
        new_frame_seq_4224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 29), self_4223, 'new_frame_seq')
        # Calling new_frame_seq(args, kwargs) (line 1545)
        new_frame_seq_call_result_4226 = invoke(stypy.reporting.localization.Localization(__file__, 1545, 29), new_frame_seq_4224, *[], **kwargs_4225)
        
        # Getting the type of 'self' (line 1545)
        self_4227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 12), 'self')
        # Setting the type of the member 'frame_seq' of a type (line 1545)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 12), self_4227, 'frame_seq', new_frame_seq_call_result_4226)
        
        # Getting the type of 'self' (line 1546)
        self_4228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 15), 'self')
        # Obtaining the member '_repeat_delay' of a type (line 1546)
        _repeat_delay_4229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1546, 15), self_4228, '_repeat_delay')
        # Testing the type of an if condition (line 1546)
        if_condition_4230 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1546, 12), _repeat_delay_4229)
        # Assigning a type to the variable 'if_condition_4230' (line 1546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 12), 'if_condition_4230', if_condition_4230)
        # SSA begins for if statement (line 1546)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to remove_callback(...): (line 1547)
        # Processing the call arguments (line 1547)
        # Getting the type of 'self' (line 1547)
        self_4234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 50), 'self', False)
        # Obtaining the member '_step' of a type (line 1547)
        _step_4235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1547, 50), self_4234, '_step')
        # Processing the call keyword arguments (line 1547)
        kwargs_4236 = {}
        # Getting the type of 'self' (line 1547)
        self_4231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 16), 'self', False)
        # Obtaining the member 'event_source' of a type (line 1547)
        event_source_4232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1547, 16), self_4231, 'event_source')
        # Obtaining the member 'remove_callback' of a type (line 1547)
        remove_callback_4233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1547, 16), event_source_4232, 'remove_callback')
        # Calling remove_callback(args, kwargs) (line 1547)
        remove_callback_call_result_4237 = invoke(stypy.reporting.localization.Localization(__file__, 1547, 16), remove_callback_4233, *[_step_4235], **kwargs_4236)
        
        
        # Call to add_callback(...): (line 1548)
        # Processing the call arguments (line 1548)
        # Getting the type of 'self' (line 1548)
        self_4241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 47), 'self', False)
        # Obtaining the member '_loop_delay' of a type (line 1548)
        _loop_delay_4242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1548, 47), self_4241, '_loop_delay')
        # Processing the call keyword arguments (line 1548)
        kwargs_4243 = {}
        # Getting the type of 'self' (line 1548)
        self_4238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 16), 'self', False)
        # Obtaining the member 'event_source' of a type (line 1548)
        event_source_4239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1548, 16), self_4238, 'event_source')
        # Obtaining the member 'add_callback' of a type (line 1548)
        add_callback_4240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1548, 16), event_source_4239, 'add_callback')
        # Calling add_callback(args, kwargs) (line 1548)
        add_callback_call_result_4244 = invoke(stypy.reporting.localization.Localization(__file__, 1548, 16), add_callback_4240, *[_loop_delay_4242], **kwargs_4243)
        
        
        # Assigning a Attribute to a Attribute (line 1549):
        
        # Assigning a Attribute to a Attribute (line 1549):
        # Getting the type of 'self' (line 1549)
        self_4245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 45), 'self')
        # Obtaining the member '_repeat_delay' of a type (line 1549)
        _repeat_delay_4246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1549, 45), self_4245, '_repeat_delay')
        # Getting the type of 'self' (line 1549)
        self_4247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 16), 'self')
        # Obtaining the member 'event_source' of a type (line 1549)
        event_source_4248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1549, 16), self_4247, 'event_source')
        # Setting the type of the member 'interval' of a type (line 1549)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1549, 16), event_source_4248, 'interval', _repeat_delay_4246)
        # Getting the type of 'True' (line 1550)
        True_4249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 23), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 16), 'stypy_return_type', True_4249)
        # SSA branch for the else part of an if statement (line 1546)
        module_type_store.open_ssa_branch('else')
        
        # Call to _step(...): (line 1552)
        # Processing the call arguments (line 1552)
        # Getting the type of 'self' (line 1552)
        self_4252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 39), 'self', False)
        # Getting the type of 'args' (line 1552)
        args_4253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 46), 'args', False)
        # Processing the call keyword arguments (line 1552)
        kwargs_4254 = {}
        # Getting the type of 'Animation' (line 1552)
        Animation_4250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 23), 'Animation', False)
        # Obtaining the member '_step' of a type (line 1552)
        _step_4251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1552, 23), Animation_4250, '_step')
        # Calling _step(args, kwargs) (line 1552)
        _step_call_result_4255 = invoke(stypy.reporting.localization.Localization(__file__, 1552, 23), _step_4251, *[self_4252, args_4253], **kwargs_4254)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1552, 16), 'stypy_return_type', _step_call_result_4255)
        # SSA join for if statement (line 1546)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1543)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'still_going' (line 1554)
        still_going_4256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 19), 'still_going')
        # Assigning a type to the variable 'stypy_return_type' (line 1554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1554, 12), 'stypy_return_type', still_going_4256)
        # SSA join for if statement (line 1543)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_step(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_step' in the type store
        # Getting the type of 'stypy_return_type' (line 1532)
        stypy_return_type_4257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_4257)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_step'
        return stypy_return_type_4257


    @norecursion
    def _stop(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stop'
        module_type_store = module_type_store.open_function_context('_stop', 1556, 4, False)
        # Assigning a type to the variable 'self' (line 1557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimedAnimation._stop.__dict__.__setitem__('stypy_localization', localization)
        TimedAnimation._stop.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimedAnimation._stop.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimedAnimation._stop.__dict__.__setitem__('stypy_function_name', 'TimedAnimation._stop')
        TimedAnimation._stop.__dict__.__setitem__('stypy_param_names_list', [])
        TimedAnimation._stop.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        TimedAnimation._stop.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimedAnimation._stop.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimedAnimation._stop.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimedAnimation._stop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimedAnimation._stop.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimedAnimation._stop', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_stop', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_stop(...)' code ##################

        
        # Call to remove_callback(...): (line 1560)
        # Processing the call arguments (line 1560)
        # Getting the type of 'self' (line 1560)
        self_4261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 42), 'self', False)
        # Obtaining the member '_loop_delay' of a type (line 1560)
        _loop_delay_4262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1560, 42), self_4261, '_loop_delay')
        # Processing the call keyword arguments (line 1560)
        kwargs_4263 = {}
        # Getting the type of 'self' (line 1560)
        self_4258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 8), 'self', False)
        # Obtaining the member 'event_source' of a type (line 1560)
        event_source_4259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1560, 8), self_4258, 'event_source')
        # Obtaining the member 'remove_callback' of a type (line 1560)
        remove_callback_4260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1560, 8), event_source_4259, 'remove_callback')
        # Calling remove_callback(args, kwargs) (line 1560)
        remove_callback_call_result_4264 = invoke(stypy.reporting.localization.Localization(__file__, 1560, 8), remove_callback_4260, *[_loop_delay_4262], **kwargs_4263)
        
        
        # Call to _stop(...): (line 1561)
        # Processing the call arguments (line 1561)
        # Getting the type of 'self' (line 1561)
        self_4267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 24), 'self', False)
        # Processing the call keyword arguments (line 1561)
        kwargs_4268 = {}
        # Getting the type of 'Animation' (line 1561)
        Animation_4265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 8), 'Animation', False)
        # Obtaining the member '_stop' of a type (line 1561)
        _stop_4266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1561, 8), Animation_4265, '_stop')
        # Calling _stop(args, kwargs) (line 1561)
        _stop_call_result_4269 = invoke(stypy.reporting.localization.Localization(__file__, 1561, 8), _stop_4266, *[self_4267], **kwargs_4268)
        
        
        # ################# End of '_stop(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_stop' in the type store
        # Getting the type of 'stypy_return_type' (line 1556)
        stypy_return_type_4270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_4270)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stop'
        return stypy_return_type_4270


    @norecursion
    def _loop_delay(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_loop_delay'
        module_type_store = module_type_store.open_function_context('_loop_delay', 1563, 4, False)
        # Assigning a type to the variable 'self' (line 1564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1564, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimedAnimation._loop_delay.__dict__.__setitem__('stypy_localization', localization)
        TimedAnimation._loop_delay.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimedAnimation._loop_delay.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimedAnimation._loop_delay.__dict__.__setitem__('stypy_function_name', 'TimedAnimation._loop_delay')
        TimedAnimation._loop_delay.__dict__.__setitem__('stypy_param_names_list', [])
        TimedAnimation._loop_delay.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        TimedAnimation._loop_delay.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimedAnimation._loop_delay.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimedAnimation._loop_delay.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimedAnimation._loop_delay.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimedAnimation._loop_delay.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimedAnimation._loop_delay', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_loop_delay', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_loop_delay(...)' code ##################

        
        # Call to remove_callback(...): (line 1565)
        # Processing the call arguments (line 1565)
        # Getting the type of 'self' (line 1565)
        self_4274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 42), 'self', False)
        # Obtaining the member '_loop_delay' of a type (line 1565)
        _loop_delay_4275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 42), self_4274, '_loop_delay')
        # Processing the call keyword arguments (line 1565)
        kwargs_4276 = {}
        # Getting the type of 'self' (line 1565)
        self_4271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'self', False)
        # Obtaining the member 'event_source' of a type (line 1565)
        event_source_4272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 8), self_4271, 'event_source')
        # Obtaining the member 'remove_callback' of a type (line 1565)
        remove_callback_4273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 8), event_source_4272, 'remove_callback')
        # Calling remove_callback(args, kwargs) (line 1565)
        remove_callback_call_result_4277 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 8), remove_callback_4273, *[_loop_delay_4275], **kwargs_4276)
        
        
        # Assigning a Attribute to a Attribute (line 1566):
        
        # Assigning a Attribute to a Attribute (line 1566):
        # Getting the type of 'self' (line 1566)
        self_4278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 37), 'self')
        # Obtaining the member '_interval' of a type (line 1566)
        _interval_4279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 37), self_4278, '_interval')
        # Getting the type of 'self' (line 1566)
        self_4280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 8), 'self')
        # Obtaining the member 'event_source' of a type (line 1566)
        event_source_4281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 8), self_4280, 'event_source')
        # Setting the type of the member 'interval' of a type (line 1566)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 8), event_source_4281, 'interval', _interval_4279)
        
        # Call to add_callback(...): (line 1567)
        # Processing the call arguments (line 1567)
        # Getting the type of 'self' (line 1567)
        self_4285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 39), 'self', False)
        # Obtaining the member '_step' of a type (line 1567)
        _step_4286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 39), self_4285, '_step')
        # Processing the call keyword arguments (line 1567)
        kwargs_4287 = {}
        # Getting the type of 'self' (line 1567)
        self_4282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 8), 'self', False)
        # Obtaining the member 'event_source' of a type (line 1567)
        event_source_4283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 8), self_4282, 'event_source')
        # Obtaining the member 'add_callback' of a type (line 1567)
        add_callback_4284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 8), event_source_4283, 'add_callback')
        # Calling add_callback(args, kwargs) (line 1567)
        add_callback_call_result_4288 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 8), add_callback_4284, *[_step_4286], **kwargs_4287)
        
        
        # Call to _step(...): (line 1568)
        # Processing the call arguments (line 1568)
        # Getting the type of 'self' (line 1568)
        self_4291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 24), 'self', False)
        # Processing the call keyword arguments (line 1568)
        kwargs_4292 = {}
        # Getting the type of 'Animation' (line 1568)
        Animation_4289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 8), 'Animation', False)
        # Obtaining the member '_step' of a type (line 1568)
        _step_4290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1568, 8), Animation_4289, '_step')
        # Calling _step(args, kwargs) (line 1568)
        _step_call_result_4293 = invoke(stypy.reporting.localization.Localization(__file__, 1568, 8), _step_4290, *[self_4291], **kwargs_4292)
        
        
        # ################# End of '_loop_delay(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_loop_delay' in the type store
        # Getting the type of 'stypy_return_type' (line 1563)
        stypy_return_type_4294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_4294)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_loop_delay'
        return stypy_return_type_4294


# Assigning a type to the variable 'TimedAnimation' (line 1489)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 0), 'TimedAnimation', TimedAnimation)
# Declaration of the 'ArtistAnimation' class
# Getting the type of 'TimedAnimation' (line 1571)
TimedAnimation_4295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 22), 'TimedAnimation')

class ArtistAnimation(TimedAnimation_4295, ):
    unicode_4296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1603, (-1)), 'unicode', u'Animation using a fixed set of `Artist` objects.\n\n    Before creating an instance, all plotting should have taken place\n    and the relevant artists saved.\n\n    Parameters\n    ----------\n    fig : matplotlib.figure.Figure\n       The figure object that is used to get draw, resize, and any\n       other needed events.\n\n    artists : list\n        Each list entry a collection of artists that represent what\n        needs to be enabled on each frame. These will be disabled for\n        other frames.\n\n    interval : number, optional\n       Delay between frames in milliseconds.  Defaults to 200.\n\n    repeat_delay : number, optional\n        If the animation in repeated, adds a delay in milliseconds\n        before repeating the animation.  Defaults to ``None``.\n\n    repeat : bool, optional\n        Controls whether the animation should repeat when the sequence\n        of frames is completed. Defaults to ``True``.\n\n    blit : bool, optional\n        Controls whether blitting is used to optimize drawing.  Defaults\n        to ``False``.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1604, 4, False)
        # Assigning a type to the variable 'self' (line 1605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ArtistAnimation.__init__', ['fig', 'artists'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fig', 'artists'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a List to a Attribute (line 1606):
        
        # Assigning a List to a Attribute (line 1606):
        
        # Obtaining an instance of the builtin type 'list' (line 1606)
        list_4297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1606, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1606)
        
        # Getting the type of 'self' (line 1606)
        self_4298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 8), 'self')
        # Setting the type of the member '_drawn_artists' of a type (line 1606)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1606, 8), self_4298, '_drawn_artists', list_4297)
        
        # Assigning a Name to a Attribute (line 1610):
        
        # Assigning a Name to a Attribute (line 1610):
        # Getting the type of 'artists' (line 1610)
        artists_4299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 26), 'artists')
        # Getting the type of 'self' (line 1610)
        self_4300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 8), 'self')
        # Setting the type of the member '_framedata' of a type (line 1610)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1610, 8), self_4300, '_framedata', artists_4299)
        
        # Call to __init__(...): (line 1611)
        # Processing the call arguments (line 1611)
        # Getting the type of 'self' (line 1611)
        self_4303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 32), 'self', False)
        # Getting the type of 'fig' (line 1611)
        fig_4304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 38), 'fig', False)
        # Getting the type of 'args' (line 1611)
        args_4305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 44), 'args', False)
        # Processing the call keyword arguments (line 1611)
        # Getting the type of 'kwargs' (line 1611)
        kwargs_4306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 52), 'kwargs', False)
        kwargs_4307 = {'kwargs_4306': kwargs_4306}
        # Getting the type of 'TimedAnimation' (line 1611)
        TimedAnimation_4301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 8), 'TimedAnimation', False)
        # Obtaining the member '__init__' of a type (line 1611)
        init___4302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1611, 8), TimedAnimation_4301, '__init__')
        # Calling __init__(args, kwargs) (line 1611)
        init___call_result_4308 = invoke(stypy.reporting.localization.Localization(__file__, 1611, 8), init___4302, *[self_4303, fig_4304, args_4305], **kwargs_4307)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _init_draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_init_draw'
        module_type_store = module_type_store.open_function_context('_init_draw', 1613, 4, False)
        # Assigning a type to the variable 'self' (line 1614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1614, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ArtistAnimation._init_draw.__dict__.__setitem__('stypy_localization', localization)
        ArtistAnimation._init_draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ArtistAnimation._init_draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        ArtistAnimation._init_draw.__dict__.__setitem__('stypy_function_name', 'ArtistAnimation._init_draw')
        ArtistAnimation._init_draw.__dict__.__setitem__('stypy_param_names_list', [])
        ArtistAnimation._init_draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        ArtistAnimation._init_draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ArtistAnimation._init_draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        ArtistAnimation._init_draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        ArtistAnimation._init_draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ArtistAnimation._init_draw.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ArtistAnimation._init_draw', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_init_draw', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_init_draw(...)' code ##################

        
        # Assigning a Call to a Name (line 1615):
        
        # Assigning a Call to a Name (line 1615):
        
        # Call to set(...): (line 1615)
        # Processing the call keyword arguments (line 1615)
        kwargs_4310 = {}
        # Getting the type of 'set' (line 1615)
        set_4309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 15), 'set', False)
        # Calling set(args, kwargs) (line 1615)
        set_call_result_4311 = invoke(stypy.reporting.localization.Localization(__file__, 1615, 15), set_4309, *[], **kwargs_4310)
        
        # Assigning a type to the variable 'figs' (line 1615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 8), 'figs', set_call_result_4311)
        
        
        # Call to new_frame_seq(...): (line 1616)
        # Processing the call keyword arguments (line 1616)
        kwargs_4314 = {}
        # Getting the type of 'self' (line 1616)
        self_4312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 17), 'self', False)
        # Obtaining the member 'new_frame_seq' of a type (line 1616)
        new_frame_seq_4313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1616, 17), self_4312, 'new_frame_seq')
        # Calling new_frame_seq(args, kwargs) (line 1616)
        new_frame_seq_call_result_4315 = invoke(stypy.reporting.localization.Localization(__file__, 1616, 17), new_frame_seq_4313, *[], **kwargs_4314)
        
        # Testing the type of a for loop iterable (line 1616)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1616, 8), new_frame_seq_call_result_4315)
        # Getting the type of the for loop variable (line 1616)
        for_loop_var_4316 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1616, 8), new_frame_seq_call_result_4315)
        # Assigning a type to the variable 'f' (line 1616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1616, 8), 'f', for_loop_var_4316)
        # SSA begins for a for statement (line 1616)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'f' (line 1617)
        f_4317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 26), 'f')
        # Testing the type of a for loop iterable (line 1617)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1617, 12), f_4317)
        # Getting the type of the for loop variable (line 1617)
        for_loop_var_4318 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1617, 12), f_4317)
        # Assigning a type to the variable 'artist' (line 1617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 12), 'artist', for_loop_var_4318)
        # SSA begins for a for statement (line 1617)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_visible(...): (line 1618)
        # Processing the call arguments (line 1618)
        # Getting the type of 'False' (line 1618)
        False_4321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 35), 'False', False)
        # Processing the call keyword arguments (line 1618)
        kwargs_4322 = {}
        # Getting the type of 'artist' (line 1618)
        artist_4319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 16), 'artist', False)
        # Obtaining the member 'set_visible' of a type (line 1618)
        set_visible_4320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1618, 16), artist_4319, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1618)
        set_visible_call_result_4323 = invoke(stypy.reporting.localization.Localization(__file__, 1618, 16), set_visible_4320, *[False_4321], **kwargs_4322)
        
        
        # Call to set_animated(...): (line 1619)
        # Processing the call arguments (line 1619)
        # Getting the type of 'self' (line 1619)
        self_4326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 36), 'self', False)
        # Obtaining the member '_blit' of a type (line 1619)
        _blit_4327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1619, 36), self_4326, '_blit')
        # Processing the call keyword arguments (line 1619)
        kwargs_4328 = {}
        # Getting the type of 'artist' (line 1619)
        artist_4324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 16), 'artist', False)
        # Obtaining the member 'set_animated' of a type (line 1619)
        set_animated_4325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1619, 16), artist_4324, 'set_animated')
        # Calling set_animated(args, kwargs) (line 1619)
        set_animated_call_result_4329 = invoke(stypy.reporting.localization.Localization(__file__, 1619, 16), set_animated_4325, *[_blit_4327], **kwargs_4328)
        
        
        
        
        # Call to get_figure(...): (line 1621)
        # Processing the call keyword arguments (line 1621)
        kwargs_4332 = {}
        # Getting the type of 'artist' (line 1621)
        artist_4330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 19), 'artist', False)
        # Obtaining the member 'get_figure' of a type (line 1621)
        get_figure_4331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1621, 19), artist_4330, 'get_figure')
        # Calling get_figure(args, kwargs) (line 1621)
        get_figure_call_result_4333 = invoke(stypy.reporting.localization.Localization(__file__, 1621, 19), get_figure_4331, *[], **kwargs_4332)
        
        # Getting the type of 'figs' (line 1621)
        figs_4334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 46), 'figs')
        # Applying the binary operator 'notin' (line 1621)
        result_contains_4335 = python_operator(stypy.reporting.localization.Localization(__file__, 1621, 19), 'notin', get_figure_call_result_4333, figs_4334)
        
        # Testing the type of an if condition (line 1621)
        if_condition_4336 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1621, 16), result_contains_4335)
        # Assigning a type to the variable 'if_condition_4336' (line 1621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 16), 'if_condition_4336', if_condition_4336)
        # SSA begins for if statement (line 1621)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to add(...): (line 1622)
        # Processing the call arguments (line 1622)
        
        # Call to get_figure(...): (line 1622)
        # Processing the call keyword arguments (line 1622)
        kwargs_4341 = {}
        # Getting the type of 'artist' (line 1622)
        artist_4339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 29), 'artist', False)
        # Obtaining the member 'get_figure' of a type (line 1622)
        get_figure_4340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 29), artist_4339, 'get_figure')
        # Calling get_figure(args, kwargs) (line 1622)
        get_figure_call_result_4342 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 29), get_figure_4340, *[], **kwargs_4341)
        
        # Processing the call keyword arguments (line 1622)
        kwargs_4343 = {}
        # Getting the type of 'figs' (line 1622)
        figs_4337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 20), 'figs', False)
        # Obtaining the member 'add' of a type (line 1622)
        add_4338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 20), figs_4337, 'add')
        # Calling add(args, kwargs) (line 1622)
        add_call_result_4344 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 20), add_4338, *[get_figure_call_result_4342], **kwargs_4343)
        
        # SSA join for if statement (line 1621)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'figs' (line 1625)
        figs_4345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 19), 'figs')
        # Testing the type of a for loop iterable (line 1625)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1625, 8), figs_4345)
        # Getting the type of the for loop variable (line 1625)
        for_loop_var_4346 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1625, 8), figs_4345)
        # Assigning a type to the variable 'fig' (line 1625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1625, 8), 'fig', for_loop_var_4346)
        # SSA begins for a for statement (line 1625)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to draw_idle(...): (line 1626)
        # Processing the call keyword arguments (line 1626)
        kwargs_4350 = {}
        # Getting the type of 'fig' (line 1626)
        fig_4347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 12), 'fig', False)
        # Obtaining the member 'canvas' of a type (line 1626)
        canvas_4348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1626, 12), fig_4347, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 1626)
        draw_idle_4349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1626, 12), canvas_4348, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 1626)
        draw_idle_call_result_4351 = invoke(stypy.reporting.localization.Localization(__file__, 1626, 12), draw_idle_4349, *[], **kwargs_4350)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_init_draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_init_draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1613)
        stypy_return_type_4352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_4352)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_init_draw'
        return stypy_return_type_4352


    @norecursion
    def _pre_draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_pre_draw'
        module_type_store = module_type_store.open_function_context('_pre_draw', 1628, 4, False)
        # Assigning a type to the variable 'self' (line 1629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1629, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ArtistAnimation._pre_draw.__dict__.__setitem__('stypy_localization', localization)
        ArtistAnimation._pre_draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ArtistAnimation._pre_draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        ArtistAnimation._pre_draw.__dict__.__setitem__('stypy_function_name', 'ArtistAnimation._pre_draw')
        ArtistAnimation._pre_draw.__dict__.__setitem__('stypy_param_names_list', ['framedata', 'blit'])
        ArtistAnimation._pre_draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        ArtistAnimation._pre_draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ArtistAnimation._pre_draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        ArtistAnimation._pre_draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        ArtistAnimation._pre_draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ArtistAnimation._pre_draw.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ArtistAnimation._pre_draw', ['framedata', 'blit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_pre_draw', localization, ['framedata', 'blit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_pre_draw(...)' code ##################

        unicode_4353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1631, (-1)), 'unicode', u'\n        Clears artists from the last frame.\n        ')
        
        # Getting the type of 'blit' (line 1632)
        blit_4354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 11), 'blit')
        # Testing the type of an if condition (line 1632)
        if_condition_4355 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1632, 8), blit_4354)
        # Assigning a type to the variable 'if_condition_4355' (line 1632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1632, 8), 'if_condition_4355', if_condition_4355)
        # SSA begins for if statement (line 1632)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _blit_clear(...): (line 1634)
        # Processing the call arguments (line 1634)
        # Getting the type of 'self' (line 1634)
        self_4358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 29), 'self', False)
        # Obtaining the member '_drawn_artists' of a type (line 1634)
        _drawn_artists_4359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 29), self_4358, '_drawn_artists')
        # Getting the type of 'self' (line 1634)
        self_4360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 50), 'self', False)
        # Obtaining the member '_blit_cache' of a type (line 1634)
        _blit_cache_4361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 50), self_4360, '_blit_cache')
        # Processing the call keyword arguments (line 1634)
        kwargs_4362 = {}
        # Getting the type of 'self' (line 1634)
        self_4356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 12), 'self', False)
        # Obtaining the member '_blit_clear' of a type (line 1634)
        _blit_clear_4357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 12), self_4356, '_blit_clear')
        # Calling _blit_clear(args, kwargs) (line 1634)
        _blit_clear_call_result_4363 = invoke(stypy.reporting.localization.Localization(__file__, 1634, 12), _blit_clear_4357, *[_drawn_artists_4359, _blit_cache_4361], **kwargs_4362)
        
        # SSA branch for the else part of an if statement (line 1632)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'self' (line 1637)
        self_4364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 26), 'self')
        # Obtaining the member '_drawn_artists' of a type (line 1637)
        _drawn_artists_4365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1637, 26), self_4364, '_drawn_artists')
        # Testing the type of a for loop iterable (line 1637)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1637, 12), _drawn_artists_4365)
        # Getting the type of the for loop variable (line 1637)
        for_loop_var_4366 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1637, 12), _drawn_artists_4365)
        # Assigning a type to the variable 'artist' (line 1637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'artist', for_loop_var_4366)
        # SSA begins for a for statement (line 1637)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_visible(...): (line 1638)
        # Processing the call arguments (line 1638)
        # Getting the type of 'False' (line 1638)
        False_4369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 35), 'False', False)
        # Processing the call keyword arguments (line 1638)
        kwargs_4370 = {}
        # Getting the type of 'artist' (line 1638)
        artist_4367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 16), 'artist', False)
        # Obtaining the member 'set_visible' of a type (line 1638)
        set_visible_4368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 16), artist_4367, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1638)
        set_visible_call_result_4371 = invoke(stypy.reporting.localization.Localization(__file__, 1638, 16), set_visible_4368, *[False_4369], **kwargs_4370)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1632)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_pre_draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_pre_draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1628)
        stypy_return_type_4372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_4372)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_pre_draw'
        return stypy_return_type_4372


    @norecursion
    def _draw_frame(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_draw_frame'
        module_type_store = module_type_store.open_function_context('_draw_frame', 1640, 4, False)
        # Assigning a type to the variable 'self' (line 1641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ArtistAnimation._draw_frame.__dict__.__setitem__('stypy_localization', localization)
        ArtistAnimation._draw_frame.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ArtistAnimation._draw_frame.__dict__.__setitem__('stypy_type_store', module_type_store)
        ArtistAnimation._draw_frame.__dict__.__setitem__('stypy_function_name', 'ArtistAnimation._draw_frame')
        ArtistAnimation._draw_frame.__dict__.__setitem__('stypy_param_names_list', ['artists'])
        ArtistAnimation._draw_frame.__dict__.__setitem__('stypy_varargs_param_name', None)
        ArtistAnimation._draw_frame.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ArtistAnimation._draw_frame.__dict__.__setitem__('stypy_call_defaults', defaults)
        ArtistAnimation._draw_frame.__dict__.__setitem__('stypy_call_varargs', varargs)
        ArtistAnimation._draw_frame.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ArtistAnimation._draw_frame.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ArtistAnimation._draw_frame', ['artists'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_draw_frame', localization, ['artists'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_draw_frame(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1643):
        
        # Assigning a Name to a Attribute (line 1643):
        # Getting the type of 'artists' (line 1643)
        artists_4373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 30), 'artists')
        # Getting the type of 'self' (line 1643)
        self_4374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 8), 'self')
        # Setting the type of the member '_drawn_artists' of a type (line 1643)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1643, 8), self_4374, '_drawn_artists', artists_4373)
        
        # Getting the type of 'artists' (line 1646)
        artists_4375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 22), 'artists')
        # Testing the type of a for loop iterable (line 1646)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1646, 8), artists_4375)
        # Getting the type of the for loop variable (line 1646)
        for_loop_var_4376 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1646, 8), artists_4375)
        # Assigning a type to the variable 'artist' (line 1646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 8), 'artist', for_loop_var_4376)
        # SSA begins for a for statement (line 1646)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_visible(...): (line 1647)
        # Processing the call arguments (line 1647)
        # Getting the type of 'True' (line 1647)
        True_4379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 31), 'True', False)
        # Processing the call keyword arguments (line 1647)
        kwargs_4380 = {}
        # Getting the type of 'artist' (line 1647)
        artist_4377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 12), 'artist', False)
        # Obtaining the member 'set_visible' of a type (line 1647)
        set_visible_4378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1647, 12), artist_4377, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1647)
        set_visible_call_result_4381 = invoke(stypy.reporting.localization.Localization(__file__, 1647, 12), set_visible_4378, *[True_4379], **kwargs_4380)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_draw_frame(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_draw_frame' in the type store
        # Getting the type of 'stypy_return_type' (line 1640)
        stypy_return_type_4382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_4382)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_draw_frame'
        return stypy_return_type_4382


# Assigning a type to the variable 'ArtistAnimation' (line 1571)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 0), 'ArtistAnimation', ArtistAnimation)
# Declaration of the 'FuncAnimation' class
# Getting the type of 'TimedAnimation' (line 1650)
TimedAnimation_4383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 20), 'TimedAnimation')

class FuncAnimation(TimedAnimation_4383, ):
    unicode_4384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, (-1)), 'unicode', u'\n    Makes an animation by repeatedly calling a function ``func``.\n\n    Parameters\n    ----------\n    fig : matplotlib.figure.Figure\n       The figure object that is used to get draw, resize, and any\n       other needed events.\n\n    func : callable\n       The function to call at each frame.  The first argument will\n       be the next value in ``frames``.   Any additional positional\n       arguments can be supplied via the ``fargs`` parameter.\n\n       The required signature is::\n\n          def func(frame, *fargs) -> iterable_of_artists:\n\n    frames : iterable, int, generator function, or None, optional\n        Source of data to pass ``func`` and each frame of the animation\n\n        If an iterable, then simply use the values provided.  If the\n        iterable has a length, it will override the ``save_count`` kwarg.\n\n        If an integer, then equivalent to passing ``range(frames)``\n\n        If a generator function, then must have the signature::\n\n           def gen_function() -> obj:\n\n        If ``None``, then equivalent to passing ``itertools.count``.\n\n        In all of these cases, the values in *frames* is simply passed through\n        to the user-supplied *func* and thus can be of any type.\n\n    init_func : callable, optional\n       A function used to draw a clear frame. If not given, the\n       results of drawing from the first item in the frames sequence\n       will be used. This function will be called once before the\n       first frame.\n\n       If ``blit == True``, ``init_func`` must return an iterable of artists\n       to be re-drawn.\n\n       The required signature is::\n\n          def init_func() -> iterable_of_artists:\n\n    fargs : tuple or None, optional\n       Additional arguments to pass to each call to *func*.\n\n    save_count : int, optional\n       The number of values from *frames* to cache.\n\n    interval : number, optional\n       Delay between frames in milliseconds.  Defaults to 200.\n\n    repeat_delay : number, optional\n       If the animation in repeated, adds a delay in milliseconds\n       before repeating the animation.  Defaults to ``None``.\n\n    repeat : bool, optional\n       Controls whether the animation should repeat when the sequence\n       of frames is completed.  Defaults to ``True``.\n\n    blit : bool, optional\n       Controls whether blitting is used to optimize drawing.  Defaults\n       to ``False``.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1721)
        None_4385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 41), 'None')
        # Getting the type of 'None' (line 1721)
        None_4386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 57), 'None')
        # Getting the type of 'None' (line 1721)
        None_4387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 69), 'None')
        # Getting the type of 'None' (line 1722)
        None_4388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 28), 'None')
        defaults = [None_4385, None_4386, None_4387, None_4388]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1721, 4, False)
        # Assigning a type to the variable 'self' (line 1722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FuncAnimation.__init__', ['fig', 'func', 'frames', 'init_func', 'fargs', 'save_count'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fig', 'func', 'frames', 'init_func', 'fargs', 'save_count'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Getting the type of 'fargs' (line 1723)
        fargs_4389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 11), 'fargs')
        # Testing the type of an if condition (line 1723)
        if_condition_4390 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1723, 8), fargs_4389)
        # Assigning a type to the variable 'if_condition_4390' (line 1723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 8), 'if_condition_4390', if_condition_4390)
        # SSA begins for if statement (line 1723)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1724):
        
        # Assigning a Name to a Attribute (line 1724):
        # Getting the type of 'fargs' (line 1724)
        fargs_4391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 25), 'fargs')
        # Getting the type of 'self' (line 1724)
        self_4392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 12), 'self')
        # Setting the type of the member '_args' of a type (line 1724)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1724, 12), self_4392, '_args', fargs_4391)
        # SSA branch for the else part of an if statement (line 1723)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Attribute (line 1726):
        
        # Assigning a Tuple to a Attribute (line 1726):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1726)
        tuple_4393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1726, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1726)
        
        # Getting the type of 'self' (line 1726)
        self_4394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 12), 'self')
        # Setting the type of the member '_args' of a type (line 1726)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1726, 12), self_4394, '_args', tuple_4393)
        # SSA join for if statement (line 1723)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1727):
        
        # Assigning a Name to a Attribute (line 1727):
        # Getting the type of 'func' (line 1727)
        func_4395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 21), 'func')
        # Getting the type of 'self' (line 1727)
        self_4396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 8), 'self')
        # Setting the type of the member '_func' of a type (line 1727)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1727, 8), self_4396, '_func', func_4395)
        
        # Assigning a Name to a Attribute (line 1732):
        
        # Assigning a Name to a Attribute (line 1732):
        # Getting the type of 'save_count' (line 1732)
        save_count_4397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 26), 'save_count')
        # Getting the type of 'self' (line 1732)
        self_4398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 8), 'self')
        # Setting the type of the member 'save_count' of a type (line 1732)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1732, 8), self_4398, 'save_count', save_count_4397)
        
        # Type idiom detected: calculating its left and rigth part (line 1738)
        # Getting the type of 'frames' (line 1738)
        frames_4399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 11), 'frames')
        # Getting the type of 'None' (line 1738)
        None_4400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 21), 'None')
        
        (may_be_4401, more_types_in_union_4402) = may_be_none(frames_4399, None_4400)

        if may_be_4401:

            if more_types_in_union_4402:
                # Runtime conditional SSA (line 1738)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Attribute (line 1739):
            
            # Assigning a Attribute to a Attribute (line 1739):
            # Getting the type of 'itertools' (line 1739)
            itertools_4403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 29), 'itertools')
            # Obtaining the member 'count' of a type (line 1739)
            count_4404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1739, 29), itertools_4403, 'count')
            # Getting the type of 'self' (line 1739)
            self_4405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 12), 'self')
            # Setting the type of the member '_iter_gen' of a type (line 1739)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1739, 12), self_4405, '_iter_gen', count_4404)

            if more_types_in_union_4402:
                # Runtime conditional SSA for else branch (line 1738)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_4401) or more_types_in_union_4402):
            
            
            # Call to callable(...): (line 1740)
            # Processing the call arguments (line 1740)
            # Getting the type of 'frames' (line 1740)
            frames_4407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 22), 'frames', False)
            # Processing the call keyword arguments (line 1740)
            kwargs_4408 = {}
            # Getting the type of 'callable' (line 1740)
            callable_4406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 13), 'callable', False)
            # Calling callable(args, kwargs) (line 1740)
            callable_call_result_4409 = invoke(stypy.reporting.localization.Localization(__file__, 1740, 13), callable_4406, *[frames_4407], **kwargs_4408)
            
            # Testing the type of an if condition (line 1740)
            if_condition_4410 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1740, 13), callable_call_result_4409)
            # Assigning a type to the variable 'if_condition_4410' (line 1740)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 13), 'if_condition_4410', if_condition_4410)
            # SSA begins for if statement (line 1740)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 1741):
            
            # Assigning a Name to a Attribute (line 1741):
            # Getting the type of 'frames' (line 1741)
            frames_4411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 29), 'frames')
            # Getting the type of 'self' (line 1741)
            self_4412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 12), 'self')
            # Setting the type of the member '_iter_gen' of a type (line 1741)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1741, 12), self_4412, '_iter_gen', frames_4411)
            # SSA branch for the else part of an if statement (line 1740)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to iterable(...): (line 1742)
            # Processing the call arguments (line 1742)
            # Getting the type of 'frames' (line 1742)
            frames_4414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 22), 'frames', False)
            # Processing the call keyword arguments (line 1742)
            kwargs_4415 = {}
            # Getting the type of 'iterable' (line 1742)
            iterable_4413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 13), 'iterable', False)
            # Calling iterable(args, kwargs) (line 1742)
            iterable_call_result_4416 = invoke(stypy.reporting.localization.Localization(__file__, 1742, 13), iterable_4413, *[frames_4414], **kwargs_4415)
            
            # Testing the type of an if condition (line 1742)
            if_condition_4417 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1742, 13), iterable_call_result_4416)
            # Assigning a type to the variable 'if_condition_4417' (line 1742)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1742, 13), 'if_condition_4417', if_condition_4417)
            # SSA begins for if statement (line 1742)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Lambda to a Attribute (line 1743):
            
            # Assigning a Lambda to a Attribute (line 1743):

            @norecursion
            def _stypy_temp_lambda_1(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function '_stypy_temp_lambda_1'
                module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_1', 1743, 29, True)
                # Passed parameters checking function
                _stypy_temp_lambda_1.stypy_localization = localization
                _stypy_temp_lambda_1.stypy_type_of_self = None
                _stypy_temp_lambda_1.stypy_type_store = module_type_store
                _stypy_temp_lambda_1.stypy_function_name = '_stypy_temp_lambda_1'
                _stypy_temp_lambda_1.stypy_param_names_list = []
                _stypy_temp_lambda_1.stypy_varargs_param_name = None
                _stypy_temp_lambda_1.stypy_kwargs_param_name = None
                _stypy_temp_lambda_1.stypy_call_defaults = defaults
                _stypy_temp_lambda_1.stypy_call_varargs = varargs
                _stypy_temp_lambda_1.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Stacktrace push for error reporting
                localization.set_stack_trace('_stypy_temp_lambda_1', [], arguments)
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of the lambda function code ##################

                
                # Call to iter(...): (line 1743)
                # Processing the call arguments (line 1743)
                # Getting the type of 'frames' (line 1743)
                frames_4419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 42), 'frames', False)
                # Processing the call keyword arguments (line 1743)
                kwargs_4420 = {}
                # Getting the type of 'iter' (line 1743)
                iter_4418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 37), 'iter', False)
                # Calling iter(args, kwargs) (line 1743)
                iter_call_result_4421 = invoke(stypy.reporting.localization.Localization(__file__, 1743, 37), iter_4418, *[frames_4419], **kwargs_4420)
                
                # Assigning the return type of the lambda function
                # Assigning a type to the variable 'stypy_return_type' (line 1743)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 29), 'stypy_return_type', iter_call_result_4421)
                
                # ################# End of the lambda function code ##################

                # Stacktrace pop (error reporting)
                localization.unset_stack_trace()
                
                # Storing the return type of function '_stypy_temp_lambda_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1743)
                stypy_return_type_4422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 29), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_4422)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function '_stypy_temp_lambda_1'
                return stypy_return_type_4422

            # Assigning a type to the variable '_stypy_temp_lambda_1' (line 1743)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 29), '_stypy_temp_lambda_1', _stypy_temp_lambda_1)
            # Getting the type of '_stypy_temp_lambda_1' (line 1743)
            _stypy_temp_lambda_1_4423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 29), '_stypy_temp_lambda_1')
            # Getting the type of 'self' (line 1743)
            self_4424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 12), 'self')
            # Setting the type of the member '_iter_gen' of a type (line 1743)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 12), self_4424, '_iter_gen', _stypy_temp_lambda_1_4423)
            
            # Type idiom detected: calculating its left and rigth part (line 1744)
            unicode_4425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1744, 31), 'unicode', u'__len__')
            # Getting the type of 'frames' (line 1744)
            frames_4426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 23), 'frames')
            
            (may_be_4427, more_types_in_union_4428) = may_provide_member(unicode_4425, frames_4426)

            if may_be_4427:

                if more_types_in_union_4428:
                    # Runtime conditional SSA (line 1744)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'frames' (line 1744)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 12), 'frames', remove_not_member_provider_from_union(frames_4426, u'__len__'))
                
                # Assigning a Call to a Attribute (line 1745):
                
                # Assigning a Call to a Attribute (line 1745):
                
                # Call to len(...): (line 1745)
                # Processing the call arguments (line 1745)
                # Getting the type of 'frames' (line 1745)
                frames_4430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 38), 'frames', False)
                # Processing the call keyword arguments (line 1745)
                kwargs_4431 = {}
                # Getting the type of 'len' (line 1745)
                len_4429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 34), 'len', False)
                # Calling len(args, kwargs) (line 1745)
                len_call_result_4432 = invoke(stypy.reporting.localization.Localization(__file__, 1745, 34), len_4429, *[frames_4430], **kwargs_4431)
                
                # Getting the type of 'self' (line 1745)
                self_4433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 16), 'self')
                # Setting the type of the member 'save_count' of a type (line 1745)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1745, 16), self_4433, 'save_count', len_call_result_4432)

                if more_types_in_union_4428:
                    # SSA join for if statement (line 1744)
                    module_type_store = module_type_store.join_ssa_context()


            
            # SSA branch for the else part of an if statement (line 1742)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Lambda to a Attribute (line 1747):
            
            # Assigning a Lambda to a Attribute (line 1747):

            @norecursion
            def _stypy_temp_lambda_2(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function '_stypy_temp_lambda_2'
                module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_2', 1747, 29, True)
                # Passed parameters checking function
                _stypy_temp_lambda_2.stypy_localization = localization
                _stypy_temp_lambda_2.stypy_type_of_self = None
                _stypy_temp_lambda_2.stypy_type_store = module_type_store
                _stypy_temp_lambda_2.stypy_function_name = '_stypy_temp_lambda_2'
                _stypy_temp_lambda_2.stypy_param_names_list = []
                _stypy_temp_lambda_2.stypy_varargs_param_name = None
                _stypy_temp_lambda_2.stypy_kwargs_param_name = None
                _stypy_temp_lambda_2.stypy_call_defaults = defaults
                _stypy_temp_lambda_2.stypy_call_varargs = varargs
                _stypy_temp_lambda_2.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Stacktrace push for error reporting
                localization.set_stack_trace('_stypy_temp_lambda_2', [], arguments)
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of the lambda function code ##################

                
                # Call to iter(...): (line 1747)
                # Processing the call arguments (line 1747)
                
                # Call to xrange(...): (line 1747)
                # Processing the call arguments (line 1747)
                # Getting the type of 'frames' (line 1747)
                frames_4436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 49), 'frames', False)
                # Processing the call keyword arguments (line 1747)
                kwargs_4437 = {}
                # Getting the type of 'xrange' (line 1747)
                xrange_4435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 42), 'xrange', False)
                # Calling xrange(args, kwargs) (line 1747)
                xrange_call_result_4438 = invoke(stypy.reporting.localization.Localization(__file__, 1747, 42), xrange_4435, *[frames_4436], **kwargs_4437)
                
                # Processing the call keyword arguments (line 1747)
                kwargs_4439 = {}
                # Getting the type of 'iter' (line 1747)
                iter_4434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 37), 'iter', False)
                # Calling iter(args, kwargs) (line 1747)
                iter_call_result_4440 = invoke(stypy.reporting.localization.Localization(__file__, 1747, 37), iter_4434, *[xrange_call_result_4438], **kwargs_4439)
                
                # Assigning the return type of the lambda function
                # Assigning a type to the variable 'stypy_return_type' (line 1747)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1747, 29), 'stypy_return_type', iter_call_result_4440)
                
                # ################# End of the lambda function code ##################

                # Stacktrace pop (error reporting)
                localization.unset_stack_trace()
                
                # Storing the return type of function '_stypy_temp_lambda_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1747)
                stypy_return_type_4441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 29), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_4441)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function '_stypy_temp_lambda_2'
                return stypy_return_type_4441

            # Assigning a type to the variable '_stypy_temp_lambda_2' (line 1747)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1747, 29), '_stypy_temp_lambda_2', _stypy_temp_lambda_2)
            # Getting the type of '_stypy_temp_lambda_2' (line 1747)
            _stypy_temp_lambda_2_4442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 29), '_stypy_temp_lambda_2')
            # Getting the type of 'self' (line 1747)
            self_4443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 12), 'self')
            # Setting the type of the member '_iter_gen' of a type (line 1747)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1747, 12), self_4443, '_iter_gen', _stypy_temp_lambda_2_4442)
            
            # Assigning a Name to a Attribute (line 1748):
            
            # Assigning a Name to a Attribute (line 1748):
            # Getting the type of 'frames' (line 1748)
            frames_4444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 30), 'frames')
            # Getting the type of 'self' (line 1748)
            self_4445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 12), 'self')
            # Setting the type of the member 'save_count' of a type (line 1748)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1748, 12), self_4445, 'save_count', frames_4444)
            # SSA join for if statement (line 1742)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1740)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_4401 and more_types_in_union_4402):
                # SSA join for if statement (line 1738)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1750)
        # Getting the type of 'self' (line 1750)
        self_4446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 11), 'self')
        # Obtaining the member 'save_count' of a type (line 1750)
        save_count_4447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1750, 11), self_4446, 'save_count')
        # Getting the type of 'None' (line 1750)
        None_4448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 30), 'None')
        
        (may_be_4449, more_types_in_union_4450) = may_be_none(save_count_4447, None_4448)

        if may_be_4449:

            if more_types_in_union_4450:
                # Runtime conditional SSA (line 1750)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Num to a Attribute (line 1752):
            
            # Assigning a Num to a Attribute (line 1752):
            int_4451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1752, 30), 'int')
            # Getting the type of 'self' (line 1752)
            self_4452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1752, 12), 'self')
            # Setting the type of the member 'save_count' of a type (line 1752)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1752, 12), self_4452, 'save_count', int_4451)

            if more_types_in_union_4450:
                # Runtime conditional SSA for else branch (line 1750)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_4449) or more_types_in_union_4450):
            
            # Assigning a Call to a Attribute (line 1757):
            
            # Assigning a Call to a Attribute (line 1757):
            
            # Call to int(...): (line 1757)
            # Processing the call arguments (line 1757)
            # Getting the type of 'self' (line 1757)
            self_4454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 34), 'self', False)
            # Obtaining the member 'save_count' of a type (line 1757)
            save_count_4455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1757, 34), self_4454, 'save_count')
            # Processing the call keyword arguments (line 1757)
            kwargs_4456 = {}
            # Getting the type of 'int' (line 1757)
            int_4453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 30), 'int', False)
            # Calling int(args, kwargs) (line 1757)
            int_call_result_4457 = invoke(stypy.reporting.localization.Localization(__file__, 1757, 30), int_4453, *[save_count_4455], **kwargs_4456)
            
            # Getting the type of 'self' (line 1757)
            self_4458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 12), 'self')
            # Setting the type of the member 'save_count' of a type (line 1757)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1757, 12), self_4458, 'save_count', int_call_result_4457)

            if (may_be_4449 and more_types_in_union_4450):
                # SSA join for if statement (line 1750)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 1759):
        
        # Assigning a Name to a Attribute (line 1759):
        # Getting the type of 'init_func' (line 1759)
        init_func_4459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 26), 'init_func')
        # Getting the type of 'self' (line 1759)
        self_4460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 8), 'self')
        # Setting the type of the member '_init_func' of a type (line 1759)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1759, 8), self_4460, '_init_func', init_func_4459)
        
        # Assigning a List to a Attribute (line 1762):
        
        # Assigning a List to a Attribute (line 1762):
        
        # Obtaining an instance of the builtin type 'list' (line 1762)
        list_4461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1762, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1762)
        
        # Getting the type of 'self' (line 1762)
        self_4462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'self')
        # Setting the type of the member '_save_seq' of a type (line 1762)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 8), self_4462, '_save_seq', list_4461)
        
        # Call to __init__(...): (line 1764)
        # Processing the call arguments (line 1764)
        # Getting the type of 'self' (line 1764)
        self_4465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 32), 'self', False)
        # Getting the type of 'fig' (line 1764)
        fig_4466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 38), 'fig', False)
        # Processing the call keyword arguments (line 1764)
        # Getting the type of 'kwargs' (line 1764)
        kwargs_4467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 45), 'kwargs', False)
        kwargs_4468 = {'kwargs_4467': kwargs_4467}
        # Getting the type of 'TimedAnimation' (line 1764)
        TimedAnimation_4463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 8), 'TimedAnimation', False)
        # Obtaining the member '__init__' of a type (line 1764)
        init___4464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1764, 8), TimedAnimation_4463, '__init__')
        # Calling __init__(args, kwargs) (line 1764)
        init___call_result_4469 = invoke(stypy.reporting.localization.Localization(__file__, 1764, 8), init___4464, *[self_4465, fig_4466], **kwargs_4468)
        
        
        # Assigning a List to a Attribute (line 1768):
        
        # Assigning a List to a Attribute (line 1768):
        
        # Obtaining an instance of the builtin type 'list' (line 1768)
        list_4470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1768, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1768)
        
        # Getting the type of 'self' (line 1768)
        self_4471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 8), 'self')
        # Setting the type of the member '_save_seq' of a type (line 1768)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1768, 8), self_4471, '_save_seq', list_4470)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def new_frame_seq(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_frame_seq'
        module_type_store = module_type_store.open_function_context('new_frame_seq', 1770, 4, False)
        # Assigning a type to the variable 'self' (line 1771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1771, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FuncAnimation.new_frame_seq.__dict__.__setitem__('stypy_localization', localization)
        FuncAnimation.new_frame_seq.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FuncAnimation.new_frame_seq.__dict__.__setitem__('stypy_type_store', module_type_store)
        FuncAnimation.new_frame_seq.__dict__.__setitem__('stypy_function_name', 'FuncAnimation.new_frame_seq')
        FuncAnimation.new_frame_seq.__dict__.__setitem__('stypy_param_names_list', [])
        FuncAnimation.new_frame_seq.__dict__.__setitem__('stypy_varargs_param_name', None)
        FuncAnimation.new_frame_seq.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FuncAnimation.new_frame_seq.__dict__.__setitem__('stypy_call_defaults', defaults)
        FuncAnimation.new_frame_seq.__dict__.__setitem__('stypy_call_varargs', varargs)
        FuncAnimation.new_frame_seq.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FuncAnimation.new_frame_seq.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FuncAnimation.new_frame_seq', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_frame_seq', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_frame_seq(...)' code ##################

        
        # Call to _iter_gen(...): (line 1772)
        # Processing the call keyword arguments (line 1772)
        kwargs_4474 = {}
        # Getting the type of 'self' (line 1772)
        self_4472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 15), 'self', False)
        # Obtaining the member '_iter_gen' of a type (line 1772)
        _iter_gen_4473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1772, 15), self_4472, '_iter_gen')
        # Calling _iter_gen(args, kwargs) (line 1772)
        _iter_gen_call_result_4475 = invoke(stypy.reporting.localization.Localization(__file__, 1772, 15), _iter_gen_4473, *[], **kwargs_4474)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1772, 8), 'stypy_return_type', _iter_gen_call_result_4475)
        
        # ################# End of 'new_frame_seq(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_frame_seq' in the type store
        # Getting the type of 'stypy_return_type' (line 1770)
        stypy_return_type_4476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_4476)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_frame_seq'
        return stypy_return_type_4476


    @norecursion
    def new_saved_frame_seq(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_saved_frame_seq'
        module_type_store = module_type_store.open_function_context('new_saved_frame_seq', 1774, 4, False)
        # Assigning a type to the variable 'self' (line 1775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FuncAnimation.new_saved_frame_seq.__dict__.__setitem__('stypy_localization', localization)
        FuncAnimation.new_saved_frame_seq.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FuncAnimation.new_saved_frame_seq.__dict__.__setitem__('stypy_type_store', module_type_store)
        FuncAnimation.new_saved_frame_seq.__dict__.__setitem__('stypy_function_name', 'FuncAnimation.new_saved_frame_seq')
        FuncAnimation.new_saved_frame_seq.__dict__.__setitem__('stypy_param_names_list', [])
        FuncAnimation.new_saved_frame_seq.__dict__.__setitem__('stypy_varargs_param_name', None)
        FuncAnimation.new_saved_frame_seq.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FuncAnimation.new_saved_frame_seq.__dict__.__setitem__('stypy_call_defaults', defaults)
        FuncAnimation.new_saved_frame_seq.__dict__.__setitem__('stypy_call_varargs', varargs)
        FuncAnimation.new_saved_frame_seq.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FuncAnimation.new_saved_frame_seq.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FuncAnimation.new_saved_frame_seq', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_saved_frame_seq', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_saved_frame_seq(...)' code ##################

        
        # Getting the type of 'self' (line 1778)
        self_4477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 11), 'self')
        # Obtaining the member '_save_seq' of a type (line 1778)
        _save_seq_4478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 11), self_4477, '_save_seq')
        # Testing the type of an if condition (line 1778)
        if_condition_4479 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1778, 8), _save_seq_4478)
        # Assigning a type to the variable 'if_condition_4479' (line 1778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'if_condition_4479', if_condition_4479)
        # SSA begins for if statement (line 1778)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1781):
        
        # Assigning a Call to a Attribute (line 1781):
        
        # Call to list(...): (line 1781)
        # Processing the call arguments (line 1781)
        # Getting the type of 'self' (line 1781)
        self_4481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 39), 'self', False)
        # Obtaining the member '_save_seq' of a type (line 1781)
        _save_seq_4482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 39), self_4481, '_save_seq')
        # Processing the call keyword arguments (line 1781)
        kwargs_4483 = {}
        # Getting the type of 'list' (line 1781)
        list_4480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 34), 'list', False)
        # Calling list(args, kwargs) (line 1781)
        list_call_result_4484 = invoke(stypy.reporting.localization.Localization(__file__, 1781, 34), list_4480, *[_save_seq_4482], **kwargs_4483)
        
        # Getting the type of 'self' (line 1781)
        self_4485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 12), 'self')
        # Setting the type of the member '_old_saved_seq' of a type (line 1781)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 12), self_4485, '_old_saved_seq', list_call_result_4484)
        
        # Call to iter(...): (line 1782)
        # Processing the call arguments (line 1782)
        # Getting the type of 'self' (line 1782)
        self_4487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 24), 'self', False)
        # Obtaining the member '_old_saved_seq' of a type (line 1782)
        _old_saved_seq_4488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 24), self_4487, '_old_saved_seq')
        # Processing the call keyword arguments (line 1782)
        kwargs_4489 = {}
        # Getting the type of 'iter' (line 1782)
        iter_4486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 19), 'iter', False)
        # Calling iter(args, kwargs) (line 1782)
        iter_call_result_4490 = invoke(stypy.reporting.localization.Localization(__file__, 1782, 19), iter_4486, *[_old_saved_seq_4488], **kwargs_4489)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1782, 12), 'stypy_return_type', iter_call_result_4490)
        # SSA branch for the else part of an if statement (line 1778)
        module_type_store.open_ssa_branch('else')
        
        # Call to islice(...): (line 1784)
        # Processing the call arguments (line 1784)
        
        # Call to new_frame_seq(...): (line 1784)
        # Processing the call keyword arguments (line 1784)
        kwargs_4495 = {}
        # Getting the type of 'self' (line 1784)
        self_4493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 36), 'self', False)
        # Obtaining the member 'new_frame_seq' of a type (line 1784)
        new_frame_seq_4494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 36), self_4493, 'new_frame_seq')
        # Calling new_frame_seq(args, kwargs) (line 1784)
        new_frame_seq_call_result_4496 = invoke(stypy.reporting.localization.Localization(__file__, 1784, 36), new_frame_seq_4494, *[], **kwargs_4495)
        
        # Getting the type of 'self' (line 1784)
        self_4497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 58), 'self', False)
        # Obtaining the member 'save_count' of a type (line 1784)
        save_count_4498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 58), self_4497, 'save_count')
        # Processing the call keyword arguments (line 1784)
        kwargs_4499 = {}
        # Getting the type of 'itertools' (line 1784)
        itertools_4491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 19), 'itertools', False)
        # Obtaining the member 'islice' of a type (line 1784)
        islice_4492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 19), itertools_4491, 'islice')
        # Calling islice(args, kwargs) (line 1784)
        islice_call_result_4500 = invoke(stypy.reporting.localization.Localization(__file__, 1784, 19), islice_4492, *[new_frame_seq_call_result_4496, save_count_4498], **kwargs_4499)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 12), 'stypy_return_type', islice_call_result_4500)
        # SSA join for if statement (line 1778)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'new_saved_frame_seq(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_saved_frame_seq' in the type store
        # Getting the type of 'stypy_return_type' (line 1774)
        stypy_return_type_4501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_4501)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_saved_frame_seq'
        return stypy_return_type_4501


    @norecursion
    def _init_draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_init_draw'
        module_type_store = module_type_store.open_function_context('_init_draw', 1786, 4, False)
        # Assigning a type to the variable 'self' (line 1787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FuncAnimation._init_draw.__dict__.__setitem__('stypy_localization', localization)
        FuncAnimation._init_draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FuncAnimation._init_draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        FuncAnimation._init_draw.__dict__.__setitem__('stypy_function_name', 'FuncAnimation._init_draw')
        FuncAnimation._init_draw.__dict__.__setitem__('stypy_param_names_list', [])
        FuncAnimation._init_draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        FuncAnimation._init_draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FuncAnimation._init_draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        FuncAnimation._init_draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        FuncAnimation._init_draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FuncAnimation._init_draw.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FuncAnimation._init_draw', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_init_draw', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_init_draw(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1791)
        # Getting the type of 'self' (line 1791)
        self_4502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 11), 'self')
        # Obtaining the member '_init_func' of a type (line 1791)
        _init_func_4503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1791, 11), self_4502, '_init_func')
        # Getting the type of 'None' (line 1791)
        None_4504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 30), 'None')
        
        (may_be_4505, more_types_in_union_4506) = may_be_none(_init_func_4503, None_4504)

        if may_be_4505:

            if more_types_in_union_4506:
                # Runtime conditional SSA (line 1791)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to _draw_frame(...): (line 1792)
            # Processing the call arguments (line 1792)
            
            # Call to next(...): (line 1792)
            # Processing the call arguments (line 1792)
            
            # Call to new_frame_seq(...): (line 1792)
            # Processing the call keyword arguments (line 1792)
            kwargs_4512 = {}
            # Getting the type of 'self' (line 1792)
            self_4510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 34), 'self', False)
            # Obtaining the member 'new_frame_seq' of a type (line 1792)
            new_frame_seq_4511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 34), self_4510, 'new_frame_seq')
            # Calling new_frame_seq(args, kwargs) (line 1792)
            new_frame_seq_call_result_4513 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 34), new_frame_seq_4511, *[], **kwargs_4512)
            
            # Processing the call keyword arguments (line 1792)
            kwargs_4514 = {}
            # Getting the type of 'next' (line 1792)
            next_4509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 29), 'next', False)
            # Calling next(args, kwargs) (line 1792)
            next_call_result_4515 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 29), next_4509, *[new_frame_seq_call_result_4513], **kwargs_4514)
            
            # Processing the call keyword arguments (line 1792)
            kwargs_4516 = {}
            # Getting the type of 'self' (line 1792)
            self_4507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 12), 'self', False)
            # Obtaining the member '_draw_frame' of a type (line 1792)
            _draw_frame_4508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 12), self_4507, '_draw_frame')
            # Calling _draw_frame(args, kwargs) (line 1792)
            _draw_frame_call_result_4517 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 12), _draw_frame_4508, *[next_call_result_4515], **kwargs_4516)
            

            if more_types_in_union_4506:
                # Runtime conditional SSA for else branch (line 1791)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_4505) or more_types_in_union_4506):
            
            # Assigning a Call to a Attribute (line 1795):
            
            # Assigning a Call to a Attribute (line 1795):
            
            # Call to _init_func(...): (line 1795)
            # Processing the call keyword arguments (line 1795)
            kwargs_4520 = {}
            # Getting the type of 'self' (line 1795)
            self_4518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 34), 'self', False)
            # Obtaining the member '_init_func' of a type (line 1795)
            _init_func_4519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1795, 34), self_4518, '_init_func')
            # Calling _init_func(args, kwargs) (line 1795)
            _init_func_call_result_4521 = invoke(stypy.reporting.localization.Localization(__file__, 1795, 34), _init_func_4519, *[], **kwargs_4520)
            
            # Getting the type of 'self' (line 1795)
            self_4522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 12), 'self')
            # Setting the type of the member '_drawn_artists' of a type (line 1795)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1795, 12), self_4522, '_drawn_artists', _init_func_call_result_4521)
            
            # Getting the type of 'self' (line 1796)
            self_4523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 15), 'self')
            # Obtaining the member '_blit' of a type (line 1796)
            _blit_4524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1796, 15), self_4523, '_blit')
            # Testing the type of an if condition (line 1796)
            if_condition_4525 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1796, 12), _blit_4524)
            # Assigning a type to the variable 'if_condition_4525' (line 1796)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1796, 12), 'if_condition_4525', if_condition_4525)
            # SSA begins for if statement (line 1796)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Type idiom detected: calculating its left and rigth part (line 1797)
            # Getting the type of 'self' (line 1797)
            self_4526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 19), 'self')
            # Obtaining the member '_drawn_artists' of a type (line 1797)
            _drawn_artists_4527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1797, 19), self_4526, '_drawn_artists')
            # Getting the type of 'None' (line 1797)
            None_4528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 42), 'None')
            
            (may_be_4529, more_types_in_union_4530) = may_be_none(_drawn_artists_4527, None_4528)

            if may_be_4529:

                if more_types_in_union_4530:
                    # Runtime conditional SSA (line 1797)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Call to RuntimeError(...): (line 1798)
                # Processing the call arguments (line 1798)
                unicode_4532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, 39), 'unicode', u'The init_func must return a sequence of Artist objects.')
                # Processing the call keyword arguments (line 1798)
                kwargs_4533 = {}
                # Getting the type of 'RuntimeError' (line 1798)
                RuntimeError_4531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 26), 'RuntimeError', False)
                # Calling RuntimeError(args, kwargs) (line 1798)
                RuntimeError_call_result_4534 = invoke(stypy.reporting.localization.Localization(__file__, 1798, 26), RuntimeError_4531, *[unicode_4532], **kwargs_4533)
                
                ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1798, 20), RuntimeError_call_result_4534, 'raise parameter', BaseException)

                if more_types_in_union_4530:
                    # SSA join for if statement (line 1797)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Getting the type of 'self' (line 1800)
            self_4535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 25), 'self')
            # Obtaining the member '_drawn_artists' of a type (line 1800)
            _drawn_artists_4536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1800, 25), self_4535, '_drawn_artists')
            # Testing the type of a for loop iterable (line 1800)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1800, 16), _drawn_artists_4536)
            # Getting the type of the for loop variable (line 1800)
            for_loop_var_4537 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1800, 16), _drawn_artists_4536)
            # Assigning a type to the variable 'a' (line 1800)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 16), 'a', for_loop_var_4537)
            # SSA begins for a for statement (line 1800)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Call to set_animated(...): (line 1801)
            # Processing the call arguments (line 1801)
            # Getting the type of 'self' (line 1801)
            self_4540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 35), 'self', False)
            # Obtaining the member '_blit' of a type (line 1801)
            _blit_4541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1801, 35), self_4540, '_blit')
            # Processing the call keyword arguments (line 1801)
            kwargs_4542 = {}
            # Getting the type of 'a' (line 1801)
            a_4538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 20), 'a', False)
            # Obtaining the member 'set_animated' of a type (line 1801)
            set_animated_4539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1801, 20), a_4538, 'set_animated')
            # Calling set_animated(args, kwargs) (line 1801)
            set_animated_call_result_4543 = invoke(stypy.reporting.localization.Localization(__file__, 1801, 20), set_animated_4539, *[_blit_4541], **kwargs_4542)
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1796)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_4505 and more_types_in_union_4506):
                # SSA join for if statement (line 1791)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a List to a Attribute (line 1802):
        
        # Assigning a List to a Attribute (line 1802):
        
        # Obtaining an instance of the builtin type 'list' (line 1802)
        list_4544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1802)
        
        # Getting the type of 'self' (line 1802)
        self_4545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 8), 'self')
        # Setting the type of the member '_save_seq' of a type (line 1802)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 8), self_4545, '_save_seq', list_4544)
        
        # ################# End of '_init_draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_init_draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1786)
        stypy_return_type_4546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_4546)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_init_draw'
        return stypy_return_type_4546


    @norecursion
    def _draw_frame(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_draw_frame'
        module_type_store = module_type_store.open_function_context('_draw_frame', 1804, 4, False)
        # Assigning a type to the variable 'self' (line 1805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FuncAnimation._draw_frame.__dict__.__setitem__('stypy_localization', localization)
        FuncAnimation._draw_frame.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FuncAnimation._draw_frame.__dict__.__setitem__('stypy_type_store', module_type_store)
        FuncAnimation._draw_frame.__dict__.__setitem__('stypy_function_name', 'FuncAnimation._draw_frame')
        FuncAnimation._draw_frame.__dict__.__setitem__('stypy_param_names_list', ['framedata'])
        FuncAnimation._draw_frame.__dict__.__setitem__('stypy_varargs_param_name', None)
        FuncAnimation._draw_frame.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FuncAnimation._draw_frame.__dict__.__setitem__('stypy_call_defaults', defaults)
        FuncAnimation._draw_frame.__dict__.__setitem__('stypy_call_varargs', varargs)
        FuncAnimation._draw_frame.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FuncAnimation._draw_frame.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FuncAnimation._draw_frame', ['framedata'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_draw_frame', localization, ['framedata'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_draw_frame(...)' code ##################

        
        # Call to append(...): (line 1806)
        # Processing the call arguments (line 1806)
        # Getting the type of 'framedata' (line 1806)
        framedata_4550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 30), 'framedata', False)
        # Processing the call keyword arguments (line 1806)
        kwargs_4551 = {}
        # Getting the type of 'self' (line 1806)
        self_4547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 8), 'self', False)
        # Obtaining the member '_save_seq' of a type (line 1806)
        _save_seq_4548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1806, 8), self_4547, '_save_seq')
        # Obtaining the member 'append' of a type (line 1806)
        append_4549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1806, 8), _save_seq_4548, 'append')
        # Calling append(args, kwargs) (line 1806)
        append_call_result_4552 = invoke(stypy.reporting.localization.Localization(__file__, 1806, 8), append_4549, *[framedata_4550], **kwargs_4551)
        
        
        # Assigning a Subscript to a Attribute (line 1810):
        
        # Assigning a Subscript to a Attribute (line 1810):
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'self' (line 1810)
        self_4553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 41), 'self')
        # Obtaining the member 'save_count' of a type (line 1810)
        save_count_4554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1810, 41), self_4553, 'save_count')
        # Applying the 'usub' unary operator (line 1810)
        result___neg___4555 = python_operator(stypy.reporting.localization.Localization(__file__, 1810, 40), 'usub', save_count_4554)
        
        slice_4556 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1810, 25), result___neg___4555, None, None)
        # Getting the type of 'self' (line 1810)
        self_4557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 25), 'self')
        # Obtaining the member '_save_seq' of a type (line 1810)
        _save_seq_4558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1810, 25), self_4557, '_save_seq')
        # Obtaining the member '__getitem__' of a type (line 1810)
        getitem___4559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1810, 25), _save_seq_4558, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1810)
        subscript_call_result_4560 = invoke(stypy.reporting.localization.Localization(__file__, 1810, 25), getitem___4559, slice_4556)
        
        # Getting the type of 'self' (line 1810)
        self_4561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 8), 'self')
        # Setting the type of the member '_save_seq' of a type (line 1810)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1810, 8), self_4561, '_save_seq', subscript_call_result_4560)
        
        # Assigning a Call to a Attribute (line 1814):
        
        # Assigning a Call to a Attribute (line 1814):
        
        # Call to _func(...): (line 1814)
        # Processing the call arguments (line 1814)
        # Getting the type of 'framedata' (line 1814)
        framedata_4564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 41), 'framedata', False)
        # Getting the type of 'self' (line 1814)
        self_4565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 53), 'self', False)
        # Obtaining the member '_args' of a type (line 1814)
        _args_4566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 53), self_4565, '_args')
        # Processing the call keyword arguments (line 1814)
        kwargs_4567 = {}
        # Getting the type of 'self' (line 1814)
        self_4562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 30), 'self', False)
        # Obtaining the member '_func' of a type (line 1814)
        _func_4563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 30), self_4562, '_func')
        # Calling _func(args, kwargs) (line 1814)
        _func_call_result_4568 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 30), _func_4563, *[framedata_4564, _args_4566], **kwargs_4567)
        
        # Getting the type of 'self' (line 1814)
        self_4569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'self')
        # Setting the type of the member '_drawn_artists' of a type (line 1814)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 8), self_4569, '_drawn_artists', _func_call_result_4568)
        
        # Getting the type of 'self' (line 1815)
        self_4570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 11), 'self')
        # Obtaining the member '_blit' of a type (line 1815)
        _blit_4571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 11), self_4570, '_blit')
        # Testing the type of an if condition (line 1815)
        if_condition_4572 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1815, 8), _blit_4571)
        # Assigning a type to the variable 'if_condition_4572' (line 1815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1815, 8), 'if_condition_4572', if_condition_4572)
        # SSA begins for if statement (line 1815)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 1816)
        # Getting the type of 'self' (line 1816)
        self_4573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 15), 'self')
        # Obtaining the member '_drawn_artists' of a type (line 1816)
        _drawn_artists_4574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1816, 15), self_4573, '_drawn_artists')
        # Getting the type of 'None' (line 1816)
        None_4575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 38), 'None')
        
        (may_be_4576, more_types_in_union_4577) = may_be_none(_drawn_artists_4574, None_4575)

        if may_be_4576:

            if more_types_in_union_4577:
                # Runtime conditional SSA (line 1816)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to RuntimeError(...): (line 1817)
            # Processing the call arguments (line 1817)
            unicode_4579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1817, 39), 'unicode', u'The animation function must return a sequence of Artist objects.')
            # Processing the call keyword arguments (line 1817)
            kwargs_4580 = {}
            # Getting the type of 'RuntimeError' (line 1817)
            RuntimeError_4578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 26), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 1817)
            RuntimeError_call_result_4581 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 26), RuntimeError_4578, *[unicode_4579], **kwargs_4580)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1817, 20), RuntimeError_call_result_4581, 'raise parameter', BaseException)

            if more_types_in_union_4577:
                # SSA join for if statement (line 1816)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'self' (line 1819)
        self_4582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 21), 'self')
        # Obtaining the member '_drawn_artists' of a type (line 1819)
        _drawn_artists_4583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 21), self_4582, '_drawn_artists')
        # Testing the type of a for loop iterable (line 1819)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1819, 12), _drawn_artists_4583)
        # Getting the type of the for loop variable (line 1819)
        for_loop_var_4584 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1819, 12), _drawn_artists_4583)
        # Assigning a type to the variable 'a' (line 1819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 12), 'a', for_loop_var_4584)
        # SSA begins for a for statement (line 1819)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_animated(...): (line 1820)
        # Processing the call arguments (line 1820)
        # Getting the type of 'self' (line 1820)
        self_4587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 31), 'self', False)
        # Obtaining the member '_blit' of a type (line 1820)
        _blit_4588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1820, 31), self_4587, '_blit')
        # Processing the call keyword arguments (line 1820)
        kwargs_4589 = {}
        # Getting the type of 'a' (line 1820)
        a_4585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 16), 'a', False)
        # Obtaining the member 'set_animated' of a type (line 1820)
        set_animated_4586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1820, 16), a_4585, 'set_animated')
        # Calling set_animated(args, kwargs) (line 1820)
        set_animated_call_result_4590 = invoke(stypy.reporting.localization.Localization(__file__, 1820, 16), set_animated_4586, *[_blit_4588], **kwargs_4589)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1815)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_draw_frame(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_draw_frame' in the type store
        # Getting the type of 'stypy_return_type' (line 1804)
        stypy_return_type_4591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_4591)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_draw_frame'
        return stypy_return_type_4591


# Assigning a type to the variable 'FuncAnimation' (line 1650)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1650, 0), 'FuncAnimation', FuncAnimation)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
