
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: A module for converting numbers or color arguments to *RGB* or *RGBA*
3: 
4: *RGB* and *RGBA* are sequences of, respectively, 3 or 4 floats in the
5: range 0-1.
6: 
7: This module includes functions and classes for color specification
8: conversions, and for mapping numbers to colors in a 1-D array of colors called
9: a colormap. Colormapping typically involves two steps: a data array is first
10: mapped onto the range 0-1 using an instance of :class:`Normalize` or of a
11: subclass; then this number in the 0-1 range is mapped to a color using an
12: instance of a subclass of :class:`Colormap`.  Two are provided here:
13: :class:`LinearSegmentedColormap`, which is used to generate all the built-in
14: colormap instances, but is also useful for making custom colormaps, and
15: :class:`ListedColormap`, which is used for generating a custom colormap from a
16: list of color specifications.
17: 
18: The module also provides functions for checking whether an object can be
19: interpreted as a color (:func:`is_color_like`), for converting such an object
20: to an RGBA tuple (:func:`to_rgba`) or to an HTML-like hex string in the
21: `#rrggbb` format (:func:`to_hex`), and a sequence of colors to an `(n, 4)`
22: RGBA array (:func:`to_rgba_array`).  Caching is used for efficiency.
23: 
24: Matplotlib recognizes the following formats to specify a color:
25: 
26: * an RGB or RGBA tuple of float values in ``[0, 1]`` (e.g., ``(0.1, 0.2, 0.5)``
27:   or  ``(0.1, 0.2, 0.5, 0.3)``);
28: * a hex RGB or RGBA string (e.g., ``'#0F0F0F'`` or ``'#0F0F0F0F'``);
29: * a string representation of a float value in ``[0, 1]`` inclusive for gray
30:   level (e.g., ``'0.5'``);
31: * one of ``{'b', 'g', 'r', 'c', 'm', 'y', 'k', 'w'}``;
32: * a X11/CSS4 color name;
33: * a name from the `xkcd color survey <https://xkcd.com/color/rgb/>`__;
34:   prefixed with ``'xkcd:'`` (e.g., ``'xkcd:sky blue'``);
35: * one of ``{'tab:blue', 'tab:orange', 'tab:green',
36:   'tab:red', 'tab:purple', 'tab:brown', 'tab:pink',
37:   'tab:gray', 'tab:olive', 'tab:cyan'}`` which are the Tableau Colors from the
38:   'T10' categorical palette (which is the default color cycle);
39: * a "CN" color spec, i.e. `'C'` followed by a single digit, which is an index
40:   into the default property cycle (``matplotlib.rcParams['axes.prop_cycle']``);
41:   the indexing occurs at artist creation time and defaults to black if the
42:   cycle does not include color.
43: 
44: All string specifications of color, other than "CN", are case-insensitive.
45: '''
46: 
47: from __future__ import (absolute_import, division, print_function,
48:                         unicode_literals)
49: 
50: import six
51: from six.moves import zip
52: 
53: from collections import Sized
54: import itertools
55: import re
56: import warnings
57: 
58: import numpy as np
59: import matplotlib.cbook as cbook
60: from ._color_data import BASE_COLORS, TABLEAU_COLORS, CSS4_COLORS, XKCD_COLORS
61: 
62: 
63: class _ColorMapping(dict):
64:     def __init__(self, mapping):
65:         super(_ColorMapping, self).__init__(mapping)
66:         self.cache = {}
67: 
68:     def __setitem__(self, key, value):
69:         super(_ColorMapping, self).__setitem__(key, value)
70:         self.cache.clear()
71: 
72:     def __delitem__(self, key):
73:         super(_ColorMapping, self).__delitem__(key)
74:         self.cache.clear()
75: 
76: 
77: _colors_full_map = {}
78: # Set by reverse priority order.
79: _colors_full_map.update(XKCD_COLORS)
80: _colors_full_map.update({k.replace('grey', 'gray'): v
81:                          for k, v in XKCD_COLORS.items()
82:                          if 'grey' in k})
83: _colors_full_map.update(CSS4_COLORS)
84: _colors_full_map.update(TABLEAU_COLORS)
85: _colors_full_map.update({k.replace('gray', 'grey'): v
86:                          for k, v in TABLEAU_COLORS.items()
87:                          if 'gray' in k})
88: _colors_full_map.update(BASE_COLORS)
89: _colors_full_map = _ColorMapping(_colors_full_map)
90: 
91: 
92: def get_named_colors_mapping():
93:     '''Return the global mapping of names to named colors.
94:     '''
95:     return _colors_full_map
96: 
97: 
98: def _is_nth_color(c):
99:     '''Return whether `c` can be interpreted as an item in the color cycle.
100:     '''
101:     return isinstance(c, six.string_types) and re.match(r"\AC[0-9]\Z", c)
102: 
103: 
104: def is_color_like(c):
105:     '''Return whether `c` can be interpreted as an RGB(A) color.
106:     '''
107:     # Special-case nth color syntax because it cannot be parsed during
108:     # setup.
109:     if _is_nth_color(c):
110:         return True
111:     try:
112:         to_rgba(c)
113:     except ValueError:
114:         return False
115:     else:
116:         return True
117: 
118: 
119: def to_rgba(c, alpha=None):
120:     '''Convert `c` to an RGBA color.
121: 
122:     If `alpha` is not `None`, it forces the alpha value, except if `c` is
123:     "none" (case-insensitive), which always maps to `(0, 0, 0, 0)`.
124:     '''
125:     # Special-case nth color syntax because it should not be cached.
126:     if _is_nth_color(c):
127:         from matplotlib import rcParams
128:         prop_cycler = rcParams['axes.prop_cycle']
129:         colors = prop_cycler.by_key().get('color', ['k'])
130:         c = colors[int(c[1]) % len(colors)]
131:     try:
132:         rgba = _colors_full_map.cache[c, alpha]
133:     except (KeyError, TypeError):  # Not in cache, or unhashable.
134:         rgba = _to_rgba_no_colorcycle(c, alpha)
135:         try:
136:             _colors_full_map.cache[c, alpha] = rgba
137:         except TypeError:
138:             pass
139:     return rgba
140: 
141: 
142: def _to_rgba_no_colorcycle(c, alpha=None):
143:     '''Convert `c` to an RGBA color, with no support for color-cycle syntax.
144: 
145:     If `alpha` is not `None`, it forces the alpha value, except if `c` is
146:     "none" (case-insensitive), which always maps to `(0, 0, 0, 0)`.
147:     '''
148:     orig_c = c
149:     if isinstance(c, six.string_types):
150:         if c.lower() == "none":
151:             return (0., 0., 0., 0.)
152:         # Named color.
153:         try:
154:             # This may turn c into a non-string, so we check again below.
155:             c = _colors_full_map[c.lower()]
156:         except KeyError:
157:             pass
158:     if isinstance(c, six.string_types):
159:         # hex color with no alpha.
160:         match = re.match(r"\A#[a-fA-F0-9]{6}\Z", c)
161:         if match:
162:             return (tuple(int(n, 16) / 255
163:                           for n in [c[1:3], c[3:5], c[5:7]])
164:                     + (alpha if alpha is not None else 1.,))
165:         # hex color with alpha.
166:         match = re.match(r"\A#[a-fA-F0-9]{8}\Z", c)
167:         if match:
168:             color = [int(n, 16) / 255
169:                      for n in [c[1:3], c[3:5], c[5:7], c[7:9]]]
170:             if alpha is not None:
171:                 color[-1] = alpha
172:             return tuple(color)
173:         # string gray.
174:         try:
175:             return (float(c),) * 3 + (alpha if alpha is not None else 1.,)
176:         except ValueError:
177:             pass
178:         raise ValueError("Invalid RGBA argument: {!r}".format(orig_c))
179:     # tuple color.
180:     c = np.array(c)
181:     if not np.can_cast(c.dtype, float, "same_kind") or c.ndim != 1:
182:         # Test the dtype explicitly as `map(float, ...)`, `np.array(...,
183:         # float)` and `np.array(...).astype(float)` all convert "0.5" to 0.5.
184:         # Test dimensionality to reject single floats.
185:         raise ValueError("Invalid RGBA argument: {!r}".format(orig_c))
186:     # Return a tuple to prevent the cached value from being modified.
187:     c = tuple(c.astype(float))
188:     if len(c) not in [3, 4]:
189:         raise ValueError("RGBA sequence should have length 3 or 4")
190:     if len(c) == 3 and alpha is None:
191:         alpha = 1
192:     if alpha is not None:
193:         c = c[:3] + (alpha,)
194:     if any(elem < 0 or elem > 1 for elem in c):
195:         raise ValueError("RGBA values should be within 0-1 range")
196:     return c
197: 
198: 
199: def to_rgba_array(c, alpha=None):
200:     '''Convert `c` to a (n, 4) array of RGBA colors.
201: 
202:     If `alpha` is not `None`, it forces the alpha value.  If `c` is "none"
203:     (case-insensitive) or an empty list, an empty array is returned.
204:     '''
205:     # Special-case inputs that are already arrays, for performance.  (If the
206:     # array has the wrong kind or shape, raise the error during one-at-a-time
207:     # conversion.)
208:     if (isinstance(c, np.ndarray) and c.dtype.kind in "if"
209:             and c.ndim == 2 and c.shape[1] in [3, 4]):
210:         if c.shape[1] == 3:
211:             result = np.column_stack([c, np.zeros(len(c))])
212:             result[:, -1] = alpha if alpha is not None else 1.
213:         elif c.shape[1] == 4:
214:             result = c.copy()
215:             if alpha is not None:
216:                 result[:, -1] = alpha
217:         if np.any((result < 0) | (result > 1)):
218:             raise ValueError("RGBA values should be within 0-1 range")
219:         return result
220:     # Handle single values.
221:     # Note that this occurs *after* handling inputs that are already arrays, as
222:     # `to_rgba(c, alpha)` (below) is expensive for such inputs, due to the need
223:     # to format the array in the ValueError message(!).
224:     if isinstance(c, six.string_types) and c.lower() == "none":
225:         return np.zeros((0, 4), float)
226:     try:
227:         return np.array([to_rgba(c, alpha)], float)
228:     except (ValueError, TypeError):
229:         pass
230:     # Convert one at a time.
231:     result = np.empty((len(c), 4), float)
232:     for i, cc in enumerate(c):
233:         result[i] = to_rgba(cc, alpha)
234:     return result
235: 
236: 
237: def to_rgb(c):
238:     '''Convert `c` to an RGB color, silently dropping the alpha channel.
239:     '''
240:     return to_rgba(c)[:3]
241: 
242: 
243: def to_hex(c, keep_alpha=False):
244:     '''Convert `c` to a hex color.
245: 
246:     Uses the #rrggbb format if `keep_alpha` is False (the default), `#rrggbbaa`
247:     otherwise.
248:     '''
249:     c = to_rgba(c)
250:     if not keep_alpha:
251:         c = c[:3]
252:     return "#" + "".join(format(int(np.round(val * 255)), "02x")
253:                          for val in c)
254: 
255: 
256: ### Backwards-compatible color-conversion API
257: 
258: cnames = CSS4_COLORS
259: hexColorPattern = re.compile(r"\A#[a-fA-F0-9]{6}\Z")
260: 
261: 
262: def rgb2hex(c):
263:     'Given an rgb or rgba sequence of 0-1 floats, return the hex string'
264:     return to_hex(c)
265: 
266: 
267: def hex2color(c):
268:     '''
269:     Take a hex string *s* and return the corresponding rgb 3-tuple
270:     Example: #efefef -> (0.93725, 0.93725, 0.93725)
271:     '''
272:     return ColorConverter.to_rgb(c)
273: 
274: 
275: class ColorConverter(object):
276:     '''
277:     Provides methods for converting color specifications to *RGB* or *RGBA*
278: 
279:     Caching is used for more efficient conversion upon repeated calls
280:     with the same argument.
281: 
282:     Ordinarily only the single instance instantiated in this module,
283:     *colorConverter*, is needed.
284:     '''
285: 
286:     colors = _colors_full_map
287:     cache = _colors_full_map.cache
288: 
289:     @staticmethod
290:     def to_rgb(arg):
291:         '''
292:         Returns an *RGB* tuple of three floats from 0-1.
293: 
294:         *arg* can be an *RGB* or *RGBA* sequence or a string in any of
295:         several forms:
296: 
297:             1) a letter from the set 'rgbcmykw'
298:             2) a hex color string, like '#00FFFF'
299:             3) a standard name, like 'aqua'
300:             4) a string representation of a float, like '0.4',
301:                indicating gray on a 0-1 scale
302: 
303:         if *arg* is *RGBA*, the *A* will simply be discarded.
304:         '''
305:         return to_rgb(arg)
306: 
307:     @staticmethod
308:     def to_rgba(arg, alpha=None):
309:         '''
310:         Returns an *RGBA* tuple of four floats from 0-1.
311: 
312:         For acceptable values of *arg*, see :meth:`to_rgb`.
313:         In addition, if *arg* is "none" (case-insensitive),
314:         then (0,0,0,0) will be returned.
315:         If *arg* is an *RGBA* sequence and *alpha* is not *None*,
316:         *alpha* will replace the original *A*.
317:         '''
318:         return to_rgba(arg, alpha)
319: 
320:     @staticmethod
321:     def to_rgba_array(arg, alpha=None):
322:         '''
323:         Returns a numpy array of *RGBA* tuples.
324: 
325:         Accepts a single mpl color spec or a sequence of specs.
326: 
327:         Special case to handle "no color": if *c* is "none" (case-insensitive),
328:         then an empty array will be returned.  Same for an empty list.
329:         '''
330:         return to_rgba_array(arg, alpha)
331: 
332: 
333: colorConverter = ColorConverter()
334: 
335: ### End of backwards-compatible color-conversion API
336: 
337: 
338: def makeMappingArray(N, data, gamma=1.0):
339:     '''Create an *N* -element 1-d lookup table
340: 
341:     *data* represented by a list of x,y0,y1 mapping correspondences.
342:     Each element in this list represents how a value between 0 and 1
343:     (inclusive) represented by x is mapped to a corresponding value
344:     between 0 and 1 (inclusive). The two values of y are to allow
345:     for discontinuous mapping functions (say as might be found in a
346:     sawtooth) where y0 represents the value of y for values of x
347:     <= to that given, and y1 is the value to be used for x > than
348:     that given). The list must start with x=0, end with x=1, and
349:     all values of x must be in increasing order. Values between
350:     the given mapping points are determined by simple linear interpolation.
351: 
352:     Alternatively, data can be a function mapping values between 0 - 1
353:     to 0 - 1.
354: 
355:     The function returns an array "result" where ``result[x*(N-1)]``
356:     gives the closest value for values of x between 0 and 1.
357:     '''
358: 
359:     if callable(data):
360:         xind = np.linspace(0, 1, N) ** gamma
361:         lut = np.clip(np.array(data(xind), dtype=float), 0, 1)
362:         return lut
363: 
364:     try:
365:         adata = np.array(data)
366:     except Exception:
367:         raise TypeError("data must be convertable to an array")
368:     shape = adata.shape
369:     if len(shape) != 2 or shape[1] != 3:
370:         raise ValueError("data must be nx3 format")
371: 
372:     x = adata[:, 0]
373:     y0 = adata[:, 1]
374:     y1 = adata[:, 2]
375: 
376:     if x[0] != 0. or x[-1] != 1.0:
377:         raise ValueError(
378:             "data mapping points must start with x=0 and end with x=1")
379:     if (np.diff(x) < 0).any():
380:         raise ValueError("data mapping points must have x in increasing order")
381:     # begin generation of lookup table
382:     x = x * (N - 1)
383:     lut = np.zeros((N,), float)
384:     xind = (N - 1) * np.linspace(0, 1, N) ** gamma
385:     ind = np.searchsorted(x, xind)[1:-1]
386: 
387:     distance = (xind[1:-1] - x[ind - 1]) / (x[ind] - x[ind - 1])
388:     lut[1:-1] = distance * (y0[ind] - y1[ind - 1]) + y1[ind - 1]
389:     lut[0] = y1[0]
390:     lut[-1] = y0[-1]
391:     # ensure that the lut is confined to values between 0 and 1 by clipping it
392:     return np.clip(lut, 0.0, 1.0)
393: 
394: 
395: class Colormap(object):
396:     '''
397:     Baseclass for all scalar to RGBA mappings.
398: 
399:     Typically Colormap instances are used to convert data values (floats) from
400:     the interval ``[0, 1]`` to the RGBA color that the respective Colormap
401:     represents. For scaling of data into the ``[0, 1]`` interval see
402:     :class:`matplotlib.colors.Normalize`. It is worth noting that
403:     :class:`matplotlib.cm.ScalarMappable` subclasses make heavy use of this
404:     ``data->normalize->map-to-color`` processing chain.
405: 
406:     '''
407:     def __init__(self, name, N=256):
408:         '''
409:         Parameters
410:         ----------
411:         name : str
412:             The name of the colormap.
413:         N : int
414:             The number of rgb quantization levels.
415: 
416:         '''
417:         self.name = name
418:         self.N = int(N)  # ensure that N is always int
419:         self._rgba_bad = (0.0, 0.0, 0.0, 0.0)  # If bad, don't paint anything.
420:         self._rgba_under = None
421:         self._rgba_over = None
422:         self._i_under = self.N
423:         self._i_over = self.N + 1
424:         self._i_bad = self.N + 2
425:         self._isinit = False
426: 
427:         #: When this colormap exists on a scalar mappable and colorbar_extend
428:         #: is not False, colorbar creation will pick up ``colorbar_extend`` as
429:         #: the default value for the ``extend`` keyword in the
430:         #: :class:`matplotlib.colorbar.Colorbar` constructor.
431:         self.colorbar_extend = False
432: 
433:     def __call__(self, X, alpha=None, bytes=False):
434:         '''
435:         Parameters
436:         ----------
437:         X : scalar, ndarray
438:             The data value(s) to convert to RGBA.
439:             For floats, X should be in the interval ``[0.0, 1.0]`` to
440:             return the RGBA values ``X*100`` percent along the Colormap line.
441:             For integers, X should be in the interval ``[0, Colormap.N)`` to
442:             return RGBA values *indexed* from the Colormap with index ``X``.
443:         alpha : float, None
444:             Alpha must be a scalar between 0 and 1, or None.
445:         bytes : bool
446:             If False (default), the returned RGBA values will be floats in the
447:             interval ``[0, 1]`` otherwise they will be uint8s in the interval
448:             ``[0, 255]``.
449: 
450:         Returns
451:         -------
452:         Tuple of RGBA values if X is scalar, othewise an array of
453:         RGBA values with a shape of ``X.shape + (4, )``.
454: 
455:         '''
456:         # See class docstring for arg/kwarg documentation.
457:         if not self._isinit:
458:             self._init()
459:         mask_bad = None
460:         if not cbook.iterable(X):
461:             vtype = 'scalar'
462:             xa = np.array([X])
463:         else:
464:             vtype = 'array'
465:             xma = np.ma.array(X, copy=True)  # Copy here to avoid side effects.
466:             mask_bad = xma.mask              # Mask will be used below.
467:             xa = xma.filled()                # Fill to avoid infs, etc.
468:             del xma
469: 
470:         # Calculations with native byteorder are faster, and avoid a
471:         # bug that otherwise can occur with putmask when the last
472:         # argument is a numpy scalar.
473:         if not xa.dtype.isnative:
474:             xa = xa.byteswap().newbyteorder()
475: 
476:         if xa.dtype.kind == "f":
477:             # Treat 1.0 as slightly less than 1.
478:             vals = np.array([1, 0], dtype=xa.dtype)
479:             almost_one = np.nextafter(*vals)
480:             np.copyto(xa, almost_one, where=xa == 1.0)
481:             # The following clip is fast, and prevents possible
482:             # conversion of large positive values to negative integers.
483: 
484:             xa *= self.N
485:             np.clip(xa, -1, self.N, out=xa)
486: 
487:             # ensure that all 'under' values will still have negative
488:             # value after casting to int
489:             np.copyto(xa, -1, where=xa < 0.0)
490:             xa = xa.astype(int)
491:         # Set the over-range indices before the under-range;
492:         # otherwise the under-range values get converted to over-range.
493:         np.copyto(xa, self._i_over, where=xa > self.N - 1)
494:         np.copyto(xa, self._i_under, where=xa < 0)
495:         if mask_bad is not None:
496:             if mask_bad.shape == xa.shape:
497:                 np.copyto(xa, self._i_bad, where=mask_bad)
498:             elif mask_bad:
499:                 xa.fill(self._i_bad)
500:         if bytes:
501:             lut = (self._lut * 255).astype(np.uint8)
502:         else:
503:             lut = self._lut.copy()  # Don't let alpha modify original _lut.
504: 
505:         if alpha is not None:
506:             alpha = min(alpha, 1.0)  # alpha must be between 0 and 1
507:             alpha = max(alpha, 0.0)
508:             if bytes:
509:                 alpha = int(alpha * 255)
510:             if (lut[-1] == 0).all():
511:                 lut[:-1, -1] = alpha
512:                 # All zeros is taken as a flag for the default bad
513:                 # color, which is no color--fully transparent.  We
514:                 # don't want to override this.
515:             else:
516:                 lut[:, -1] = alpha
517:                 # If the bad value is set to have a color, then we
518:                 # override its alpha just as for any other value.
519: 
520:         rgba = np.empty(shape=xa.shape + (4,), dtype=lut.dtype)
521:         lut.take(xa, axis=0, mode='clip', out=rgba)
522:         if vtype == 'scalar':
523:             rgba = tuple(rgba[0, :])
524:         return rgba
525: 
526:     def __copy__(self):
527:         '''Create new object with the same class, update attributes
528:         '''
529:         cls = self.__class__
530:         cmapobject = cls.__new__(cls)
531:         cmapobject.__dict__.update(self.__dict__)
532:         if self._isinit:
533:             cmapobject._lut = np.copy(self._lut)
534:         return cmapobject
535: 
536:     def set_bad(self, color='k', alpha=None):
537:         '''Set color to be used for masked values.
538:         '''
539:         self._rgba_bad = colorConverter.to_rgba(color, alpha)
540:         if self._isinit:
541:             self._set_extremes()
542: 
543:     def set_under(self, color='k', alpha=None):
544:         '''Set color to be used for low out-of-range values.
545:            Requires norm.clip = False
546:         '''
547:         self._rgba_under = colorConverter.to_rgba(color, alpha)
548:         if self._isinit:
549:             self._set_extremes()
550: 
551:     def set_over(self, color='k', alpha=None):
552:         '''Set color to be used for high out-of-range values.
553:            Requires norm.clip = False
554:         '''
555:         self._rgba_over = colorConverter.to_rgba(color, alpha)
556:         if self._isinit:
557:             self._set_extremes()
558: 
559:     def _set_extremes(self):
560:         if self._rgba_under:
561:             self._lut[self._i_under] = self._rgba_under
562:         else:
563:             self._lut[self._i_under] = self._lut[0]
564:         if self._rgba_over:
565:             self._lut[self._i_over] = self._rgba_over
566:         else:
567:             self._lut[self._i_over] = self._lut[self.N - 1]
568:         self._lut[self._i_bad] = self._rgba_bad
569: 
570:     def _init(self):
571:         '''Generate the lookup table, self._lut'''
572:         raise NotImplementedError("Abstract class only")
573: 
574:     def is_gray(self):
575:         if not self._isinit:
576:             self._init()
577:         return (np.all(self._lut[:, 0] == self._lut[:, 1]) and
578:                 np.all(self._lut[:, 0] == self._lut[:, 2]))
579: 
580:     def _resample(self, lutsize):
581:         '''
582:         Return a new color map with *lutsize* entries.
583:         '''
584:         raise NotImplementedError()
585: 
586:     def reversed(self, name=None):
587:         '''
588:         Make a reversed instance of the Colormap.
589: 
590:         .. note :: Function not implemented for base class.
591: 
592:         Parameters
593:         ----------
594:         name : str, optional
595:             The name for the reversed colormap. If it's None the
596:             name will be the name of the parent colormap + "_r".
597: 
598:         Notes
599:         -----
600:         See :meth:`LinearSegmentedColormap.reversed` and
601:         :meth:`ListedColormap.reversed`
602:         '''
603:         raise NotImplementedError()
604: 
605: 
606: class LinearSegmentedColormap(Colormap):
607:     '''Colormap objects based on lookup tables using linear segments.
608: 
609:     The lookup table is generated using linear interpolation for each
610:     primary color, with the 0-1 domain divided into any number of
611:     segments.
612:     '''
613:     def __init__(self, name, segmentdata, N=256, gamma=1.0):
614:         '''Create color map from linear mapping segments
615: 
616:         segmentdata argument is a dictionary with a red, green and blue
617:         entries. Each entry should be a list of *x*, *y0*, *y1* tuples,
618:         forming rows in a table. Entries for alpha are optional.
619: 
620:         Example: suppose you want red to increase from 0 to 1 over
621:         the bottom half, green to do the same over the middle half,
622:         and blue over the top half.  Then you would use::
623: 
624:             cdict = {'red':   [(0.0,  0.0, 0.0),
625:                                (0.5,  1.0, 1.0),
626:                                (1.0,  1.0, 1.0)],
627: 
628:                      'green': [(0.0,  0.0, 0.0),
629:                                (0.25, 0.0, 0.0),
630:                                (0.75, 1.0, 1.0),
631:                                (1.0,  1.0, 1.0)],
632: 
633:                      'blue':  [(0.0,  0.0, 0.0),
634:                                (0.5,  0.0, 0.0),
635:                                (1.0,  1.0, 1.0)]}
636: 
637:         Each row in the table for a given color is a sequence of
638:         *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase
639:         monotonically from 0 to 1.  For any input value *z* falling
640:         between *x[i]* and *x[i+1]*, the output value of a given color
641:         will be linearly interpolated between *y1[i]* and *y0[i+1]*::
642: 
643:             row i:   x  y0  y1
644:                            /
645:                           /
646:             row i+1: x  y0  y1
647: 
648:         Hence y0 in the first row and y1 in the last row are never used.
649: 
650: 
651:         .. seealso::
652: 
653:                :meth:`LinearSegmentedColormap.from_list`
654:                Static method; factory function for generating a
655:                smoothly-varying LinearSegmentedColormap.
656: 
657:                :func:`makeMappingArray`
658:                For information about making a mapping array.
659:         '''
660:         # True only if all colors in map are identical; needed for contouring.
661:         self.monochrome = False
662:         Colormap.__init__(self, name, N)
663:         self._segmentdata = segmentdata
664:         self._gamma = gamma
665: 
666:     def _init(self):
667:         self._lut = np.ones((self.N + 3, 4), float)
668:         self._lut[:-3, 0] = makeMappingArray(
669:             self.N, self._segmentdata['red'], self._gamma)
670:         self._lut[:-3, 1] = makeMappingArray(
671:             self.N, self._segmentdata['green'], self._gamma)
672:         self._lut[:-3, 2] = makeMappingArray(
673:             self.N, self._segmentdata['blue'], self._gamma)
674:         if 'alpha' in self._segmentdata:
675:             self._lut[:-3, 3] = makeMappingArray(
676:                 self.N, self._segmentdata['alpha'], 1)
677:         self._isinit = True
678:         self._set_extremes()
679: 
680:     def set_gamma(self, gamma):
681:         '''
682:         Set a new gamma value and regenerate color map.
683:         '''
684:         self._gamma = gamma
685:         self._init()
686: 
687:     @staticmethod
688:     def from_list(name, colors, N=256, gamma=1.0):
689:         '''
690:         Make a linear segmented colormap with *name* from a sequence
691:         of *colors* which evenly transitions from colors[0] at val=0
692:         to colors[-1] at val=1.  *N* is the number of rgb quantization
693:         levels.
694:         Alternatively, a list of (value, color) tuples can be given
695:         to divide the range unevenly.
696:         '''
697: 
698:         if not cbook.iterable(colors):
699:             raise ValueError('colors must be iterable')
700: 
701:         if (isinstance(colors[0], Sized) and len(colors[0]) == 2
702:                 and not isinstance(colors[0], six.string_types)):
703:             # List of value, color pairs
704:             vals, colors = zip(*colors)
705:         else:
706:             vals = np.linspace(0, 1, len(colors))
707: 
708:         cdict = dict(red=[], green=[], blue=[], alpha=[])
709:         for val, color in zip(vals, colors):
710:             r, g, b, a = colorConverter.to_rgba(color)
711:             cdict['red'].append((val, r, r))
712:             cdict['green'].append((val, g, g))
713:             cdict['blue'].append((val, b, b))
714:             cdict['alpha'].append((val, a, a))
715: 
716:         return LinearSegmentedColormap(name, cdict, N, gamma)
717: 
718:     def _resample(self, lutsize):
719:         '''
720:         Return a new color map with *lutsize* entries.
721:         '''
722:         return LinearSegmentedColormap(self.name, self._segmentdata, lutsize)
723: 
724:     def reversed(self, name=None):
725:         '''
726:         Make a reversed instance of the Colormap.
727: 
728:         Parameters
729:         ----------
730:         name : str, optional
731:             The name for the reversed colormap. If it's None the
732:             name will be the name of the parent colormap + "_r".
733: 
734:         Returns
735:         -------
736:         LinearSegmentedColormap
737:             The reversed colormap.
738:         '''
739:         if name is None:
740:             name = self.name + "_r"
741: 
742:         # Function factory needed to deal with 'late binding' issue.
743:         def factory(dat):
744:             def func_r(x):
745:                 return dat(1.0 - x)
746:             return func_r
747: 
748:         data_r = dict()
749:         for key, data in six.iteritems(self._segmentdata):
750:             if callable(data):
751:                 data_r[key] = factory(data)
752:             else:
753:                 new_data = [(1.0 - x, y1, y0) for x, y0, y1 in reversed(data)]
754:                 data_r[key] = new_data
755: 
756:         return LinearSegmentedColormap(name, data_r, self.N, self._gamma)
757: 
758: 
759: class ListedColormap(Colormap):
760:     '''Colormap object generated from a list of colors.
761: 
762:     This may be most useful when indexing directly into a colormap,
763:     but it can also be used to generate special colormaps for ordinary
764:     mapping.
765:     '''
766:     def __init__(self, colors, name='from_list', N=None):
767:         '''
768:         Make a colormap from a list of colors.
769: 
770:         *colors*
771:             a list of matplotlib color specifications,
772:             or an equivalent Nx3 or Nx4 floating point array
773:             (*N* rgb or rgba values)
774:         *name*
775:             a string to identify the colormap
776:         *N*
777:             the number of entries in the map.  The default is *None*,
778:             in which case there is one colormap entry for each
779:             element in the list of colors.  If::
780: 
781:                 N < len(colors)
782: 
783:             the list will be truncated at *N*.  If::
784: 
785:                 N > len(colors)
786: 
787:             the list will be extended by repetition.
788:         '''
789:         self.monochrome = False  # True only if all colors in map are
790:                                  # identical; needed for contouring.
791:         if N is None:
792:             self.colors = colors
793:             N = len(colors)
794:         else:
795:             if isinstance(colors, six.string_types):
796:                 self.colors = [colors] * N
797:                 self.monochrome = True
798:             elif cbook.iterable(colors):
799:                 if len(colors) == 1:
800:                     self.monochrome = True
801:                 self.colors = list(
802:                     itertools.islice(itertools.cycle(colors), N))
803:             else:
804:                 try:
805:                     gray = float(colors)
806:                 except TypeError:
807:                     pass
808:                 else:
809:                     self.colors = [gray] * N
810:                 self.monochrome = True
811:         Colormap.__init__(self, name, N)
812: 
813:     def _init(self):
814:         rgba = colorConverter.to_rgba_array(self.colors)
815:         self._lut = np.zeros((self.N + 3, 4), float)
816:         self._lut[:-3] = rgba
817:         self._isinit = True
818:         self._set_extremes()
819: 
820:     def _resample(self, lutsize):
821:         '''
822:         Return a new color map with *lutsize* entries.
823:         '''
824:         colors = self(np.linspace(0, 1, lutsize))
825:         return ListedColormap(colors, name=self.name)
826: 
827:     def reversed(self, name=None):
828:         '''
829:         Make a reversed instance of the Colormap.
830: 
831:         Parameters
832:         ----------
833:         name : str, optional
834:             The name for the reversed colormap. If it's None the
835:             name will be the name of the parent colormap + "_r".
836: 
837:         Returns
838:         -------
839:         ListedColormap
840:             A reversed instance of the colormap.
841:         '''
842:         if name is None:
843:             name = self.name + "_r"
844: 
845:         colors_r = list(reversed(self.colors))
846:         return ListedColormap(colors_r, name=name, N=self.N)
847: 
848: 
849: class Normalize(object):
850:     '''
851:     A class which, when called, can normalize data into
852:     the ``[0.0, 1.0]`` interval.
853: 
854:     '''
855:     def __init__(self, vmin=None, vmax=None, clip=False):
856:         '''
857:         If *vmin* or *vmax* is not given, they are initialized from the
858:         minimum and maximum value respectively of the first input
859:         processed.  That is, *__call__(A)* calls *autoscale_None(A)*.
860:         If *clip* is *True* and the given value falls outside the range,
861:         the returned value will be 0 or 1, whichever is closer.
862:         Returns 0 if::
863: 
864:             vmin==vmax
865: 
866:         Works with scalars or arrays, including masked arrays.  If
867:         *clip* is *True*, masked values are set to 1; otherwise they
868:         remain masked.  Clipping silently defeats the purpose of setting
869:         the over, under, and masked colors in the colormap, so it is
870:         likely to lead to surprises; therefore the default is
871:         *clip* = *False*.
872:         '''
873:         self.vmin = vmin
874:         self.vmax = vmax
875:         self.clip = clip
876: 
877:     @staticmethod
878:     def process_value(value):
879:         '''
880:         Homogenize the input *value* for easy and efficient normalization.
881: 
882:         *value* can be a scalar or sequence.
883: 
884:         Returns *result*, *is_scalar*, where *result* is a
885:         masked array matching *value*.  Float dtypes are preserved;
886:         integer types with two bytes or smaller are converted to
887:         np.float32, and larger types are converted to np.float64.
888:         Preserving float32 when possible, and using in-place operations,
889:         can greatly improve speed for large arrays.
890: 
891:         Experimental; we may want to add an option to force the
892:         use of float32.
893:         '''
894:         is_scalar = not cbook.iterable(value)
895:         if is_scalar:
896:             value = [value]
897:         dtype = np.min_scalar_type(value)
898:         if np.issubdtype(dtype, np.integer) or dtype.type is np.bool_:
899:             # bool_/int8/int16 -> float32; int32/int64 -> float64
900:             dtype = np.promote_types(dtype, np.float32)
901:         # ensure data passed in as an ndarray subclass are interpreted as
902:         # an ndarray. See issue #6622.
903:         mask = np.ma.getmask(value)
904:         data = np.asarray(np.ma.getdata(value))
905:         result = np.ma.array(data, mask=mask, dtype=dtype, copy=True)
906:         return result, is_scalar
907: 
908:     def __call__(self, value, clip=None):
909:         '''
910:         Normalize *value* data in the ``[vmin, vmax]`` interval into
911:         the ``[0.0, 1.0]`` interval and return it.  *clip* defaults
912:         to *self.clip* (which defaults to *False*).  If not already
913:         initialized, *vmin* and *vmax* are initialized using
914:         *autoscale_None(value)*.
915:         '''
916:         if clip is None:
917:             clip = self.clip
918: 
919:         result, is_scalar = self.process_value(value)
920: 
921:         self.autoscale_None(result)
922:         # Convert at least to float, without losing precision.
923:         (vmin,), _ = self.process_value(self.vmin)
924:         (vmax,), _ = self.process_value(self.vmax)
925:         if vmin == vmax:
926:             result.fill(0)   # Or should it be all masked?  Or 0.5?
927:         elif vmin > vmax:
928:             raise ValueError("minvalue must be less than or equal to maxvalue")
929:         else:
930:             if clip:
931:                 mask = np.ma.getmask(result)
932:                 result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),
933:                                      mask=mask)
934:             # ma division is very slow; we can take a shortcut
935:             resdat = result.data
936:             resdat -= vmin
937:             resdat /= (vmax - vmin)
938:             result = np.ma.array(resdat, mask=result.mask, copy=False)
939:         # Agg cannot handle float128.  We actually only need 32-bit of
940:         # precision, but on Windows, `np.dtype(np.longdouble) == np.float64`,
941:         # so casting to float32 would lose precision on float64s as well.
942:         if result.dtype == np.longdouble:
943:             result = result.astype(np.float64)
944:         if is_scalar:
945:             result = result[0]
946:         return result
947: 
948:     def inverse(self, value):
949:         if not self.scaled():
950:             raise ValueError("Not invertible until scaled")
951:         (vmin,), _ = self.process_value(self.vmin)
952:         (vmax,), _ = self.process_value(self.vmax)
953: 
954:         if cbook.iterable(value):
955:             val = np.ma.asarray(value)
956:             return vmin + val * (vmax - vmin)
957:         else:
958:             return vmin + value * (vmax - vmin)
959: 
960:     def autoscale(self, A):
961:         '''
962:         Set *vmin*, *vmax* to min, max of *A*.
963:         '''
964:         A = np.asanyarray(A)
965:         self.vmin = A.min()
966:         self.vmax = A.max()
967: 
968:     def autoscale_None(self, A):
969:         '''autoscale only None-valued vmin or vmax.'''
970:         A = np.asanyarray(A)
971:         if self.vmin is None and A.size:
972:             self.vmin = A.min()
973:         if self.vmax is None and A.size:
974:             self.vmax = A.max()
975: 
976:     def scaled(self):
977:         'return true if vmin and vmax set'
978:         return (self.vmin is not None and self.vmax is not None)
979: 
980: 
981: class LogNorm(Normalize):
982:     '''
983:     Normalize a given value to the 0-1 range on a log scale
984:     '''
985:     def __call__(self, value, clip=None):
986:         if clip is None:
987:             clip = self.clip
988: 
989:         result, is_scalar = self.process_value(value)
990: 
991:         result = np.ma.masked_less_equal(result, 0, copy=False)
992: 
993:         self.autoscale_None(result)
994:         vmin, vmax = self.vmin, self.vmax
995:         if vmin > vmax:
996:             raise ValueError("minvalue must be less than or equal to maxvalue")
997:         elif vmin <= 0:
998:             raise ValueError("values must all be positive")
999:         elif vmin == vmax:
1000:             result.fill(0)
1001:         else:
1002:             if clip:
1003:                 mask = np.ma.getmask(result)
1004:                 result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),
1005:                                      mask=mask)
1006:             # in-place equivalent of above can be much faster
1007:             resdat = result.data
1008:             mask = result.mask
1009:             if mask is np.ma.nomask:
1010:                 mask = (resdat <= 0)
1011:             else:
1012:                 mask |= resdat <= 0
1013:             np.copyto(resdat, 1, where=mask)
1014:             np.log(resdat, resdat)
1015:             resdat -= np.log(vmin)
1016:             resdat /= (np.log(vmax) - np.log(vmin))
1017:             result = np.ma.array(resdat, mask=mask, copy=False)
1018:         if is_scalar:
1019:             result = result[0]
1020:         return result
1021: 
1022:     def inverse(self, value):
1023:         if not self.scaled():
1024:             raise ValueError("Not invertible until scaled")
1025:         vmin, vmax = self.vmin, self.vmax
1026: 
1027:         if cbook.iterable(value):
1028:             val = np.ma.asarray(value)
1029:             return vmin * np.ma.power((vmax / vmin), val)
1030:         else:
1031:             return vmin * pow((vmax / vmin), value)
1032: 
1033:     def autoscale(self, A):
1034:         '''
1035:         Set *vmin*, *vmax* to min, max of *A*.
1036:         '''
1037:         A = np.ma.masked_less_equal(A, 0, copy=False)
1038:         self.vmin = np.ma.min(A)
1039:         self.vmax = np.ma.max(A)
1040: 
1041:     def autoscale_None(self, A):
1042:         '''autoscale only None-valued vmin or vmax.'''
1043:         if self.vmin is not None and self.vmax is not None:
1044:             return
1045:         A = np.ma.masked_less_equal(A, 0, copy=False)
1046:         if self.vmin is None and A.size:
1047:             self.vmin = A.min()
1048:         if self.vmax is None and A.size:
1049:             self.vmax = A.max()
1050: 
1051: 
1052: class SymLogNorm(Normalize):
1053:     '''
1054:     The symmetrical logarithmic scale is logarithmic in both the
1055:     positive and negative directions from the origin.
1056: 
1057:     Since the values close to zero tend toward infinity, there is a
1058:     need to have a range around zero that is linear.  The parameter
1059:     *linthresh* allows the user to specify the size of this range
1060:     (-*linthresh*, *linthresh*).
1061:     '''
1062:     def __init__(self,  linthresh, linscale=1.0,
1063:                  vmin=None, vmax=None, clip=False):
1064:         '''
1065:         *linthresh*:
1066:         The range within which the plot is linear (to
1067:         avoid having the plot go to infinity around zero).
1068: 
1069:         *linscale*:
1070:         This allows the linear range (-*linthresh* to *linthresh*)
1071:         to be stretched relative to the logarithmic range.  Its
1072:         value is the number of decades to use for each half of the
1073:         linear range.  For example, when *linscale* == 1.0 (the
1074:         default), the space used for the positive and negative
1075:         halves of the linear range will be equal to one decade in
1076:         the logarithmic range. Defaults to 1.
1077:         '''
1078:         Normalize.__init__(self, vmin, vmax, clip)
1079:         self.linthresh = float(linthresh)
1080:         self._linscale_adj = (linscale / (1.0 - np.e ** -1))
1081:         if vmin is not None and vmax is not None:
1082:             self._transform_vmin_vmax()
1083: 
1084:     def __call__(self, value, clip=None):
1085:         if clip is None:
1086:             clip = self.clip
1087: 
1088:         result, is_scalar = self.process_value(value)
1089:         self.autoscale_None(result)
1090:         vmin, vmax = self.vmin, self.vmax
1091: 
1092:         if vmin > vmax:
1093:             raise ValueError("minvalue must be less than or equal to maxvalue")
1094:         elif vmin == vmax:
1095:             result.fill(0)
1096:         else:
1097:             if clip:
1098:                 mask = np.ma.getmask(result)
1099:                 result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),
1100:                                      mask=mask)
1101:             # in-place equivalent of above can be much faster
1102:             resdat = self._transform(result.data)
1103:             resdat -= self._lower
1104:             resdat /= (self._upper - self._lower)
1105: 
1106:         if is_scalar:
1107:             result = result[0]
1108:         return result
1109: 
1110:     def _transform(self, a):
1111:         '''
1112:         Inplace transformation.
1113:         '''
1114:         masked = np.abs(a) > self.linthresh
1115:         sign = np.sign(a[masked])
1116:         log = (self._linscale_adj + np.log(np.abs(a[masked]) / self.linthresh))
1117:         log *= sign * self.linthresh
1118:         a[masked] = log
1119:         a[~masked] *= self._linscale_adj
1120:         return a
1121: 
1122:     def _inv_transform(self, a):
1123:         '''
1124:         Inverse inplace Transformation.
1125:         '''
1126:         masked = np.abs(a) > (self.linthresh * self._linscale_adj)
1127:         sign = np.sign(a[masked])
1128:         exp = np.exp(sign * a[masked] / self.linthresh - self._linscale_adj)
1129:         exp *= sign * self.linthresh
1130:         a[masked] = exp
1131:         a[~masked] /= self._linscale_adj
1132:         return a
1133: 
1134:     def _transform_vmin_vmax(self):
1135:         '''
1136:         Calculates vmin and vmax in the transformed system.
1137:         '''
1138:         vmin, vmax = self.vmin, self.vmax
1139:         arr = np.array([vmax, vmin]).astype(float)
1140:         self._upper, self._lower = self._transform(arr)
1141: 
1142:     def inverse(self, value):
1143:         if not self.scaled():
1144:             raise ValueError("Not invertible until scaled")
1145:         val = np.ma.asarray(value)
1146:         val = val * (self._upper - self._lower) + self._lower
1147:         return self._inv_transform(val)
1148: 
1149:     def autoscale(self, A):
1150:         '''
1151:         Set *vmin*, *vmax* to min, max of *A*.
1152:         '''
1153:         self.vmin = np.ma.min(A)
1154:         self.vmax = np.ma.max(A)
1155:         self._transform_vmin_vmax()
1156: 
1157:     def autoscale_None(self, A):
1158:         '''autoscale only None-valued vmin or vmax.'''
1159:         if self.vmin is not None and self.vmax is not None:
1160:             pass
1161:         A = np.asanyarray(A)
1162:         if self.vmin is None and A.size:
1163:             self.vmin = A.min()
1164:         if self.vmax is None and A.size:
1165:             self.vmax = A.max()
1166:         self._transform_vmin_vmax()
1167: 
1168: 
1169: class PowerNorm(Normalize):
1170:     '''
1171:     Normalize a given value to the ``[0, 1]`` interval with a power-law
1172:     scaling. This will clip any negative data points to 0.
1173:     '''
1174:     def __init__(self, gamma, vmin=None, vmax=None, clip=False):
1175:         Normalize.__init__(self, vmin, vmax, clip)
1176:         self.gamma = gamma
1177: 
1178:     def __call__(self, value, clip=None):
1179:         if clip is None:
1180:             clip = self.clip
1181: 
1182:         result, is_scalar = self.process_value(value)
1183: 
1184:         self.autoscale_None(result)
1185:         gamma = self.gamma
1186:         vmin, vmax = self.vmin, self.vmax
1187:         if vmin > vmax:
1188:             raise ValueError("minvalue must be less than or equal to maxvalue")
1189:         elif vmin == vmax:
1190:             result.fill(0)
1191:         else:
1192:             res_mask = result.data < 0
1193:             if clip:
1194:                 mask = np.ma.getmask(result)
1195:                 result = np.ma.array(np.clip(result.filled(vmax), vmin, vmax),
1196:                                      mask=mask)
1197:             resdat = result.data
1198:             resdat -= vmin
1199:             np.power(resdat, gamma, resdat)
1200:             resdat /= (vmax - vmin) ** gamma
1201: 
1202:             result = np.ma.array(resdat, mask=result.mask, copy=False)
1203:             result[res_mask] = 0
1204:         if is_scalar:
1205:             result = result[0]
1206:         return result
1207: 
1208:     def inverse(self, value):
1209:         if not self.scaled():
1210:             raise ValueError("Not invertible until scaled")
1211:         gamma = self.gamma
1212:         vmin, vmax = self.vmin, self.vmax
1213: 
1214:         if cbook.iterable(value):
1215:             val = np.ma.asarray(value)
1216:             return np.ma.power(val, 1. / gamma) * (vmax - vmin) + vmin
1217:         else:
1218:             return pow(value, 1. / gamma) * (vmax - vmin) + vmin
1219: 
1220:     def autoscale(self, A):
1221:         '''
1222:         Set *vmin*, *vmax* to min, max of *A*.
1223:         '''
1224:         self.vmin = np.ma.min(A)
1225:         if self.vmin < 0:
1226:             self.vmin = 0
1227:             warnings.warn("Power-law scaling on negative values is "
1228:                           "ill-defined, clamping to 0.")
1229:         self.vmax = np.ma.max(A)
1230: 
1231:     def autoscale_None(self, A):
1232:         '''autoscale only None-valued vmin or vmax.'''
1233:         A = np.asanyarray(A)
1234:         if self.vmin is None and A.size:
1235:             self.vmin = A.min()
1236:             if self.vmin < 0:
1237:                 self.vmin = 0
1238:                 warnings.warn("Power-law scaling on negative values is "
1239:                               "ill-defined, clamping to 0.")
1240:         if self.vmax is None and A.size:
1241:             self.vmax = A.max()
1242: 
1243: 
1244: class BoundaryNorm(Normalize):
1245:     '''
1246:     Generate a colormap index based on discrete intervals.
1247: 
1248:     Unlike :class:`Normalize` or :class:`LogNorm`,
1249:     :class:`BoundaryNorm` maps values to integers instead of to the
1250:     interval 0-1.
1251: 
1252:     Mapping to the 0-1 interval could have been done via
1253:     piece-wise linear interpolation, but using integers seems
1254:     simpler, and reduces the number of conversions back and forth
1255:     between integer and floating point.
1256:     '''
1257:     def __init__(self, boundaries, ncolors, clip=False):
1258:         '''
1259:         Parameters
1260:         ----------
1261:         boundaries : array-like
1262:             Monotonically increasing sequence of boundaries
1263:         ncolors : int
1264:             Number of colors in the colormap to be used
1265:         clip : bool, optional
1266:             If clip is ``True``, out of range values are mapped to 0 if they
1267:             are below ``boundaries[0]`` or mapped to ncolors - 1 if they are
1268:             above ``boundaries[-1]``.
1269: 
1270:             If clip is ``False``, out of range values are mapped to -1 if
1271:             they are below ``boundaries[0]`` or mapped to ncolors if they are
1272:             above ``boundaries[-1]``. These are then converted to valid indices
1273:             by :meth:`Colormap.__call__`.
1274: 
1275:         Notes
1276:         -----
1277:         *boundaries* defines the edges of bins, and data falling within a bin
1278:         is mapped to the color with the same index.
1279: 
1280:         If the number of bins doesn't equal *ncolors*, the color is chosen
1281:         by linear interpolation of the bin number onto color numbers.
1282:         '''
1283:         self.clip = clip
1284:         self.vmin = boundaries[0]
1285:         self.vmax = boundaries[-1]
1286:         self.boundaries = np.asarray(boundaries)
1287:         self.N = len(self.boundaries)
1288:         self.Ncmap = ncolors
1289:         if self.N - 1 == self.Ncmap:
1290:             self._interp = False
1291:         else:
1292:             self._interp = True
1293: 
1294:     def __call__(self, value, clip=None):
1295:         if clip is None:
1296:             clip = self.clip
1297: 
1298:         xx, is_scalar = self.process_value(value)
1299:         mask = np.ma.getmaskarray(xx)
1300:         xx = np.atleast_1d(xx.filled(self.vmax + 1))
1301:         if clip:
1302:             np.clip(xx, self.vmin, self.vmax, out=xx)
1303:             max_col = self.Ncmap - 1
1304:         else:
1305:             max_col = self.Ncmap
1306:         iret = np.zeros(xx.shape, dtype=np.int16)
1307:         for i, b in enumerate(self.boundaries):
1308:             iret[xx >= b] = i
1309:         if self._interp:
1310:             scalefac = float(self.Ncmap - 1) / (self.N - 2)
1311:             iret = (iret * scalefac).astype(np.int16)
1312:         iret[xx < self.vmin] = -1
1313:         iret[xx >= self.vmax] = max_col
1314:         ret = np.ma.array(iret, mask=mask)
1315:         if is_scalar:
1316:             ret = int(ret[0])  # assume python scalar
1317:         return ret
1318: 
1319:     def inverse(self, value):
1320:         '''
1321:         Raises
1322:         ------
1323:         ValueError
1324:             BoundaryNorm is not invertible, so calling this method will always
1325:             raise an error
1326:         '''
1327:         return ValueError("BoundaryNorm is not invertible")
1328: 
1329: 
1330: class NoNorm(Normalize):
1331:     '''
1332:     Dummy replacement for Normalize, for the case where we
1333:     want to use indices directly in a
1334:     :class:`~matplotlib.cm.ScalarMappable` .
1335:     '''
1336:     def __call__(self, value, clip=None):
1337:         return value
1338: 
1339:     def inverse(self, value):
1340:         return value
1341: 
1342: 
1343: def rgb_to_hsv(arr):
1344:     '''
1345:     convert float rgb values (in the range [0, 1]), in a numpy array to hsv
1346:     values.
1347: 
1348:     Parameters
1349:     ----------
1350:     arr : (..., 3) array-like
1351:        All values must be in the range [0, 1]
1352: 
1353:     Returns
1354:     -------
1355:     hsv : (..., 3) ndarray
1356:        Colors converted to hsv values in range [0, 1]
1357:     '''
1358:     # make sure it is an ndarray
1359:     arr = np.asarray(arr)
1360: 
1361:     # check length of the last dimension, should be _some_ sort of rgb
1362:     if arr.shape[-1] != 3:
1363:         raise ValueError("Last dimension of input array must be 3; "
1364:                          "shape {} was found.".format(arr.shape))
1365: 
1366:     in_ndim = arr.ndim
1367:     if arr.ndim == 1:
1368:         arr = np.array(arr, ndmin=2)
1369: 
1370:     # make sure we don't have an int image
1371:     arr = arr.astype(np.promote_types(arr.dtype, np.float32))
1372: 
1373:     out = np.zeros_like(arr)
1374:     arr_max = arr.max(-1)
1375:     ipos = arr_max > 0
1376:     delta = arr.ptp(-1)
1377:     s = np.zeros_like(delta)
1378:     s[ipos] = delta[ipos] / arr_max[ipos]
1379:     ipos = delta > 0
1380:     # red is max
1381:     idx = (arr[..., 0] == arr_max) & ipos
1382:     out[idx, 0] = (arr[idx, 1] - arr[idx, 2]) / delta[idx]
1383:     # green is max
1384:     idx = (arr[..., 1] == arr_max) & ipos
1385:     out[idx, 0] = 2. + (arr[idx, 2] - arr[idx, 0]) / delta[idx]
1386:     # blue is max
1387:     idx = (arr[..., 2] == arr_max) & ipos
1388:     out[idx, 0] = 4. + (arr[idx, 0] - arr[idx, 1]) / delta[idx]
1389: 
1390:     out[..., 0] = (out[..., 0] / 6.0) % 1.0
1391:     out[..., 1] = s
1392:     out[..., 2] = arr_max
1393: 
1394:     if in_ndim == 1:
1395:         out.shape = (3,)
1396: 
1397:     return out
1398: 
1399: 
1400: def hsv_to_rgb(hsv):
1401:     '''
1402:     convert hsv values in a numpy array to rgb values
1403:     all values assumed to be in range [0, 1]
1404: 
1405:     Parameters
1406:     ----------
1407:     hsv : (..., 3) array-like
1408:        All values assumed to be in range [0, 1]
1409: 
1410:     Returns
1411:     -------
1412:     rgb : (..., 3) ndarray
1413:        Colors converted to RGB values in range [0, 1]
1414:     '''
1415:     hsv = np.asarray(hsv)
1416: 
1417:     # check length of the last dimension, should be _some_ sort of rgb
1418:     if hsv.shape[-1] != 3:
1419:         raise ValueError("Last dimension of input array must be 3; "
1420:                          "shape {shp} was found.".format(shp=hsv.shape))
1421: 
1422:     # if we got pased a 1D array, try to treat as
1423:     # a single color and reshape as needed
1424:     in_ndim = hsv.ndim
1425:     if in_ndim == 1:
1426:         hsv = np.array(hsv, ndmin=2)
1427: 
1428:     # make sure we don't have an int image
1429:     hsv = hsv.astype(np.promote_types(hsv.dtype, np.float32))
1430: 
1431:     h = hsv[..., 0]
1432:     s = hsv[..., 1]
1433:     v = hsv[..., 2]
1434: 
1435:     r = np.empty_like(h)
1436:     g = np.empty_like(h)
1437:     b = np.empty_like(h)
1438: 
1439:     i = (h * 6.0).astype(int)
1440:     f = (h * 6.0) - i
1441:     p = v * (1.0 - s)
1442:     q = v * (1.0 - s * f)
1443:     t = v * (1.0 - s * (1.0 - f))
1444: 
1445:     idx = i % 6 == 0
1446:     r[idx] = v[idx]
1447:     g[idx] = t[idx]
1448:     b[idx] = p[idx]
1449: 
1450:     idx = i == 1
1451:     r[idx] = q[idx]
1452:     g[idx] = v[idx]
1453:     b[idx] = p[idx]
1454: 
1455:     idx = i == 2
1456:     r[idx] = p[idx]
1457:     g[idx] = v[idx]
1458:     b[idx] = t[idx]
1459: 
1460:     idx = i == 3
1461:     r[idx] = p[idx]
1462:     g[idx] = q[idx]
1463:     b[idx] = v[idx]
1464: 
1465:     idx = i == 4
1466:     r[idx] = t[idx]
1467:     g[idx] = p[idx]
1468:     b[idx] = v[idx]
1469: 
1470:     idx = i == 5
1471:     r[idx] = v[idx]
1472:     g[idx] = p[idx]
1473:     b[idx] = q[idx]
1474: 
1475:     idx = s == 0
1476:     r[idx] = v[idx]
1477:     g[idx] = v[idx]
1478:     b[idx] = v[idx]
1479: 
1480:     # `np.stack([r, g, b], axis=-1)` (numpy 1.10).
1481:     rgb = np.concatenate([r[..., None], g[..., None], b[..., None]], -1)
1482: 
1483:     if in_ndim == 1:
1484:         rgb.shape = (3,)
1485: 
1486:     return rgb
1487: 
1488: 
1489: def _vector_magnitude(arr):
1490:     # things that don't work here:
1491:     #  * np.linalg.norm
1492:     #    - doesn't broadcast in numpy 1.7
1493:     #    - drops the mask from ma.array
1494:     #  * using keepdims - broken on ma.array until 1.11.2
1495:     #  * using sum - discards mask on ma.array unless entire vector is masked
1496: 
1497:     sum_sq = 0
1498:     for i in range(arr.shape[-1]):
1499:         sum_sq += np.square(arr[..., i, np.newaxis])
1500:     return np.sqrt(sum_sq)
1501: 
1502: 
1503: def _vector_dot(a, b):
1504:     # things that don't work here:
1505:     #   * a.dot(b) - fails on masked arrays until 1.10
1506:     #   * np.ma.dot(a, b) - doesn't mask enough things
1507:     #   * np.ma.dot(a, b, strict=True) - returns a maskedarray with no mask
1508:     dot = 0
1509:     for i in range(a.shape[-1]):
1510:         dot += a[..., i] * b[..., i]
1511:     return dot
1512: 
1513: 
1514: class LightSource(object):
1515:     '''
1516:     Create a light source coming from the specified azimuth and elevation.
1517:     Angles are in degrees, with the azimuth measured
1518:     clockwise from north and elevation up from the zero plane of the surface.
1519: 
1520:     The :meth:`shade` is used to produce "shaded" rgb values for a data array.
1521:     :meth:`shade_rgb` can be used to combine an rgb image with
1522:     The :meth:`shade_rgb`
1523:     The :meth:`hillshade` produces an illumination map of a surface.
1524:     '''
1525:     def __init__(self, azdeg=315, altdeg=45, hsv_min_val=0, hsv_max_val=1,
1526:                  hsv_min_sat=1, hsv_max_sat=0):
1527:         '''
1528:         Specify the azimuth (measured clockwise from south) and altitude
1529:         (measured up from the plane of the surface) of the light source
1530:         in degrees.
1531: 
1532:         Parameters
1533:         ----------
1534:         azdeg : number, optional
1535:             The azimuth (0-360, degrees clockwise from North) of the light
1536:             source. Defaults to 315 degrees (from the northwest).
1537:         altdeg : number, optional
1538:             The altitude (0-90, degrees up from horizontal) of the light
1539:             source.  Defaults to 45 degrees from horizontal.
1540: 
1541:         Notes
1542:         -----
1543:         For backwards compatibility, the parameters *hsv_min_val*,
1544:         *hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at
1545:         initialization as well.  However, these parameters will only be used if
1546:         "blend_mode='hsv'" is passed into :meth:`shade` or :meth:`shade_rgb`.
1547:         See the documentation for :meth:`blend_hsv` for more details.
1548:         '''
1549:         self.azdeg = azdeg
1550:         self.altdeg = altdeg
1551:         self.hsv_min_val = hsv_min_val
1552:         self.hsv_max_val = hsv_max_val
1553:         self.hsv_min_sat = hsv_min_sat
1554:         self.hsv_max_sat = hsv_max_sat
1555: 
1556:     @property
1557:     def direction(self):
1558:         ''' The unit vector direction towards the light source '''
1559: 
1560:         # Azimuth is in degrees clockwise from North. Convert to radians
1561:         # counterclockwise from East (mathematical notation).
1562:         az = np.radians(90 - self.azdeg)
1563:         alt = np.radians(self.altdeg)
1564: 
1565:         return np.array([
1566:             np.cos(az) * np.cos(alt),
1567:             np.sin(az) * np.cos(alt),
1568:             np.sin(alt)
1569:         ])
1570: 
1571:     def hillshade(self, elevation, vert_exag=1, dx=1, dy=1, fraction=1.):
1572:         '''
1573:         Calculates the illumination intensity for a surface using the defined
1574:         azimuth and elevation for the light source.
1575: 
1576:         This computes the normal vectors for the surface, and then passes them
1577:         on to `shade_normals`
1578: 
1579:         Parameters
1580:         ----------
1581:         elevation : array-like
1582:             A 2d array (or equivalent) of the height values used to generate an
1583:             illumination map
1584:         vert_exag : number, optional
1585:             The amount to exaggerate the elevation values by when calculating
1586:             illumination. This can be used either to correct for differences in
1587:             units between the x-y coordinate system and the elevation
1588:             coordinate system (e.g. decimal degrees vs meters) or to exaggerate
1589:             or de-emphasize topographic effects.
1590:         dx : number, optional
1591:             The x-spacing (columns) of the input *elevation* grid.
1592:         dy : number, optional
1593:             The y-spacing (rows) of the input *elevation* grid.
1594:         fraction : number, optional
1595:             Increases or decreases the contrast of the hillshade.  Values
1596:             greater than one will cause intermediate values to move closer to
1597:             full illumination or shadow (and clipping any values that move
1598:             beyond 0 or 1). Note that this is not visually or mathematically
1599:             the same as vertical exaggeration.
1600:         Returns
1601:         -------
1602:         intensity : ndarray
1603:             A 2d array of illumination values between 0-1, where 0 is
1604:             completely in shadow and 1 is completely illuminated.
1605:         '''
1606: 
1607:         # Because most image and raster GIS data has the first row in the array
1608:         # as the "top" of the image, dy is implicitly negative.  This is
1609:         # consistent to what `imshow` assumes, as well.
1610:         dy = -dy
1611: 
1612:         # compute the normal vectors from the partial derivatives
1613:         e_dy, e_dx = np.gradient(vert_exag * elevation, dy, dx)
1614: 
1615:         # .view is to keep subclasses
1616:         normal = np.empty(elevation.shape + (3,)).view(type(elevation))
1617:         normal[..., 0] = -e_dx
1618:         normal[..., 1] = -e_dy
1619:         normal[..., 2] = 1
1620:         normal /= _vector_magnitude(normal)
1621: 
1622:         return self.shade_normals(normal, fraction)
1623: 
1624:     def shade_normals(self, normals, fraction=1.):
1625:         '''
1626:         Calculates the illumination intensity for the normal vectors of a
1627:         surface using the defined azimuth and elevation for the light source.
1628: 
1629:         Imagine an artificial sun placed at infinity in some azimuth and
1630:         elevation position illuminating our surface. The parts of the surface
1631:         that slope toward the sun should brighten while those sides facing away
1632:         should become darker.
1633: 
1634:         Parameters
1635:         ----------
1636:         fraction : number, optional
1637:             Increases or decreases the contrast of the hillshade.  Values
1638:             greater than one will cause intermediate values to move closer to
1639:             full illumination or shadow (and clipping any values that move
1640:             beyond 0 or 1). Note that this is not visually or mathematically
1641:             the same as vertical exaggeration.
1642: 
1643:         Returns
1644:         -------
1645:         intensity : ndarray
1646:             A 2d array of illumination values between 0-1, where 0 is
1647:             completely in shadow and 1 is completely illuminated.
1648:         '''
1649: 
1650:         intensity = _vector_dot(normals, self.direction)
1651: 
1652:         # Apply contrast stretch
1653:         imin, imax = intensity.min(), intensity.max()
1654:         intensity *= fraction
1655: 
1656:         # Rescale to 0-1, keeping range before contrast stretch
1657:         # If constant slope, keep relative scaling (i.e. flat should be 0.5,
1658:         # fully occluded 0, etc.)
1659:         if (imax - imin) > 1e-6:
1660:             # Strictly speaking, this is incorrect. Negative values should be
1661:             # clipped to 0 because they're fully occluded. However, rescaling
1662:             # in this manner is consistent with the previous implementation and
1663:             # visually appears better than a "hard" clip.
1664:             intensity -= imin
1665:             intensity /= (imax - imin)
1666:         intensity = np.clip(intensity, 0, 1, intensity)
1667: 
1668:         return intensity
1669: 
1670:     def shade(self, data, cmap, norm=None, blend_mode='overlay', vmin=None,
1671:               vmax=None, vert_exag=1, dx=1, dy=1, fraction=1, **kwargs):
1672:         '''
1673:         Combine colormapped data values with an illumination intensity map
1674:         (a.k.a.  "hillshade") of the values.
1675: 
1676:         Parameters
1677:         ----------
1678:         data : array-like
1679:             A 2d array (or equivalent) of the height values used to generate a
1680:             shaded map.
1681:         cmap : `~matplotlib.colors.Colormap` instance
1682:             The colormap used to color the *data* array. Note that this must be
1683:             a `~matplotlib.colors.Colormap` instance.  For example, rather than
1684:             passing in `cmap='gist_earth'`, use
1685:             `cmap=plt.get_cmap('gist_earth')` instead.
1686:         norm : `~matplotlib.colors.Normalize` instance, optional
1687:             The normalization used to scale values before colormapping. If
1688:             None, the input will be linearly scaled between its min and max.
1689:         blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional
1690:             The type of blending used to combine the colormapped data
1691:             values with the illumination intensity.  Default is
1692:             "overlay".  Note that for most topographic surfaces,
1693:             "overlay" or "soft" appear more visually realistic. If a
1694:             user-defined function is supplied, it is expected to
1695:             combine an MxNx3 RGB array of floats (ranging 0 to 1) with
1696:             an MxNx1 hillshade array (also 0 to 1).  (Call signature
1697:             `func(rgb, illum, **kwargs)`) Additional kwargs supplied
1698:             to this function will be passed on to the *blend_mode*
1699:             function.
1700:         vmin : scalar or None, optional
1701:             The minimum value used in colormapping *data*. If *None* the
1702:             minimum value in *data* is used. If *norm* is specified, then this
1703:             argument will be ignored.
1704:         vmax : scalar or None, optional
1705:             The maximum value used in colormapping *data*. If *None* the
1706:             maximum value in *data* is used. If *norm* is specified, then this
1707:             argument will be ignored.
1708:         vert_exag : number, optional
1709:             The amount to exaggerate the elevation values by when calculating
1710:             illumination. This can be used either to correct for differences in
1711:             units between the x-y coordinate system and the elevation
1712:             coordinate system (e.g. decimal degrees vs meters) or to exaggerate
1713:             or de-emphasize topography.
1714:         dx : number, optional
1715:             The x-spacing (columns) of the input *elevation* grid.
1716:         dy : number, optional
1717:             The y-spacing (rows) of the input *elevation* grid.
1718:         fraction : number, optional
1719:             Increases or decreases the contrast of the hillshade.  Values
1720:             greater than one will cause intermediate values to move closer to
1721:             full illumination or shadow (and clipping any values that move
1722:             beyond 0 or 1). Note that this is not visually or mathematically
1723:             the same as vertical exaggeration.
1724:         Additional kwargs are passed on to the *blend_mode* function.
1725: 
1726:         Returns
1727:         -------
1728:         rgba : ndarray
1729:             An MxNx4 array of floats ranging between 0-1.
1730:         '''
1731:         if vmin is None:
1732:             vmin = data.min()
1733:         if vmax is None:
1734:             vmax = data.max()
1735:         if norm is None:
1736:             norm = Normalize(vmin=vmin, vmax=vmax)
1737: 
1738:         rgb0 = cmap(norm(data))
1739:         rgb1 = self.shade_rgb(rgb0, elevation=data, blend_mode=blend_mode,
1740:                               vert_exag=vert_exag, dx=dx, dy=dy,
1741:                               fraction=fraction, **kwargs)
1742:         # Don't overwrite the alpha channel, if present.
1743:         rgb0[..., :3] = rgb1[..., :3]
1744:         return rgb0
1745: 
1746:     def shade_rgb(self, rgb, elevation, fraction=1., blend_mode='hsv',
1747:                   vert_exag=1, dx=1, dy=1, **kwargs):
1748:         '''
1749:         Take the input RGB array (ny*nx*3) adjust their color values
1750:         to given the impression of a shaded relief map with a
1751:         specified light source using the elevation (ny*nx).
1752:         A new RGB array ((ny*nx*3)) is returned.
1753: 
1754:         Parameters
1755:         ----------
1756:         rgb : array-like
1757:             An MxNx3 RGB array, assumed to be in the range of 0 to 1.
1758:         elevation : array-like
1759:             A 2d array (or equivalent) of the height values used to generate a
1760:             shaded map.
1761:         fraction : number
1762:             Increases or decreases the contrast of the hillshade.  Values
1763:             greater than one will cause intermediate values to move closer to
1764:             full illumination or shadow (and clipping any values that move
1765:             beyond 0 or 1). Note that this is not visually or mathematically
1766:             the same as vertical exaggeration.
1767:         blend_mode : {'hsv', 'overlay', 'soft'} or callable, optional
1768:             The type of blending used to combine the colormapped data values
1769:             with the illumination intensity.  For backwards compatibility, this
1770:             defaults to "hsv". Note that for most topographic surfaces,
1771:             "overlay" or "soft" appear more visually realistic. If a
1772:             user-defined function is supplied, it is expected to combine an
1773:             MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade
1774:             array (also 0 to 1).  (Call signature `func(rgb, illum, **kwargs)`)
1775:             Additional kwargs supplied to this function will be passed on to
1776:             the *blend_mode* function.
1777:         vert_exag : number, optional
1778:             The amount to exaggerate the elevation values by when calculating
1779:             illumination. This can be used either to correct for differences in
1780:             units between the x-y coordinate system and the elevation
1781:             coordinate system (e.g. decimal degrees vs meters) or to exaggerate
1782:             or de-emphasize topography.
1783:         dx : number, optional
1784:             The x-spacing (columns) of the input *elevation* grid.
1785:         dy : number, optional
1786:             The y-spacing (rows) of the input *elevation* grid.
1787:         Additional kwargs are passed on to the *blend_mode* function.
1788: 
1789:         Returns
1790:         -------
1791:         shaded_rgb : ndarray
1792:             An MxNx3 array of floats ranging between 0-1.
1793:         '''
1794:         # Calculate the "hillshade" intensity.
1795:         intensity = self.hillshade(elevation, vert_exag, dx, dy, fraction)
1796:         intensity = intensity[..., np.newaxis]
1797: 
1798:         # Blend the hillshade and rgb data using the specified mode
1799:         lookup = {
1800:                 'hsv': self.blend_hsv,
1801:                 'soft': self.blend_soft_light,
1802:                 'overlay': self.blend_overlay,
1803:                 }
1804:         if blend_mode in lookup:
1805:             blend = lookup[blend_mode](rgb, intensity, **kwargs)
1806:         else:
1807:             try:
1808:                 blend = blend_mode(rgb, intensity, **kwargs)
1809:             except TypeError:
1810:                 msg = '"blend_mode" must be callable or one of {0}'
1811:                 raise ValueError(msg.format(lookup.keys))
1812: 
1813:         # Only apply result where hillshade intensity isn't masked
1814:         if hasattr(intensity, 'mask'):
1815:             mask = intensity.mask[..., 0]
1816:             for i in range(3):
1817:                 blend[..., i][mask] = rgb[..., i][mask]
1818: 
1819:         return blend
1820: 
1821:     def blend_hsv(self, rgb, intensity, hsv_max_sat=None, hsv_max_val=None,
1822:                   hsv_min_val=None, hsv_min_sat=None):
1823:         '''
1824:         Take the input data array, convert to HSV values in the given colormap,
1825:         then adjust those color values to give the impression of a shaded
1826:         relief map with a specified light source.  RGBA values are returned,
1827:         which can then be used to plot the shaded image with imshow.
1828: 
1829:         The color of the resulting image will be darkened by moving the (s,v)
1830:         values (in hsv colorspace) toward (hsv_min_sat, hsv_min_val) in the
1831:         shaded regions, or lightened by sliding (s,v) toward (hsv_max_sat
1832:         hsv_max_val) in regions that are illuminated.  The default extremes are
1833:         chose so that completely shaded points are nearly black (s = 1, v = 0)
1834:         and completely illuminated points are nearly white (s = 0, v = 1).
1835: 
1836:         Parameters
1837:         ----------
1838:         rgb : ndarray
1839:             An MxNx3 RGB array of floats ranging from 0 to 1 (color image).
1840:         intensity : ndarray
1841:             An MxNx1 array of floats ranging from 0 to 1 (grayscale image).
1842:         hsv_max_sat : number, optional
1843:             The maximum saturation value that the *intensity* map can shift the
1844:             output image to. Defaults to 1.
1845:         hsv_min_sat : number, optional
1846:             The minimum saturation value that the *intensity* map can shift the
1847:             output image to. Defaults to 0.
1848:         hsv_max_val : number, optional
1849:             The maximum value ("v" in "hsv") that the *intensity* map can shift
1850:             the output image to. Defaults to 1.
1851:         hsv_min_val: number, optional
1852:             The minimum value ("v" in "hsv") that the *intensity* map can shift
1853:             the output image to. Defaults to 0.
1854: 
1855:         Returns
1856:         -------
1857:         rgb : ndarray
1858:             An MxNx3 RGB array representing the combined images.
1859:         '''
1860:         # Backward compatibility...
1861:         if hsv_max_sat is None:
1862:             hsv_max_sat = self.hsv_max_sat
1863:         if hsv_max_val is None:
1864:             hsv_max_val = self.hsv_max_val
1865:         if hsv_min_sat is None:
1866:             hsv_min_sat = self.hsv_min_sat
1867:         if hsv_min_val is None:
1868:             hsv_min_val = self.hsv_min_val
1869: 
1870:         # Expects a 2D intensity array scaled between -1 to 1...
1871:         intensity = intensity[..., 0]
1872:         intensity = 2 * intensity - 1
1873: 
1874:         # convert to rgb, then rgb to hsv
1875:         hsv = rgb_to_hsv(rgb[:, :, 0:3])
1876: 
1877:         # modify hsv values to simulate illumination.
1878:         hsv[:, :, 1] = np.where(np.logical_and(np.abs(hsv[:, :, 1]) > 1.e-10,
1879:                                                intensity > 0),
1880:                                 ((1. - intensity) * hsv[:, :, 1] +
1881:                                  intensity * hsv_max_sat),
1882:                                 hsv[:, :, 1])
1883: 
1884:         hsv[:, :, 2] = np.where(intensity > 0,
1885:                                 ((1. - intensity) * hsv[:, :, 2] +
1886:                                  intensity * hsv_max_val),
1887:                                 hsv[:, :, 2])
1888: 
1889:         hsv[:, :, 1] = np.where(np.logical_and(np.abs(hsv[:, :, 1]) > 1.e-10,
1890:                                                intensity < 0),
1891:                                 ((1. + intensity) * hsv[:, :, 1] -
1892:                                  intensity * hsv_min_sat),
1893:                                 hsv[:, :, 1])
1894:         hsv[:, :, 2] = np.where(intensity < 0,
1895:                                 ((1. + intensity) * hsv[:, :, 2] -
1896:                                  intensity * hsv_min_val),
1897:                                 hsv[:, :, 2])
1898:         hsv[:, :, 1:] = np.where(hsv[:, :, 1:] < 0., 0, hsv[:, :, 1:])
1899:         hsv[:, :, 1:] = np.where(hsv[:, :, 1:] > 1., 1, hsv[:, :, 1:])
1900:         # convert modified hsv back to rgb.
1901:         return hsv_to_rgb(hsv)
1902: 
1903:     def blend_soft_light(self, rgb, intensity):
1904:         '''
1905:         Combines an rgb image with an intensity map using "soft light"
1906:         blending.  Uses the "pegtop" formula.
1907: 
1908:         Parameters
1909:         ----------
1910:         rgb : ndarray
1911:             An MxNx3 RGB array of floats ranging from 0 to 1 (color image).
1912:         intensity : ndarray
1913:             An MxNx1 array of floats ranging from 0 to 1 (grayscale image).
1914: 
1915:         Returns
1916:         -------
1917:         rgb : ndarray
1918:             An MxNx3 RGB array representing the combined images.
1919:         '''
1920:         return 2 * intensity * rgb + (1 - 2 * intensity) * rgb**2
1921: 
1922:     def blend_overlay(self, rgb, intensity):
1923:         '''
1924:         Combines an rgb image with an intensity map using "overlay" blending.
1925: 
1926:         Parameters
1927:         ----------
1928:         rgb : ndarray
1929:             An MxNx3 RGB array of floats ranging from 0 to 1 (color image).
1930:         intensity : ndarray
1931:             An MxNx1 array of floats ranging from 0 to 1 (grayscale image).
1932: 
1933:         Returns
1934:         -------
1935:         rgb : ndarray
1936:             An MxNx3 RGB array representing the combined images.
1937:         '''
1938:         low = 2 * intensity * rgb
1939:         high = 1 - 2 * (1 - intensity) * (1 - rgb)
1940:         return np.where(rgb <= 0.5, low, high)
1941: 
1942: 
1943: def from_levels_and_colors(levels, colors, extend='neither'):
1944:     '''
1945:     A helper routine to generate a cmap and a norm instance which
1946:     behave similar to contourf's levels and colors arguments.
1947: 
1948:     Parameters
1949:     ----------
1950:     levels : sequence of numbers
1951:         The quantization levels used to construct the :class:`BoundaryNorm`.
1952:         Values ``v`` are quantizized to level ``i`` if
1953:         ``lev[i] <= v < lev[i+1]``.
1954:     colors : sequence of colors
1955:         The fill color to use for each level. If `extend` is "neither" there
1956:         must be ``n_level - 1`` colors. For an `extend` of "min" or "max" add
1957:         one extra color, and for an `extend` of "both" add two colors.
1958:     extend : {'neither', 'min', 'max', 'both'}, optional
1959:         The behaviour when a value falls out of range of the given levels.
1960:         See :func:`~matplotlib.pyplot.contourf` for details.
1961: 
1962:     Returns
1963:     -------
1964:     (cmap, norm) : tuple containing a :class:`Colormap` and a \
1965:                    :class:`Normalize` instance
1966:     '''
1967:     colors_i0 = 0
1968:     colors_i1 = None
1969: 
1970:     if extend == 'both':
1971:         colors_i0 = 1
1972:         colors_i1 = -1
1973:         extra_colors = 2
1974:     elif extend == 'min':
1975:         colors_i0 = 1
1976:         extra_colors = 1
1977:     elif extend == 'max':
1978:         colors_i1 = -1
1979:         extra_colors = 1
1980:     elif extend == 'neither':
1981:         extra_colors = 0
1982:     else:
1983:         raise ValueError('Unexpected value for extend: {0!r}'.format(extend))
1984: 
1985:     n_data_colors = len(levels) - 1
1986:     n_expected_colors = n_data_colors + extra_colors
1987:     if len(colors) != n_expected_colors:
1988:         raise ValueError('With extend == {0!r} and n_levels == {1!r} expected'
1989:                          ' n_colors == {2!r}. Got {3!r}.'
1990:                          ''.format(extend, len(levels), n_expected_colors,
1991:                                    len(colors)))
1992: 
1993:     cmap = ListedColormap(colors[colors_i0:colors_i1], N=n_data_colors)
1994: 
1995:     if extend in ['min', 'both']:
1996:         cmap.set_under(colors[0])
1997:     else:
1998:         cmap.set_under('none')
1999: 
2000:     if extend in ['max', 'both']:
2001:         cmap.set_over(colors[-1])
2002:     else:
2003:         cmap.set_over('none')
2004: 
2005:     cmap.colorbar_extend = extend
2006: 
2007:     norm = BoundaryNorm(levels, ncolors=n_data_colors)
2008:     return cmap, norm
2009: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_34269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, (-1)), 'unicode', u'\nA module for converting numbers or color arguments to *RGB* or *RGBA*\n\n*RGB* and *RGBA* are sequences of, respectively, 3 or 4 floats in the\nrange 0-1.\n\nThis module includes functions and classes for color specification\nconversions, and for mapping numbers to colors in a 1-D array of colors called\na colormap. Colormapping typically involves two steps: a data array is first\nmapped onto the range 0-1 using an instance of :class:`Normalize` or of a\nsubclass; then this number in the 0-1 range is mapped to a color using an\ninstance of a subclass of :class:`Colormap`.  Two are provided here:\n:class:`LinearSegmentedColormap`, which is used to generate all the built-in\ncolormap instances, but is also useful for making custom colormaps, and\n:class:`ListedColormap`, which is used for generating a custom colormap from a\nlist of color specifications.\n\nThe module also provides functions for checking whether an object can be\ninterpreted as a color (:func:`is_color_like`), for converting such an object\nto an RGBA tuple (:func:`to_rgba`) or to an HTML-like hex string in the\n`#rrggbb` format (:func:`to_hex`), and a sequence of colors to an `(n, 4)`\nRGBA array (:func:`to_rgba_array`).  Caching is used for efficiency.\n\nMatplotlib recognizes the following formats to specify a color:\n\n* an RGB or RGBA tuple of float values in ``[0, 1]`` (e.g., ``(0.1, 0.2, 0.5)``\n  or  ``(0.1, 0.2, 0.5, 0.3)``);\n* a hex RGB or RGBA string (e.g., ``\'#0F0F0F\'`` or ``\'#0F0F0F0F\'``);\n* a string representation of a float value in ``[0, 1]`` inclusive for gray\n  level (e.g., ``\'0.5\'``);\n* one of ``{\'b\', \'g\', \'r\', \'c\', \'m\', \'y\', \'k\', \'w\'}``;\n* a X11/CSS4 color name;\n* a name from the `xkcd color survey <https://xkcd.com/color/rgb/>`__;\n  prefixed with ``\'xkcd:\'`` (e.g., ``\'xkcd:sky blue\'``);\n* one of ``{\'tab:blue\', \'tab:orange\', \'tab:green\',\n  \'tab:red\', \'tab:purple\', \'tab:brown\', \'tab:pink\',\n  \'tab:gray\', \'tab:olive\', \'tab:cyan\'}`` which are the Tableau Colors from the\n  \'T10\' categorical palette (which is the default color cycle);\n* a "CN" color spec, i.e. `\'C\'` followed by a single digit, which is an index\n  into the default property cycle (``matplotlib.rcParams[\'axes.prop_cycle\']``);\n  the indexing occurs at artist creation time and defaults to black if the\n  cycle does not include color.\n\nAll string specifications of color, other than "CN", are case-insensitive.\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 50, 0))

# 'import six' statement (line 50)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_34270 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 50, 0), 'six')

if (type(import_34270) is not StypyTypeError):

    if (import_34270 != 'pyd_module'):
        __import__(import_34270)
        sys_modules_34271 = sys.modules[import_34270]
        import_module(stypy.reporting.localization.Localization(__file__, 50, 0), 'six', sys_modules_34271.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 50, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 50)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 0), 'six', import_34270)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 51, 0))

# 'from six.moves import zip' statement (line 51)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_34272 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 51, 0), 'six.moves')

if (type(import_34272) is not StypyTypeError):

    if (import_34272 != 'pyd_module'):
        __import__(import_34272)
        sys_modules_34273 = sys.modules[import_34272]
        import_from_module(stypy.reporting.localization.Localization(__file__, 51, 0), 'six.moves', sys_modules_34273.module_type_store, module_type_store, ['zip'])
        nest_module(stypy.reporting.localization.Localization(__file__, 51, 0), __file__, sys_modules_34273, sys_modules_34273.module_type_store, module_type_store)
    else:
        from six.moves import zip

        import_from_module(stypy.reporting.localization.Localization(__file__, 51, 0), 'six.moves', None, module_type_store, ['zip'], [zip])

else:
    # Assigning a type to the variable 'six.moves' (line 51)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'six.moves', import_34272)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 53, 0))

# 'from collections import Sized' statement (line 53)
try:
    from collections import Sized

except:
    Sized = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 53, 0), 'collections', None, module_type_store, ['Sized'], [Sized])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 54, 0))

# 'import itertools' statement (line 54)
import itertools

import_module(stypy.reporting.localization.Localization(__file__, 54, 0), 'itertools', itertools, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 55, 0))

# 'import re' statement (line 55)
import re

import_module(stypy.reporting.localization.Localization(__file__, 55, 0), 're', re, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 56, 0))

# 'import warnings' statement (line 56)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 56, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 58, 0))

# 'import numpy' statement (line 58)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_34274 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 58, 0), 'numpy')

if (type(import_34274) is not StypyTypeError):

    if (import_34274 != 'pyd_module'):
        __import__(import_34274)
        sys_modules_34275 = sys.modules[import_34274]
        import_module(stypy.reporting.localization.Localization(__file__, 58, 0), 'np', sys_modules_34275.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 58, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 58)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 58, 0), 'numpy', import_34274)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 59, 0))

# 'import matplotlib.cbook' statement (line 59)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_34276 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 59, 0), 'matplotlib.cbook')

if (type(import_34276) is not StypyTypeError):

    if (import_34276 != 'pyd_module'):
        __import__(import_34276)
        sys_modules_34277 = sys.modules[import_34276]
        import_module(stypy.reporting.localization.Localization(__file__, 59, 0), 'cbook', sys_modules_34277.module_type_store, module_type_store)
    else:
        import matplotlib.cbook as cbook

        import_module(stypy.reporting.localization.Localization(__file__, 59, 0), 'cbook', matplotlib.cbook, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 59)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 59, 0), 'matplotlib.cbook', import_34276)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 60, 0))

# 'from matplotlib._color_data import BASE_COLORS, TABLEAU_COLORS, CSS4_COLORS, XKCD_COLORS' statement (line 60)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_34278 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 60, 0), 'matplotlib._color_data')

if (type(import_34278) is not StypyTypeError):

    if (import_34278 != 'pyd_module'):
        __import__(import_34278)
        sys_modules_34279 = sys.modules[import_34278]
        import_from_module(stypy.reporting.localization.Localization(__file__, 60, 0), 'matplotlib._color_data', sys_modules_34279.module_type_store, module_type_store, ['BASE_COLORS', 'TABLEAU_COLORS', 'CSS4_COLORS', 'XKCD_COLORS'])
        nest_module(stypy.reporting.localization.Localization(__file__, 60, 0), __file__, sys_modules_34279, sys_modules_34279.module_type_store, module_type_store)
    else:
        from matplotlib._color_data import BASE_COLORS, TABLEAU_COLORS, CSS4_COLORS, XKCD_COLORS

        import_from_module(stypy.reporting.localization.Localization(__file__, 60, 0), 'matplotlib._color_data', None, module_type_store, ['BASE_COLORS', 'TABLEAU_COLORS', 'CSS4_COLORS', 'XKCD_COLORS'], [BASE_COLORS, TABLEAU_COLORS, CSS4_COLORS, XKCD_COLORS])

else:
    # Assigning a type to the variable 'matplotlib._color_data' (line 60)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 0), 'matplotlib._color_data', import_34278)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

# Declaration of the '_ColorMapping' class
# Getting the type of 'dict' (line 63)
dict_34280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 20), 'dict')

class _ColorMapping(dict_34280, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 64, 4, False)
        # Assigning a type to the variable 'self' (line 65)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 65, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ColorMapping.__init__', ['mapping'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['mapping'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 65)
        # Processing the call arguments (line 65)
        # Getting the type of 'mapping' (line 65)
        mapping_34287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 44), 'mapping', False)
        # Processing the call keyword arguments (line 65)
        kwargs_34288 = {}
        
        # Call to super(...): (line 65)
        # Processing the call arguments (line 65)
        # Getting the type of '_ColorMapping' (line 65)
        _ColorMapping_34282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 14), '_ColorMapping', False)
        # Getting the type of 'self' (line 65)
        self_34283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 29), 'self', False)
        # Processing the call keyword arguments (line 65)
        kwargs_34284 = {}
        # Getting the type of 'super' (line 65)
        super_34281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 8), 'super', False)
        # Calling super(args, kwargs) (line 65)
        super_call_result_34285 = invoke(stypy.reporting.localization.Localization(__file__, 65, 8), super_34281, *[_ColorMapping_34282, self_34283], **kwargs_34284)
        
        # Obtaining the member '__init__' of a type (line 65)
        init___34286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 65, 8), super_call_result_34285, '__init__')
        # Calling __init__(args, kwargs) (line 65)
        init___call_result_34289 = invoke(stypy.reporting.localization.Localization(__file__, 65, 8), init___34286, *[mapping_34287], **kwargs_34288)
        
        
        # Assigning a Dict to a Attribute (line 66):
        
        # Assigning a Dict to a Attribute (line 66):
        
        # Assigning a Dict to a Attribute (line 66):
        
        # Obtaining an instance of the builtin type 'dict' (line 66)
        dict_34290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 66, 21), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 66)
        
        # Getting the type of 'self' (line 66)
        self_34291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 8), 'self')
        # Setting the type of the member 'cache' of a type (line 66)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 66, 8), self_34291, 'cache', dict_34290)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __setitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setitem__'
        module_type_store = module_type_store.open_function_context('__setitem__', 68, 4, False)
        # Assigning a type to the variable 'self' (line 69)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ColorMapping.__setitem__.__dict__.__setitem__('stypy_localization', localization)
        _ColorMapping.__setitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ColorMapping.__setitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ColorMapping.__setitem__.__dict__.__setitem__('stypy_function_name', '_ColorMapping.__setitem__')
        _ColorMapping.__setitem__.__dict__.__setitem__('stypy_param_names_list', ['key', 'value'])
        _ColorMapping.__setitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ColorMapping.__setitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ColorMapping.__setitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ColorMapping.__setitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ColorMapping.__setitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ColorMapping.__setitem__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ColorMapping.__setitem__', ['key', 'value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setitem__', localization, ['key', 'value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setitem__(...)' code ##################

        
        # Call to __setitem__(...): (line 69)
        # Processing the call arguments (line 69)
        # Getting the type of 'key' (line 69)
        key_34298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 47), 'key', False)
        # Getting the type of 'value' (line 69)
        value_34299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 52), 'value', False)
        # Processing the call keyword arguments (line 69)
        kwargs_34300 = {}
        
        # Call to super(...): (line 69)
        # Processing the call arguments (line 69)
        # Getting the type of '_ColorMapping' (line 69)
        _ColorMapping_34293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 14), '_ColorMapping', False)
        # Getting the type of 'self' (line 69)
        self_34294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 29), 'self', False)
        # Processing the call keyword arguments (line 69)
        kwargs_34295 = {}
        # Getting the type of 'super' (line 69)
        super_34292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 8), 'super', False)
        # Calling super(args, kwargs) (line 69)
        super_call_result_34296 = invoke(stypy.reporting.localization.Localization(__file__, 69, 8), super_34292, *[_ColorMapping_34293, self_34294], **kwargs_34295)
        
        # Obtaining the member '__setitem__' of a type (line 69)
        setitem___34297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 69, 8), super_call_result_34296, '__setitem__')
        # Calling __setitem__(args, kwargs) (line 69)
        setitem___call_result_34301 = invoke(stypy.reporting.localization.Localization(__file__, 69, 8), setitem___34297, *[key_34298, value_34299], **kwargs_34300)
        
        
        # Call to clear(...): (line 70)
        # Processing the call keyword arguments (line 70)
        kwargs_34305 = {}
        # Getting the type of 'self' (line 70)
        self_34302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 8), 'self', False)
        # Obtaining the member 'cache' of a type (line 70)
        cache_34303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 70, 8), self_34302, 'cache')
        # Obtaining the member 'clear' of a type (line 70)
        clear_34304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 70, 8), cache_34303, 'clear')
        # Calling clear(args, kwargs) (line 70)
        clear_call_result_34306 = invoke(stypy.reporting.localization.Localization(__file__, 70, 8), clear_34304, *[], **kwargs_34305)
        
        
        # ################# End of '__setitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 68)
        stypy_return_type_34307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_34307)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setitem__'
        return stypy_return_type_34307


    @norecursion
    def __delitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__delitem__'
        module_type_store = module_type_store.open_function_context('__delitem__', 72, 4, False)
        # Assigning a type to the variable 'self' (line 73)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 73, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ColorMapping.__delitem__.__dict__.__setitem__('stypy_localization', localization)
        _ColorMapping.__delitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ColorMapping.__delitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ColorMapping.__delitem__.__dict__.__setitem__('stypy_function_name', '_ColorMapping.__delitem__')
        _ColorMapping.__delitem__.__dict__.__setitem__('stypy_param_names_list', ['key'])
        _ColorMapping.__delitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ColorMapping.__delitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ColorMapping.__delitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ColorMapping.__delitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ColorMapping.__delitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ColorMapping.__delitem__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ColorMapping.__delitem__', ['key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__delitem__', localization, ['key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__delitem__(...)' code ##################

        
        # Call to __delitem__(...): (line 73)
        # Processing the call arguments (line 73)
        # Getting the type of 'key' (line 73)
        key_34314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 47), 'key', False)
        # Processing the call keyword arguments (line 73)
        kwargs_34315 = {}
        
        # Call to super(...): (line 73)
        # Processing the call arguments (line 73)
        # Getting the type of '_ColorMapping' (line 73)
        _ColorMapping_34309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 14), '_ColorMapping', False)
        # Getting the type of 'self' (line 73)
        self_34310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 29), 'self', False)
        # Processing the call keyword arguments (line 73)
        kwargs_34311 = {}
        # Getting the type of 'super' (line 73)
        super_34308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 8), 'super', False)
        # Calling super(args, kwargs) (line 73)
        super_call_result_34312 = invoke(stypy.reporting.localization.Localization(__file__, 73, 8), super_34308, *[_ColorMapping_34309, self_34310], **kwargs_34311)
        
        # Obtaining the member '__delitem__' of a type (line 73)
        delitem___34313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 73, 8), super_call_result_34312, '__delitem__')
        # Calling __delitem__(args, kwargs) (line 73)
        delitem___call_result_34316 = invoke(stypy.reporting.localization.Localization(__file__, 73, 8), delitem___34313, *[key_34314], **kwargs_34315)
        
        
        # Call to clear(...): (line 74)
        # Processing the call keyword arguments (line 74)
        kwargs_34320 = {}
        # Getting the type of 'self' (line 74)
        self_34317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 8), 'self', False)
        # Obtaining the member 'cache' of a type (line 74)
        cache_34318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 74, 8), self_34317, 'cache')
        # Obtaining the member 'clear' of a type (line 74)
        clear_34319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 74, 8), cache_34318, 'clear')
        # Calling clear(args, kwargs) (line 74)
        clear_call_result_34321 = invoke(stypy.reporting.localization.Localization(__file__, 74, 8), clear_34319, *[], **kwargs_34320)
        
        
        # ################# End of '__delitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__delitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 72)
        stypy_return_type_34322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_34322)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__delitem__'
        return stypy_return_type_34322


# Assigning a type to the variable '_ColorMapping' (line 63)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 63, 0), '_ColorMapping', _ColorMapping)

# Assigning a Dict to a Name (line 77):

# Assigning a Dict to a Name (line 77):

# Assigning a Dict to a Name (line 77):

# Obtaining an instance of the builtin type 'dict' (line 77)
dict_34323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 19), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 77)

# Assigning a type to the variable '_colors_full_map' (line 77)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 0), '_colors_full_map', dict_34323)

# Call to update(...): (line 79)
# Processing the call arguments (line 79)
# Getting the type of 'XKCD_COLORS' (line 79)
XKCD_COLORS_34326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 24), 'XKCD_COLORS', False)
# Processing the call keyword arguments (line 79)
kwargs_34327 = {}
# Getting the type of '_colors_full_map' (line 79)
_colors_full_map_34324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 0), '_colors_full_map', False)
# Obtaining the member 'update' of a type (line 79)
update_34325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 79, 0), _colors_full_map_34324, 'update')
# Calling update(args, kwargs) (line 79)
update_call_result_34328 = invoke(stypy.reporting.localization.Localization(__file__, 79, 0), update_34325, *[XKCD_COLORS_34326], **kwargs_34327)


# Call to update(...): (line 80)
# Processing the call arguments (line 80)
# Calculating dict comprehension
module_type_store = module_type_store.open_function_context('dict comprehension expression', 80, 25, True)
# Calculating comprehension expression

# Call to items(...): (line 81)
# Processing the call keyword arguments (line 81)
kwargs_34343 = {}
# Getting the type of 'XKCD_COLORS' (line 81)
XKCD_COLORS_34341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 37), 'XKCD_COLORS', False)
# Obtaining the member 'items' of a type (line 81)
items_34342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 81, 37), XKCD_COLORS_34341, 'items')
# Calling items(args, kwargs) (line 81)
items_call_result_34344 = invoke(stypy.reporting.localization.Localization(__file__, 81, 37), items_34342, *[], **kwargs_34343)

comprehension_34345 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 80, 25), items_call_result_34344)
# Assigning a type to the variable 'k' (line 80)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 25), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 80, 25), comprehension_34345))
# Assigning a type to the variable 'v' (line 80)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 25), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 80, 25), comprehension_34345))

unicode_34338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 82, 28), 'unicode', u'grey')
# Getting the type of 'k' (line 82)
k_34339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 38), 'k', False)
# Applying the binary operator 'in' (line 82)
result_contains_34340 = python_operator(stypy.reporting.localization.Localization(__file__, 82, 28), 'in', unicode_34338, k_34339)


# Call to replace(...): (line 80)
# Processing the call arguments (line 80)
unicode_34333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 80, 35), 'unicode', u'grey')
unicode_34334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 80, 43), 'unicode', u'gray')
# Processing the call keyword arguments (line 80)
kwargs_34335 = {}
# Getting the type of 'k' (line 80)
k_34331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 25), 'k', False)
# Obtaining the member 'replace' of a type (line 80)
replace_34332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 80, 25), k_34331, 'replace')
# Calling replace(args, kwargs) (line 80)
replace_call_result_34336 = invoke(stypy.reporting.localization.Localization(__file__, 80, 25), replace_34332, *[unicode_34333, unicode_34334], **kwargs_34335)

# Getting the type of 'v' (line 80)
v_34337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 52), 'v', False)
dict_34346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 80, 25), 'dict')
# Destroy the current context
module_type_store = module_type_store.close_function_context()
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 80, 25), dict_34346, (replace_call_result_34336, v_34337))
# Processing the call keyword arguments (line 80)
kwargs_34347 = {}
# Getting the type of '_colors_full_map' (line 80)
_colors_full_map_34329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 0), '_colors_full_map', False)
# Obtaining the member 'update' of a type (line 80)
update_34330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 80, 0), _colors_full_map_34329, 'update')
# Calling update(args, kwargs) (line 80)
update_call_result_34348 = invoke(stypy.reporting.localization.Localization(__file__, 80, 0), update_34330, *[dict_34346], **kwargs_34347)


# Call to update(...): (line 83)
# Processing the call arguments (line 83)
# Getting the type of 'CSS4_COLORS' (line 83)
CSS4_COLORS_34351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 24), 'CSS4_COLORS', False)
# Processing the call keyword arguments (line 83)
kwargs_34352 = {}
# Getting the type of '_colors_full_map' (line 83)
_colors_full_map_34349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 0), '_colors_full_map', False)
# Obtaining the member 'update' of a type (line 83)
update_34350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 83, 0), _colors_full_map_34349, 'update')
# Calling update(args, kwargs) (line 83)
update_call_result_34353 = invoke(stypy.reporting.localization.Localization(__file__, 83, 0), update_34350, *[CSS4_COLORS_34351], **kwargs_34352)


# Call to update(...): (line 84)
# Processing the call arguments (line 84)
# Getting the type of 'TABLEAU_COLORS' (line 84)
TABLEAU_COLORS_34356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 24), 'TABLEAU_COLORS', False)
# Processing the call keyword arguments (line 84)
kwargs_34357 = {}
# Getting the type of '_colors_full_map' (line 84)
_colors_full_map_34354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 0), '_colors_full_map', False)
# Obtaining the member 'update' of a type (line 84)
update_34355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 84, 0), _colors_full_map_34354, 'update')
# Calling update(args, kwargs) (line 84)
update_call_result_34358 = invoke(stypy.reporting.localization.Localization(__file__, 84, 0), update_34355, *[TABLEAU_COLORS_34356], **kwargs_34357)


# Call to update(...): (line 85)
# Processing the call arguments (line 85)
# Calculating dict comprehension
module_type_store = module_type_store.open_function_context('dict comprehension expression', 85, 25, True)
# Calculating comprehension expression

# Call to items(...): (line 86)
# Processing the call keyword arguments (line 86)
kwargs_34373 = {}
# Getting the type of 'TABLEAU_COLORS' (line 86)
TABLEAU_COLORS_34371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 37), 'TABLEAU_COLORS', False)
# Obtaining the member 'items' of a type (line 86)
items_34372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 86, 37), TABLEAU_COLORS_34371, 'items')
# Calling items(args, kwargs) (line 86)
items_call_result_34374 = invoke(stypy.reporting.localization.Localization(__file__, 86, 37), items_34372, *[], **kwargs_34373)

comprehension_34375 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 25), items_call_result_34374)
# Assigning a type to the variable 'k' (line 85)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 25), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 25), comprehension_34375))
# Assigning a type to the variable 'v' (line 85)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 25), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 25), comprehension_34375))

unicode_34368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 28), 'unicode', u'gray')
# Getting the type of 'k' (line 87)
k_34369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 38), 'k', False)
# Applying the binary operator 'in' (line 87)
result_contains_34370 = python_operator(stypy.reporting.localization.Localization(__file__, 87, 28), 'in', unicode_34368, k_34369)


# Call to replace(...): (line 85)
# Processing the call arguments (line 85)
unicode_34363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 35), 'unicode', u'gray')
unicode_34364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 43), 'unicode', u'grey')
# Processing the call keyword arguments (line 85)
kwargs_34365 = {}
# Getting the type of 'k' (line 85)
k_34361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 25), 'k', False)
# Obtaining the member 'replace' of a type (line 85)
replace_34362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 85, 25), k_34361, 'replace')
# Calling replace(args, kwargs) (line 85)
replace_call_result_34366 = invoke(stypy.reporting.localization.Localization(__file__, 85, 25), replace_34362, *[unicode_34363, unicode_34364], **kwargs_34365)

# Getting the type of 'v' (line 85)
v_34367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 52), 'v', False)
dict_34376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 25), 'dict')
# Destroy the current context
module_type_store = module_type_store.close_function_context()
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 25), dict_34376, (replace_call_result_34366, v_34367))
# Processing the call keyword arguments (line 85)
kwargs_34377 = {}
# Getting the type of '_colors_full_map' (line 85)
_colors_full_map_34359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 0), '_colors_full_map', False)
# Obtaining the member 'update' of a type (line 85)
update_34360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 85, 0), _colors_full_map_34359, 'update')
# Calling update(args, kwargs) (line 85)
update_call_result_34378 = invoke(stypy.reporting.localization.Localization(__file__, 85, 0), update_34360, *[dict_34376], **kwargs_34377)


# Call to update(...): (line 88)
# Processing the call arguments (line 88)
# Getting the type of 'BASE_COLORS' (line 88)
BASE_COLORS_34381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 24), 'BASE_COLORS', False)
# Processing the call keyword arguments (line 88)
kwargs_34382 = {}
# Getting the type of '_colors_full_map' (line 88)
_colors_full_map_34379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 0), '_colors_full_map', False)
# Obtaining the member 'update' of a type (line 88)
update_34380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 88, 0), _colors_full_map_34379, 'update')
# Calling update(args, kwargs) (line 88)
update_call_result_34383 = invoke(stypy.reporting.localization.Localization(__file__, 88, 0), update_34380, *[BASE_COLORS_34381], **kwargs_34382)


# Assigning a Call to a Name (line 89):

# Assigning a Call to a Name (line 89):

# Assigning a Call to a Name (line 89):

# Call to _ColorMapping(...): (line 89)
# Processing the call arguments (line 89)
# Getting the type of '_colors_full_map' (line 89)
_colors_full_map_34385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 33), '_colors_full_map', False)
# Processing the call keyword arguments (line 89)
kwargs_34386 = {}
# Getting the type of '_ColorMapping' (line 89)
_ColorMapping_34384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 19), '_ColorMapping', False)
# Calling _ColorMapping(args, kwargs) (line 89)
_ColorMapping_call_result_34387 = invoke(stypy.reporting.localization.Localization(__file__, 89, 19), _ColorMapping_34384, *[_colors_full_map_34385], **kwargs_34386)

# Assigning a type to the variable '_colors_full_map' (line 89)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 0), '_colors_full_map', _ColorMapping_call_result_34387)

@norecursion
def get_named_colors_mapping(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_named_colors_mapping'
    module_type_store = module_type_store.open_function_context('get_named_colors_mapping', 92, 0, False)
    
    # Passed parameters checking function
    get_named_colors_mapping.stypy_localization = localization
    get_named_colors_mapping.stypy_type_of_self = None
    get_named_colors_mapping.stypy_type_store = module_type_store
    get_named_colors_mapping.stypy_function_name = 'get_named_colors_mapping'
    get_named_colors_mapping.stypy_param_names_list = []
    get_named_colors_mapping.stypy_varargs_param_name = None
    get_named_colors_mapping.stypy_kwargs_param_name = None
    get_named_colors_mapping.stypy_call_defaults = defaults
    get_named_colors_mapping.stypy_call_varargs = varargs
    get_named_colors_mapping.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_named_colors_mapping', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_named_colors_mapping', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_named_colors_mapping(...)' code ##################

    unicode_34388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, (-1)), 'unicode', u'Return the global mapping of names to named colors.\n    ')
    # Getting the type of '_colors_full_map' (line 95)
    _colors_full_map_34389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 11), '_colors_full_map')
    # Assigning a type to the variable 'stypy_return_type' (line 95)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 4), 'stypy_return_type', _colors_full_map_34389)
    
    # ################# End of 'get_named_colors_mapping(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_named_colors_mapping' in the type store
    # Getting the type of 'stypy_return_type' (line 92)
    stypy_return_type_34390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_34390)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_named_colors_mapping'
    return stypy_return_type_34390

# Assigning a type to the variable 'get_named_colors_mapping' (line 92)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 92, 0), 'get_named_colors_mapping', get_named_colors_mapping)

@norecursion
def _is_nth_color(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_is_nth_color'
    module_type_store = module_type_store.open_function_context('_is_nth_color', 98, 0, False)
    
    # Passed parameters checking function
    _is_nth_color.stypy_localization = localization
    _is_nth_color.stypy_type_of_self = None
    _is_nth_color.stypy_type_store = module_type_store
    _is_nth_color.stypy_function_name = '_is_nth_color'
    _is_nth_color.stypy_param_names_list = ['c']
    _is_nth_color.stypy_varargs_param_name = None
    _is_nth_color.stypy_kwargs_param_name = None
    _is_nth_color.stypy_call_defaults = defaults
    _is_nth_color.stypy_call_varargs = varargs
    _is_nth_color.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_is_nth_color', ['c'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_is_nth_color', localization, ['c'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_is_nth_color(...)' code ##################

    unicode_34391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, (-1)), 'unicode', u'Return whether `c` can be interpreted as an item in the color cycle.\n    ')
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 101)
    # Processing the call arguments (line 101)
    # Getting the type of 'c' (line 101)
    c_34393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 22), 'c', False)
    # Getting the type of 'six' (line 101)
    six_34394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 25), 'six', False)
    # Obtaining the member 'string_types' of a type (line 101)
    string_types_34395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 101, 25), six_34394, 'string_types')
    # Processing the call keyword arguments (line 101)
    kwargs_34396 = {}
    # Getting the type of 'isinstance' (line 101)
    isinstance_34392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 101)
    isinstance_call_result_34397 = invoke(stypy.reporting.localization.Localization(__file__, 101, 11), isinstance_34392, *[c_34393, string_types_34395], **kwargs_34396)
    
    
    # Call to match(...): (line 101)
    # Processing the call arguments (line 101)
    unicode_34400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 56), 'unicode', u'\\AC[0-9]\\Z')
    # Getting the type of 'c' (line 101)
    c_34401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 71), 'c', False)
    # Processing the call keyword arguments (line 101)
    kwargs_34402 = {}
    # Getting the type of 're' (line 101)
    re_34398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 47), 're', False)
    # Obtaining the member 'match' of a type (line 101)
    match_34399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 101, 47), re_34398, 'match')
    # Calling match(args, kwargs) (line 101)
    match_call_result_34403 = invoke(stypy.reporting.localization.Localization(__file__, 101, 47), match_34399, *[unicode_34400, c_34401], **kwargs_34402)
    
    # Applying the binary operator 'and' (line 101)
    result_and_keyword_34404 = python_operator(stypy.reporting.localization.Localization(__file__, 101, 11), 'and', isinstance_call_result_34397, match_call_result_34403)
    
    # Assigning a type to the variable 'stypy_return_type' (line 101)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 4), 'stypy_return_type', result_and_keyword_34404)
    
    # ################# End of '_is_nth_color(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_is_nth_color' in the type store
    # Getting the type of 'stypy_return_type' (line 98)
    stypy_return_type_34405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_34405)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_is_nth_color'
    return stypy_return_type_34405

# Assigning a type to the variable '_is_nth_color' (line 98)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 0), '_is_nth_color', _is_nth_color)

@norecursion
def is_color_like(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_color_like'
    module_type_store = module_type_store.open_function_context('is_color_like', 104, 0, False)
    
    # Passed parameters checking function
    is_color_like.stypy_localization = localization
    is_color_like.stypy_type_of_self = None
    is_color_like.stypy_type_store = module_type_store
    is_color_like.stypy_function_name = 'is_color_like'
    is_color_like.stypy_param_names_list = ['c']
    is_color_like.stypy_varargs_param_name = None
    is_color_like.stypy_kwargs_param_name = None
    is_color_like.stypy_call_defaults = defaults
    is_color_like.stypy_call_varargs = varargs
    is_color_like.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_color_like', ['c'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_color_like', localization, ['c'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_color_like(...)' code ##################

    unicode_34406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 106, (-1)), 'unicode', u'Return whether `c` can be interpreted as an RGB(A) color.\n    ')
    
    
    # Call to _is_nth_color(...): (line 109)
    # Processing the call arguments (line 109)
    # Getting the type of 'c' (line 109)
    c_34408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 21), 'c', False)
    # Processing the call keyword arguments (line 109)
    kwargs_34409 = {}
    # Getting the type of '_is_nth_color' (line 109)
    _is_nth_color_34407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 7), '_is_nth_color', False)
    # Calling _is_nth_color(args, kwargs) (line 109)
    _is_nth_color_call_result_34410 = invoke(stypy.reporting.localization.Localization(__file__, 109, 7), _is_nth_color_34407, *[c_34408], **kwargs_34409)
    
    # Testing the type of an if condition (line 109)
    if_condition_34411 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 109, 4), _is_nth_color_call_result_34410)
    # Assigning a type to the variable 'if_condition_34411' (line 109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 4), 'if_condition_34411', if_condition_34411)
    # SSA begins for if statement (line 109)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 110)
    True_34412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 15), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 110)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 110, 8), 'stypy_return_type', True_34412)
    # SSA join for if statement (line 109)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 111)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to to_rgba(...): (line 112)
    # Processing the call arguments (line 112)
    # Getting the type of 'c' (line 112)
    c_34414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 16), 'c', False)
    # Processing the call keyword arguments (line 112)
    kwargs_34415 = {}
    # Getting the type of 'to_rgba' (line 112)
    to_rgba_34413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 8), 'to_rgba', False)
    # Calling to_rgba(args, kwargs) (line 112)
    to_rgba_call_result_34416 = invoke(stypy.reporting.localization.Localization(__file__, 112, 8), to_rgba_34413, *[c_34414], **kwargs_34415)
    
    # SSA branch for the except part of a try statement (line 111)
    # SSA branch for the except 'ValueError' branch of a try statement (line 111)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 114)
    False_34417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 8), 'stypy_return_type', False_34417)
    # SSA branch for the else branch of a try statement (line 111)
    module_type_store.open_ssa_branch('except else')
    # Getting the type of 'True' (line 116)
    True_34418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 15), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 116)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 8), 'stypy_return_type', True_34418)
    # SSA join for try-except statement (line 111)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'is_color_like(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_color_like' in the type store
    # Getting the type of 'stypy_return_type' (line 104)
    stypy_return_type_34419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_34419)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_color_like'
    return stypy_return_type_34419

# Assigning a type to the variable 'is_color_like' (line 104)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 0), 'is_color_like', is_color_like)

@norecursion
def to_rgba(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 119)
    None_34420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 21), 'None')
    defaults = [None_34420]
    # Create a new context for function 'to_rgba'
    module_type_store = module_type_store.open_function_context('to_rgba', 119, 0, False)
    
    # Passed parameters checking function
    to_rgba.stypy_localization = localization
    to_rgba.stypy_type_of_self = None
    to_rgba.stypy_type_store = module_type_store
    to_rgba.stypy_function_name = 'to_rgba'
    to_rgba.stypy_param_names_list = ['c', 'alpha']
    to_rgba.stypy_varargs_param_name = None
    to_rgba.stypy_kwargs_param_name = None
    to_rgba.stypy_call_defaults = defaults
    to_rgba.stypy_call_varargs = varargs
    to_rgba.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'to_rgba', ['c', 'alpha'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'to_rgba', localization, ['c', 'alpha'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'to_rgba(...)' code ##################

    unicode_34421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, (-1)), 'unicode', u'Convert `c` to an RGBA color.\n\n    If `alpha` is not `None`, it forces the alpha value, except if `c` is\n    "none" (case-insensitive), which always maps to `(0, 0, 0, 0)`.\n    ')
    
    
    # Call to _is_nth_color(...): (line 126)
    # Processing the call arguments (line 126)
    # Getting the type of 'c' (line 126)
    c_34423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 21), 'c', False)
    # Processing the call keyword arguments (line 126)
    kwargs_34424 = {}
    # Getting the type of '_is_nth_color' (line 126)
    _is_nth_color_34422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 7), '_is_nth_color', False)
    # Calling _is_nth_color(args, kwargs) (line 126)
    _is_nth_color_call_result_34425 = invoke(stypy.reporting.localization.Localization(__file__, 126, 7), _is_nth_color_34422, *[c_34423], **kwargs_34424)
    
    # Testing the type of an if condition (line 126)
    if_condition_34426 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 126, 4), _is_nth_color_call_result_34425)
    # Assigning a type to the variable 'if_condition_34426' (line 126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 4), 'if_condition_34426', if_condition_34426)
    # SSA begins for if statement (line 126)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 127, 8))
    
    # 'from matplotlib import rcParams' statement (line 127)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_34427 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 127, 8), 'matplotlib')

    if (type(import_34427) is not StypyTypeError):

        if (import_34427 != 'pyd_module'):
            __import__(import_34427)
            sys_modules_34428 = sys.modules[import_34427]
            import_from_module(stypy.reporting.localization.Localization(__file__, 127, 8), 'matplotlib', sys_modules_34428.module_type_store, module_type_store, ['rcParams'])
            nest_module(stypy.reporting.localization.Localization(__file__, 127, 8), __file__, sys_modules_34428, sys_modules_34428.module_type_store, module_type_store)
        else:
            from matplotlib import rcParams

            import_from_module(stypy.reporting.localization.Localization(__file__, 127, 8), 'matplotlib', None, module_type_store, ['rcParams'], [rcParams])

    else:
        # Assigning a type to the variable 'matplotlib' (line 127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 8), 'matplotlib', import_34427)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Subscript to a Name (line 128):
    
    # Assigning a Subscript to a Name (line 128):
    
    # Assigning a Subscript to a Name (line 128):
    
    # Obtaining the type of the subscript
    unicode_34429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 128, 31), 'unicode', u'axes.prop_cycle')
    # Getting the type of 'rcParams' (line 128)
    rcParams_34430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 22), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 128)
    getitem___34431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 128, 22), rcParams_34430, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 128)
    subscript_call_result_34432 = invoke(stypy.reporting.localization.Localization(__file__, 128, 22), getitem___34431, unicode_34429)
    
    # Assigning a type to the variable 'prop_cycler' (line 128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 8), 'prop_cycler', subscript_call_result_34432)
    
    # Assigning a Call to a Name (line 129):
    
    # Assigning a Call to a Name (line 129):
    
    # Assigning a Call to a Name (line 129):
    
    # Call to get(...): (line 129)
    # Processing the call arguments (line 129)
    unicode_34438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 42), 'unicode', u'color')
    
    # Obtaining an instance of the builtin type 'list' (line 129)
    list_34439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 51), 'list')
    # Adding type elements to the builtin type 'list' instance (line 129)
    # Adding element type (line 129)
    unicode_34440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 52), 'unicode', u'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 129, 51), list_34439, unicode_34440)
    
    # Processing the call keyword arguments (line 129)
    kwargs_34441 = {}
    
    # Call to by_key(...): (line 129)
    # Processing the call keyword arguments (line 129)
    kwargs_34435 = {}
    # Getting the type of 'prop_cycler' (line 129)
    prop_cycler_34433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 17), 'prop_cycler', False)
    # Obtaining the member 'by_key' of a type (line 129)
    by_key_34434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 129, 17), prop_cycler_34433, 'by_key')
    # Calling by_key(args, kwargs) (line 129)
    by_key_call_result_34436 = invoke(stypy.reporting.localization.Localization(__file__, 129, 17), by_key_34434, *[], **kwargs_34435)
    
    # Obtaining the member 'get' of a type (line 129)
    get_34437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 129, 17), by_key_call_result_34436, 'get')
    # Calling get(args, kwargs) (line 129)
    get_call_result_34442 = invoke(stypy.reporting.localization.Localization(__file__, 129, 17), get_34437, *[unicode_34438, list_34439], **kwargs_34441)
    
    # Assigning a type to the variable 'colors' (line 129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 8), 'colors', get_call_result_34442)
    
    # Assigning a Subscript to a Name (line 130):
    
    # Assigning a Subscript to a Name (line 130):
    
    # Assigning a Subscript to a Name (line 130):
    
    # Obtaining the type of the subscript
    
    # Call to int(...): (line 130)
    # Processing the call arguments (line 130)
    
    # Obtaining the type of the subscript
    int_34444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 25), 'int')
    # Getting the type of 'c' (line 130)
    c_34445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 23), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 130)
    getitem___34446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 23), c_34445, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 130)
    subscript_call_result_34447 = invoke(stypy.reporting.localization.Localization(__file__, 130, 23), getitem___34446, int_34444)
    
    # Processing the call keyword arguments (line 130)
    kwargs_34448 = {}
    # Getting the type of 'int' (line 130)
    int_34443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 19), 'int', False)
    # Calling int(args, kwargs) (line 130)
    int_call_result_34449 = invoke(stypy.reporting.localization.Localization(__file__, 130, 19), int_34443, *[subscript_call_result_34447], **kwargs_34448)
    
    
    # Call to len(...): (line 130)
    # Processing the call arguments (line 130)
    # Getting the type of 'colors' (line 130)
    colors_34451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 35), 'colors', False)
    # Processing the call keyword arguments (line 130)
    kwargs_34452 = {}
    # Getting the type of 'len' (line 130)
    len_34450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 31), 'len', False)
    # Calling len(args, kwargs) (line 130)
    len_call_result_34453 = invoke(stypy.reporting.localization.Localization(__file__, 130, 31), len_34450, *[colors_34451], **kwargs_34452)
    
    # Applying the binary operator '%' (line 130)
    result_mod_34454 = python_operator(stypy.reporting.localization.Localization(__file__, 130, 19), '%', int_call_result_34449, len_call_result_34453)
    
    # Getting the type of 'colors' (line 130)
    colors_34455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 12), 'colors')
    # Obtaining the member '__getitem__' of a type (line 130)
    getitem___34456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 12), colors_34455, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 130)
    subscript_call_result_34457 = invoke(stypy.reporting.localization.Localization(__file__, 130, 12), getitem___34456, result_mod_34454)
    
    # Assigning a type to the variable 'c' (line 130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'c', subscript_call_result_34457)
    # SSA join for if statement (line 126)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 131)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Subscript to a Name (line 132):
    
    # Assigning a Subscript to a Name (line 132):
    
    # Assigning a Subscript to a Name (line 132):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 132)
    tuple_34458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 132, 38), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 132)
    # Adding element type (line 132)
    # Getting the type of 'c' (line 132)
    c_34459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 38), 'c')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 132, 38), tuple_34458, c_34459)
    # Adding element type (line 132)
    # Getting the type of 'alpha' (line 132)
    alpha_34460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 41), 'alpha')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 132, 38), tuple_34458, alpha_34460)
    
    # Getting the type of '_colors_full_map' (line 132)
    _colors_full_map_34461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 15), '_colors_full_map')
    # Obtaining the member 'cache' of a type (line 132)
    cache_34462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 15), _colors_full_map_34461, 'cache')
    # Obtaining the member '__getitem__' of a type (line 132)
    getitem___34463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 15), cache_34462, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 132)
    subscript_call_result_34464 = invoke(stypy.reporting.localization.Localization(__file__, 132, 15), getitem___34463, tuple_34458)
    
    # Assigning a type to the variable 'rgba' (line 132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 8), 'rgba', subscript_call_result_34464)
    # SSA branch for the except part of a try statement (line 131)
    # SSA branch for the except 'Tuple' branch of a try statement (line 131)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 134):
    
    # Assigning a Call to a Name (line 134):
    
    # Assigning a Call to a Name (line 134):
    
    # Call to _to_rgba_no_colorcycle(...): (line 134)
    # Processing the call arguments (line 134)
    # Getting the type of 'c' (line 134)
    c_34466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 38), 'c', False)
    # Getting the type of 'alpha' (line 134)
    alpha_34467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 41), 'alpha', False)
    # Processing the call keyword arguments (line 134)
    kwargs_34468 = {}
    # Getting the type of '_to_rgba_no_colorcycle' (line 134)
    _to_rgba_no_colorcycle_34465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 15), '_to_rgba_no_colorcycle', False)
    # Calling _to_rgba_no_colorcycle(args, kwargs) (line 134)
    _to_rgba_no_colorcycle_call_result_34469 = invoke(stypy.reporting.localization.Localization(__file__, 134, 15), _to_rgba_no_colorcycle_34465, *[c_34466, alpha_34467], **kwargs_34468)
    
    # Assigning a type to the variable 'rgba' (line 134)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 8), 'rgba', _to_rgba_no_colorcycle_call_result_34469)
    
    
    # SSA begins for try-except statement (line 135)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Name to a Subscript (line 136):
    
    # Assigning a Name to a Subscript (line 136):
    
    # Assigning a Name to a Subscript (line 136):
    # Getting the type of 'rgba' (line 136)
    rgba_34470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 47), 'rgba')
    # Getting the type of '_colors_full_map' (line 136)
    _colors_full_map_34471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 12), '_colors_full_map')
    # Obtaining the member 'cache' of a type (line 136)
    cache_34472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 136, 12), _colors_full_map_34471, 'cache')
    
    # Obtaining an instance of the builtin type 'tuple' (line 136)
    tuple_34473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 136, 35), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 136)
    # Adding element type (line 136)
    # Getting the type of 'c' (line 136)
    c_34474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 35), 'c')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 136, 35), tuple_34473, c_34474)
    # Adding element type (line 136)
    # Getting the type of 'alpha' (line 136)
    alpha_34475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 38), 'alpha')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 136, 35), tuple_34473, alpha_34475)
    
    # Storing an element on a container (line 136)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 136, 12), cache_34472, (tuple_34473, rgba_34470))
    # SSA branch for the except part of a try statement (line 135)
    # SSA branch for the except 'TypeError' branch of a try statement (line 135)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 135)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for try-except statement (line 131)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'rgba' (line 139)
    rgba_34476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 11), 'rgba')
    # Assigning a type to the variable 'stypy_return_type' (line 139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 4), 'stypy_return_type', rgba_34476)
    
    # ################# End of 'to_rgba(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'to_rgba' in the type store
    # Getting the type of 'stypy_return_type' (line 119)
    stypy_return_type_34477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_34477)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'to_rgba'
    return stypy_return_type_34477

# Assigning a type to the variable 'to_rgba' (line 119)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 0), 'to_rgba', to_rgba)

@norecursion
def _to_rgba_no_colorcycle(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 142)
    None_34478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 36), 'None')
    defaults = [None_34478]
    # Create a new context for function '_to_rgba_no_colorcycle'
    module_type_store = module_type_store.open_function_context('_to_rgba_no_colorcycle', 142, 0, False)
    
    # Passed parameters checking function
    _to_rgba_no_colorcycle.stypy_localization = localization
    _to_rgba_no_colorcycle.stypy_type_of_self = None
    _to_rgba_no_colorcycle.stypy_type_store = module_type_store
    _to_rgba_no_colorcycle.stypy_function_name = '_to_rgba_no_colorcycle'
    _to_rgba_no_colorcycle.stypy_param_names_list = ['c', 'alpha']
    _to_rgba_no_colorcycle.stypy_varargs_param_name = None
    _to_rgba_no_colorcycle.stypy_kwargs_param_name = None
    _to_rgba_no_colorcycle.stypy_call_defaults = defaults
    _to_rgba_no_colorcycle.stypy_call_varargs = varargs
    _to_rgba_no_colorcycle.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_to_rgba_no_colorcycle', ['c', 'alpha'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_to_rgba_no_colorcycle', localization, ['c', 'alpha'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_to_rgba_no_colorcycle(...)' code ##################

    unicode_34479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, (-1)), 'unicode', u'Convert `c` to an RGBA color, with no support for color-cycle syntax.\n\n    If `alpha` is not `None`, it forces the alpha value, except if `c` is\n    "none" (case-insensitive), which always maps to `(0, 0, 0, 0)`.\n    ')
    
    # Assigning a Name to a Name (line 148):
    
    # Assigning a Name to a Name (line 148):
    
    # Assigning a Name to a Name (line 148):
    # Getting the type of 'c' (line 148)
    c_34480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 13), 'c')
    # Assigning a type to the variable 'orig_c' (line 148)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 4), 'orig_c', c_34480)
    
    
    # Call to isinstance(...): (line 149)
    # Processing the call arguments (line 149)
    # Getting the type of 'c' (line 149)
    c_34482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 18), 'c', False)
    # Getting the type of 'six' (line 149)
    six_34483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 21), 'six', False)
    # Obtaining the member 'string_types' of a type (line 149)
    string_types_34484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 149, 21), six_34483, 'string_types')
    # Processing the call keyword arguments (line 149)
    kwargs_34485 = {}
    # Getting the type of 'isinstance' (line 149)
    isinstance_34481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 149)
    isinstance_call_result_34486 = invoke(stypy.reporting.localization.Localization(__file__, 149, 7), isinstance_34481, *[c_34482, string_types_34484], **kwargs_34485)
    
    # Testing the type of an if condition (line 149)
    if_condition_34487 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 149, 4), isinstance_call_result_34486)
    # Assigning a type to the variable 'if_condition_34487' (line 149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 149, 4), 'if_condition_34487', if_condition_34487)
    # SSA begins for if statement (line 149)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to lower(...): (line 150)
    # Processing the call keyword arguments (line 150)
    kwargs_34490 = {}
    # Getting the type of 'c' (line 150)
    c_34488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 11), 'c', False)
    # Obtaining the member 'lower' of a type (line 150)
    lower_34489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 11), c_34488, 'lower')
    # Calling lower(args, kwargs) (line 150)
    lower_call_result_34491 = invoke(stypy.reporting.localization.Localization(__file__, 150, 11), lower_34489, *[], **kwargs_34490)
    
    unicode_34492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 24), 'unicode', u'none')
    # Applying the binary operator '==' (line 150)
    result_eq_34493 = python_operator(stypy.reporting.localization.Localization(__file__, 150, 11), '==', lower_call_result_34491, unicode_34492)
    
    # Testing the type of an if condition (line 150)
    if_condition_34494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 150, 8), result_eq_34493)
    # Assigning a type to the variable 'if_condition_34494' (line 150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 8), 'if_condition_34494', if_condition_34494)
    # SSA begins for if statement (line 150)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 151)
    tuple_34495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 151)
    # Adding element type (line 151)
    float_34496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 20), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 151, 20), tuple_34495, float_34496)
    # Adding element type (line 151)
    float_34497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 24), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 151, 20), tuple_34495, float_34497)
    # Adding element type (line 151)
    float_34498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 28), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 151, 20), tuple_34495, float_34498)
    # Adding element type (line 151)
    float_34499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 32), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 151, 20), tuple_34495, float_34499)
    
    # Assigning a type to the variable 'stypy_return_type' (line 151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 151, 12), 'stypy_return_type', tuple_34495)
    # SSA join for if statement (line 150)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 153)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Subscript to a Name (line 155):
    
    # Assigning a Subscript to a Name (line 155):
    
    # Assigning a Subscript to a Name (line 155):
    
    # Obtaining the type of the subscript
    
    # Call to lower(...): (line 155)
    # Processing the call keyword arguments (line 155)
    kwargs_34502 = {}
    # Getting the type of 'c' (line 155)
    c_34500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 33), 'c', False)
    # Obtaining the member 'lower' of a type (line 155)
    lower_34501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 33), c_34500, 'lower')
    # Calling lower(args, kwargs) (line 155)
    lower_call_result_34503 = invoke(stypy.reporting.localization.Localization(__file__, 155, 33), lower_34501, *[], **kwargs_34502)
    
    # Getting the type of '_colors_full_map' (line 155)
    _colors_full_map_34504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 16), '_colors_full_map')
    # Obtaining the member '__getitem__' of a type (line 155)
    getitem___34505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 16), _colors_full_map_34504, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 155)
    subscript_call_result_34506 = invoke(stypy.reporting.localization.Localization(__file__, 155, 16), getitem___34505, lower_call_result_34503)
    
    # Assigning a type to the variable 'c' (line 155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 12), 'c', subscript_call_result_34506)
    # SSA branch for the except part of a try statement (line 153)
    # SSA branch for the except 'KeyError' branch of a try statement (line 153)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 153)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 149)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isinstance(...): (line 158)
    # Processing the call arguments (line 158)
    # Getting the type of 'c' (line 158)
    c_34508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 18), 'c', False)
    # Getting the type of 'six' (line 158)
    six_34509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 21), 'six', False)
    # Obtaining the member 'string_types' of a type (line 158)
    string_types_34510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 21), six_34509, 'string_types')
    # Processing the call keyword arguments (line 158)
    kwargs_34511 = {}
    # Getting the type of 'isinstance' (line 158)
    isinstance_34507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 158)
    isinstance_call_result_34512 = invoke(stypy.reporting.localization.Localization(__file__, 158, 7), isinstance_34507, *[c_34508, string_types_34510], **kwargs_34511)
    
    # Testing the type of an if condition (line 158)
    if_condition_34513 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 158, 4), isinstance_call_result_34512)
    # Assigning a type to the variable 'if_condition_34513' (line 158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 4), 'if_condition_34513', if_condition_34513)
    # SSA begins for if statement (line 158)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 160):
    
    # Assigning a Call to a Name (line 160):
    
    # Assigning a Call to a Name (line 160):
    
    # Call to match(...): (line 160)
    # Processing the call arguments (line 160)
    unicode_34516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 25), 'unicode', u'\\A#[a-fA-F0-9]{6}\\Z')
    # Getting the type of 'c' (line 160)
    c_34517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 49), 'c', False)
    # Processing the call keyword arguments (line 160)
    kwargs_34518 = {}
    # Getting the type of 're' (line 160)
    re_34514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 16), 're', False)
    # Obtaining the member 'match' of a type (line 160)
    match_34515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 160, 16), re_34514, 'match')
    # Calling match(args, kwargs) (line 160)
    match_call_result_34519 = invoke(stypy.reporting.localization.Localization(__file__, 160, 16), match_34515, *[unicode_34516, c_34517], **kwargs_34518)
    
    # Assigning a type to the variable 'match' (line 160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 8), 'match', match_call_result_34519)
    
    # Getting the type of 'match' (line 161)
    match_34520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 11), 'match')
    # Testing the type of an if condition (line 161)
    if_condition_34521 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 161, 8), match_34520)
    # Assigning a type to the variable 'if_condition_34521' (line 161)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'if_condition_34521', if_condition_34521)
    # SSA begins for if statement (line 161)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to tuple(...): (line 162)
    # Processing the call arguments (line 162)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 162, 26, True)
    # Calculating comprehension expression
    
    # Obtaining an instance of the builtin type 'list' (line 163)
    list_34530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 35), 'list')
    # Adding type elements to the builtin type 'list' instance (line 163)
    # Adding element type (line 163)
    
    # Obtaining the type of the subscript
    int_34531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 38), 'int')
    int_34532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 40), 'int')
    slice_34533 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 163, 36), int_34531, int_34532, None)
    # Getting the type of 'c' (line 163)
    c_34534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 36), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 163)
    getitem___34535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 163, 36), c_34534, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 163)
    subscript_call_result_34536 = invoke(stypy.reporting.localization.Localization(__file__, 163, 36), getitem___34535, slice_34533)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 35), list_34530, subscript_call_result_34536)
    # Adding element type (line 163)
    
    # Obtaining the type of the subscript
    int_34537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 46), 'int')
    int_34538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 48), 'int')
    slice_34539 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 163, 44), int_34537, int_34538, None)
    # Getting the type of 'c' (line 163)
    c_34540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 44), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 163)
    getitem___34541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 163, 44), c_34540, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 163)
    subscript_call_result_34542 = invoke(stypy.reporting.localization.Localization(__file__, 163, 44), getitem___34541, slice_34539)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 35), list_34530, subscript_call_result_34542)
    # Adding element type (line 163)
    
    # Obtaining the type of the subscript
    int_34543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 54), 'int')
    int_34544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 56), 'int')
    slice_34545 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 163, 52), int_34543, int_34544, None)
    # Getting the type of 'c' (line 163)
    c_34546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 52), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 163)
    getitem___34547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 163, 52), c_34546, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 163)
    subscript_call_result_34548 = invoke(stypy.reporting.localization.Localization(__file__, 163, 52), getitem___34547, slice_34545)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 35), list_34530, subscript_call_result_34548)
    
    comprehension_34549 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 162, 26), list_34530)
    # Assigning a type to the variable 'n' (line 162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 26), 'n', comprehension_34549)
    
    # Call to int(...): (line 162)
    # Processing the call arguments (line 162)
    # Getting the type of 'n' (line 162)
    n_34524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 30), 'n', False)
    int_34525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 33), 'int')
    # Processing the call keyword arguments (line 162)
    kwargs_34526 = {}
    # Getting the type of 'int' (line 162)
    int_34523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 26), 'int', False)
    # Calling int(args, kwargs) (line 162)
    int_call_result_34527 = invoke(stypy.reporting.localization.Localization(__file__, 162, 26), int_34523, *[n_34524, int_34525], **kwargs_34526)
    
    int_34528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 39), 'int')
    # Applying the binary operator 'div' (line 162)
    result_div_34529 = python_operator(stypy.reporting.localization.Localization(__file__, 162, 26), 'div', int_call_result_34527, int_34528)
    
    list_34550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 26), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 162, 26), list_34550, result_div_34529)
    # Processing the call keyword arguments (line 162)
    kwargs_34551 = {}
    # Getting the type of 'tuple' (line 162)
    tuple_34522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 20), 'tuple', False)
    # Calling tuple(args, kwargs) (line 162)
    tuple_call_result_34552 = invoke(stypy.reporting.localization.Localization(__file__, 162, 20), tuple_34522, *[list_34550], **kwargs_34551)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 164)
    tuple_34553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 164)
    # Adding element type (line 164)
    
    
    # Getting the type of 'alpha' (line 164)
    alpha_34554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 32), 'alpha')
    # Getting the type of 'None' (line 164)
    None_34555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 45), 'None')
    # Applying the binary operator 'isnot' (line 164)
    result_is_not_34556 = python_operator(stypy.reporting.localization.Localization(__file__, 164, 32), 'isnot', alpha_34554, None_34555)
    
    # Testing the type of an if expression (line 164)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 164, 23), result_is_not_34556)
    # SSA begins for if expression (line 164)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'alpha' (line 164)
    alpha_34557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 23), 'alpha')
    # SSA branch for the else part of an if expression (line 164)
    module_type_store.open_ssa_branch('if expression else')
    float_34558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 55), 'float')
    # SSA join for if expression (line 164)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_34559 = union_type.UnionType.add(alpha_34557, float_34558)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 164, 23), tuple_34553, if_exp_34559)
    
    # Applying the binary operator '+' (line 162)
    result_add_34560 = python_operator(stypy.reporting.localization.Localization(__file__, 162, 20), '+', tuple_call_result_34552, tuple_34553)
    
    # Assigning a type to the variable 'stypy_return_type' (line 162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 12), 'stypy_return_type', result_add_34560)
    # SSA join for if statement (line 161)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 166):
    
    # Assigning a Call to a Name (line 166):
    
    # Assigning a Call to a Name (line 166):
    
    # Call to match(...): (line 166)
    # Processing the call arguments (line 166)
    unicode_34563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 166, 25), 'unicode', u'\\A#[a-fA-F0-9]{8}\\Z')
    # Getting the type of 'c' (line 166)
    c_34564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 49), 'c', False)
    # Processing the call keyword arguments (line 166)
    kwargs_34565 = {}
    # Getting the type of 're' (line 166)
    re_34561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 16), 're', False)
    # Obtaining the member 'match' of a type (line 166)
    match_34562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 16), re_34561, 'match')
    # Calling match(args, kwargs) (line 166)
    match_call_result_34566 = invoke(stypy.reporting.localization.Localization(__file__, 166, 16), match_34562, *[unicode_34563, c_34564], **kwargs_34565)
    
    # Assigning a type to the variable 'match' (line 166)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 166, 8), 'match', match_call_result_34566)
    
    # Getting the type of 'match' (line 167)
    match_34567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 11), 'match')
    # Testing the type of an if condition (line 167)
    if_condition_34568 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 167, 8), match_34567)
    # Assigning a type to the variable 'if_condition_34568' (line 167)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'if_condition_34568', if_condition_34568)
    # SSA begins for if statement (line 167)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a ListComp to a Name (line 168):
    
    # Assigning a ListComp to a Name (line 168):
    
    # Assigning a ListComp to a Name (line 168):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Obtaining an instance of the builtin type 'list' (line 169)
    list_34576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 30), 'list')
    # Adding type elements to the builtin type 'list' instance (line 169)
    # Adding element type (line 169)
    
    # Obtaining the type of the subscript
    int_34577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 33), 'int')
    int_34578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 35), 'int')
    slice_34579 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 169, 31), int_34577, int_34578, None)
    # Getting the type of 'c' (line 169)
    c_34580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 31), 'c')
    # Obtaining the member '__getitem__' of a type (line 169)
    getitem___34581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 31), c_34580, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 169)
    subscript_call_result_34582 = invoke(stypy.reporting.localization.Localization(__file__, 169, 31), getitem___34581, slice_34579)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 169, 30), list_34576, subscript_call_result_34582)
    # Adding element type (line 169)
    
    # Obtaining the type of the subscript
    int_34583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 41), 'int')
    int_34584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 43), 'int')
    slice_34585 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 169, 39), int_34583, int_34584, None)
    # Getting the type of 'c' (line 169)
    c_34586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 39), 'c')
    # Obtaining the member '__getitem__' of a type (line 169)
    getitem___34587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 39), c_34586, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 169)
    subscript_call_result_34588 = invoke(stypy.reporting.localization.Localization(__file__, 169, 39), getitem___34587, slice_34585)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 169, 30), list_34576, subscript_call_result_34588)
    # Adding element type (line 169)
    
    # Obtaining the type of the subscript
    int_34589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 49), 'int')
    int_34590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 51), 'int')
    slice_34591 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 169, 47), int_34589, int_34590, None)
    # Getting the type of 'c' (line 169)
    c_34592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 47), 'c')
    # Obtaining the member '__getitem__' of a type (line 169)
    getitem___34593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 47), c_34592, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 169)
    subscript_call_result_34594 = invoke(stypy.reporting.localization.Localization(__file__, 169, 47), getitem___34593, slice_34591)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 169, 30), list_34576, subscript_call_result_34594)
    # Adding element type (line 169)
    
    # Obtaining the type of the subscript
    int_34595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 57), 'int')
    int_34596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 59), 'int')
    slice_34597 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 169, 55), int_34595, int_34596, None)
    # Getting the type of 'c' (line 169)
    c_34598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 55), 'c')
    # Obtaining the member '__getitem__' of a type (line 169)
    getitem___34599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 55), c_34598, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 169)
    subscript_call_result_34600 = invoke(stypy.reporting.localization.Localization(__file__, 169, 55), getitem___34599, slice_34597)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 169, 30), list_34576, subscript_call_result_34600)
    
    comprehension_34601 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 168, 21), list_34576)
    # Assigning a type to the variable 'n' (line 168)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 21), 'n', comprehension_34601)
    
    # Call to int(...): (line 168)
    # Processing the call arguments (line 168)
    # Getting the type of 'n' (line 168)
    n_34570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 25), 'n', False)
    int_34571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 168, 28), 'int')
    # Processing the call keyword arguments (line 168)
    kwargs_34572 = {}
    # Getting the type of 'int' (line 168)
    int_34569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 21), 'int', False)
    # Calling int(args, kwargs) (line 168)
    int_call_result_34573 = invoke(stypy.reporting.localization.Localization(__file__, 168, 21), int_34569, *[n_34570, int_34571], **kwargs_34572)
    
    int_34574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 168, 34), 'int')
    # Applying the binary operator 'div' (line 168)
    result_div_34575 = python_operator(stypy.reporting.localization.Localization(__file__, 168, 21), 'div', int_call_result_34573, int_34574)
    
    list_34602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 168, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 168, 21), list_34602, result_div_34575)
    # Assigning a type to the variable 'color' (line 168)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 12), 'color', list_34602)
    
    # Type idiom detected: calculating its left and rigth part (line 170)
    # Getting the type of 'alpha' (line 170)
    alpha_34603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 12), 'alpha')
    # Getting the type of 'None' (line 170)
    None_34604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 28), 'None')
    
    (may_be_34605, more_types_in_union_34606) = may_not_be_none(alpha_34603, None_34604)

    if may_be_34605:

        if more_types_in_union_34606:
            # Runtime conditional SSA (line 170)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Subscript (line 171):
        
        # Assigning a Name to a Subscript (line 171):
        
        # Assigning a Name to a Subscript (line 171):
        # Getting the type of 'alpha' (line 171)
        alpha_34607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 28), 'alpha')
        # Getting the type of 'color' (line 171)
        color_34608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 16), 'color')
        int_34609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 22), 'int')
        # Storing an element on a container (line 171)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 171, 16), color_34608, (int_34609, alpha_34607))

        if more_types_in_union_34606:
            # SSA join for if statement (line 170)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to tuple(...): (line 172)
    # Processing the call arguments (line 172)
    # Getting the type of 'color' (line 172)
    color_34611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 25), 'color', False)
    # Processing the call keyword arguments (line 172)
    kwargs_34612 = {}
    # Getting the type of 'tuple' (line 172)
    tuple_34610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 19), 'tuple', False)
    # Calling tuple(args, kwargs) (line 172)
    tuple_call_result_34613 = invoke(stypy.reporting.localization.Localization(__file__, 172, 19), tuple_34610, *[color_34611], **kwargs_34612)
    
    # Assigning a type to the variable 'stypy_return_type' (line 172)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 12), 'stypy_return_type', tuple_call_result_34613)
    # SSA join for if statement (line 167)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 174)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Obtaining an instance of the builtin type 'tuple' (line 175)
    tuple_34614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 175)
    # Adding element type (line 175)
    
    # Call to float(...): (line 175)
    # Processing the call arguments (line 175)
    # Getting the type of 'c' (line 175)
    c_34616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 26), 'c', False)
    # Processing the call keyword arguments (line 175)
    kwargs_34617 = {}
    # Getting the type of 'float' (line 175)
    float_34615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 20), 'float', False)
    # Calling float(args, kwargs) (line 175)
    float_call_result_34618 = invoke(stypy.reporting.localization.Localization(__file__, 175, 20), float_34615, *[c_34616], **kwargs_34617)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 175, 20), tuple_34614, float_call_result_34618)
    
    int_34619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, 33), 'int')
    # Applying the binary operator '*' (line 175)
    result_mul_34620 = python_operator(stypy.reporting.localization.Localization(__file__, 175, 19), '*', tuple_34614, int_34619)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 175)
    tuple_34621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, 38), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 175)
    # Adding element type (line 175)
    
    
    # Getting the type of 'alpha' (line 175)
    alpha_34622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 47), 'alpha')
    # Getting the type of 'None' (line 175)
    None_34623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 60), 'None')
    # Applying the binary operator 'isnot' (line 175)
    result_is_not_34624 = python_operator(stypy.reporting.localization.Localization(__file__, 175, 47), 'isnot', alpha_34622, None_34623)
    
    # Testing the type of an if expression (line 175)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 175, 38), result_is_not_34624)
    # SSA begins for if expression (line 175)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'alpha' (line 175)
    alpha_34625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 38), 'alpha')
    # SSA branch for the else part of an if expression (line 175)
    module_type_store.open_ssa_branch('if expression else')
    float_34626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, 70), 'float')
    # SSA join for if expression (line 175)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_34627 = union_type.UnionType.add(alpha_34625, float_34626)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 175, 38), tuple_34621, if_exp_34627)
    
    # Applying the binary operator '+' (line 175)
    result_add_34628 = python_operator(stypy.reporting.localization.Localization(__file__, 175, 19), '+', result_mul_34620, tuple_34621)
    
    # Assigning a type to the variable 'stypy_return_type' (line 175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 12), 'stypy_return_type', result_add_34628)
    # SSA branch for the except part of a try statement (line 174)
    # SSA branch for the except 'ValueError' branch of a try statement (line 174)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 174)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to ValueError(...): (line 178)
    # Processing the call arguments (line 178)
    
    # Call to format(...): (line 178)
    # Processing the call arguments (line 178)
    # Getting the type of 'orig_c' (line 178)
    orig_c_34632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 62), 'orig_c', False)
    # Processing the call keyword arguments (line 178)
    kwargs_34633 = {}
    unicode_34630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 25), 'unicode', u'Invalid RGBA argument: {!r}')
    # Obtaining the member 'format' of a type (line 178)
    format_34631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 25), unicode_34630, 'format')
    # Calling format(args, kwargs) (line 178)
    format_call_result_34634 = invoke(stypy.reporting.localization.Localization(__file__, 178, 25), format_34631, *[orig_c_34632], **kwargs_34633)
    
    # Processing the call keyword arguments (line 178)
    kwargs_34635 = {}
    # Getting the type of 'ValueError' (line 178)
    ValueError_34629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 178)
    ValueError_call_result_34636 = invoke(stypy.reporting.localization.Localization(__file__, 178, 14), ValueError_34629, *[format_call_result_34634], **kwargs_34635)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 178, 8), ValueError_call_result_34636, 'raise parameter', BaseException)
    # SSA join for if statement (line 158)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 180):
    
    # Assigning a Call to a Name (line 180):
    
    # Assigning a Call to a Name (line 180):
    
    # Call to array(...): (line 180)
    # Processing the call arguments (line 180)
    # Getting the type of 'c' (line 180)
    c_34639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 17), 'c', False)
    # Processing the call keyword arguments (line 180)
    kwargs_34640 = {}
    # Getting the type of 'np' (line 180)
    np_34637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 8), 'np', False)
    # Obtaining the member 'array' of a type (line 180)
    array_34638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 180, 8), np_34637, 'array')
    # Calling array(args, kwargs) (line 180)
    array_call_result_34641 = invoke(stypy.reporting.localization.Localization(__file__, 180, 8), array_34638, *[c_34639], **kwargs_34640)
    
    # Assigning a type to the variable 'c' (line 180)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 180, 4), 'c', array_call_result_34641)
    
    
    # Evaluating a boolean operation
    
    
    # Call to can_cast(...): (line 181)
    # Processing the call arguments (line 181)
    # Getting the type of 'c' (line 181)
    c_34644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 23), 'c', False)
    # Obtaining the member 'dtype' of a type (line 181)
    dtype_34645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 23), c_34644, 'dtype')
    # Getting the type of 'float' (line 181)
    float_34646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 32), 'float', False)
    unicode_34647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 39), 'unicode', u'same_kind')
    # Processing the call keyword arguments (line 181)
    kwargs_34648 = {}
    # Getting the type of 'np' (line 181)
    np_34642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 11), 'np', False)
    # Obtaining the member 'can_cast' of a type (line 181)
    can_cast_34643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 11), np_34642, 'can_cast')
    # Calling can_cast(args, kwargs) (line 181)
    can_cast_call_result_34649 = invoke(stypy.reporting.localization.Localization(__file__, 181, 11), can_cast_34643, *[dtype_34645, float_34646, unicode_34647], **kwargs_34648)
    
    # Applying the 'not' unary operator (line 181)
    result_not__34650 = python_operator(stypy.reporting.localization.Localization(__file__, 181, 7), 'not', can_cast_call_result_34649)
    
    
    # Getting the type of 'c' (line 181)
    c_34651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 55), 'c')
    # Obtaining the member 'ndim' of a type (line 181)
    ndim_34652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 55), c_34651, 'ndim')
    int_34653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 65), 'int')
    # Applying the binary operator '!=' (line 181)
    result_ne_34654 = python_operator(stypy.reporting.localization.Localization(__file__, 181, 55), '!=', ndim_34652, int_34653)
    
    # Applying the binary operator 'or' (line 181)
    result_or_keyword_34655 = python_operator(stypy.reporting.localization.Localization(__file__, 181, 7), 'or', result_not__34650, result_ne_34654)
    
    # Testing the type of an if condition (line 181)
    if_condition_34656 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 181, 4), result_or_keyword_34655)
    # Assigning a type to the variable 'if_condition_34656' (line 181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 4), 'if_condition_34656', if_condition_34656)
    # SSA begins for if statement (line 181)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 185)
    # Processing the call arguments (line 185)
    
    # Call to format(...): (line 185)
    # Processing the call arguments (line 185)
    # Getting the type of 'orig_c' (line 185)
    orig_c_34660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 62), 'orig_c', False)
    # Processing the call keyword arguments (line 185)
    kwargs_34661 = {}
    unicode_34658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 25), 'unicode', u'Invalid RGBA argument: {!r}')
    # Obtaining the member 'format' of a type (line 185)
    format_34659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 25), unicode_34658, 'format')
    # Calling format(args, kwargs) (line 185)
    format_call_result_34662 = invoke(stypy.reporting.localization.Localization(__file__, 185, 25), format_34659, *[orig_c_34660], **kwargs_34661)
    
    # Processing the call keyword arguments (line 185)
    kwargs_34663 = {}
    # Getting the type of 'ValueError' (line 185)
    ValueError_34657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 185)
    ValueError_call_result_34664 = invoke(stypy.reporting.localization.Localization(__file__, 185, 14), ValueError_34657, *[format_call_result_34662], **kwargs_34663)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 185, 8), ValueError_call_result_34664, 'raise parameter', BaseException)
    # SSA join for if statement (line 181)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 187):
    
    # Assigning a Call to a Name (line 187):
    
    # Assigning a Call to a Name (line 187):
    
    # Call to tuple(...): (line 187)
    # Processing the call arguments (line 187)
    
    # Call to astype(...): (line 187)
    # Processing the call arguments (line 187)
    # Getting the type of 'float' (line 187)
    float_34668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 23), 'float', False)
    # Processing the call keyword arguments (line 187)
    kwargs_34669 = {}
    # Getting the type of 'c' (line 187)
    c_34666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 14), 'c', False)
    # Obtaining the member 'astype' of a type (line 187)
    astype_34667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 14), c_34666, 'astype')
    # Calling astype(args, kwargs) (line 187)
    astype_call_result_34670 = invoke(stypy.reporting.localization.Localization(__file__, 187, 14), astype_34667, *[float_34668], **kwargs_34669)
    
    # Processing the call keyword arguments (line 187)
    kwargs_34671 = {}
    # Getting the type of 'tuple' (line 187)
    tuple_34665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 8), 'tuple', False)
    # Calling tuple(args, kwargs) (line 187)
    tuple_call_result_34672 = invoke(stypy.reporting.localization.Localization(__file__, 187, 8), tuple_34665, *[astype_call_result_34670], **kwargs_34671)
    
    # Assigning a type to the variable 'c' (line 187)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 4), 'c', tuple_call_result_34672)
    
    
    
    # Call to len(...): (line 188)
    # Processing the call arguments (line 188)
    # Getting the type of 'c' (line 188)
    c_34674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 11), 'c', False)
    # Processing the call keyword arguments (line 188)
    kwargs_34675 = {}
    # Getting the type of 'len' (line 188)
    len_34673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 7), 'len', False)
    # Calling len(args, kwargs) (line 188)
    len_call_result_34676 = invoke(stypy.reporting.localization.Localization(__file__, 188, 7), len_34673, *[c_34674], **kwargs_34675)
    
    
    # Obtaining an instance of the builtin type 'list' (line 188)
    list_34677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 188)
    # Adding element type (line 188)
    int_34678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 22), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 21), list_34677, int_34678)
    # Adding element type (line 188)
    int_34679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 21), list_34677, int_34679)
    
    # Applying the binary operator 'notin' (line 188)
    result_contains_34680 = python_operator(stypy.reporting.localization.Localization(__file__, 188, 7), 'notin', len_call_result_34676, list_34677)
    
    # Testing the type of an if condition (line 188)
    if_condition_34681 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 188, 4), result_contains_34680)
    # Assigning a type to the variable 'if_condition_34681' (line 188)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 4), 'if_condition_34681', if_condition_34681)
    # SSA begins for if statement (line 188)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 189)
    # Processing the call arguments (line 189)
    unicode_34683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 25), 'unicode', u'RGBA sequence should have length 3 or 4')
    # Processing the call keyword arguments (line 189)
    kwargs_34684 = {}
    # Getting the type of 'ValueError' (line 189)
    ValueError_34682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 189)
    ValueError_call_result_34685 = invoke(stypy.reporting.localization.Localization(__file__, 189, 14), ValueError_34682, *[unicode_34683], **kwargs_34684)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 189, 8), ValueError_call_result_34685, 'raise parameter', BaseException)
    # SSA join for if statement (line 188)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 190)
    # Processing the call arguments (line 190)
    # Getting the type of 'c' (line 190)
    c_34687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 11), 'c', False)
    # Processing the call keyword arguments (line 190)
    kwargs_34688 = {}
    # Getting the type of 'len' (line 190)
    len_34686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 7), 'len', False)
    # Calling len(args, kwargs) (line 190)
    len_call_result_34689 = invoke(stypy.reporting.localization.Localization(__file__, 190, 7), len_34686, *[c_34687], **kwargs_34688)
    
    int_34690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 17), 'int')
    # Applying the binary operator '==' (line 190)
    result_eq_34691 = python_operator(stypy.reporting.localization.Localization(__file__, 190, 7), '==', len_call_result_34689, int_34690)
    
    
    # Getting the type of 'alpha' (line 190)
    alpha_34692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 23), 'alpha')
    # Getting the type of 'None' (line 190)
    None_34693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 32), 'None')
    # Applying the binary operator 'is' (line 190)
    result_is__34694 = python_operator(stypy.reporting.localization.Localization(__file__, 190, 23), 'is', alpha_34692, None_34693)
    
    # Applying the binary operator 'and' (line 190)
    result_and_keyword_34695 = python_operator(stypy.reporting.localization.Localization(__file__, 190, 7), 'and', result_eq_34691, result_is__34694)
    
    # Testing the type of an if condition (line 190)
    if_condition_34696 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 190, 4), result_and_keyword_34695)
    # Assigning a type to the variable 'if_condition_34696' (line 190)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 4), 'if_condition_34696', if_condition_34696)
    # SSA begins for if statement (line 190)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 191):
    
    # Assigning a Num to a Name (line 191):
    
    # Assigning a Num to a Name (line 191):
    int_34697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 16), 'int')
    # Assigning a type to the variable 'alpha' (line 191)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 191, 8), 'alpha', int_34697)
    # SSA join for if statement (line 190)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 192)
    # Getting the type of 'alpha' (line 192)
    alpha_34698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 4), 'alpha')
    # Getting the type of 'None' (line 192)
    None_34699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 20), 'None')
    
    (may_be_34700, more_types_in_union_34701) = may_not_be_none(alpha_34698, None_34699)

    if may_be_34700:

        if more_types_in_union_34701:
            # Runtime conditional SSA (line 192)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 193):
        
        # Assigning a BinOp to a Name (line 193):
        
        # Assigning a BinOp to a Name (line 193):
        
        # Obtaining the type of the subscript
        int_34702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 15), 'int')
        slice_34703 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 193, 12), None, int_34702, None)
        # Getting the type of 'c' (line 193)
        c_34704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 12), 'c')
        # Obtaining the member '__getitem__' of a type (line 193)
        getitem___34705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 12), c_34704, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 193)
        subscript_call_result_34706 = invoke(stypy.reporting.localization.Localization(__file__, 193, 12), getitem___34705, slice_34703)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 193)
        tuple_34707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 193)
        # Adding element type (line 193)
        # Getting the type of 'alpha' (line 193)
        alpha_34708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 21), 'alpha')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 193, 21), tuple_34707, alpha_34708)
        
        # Applying the binary operator '+' (line 193)
        result_add_34709 = python_operator(stypy.reporting.localization.Localization(__file__, 193, 12), '+', subscript_call_result_34706, tuple_34707)
        
        # Assigning a type to the variable 'c' (line 193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 8), 'c', result_add_34709)

        if more_types_in_union_34701:
            # SSA join for if statement (line 192)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to any(...): (line 194)
    # Processing the call arguments (line 194)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 194, 11, True)
    # Calculating comprehension expression
    # Getting the type of 'c' (line 194)
    c_34718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 44), 'c', False)
    comprehension_34719 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 194, 11), c_34718)
    # Assigning a type to the variable 'elem' (line 194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 11), 'elem', comprehension_34719)
    
    # Evaluating a boolean operation
    
    # Getting the type of 'elem' (line 194)
    elem_34711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 11), 'elem', False)
    int_34712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 18), 'int')
    # Applying the binary operator '<' (line 194)
    result_lt_34713 = python_operator(stypy.reporting.localization.Localization(__file__, 194, 11), '<', elem_34711, int_34712)
    
    
    # Getting the type of 'elem' (line 194)
    elem_34714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 23), 'elem', False)
    int_34715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 30), 'int')
    # Applying the binary operator '>' (line 194)
    result_gt_34716 = python_operator(stypy.reporting.localization.Localization(__file__, 194, 23), '>', elem_34714, int_34715)
    
    # Applying the binary operator 'or' (line 194)
    result_or_keyword_34717 = python_operator(stypy.reporting.localization.Localization(__file__, 194, 11), 'or', result_lt_34713, result_gt_34716)
    
    list_34720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 11), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 194, 11), list_34720, result_or_keyword_34717)
    # Processing the call keyword arguments (line 194)
    kwargs_34721 = {}
    # Getting the type of 'any' (line 194)
    any_34710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 7), 'any', False)
    # Calling any(args, kwargs) (line 194)
    any_call_result_34722 = invoke(stypy.reporting.localization.Localization(__file__, 194, 7), any_34710, *[list_34720], **kwargs_34721)
    
    # Testing the type of an if condition (line 194)
    if_condition_34723 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 194, 4), any_call_result_34722)
    # Assigning a type to the variable 'if_condition_34723' (line 194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 4), 'if_condition_34723', if_condition_34723)
    # SSA begins for if statement (line 194)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 195)
    # Processing the call arguments (line 195)
    unicode_34725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 25), 'unicode', u'RGBA values should be within 0-1 range')
    # Processing the call keyword arguments (line 195)
    kwargs_34726 = {}
    # Getting the type of 'ValueError' (line 195)
    ValueError_34724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 195)
    ValueError_call_result_34727 = invoke(stypy.reporting.localization.Localization(__file__, 195, 14), ValueError_34724, *[unicode_34725], **kwargs_34726)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 195, 8), ValueError_call_result_34727, 'raise parameter', BaseException)
    # SSA join for if statement (line 194)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'c' (line 196)
    c_34728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 11), 'c')
    # Assigning a type to the variable 'stypy_return_type' (line 196)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 196, 4), 'stypy_return_type', c_34728)
    
    # ################# End of '_to_rgba_no_colorcycle(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_to_rgba_no_colorcycle' in the type store
    # Getting the type of 'stypy_return_type' (line 142)
    stypy_return_type_34729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_34729)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_to_rgba_no_colorcycle'
    return stypy_return_type_34729

# Assigning a type to the variable '_to_rgba_no_colorcycle' (line 142)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 0), '_to_rgba_no_colorcycle', _to_rgba_no_colorcycle)

@norecursion
def to_rgba_array(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 199)
    None_34730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 27), 'None')
    defaults = [None_34730]
    # Create a new context for function 'to_rgba_array'
    module_type_store = module_type_store.open_function_context('to_rgba_array', 199, 0, False)
    
    # Passed parameters checking function
    to_rgba_array.stypy_localization = localization
    to_rgba_array.stypy_type_of_self = None
    to_rgba_array.stypy_type_store = module_type_store
    to_rgba_array.stypy_function_name = 'to_rgba_array'
    to_rgba_array.stypy_param_names_list = ['c', 'alpha']
    to_rgba_array.stypy_varargs_param_name = None
    to_rgba_array.stypy_kwargs_param_name = None
    to_rgba_array.stypy_call_defaults = defaults
    to_rgba_array.stypy_call_varargs = varargs
    to_rgba_array.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'to_rgba_array', ['c', 'alpha'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'to_rgba_array', localization, ['c', 'alpha'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'to_rgba_array(...)' code ##################

    unicode_34731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, (-1)), 'unicode', u'Convert `c` to a (n, 4) array of RGBA colors.\n\n    If `alpha` is not `None`, it forces the alpha value.  If `c` is "none"\n    (case-insensitive) or an empty list, an empty array is returned.\n    ')
    
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 208)
    # Processing the call arguments (line 208)
    # Getting the type of 'c' (line 208)
    c_34733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 19), 'c', False)
    # Getting the type of 'np' (line 208)
    np_34734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 22), 'np', False)
    # Obtaining the member 'ndarray' of a type (line 208)
    ndarray_34735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 22), np_34734, 'ndarray')
    # Processing the call keyword arguments (line 208)
    kwargs_34736 = {}
    # Getting the type of 'isinstance' (line 208)
    isinstance_34732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 8), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 208)
    isinstance_call_result_34737 = invoke(stypy.reporting.localization.Localization(__file__, 208, 8), isinstance_34732, *[c_34733, ndarray_34735], **kwargs_34736)
    
    
    # Getting the type of 'c' (line 208)
    c_34738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 38), 'c')
    # Obtaining the member 'dtype' of a type (line 208)
    dtype_34739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 38), c_34738, 'dtype')
    # Obtaining the member 'kind' of a type (line 208)
    kind_34740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 38), dtype_34739, 'kind')
    unicode_34741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 208, 54), 'unicode', u'if')
    # Applying the binary operator 'in' (line 208)
    result_contains_34742 = python_operator(stypy.reporting.localization.Localization(__file__, 208, 38), 'in', kind_34740, unicode_34741)
    
    # Applying the binary operator 'and' (line 208)
    result_and_keyword_34743 = python_operator(stypy.reporting.localization.Localization(__file__, 208, 8), 'and', isinstance_call_result_34737, result_contains_34742)
    
    # Getting the type of 'c' (line 209)
    c_34744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 16), 'c')
    # Obtaining the member 'ndim' of a type (line 209)
    ndim_34745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 16), c_34744, 'ndim')
    int_34746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 209, 26), 'int')
    # Applying the binary operator '==' (line 209)
    result_eq_34747 = python_operator(stypy.reporting.localization.Localization(__file__, 209, 16), '==', ndim_34745, int_34746)
    
    # Applying the binary operator 'and' (line 208)
    result_and_keyword_34748 = python_operator(stypy.reporting.localization.Localization(__file__, 208, 8), 'and', result_and_keyword_34743, result_eq_34747)
    
    
    # Obtaining the type of the subscript
    int_34749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 209, 40), 'int')
    # Getting the type of 'c' (line 209)
    c_34750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 32), 'c')
    # Obtaining the member 'shape' of a type (line 209)
    shape_34751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 32), c_34750, 'shape')
    # Obtaining the member '__getitem__' of a type (line 209)
    getitem___34752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 32), shape_34751, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 209)
    subscript_call_result_34753 = invoke(stypy.reporting.localization.Localization(__file__, 209, 32), getitem___34752, int_34749)
    
    
    # Obtaining an instance of the builtin type 'list' (line 209)
    list_34754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 209, 46), 'list')
    # Adding type elements to the builtin type 'list' instance (line 209)
    # Adding element type (line 209)
    int_34755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 209, 47), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 209, 46), list_34754, int_34755)
    # Adding element type (line 209)
    int_34756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 209, 50), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 209, 46), list_34754, int_34756)
    
    # Applying the binary operator 'in' (line 209)
    result_contains_34757 = python_operator(stypy.reporting.localization.Localization(__file__, 209, 32), 'in', subscript_call_result_34753, list_34754)
    
    # Applying the binary operator 'and' (line 208)
    result_and_keyword_34758 = python_operator(stypy.reporting.localization.Localization(__file__, 208, 8), 'and', result_and_keyword_34748, result_contains_34757)
    
    # Testing the type of an if condition (line 208)
    if_condition_34759 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 208, 4), result_and_keyword_34758)
    # Assigning a type to the variable 'if_condition_34759' (line 208)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 4), 'if_condition_34759', if_condition_34759)
    # SSA begins for if statement (line 208)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Obtaining the type of the subscript
    int_34760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 19), 'int')
    # Getting the type of 'c' (line 210)
    c_34761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 11), 'c')
    # Obtaining the member 'shape' of a type (line 210)
    shape_34762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 11), c_34761, 'shape')
    # Obtaining the member '__getitem__' of a type (line 210)
    getitem___34763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 11), shape_34762, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 210)
    subscript_call_result_34764 = invoke(stypy.reporting.localization.Localization(__file__, 210, 11), getitem___34763, int_34760)
    
    int_34765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 25), 'int')
    # Applying the binary operator '==' (line 210)
    result_eq_34766 = python_operator(stypy.reporting.localization.Localization(__file__, 210, 11), '==', subscript_call_result_34764, int_34765)
    
    # Testing the type of an if condition (line 210)
    if_condition_34767 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 210, 8), result_eq_34766)
    # Assigning a type to the variable 'if_condition_34767' (line 210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 8), 'if_condition_34767', if_condition_34767)
    # SSA begins for if statement (line 210)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 211):
    
    # Assigning a Call to a Name (line 211):
    
    # Assigning a Call to a Name (line 211):
    
    # Call to column_stack(...): (line 211)
    # Processing the call arguments (line 211)
    
    # Obtaining an instance of the builtin type 'list' (line 211)
    list_34770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 37), 'list')
    # Adding type elements to the builtin type 'list' instance (line 211)
    # Adding element type (line 211)
    # Getting the type of 'c' (line 211)
    c_34771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 38), 'c', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 211, 37), list_34770, c_34771)
    # Adding element type (line 211)
    
    # Call to zeros(...): (line 211)
    # Processing the call arguments (line 211)
    
    # Call to len(...): (line 211)
    # Processing the call arguments (line 211)
    # Getting the type of 'c' (line 211)
    c_34775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 54), 'c', False)
    # Processing the call keyword arguments (line 211)
    kwargs_34776 = {}
    # Getting the type of 'len' (line 211)
    len_34774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 50), 'len', False)
    # Calling len(args, kwargs) (line 211)
    len_call_result_34777 = invoke(stypy.reporting.localization.Localization(__file__, 211, 50), len_34774, *[c_34775], **kwargs_34776)
    
    # Processing the call keyword arguments (line 211)
    kwargs_34778 = {}
    # Getting the type of 'np' (line 211)
    np_34772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 41), 'np', False)
    # Obtaining the member 'zeros' of a type (line 211)
    zeros_34773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 41), np_34772, 'zeros')
    # Calling zeros(args, kwargs) (line 211)
    zeros_call_result_34779 = invoke(stypy.reporting.localization.Localization(__file__, 211, 41), zeros_34773, *[len_call_result_34777], **kwargs_34778)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 211, 37), list_34770, zeros_call_result_34779)
    
    # Processing the call keyword arguments (line 211)
    kwargs_34780 = {}
    # Getting the type of 'np' (line 211)
    np_34768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 21), 'np', False)
    # Obtaining the member 'column_stack' of a type (line 211)
    column_stack_34769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 21), np_34768, 'column_stack')
    # Calling column_stack(args, kwargs) (line 211)
    column_stack_call_result_34781 = invoke(stypy.reporting.localization.Localization(__file__, 211, 21), column_stack_34769, *[list_34770], **kwargs_34780)
    
    # Assigning a type to the variable 'result' (line 211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 12), 'result', column_stack_call_result_34781)
    
    # Assigning a IfExp to a Subscript (line 212):
    
    # Assigning a IfExp to a Subscript (line 212):
    
    # Assigning a IfExp to a Subscript (line 212):
    
    
    # Getting the type of 'alpha' (line 212)
    alpha_34782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 37), 'alpha')
    # Getting the type of 'None' (line 212)
    None_34783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 50), 'None')
    # Applying the binary operator 'isnot' (line 212)
    result_is_not_34784 = python_operator(stypy.reporting.localization.Localization(__file__, 212, 37), 'isnot', alpha_34782, None_34783)
    
    # Testing the type of an if expression (line 212)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 212, 28), result_is_not_34784)
    # SSA begins for if expression (line 212)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'alpha' (line 212)
    alpha_34785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 28), 'alpha')
    # SSA branch for the else part of an if expression (line 212)
    module_type_store.open_ssa_branch('if expression else')
    float_34786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 212, 60), 'float')
    # SSA join for if expression (line 212)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_34787 = union_type.UnionType.add(alpha_34785, float_34786)
    
    # Getting the type of 'result' (line 212)
    result_34788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 12), 'result')
    slice_34789 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 212, 12), None, None, None)
    int_34790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 212, 22), 'int')
    # Storing an element on a container (line 212)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 212, 12), result_34788, ((slice_34789, int_34790), if_exp_34787))
    # SSA branch for the else part of an if statement (line 210)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Obtaining the type of the subscript
    int_34791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 21), 'int')
    # Getting the type of 'c' (line 213)
    c_34792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 13), 'c')
    # Obtaining the member 'shape' of a type (line 213)
    shape_34793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 13), c_34792, 'shape')
    # Obtaining the member '__getitem__' of a type (line 213)
    getitem___34794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 13), shape_34793, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 213)
    subscript_call_result_34795 = invoke(stypy.reporting.localization.Localization(__file__, 213, 13), getitem___34794, int_34791)
    
    int_34796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 27), 'int')
    # Applying the binary operator '==' (line 213)
    result_eq_34797 = python_operator(stypy.reporting.localization.Localization(__file__, 213, 13), '==', subscript_call_result_34795, int_34796)
    
    # Testing the type of an if condition (line 213)
    if_condition_34798 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 213, 13), result_eq_34797)
    # Assigning a type to the variable 'if_condition_34798' (line 213)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 13), 'if_condition_34798', if_condition_34798)
    # SSA begins for if statement (line 213)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 214):
    
    # Assigning a Call to a Name (line 214):
    
    # Assigning a Call to a Name (line 214):
    
    # Call to copy(...): (line 214)
    # Processing the call keyword arguments (line 214)
    kwargs_34801 = {}
    # Getting the type of 'c' (line 214)
    c_34799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 21), 'c', False)
    # Obtaining the member 'copy' of a type (line 214)
    copy_34800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 21), c_34799, 'copy')
    # Calling copy(args, kwargs) (line 214)
    copy_call_result_34802 = invoke(stypy.reporting.localization.Localization(__file__, 214, 21), copy_34800, *[], **kwargs_34801)
    
    # Assigning a type to the variable 'result' (line 214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'result', copy_call_result_34802)
    
    # Type idiom detected: calculating its left and rigth part (line 215)
    # Getting the type of 'alpha' (line 215)
    alpha_34803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 12), 'alpha')
    # Getting the type of 'None' (line 215)
    None_34804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 28), 'None')
    
    (may_be_34805, more_types_in_union_34806) = may_not_be_none(alpha_34803, None_34804)

    if may_be_34805:

        if more_types_in_union_34806:
            # Runtime conditional SSA (line 215)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Subscript (line 216):
        
        # Assigning a Name to a Subscript (line 216):
        
        # Assigning a Name to a Subscript (line 216):
        # Getting the type of 'alpha' (line 216)
        alpha_34807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 32), 'alpha')
        # Getting the type of 'result' (line 216)
        result_34808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 16), 'result')
        slice_34809 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 216, 16), None, None, None)
        int_34810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 216, 26), 'int')
        # Storing an element on a container (line 216)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 216, 16), result_34808, ((slice_34809, int_34810), alpha_34807))

        if more_types_in_union_34806:
            # SSA join for if statement (line 215)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 213)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 210)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 217)
    # Processing the call arguments (line 217)
    
    # Getting the type of 'result' (line 217)
    result_34813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 19), 'result', False)
    int_34814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 28), 'int')
    # Applying the binary operator '<' (line 217)
    result_lt_34815 = python_operator(stypy.reporting.localization.Localization(__file__, 217, 19), '<', result_34813, int_34814)
    
    
    # Getting the type of 'result' (line 217)
    result_34816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 34), 'result', False)
    int_34817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 43), 'int')
    # Applying the binary operator '>' (line 217)
    result_gt_34818 = python_operator(stypy.reporting.localization.Localization(__file__, 217, 34), '>', result_34816, int_34817)
    
    # Applying the binary operator '|' (line 217)
    result_or__34819 = python_operator(stypy.reporting.localization.Localization(__file__, 217, 18), '|', result_lt_34815, result_gt_34818)
    
    # Processing the call keyword arguments (line 217)
    kwargs_34820 = {}
    # Getting the type of 'np' (line 217)
    np_34811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 11), 'np', False)
    # Obtaining the member 'any' of a type (line 217)
    any_34812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 11), np_34811, 'any')
    # Calling any(args, kwargs) (line 217)
    any_call_result_34821 = invoke(stypy.reporting.localization.Localization(__file__, 217, 11), any_34812, *[result_or__34819], **kwargs_34820)
    
    # Testing the type of an if condition (line 217)
    if_condition_34822 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 217, 8), any_call_result_34821)
    # Assigning a type to the variable 'if_condition_34822' (line 217)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 8), 'if_condition_34822', if_condition_34822)
    # SSA begins for if statement (line 217)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 218)
    # Processing the call arguments (line 218)
    unicode_34824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 29), 'unicode', u'RGBA values should be within 0-1 range')
    # Processing the call keyword arguments (line 218)
    kwargs_34825 = {}
    # Getting the type of 'ValueError' (line 218)
    ValueError_34823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 218)
    ValueError_call_result_34826 = invoke(stypy.reporting.localization.Localization(__file__, 218, 18), ValueError_34823, *[unicode_34824], **kwargs_34825)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 218, 12), ValueError_call_result_34826, 'raise parameter', BaseException)
    # SSA join for if statement (line 217)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'result' (line 219)
    result_34827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 15), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 219)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 8), 'stypy_return_type', result_34827)
    # SSA join for if statement (line 208)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 224)
    # Processing the call arguments (line 224)
    # Getting the type of 'c' (line 224)
    c_34829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 18), 'c', False)
    # Getting the type of 'six' (line 224)
    six_34830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 21), 'six', False)
    # Obtaining the member 'string_types' of a type (line 224)
    string_types_34831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 21), six_34830, 'string_types')
    # Processing the call keyword arguments (line 224)
    kwargs_34832 = {}
    # Getting the type of 'isinstance' (line 224)
    isinstance_34828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 224)
    isinstance_call_result_34833 = invoke(stypy.reporting.localization.Localization(__file__, 224, 7), isinstance_34828, *[c_34829, string_types_34831], **kwargs_34832)
    
    
    
    # Call to lower(...): (line 224)
    # Processing the call keyword arguments (line 224)
    kwargs_34836 = {}
    # Getting the type of 'c' (line 224)
    c_34834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 43), 'c', False)
    # Obtaining the member 'lower' of a type (line 224)
    lower_34835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 43), c_34834, 'lower')
    # Calling lower(args, kwargs) (line 224)
    lower_call_result_34837 = invoke(stypy.reporting.localization.Localization(__file__, 224, 43), lower_34835, *[], **kwargs_34836)
    
    unicode_34838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 56), 'unicode', u'none')
    # Applying the binary operator '==' (line 224)
    result_eq_34839 = python_operator(stypy.reporting.localization.Localization(__file__, 224, 43), '==', lower_call_result_34837, unicode_34838)
    
    # Applying the binary operator 'and' (line 224)
    result_and_keyword_34840 = python_operator(stypy.reporting.localization.Localization(__file__, 224, 7), 'and', isinstance_call_result_34833, result_eq_34839)
    
    # Testing the type of an if condition (line 224)
    if_condition_34841 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 224, 4), result_and_keyword_34840)
    # Assigning a type to the variable 'if_condition_34841' (line 224)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 4), 'if_condition_34841', if_condition_34841)
    # SSA begins for if statement (line 224)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to zeros(...): (line 225)
    # Processing the call arguments (line 225)
    
    # Obtaining an instance of the builtin type 'tuple' (line 225)
    tuple_34844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 225)
    # Adding element type (line 225)
    int_34845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 25), tuple_34844, int_34845)
    # Adding element type (line 225)
    int_34846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 28), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 25), tuple_34844, int_34846)
    
    # Getting the type of 'float' (line 225)
    float_34847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 32), 'float', False)
    # Processing the call keyword arguments (line 225)
    kwargs_34848 = {}
    # Getting the type of 'np' (line 225)
    np_34842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 15), 'np', False)
    # Obtaining the member 'zeros' of a type (line 225)
    zeros_34843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 15), np_34842, 'zeros')
    # Calling zeros(args, kwargs) (line 225)
    zeros_call_result_34849 = invoke(stypy.reporting.localization.Localization(__file__, 225, 15), zeros_34843, *[tuple_34844, float_34847], **kwargs_34848)
    
    # Assigning a type to the variable 'stypy_return_type' (line 225)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 8), 'stypy_return_type', zeros_call_result_34849)
    # SSA join for if statement (line 224)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 226)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to array(...): (line 227)
    # Processing the call arguments (line 227)
    
    # Obtaining an instance of the builtin type 'list' (line 227)
    list_34852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 227)
    # Adding element type (line 227)
    
    # Call to to_rgba(...): (line 227)
    # Processing the call arguments (line 227)
    # Getting the type of 'c' (line 227)
    c_34854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 33), 'c', False)
    # Getting the type of 'alpha' (line 227)
    alpha_34855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 36), 'alpha', False)
    # Processing the call keyword arguments (line 227)
    kwargs_34856 = {}
    # Getting the type of 'to_rgba' (line 227)
    to_rgba_34853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 25), 'to_rgba', False)
    # Calling to_rgba(args, kwargs) (line 227)
    to_rgba_call_result_34857 = invoke(stypy.reporting.localization.Localization(__file__, 227, 25), to_rgba_34853, *[c_34854, alpha_34855], **kwargs_34856)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 24), list_34852, to_rgba_call_result_34857)
    
    # Getting the type of 'float' (line 227)
    float_34858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 45), 'float', False)
    # Processing the call keyword arguments (line 227)
    kwargs_34859 = {}
    # Getting the type of 'np' (line 227)
    np_34850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 227)
    array_34851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 15), np_34850, 'array')
    # Calling array(args, kwargs) (line 227)
    array_call_result_34860 = invoke(stypy.reporting.localization.Localization(__file__, 227, 15), array_34851, *[list_34852, float_34858], **kwargs_34859)
    
    # Assigning a type to the variable 'stypy_return_type' (line 227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 227, 8), 'stypy_return_type', array_call_result_34860)
    # SSA branch for the except part of a try statement (line 226)
    # SSA branch for the except 'Tuple' branch of a try statement (line 226)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 226)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 231):
    
    # Assigning a Call to a Name (line 231):
    
    # Assigning a Call to a Name (line 231):
    
    # Call to empty(...): (line 231)
    # Processing the call arguments (line 231)
    
    # Obtaining an instance of the builtin type 'tuple' (line 231)
    tuple_34863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 231)
    # Adding element type (line 231)
    
    # Call to len(...): (line 231)
    # Processing the call arguments (line 231)
    # Getting the type of 'c' (line 231)
    c_34865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 27), 'c', False)
    # Processing the call keyword arguments (line 231)
    kwargs_34866 = {}
    # Getting the type of 'len' (line 231)
    len_34864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 23), 'len', False)
    # Calling len(args, kwargs) (line 231)
    len_call_result_34867 = invoke(stypy.reporting.localization.Localization(__file__, 231, 23), len_34864, *[c_34865], **kwargs_34866)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 231, 23), tuple_34863, len_call_result_34867)
    # Adding element type (line 231)
    int_34868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 31), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 231, 23), tuple_34863, int_34868)
    
    # Getting the type of 'float' (line 231)
    float_34869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 35), 'float', False)
    # Processing the call keyword arguments (line 231)
    kwargs_34870 = {}
    # Getting the type of 'np' (line 231)
    np_34861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 13), 'np', False)
    # Obtaining the member 'empty' of a type (line 231)
    empty_34862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 13), np_34861, 'empty')
    # Calling empty(args, kwargs) (line 231)
    empty_call_result_34871 = invoke(stypy.reporting.localization.Localization(__file__, 231, 13), empty_34862, *[tuple_34863, float_34869], **kwargs_34870)
    
    # Assigning a type to the variable 'result' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'result', empty_call_result_34871)
    
    
    # Call to enumerate(...): (line 232)
    # Processing the call arguments (line 232)
    # Getting the type of 'c' (line 232)
    c_34873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 27), 'c', False)
    # Processing the call keyword arguments (line 232)
    kwargs_34874 = {}
    # Getting the type of 'enumerate' (line 232)
    enumerate_34872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 17), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 232)
    enumerate_call_result_34875 = invoke(stypy.reporting.localization.Localization(__file__, 232, 17), enumerate_34872, *[c_34873], **kwargs_34874)
    
    # Testing the type of a for loop iterable (line 232)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 232, 4), enumerate_call_result_34875)
    # Getting the type of the for loop variable (line 232)
    for_loop_var_34876 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 232, 4), enumerate_call_result_34875)
    # Assigning a type to the variable 'i' (line 232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 232, 4), for_loop_var_34876))
    # Assigning a type to the variable 'cc' (line 232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 4), 'cc', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 232, 4), for_loop_var_34876))
    # SSA begins for a for statement (line 232)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 233):
    
    # Assigning a Call to a Subscript (line 233):
    
    # Assigning a Call to a Subscript (line 233):
    
    # Call to to_rgba(...): (line 233)
    # Processing the call arguments (line 233)
    # Getting the type of 'cc' (line 233)
    cc_34878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 28), 'cc', False)
    # Getting the type of 'alpha' (line 233)
    alpha_34879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 32), 'alpha', False)
    # Processing the call keyword arguments (line 233)
    kwargs_34880 = {}
    # Getting the type of 'to_rgba' (line 233)
    to_rgba_34877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 20), 'to_rgba', False)
    # Calling to_rgba(args, kwargs) (line 233)
    to_rgba_call_result_34881 = invoke(stypy.reporting.localization.Localization(__file__, 233, 20), to_rgba_34877, *[cc_34878, alpha_34879], **kwargs_34880)
    
    # Getting the type of 'result' (line 233)
    result_34882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'result')
    # Getting the type of 'i' (line 233)
    i_34883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 15), 'i')
    # Storing an element on a container (line 233)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 233, 8), result_34882, (i_34883, to_rgba_call_result_34881))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'result' (line 234)
    result_34884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 4), 'stypy_return_type', result_34884)
    
    # ################# End of 'to_rgba_array(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'to_rgba_array' in the type store
    # Getting the type of 'stypy_return_type' (line 199)
    stypy_return_type_34885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_34885)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'to_rgba_array'
    return stypy_return_type_34885

# Assigning a type to the variable 'to_rgba_array' (line 199)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 0), 'to_rgba_array', to_rgba_array)

@norecursion
def to_rgb(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'to_rgb'
    module_type_store = module_type_store.open_function_context('to_rgb', 237, 0, False)
    
    # Passed parameters checking function
    to_rgb.stypy_localization = localization
    to_rgb.stypy_type_of_self = None
    to_rgb.stypy_type_store = module_type_store
    to_rgb.stypy_function_name = 'to_rgb'
    to_rgb.stypy_param_names_list = ['c']
    to_rgb.stypy_varargs_param_name = None
    to_rgb.stypy_kwargs_param_name = None
    to_rgb.stypy_call_defaults = defaults
    to_rgb.stypy_call_varargs = varargs
    to_rgb.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'to_rgb', ['c'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'to_rgb', localization, ['c'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'to_rgb(...)' code ##################

    unicode_34886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 239, (-1)), 'unicode', u'Convert `c` to an RGB color, silently dropping the alpha channel.\n    ')
    
    # Obtaining the type of the subscript
    int_34887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 23), 'int')
    slice_34888 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 240, 11), None, int_34887, None)
    
    # Call to to_rgba(...): (line 240)
    # Processing the call arguments (line 240)
    # Getting the type of 'c' (line 240)
    c_34890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 19), 'c', False)
    # Processing the call keyword arguments (line 240)
    kwargs_34891 = {}
    # Getting the type of 'to_rgba' (line 240)
    to_rgba_34889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 11), 'to_rgba', False)
    # Calling to_rgba(args, kwargs) (line 240)
    to_rgba_call_result_34892 = invoke(stypy.reporting.localization.Localization(__file__, 240, 11), to_rgba_34889, *[c_34890], **kwargs_34891)
    
    # Obtaining the member '__getitem__' of a type (line 240)
    getitem___34893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 240, 11), to_rgba_call_result_34892, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 240)
    subscript_call_result_34894 = invoke(stypy.reporting.localization.Localization(__file__, 240, 11), getitem___34893, slice_34888)
    
    # Assigning a type to the variable 'stypy_return_type' (line 240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 4), 'stypy_return_type', subscript_call_result_34894)
    
    # ################# End of 'to_rgb(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'to_rgb' in the type store
    # Getting the type of 'stypy_return_type' (line 237)
    stypy_return_type_34895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_34895)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'to_rgb'
    return stypy_return_type_34895

# Assigning a type to the variable 'to_rgb' (line 237)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 0), 'to_rgb', to_rgb)

@norecursion
def to_hex(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 243)
    False_34896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 25), 'False')
    defaults = [False_34896]
    # Create a new context for function 'to_hex'
    module_type_store = module_type_store.open_function_context('to_hex', 243, 0, False)
    
    # Passed parameters checking function
    to_hex.stypy_localization = localization
    to_hex.stypy_type_of_self = None
    to_hex.stypy_type_store = module_type_store
    to_hex.stypy_function_name = 'to_hex'
    to_hex.stypy_param_names_list = ['c', 'keep_alpha']
    to_hex.stypy_varargs_param_name = None
    to_hex.stypy_kwargs_param_name = None
    to_hex.stypy_call_defaults = defaults
    to_hex.stypy_call_varargs = varargs
    to_hex.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'to_hex', ['c', 'keep_alpha'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'to_hex', localization, ['c', 'keep_alpha'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'to_hex(...)' code ##################

    unicode_34897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, (-1)), 'unicode', u'Convert `c` to a hex color.\n\n    Uses the #rrggbb format if `keep_alpha` is False (the default), `#rrggbbaa`\n    otherwise.\n    ')
    
    # Assigning a Call to a Name (line 249):
    
    # Assigning a Call to a Name (line 249):
    
    # Assigning a Call to a Name (line 249):
    
    # Call to to_rgba(...): (line 249)
    # Processing the call arguments (line 249)
    # Getting the type of 'c' (line 249)
    c_34899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 16), 'c', False)
    # Processing the call keyword arguments (line 249)
    kwargs_34900 = {}
    # Getting the type of 'to_rgba' (line 249)
    to_rgba_34898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 8), 'to_rgba', False)
    # Calling to_rgba(args, kwargs) (line 249)
    to_rgba_call_result_34901 = invoke(stypy.reporting.localization.Localization(__file__, 249, 8), to_rgba_34898, *[c_34899], **kwargs_34900)
    
    # Assigning a type to the variable 'c' (line 249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 4), 'c', to_rgba_call_result_34901)
    
    
    # Getting the type of 'keep_alpha' (line 250)
    keep_alpha_34902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 11), 'keep_alpha')
    # Applying the 'not' unary operator (line 250)
    result_not__34903 = python_operator(stypy.reporting.localization.Localization(__file__, 250, 7), 'not', keep_alpha_34902)
    
    # Testing the type of an if condition (line 250)
    if_condition_34904 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 250, 4), result_not__34903)
    # Assigning a type to the variable 'if_condition_34904' (line 250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 4), 'if_condition_34904', if_condition_34904)
    # SSA begins for if statement (line 250)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 251):
    
    # Assigning a Subscript to a Name (line 251):
    
    # Assigning a Subscript to a Name (line 251):
    
    # Obtaining the type of the subscript
    int_34905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 15), 'int')
    slice_34906 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 251, 12), None, int_34905, None)
    # Getting the type of 'c' (line 251)
    c_34907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 12), 'c')
    # Obtaining the member '__getitem__' of a type (line 251)
    getitem___34908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 12), c_34907, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 251)
    subscript_call_result_34909 = invoke(stypy.reporting.localization.Localization(__file__, 251, 12), getitem___34908, slice_34906)
    
    # Assigning a type to the variable 'c' (line 251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 8), 'c', subscript_call_result_34909)
    # SSA join for if statement (line 250)
    module_type_store = module_type_store.join_ssa_context()
    
    unicode_34910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 11), 'unicode', u'#')
    
    # Call to join(...): (line 252)
    # Processing the call arguments (line 252)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 252, 25, True)
    # Calculating comprehension expression
    # Getting the type of 'c' (line 253)
    c_34927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 36), 'c', False)
    comprehension_34928 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 252, 25), c_34927)
    # Assigning a type to the variable 'val' (line 252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 25), 'val', comprehension_34928)
    
    # Call to format(...): (line 252)
    # Processing the call arguments (line 252)
    
    # Call to int(...): (line 252)
    # Processing the call arguments (line 252)
    
    # Call to round(...): (line 252)
    # Processing the call arguments (line 252)
    # Getting the type of 'val' (line 252)
    val_34917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 45), 'val', False)
    int_34918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 51), 'int')
    # Applying the binary operator '*' (line 252)
    result_mul_34919 = python_operator(stypy.reporting.localization.Localization(__file__, 252, 45), '*', val_34917, int_34918)
    
    # Processing the call keyword arguments (line 252)
    kwargs_34920 = {}
    # Getting the type of 'np' (line 252)
    np_34915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 36), 'np', False)
    # Obtaining the member 'round' of a type (line 252)
    round_34916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 36), np_34915, 'round')
    # Calling round(args, kwargs) (line 252)
    round_call_result_34921 = invoke(stypy.reporting.localization.Localization(__file__, 252, 36), round_34916, *[result_mul_34919], **kwargs_34920)
    
    # Processing the call keyword arguments (line 252)
    kwargs_34922 = {}
    # Getting the type of 'int' (line 252)
    int_34914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 32), 'int', False)
    # Calling int(args, kwargs) (line 252)
    int_call_result_34923 = invoke(stypy.reporting.localization.Localization(__file__, 252, 32), int_34914, *[round_call_result_34921], **kwargs_34922)
    
    unicode_34924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 58), 'unicode', u'02x')
    # Processing the call keyword arguments (line 252)
    kwargs_34925 = {}
    # Getting the type of 'format' (line 252)
    format_34913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 25), 'format', False)
    # Calling format(args, kwargs) (line 252)
    format_call_result_34926 = invoke(stypy.reporting.localization.Localization(__file__, 252, 25), format_34913, *[int_call_result_34923, unicode_34924], **kwargs_34925)
    
    list_34929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 25), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 252, 25), list_34929, format_call_result_34926)
    # Processing the call keyword arguments (line 252)
    kwargs_34930 = {}
    unicode_34911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 17), 'unicode', u'')
    # Obtaining the member 'join' of a type (line 252)
    join_34912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 17), unicode_34911, 'join')
    # Calling join(args, kwargs) (line 252)
    join_call_result_34931 = invoke(stypy.reporting.localization.Localization(__file__, 252, 17), join_34912, *[list_34929], **kwargs_34930)
    
    # Applying the binary operator '+' (line 252)
    result_add_34932 = python_operator(stypy.reporting.localization.Localization(__file__, 252, 11), '+', unicode_34910, join_call_result_34931)
    
    # Assigning a type to the variable 'stypy_return_type' (line 252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 4), 'stypy_return_type', result_add_34932)
    
    # ################# End of 'to_hex(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'to_hex' in the type store
    # Getting the type of 'stypy_return_type' (line 243)
    stypy_return_type_34933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_34933)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'to_hex'
    return stypy_return_type_34933

# Assigning a type to the variable 'to_hex' (line 243)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 243, 0), 'to_hex', to_hex)

# Assigning a Name to a Name (line 258):

# Assigning a Name to a Name (line 258):

# Assigning a Name to a Name (line 258):
# Getting the type of 'CSS4_COLORS' (line 258)
CSS4_COLORS_34934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 9), 'CSS4_COLORS')
# Assigning a type to the variable 'cnames' (line 258)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 0), 'cnames', CSS4_COLORS_34934)

# Assigning a Call to a Name (line 259):

# Assigning a Call to a Name (line 259):

# Assigning a Call to a Name (line 259):

# Call to compile(...): (line 259)
# Processing the call arguments (line 259)
unicode_34937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 29), 'unicode', u'\\A#[a-fA-F0-9]{6}\\Z')
# Processing the call keyword arguments (line 259)
kwargs_34938 = {}
# Getting the type of 're' (line 259)
re_34935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 18), 're', False)
# Obtaining the member 'compile' of a type (line 259)
compile_34936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 259, 18), re_34935, 'compile')
# Calling compile(args, kwargs) (line 259)
compile_call_result_34939 = invoke(stypy.reporting.localization.Localization(__file__, 259, 18), compile_34936, *[unicode_34937], **kwargs_34938)

# Assigning a type to the variable 'hexColorPattern' (line 259)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 0), 'hexColorPattern', compile_call_result_34939)

@norecursion
def rgb2hex(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rgb2hex'
    module_type_store = module_type_store.open_function_context('rgb2hex', 262, 0, False)
    
    # Passed parameters checking function
    rgb2hex.stypy_localization = localization
    rgb2hex.stypy_type_of_self = None
    rgb2hex.stypy_type_store = module_type_store
    rgb2hex.stypy_function_name = 'rgb2hex'
    rgb2hex.stypy_param_names_list = ['c']
    rgb2hex.stypy_varargs_param_name = None
    rgb2hex.stypy_kwargs_param_name = None
    rgb2hex.stypy_call_defaults = defaults
    rgb2hex.stypy_call_varargs = varargs
    rgb2hex.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rgb2hex', ['c'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rgb2hex', localization, ['c'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rgb2hex(...)' code ##################

    unicode_34940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 4), 'unicode', u'Given an rgb or rgba sequence of 0-1 floats, return the hex string')
    
    # Call to to_hex(...): (line 264)
    # Processing the call arguments (line 264)
    # Getting the type of 'c' (line 264)
    c_34942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 18), 'c', False)
    # Processing the call keyword arguments (line 264)
    kwargs_34943 = {}
    # Getting the type of 'to_hex' (line 264)
    to_hex_34941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 11), 'to_hex', False)
    # Calling to_hex(args, kwargs) (line 264)
    to_hex_call_result_34944 = invoke(stypy.reporting.localization.Localization(__file__, 264, 11), to_hex_34941, *[c_34942], **kwargs_34943)
    
    # Assigning a type to the variable 'stypy_return_type' (line 264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 264, 4), 'stypy_return_type', to_hex_call_result_34944)
    
    # ################# End of 'rgb2hex(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rgb2hex' in the type store
    # Getting the type of 'stypy_return_type' (line 262)
    stypy_return_type_34945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_34945)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rgb2hex'
    return stypy_return_type_34945

# Assigning a type to the variable 'rgb2hex' (line 262)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 262, 0), 'rgb2hex', rgb2hex)

@norecursion
def hex2color(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'hex2color'
    module_type_store = module_type_store.open_function_context('hex2color', 267, 0, False)
    
    # Passed parameters checking function
    hex2color.stypy_localization = localization
    hex2color.stypy_type_of_self = None
    hex2color.stypy_type_store = module_type_store
    hex2color.stypy_function_name = 'hex2color'
    hex2color.stypy_param_names_list = ['c']
    hex2color.stypy_varargs_param_name = None
    hex2color.stypy_kwargs_param_name = None
    hex2color.stypy_call_defaults = defaults
    hex2color.stypy_call_varargs = varargs
    hex2color.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hex2color', ['c'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hex2color', localization, ['c'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hex2color(...)' code ##################

    unicode_34946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, (-1)), 'unicode', u'\n    Take a hex string *s* and return the corresponding rgb 3-tuple\n    Example: #efefef -> (0.93725, 0.93725, 0.93725)\n    ')
    
    # Call to to_rgb(...): (line 272)
    # Processing the call arguments (line 272)
    # Getting the type of 'c' (line 272)
    c_34949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 33), 'c', False)
    # Processing the call keyword arguments (line 272)
    kwargs_34950 = {}
    # Getting the type of 'ColorConverter' (line 272)
    ColorConverter_34947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 11), 'ColorConverter', False)
    # Obtaining the member 'to_rgb' of a type (line 272)
    to_rgb_34948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 11), ColorConverter_34947, 'to_rgb')
    # Calling to_rgb(args, kwargs) (line 272)
    to_rgb_call_result_34951 = invoke(stypy.reporting.localization.Localization(__file__, 272, 11), to_rgb_34948, *[c_34949], **kwargs_34950)
    
    # Assigning a type to the variable 'stypy_return_type' (line 272)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 4), 'stypy_return_type', to_rgb_call_result_34951)
    
    # ################# End of 'hex2color(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hex2color' in the type store
    # Getting the type of 'stypy_return_type' (line 267)
    stypy_return_type_34952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_34952)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hex2color'
    return stypy_return_type_34952

# Assigning a type to the variable 'hex2color' (line 267)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 0), 'hex2color', hex2color)
# Declaration of the 'ColorConverter' class

class ColorConverter(object, ):
    unicode_34953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 284, (-1)), 'unicode', u'\n    Provides methods for converting color specifications to *RGB* or *RGBA*\n\n    Caching is used for more efficient conversion upon repeated calls\n    with the same argument.\n\n    Ordinarily only the single instance instantiated in this module,\n    *colorConverter*, is needed.\n    ')
    
    # Assigning a Name to a Name (line 286):
    
    # Assigning a Name to a Name (line 286):
    
    # Assigning a Attribute to a Name (line 287):
    
    # Assigning a Attribute to a Name (line 287):

    @staticmethod
    @norecursion
    def to_rgb(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'to_rgb'
        module_type_store = module_type_store.open_function_context('to_rgb', 289, 4, False)
        
        # Passed parameters checking function
        ColorConverter.to_rgb.__dict__.__setitem__('stypy_localization', localization)
        ColorConverter.to_rgb.__dict__.__setitem__('stypy_type_of_self', None)
        ColorConverter.to_rgb.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorConverter.to_rgb.__dict__.__setitem__('stypy_function_name', 'to_rgb')
        ColorConverter.to_rgb.__dict__.__setitem__('stypy_param_names_list', ['arg'])
        ColorConverter.to_rgb.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorConverter.to_rgb.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorConverter.to_rgb.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorConverter.to_rgb.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorConverter.to_rgb.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorConverter.to_rgb.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, 'to_rgb', ['arg'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_rgb', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_rgb(...)' code ##################

        unicode_34954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 304, (-1)), 'unicode', u"\n        Returns an *RGB* tuple of three floats from 0-1.\n\n        *arg* can be an *RGB* or *RGBA* sequence or a string in any of\n        several forms:\n\n            1) a letter from the set 'rgbcmykw'\n            2) a hex color string, like '#00FFFF'\n            3) a standard name, like 'aqua'\n            4) a string representation of a float, like '0.4',\n               indicating gray on a 0-1 scale\n\n        if *arg* is *RGBA*, the *A* will simply be discarded.\n        ")
        
        # Call to to_rgb(...): (line 305)
        # Processing the call arguments (line 305)
        # Getting the type of 'arg' (line 305)
        arg_34956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 22), 'arg', False)
        # Processing the call keyword arguments (line 305)
        kwargs_34957 = {}
        # Getting the type of 'to_rgb' (line 305)
        to_rgb_34955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 15), 'to_rgb', False)
        # Calling to_rgb(args, kwargs) (line 305)
        to_rgb_call_result_34958 = invoke(stypy.reporting.localization.Localization(__file__, 305, 15), to_rgb_34955, *[arg_34956], **kwargs_34957)
        
        # Assigning a type to the variable 'stypy_return_type' (line 305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 8), 'stypy_return_type', to_rgb_call_result_34958)
        
        # ################# End of 'to_rgb(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_rgb' in the type store
        # Getting the type of 'stypy_return_type' (line 289)
        stypy_return_type_34959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_34959)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_rgb'
        return stypy_return_type_34959


    @staticmethod
    @norecursion
    def to_rgba(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 308)
        None_34960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 27), 'None')
        defaults = [None_34960]
        # Create a new context for function 'to_rgba'
        module_type_store = module_type_store.open_function_context('to_rgba', 307, 4, False)
        
        # Passed parameters checking function
        ColorConverter.to_rgba.__dict__.__setitem__('stypy_localization', localization)
        ColorConverter.to_rgba.__dict__.__setitem__('stypy_type_of_self', None)
        ColorConverter.to_rgba.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorConverter.to_rgba.__dict__.__setitem__('stypy_function_name', 'to_rgba')
        ColorConverter.to_rgba.__dict__.__setitem__('stypy_param_names_list', ['arg', 'alpha'])
        ColorConverter.to_rgba.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorConverter.to_rgba.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorConverter.to_rgba.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorConverter.to_rgba.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorConverter.to_rgba.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorConverter.to_rgba.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, 'to_rgba', ['arg', 'alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_rgba', localization, ['alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_rgba(...)' code ##################

        unicode_34961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, (-1)), 'unicode', u'\n        Returns an *RGBA* tuple of four floats from 0-1.\n\n        For acceptable values of *arg*, see :meth:`to_rgb`.\n        In addition, if *arg* is "none" (case-insensitive),\n        then (0,0,0,0) will be returned.\n        If *arg* is an *RGBA* sequence and *alpha* is not *None*,\n        *alpha* will replace the original *A*.\n        ')
        
        # Call to to_rgba(...): (line 318)
        # Processing the call arguments (line 318)
        # Getting the type of 'arg' (line 318)
        arg_34963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 23), 'arg', False)
        # Getting the type of 'alpha' (line 318)
        alpha_34964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 28), 'alpha', False)
        # Processing the call keyword arguments (line 318)
        kwargs_34965 = {}
        # Getting the type of 'to_rgba' (line 318)
        to_rgba_34962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 15), 'to_rgba', False)
        # Calling to_rgba(args, kwargs) (line 318)
        to_rgba_call_result_34966 = invoke(stypy.reporting.localization.Localization(__file__, 318, 15), to_rgba_34962, *[arg_34963, alpha_34964], **kwargs_34965)
        
        # Assigning a type to the variable 'stypy_return_type' (line 318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 8), 'stypy_return_type', to_rgba_call_result_34966)
        
        # ################# End of 'to_rgba(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_rgba' in the type store
        # Getting the type of 'stypy_return_type' (line 307)
        stypy_return_type_34967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_34967)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_rgba'
        return stypy_return_type_34967


    @staticmethod
    @norecursion
    def to_rgba_array(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 321)
        None_34968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 33), 'None')
        defaults = [None_34968]
        # Create a new context for function 'to_rgba_array'
        module_type_store = module_type_store.open_function_context('to_rgba_array', 320, 4, False)
        
        # Passed parameters checking function
        ColorConverter.to_rgba_array.__dict__.__setitem__('stypy_localization', localization)
        ColorConverter.to_rgba_array.__dict__.__setitem__('stypy_type_of_self', None)
        ColorConverter.to_rgba_array.__dict__.__setitem__('stypy_type_store', module_type_store)
        ColorConverter.to_rgba_array.__dict__.__setitem__('stypy_function_name', 'to_rgba_array')
        ColorConverter.to_rgba_array.__dict__.__setitem__('stypy_param_names_list', ['arg', 'alpha'])
        ColorConverter.to_rgba_array.__dict__.__setitem__('stypy_varargs_param_name', None)
        ColorConverter.to_rgba_array.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ColorConverter.to_rgba_array.__dict__.__setitem__('stypy_call_defaults', defaults)
        ColorConverter.to_rgba_array.__dict__.__setitem__('stypy_call_varargs', varargs)
        ColorConverter.to_rgba_array.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ColorConverter.to_rgba_array.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, 'to_rgba_array', ['arg', 'alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_rgba_array', localization, ['alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_rgba_array(...)' code ##################

        unicode_34969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 329, (-1)), 'unicode', u'\n        Returns a numpy array of *RGBA* tuples.\n\n        Accepts a single mpl color spec or a sequence of specs.\n\n        Special case to handle "no color": if *c* is "none" (case-insensitive),\n        then an empty array will be returned.  Same for an empty list.\n        ')
        
        # Call to to_rgba_array(...): (line 330)
        # Processing the call arguments (line 330)
        # Getting the type of 'arg' (line 330)
        arg_34971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 29), 'arg', False)
        # Getting the type of 'alpha' (line 330)
        alpha_34972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 34), 'alpha', False)
        # Processing the call keyword arguments (line 330)
        kwargs_34973 = {}
        # Getting the type of 'to_rgba_array' (line 330)
        to_rgba_array_34970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 15), 'to_rgba_array', False)
        # Calling to_rgba_array(args, kwargs) (line 330)
        to_rgba_array_call_result_34974 = invoke(stypy.reporting.localization.Localization(__file__, 330, 15), to_rgba_array_34970, *[arg_34971, alpha_34972], **kwargs_34973)
        
        # Assigning a type to the variable 'stypy_return_type' (line 330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 8), 'stypy_return_type', to_rgba_array_call_result_34974)
        
        # ################# End of 'to_rgba_array(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_rgba_array' in the type store
        # Getting the type of 'stypy_return_type' (line 320)
        stypy_return_type_34975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_34975)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_rgba_array'
        return stypy_return_type_34975


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 275, 0, False)
        # Assigning a type to the variable 'self' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ColorConverter.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ColorConverter' (line 275)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 0), 'ColorConverter', ColorConverter)

# Assigning a Name to a Name (line 286):
# Getting the type of '_colors_full_map' (line 286)
_colors_full_map_34976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 13), '_colors_full_map')
# Getting the type of 'ColorConverter'
ColorConverter_34977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ColorConverter')
# Setting the type of the member 'colors' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ColorConverter_34977, 'colors', _colors_full_map_34976)

# Assigning a Attribute to a Name (line 287):
# Getting the type of '_colors_full_map' (line 287)
_colors_full_map_34978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 12), '_colors_full_map')
# Obtaining the member 'cache' of a type (line 287)
cache_34979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 12), _colors_full_map_34978, 'cache')
# Getting the type of 'ColorConverter'
ColorConverter_34980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'ColorConverter')
# Setting the type of the member 'cache' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), ColorConverter_34980, 'cache', cache_34979)

# Assigning a Call to a Name (line 333):

# Assigning a Call to a Name (line 333):

# Assigning a Call to a Name (line 333):

# Call to ColorConverter(...): (line 333)
# Processing the call keyword arguments (line 333)
kwargs_34982 = {}
# Getting the type of 'ColorConverter' (line 333)
ColorConverter_34981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 17), 'ColorConverter', False)
# Calling ColorConverter(args, kwargs) (line 333)
ColorConverter_call_result_34983 = invoke(stypy.reporting.localization.Localization(__file__, 333, 17), ColorConverter_34981, *[], **kwargs_34982)

# Assigning a type to the variable 'colorConverter' (line 333)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 333, 0), 'colorConverter', ColorConverter_call_result_34983)

@norecursion
def makeMappingArray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_34984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 338, 36), 'float')
    defaults = [float_34984]
    # Create a new context for function 'makeMappingArray'
    module_type_store = module_type_store.open_function_context('makeMappingArray', 338, 0, False)
    
    # Passed parameters checking function
    makeMappingArray.stypy_localization = localization
    makeMappingArray.stypy_type_of_self = None
    makeMappingArray.stypy_type_store = module_type_store
    makeMappingArray.stypy_function_name = 'makeMappingArray'
    makeMappingArray.stypy_param_names_list = ['N', 'data', 'gamma']
    makeMappingArray.stypy_varargs_param_name = None
    makeMappingArray.stypy_kwargs_param_name = None
    makeMappingArray.stypy_call_defaults = defaults
    makeMappingArray.stypy_call_varargs = varargs
    makeMappingArray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'makeMappingArray', ['N', 'data', 'gamma'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'makeMappingArray', localization, ['N', 'data', 'gamma'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'makeMappingArray(...)' code ##################

    unicode_34985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 357, (-1)), 'unicode', u'Create an *N* -element 1-d lookup table\n\n    *data* represented by a list of x,y0,y1 mapping correspondences.\n    Each element in this list represents how a value between 0 and 1\n    (inclusive) represented by x is mapped to a corresponding value\n    between 0 and 1 (inclusive). The two values of y are to allow\n    for discontinuous mapping functions (say as might be found in a\n    sawtooth) where y0 represents the value of y for values of x\n    <= to that given, and y1 is the value to be used for x > than\n    that given). The list must start with x=0, end with x=1, and\n    all values of x must be in increasing order. Values between\n    the given mapping points are determined by simple linear interpolation.\n\n    Alternatively, data can be a function mapping values between 0 - 1\n    to 0 - 1.\n\n    The function returns an array "result" where ``result[x*(N-1)]``\n    gives the closest value for values of x between 0 and 1.\n    ')
    
    
    # Call to callable(...): (line 359)
    # Processing the call arguments (line 359)
    # Getting the type of 'data' (line 359)
    data_34987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 16), 'data', False)
    # Processing the call keyword arguments (line 359)
    kwargs_34988 = {}
    # Getting the type of 'callable' (line 359)
    callable_34986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 7), 'callable', False)
    # Calling callable(args, kwargs) (line 359)
    callable_call_result_34989 = invoke(stypy.reporting.localization.Localization(__file__, 359, 7), callable_34986, *[data_34987], **kwargs_34988)
    
    # Testing the type of an if condition (line 359)
    if_condition_34990 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 359, 4), callable_call_result_34989)
    # Assigning a type to the variable 'if_condition_34990' (line 359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'if_condition_34990', if_condition_34990)
    # SSA begins for if statement (line 359)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 360):
    
    # Assigning a BinOp to a Name (line 360):
    
    # Assigning a BinOp to a Name (line 360):
    
    # Call to linspace(...): (line 360)
    # Processing the call arguments (line 360)
    int_34993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 27), 'int')
    int_34994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 30), 'int')
    # Getting the type of 'N' (line 360)
    N_34995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 33), 'N', False)
    # Processing the call keyword arguments (line 360)
    kwargs_34996 = {}
    # Getting the type of 'np' (line 360)
    np_34991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 15), 'np', False)
    # Obtaining the member 'linspace' of a type (line 360)
    linspace_34992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 360, 15), np_34991, 'linspace')
    # Calling linspace(args, kwargs) (line 360)
    linspace_call_result_34997 = invoke(stypy.reporting.localization.Localization(__file__, 360, 15), linspace_34992, *[int_34993, int_34994, N_34995], **kwargs_34996)
    
    # Getting the type of 'gamma' (line 360)
    gamma_34998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 39), 'gamma')
    # Applying the binary operator '**' (line 360)
    result_pow_34999 = python_operator(stypy.reporting.localization.Localization(__file__, 360, 15), '**', linspace_call_result_34997, gamma_34998)
    
    # Assigning a type to the variable 'xind' (line 360)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 8), 'xind', result_pow_34999)
    
    # Assigning a Call to a Name (line 361):
    
    # Assigning a Call to a Name (line 361):
    
    # Assigning a Call to a Name (line 361):
    
    # Call to clip(...): (line 361)
    # Processing the call arguments (line 361)
    
    # Call to array(...): (line 361)
    # Processing the call arguments (line 361)
    
    # Call to data(...): (line 361)
    # Processing the call arguments (line 361)
    # Getting the type of 'xind' (line 361)
    xind_35005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 36), 'xind', False)
    # Processing the call keyword arguments (line 361)
    kwargs_35006 = {}
    # Getting the type of 'data' (line 361)
    data_35004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 31), 'data', False)
    # Calling data(args, kwargs) (line 361)
    data_call_result_35007 = invoke(stypy.reporting.localization.Localization(__file__, 361, 31), data_35004, *[xind_35005], **kwargs_35006)
    
    # Processing the call keyword arguments (line 361)
    # Getting the type of 'float' (line 361)
    float_35008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 49), 'float', False)
    keyword_35009 = float_35008
    kwargs_35010 = {'dtype': keyword_35009}
    # Getting the type of 'np' (line 361)
    np_35002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 22), 'np', False)
    # Obtaining the member 'array' of a type (line 361)
    array_35003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 22), np_35002, 'array')
    # Calling array(args, kwargs) (line 361)
    array_call_result_35011 = invoke(stypy.reporting.localization.Localization(__file__, 361, 22), array_35003, *[data_call_result_35007], **kwargs_35010)
    
    int_35012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 57), 'int')
    int_35013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 60), 'int')
    # Processing the call keyword arguments (line 361)
    kwargs_35014 = {}
    # Getting the type of 'np' (line 361)
    np_35000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 14), 'np', False)
    # Obtaining the member 'clip' of a type (line 361)
    clip_35001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 14), np_35000, 'clip')
    # Calling clip(args, kwargs) (line 361)
    clip_call_result_35015 = invoke(stypy.reporting.localization.Localization(__file__, 361, 14), clip_35001, *[array_call_result_35011, int_35012, int_35013], **kwargs_35014)
    
    # Assigning a type to the variable 'lut' (line 361)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'lut', clip_call_result_35015)
    # Getting the type of 'lut' (line 362)
    lut_35016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 15), 'lut')
    # Assigning a type to the variable 'stypy_return_type' (line 362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 8), 'stypy_return_type', lut_35016)
    # SSA join for if statement (line 359)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 364)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 365):
    
    # Assigning a Call to a Name (line 365):
    
    # Assigning a Call to a Name (line 365):
    
    # Call to array(...): (line 365)
    # Processing the call arguments (line 365)
    # Getting the type of 'data' (line 365)
    data_35019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 25), 'data', False)
    # Processing the call keyword arguments (line 365)
    kwargs_35020 = {}
    # Getting the type of 'np' (line 365)
    np_35017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 16), 'np', False)
    # Obtaining the member 'array' of a type (line 365)
    array_35018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 16), np_35017, 'array')
    # Calling array(args, kwargs) (line 365)
    array_call_result_35021 = invoke(stypy.reporting.localization.Localization(__file__, 365, 16), array_35018, *[data_35019], **kwargs_35020)
    
    # Assigning a type to the variable 'adata' (line 365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 8), 'adata', array_call_result_35021)
    # SSA branch for the except part of a try statement (line 364)
    # SSA branch for the except 'Exception' branch of a try statement (line 364)
    module_type_store.open_ssa_branch('except')
    
    # Call to TypeError(...): (line 367)
    # Processing the call arguments (line 367)
    unicode_35023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 24), 'unicode', u'data must be convertable to an array')
    # Processing the call keyword arguments (line 367)
    kwargs_35024 = {}
    # Getting the type of 'TypeError' (line 367)
    TypeError_35022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 367)
    TypeError_call_result_35025 = invoke(stypy.reporting.localization.Localization(__file__, 367, 14), TypeError_35022, *[unicode_35023], **kwargs_35024)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 367, 8), TypeError_call_result_35025, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 364)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 368):
    
    # Assigning a Attribute to a Name (line 368):
    
    # Assigning a Attribute to a Name (line 368):
    # Getting the type of 'adata' (line 368)
    adata_35026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 12), 'adata')
    # Obtaining the member 'shape' of a type (line 368)
    shape_35027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 12), adata_35026, 'shape')
    # Assigning a type to the variable 'shape' (line 368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 4), 'shape', shape_35027)
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 369)
    # Processing the call arguments (line 369)
    # Getting the type of 'shape' (line 369)
    shape_35029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 11), 'shape', False)
    # Processing the call keyword arguments (line 369)
    kwargs_35030 = {}
    # Getting the type of 'len' (line 369)
    len_35028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 7), 'len', False)
    # Calling len(args, kwargs) (line 369)
    len_call_result_35031 = invoke(stypy.reporting.localization.Localization(__file__, 369, 7), len_35028, *[shape_35029], **kwargs_35030)
    
    int_35032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 21), 'int')
    # Applying the binary operator '!=' (line 369)
    result_ne_35033 = python_operator(stypy.reporting.localization.Localization(__file__, 369, 7), '!=', len_call_result_35031, int_35032)
    
    
    
    # Obtaining the type of the subscript
    int_35034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 32), 'int')
    # Getting the type of 'shape' (line 369)
    shape_35035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 26), 'shape')
    # Obtaining the member '__getitem__' of a type (line 369)
    getitem___35036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 26), shape_35035, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 369)
    subscript_call_result_35037 = invoke(stypy.reporting.localization.Localization(__file__, 369, 26), getitem___35036, int_35034)
    
    int_35038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 38), 'int')
    # Applying the binary operator '!=' (line 369)
    result_ne_35039 = python_operator(stypy.reporting.localization.Localization(__file__, 369, 26), '!=', subscript_call_result_35037, int_35038)
    
    # Applying the binary operator 'or' (line 369)
    result_or_keyword_35040 = python_operator(stypy.reporting.localization.Localization(__file__, 369, 7), 'or', result_ne_35033, result_ne_35039)
    
    # Testing the type of an if condition (line 369)
    if_condition_35041 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 369, 4), result_or_keyword_35040)
    # Assigning a type to the variable 'if_condition_35041' (line 369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 369, 4), 'if_condition_35041', if_condition_35041)
    # SSA begins for if statement (line 369)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 370)
    # Processing the call arguments (line 370)
    unicode_35043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 25), 'unicode', u'data must be nx3 format')
    # Processing the call keyword arguments (line 370)
    kwargs_35044 = {}
    # Getting the type of 'ValueError' (line 370)
    ValueError_35042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 370)
    ValueError_call_result_35045 = invoke(stypy.reporting.localization.Localization(__file__, 370, 14), ValueError_35042, *[unicode_35043], **kwargs_35044)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 370, 8), ValueError_call_result_35045, 'raise parameter', BaseException)
    # SSA join for if statement (line 369)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 372):
    
    # Assigning a Subscript to a Name (line 372):
    
    # Assigning a Subscript to a Name (line 372):
    
    # Obtaining the type of the subscript
    slice_35046 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 372, 8), None, None, None)
    int_35047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 372, 17), 'int')
    # Getting the type of 'adata' (line 372)
    adata_35048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 8), 'adata')
    # Obtaining the member '__getitem__' of a type (line 372)
    getitem___35049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 372, 8), adata_35048, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 372)
    subscript_call_result_35050 = invoke(stypy.reporting.localization.Localization(__file__, 372, 8), getitem___35049, (slice_35046, int_35047))
    
    # Assigning a type to the variable 'x' (line 372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'x', subscript_call_result_35050)
    
    # Assigning a Subscript to a Name (line 373):
    
    # Assigning a Subscript to a Name (line 373):
    
    # Assigning a Subscript to a Name (line 373):
    
    # Obtaining the type of the subscript
    slice_35051 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 373, 9), None, None, None)
    int_35052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 18), 'int')
    # Getting the type of 'adata' (line 373)
    adata_35053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 9), 'adata')
    # Obtaining the member '__getitem__' of a type (line 373)
    getitem___35054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 9), adata_35053, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 373)
    subscript_call_result_35055 = invoke(stypy.reporting.localization.Localization(__file__, 373, 9), getitem___35054, (slice_35051, int_35052))
    
    # Assigning a type to the variable 'y0' (line 373)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 4), 'y0', subscript_call_result_35055)
    
    # Assigning a Subscript to a Name (line 374):
    
    # Assigning a Subscript to a Name (line 374):
    
    # Assigning a Subscript to a Name (line 374):
    
    # Obtaining the type of the subscript
    slice_35056 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 374, 9), None, None, None)
    int_35057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 374, 18), 'int')
    # Getting the type of 'adata' (line 374)
    adata_35058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 9), 'adata')
    # Obtaining the member '__getitem__' of a type (line 374)
    getitem___35059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 9), adata_35058, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 374)
    subscript_call_result_35060 = invoke(stypy.reporting.localization.Localization(__file__, 374, 9), getitem___35059, (slice_35056, int_35057))
    
    # Assigning a type to the variable 'y1' (line 374)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 4), 'y1', subscript_call_result_35060)
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_35061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 9), 'int')
    # Getting the type of 'x' (line 376)
    x_35062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 7), 'x')
    # Obtaining the member '__getitem__' of a type (line 376)
    getitem___35063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 7), x_35062, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 376)
    subscript_call_result_35064 = invoke(stypy.reporting.localization.Localization(__file__, 376, 7), getitem___35063, int_35061)
    
    float_35065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 15), 'float')
    # Applying the binary operator '!=' (line 376)
    result_ne_35066 = python_operator(stypy.reporting.localization.Localization(__file__, 376, 7), '!=', subscript_call_result_35064, float_35065)
    
    
    
    # Obtaining the type of the subscript
    int_35067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 23), 'int')
    # Getting the type of 'x' (line 376)
    x_35068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 21), 'x')
    # Obtaining the member '__getitem__' of a type (line 376)
    getitem___35069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 21), x_35068, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 376)
    subscript_call_result_35070 = invoke(stypy.reporting.localization.Localization(__file__, 376, 21), getitem___35069, int_35067)
    
    float_35071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 30), 'float')
    # Applying the binary operator '!=' (line 376)
    result_ne_35072 = python_operator(stypy.reporting.localization.Localization(__file__, 376, 21), '!=', subscript_call_result_35070, float_35071)
    
    # Applying the binary operator 'or' (line 376)
    result_or_keyword_35073 = python_operator(stypy.reporting.localization.Localization(__file__, 376, 7), 'or', result_ne_35066, result_ne_35072)
    
    # Testing the type of an if condition (line 376)
    if_condition_35074 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 376, 4), result_or_keyword_35073)
    # Assigning a type to the variable 'if_condition_35074' (line 376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 4), 'if_condition_35074', if_condition_35074)
    # SSA begins for if statement (line 376)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 377)
    # Processing the call arguments (line 377)
    unicode_35076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 378, 12), 'unicode', u'data mapping points must start with x=0 and end with x=1')
    # Processing the call keyword arguments (line 377)
    kwargs_35077 = {}
    # Getting the type of 'ValueError' (line 377)
    ValueError_35075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 377)
    ValueError_call_result_35078 = invoke(stypy.reporting.localization.Localization(__file__, 377, 14), ValueError_35075, *[unicode_35076], **kwargs_35077)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 377, 8), ValueError_call_result_35078, 'raise parameter', BaseException)
    # SSA join for if statement (line 376)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 379)
    # Processing the call keyword arguments (line 379)
    kwargs_35087 = {}
    
    
    # Call to diff(...): (line 379)
    # Processing the call arguments (line 379)
    # Getting the type of 'x' (line 379)
    x_35081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 16), 'x', False)
    # Processing the call keyword arguments (line 379)
    kwargs_35082 = {}
    # Getting the type of 'np' (line 379)
    np_35079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 8), 'np', False)
    # Obtaining the member 'diff' of a type (line 379)
    diff_35080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 8), np_35079, 'diff')
    # Calling diff(args, kwargs) (line 379)
    diff_call_result_35083 = invoke(stypy.reporting.localization.Localization(__file__, 379, 8), diff_35080, *[x_35081], **kwargs_35082)
    
    int_35084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 21), 'int')
    # Applying the binary operator '<' (line 379)
    result_lt_35085 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 8), '<', diff_call_result_35083, int_35084)
    
    # Obtaining the member 'any' of a type (line 379)
    any_35086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 8), result_lt_35085, 'any')
    # Calling any(args, kwargs) (line 379)
    any_call_result_35088 = invoke(stypy.reporting.localization.Localization(__file__, 379, 8), any_35086, *[], **kwargs_35087)
    
    # Testing the type of an if condition (line 379)
    if_condition_35089 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 379, 4), any_call_result_35088)
    # Assigning a type to the variable 'if_condition_35089' (line 379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 4), 'if_condition_35089', if_condition_35089)
    # SSA begins for if statement (line 379)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 380)
    # Processing the call arguments (line 380)
    unicode_35091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 380, 25), 'unicode', u'data mapping points must have x in increasing order')
    # Processing the call keyword arguments (line 380)
    kwargs_35092 = {}
    # Getting the type of 'ValueError' (line 380)
    ValueError_35090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 380)
    ValueError_call_result_35093 = invoke(stypy.reporting.localization.Localization(__file__, 380, 14), ValueError_35090, *[unicode_35091], **kwargs_35092)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 380, 8), ValueError_call_result_35093, 'raise parameter', BaseException)
    # SSA join for if statement (line 379)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 382):
    
    # Assigning a BinOp to a Name (line 382):
    
    # Assigning a BinOp to a Name (line 382):
    # Getting the type of 'x' (line 382)
    x_35094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'x')
    # Getting the type of 'N' (line 382)
    N_35095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 13), 'N')
    int_35096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, 17), 'int')
    # Applying the binary operator '-' (line 382)
    result_sub_35097 = python_operator(stypy.reporting.localization.Localization(__file__, 382, 13), '-', N_35095, int_35096)
    
    # Applying the binary operator '*' (line 382)
    result_mul_35098 = python_operator(stypy.reporting.localization.Localization(__file__, 382, 8), '*', x_35094, result_sub_35097)
    
    # Assigning a type to the variable 'x' (line 382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 4), 'x', result_mul_35098)
    
    # Assigning a Call to a Name (line 383):
    
    # Assigning a Call to a Name (line 383):
    
    # Assigning a Call to a Name (line 383):
    
    # Call to zeros(...): (line 383)
    # Processing the call arguments (line 383)
    
    # Obtaining an instance of the builtin type 'tuple' (line 383)
    tuple_35101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 383, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 383)
    # Adding element type (line 383)
    # Getting the type of 'N' (line 383)
    N_35102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 20), 'N', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 383, 20), tuple_35101, N_35102)
    
    # Getting the type of 'float' (line 383)
    float_35103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 25), 'float', False)
    # Processing the call keyword arguments (line 383)
    kwargs_35104 = {}
    # Getting the type of 'np' (line 383)
    np_35099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 10), 'np', False)
    # Obtaining the member 'zeros' of a type (line 383)
    zeros_35100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 10), np_35099, 'zeros')
    # Calling zeros(args, kwargs) (line 383)
    zeros_call_result_35105 = invoke(stypy.reporting.localization.Localization(__file__, 383, 10), zeros_35100, *[tuple_35101, float_35103], **kwargs_35104)
    
    # Assigning a type to the variable 'lut' (line 383)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 4), 'lut', zeros_call_result_35105)
    
    # Assigning a BinOp to a Name (line 384):
    
    # Assigning a BinOp to a Name (line 384):
    
    # Assigning a BinOp to a Name (line 384):
    # Getting the type of 'N' (line 384)
    N_35106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 12), 'N')
    int_35107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 16), 'int')
    # Applying the binary operator '-' (line 384)
    result_sub_35108 = python_operator(stypy.reporting.localization.Localization(__file__, 384, 12), '-', N_35106, int_35107)
    
    
    # Call to linspace(...): (line 384)
    # Processing the call arguments (line 384)
    int_35111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 33), 'int')
    int_35112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 36), 'int')
    # Getting the type of 'N' (line 384)
    N_35113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 39), 'N', False)
    # Processing the call keyword arguments (line 384)
    kwargs_35114 = {}
    # Getting the type of 'np' (line 384)
    np_35109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 21), 'np', False)
    # Obtaining the member 'linspace' of a type (line 384)
    linspace_35110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 21), np_35109, 'linspace')
    # Calling linspace(args, kwargs) (line 384)
    linspace_call_result_35115 = invoke(stypy.reporting.localization.Localization(__file__, 384, 21), linspace_35110, *[int_35111, int_35112, N_35113], **kwargs_35114)
    
    # Getting the type of 'gamma' (line 384)
    gamma_35116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 45), 'gamma')
    # Applying the binary operator '**' (line 384)
    result_pow_35117 = python_operator(stypy.reporting.localization.Localization(__file__, 384, 21), '**', linspace_call_result_35115, gamma_35116)
    
    # Applying the binary operator '*' (line 384)
    result_mul_35118 = python_operator(stypy.reporting.localization.Localization(__file__, 384, 11), '*', result_sub_35108, result_pow_35117)
    
    # Assigning a type to the variable 'xind' (line 384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 4), 'xind', result_mul_35118)
    
    # Assigning a Subscript to a Name (line 385):
    
    # Assigning a Subscript to a Name (line 385):
    
    # Assigning a Subscript to a Name (line 385):
    
    # Obtaining the type of the subscript
    int_35119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, 35), 'int')
    int_35120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, 37), 'int')
    slice_35121 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 385, 10), int_35119, int_35120, None)
    
    # Call to searchsorted(...): (line 385)
    # Processing the call arguments (line 385)
    # Getting the type of 'x' (line 385)
    x_35124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 26), 'x', False)
    # Getting the type of 'xind' (line 385)
    xind_35125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 29), 'xind', False)
    # Processing the call keyword arguments (line 385)
    kwargs_35126 = {}
    # Getting the type of 'np' (line 385)
    np_35122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 10), 'np', False)
    # Obtaining the member 'searchsorted' of a type (line 385)
    searchsorted_35123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 10), np_35122, 'searchsorted')
    # Calling searchsorted(args, kwargs) (line 385)
    searchsorted_call_result_35127 = invoke(stypy.reporting.localization.Localization(__file__, 385, 10), searchsorted_35123, *[x_35124, xind_35125], **kwargs_35126)
    
    # Obtaining the member '__getitem__' of a type (line 385)
    getitem___35128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 10), searchsorted_call_result_35127, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 385)
    subscript_call_result_35129 = invoke(stypy.reporting.localization.Localization(__file__, 385, 10), getitem___35128, slice_35121)
    
    # Assigning a type to the variable 'ind' (line 385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 4), 'ind', subscript_call_result_35129)
    
    # Assigning a BinOp to a Name (line 387):
    
    # Assigning a BinOp to a Name (line 387):
    
    # Assigning a BinOp to a Name (line 387):
    
    # Obtaining the type of the subscript
    int_35130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 21), 'int')
    int_35131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 23), 'int')
    slice_35132 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 387, 16), int_35130, int_35131, None)
    # Getting the type of 'xind' (line 387)
    xind_35133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 16), 'xind')
    # Obtaining the member '__getitem__' of a type (line 387)
    getitem___35134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 16), xind_35133, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 387)
    subscript_call_result_35135 = invoke(stypy.reporting.localization.Localization(__file__, 387, 16), getitem___35134, slice_35132)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 387)
    ind_35136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 31), 'ind')
    int_35137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 37), 'int')
    # Applying the binary operator '-' (line 387)
    result_sub_35138 = python_operator(stypy.reporting.localization.Localization(__file__, 387, 31), '-', ind_35136, int_35137)
    
    # Getting the type of 'x' (line 387)
    x_35139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 29), 'x')
    # Obtaining the member '__getitem__' of a type (line 387)
    getitem___35140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 29), x_35139, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 387)
    subscript_call_result_35141 = invoke(stypy.reporting.localization.Localization(__file__, 387, 29), getitem___35140, result_sub_35138)
    
    # Applying the binary operator '-' (line 387)
    result_sub_35142 = python_operator(stypy.reporting.localization.Localization(__file__, 387, 16), '-', subscript_call_result_35135, subscript_call_result_35141)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 387)
    ind_35143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 46), 'ind')
    # Getting the type of 'x' (line 387)
    x_35144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 44), 'x')
    # Obtaining the member '__getitem__' of a type (line 387)
    getitem___35145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 44), x_35144, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 387)
    subscript_call_result_35146 = invoke(stypy.reporting.localization.Localization(__file__, 387, 44), getitem___35145, ind_35143)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 387)
    ind_35147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 55), 'ind')
    int_35148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 61), 'int')
    # Applying the binary operator '-' (line 387)
    result_sub_35149 = python_operator(stypy.reporting.localization.Localization(__file__, 387, 55), '-', ind_35147, int_35148)
    
    # Getting the type of 'x' (line 387)
    x_35150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 53), 'x')
    # Obtaining the member '__getitem__' of a type (line 387)
    getitem___35151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 53), x_35150, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 387)
    subscript_call_result_35152 = invoke(stypy.reporting.localization.Localization(__file__, 387, 53), getitem___35151, result_sub_35149)
    
    # Applying the binary operator '-' (line 387)
    result_sub_35153 = python_operator(stypy.reporting.localization.Localization(__file__, 387, 44), '-', subscript_call_result_35146, subscript_call_result_35152)
    
    # Applying the binary operator 'div' (line 387)
    result_div_35154 = python_operator(stypy.reporting.localization.Localization(__file__, 387, 15), 'div', result_sub_35142, result_sub_35153)
    
    # Assigning a type to the variable 'distance' (line 387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 4), 'distance', result_div_35154)
    
    # Assigning a BinOp to a Subscript (line 388):
    
    # Assigning a BinOp to a Subscript (line 388):
    
    # Assigning a BinOp to a Subscript (line 388):
    # Getting the type of 'distance' (line 388)
    distance_35155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 16), 'distance')
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 388)
    ind_35156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 31), 'ind')
    # Getting the type of 'y0' (line 388)
    y0_35157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 28), 'y0')
    # Obtaining the member '__getitem__' of a type (line 388)
    getitem___35158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 28), y0_35157, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 388)
    subscript_call_result_35159 = invoke(stypy.reporting.localization.Localization(__file__, 388, 28), getitem___35158, ind_35156)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 388)
    ind_35160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 41), 'ind')
    int_35161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 47), 'int')
    # Applying the binary operator '-' (line 388)
    result_sub_35162 = python_operator(stypy.reporting.localization.Localization(__file__, 388, 41), '-', ind_35160, int_35161)
    
    # Getting the type of 'y1' (line 388)
    y1_35163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 38), 'y1')
    # Obtaining the member '__getitem__' of a type (line 388)
    getitem___35164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 38), y1_35163, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 388)
    subscript_call_result_35165 = invoke(stypy.reporting.localization.Localization(__file__, 388, 38), getitem___35164, result_sub_35162)
    
    # Applying the binary operator '-' (line 388)
    result_sub_35166 = python_operator(stypy.reporting.localization.Localization(__file__, 388, 28), '-', subscript_call_result_35159, subscript_call_result_35165)
    
    # Applying the binary operator '*' (line 388)
    result_mul_35167 = python_operator(stypy.reporting.localization.Localization(__file__, 388, 16), '*', distance_35155, result_sub_35166)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 388)
    ind_35168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 56), 'ind')
    int_35169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 62), 'int')
    # Applying the binary operator '-' (line 388)
    result_sub_35170 = python_operator(stypy.reporting.localization.Localization(__file__, 388, 56), '-', ind_35168, int_35169)
    
    # Getting the type of 'y1' (line 388)
    y1_35171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 53), 'y1')
    # Obtaining the member '__getitem__' of a type (line 388)
    getitem___35172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 53), y1_35171, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 388)
    subscript_call_result_35173 = invoke(stypy.reporting.localization.Localization(__file__, 388, 53), getitem___35172, result_sub_35170)
    
    # Applying the binary operator '+' (line 388)
    result_add_35174 = python_operator(stypy.reporting.localization.Localization(__file__, 388, 16), '+', result_mul_35167, subscript_call_result_35173)
    
    # Getting the type of 'lut' (line 388)
    lut_35175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 4), 'lut')
    int_35176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 8), 'int')
    int_35177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 10), 'int')
    slice_35178 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 388, 4), int_35176, int_35177, None)
    # Storing an element on a container (line 388)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 388, 4), lut_35175, (slice_35178, result_add_35174))
    
    # Assigning a Subscript to a Subscript (line 389):
    
    # Assigning a Subscript to a Subscript (line 389):
    
    # Assigning a Subscript to a Subscript (line 389):
    
    # Obtaining the type of the subscript
    int_35179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 16), 'int')
    # Getting the type of 'y1' (line 389)
    y1_35180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 13), 'y1')
    # Obtaining the member '__getitem__' of a type (line 389)
    getitem___35181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 13), y1_35180, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 389)
    subscript_call_result_35182 = invoke(stypy.reporting.localization.Localization(__file__, 389, 13), getitem___35181, int_35179)
    
    # Getting the type of 'lut' (line 389)
    lut_35183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 4), 'lut')
    int_35184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 8), 'int')
    # Storing an element on a container (line 389)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 389, 4), lut_35183, (int_35184, subscript_call_result_35182))
    
    # Assigning a Subscript to a Subscript (line 390):
    
    # Assigning a Subscript to a Subscript (line 390):
    
    # Assigning a Subscript to a Subscript (line 390):
    
    # Obtaining the type of the subscript
    int_35185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 17), 'int')
    # Getting the type of 'y0' (line 390)
    y0_35186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 14), 'y0')
    # Obtaining the member '__getitem__' of a type (line 390)
    getitem___35187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 14), y0_35186, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 390)
    subscript_call_result_35188 = invoke(stypy.reporting.localization.Localization(__file__, 390, 14), getitem___35187, int_35185)
    
    # Getting the type of 'lut' (line 390)
    lut_35189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 4), 'lut')
    int_35190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 8), 'int')
    # Storing an element on a container (line 390)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 390, 4), lut_35189, (int_35190, subscript_call_result_35188))
    
    # Call to clip(...): (line 392)
    # Processing the call arguments (line 392)
    # Getting the type of 'lut' (line 392)
    lut_35193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 19), 'lut', False)
    float_35194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 24), 'float')
    float_35195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 29), 'float')
    # Processing the call keyword arguments (line 392)
    kwargs_35196 = {}
    # Getting the type of 'np' (line 392)
    np_35191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 11), 'np', False)
    # Obtaining the member 'clip' of a type (line 392)
    clip_35192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 11), np_35191, 'clip')
    # Calling clip(args, kwargs) (line 392)
    clip_call_result_35197 = invoke(stypy.reporting.localization.Localization(__file__, 392, 11), clip_35192, *[lut_35193, float_35194, float_35195], **kwargs_35196)
    
    # Assigning a type to the variable 'stypy_return_type' (line 392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 4), 'stypy_return_type', clip_call_result_35197)
    
    # ################# End of 'makeMappingArray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'makeMappingArray' in the type store
    # Getting the type of 'stypy_return_type' (line 338)
    stypy_return_type_35198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_35198)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'makeMappingArray'
    return stypy_return_type_35198

# Assigning a type to the variable 'makeMappingArray' (line 338)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 338, 0), 'makeMappingArray', makeMappingArray)
# Declaration of the 'Colormap' class

class Colormap(object, ):
    unicode_35199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 406, (-1)), 'unicode', u'\n    Baseclass for all scalar to RGBA mappings.\n\n    Typically Colormap instances are used to convert data values (floats) from\n    the interval ``[0, 1]`` to the RGBA color that the respective Colormap\n    represents. For scaling of data into the ``[0, 1]`` interval see\n    :class:`matplotlib.colors.Normalize`. It is worth noting that\n    :class:`matplotlib.cm.ScalarMappable` subclasses make heavy use of this\n    ``data->normalize->map-to-color`` processing chain.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_35200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 407, 31), 'int')
        defaults = [int_35200]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 407, 4, False)
        # Assigning a type to the variable 'self' (line 408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colormap.__init__', ['name', 'N'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['name', 'N'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_35201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, (-1)), 'unicode', u'\n        Parameters\n        ----------\n        name : str\n            The name of the colormap.\n        N : int\n            The number of rgb quantization levels.\n\n        ')
        
        # Assigning a Name to a Attribute (line 417):
        
        # Assigning a Name to a Attribute (line 417):
        
        # Assigning a Name to a Attribute (line 417):
        # Getting the type of 'name' (line 417)
        name_35202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 20), 'name')
        # Getting the type of 'self' (line 417)
        self_35203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 8), 'self')
        # Setting the type of the member 'name' of a type (line 417)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 8), self_35203, 'name', name_35202)
        
        # Assigning a Call to a Attribute (line 418):
        
        # Assigning a Call to a Attribute (line 418):
        
        # Assigning a Call to a Attribute (line 418):
        
        # Call to int(...): (line 418)
        # Processing the call arguments (line 418)
        # Getting the type of 'N' (line 418)
        N_35205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 21), 'N', False)
        # Processing the call keyword arguments (line 418)
        kwargs_35206 = {}
        # Getting the type of 'int' (line 418)
        int_35204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 17), 'int', False)
        # Calling int(args, kwargs) (line 418)
        int_call_result_35207 = invoke(stypy.reporting.localization.Localization(__file__, 418, 17), int_35204, *[N_35205], **kwargs_35206)
        
        # Getting the type of 'self' (line 418)
        self_35208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'self')
        # Setting the type of the member 'N' of a type (line 418)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 8), self_35208, 'N', int_call_result_35207)
        
        # Assigning a Tuple to a Attribute (line 419):
        
        # Assigning a Tuple to a Attribute (line 419):
        
        # Assigning a Tuple to a Attribute (line 419):
        
        # Obtaining an instance of the builtin type 'tuple' (line 419)
        tuple_35209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 419)
        # Adding element type (line 419)
        float_35210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 26), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 419, 26), tuple_35209, float_35210)
        # Adding element type (line 419)
        float_35211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 31), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 419, 26), tuple_35209, float_35211)
        # Adding element type (line 419)
        float_35212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 419, 26), tuple_35209, float_35212)
        # Adding element type (line 419)
        float_35213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 41), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 419, 26), tuple_35209, float_35213)
        
        # Getting the type of 'self' (line 419)
        self_35214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 8), 'self')
        # Setting the type of the member '_rgba_bad' of a type (line 419)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 419, 8), self_35214, '_rgba_bad', tuple_35209)
        
        # Assigning a Name to a Attribute (line 420):
        
        # Assigning a Name to a Attribute (line 420):
        
        # Assigning a Name to a Attribute (line 420):
        # Getting the type of 'None' (line 420)
        None_35215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 27), 'None')
        # Getting the type of 'self' (line 420)
        self_35216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 8), 'self')
        # Setting the type of the member '_rgba_under' of a type (line 420)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 8), self_35216, '_rgba_under', None_35215)
        
        # Assigning a Name to a Attribute (line 421):
        
        # Assigning a Name to a Attribute (line 421):
        
        # Assigning a Name to a Attribute (line 421):
        # Getting the type of 'None' (line 421)
        None_35217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 26), 'None')
        # Getting the type of 'self' (line 421)
        self_35218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 8), 'self')
        # Setting the type of the member '_rgba_over' of a type (line 421)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 8), self_35218, '_rgba_over', None_35217)
        
        # Assigning a Attribute to a Attribute (line 422):
        
        # Assigning a Attribute to a Attribute (line 422):
        
        # Assigning a Attribute to a Attribute (line 422):
        # Getting the type of 'self' (line 422)
        self_35219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 24), 'self')
        # Obtaining the member 'N' of a type (line 422)
        N_35220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 24), self_35219, 'N')
        # Getting the type of 'self' (line 422)
        self_35221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 8), 'self')
        # Setting the type of the member '_i_under' of a type (line 422)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 8), self_35221, '_i_under', N_35220)
        
        # Assigning a BinOp to a Attribute (line 423):
        
        # Assigning a BinOp to a Attribute (line 423):
        
        # Assigning a BinOp to a Attribute (line 423):
        # Getting the type of 'self' (line 423)
        self_35222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 23), 'self')
        # Obtaining the member 'N' of a type (line 423)
        N_35223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 23), self_35222, 'N')
        int_35224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 423, 32), 'int')
        # Applying the binary operator '+' (line 423)
        result_add_35225 = python_operator(stypy.reporting.localization.Localization(__file__, 423, 23), '+', N_35223, int_35224)
        
        # Getting the type of 'self' (line 423)
        self_35226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 8), 'self')
        # Setting the type of the member '_i_over' of a type (line 423)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 8), self_35226, '_i_over', result_add_35225)
        
        # Assigning a BinOp to a Attribute (line 424):
        
        # Assigning a BinOp to a Attribute (line 424):
        
        # Assigning a BinOp to a Attribute (line 424):
        # Getting the type of 'self' (line 424)
        self_35227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 22), 'self')
        # Obtaining the member 'N' of a type (line 424)
        N_35228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 424, 22), self_35227, 'N')
        int_35229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 424, 31), 'int')
        # Applying the binary operator '+' (line 424)
        result_add_35230 = python_operator(stypy.reporting.localization.Localization(__file__, 424, 22), '+', N_35228, int_35229)
        
        # Getting the type of 'self' (line 424)
        self_35231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 8), 'self')
        # Setting the type of the member '_i_bad' of a type (line 424)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 424, 8), self_35231, '_i_bad', result_add_35230)
        
        # Assigning a Name to a Attribute (line 425):
        
        # Assigning a Name to a Attribute (line 425):
        
        # Assigning a Name to a Attribute (line 425):
        # Getting the type of 'False' (line 425)
        False_35232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 23), 'False')
        # Getting the type of 'self' (line 425)
        self_35233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 8), 'self')
        # Setting the type of the member '_isinit' of a type (line 425)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 8), self_35233, '_isinit', False_35232)
        
        # Assigning a Name to a Attribute (line 431):
        
        # Assigning a Name to a Attribute (line 431):
        
        # Assigning a Name to a Attribute (line 431):
        # Getting the type of 'False' (line 431)
        False_35234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 31), 'False')
        # Getting the type of 'self' (line 431)
        self_35235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 8), 'self')
        # Setting the type of the member 'colorbar_extend' of a type (line 431)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 8), self_35235, 'colorbar_extend', False_35234)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 433)
        None_35236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 32), 'None')
        # Getting the type of 'False' (line 433)
        False_35237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 44), 'False')
        defaults = [None_35236, False_35237]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 433, 4, False)
        # Assigning a type to the variable 'self' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colormap.__call__.__dict__.__setitem__('stypy_localization', localization)
        Colormap.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colormap.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colormap.__call__.__dict__.__setitem__('stypy_function_name', 'Colormap.__call__')
        Colormap.__call__.__dict__.__setitem__('stypy_param_names_list', ['X', 'alpha', 'bytes'])
        Colormap.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colormap.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colormap.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colormap.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colormap.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colormap.__call__.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colormap.__call__', ['X', 'alpha', 'bytes'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['X', 'alpha', 'bytes'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_35238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, (-1)), 'unicode', u'\n        Parameters\n        ----------\n        X : scalar, ndarray\n            The data value(s) to convert to RGBA.\n            For floats, X should be in the interval ``[0.0, 1.0]`` to\n            return the RGBA values ``X*100`` percent along the Colormap line.\n            For integers, X should be in the interval ``[0, Colormap.N)`` to\n            return RGBA values *indexed* from the Colormap with index ``X``.\n        alpha : float, None\n            Alpha must be a scalar between 0 and 1, or None.\n        bytes : bool\n            If False (default), the returned RGBA values will be floats in the\n            interval ``[0, 1]`` otherwise they will be uint8s in the interval\n            ``[0, 255]``.\n\n        Returns\n        -------\n        Tuple of RGBA values if X is scalar, othewise an array of\n        RGBA values with a shape of ``X.shape + (4, )``.\n\n        ')
        
        
        # Getting the type of 'self' (line 457)
        self_35239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 15), 'self')
        # Obtaining the member '_isinit' of a type (line 457)
        _isinit_35240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 15), self_35239, '_isinit')
        # Applying the 'not' unary operator (line 457)
        result_not__35241 = python_operator(stypy.reporting.localization.Localization(__file__, 457, 11), 'not', _isinit_35240)
        
        # Testing the type of an if condition (line 457)
        if_condition_35242 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 457, 8), result_not__35241)
        # Assigning a type to the variable 'if_condition_35242' (line 457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 8), 'if_condition_35242', if_condition_35242)
        # SSA begins for if statement (line 457)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _init(...): (line 458)
        # Processing the call keyword arguments (line 458)
        kwargs_35245 = {}
        # Getting the type of 'self' (line 458)
        self_35243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 12), 'self', False)
        # Obtaining the member '_init' of a type (line 458)
        _init_35244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 12), self_35243, '_init')
        # Calling _init(args, kwargs) (line 458)
        _init_call_result_35246 = invoke(stypy.reporting.localization.Localization(__file__, 458, 12), _init_35244, *[], **kwargs_35245)
        
        # SSA join for if statement (line 457)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 459):
        
        # Assigning a Name to a Name (line 459):
        
        # Assigning a Name to a Name (line 459):
        # Getting the type of 'None' (line 459)
        None_35247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 19), 'None')
        # Assigning a type to the variable 'mask_bad' (line 459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 459, 8), 'mask_bad', None_35247)
        
        
        
        # Call to iterable(...): (line 460)
        # Processing the call arguments (line 460)
        # Getting the type of 'X' (line 460)
        X_35250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 30), 'X', False)
        # Processing the call keyword arguments (line 460)
        kwargs_35251 = {}
        # Getting the type of 'cbook' (line 460)
        cbook_35248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 15), 'cbook', False)
        # Obtaining the member 'iterable' of a type (line 460)
        iterable_35249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 15), cbook_35248, 'iterable')
        # Calling iterable(args, kwargs) (line 460)
        iterable_call_result_35252 = invoke(stypy.reporting.localization.Localization(__file__, 460, 15), iterable_35249, *[X_35250], **kwargs_35251)
        
        # Applying the 'not' unary operator (line 460)
        result_not__35253 = python_operator(stypy.reporting.localization.Localization(__file__, 460, 11), 'not', iterable_call_result_35252)
        
        # Testing the type of an if condition (line 460)
        if_condition_35254 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 460, 8), result_not__35253)
        # Assigning a type to the variable 'if_condition_35254' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'if_condition_35254', if_condition_35254)
        # SSA begins for if statement (line 460)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 461):
        
        # Assigning a Str to a Name (line 461):
        
        # Assigning a Str to a Name (line 461):
        unicode_35255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, 20), 'unicode', u'scalar')
        # Assigning a type to the variable 'vtype' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 12), 'vtype', unicode_35255)
        
        # Assigning a Call to a Name (line 462):
        
        # Assigning a Call to a Name (line 462):
        
        # Assigning a Call to a Name (line 462):
        
        # Call to array(...): (line 462)
        # Processing the call arguments (line 462)
        
        # Obtaining an instance of the builtin type 'list' (line 462)
        list_35258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 462, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 462)
        # Adding element type (line 462)
        # Getting the type of 'X' (line 462)
        X_35259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 27), 'X', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 462, 26), list_35258, X_35259)
        
        # Processing the call keyword arguments (line 462)
        kwargs_35260 = {}
        # Getting the type of 'np' (line 462)
        np_35256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 17), 'np', False)
        # Obtaining the member 'array' of a type (line 462)
        array_35257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 462, 17), np_35256, 'array')
        # Calling array(args, kwargs) (line 462)
        array_call_result_35261 = invoke(stypy.reporting.localization.Localization(__file__, 462, 17), array_35257, *[list_35258], **kwargs_35260)
        
        # Assigning a type to the variable 'xa' (line 462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 12), 'xa', array_call_result_35261)
        # SSA branch for the else part of an if statement (line 460)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 464):
        
        # Assigning a Str to a Name (line 464):
        
        # Assigning a Str to a Name (line 464):
        unicode_35262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 20), 'unicode', u'array')
        # Assigning a type to the variable 'vtype' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 12), 'vtype', unicode_35262)
        
        # Assigning a Call to a Name (line 465):
        
        # Assigning a Call to a Name (line 465):
        
        # Assigning a Call to a Name (line 465):
        
        # Call to array(...): (line 465)
        # Processing the call arguments (line 465)
        # Getting the type of 'X' (line 465)
        X_35266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 30), 'X', False)
        # Processing the call keyword arguments (line 465)
        # Getting the type of 'True' (line 465)
        True_35267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 38), 'True', False)
        keyword_35268 = True_35267
        kwargs_35269 = {'copy': keyword_35268}
        # Getting the type of 'np' (line 465)
        np_35263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 18), 'np', False)
        # Obtaining the member 'ma' of a type (line 465)
        ma_35264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 18), np_35263, 'ma')
        # Obtaining the member 'array' of a type (line 465)
        array_35265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 18), ma_35264, 'array')
        # Calling array(args, kwargs) (line 465)
        array_call_result_35270 = invoke(stypy.reporting.localization.Localization(__file__, 465, 18), array_35265, *[X_35266], **kwargs_35269)
        
        # Assigning a type to the variable 'xma' (line 465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 465, 12), 'xma', array_call_result_35270)
        
        # Assigning a Attribute to a Name (line 466):
        
        # Assigning a Attribute to a Name (line 466):
        
        # Assigning a Attribute to a Name (line 466):
        # Getting the type of 'xma' (line 466)
        xma_35271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 23), 'xma')
        # Obtaining the member 'mask' of a type (line 466)
        mask_35272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 23), xma_35271, 'mask')
        # Assigning a type to the variable 'mask_bad' (line 466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'mask_bad', mask_35272)
        
        # Assigning a Call to a Name (line 467):
        
        # Assigning a Call to a Name (line 467):
        
        # Assigning a Call to a Name (line 467):
        
        # Call to filled(...): (line 467)
        # Processing the call keyword arguments (line 467)
        kwargs_35275 = {}
        # Getting the type of 'xma' (line 467)
        xma_35273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 17), 'xma', False)
        # Obtaining the member 'filled' of a type (line 467)
        filled_35274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 17), xma_35273, 'filled')
        # Calling filled(args, kwargs) (line 467)
        filled_call_result_35276 = invoke(stypy.reporting.localization.Localization(__file__, 467, 17), filled_35274, *[], **kwargs_35275)
        
        # Assigning a type to the variable 'xa' (line 467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 467, 12), 'xa', filled_call_result_35276)
        # Deleting a member
        module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 468, 12), module_type_store, 'xma')
        # SSA join for if statement (line 460)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'xa' (line 473)
        xa_35277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 15), 'xa')
        # Obtaining the member 'dtype' of a type (line 473)
        dtype_35278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 15), xa_35277, 'dtype')
        # Obtaining the member 'isnative' of a type (line 473)
        isnative_35279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 15), dtype_35278, 'isnative')
        # Applying the 'not' unary operator (line 473)
        result_not__35280 = python_operator(stypy.reporting.localization.Localization(__file__, 473, 11), 'not', isnative_35279)
        
        # Testing the type of an if condition (line 473)
        if_condition_35281 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 473, 8), result_not__35280)
        # Assigning a type to the variable 'if_condition_35281' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'if_condition_35281', if_condition_35281)
        # SSA begins for if statement (line 473)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 474):
        
        # Assigning a Call to a Name (line 474):
        
        # Assigning a Call to a Name (line 474):
        
        # Call to newbyteorder(...): (line 474)
        # Processing the call keyword arguments (line 474)
        kwargs_35287 = {}
        
        # Call to byteswap(...): (line 474)
        # Processing the call keyword arguments (line 474)
        kwargs_35284 = {}
        # Getting the type of 'xa' (line 474)
        xa_35282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 17), 'xa', False)
        # Obtaining the member 'byteswap' of a type (line 474)
        byteswap_35283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 17), xa_35282, 'byteswap')
        # Calling byteswap(args, kwargs) (line 474)
        byteswap_call_result_35285 = invoke(stypy.reporting.localization.Localization(__file__, 474, 17), byteswap_35283, *[], **kwargs_35284)
        
        # Obtaining the member 'newbyteorder' of a type (line 474)
        newbyteorder_35286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 17), byteswap_call_result_35285, 'newbyteorder')
        # Calling newbyteorder(args, kwargs) (line 474)
        newbyteorder_call_result_35288 = invoke(stypy.reporting.localization.Localization(__file__, 474, 17), newbyteorder_35286, *[], **kwargs_35287)
        
        # Assigning a type to the variable 'xa' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 12), 'xa', newbyteorder_call_result_35288)
        # SSA join for if statement (line 473)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'xa' (line 476)
        xa_35289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 11), 'xa')
        # Obtaining the member 'dtype' of a type (line 476)
        dtype_35290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 11), xa_35289, 'dtype')
        # Obtaining the member 'kind' of a type (line 476)
        kind_35291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 11), dtype_35290, 'kind')
        unicode_35292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 476, 28), 'unicode', u'f')
        # Applying the binary operator '==' (line 476)
        result_eq_35293 = python_operator(stypy.reporting.localization.Localization(__file__, 476, 11), '==', kind_35291, unicode_35292)
        
        # Testing the type of an if condition (line 476)
        if_condition_35294 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 476, 8), result_eq_35293)
        # Assigning a type to the variable 'if_condition_35294' (line 476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 8), 'if_condition_35294', if_condition_35294)
        # SSA begins for if statement (line 476)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 478):
        
        # Assigning a Call to a Name (line 478):
        
        # Assigning a Call to a Name (line 478):
        
        # Call to array(...): (line 478)
        # Processing the call arguments (line 478)
        
        # Obtaining an instance of the builtin type 'list' (line 478)
        list_35297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 478)
        # Adding element type (line 478)
        int_35298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 478, 28), list_35297, int_35298)
        # Adding element type (line 478)
        int_35299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 478, 28), list_35297, int_35299)
        
        # Processing the call keyword arguments (line 478)
        # Getting the type of 'xa' (line 478)
        xa_35300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 42), 'xa', False)
        # Obtaining the member 'dtype' of a type (line 478)
        dtype_35301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 42), xa_35300, 'dtype')
        keyword_35302 = dtype_35301
        kwargs_35303 = {'dtype': keyword_35302}
        # Getting the type of 'np' (line 478)
        np_35295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 19), 'np', False)
        # Obtaining the member 'array' of a type (line 478)
        array_35296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 19), np_35295, 'array')
        # Calling array(args, kwargs) (line 478)
        array_call_result_35304 = invoke(stypy.reporting.localization.Localization(__file__, 478, 19), array_35296, *[list_35297], **kwargs_35303)
        
        # Assigning a type to the variable 'vals' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 12), 'vals', array_call_result_35304)
        
        # Assigning a Call to a Name (line 479):
        
        # Assigning a Call to a Name (line 479):
        
        # Assigning a Call to a Name (line 479):
        
        # Call to nextafter(...): (line 479)
        # Getting the type of 'vals' (line 479)
        vals_35307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 39), 'vals', False)
        # Processing the call keyword arguments (line 479)
        kwargs_35308 = {}
        # Getting the type of 'np' (line 479)
        np_35305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 25), 'np', False)
        # Obtaining the member 'nextafter' of a type (line 479)
        nextafter_35306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 479, 25), np_35305, 'nextafter')
        # Calling nextafter(args, kwargs) (line 479)
        nextafter_call_result_35309 = invoke(stypy.reporting.localization.Localization(__file__, 479, 25), nextafter_35306, *[vals_35307], **kwargs_35308)
        
        # Assigning a type to the variable 'almost_one' (line 479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 12), 'almost_one', nextafter_call_result_35309)
        
        # Call to copyto(...): (line 480)
        # Processing the call arguments (line 480)
        # Getting the type of 'xa' (line 480)
        xa_35312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 22), 'xa', False)
        # Getting the type of 'almost_one' (line 480)
        almost_one_35313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 26), 'almost_one', False)
        # Processing the call keyword arguments (line 480)
        
        # Getting the type of 'xa' (line 480)
        xa_35314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 44), 'xa', False)
        float_35315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 50), 'float')
        # Applying the binary operator '==' (line 480)
        result_eq_35316 = python_operator(stypy.reporting.localization.Localization(__file__, 480, 44), '==', xa_35314, float_35315)
        
        keyword_35317 = result_eq_35316
        kwargs_35318 = {'where': keyword_35317}
        # Getting the type of 'np' (line 480)
        np_35310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 12), 'np', False)
        # Obtaining the member 'copyto' of a type (line 480)
        copyto_35311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 12), np_35310, 'copyto')
        # Calling copyto(args, kwargs) (line 480)
        copyto_call_result_35319 = invoke(stypy.reporting.localization.Localization(__file__, 480, 12), copyto_35311, *[xa_35312, almost_one_35313], **kwargs_35318)
        
        
        # Getting the type of 'xa' (line 484)
        xa_35320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 12), 'xa')
        # Getting the type of 'self' (line 484)
        self_35321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 18), 'self')
        # Obtaining the member 'N' of a type (line 484)
        N_35322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 18), self_35321, 'N')
        # Applying the binary operator '*=' (line 484)
        result_imul_35323 = python_operator(stypy.reporting.localization.Localization(__file__, 484, 12), '*=', xa_35320, N_35322)
        # Assigning a type to the variable 'xa' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 12), 'xa', result_imul_35323)
        
        
        # Call to clip(...): (line 485)
        # Processing the call arguments (line 485)
        # Getting the type of 'xa' (line 485)
        xa_35326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 20), 'xa', False)
        int_35327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 24), 'int')
        # Getting the type of 'self' (line 485)
        self_35328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 28), 'self', False)
        # Obtaining the member 'N' of a type (line 485)
        N_35329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 28), self_35328, 'N')
        # Processing the call keyword arguments (line 485)
        # Getting the type of 'xa' (line 485)
        xa_35330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 40), 'xa', False)
        keyword_35331 = xa_35330
        kwargs_35332 = {'out': keyword_35331}
        # Getting the type of 'np' (line 485)
        np_35324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 12), 'np', False)
        # Obtaining the member 'clip' of a type (line 485)
        clip_35325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 12), np_35324, 'clip')
        # Calling clip(args, kwargs) (line 485)
        clip_call_result_35333 = invoke(stypy.reporting.localization.Localization(__file__, 485, 12), clip_35325, *[xa_35326, int_35327, N_35329], **kwargs_35332)
        
        
        # Call to copyto(...): (line 489)
        # Processing the call arguments (line 489)
        # Getting the type of 'xa' (line 489)
        xa_35336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 22), 'xa', False)
        int_35337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 26), 'int')
        # Processing the call keyword arguments (line 489)
        
        # Getting the type of 'xa' (line 489)
        xa_35338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 36), 'xa', False)
        float_35339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 41), 'float')
        # Applying the binary operator '<' (line 489)
        result_lt_35340 = python_operator(stypy.reporting.localization.Localization(__file__, 489, 36), '<', xa_35338, float_35339)
        
        keyword_35341 = result_lt_35340
        kwargs_35342 = {'where': keyword_35341}
        # Getting the type of 'np' (line 489)
        np_35334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 12), 'np', False)
        # Obtaining the member 'copyto' of a type (line 489)
        copyto_35335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 12), np_35334, 'copyto')
        # Calling copyto(args, kwargs) (line 489)
        copyto_call_result_35343 = invoke(stypy.reporting.localization.Localization(__file__, 489, 12), copyto_35335, *[xa_35336, int_35337], **kwargs_35342)
        
        
        # Assigning a Call to a Name (line 490):
        
        # Assigning a Call to a Name (line 490):
        
        # Assigning a Call to a Name (line 490):
        
        # Call to astype(...): (line 490)
        # Processing the call arguments (line 490)
        # Getting the type of 'int' (line 490)
        int_35346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 27), 'int', False)
        # Processing the call keyword arguments (line 490)
        kwargs_35347 = {}
        # Getting the type of 'xa' (line 490)
        xa_35344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 17), 'xa', False)
        # Obtaining the member 'astype' of a type (line 490)
        astype_35345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 17), xa_35344, 'astype')
        # Calling astype(args, kwargs) (line 490)
        astype_call_result_35348 = invoke(stypy.reporting.localization.Localization(__file__, 490, 17), astype_35345, *[int_35346], **kwargs_35347)
        
        # Assigning a type to the variable 'xa' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 12), 'xa', astype_call_result_35348)
        # SSA join for if statement (line 476)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to copyto(...): (line 493)
        # Processing the call arguments (line 493)
        # Getting the type of 'xa' (line 493)
        xa_35351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 18), 'xa', False)
        # Getting the type of 'self' (line 493)
        self_35352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 22), 'self', False)
        # Obtaining the member '_i_over' of a type (line 493)
        _i_over_35353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 22), self_35352, '_i_over')
        # Processing the call keyword arguments (line 493)
        
        # Getting the type of 'xa' (line 493)
        xa_35354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 42), 'xa', False)
        # Getting the type of 'self' (line 493)
        self_35355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 47), 'self', False)
        # Obtaining the member 'N' of a type (line 493)
        N_35356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 47), self_35355, 'N')
        int_35357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 56), 'int')
        # Applying the binary operator '-' (line 493)
        result_sub_35358 = python_operator(stypy.reporting.localization.Localization(__file__, 493, 47), '-', N_35356, int_35357)
        
        # Applying the binary operator '>' (line 493)
        result_gt_35359 = python_operator(stypy.reporting.localization.Localization(__file__, 493, 42), '>', xa_35354, result_sub_35358)
        
        keyword_35360 = result_gt_35359
        kwargs_35361 = {'where': keyword_35360}
        # Getting the type of 'np' (line 493)
        np_35349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'np', False)
        # Obtaining the member 'copyto' of a type (line 493)
        copyto_35350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 8), np_35349, 'copyto')
        # Calling copyto(args, kwargs) (line 493)
        copyto_call_result_35362 = invoke(stypy.reporting.localization.Localization(__file__, 493, 8), copyto_35350, *[xa_35351, _i_over_35353], **kwargs_35361)
        
        
        # Call to copyto(...): (line 494)
        # Processing the call arguments (line 494)
        # Getting the type of 'xa' (line 494)
        xa_35365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 18), 'xa', False)
        # Getting the type of 'self' (line 494)
        self_35366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 22), 'self', False)
        # Obtaining the member '_i_under' of a type (line 494)
        _i_under_35367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 22), self_35366, '_i_under')
        # Processing the call keyword arguments (line 494)
        
        # Getting the type of 'xa' (line 494)
        xa_35368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 43), 'xa', False)
        int_35369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 48), 'int')
        # Applying the binary operator '<' (line 494)
        result_lt_35370 = python_operator(stypy.reporting.localization.Localization(__file__, 494, 43), '<', xa_35368, int_35369)
        
        keyword_35371 = result_lt_35370
        kwargs_35372 = {'where': keyword_35371}
        # Getting the type of 'np' (line 494)
        np_35363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 8), 'np', False)
        # Obtaining the member 'copyto' of a type (line 494)
        copyto_35364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 8), np_35363, 'copyto')
        # Calling copyto(args, kwargs) (line 494)
        copyto_call_result_35373 = invoke(stypy.reporting.localization.Localization(__file__, 494, 8), copyto_35364, *[xa_35365, _i_under_35367], **kwargs_35372)
        
        
        # Type idiom detected: calculating its left and rigth part (line 495)
        # Getting the type of 'mask_bad' (line 495)
        mask_bad_35374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 8), 'mask_bad')
        # Getting the type of 'None' (line 495)
        None_35375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 27), 'None')
        
        (may_be_35376, more_types_in_union_35377) = may_not_be_none(mask_bad_35374, None_35375)

        if may_be_35376:

            if more_types_in_union_35377:
                # Runtime conditional SSA (line 495)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Getting the type of 'mask_bad' (line 496)
            mask_bad_35378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 15), 'mask_bad')
            # Obtaining the member 'shape' of a type (line 496)
            shape_35379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 15), mask_bad_35378, 'shape')
            # Getting the type of 'xa' (line 496)
            xa_35380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 33), 'xa')
            # Obtaining the member 'shape' of a type (line 496)
            shape_35381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 33), xa_35380, 'shape')
            # Applying the binary operator '==' (line 496)
            result_eq_35382 = python_operator(stypy.reporting.localization.Localization(__file__, 496, 15), '==', shape_35379, shape_35381)
            
            # Testing the type of an if condition (line 496)
            if_condition_35383 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 496, 12), result_eq_35382)
            # Assigning a type to the variable 'if_condition_35383' (line 496)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 12), 'if_condition_35383', if_condition_35383)
            # SSA begins for if statement (line 496)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to copyto(...): (line 497)
            # Processing the call arguments (line 497)
            # Getting the type of 'xa' (line 497)
            xa_35386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 26), 'xa', False)
            # Getting the type of 'self' (line 497)
            self_35387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 30), 'self', False)
            # Obtaining the member '_i_bad' of a type (line 497)
            _i_bad_35388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 30), self_35387, '_i_bad')
            # Processing the call keyword arguments (line 497)
            # Getting the type of 'mask_bad' (line 497)
            mask_bad_35389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 49), 'mask_bad', False)
            keyword_35390 = mask_bad_35389
            kwargs_35391 = {'where': keyword_35390}
            # Getting the type of 'np' (line 497)
            np_35384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 16), 'np', False)
            # Obtaining the member 'copyto' of a type (line 497)
            copyto_35385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 16), np_35384, 'copyto')
            # Calling copyto(args, kwargs) (line 497)
            copyto_call_result_35392 = invoke(stypy.reporting.localization.Localization(__file__, 497, 16), copyto_35385, *[xa_35386, _i_bad_35388], **kwargs_35391)
            
            # SSA branch for the else part of an if statement (line 496)
            module_type_store.open_ssa_branch('else')
            
            # Getting the type of 'mask_bad' (line 498)
            mask_bad_35393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 17), 'mask_bad')
            # Testing the type of an if condition (line 498)
            if_condition_35394 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 498, 17), mask_bad_35393)
            # Assigning a type to the variable 'if_condition_35394' (line 498)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 17), 'if_condition_35394', if_condition_35394)
            # SSA begins for if statement (line 498)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to fill(...): (line 499)
            # Processing the call arguments (line 499)
            # Getting the type of 'self' (line 499)
            self_35397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 24), 'self', False)
            # Obtaining the member '_i_bad' of a type (line 499)
            _i_bad_35398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 24), self_35397, '_i_bad')
            # Processing the call keyword arguments (line 499)
            kwargs_35399 = {}
            # Getting the type of 'xa' (line 499)
            xa_35395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 16), 'xa', False)
            # Obtaining the member 'fill' of a type (line 499)
            fill_35396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 16), xa_35395, 'fill')
            # Calling fill(args, kwargs) (line 499)
            fill_call_result_35400 = invoke(stypy.reporting.localization.Localization(__file__, 499, 16), fill_35396, *[_i_bad_35398], **kwargs_35399)
            
            # SSA join for if statement (line 498)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 496)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_35377:
                # SSA join for if statement (line 495)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'bytes' (line 500)
        bytes_35401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 11), 'bytes')
        # Testing the type of an if condition (line 500)
        if_condition_35402 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 500, 8), bytes_35401)
        # Assigning a type to the variable 'if_condition_35402' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 8), 'if_condition_35402', if_condition_35402)
        # SSA begins for if statement (line 500)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 501):
        
        # Assigning a Call to a Name (line 501):
        
        # Assigning a Call to a Name (line 501):
        
        # Call to astype(...): (line 501)
        # Processing the call arguments (line 501)
        # Getting the type of 'np' (line 501)
        np_35408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 43), 'np', False)
        # Obtaining the member 'uint8' of a type (line 501)
        uint8_35409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 501, 43), np_35408, 'uint8')
        # Processing the call keyword arguments (line 501)
        kwargs_35410 = {}
        # Getting the type of 'self' (line 501)
        self_35403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 19), 'self', False)
        # Obtaining the member '_lut' of a type (line 501)
        _lut_35404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 501, 19), self_35403, '_lut')
        int_35405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 501, 31), 'int')
        # Applying the binary operator '*' (line 501)
        result_mul_35406 = python_operator(stypy.reporting.localization.Localization(__file__, 501, 19), '*', _lut_35404, int_35405)
        
        # Obtaining the member 'astype' of a type (line 501)
        astype_35407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 501, 19), result_mul_35406, 'astype')
        # Calling astype(args, kwargs) (line 501)
        astype_call_result_35411 = invoke(stypy.reporting.localization.Localization(__file__, 501, 19), astype_35407, *[uint8_35409], **kwargs_35410)
        
        # Assigning a type to the variable 'lut' (line 501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 12), 'lut', astype_call_result_35411)
        # SSA branch for the else part of an if statement (line 500)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 503):
        
        # Assigning a Call to a Name (line 503):
        
        # Assigning a Call to a Name (line 503):
        
        # Call to copy(...): (line 503)
        # Processing the call keyword arguments (line 503)
        kwargs_35415 = {}
        # Getting the type of 'self' (line 503)
        self_35412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 18), 'self', False)
        # Obtaining the member '_lut' of a type (line 503)
        _lut_35413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 18), self_35412, '_lut')
        # Obtaining the member 'copy' of a type (line 503)
        copy_35414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 18), _lut_35413, 'copy')
        # Calling copy(args, kwargs) (line 503)
        copy_call_result_35416 = invoke(stypy.reporting.localization.Localization(__file__, 503, 18), copy_35414, *[], **kwargs_35415)
        
        # Assigning a type to the variable 'lut' (line 503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 12), 'lut', copy_call_result_35416)
        # SSA join for if statement (line 500)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 505)
        # Getting the type of 'alpha' (line 505)
        alpha_35417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 8), 'alpha')
        # Getting the type of 'None' (line 505)
        None_35418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 24), 'None')
        
        (may_be_35419, more_types_in_union_35420) = may_not_be_none(alpha_35417, None_35418)

        if may_be_35419:

            if more_types_in_union_35420:
                # Runtime conditional SSA (line 505)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 506):
            
            # Assigning a Call to a Name (line 506):
            
            # Assigning a Call to a Name (line 506):
            
            # Call to min(...): (line 506)
            # Processing the call arguments (line 506)
            # Getting the type of 'alpha' (line 506)
            alpha_35422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 24), 'alpha', False)
            float_35423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 506, 31), 'float')
            # Processing the call keyword arguments (line 506)
            kwargs_35424 = {}
            # Getting the type of 'min' (line 506)
            min_35421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 20), 'min', False)
            # Calling min(args, kwargs) (line 506)
            min_call_result_35425 = invoke(stypy.reporting.localization.Localization(__file__, 506, 20), min_35421, *[alpha_35422, float_35423], **kwargs_35424)
            
            # Assigning a type to the variable 'alpha' (line 506)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 506, 12), 'alpha', min_call_result_35425)
            
            # Assigning a Call to a Name (line 507):
            
            # Assigning a Call to a Name (line 507):
            
            # Assigning a Call to a Name (line 507):
            
            # Call to max(...): (line 507)
            # Processing the call arguments (line 507)
            # Getting the type of 'alpha' (line 507)
            alpha_35427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 24), 'alpha', False)
            float_35428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 507, 31), 'float')
            # Processing the call keyword arguments (line 507)
            kwargs_35429 = {}
            # Getting the type of 'max' (line 507)
            max_35426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 20), 'max', False)
            # Calling max(args, kwargs) (line 507)
            max_call_result_35430 = invoke(stypy.reporting.localization.Localization(__file__, 507, 20), max_35426, *[alpha_35427, float_35428], **kwargs_35429)
            
            # Assigning a type to the variable 'alpha' (line 507)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 507, 12), 'alpha', max_call_result_35430)
            
            # Getting the type of 'bytes' (line 508)
            bytes_35431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 15), 'bytes')
            # Testing the type of an if condition (line 508)
            if_condition_35432 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 508, 12), bytes_35431)
            # Assigning a type to the variable 'if_condition_35432' (line 508)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 12), 'if_condition_35432', if_condition_35432)
            # SSA begins for if statement (line 508)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 509):
            
            # Assigning a Call to a Name (line 509):
            
            # Assigning a Call to a Name (line 509):
            
            # Call to int(...): (line 509)
            # Processing the call arguments (line 509)
            # Getting the type of 'alpha' (line 509)
            alpha_35434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 28), 'alpha', False)
            int_35435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 36), 'int')
            # Applying the binary operator '*' (line 509)
            result_mul_35436 = python_operator(stypy.reporting.localization.Localization(__file__, 509, 28), '*', alpha_35434, int_35435)
            
            # Processing the call keyword arguments (line 509)
            kwargs_35437 = {}
            # Getting the type of 'int' (line 509)
            int_35433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 24), 'int', False)
            # Calling int(args, kwargs) (line 509)
            int_call_result_35438 = invoke(stypy.reporting.localization.Localization(__file__, 509, 24), int_35433, *[result_mul_35436], **kwargs_35437)
            
            # Assigning a type to the variable 'alpha' (line 509)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 16), 'alpha', int_call_result_35438)
            # SSA join for if statement (line 508)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Call to all(...): (line 510)
            # Processing the call keyword arguments (line 510)
            kwargs_35446 = {}
            
            
            # Obtaining the type of the subscript
            int_35439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 20), 'int')
            # Getting the type of 'lut' (line 510)
            lut_35440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 16), 'lut', False)
            # Obtaining the member '__getitem__' of a type (line 510)
            getitem___35441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 16), lut_35440, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 510)
            subscript_call_result_35442 = invoke(stypy.reporting.localization.Localization(__file__, 510, 16), getitem___35441, int_35439)
            
            int_35443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 27), 'int')
            # Applying the binary operator '==' (line 510)
            result_eq_35444 = python_operator(stypy.reporting.localization.Localization(__file__, 510, 16), '==', subscript_call_result_35442, int_35443)
            
            # Obtaining the member 'all' of a type (line 510)
            all_35445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 16), result_eq_35444, 'all')
            # Calling all(args, kwargs) (line 510)
            all_call_result_35447 = invoke(stypy.reporting.localization.Localization(__file__, 510, 16), all_35445, *[], **kwargs_35446)
            
            # Testing the type of an if condition (line 510)
            if_condition_35448 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 510, 12), all_call_result_35447)
            # Assigning a type to the variable 'if_condition_35448' (line 510)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 12), 'if_condition_35448', if_condition_35448)
            # SSA begins for if statement (line 510)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Subscript (line 511):
            
            # Assigning a Name to a Subscript (line 511):
            
            # Assigning a Name to a Subscript (line 511):
            # Getting the type of 'alpha' (line 511)
            alpha_35449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 31), 'alpha')
            # Getting the type of 'lut' (line 511)
            lut_35450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 16), 'lut')
            int_35451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 21), 'int')
            slice_35452 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 511, 16), None, int_35451, None)
            int_35453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 25), 'int')
            # Storing an element on a container (line 511)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 511, 16), lut_35450, ((slice_35452, int_35453), alpha_35449))
            # SSA branch for the else part of an if statement (line 510)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Subscript (line 516):
            
            # Assigning a Name to a Subscript (line 516):
            
            # Assigning a Name to a Subscript (line 516):
            # Getting the type of 'alpha' (line 516)
            alpha_35454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 29), 'alpha')
            # Getting the type of 'lut' (line 516)
            lut_35455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 16), 'lut')
            slice_35456 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 516, 16), None, None, None)
            int_35457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 516, 23), 'int')
            # Storing an element on a container (line 516)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 516, 16), lut_35455, ((slice_35456, int_35457), alpha_35454))
            # SSA join for if statement (line 510)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_35420:
                # SSA join for if statement (line 505)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 520):
        
        # Assigning a Call to a Name (line 520):
        
        # Assigning a Call to a Name (line 520):
        
        # Call to empty(...): (line 520)
        # Processing the call keyword arguments (line 520)
        # Getting the type of 'xa' (line 520)
        xa_35460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 30), 'xa', False)
        # Obtaining the member 'shape' of a type (line 520)
        shape_35461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 30), xa_35460, 'shape')
        
        # Obtaining an instance of the builtin type 'tuple' (line 520)
        tuple_35462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 520)
        # Adding element type (line 520)
        int_35463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 42), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 520, 42), tuple_35462, int_35463)
        
        # Applying the binary operator '+' (line 520)
        result_add_35464 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 30), '+', shape_35461, tuple_35462)
        
        keyword_35465 = result_add_35464
        # Getting the type of 'lut' (line 520)
        lut_35466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 53), 'lut', False)
        # Obtaining the member 'dtype' of a type (line 520)
        dtype_35467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 53), lut_35466, 'dtype')
        keyword_35468 = dtype_35467
        kwargs_35469 = {'dtype': keyword_35468, 'shape': keyword_35465}
        # Getting the type of 'np' (line 520)
        np_35458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 15), 'np', False)
        # Obtaining the member 'empty' of a type (line 520)
        empty_35459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 15), np_35458, 'empty')
        # Calling empty(args, kwargs) (line 520)
        empty_call_result_35470 = invoke(stypy.reporting.localization.Localization(__file__, 520, 15), empty_35459, *[], **kwargs_35469)
        
        # Assigning a type to the variable 'rgba' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 8), 'rgba', empty_call_result_35470)
        
        # Call to take(...): (line 521)
        # Processing the call arguments (line 521)
        # Getting the type of 'xa' (line 521)
        xa_35473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 17), 'xa', False)
        # Processing the call keyword arguments (line 521)
        int_35474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, 26), 'int')
        keyword_35475 = int_35474
        unicode_35476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, 34), 'unicode', u'clip')
        keyword_35477 = unicode_35476
        # Getting the type of 'rgba' (line 521)
        rgba_35478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 46), 'rgba', False)
        keyword_35479 = rgba_35478
        kwargs_35480 = {'out': keyword_35479, 'mode': keyword_35477, 'axis': keyword_35475}
        # Getting the type of 'lut' (line 521)
        lut_35471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 8), 'lut', False)
        # Obtaining the member 'take' of a type (line 521)
        take_35472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 8), lut_35471, 'take')
        # Calling take(args, kwargs) (line 521)
        take_call_result_35481 = invoke(stypy.reporting.localization.Localization(__file__, 521, 8), take_35472, *[xa_35473], **kwargs_35480)
        
        
        
        # Getting the type of 'vtype' (line 522)
        vtype_35482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 11), 'vtype')
        unicode_35483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 522, 20), 'unicode', u'scalar')
        # Applying the binary operator '==' (line 522)
        result_eq_35484 = python_operator(stypy.reporting.localization.Localization(__file__, 522, 11), '==', vtype_35482, unicode_35483)
        
        # Testing the type of an if condition (line 522)
        if_condition_35485 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 522, 8), result_eq_35484)
        # Assigning a type to the variable 'if_condition_35485' (line 522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 8), 'if_condition_35485', if_condition_35485)
        # SSA begins for if statement (line 522)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 523):
        
        # Assigning a Call to a Name (line 523):
        
        # Assigning a Call to a Name (line 523):
        
        # Call to tuple(...): (line 523)
        # Processing the call arguments (line 523)
        
        # Obtaining the type of the subscript
        int_35487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 30), 'int')
        slice_35488 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 523, 25), None, None, None)
        # Getting the type of 'rgba' (line 523)
        rgba_35489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 25), 'rgba', False)
        # Obtaining the member '__getitem__' of a type (line 523)
        getitem___35490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 25), rgba_35489, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 523)
        subscript_call_result_35491 = invoke(stypy.reporting.localization.Localization(__file__, 523, 25), getitem___35490, (int_35487, slice_35488))
        
        # Processing the call keyword arguments (line 523)
        kwargs_35492 = {}
        # Getting the type of 'tuple' (line 523)
        tuple_35486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 19), 'tuple', False)
        # Calling tuple(args, kwargs) (line 523)
        tuple_call_result_35493 = invoke(stypy.reporting.localization.Localization(__file__, 523, 19), tuple_35486, *[subscript_call_result_35491], **kwargs_35492)
        
        # Assigning a type to the variable 'rgba' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 12), 'rgba', tuple_call_result_35493)
        # SSA join for if statement (line 522)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'rgba' (line 524)
        rgba_35494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 15), 'rgba')
        # Assigning a type to the variable 'stypy_return_type' (line 524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 8), 'stypy_return_type', rgba_35494)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 433)
        stypy_return_type_35495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_35495)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_35495


    @norecursion
    def __copy__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__copy__'
        module_type_store = module_type_store.open_function_context('__copy__', 526, 4, False)
        # Assigning a type to the variable 'self' (line 527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 527, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colormap.__copy__.__dict__.__setitem__('stypy_localization', localization)
        Colormap.__copy__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colormap.__copy__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colormap.__copy__.__dict__.__setitem__('stypy_function_name', 'Colormap.__copy__')
        Colormap.__copy__.__dict__.__setitem__('stypy_param_names_list', [])
        Colormap.__copy__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colormap.__copy__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colormap.__copy__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colormap.__copy__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colormap.__copy__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colormap.__copy__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colormap.__copy__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__copy__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__copy__(...)' code ##################

        unicode_35496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, (-1)), 'unicode', u'Create new object with the same class, update attributes\n        ')
        
        # Assigning a Attribute to a Name (line 529):
        
        # Assigning a Attribute to a Name (line 529):
        
        # Assigning a Attribute to a Name (line 529):
        # Getting the type of 'self' (line 529)
        self_35497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 14), 'self')
        # Obtaining the member '__class__' of a type (line 529)
        class___35498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 14), self_35497, '__class__')
        # Assigning a type to the variable 'cls' (line 529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 8), 'cls', class___35498)
        
        # Assigning a Call to a Name (line 530):
        
        # Assigning a Call to a Name (line 530):
        
        # Assigning a Call to a Name (line 530):
        
        # Call to __new__(...): (line 530)
        # Processing the call arguments (line 530)
        # Getting the type of 'cls' (line 530)
        cls_35501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 33), 'cls', False)
        # Processing the call keyword arguments (line 530)
        kwargs_35502 = {}
        # Getting the type of 'cls' (line 530)
        cls_35499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 21), 'cls', False)
        # Obtaining the member '__new__' of a type (line 530)
        new___35500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 21), cls_35499, '__new__')
        # Calling __new__(args, kwargs) (line 530)
        new___call_result_35503 = invoke(stypy.reporting.localization.Localization(__file__, 530, 21), new___35500, *[cls_35501], **kwargs_35502)
        
        # Assigning a type to the variable 'cmapobject' (line 530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 8), 'cmapobject', new___call_result_35503)
        
        # Call to update(...): (line 531)
        # Processing the call arguments (line 531)
        # Getting the type of 'self' (line 531)
        self_35507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 35), 'self', False)
        # Obtaining the member '__dict__' of a type (line 531)
        dict___35508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 35), self_35507, '__dict__')
        # Processing the call keyword arguments (line 531)
        kwargs_35509 = {}
        # Getting the type of 'cmapobject' (line 531)
        cmapobject_35504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'cmapobject', False)
        # Obtaining the member '__dict__' of a type (line 531)
        dict___35505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 8), cmapobject_35504, '__dict__')
        # Obtaining the member 'update' of a type (line 531)
        update_35506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 8), dict___35505, 'update')
        # Calling update(args, kwargs) (line 531)
        update_call_result_35510 = invoke(stypy.reporting.localization.Localization(__file__, 531, 8), update_35506, *[dict___35508], **kwargs_35509)
        
        
        # Getting the type of 'self' (line 532)
        self_35511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 11), 'self')
        # Obtaining the member '_isinit' of a type (line 532)
        _isinit_35512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 11), self_35511, '_isinit')
        # Testing the type of an if condition (line 532)
        if_condition_35513 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 532, 8), _isinit_35512)
        # Assigning a type to the variable 'if_condition_35513' (line 532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 8), 'if_condition_35513', if_condition_35513)
        # SSA begins for if statement (line 532)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 533):
        
        # Assigning a Call to a Attribute (line 533):
        
        # Assigning a Call to a Attribute (line 533):
        
        # Call to copy(...): (line 533)
        # Processing the call arguments (line 533)
        # Getting the type of 'self' (line 533)
        self_35516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 38), 'self', False)
        # Obtaining the member '_lut' of a type (line 533)
        _lut_35517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 38), self_35516, '_lut')
        # Processing the call keyword arguments (line 533)
        kwargs_35518 = {}
        # Getting the type of 'np' (line 533)
        np_35514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 30), 'np', False)
        # Obtaining the member 'copy' of a type (line 533)
        copy_35515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 30), np_35514, 'copy')
        # Calling copy(args, kwargs) (line 533)
        copy_call_result_35519 = invoke(stypy.reporting.localization.Localization(__file__, 533, 30), copy_35515, *[_lut_35517], **kwargs_35518)
        
        # Getting the type of 'cmapobject' (line 533)
        cmapobject_35520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 12), 'cmapobject')
        # Setting the type of the member '_lut' of a type (line 533)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 12), cmapobject_35520, '_lut', copy_call_result_35519)
        # SSA join for if statement (line 532)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'cmapobject' (line 534)
        cmapobject_35521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 15), 'cmapobject')
        # Assigning a type to the variable 'stypy_return_type' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'stypy_return_type', cmapobject_35521)
        
        # ################# End of '__copy__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__copy__' in the type store
        # Getting the type of 'stypy_return_type' (line 526)
        stypy_return_type_35522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_35522)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__copy__'
        return stypy_return_type_35522


    @norecursion
    def set_bad(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_35523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 536, 28), 'unicode', u'k')
        # Getting the type of 'None' (line 536)
        None_35524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 39), 'None')
        defaults = [unicode_35523, None_35524]
        # Create a new context for function 'set_bad'
        module_type_store = module_type_store.open_function_context('set_bad', 536, 4, False)
        # Assigning a type to the variable 'self' (line 537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colormap.set_bad.__dict__.__setitem__('stypy_localization', localization)
        Colormap.set_bad.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colormap.set_bad.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colormap.set_bad.__dict__.__setitem__('stypy_function_name', 'Colormap.set_bad')
        Colormap.set_bad.__dict__.__setitem__('stypy_param_names_list', ['color', 'alpha'])
        Colormap.set_bad.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colormap.set_bad.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colormap.set_bad.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colormap.set_bad.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colormap.set_bad.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colormap.set_bad.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colormap.set_bad', ['color', 'alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_bad', localization, ['color', 'alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_bad(...)' code ##################

        unicode_35525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, (-1)), 'unicode', u'Set color to be used for masked values.\n        ')
        
        # Assigning a Call to a Attribute (line 539):
        
        # Assigning a Call to a Attribute (line 539):
        
        # Assigning a Call to a Attribute (line 539):
        
        # Call to to_rgba(...): (line 539)
        # Processing the call arguments (line 539)
        # Getting the type of 'color' (line 539)
        color_35528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 48), 'color', False)
        # Getting the type of 'alpha' (line 539)
        alpha_35529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 55), 'alpha', False)
        # Processing the call keyword arguments (line 539)
        kwargs_35530 = {}
        # Getting the type of 'colorConverter' (line 539)
        colorConverter_35526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 25), 'colorConverter', False)
        # Obtaining the member 'to_rgba' of a type (line 539)
        to_rgba_35527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 25), colorConverter_35526, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 539)
        to_rgba_call_result_35531 = invoke(stypy.reporting.localization.Localization(__file__, 539, 25), to_rgba_35527, *[color_35528, alpha_35529], **kwargs_35530)
        
        # Getting the type of 'self' (line 539)
        self_35532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 8), 'self')
        # Setting the type of the member '_rgba_bad' of a type (line 539)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 8), self_35532, '_rgba_bad', to_rgba_call_result_35531)
        
        # Getting the type of 'self' (line 540)
        self_35533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 11), 'self')
        # Obtaining the member '_isinit' of a type (line 540)
        _isinit_35534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 11), self_35533, '_isinit')
        # Testing the type of an if condition (line 540)
        if_condition_35535 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 540, 8), _isinit_35534)
        # Assigning a type to the variable 'if_condition_35535' (line 540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 8), 'if_condition_35535', if_condition_35535)
        # SSA begins for if statement (line 540)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _set_extremes(...): (line 541)
        # Processing the call keyword arguments (line 541)
        kwargs_35538 = {}
        # Getting the type of 'self' (line 541)
        self_35536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 12), 'self', False)
        # Obtaining the member '_set_extremes' of a type (line 541)
        _set_extremes_35537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 12), self_35536, '_set_extremes')
        # Calling _set_extremes(args, kwargs) (line 541)
        _set_extremes_call_result_35539 = invoke(stypy.reporting.localization.Localization(__file__, 541, 12), _set_extremes_35537, *[], **kwargs_35538)
        
        # SSA join for if statement (line 540)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_bad(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_bad' in the type store
        # Getting the type of 'stypy_return_type' (line 536)
        stypy_return_type_35540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_35540)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_bad'
        return stypy_return_type_35540


    @norecursion
    def set_under(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_35541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 30), 'unicode', u'k')
        # Getting the type of 'None' (line 543)
        None_35542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 41), 'None')
        defaults = [unicode_35541, None_35542]
        # Create a new context for function 'set_under'
        module_type_store = module_type_store.open_function_context('set_under', 543, 4, False)
        # Assigning a type to the variable 'self' (line 544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colormap.set_under.__dict__.__setitem__('stypy_localization', localization)
        Colormap.set_under.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colormap.set_under.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colormap.set_under.__dict__.__setitem__('stypy_function_name', 'Colormap.set_under')
        Colormap.set_under.__dict__.__setitem__('stypy_param_names_list', ['color', 'alpha'])
        Colormap.set_under.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colormap.set_under.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colormap.set_under.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colormap.set_under.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colormap.set_under.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colormap.set_under.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colormap.set_under', ['color', 'alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_under', localization, ['color', 'alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_under(...)' code ##################

        unicode_35543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, (-1)), 'unicode', u'Set color to be used for low out-of-range values.\n           Requires norm.clip = False\n        ')
        
        # Assigning a Call to a Attribute (line 547):
        
        # Assigning a Call to a Attribute (line 547):
        
        # Assigning a Call to a Attribute (line 547):
        
        # Call to to_rgba(...): (line 547)
        # Processing the call arguments (line 547)
        # Getting the type of 'color' (line 547)
        color_35546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 50), 'color', False)
        # Getting the type of 'alpha' (line 547)
        alpha_35547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 57), 'alpha', False)
        # Processing the call keyword arguments (line 547)
        kwargs_35548 = {}
        # Getting the type of 'colorConverter' (line 547)
        colorConverter_35544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 27), 'colorConverter', False)
        # Obtaining the member 'to_rgba' of a type (line 547)
        to_rgba_35545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 27), colorConverter_35544, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 547)
        to_rgba_call_result_35549 = invoke(stypy.reporting.localization.Localization(__file__, 547, 27), to_rgba_35545, *[color_35546, alpha_35547], **kwargs_35548)
        
        # Getting the type of 'self' (line 547)
        self_35550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 8), 'self')
        # Setting the type of the member '_rgba_under' of a type (line 547)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 8), self_35550, '_rgba_under', to_rgba_call_result_35549)
        
        # Getting the type of 'self' (line 548)
        self_35551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 11), 'self')
        # Obtaining the member '_isinit' of a type (line 548)
        _isinit_35552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 11), self_35551, '_isinit')
        # Testing the type of an if condition (line 548)
        if_condition_35553 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 548, 8), _isinit_35552)
        # Assigning a type to the variable 'if_condition_35553' (line 548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 8), 'if_condition_35553', if_condition_35553)
        # SSA begins for if statement (line 548)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _set_extremes(...): (line 549)
        # Processing the call keyword arguments (line 549)
        kwargs_35556 = {}
        # Getting the type of 'self' (line 549)
        self_35554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'self', False)
        # Obtaining the member '_set_extremes' of a type (line 549)
        _set_extremes_35555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 12), self_35554, '_set_extremes')
        # Calling _set_extremes(args, kwargs) (line 549)
        _set_extremes_call_result_35557 = invoke(stypy.reporting.localization.Localization(__file__, 549, 12), _set_extremes_35555, *[], **kwargs_35556)
        
        # SSA join for if statement (line 548)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_under(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_under' in the type store
        # Getting the type of 'stypy_return_type' (line 543)
        stypy_return_type_35558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_35558)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_under'
        return stypy_return_type_35558


    @norecursion
    def set_over(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_35559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 29), 'unicode', u'k')
        # Getting the type of 'None' (line 551)
        None_35560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 40), 'None')
        defaults = [unicode_35559, None_35560]
        # Create a new context for function 'set_over'
        module_type_store = module_type_store.open_function_context('set_over', 551, 4, False)
        # Assigning a type to the variable 'self' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colormap.set_over.__dict__.__setitem__('stypy_localization', localization)
        Colormap.set_over.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colormap.set_over.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colormap.set_over.__dict__.__setitem__('stypy_function_name', 'Colormap.set_over')
        Colormap.set_over.__dict__.__setitem__('stypy_param_names_list', ['color', 'alpha'])
        Colormap.set_over.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colormap.set_over.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colormap.set_over.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colormap.set_over.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colormap.set_over.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colormap.set_over.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colormap.set_over', ['color', 'alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_over', localization, ['color', 'alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_over(...)' code ##################

        unicode_35561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, (-1)), 'unicode', u'Set color to be used for high out-of-range values.\n           Requires norm.clip = False\n        ')
        
        # Assigning a Call to a Attribute (line 555):
        
        # Assigning a Call to a Attribute (line 555):
        
        # Assigning a Call to a Attribute (line 555):
        
        # Call to to_rgba(...): (line 555)
        # Processing the call arguments (line 555)
        # Getting the type of 'color' (line 555)
        color_35564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 49), 'color', False)
        # Getting the type of 'alpha' (line 555)
        alpha_35565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 56), 'alpha', False)
        # Processing the call keyword arguments (line 555)
        kwargs_35566 = {}
        # Getting the type of 'colorConverter' (line 555)
        colorConverter_35562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 26), 'colorConverter', False)
        # Obtaining the member 'to_rgba' of a type (line 555)
        to_rgba_35563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 26), colorConverter_35562, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 555)
        to_rgba_call_result_35567 = invoke(stypy.reporting.localization.Localization(__file__, 555, 26), to_rgba_35563, *[color_35564, alpha_35565], **kwargs_35566)
        
        # Getting the type of 'self' (line 555)
        self_35568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 8), 'self')
        # Setting the type of the member '_rgba_over' of a type (line 555)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 8), self_35568, '_rgba_over', to_rgba_call_result_35567)
        
        # Getting the type of 'self' (line 556)
        self_35569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 11), 'self')
        # Obtaining the member '_isinit' of a type (line 556)
        _isinit_35570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 11), self_35569, '_isinit')
        # Testing the type of an if condition (line 556)
        if_condition_35571 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 556, 8), _isinit_35570)
        # Assigning a type to the variable 'if_condition_35571' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'if_condition_35571', if_condition_35571)
        # SSA begins for if statement (line 556)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _set_extremes(...): (line 557)
        # Processing the call keyword arguments (line 557)
        kwargs_35574 = {}
        # Getting the type of 'self' (line 557)
        self_35572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'self', False)
        # Obtaining the member '_set_extremes' of a type (line 557)
        _set_extremes_35573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 12), self_35572, '_set_extremes')
        # Calling _set_extremes(args, kwargs) (line 557)
        _set_extremes_call_result_35575 = invoke(stypy.reporting.localization.Localization(__file__, 557, 12), _set_extremes_35573, *[], **kwargs_35574)
        
        # SSA join for if statement (line 556)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_over(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_over' in the type store
        # Getting the type of 'stypy_return_type' (line 551)
        stypy_return_type_35576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_35576)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_over'
        return stypy_return_type_35576


    @norecursion
    def _set_extremes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_extremes'
        module_type_store = module_type_store.open_function_context('_set_extremes', 559, 4, False)
        # Assigning a type to the variable 'self' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colormap._set_extremes.__dict__.__setitem__('stypy_localization', localization)
        Colormap._set_extremes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colormap._set_extremes.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colormap._set_extremes.__dict__.__setitem__('stypy_function_name', 'Colormap._set_extremes')
        Colormap._set_extremes.__dict__.__setitem__('stypy_param_names_list', [])
        Colormap._set_extremes.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colormap._set_extremes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colormap._set_extremes.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colormap._set_extremes.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colormap._set_extremes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colormap._set_extremes.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colormap._set_extremes', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_extremes', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_extremes(...)' code ##################

        
        # Getting the type of 'self' (line 560)
        self_35577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 11), 'self')
        # Obtaining the member '_rgba_under' of a type (line 560)
        _rgba_under_35578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 11), self_35577, '_rgba_under')
        # Testing the type of an if condition (line 560)
        if_condition_35579 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 560, 8), _rgba_under_35578)
        # Assigning a type to the variable 'if_condition_35579' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'if_condition_35579', if_condition_35579)
        # SSA begins for if statement (line 560)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 561):
        
        # Assigning a Attribute to a Subscript (line 561):
        
        # Assigning a Attribute to a Subscript (line 561):
        # Getting the type of 'self' (line 561)
        self_35580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 39), 'self')
        # Obtaining the member '_rgba_under' of a type (line 561)
        _rgba_under_35581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 39), self_35580, '_rgba_under')
        # Getting the type of 'self' (line 561)
        self_35582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 12), 'self')
        # Obtaining the member '_lut' of a type (line 561)
        _lut_35583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 12), self_35582, '_lut')
        # Getting the type of 'self' (line 561)
        self_35584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 22), 'self')
        # Obtaining the member '_i_under' of a type (line 561)
        _i_under_35585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 22), self_35584, '_i_under')
        # Storing an element on a container (line 561)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 561, 12), _lut_35583, (_i_under_35585, _rgba_under_35581))
        # SSA branch for the else part of an if statement (line 560)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Subscript (line 563):
        
        # Assigning a Subscript to a Subscript (line 563):
        
        # Assigning a Subscript to a Subscript (line 563):
        
        # Obtaining the type of the subscript
        int_35586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 49), 'int')
        # Getting the type of 'self' (line 563)
        self_35587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 39), 'self')
        # Obtaining the member '_lut' of a type (line 563)
        _lut_35588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 39), self_35587, '_lut')
        # Obtaining the member '__getitem__' of a type (line 563)
        getitem___35589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 39), _lut_35588, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 563)
        subscript_call_result_35590 = invoke(stypy.reporting.localization.Localization(__file__, 563, 39), getitem___35589, int_35586)
        
        # Getting the type of 'self' (line 563)
        self_35591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 12), 'self')
        # Obtaining the member '_lut' of a type (line 563)
        _lut_35592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 12), self_35591, '_lut')
        # Getting the type of 'self' (line 563)
        self_35593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 22), 'self')
        # Obtaining the member '_i_under' of a type (line 563)
        _i_under_35594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 22), self_35593, '_i_under')
        # Storing an element on a container (line 563)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 563, 12), _lut_35592, (_i_under_35594, subscript_call_result_35590))
        # SSA join for if statement (line 560)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 564)
        self_35595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 11), 'self')
        # Obtaining the member '_rgba_over' of a type (line 564)
        _rgba_over_35596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 11), self_35595, '_rgba_over')
        # Testing the type of an if condition (line 564)
        if_condition_35597 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 564, 8), _rgba_over_35596)
        # Assigning a type to the variable 'if_condition_35597' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'if_condition_35597', if_condition_35597)
        # SSA begins for if statement (line 564)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 565):
        
        # Assigning a Attribute to a Subscript (line 565):
        
        # Assigning a Attribute to a Subscript (line 565):
        # Getting the type of 'self' (line 565)
        self_35598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 38), 'self')
        # Obtaining the member '_rgba_over' of a type (line 565)
        _rgba_over_35599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 38), self_35598, '_rgba_over')
        # Getting the type of 'self' (line 565)
        self_35600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 12), 'self')
        # Obtaining the member '_lut' of a type (line 565)
        _lut_35601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 12), self_35600, '_lut')
        # Getting the type of 'self' (line 565)
        self_35602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 22), 'self')
        # Obtaining the member '_i_over' of a type (line 565)
        _i_over_35603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 22), self_35602, '_i_over')
        # Storing an element on a container (line 565)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 565, 12), _lut_35601, (_i_over_35603, _rgba_over_35599))
        # SSA branch for the else part of an if statement (line 564)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Subscript (line 567):
        
        # Assigning a Subscript to a Subscript (line 567):
        
        # Assigning a Subscript to a Subscript (line 567):
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 567)
        self_35604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 48), 'self')
        # Obtaining the member 'N' of a type (line 567)
        N_35605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 48), self_35604, 'N')
        int_35606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 57), 'int')
        # Applying the binary operator '-' (line 567)
        result_sub_35607 = python_operator(stypy.reporting.localization.Localization(__file__, 567, 48), '-', N_35605, int_35606)
        
        # Getting the type of 'self' (line 567)
        self_35608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 38), 'self')
        # Obtaining the member '_lut' of a type (line 567)
        _lut_35609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 38), self_35608, '_lut')
        # Obtaining the member '__getitem__' of a type (line 567)
        getitem___35610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 38), _lut_35609, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 567)
        subscript_call_result_35611 = invoke(stypy.reporting.localization.Localization(__file__, 567, 38), getitem___35610, result_sub_35607)
        
        # Getting the type of 'self' (line 567)
        self_35612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 12), 'self')
        # Obtaining the member '_lut' of a type (line 567)
        _lut_35613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 12), self_35612, '_lut')
        # Getting the type of 'self' (line 567)
        self_35614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 22), 'self')
        # Obtaining the member '_i_over' of a type (line 567)
        _i_over_35615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 22), self_35614, '_i_over')
        # Storing an element on a container (line 567)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 567, 12), _lut_35613, (_i_over_35615, subscript_call_result_35611))
        # SSA join for if statement (line 564)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Subscript (line 568):
        
        # Assigning a Attribute to a Subscript (line 568):
        
        # Assigning a Attribute to a Subscript (line 568):
        # Getting the type of 'self' (line 568)
        self_35616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 33), 'self')
        # Obtaining the member '_rgba_bad' of a type (line 568)
        _rgba_bad_35617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 33), self_35616, '_rgba_bad')
        # Getting the type of 'self' (line 568)
        self_35618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'self')
        # Obtaining the member '_lut' of a type (line 568)
        _lut_35619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 8), self_35618, '_lut')
        # Getting the type of 'self' (line 568)
        self_35620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 18), 'self')
        # Obtaining the member '_i_bad' of a type (line 568)
        _i_bad_35621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 18), self_35620, '_i_bad')
        # Storing an element on a container (line 568)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 568, 8), _lut_35619, (_i_bad_35621, _rgba_bad_35617))
        
        # ################# End of '_set_extremes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_extremes' in the type store
        # Getting the type of 'stypy_return_type' (line 559)
        stypy_return_type_35622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_35622)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_extremes'
        return stypy_return_type_35622


    @norecursion
    def _init(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_init'
        module_type_store = module_type_store.open_function_context('_init', 570, 4, False)
        # Assigning a type to the variable 'self' (line 571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colormap._init.__dict__.__setitem__('stypy_localization', localization)
        Colormap._init.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colormap._init.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colormap._init.__dict__.__setitem__('stypy_function_name', 'Colormap._init')
        Colormap._init.__dict__.__setitem__('stypy_param_names_list', [])
        Colormap._init.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colormap._init.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colormap._init.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colormap._init.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colormap._init.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colormap._init.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colormap._init', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_init', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_init(...)' code ##################

        unicode_35623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 571, 8), 'unicode', u'Generate the lookup table, self._lut')
        
        # Call to NotImplementedError(...): (line 572)
        # Processing the call arguments (line 572)
        unicode_35625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 34), 'unicode', u'Abstract class only')
        # Processing the call keyword arguments (line 572)
        kwargs_35626 = {}
        # Getting the type of 'NotImplementedError' (line 572)
        NotImplementedError_35624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 572)
        NotImplementedError_call_result_35627 = invoke(stypy.reporting.localization.Localization(__file__, 572, 14), NotImplementedError_35624, *[unicode_35625], **kwargs_35626)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 572, 8), NotImplementedError_call_result_35627, 'raise parameter', BaseException)
        
        # ################# End of '_init(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_init' in the type store
        # Getting the type of 'stypy_return_type' (line 570)
        stypy_return_type_35628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_35628)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_init'
        return stypy_return_type_35628


    @norecursion
    def is_gray(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'is_gray'
        module_type_store = module_type_store.open_function_context('is_gray', 574, 4, False)
        # Assigning a type to the variable 'self' (line 575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colormap.is_gray.__dict__.__setitem__('stypy_localization', localization)
        Colormap.is_gray.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colormap.is_gray.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colormap.is_gray.__dict__.__setitem__('stypy_function_name', 'Colormap.is_gray')
        Colormap.is_gray.__dict__.__setitem__('stypy_param_names_list', [])
        Colormap.is_gray.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colormap.is_gray.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colormap.is_gray.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colormap.is_gray.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colormap.is_gray.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colormap.is_gray.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colormap.is_gray', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_gray', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_gray(...)' code ##################

        
        
        # Getting the type of 'self' (line 575)
        self_35629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 15), 'self')
        # Obtaining the member '_isinit' of a type (line 575)
        _isinit_35630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 15), self_35629, '_isinit')
        # Applying the 'not' unary operator (line 575)
        result_not__35631 = python_operator(stypy.reporting.localization.Localization(__file__, 575, 11), 'not', _isinit_35630)
        
        # Testing the type of an if condition (line 575)
        if_condition_35632 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 575, 8), result_not__35631)
        # Assigning a type to the variable 'if_condition_35632' (line 575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 8), 'if_condition_35632', if_condition_35632)
        # SSA begins for if statement (line 575)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _init(...): (line 576)
        # Processing the call keyword arguments (line 576)
        kwargs_35635 = {}
        # Getting the type of 'self' (line 576)
        self_35633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 12), 'self', False)
        # Obtaining the member '_init' of a type (line 576)
        _init_35634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 12), self_35633, '_init')
        # Calling _init(args, kwargs) (line 576)
        _init_call_result_35636 = invoke(stypy.reporting.localization.Localization(__file__, 576, 12), _init_35634, *[], **kwargs_35635)
        
        # SSA join for if statement (line 575)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Evaluating a boolean operation
        
        # Call to all(...): (line 577)
        # Processing the call arguments (line 577)
        
        
        # Obtaining the type of the subscript
        slice_35639 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 577, 23), None, None, None)
        int_35640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 36), 'int')
        # Getting the type of 'self' (line 577)
        self_35641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 23), 'self', False)
        # Obtaining the member '_lut' of a type (line 577)
        _lut_35642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 23), self_35641, '_lut')
        # Obtaining the member '__getitem__' of a type (line 577)
        getitem___35643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 23), _lut_35642, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 577)
        subscript_call_result_35644 = invoke(stypy.reporting.localization.Localization(__file__, 577, 23), getitem___35643, (slice_35639, int_35640))
        
        
        # Obtaining the type of the subscript
        slice_35645 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 577, 42), None, None, None)
        int_35646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 55), 'int')
        # Getting the type of 'self' (line 577)
        self_35647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 42), 'self', False)
        # Obtaining the member '_lut' of a type (line 577)
        _lut_35648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 42), self_35647, '_lut')
        # Obtaining the member '__getitem__' of a type (line 577)
        getitem___35649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 42), _lut_35648, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 577)
        subscript_call_result_35650 = invoke(stypy.reporting.localization.Localization(__file__, 577, 42), getitem___35649, (slice_35645, int_35646))
        
        # Applying the binary operator '==' (line 577)
        result_eq_35651 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 23), '==', subscript_call_result_35644, subscript_call_result_35650)
        
        # Processing the call keyword arguments (line 577)
        kwargs_35652 = {}
        # Getting the type of 'np' (line 577)
        np_35637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 16), 'np', False)
        # Obtaining the member 'all' of a type (line 577)
        all_35638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 16), np_35637, 'all')
        # Calling all(args, kwargs) (line 577)
        all_call_result_35653 = invoke(stypy.reporting.localization.Localization(__file__, 577, 16), all_35638, *[result_eq_35651], **kwargs_35652)
        
        
        # Call to all(...): (line 578)
        # Processing the call arguments (line 578)
        
        
        # Obtaining the type of the subscript
        slice_35656 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 578, 23), None, None, None)
        int_35657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 36), 'int')
        # Getting the type of 'self' (line 578)
        self_35658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 23), 'self', False)
        # Obtaining the member '_lut' of a type (line 578)
        _lut_35659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 23), self_35658, '_lut')
        # Obtaining the member '__getitem__' of a type (line 578)
        getitem___35660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 23), _lut_35659, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 578)
        subscript_call_result_35661 = invoke(stypy.reporting.localization.Localization(__file__, 578, 23), getitem___35660, (slice_35656, int_35657))
        
        
        # Obtaining the type of the subscript
        slice_35662 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 578, 42), None, None, None)
        int_35663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 55), 'int')
        # Getting the type of 'self' (line 578)
        self_35664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 42), 'self', False)
        # Obtaining the member '_lut' of a type (line 578)
        _lut_35665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 42), self_35664, '_lut')
        # Obtaining the member '__getitem__' of a type (line 578)
        getitem___35666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 42), _lut_35665, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 578)
        subscript_call_result_35667 = invoke(stypy.reporting.localization.Localization(__file__, 578, 42), getitem___35666, (slice_35662, int_35663))
        
        # Applying the binary operator '==' (line 578)
        result_eq_35668 = python_operator(stypy.reporting.localization.Localization(__file__, 578, 23), '==', subscript_call_result_35661, subscript_call_result_35667)
        
        # Processing the call keyword arguments (line 578)
        kwargs_35669 = {}
        # Getting the type of 'np' (line 578)
        np_35654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 16), 'np', False)
        # Obtaining the member 'all' of a type (line 578)
        all_35655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 16), np_35654, 'all')
        # Calling all(args, kwargs) (line 578)
        all_call_result_35670 = invoke(stypy.reporting.localization.Localization(__file__, 578, 16), all_35655, *[result_eq_35668], **kwargs_35669)
        
        # Applying the binary operator 'and' (line 577)
        result_and_keyword_35671 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 16), 'and', all_call_result_35653, all_call_result_35670)
        
        # Assigning a type to the variable 'stypy_return_type' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'stypy_return_type', result_and_keyword_35671)
        
        # ################# End of 'is_gray(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_gray' in the type store
        # Getting the type of 'stypy_return_type' (line 574)
        stypy_return_type_35672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_35672)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_gray'
        return stypy_return_type_35672


    @norecursion
    def _resample(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_resample'
        module_type_store = module_type_store.open_function_context('_resample', 580, 4, False)
        # Assigning a type to the variable 'self' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colormap._resample.__dict__.__setitem__('stypy_localization', localization)
        Colormap._resample.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colormap._resample.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colormap._resample.__dict__.__setitem__('stypy_function_name', 'Colormap._resample')
        Colormap._resample.__dict__.__setitem__('stypy_param_names_list', ['lutsize'])
        Colormap._resample.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colormap._resample.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colormap._resample.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colormap._resample.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colormap._resample.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colormap._resample.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colormap._resample', ['lutsize'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_resample', localization, ['lutsize'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_resample(...)' code ##################

        unicode_35673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 583, (-1)), 'unicode', u'\n        Return a new color map with *lutsize* entries.\n        ')
        
        # Call to NotImplementedError(...): (line 584)
        # Processing the call keyword arguments (line 584)
        kwargs_35675 = {}
        # Getting the type of 'NotImplementedError' (line 584)
        NotImplementedError_35674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 584)
        NotImplementedError_call_result_35676 = invoke(stypy.reporting.localization.Localization(__file__, 584, 14), NotImplementedError_35674, *[], **kwargs_35675)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 584, 8), NotImplementedError_call_result_35676, 'raise parameter', BaseException)
        
        # ################# End of '_resample(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_resample' in the type store
        # Getting the type of 'stypy_return_type' (line 580)
        stypy_return_type_35677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_35677)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_resample'
        return stypy_return_type_35677


    @norecursion
    def reversed(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 586)
        None_35678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 28), 'None')
        defaults = [None_35678]
        # Create a new context for function 'reversed'
        module_type_store = module_type_store.open_function_context('reversed', 586, 4, False)
        # Assigning a type to the variable 'self' (line 587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Colormap.reversed.__dict__.__setitem__('stypy_localization', localization)
        Colormap.reversed.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Colormap.reversed.__dict__.__setitem__('stypy_type_store', module_type_store)
        Colormap.reversed.__dict__.__setitem__('stypy_function_name', 'Colormap.reversed')
        Colormap.reversed.__dict__.__setitem__('stypy_param_names_list', ['name'])
        Colormap.reversed.__dict__.__setitem__('stypy_varargs_param_name', None)
        Colormap.reversed.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Colormap.reversed.__dict__.__setitem__('stypy_call_defaults', defaults)
        Colormap.reversed.__dict__.__setitem__('stypy_call_varargs', varargs)
        Colormap.reversed.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Colormap.reversed.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Colormap.reversed', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'reversed', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'reversed(...)' code ##################

        unicode_35679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, (-1)), 'unicode', u'\n        Make a reversed instance of the Colormap.\n\n        .. note :: Function not implemented for base class.\n\n        Parameters\n        ----------\n        name : str, optional\n            The name for the reversed colormap. If it\'s None the\n            name will be the name of the parent colormap + "_r".\n\n        Notes\n        -----\n        See :meth:`LinearSegmentedColormap.reversed` and\n        :meth:`ListedColormap.reversed`\n        ')
        
        # Call to NotImplementedError(...): (line 603)
        # Processing the call keyword arguments (line 603)
        kwargs_35681 = {}
        # Getting the type of 'NotImplementedError' (line 603)
        NotImplementedError_35680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 603)
        NotImplementedError_call_result_35682 = invoke(stypy.reporting.localization.Localization(__file__, 603, 14), NotImplementedError_35680, *[], **kwargs_35681)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 603, 8), NotImplementedError_call_result_35682, 'raise parameter', BaseException)
        
        # ################# End of 'reversed(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'reversed' in the type store
        # Getting the type of 'stypy_return_type' (line 586)
        stypy_return_type_35683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_35683)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'reversed'
        return stypy_return_type_35683


# Assigning a type to the variable 'Colormap' (line 395)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 0), 'Colormap', Colormap)
# Declaration of the 'LinearSegmentedColormap' class
# Getting the type of 'Colormap' (line 606)
Colormap_35684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 30), 'Colormap')

class LinearSegmentedColormap(Colormap_35684, ):
    unicode_35685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, (-1)), 'unicode', u'Colormap objects based on lookup tables using linear segments.\n\n    The lookup table is generated using linear interpolation for each\n    primary color, with the 0-1 domain divided into any number of\n    segments.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_35686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 44), 'int')
        float_35687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 55), 'float')
        defaults = [int_35686, float_35687]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 613, 4, False)
        # Assigning a type to the variable 'self' (line 614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearSegmentedColormap.__init__', ['name', 'segmentdata', 'N', 'gamma'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['name', 'segmentdata', 'N', 'gamma'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_35688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 659, (-1)), 'unicode', u"Create color map from linear mapping segments\n\n        segmentdata argument is a dictionary with a red, green and blue\n        entries. Each entry should be a list of *x*, *y0*, *y1* tuples,\n        forming rows in a table. Entries for alpha are optional.\n\n        Example: suppose you want red to increase from 0 to 1 over\n        the bottom half, green to do the same over the middle half,\n        and blue over the top half.  Then you would use::\n\n            cdict = {'red':   [(0.0,  0.0, 0.0),\n                               (0.5,  1.0, 1.0),\n                               (1.0,  1.0, 1.0)],\n\n                     'green': [(0.0,  0.0, 0.0),\n                               (0.25, 0.0, 0.0),\n                               (0.75, 1.0, 1.0),\n                               (1.0,  1.0, 1.0)],\n\n                     'blue':  [(0.0,  0.0, 0.0),\n                               (0.5,  0.0, 0.0),\n                               (1.0,  1.0, 1.0)]}\n\n        Each row in the table for a given color is a sequence of\n        *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase\n        monotonically from 0 to 1.  For any input value *z* falling\n        between *x[i]* and *x[i+1]*, the output value of a given color\n        will be linearly interpolated between *y1[i]* and *y0[i+1]*::\n\n            row i:   x  y0  y1\n                           /\n                          /\n            row i+1: x  y0  y1\n\n        Hence y0 in the first row and y1 in the last row are never used.\n\n\n        .. seealso::\n\n               :meth:`LinearSegmentedColormap.from_list`\n               Static method; factory function for generating a\n               smoothly-varying LinearSegmentedColormap.\n\n               :func:`makeMappingArray`\n               For information about making a mapping array.\n        ")
        
        # Assigning a Name to a Attribute (line 661):
        
        # Assigning a Name to a Attribute (line 661):
        
        # Assigning a Name to a Attribute (line 661):
        # Getting the type of 'False' (line 661)
        False_35689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 26), 'False')
        # Getting the type of 'self' (line 661)
        self_35690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 8), 'self')
        # Setting the type of the member 'monochrome' of a type (line 661)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 8), self_35690, 'monochrome', False_35689)
        
        # Call to __init__(...): (line 662)
        # Processing the call arguments (line 662)
        # Getting the type of 'self' (line 662)
        self_35693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 26), 'self', False)
        # Getting the type of 'name' (line 662)
        name_35694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 32), 'name', False)
        # Getting the type of 'N' (line 662)
        N_35695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 38), 'N', False)
        # Processing the call keyword arguments (line 662)
        kwargs_35696 = {}
        # Getting the type of 'Colormap' (line 662)
        Colormap_35691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'Colormap', False)
        # Obtaining the member '__init__' of a type (line 662)
        init___35692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 8), Colormap_35691, '__init__')
        # Calling __init__(args, kwargs) (line 662)
        init___call_result_35697 = invoke(stypy.reporting.localization.Localization(__file__, 662, 8), init___35692, *[self_35693, name_35694, N_35695], **kwargs_35696)
        
        
        # Assigning a Name to a Attribute (line 663):
        
        # Assigning a Name to a Attribute (line 663):
        
        # Assigning a Name to a Attribute (line 663):
        # Getting the type of 'segmentdata' (line 663)
        segmentdata_35698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 28), 'segmentdata')
        # Getting the type of 'self' (line 663)
        self_35699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 8), 'self')
        # Setting the type of the member '_segmentdata' of a type (line 663)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 8), self_35699, '_segmentdata', segmentdata_35698)
        
        # Assigning a Name to a Attribute (line 664):
        
        # Assigning a Name to a Attribute (line 664):
        
        # Assigning a Name to a Attribute (line 664):
        # Getting the type of 'gamma' (line 664)
        gamma_35700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 22), 'gamma')
        # Getting the type of 'self' (line 664)
        self_35701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'self')
        # Setting the type of the member '_gamma' of a type (line 664)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 8), self_35701, '_gamma', gamma_35700)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _init(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_init'
        module_type_store = module_type_store.open_function_context('_init', 666, 4, False)
        # Assigning a type to the variable 'self' (line 667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearSegmentedColormap._init.__dict__.__setitem__('stypy_localization', localization)
        LinearSegmentedColormap._init.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearSegmentedColormap._init.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearSegmentedColormap._init.__dict__.__setitem__('stypy_function_name', 'LinearSegmentedColormap._init')
        LinearSegmentedColormap._init.__dict__.__setitem__('stypy_param_names_list', [])
        LinearSegmentedColormap._init.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearSegmentedColormap._init.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearSegmentedColormap._init.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearSegmentedColormap._init.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearSegmentedColormap._init.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearSegmentedColormap._init.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearSegmentedColormap._init', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_init', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_init(...)' code ##################

        
        # Assigning a Call to a Attribute (line 667):
        
        # Assigning a Call to a Attribute (line 667):
        
        # Assigning a Call to a Attribute (line 667):
        
        # Call to ones(...): (line 667)
        # Processing the call arguments (line 667)
        
        # Obtaining an instance of the builtin type 'tuple' (line 667)
        tuple_35704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 667)
        # Adding element type (line 667)
        # Getting the type of 'self' (line 667)
        self_35705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 29), 'self', False)
        # Obtaining the member 'N' of a type (line 667)
        N_35706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 29), self_35705, 'N')
        int_35707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 38), 'int')
        # Applying the binary operator '+' (line 667)
        result_add_35708 = python_operator(stypy.reporting.localization.Localization(__file__, 667, 29), '+', N_35706, int_35707)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 29), tuple_35704, result_add_35708)
        # Adding element type (line 667)
        int_35709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 41), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 667, 29), tuple_35704, int_35709)
        
        # Getting the type of 'float' (line 667)
        float_35710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 45), 'float', False)
        # Processing the call keyword arguments (line 667)
        kwargs_35711 = {}
        # Getting the type of 'np' (line 667)
        np_35702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 20), 'np', False)
        # Obtaining the member 'ones' of a type (line 667)
        ones_35703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 20), np_35702, 'ones')
        # Calling ones(args, kwargs) (line 667)
        ones_call_result_35712 = invoke(stypy.reporting.localization.Localization(__file__, 667, 20), ones_35703, *[tuple_35704, float_35710], **kwargs_35711)
        
        # Getting the type of 'self' (line 667)
        self_35713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 8), 'self')
        # Setting the type of the member '_lut' of a type (line 667)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 8), self_35713, '_lut', ones_call_result_35712)
        
        # Assigning a Call to a Subscript (line 668):
        
        # Assigning a Call to a Subscript (line 668):
        
        # Assigning a Call to a Subscript (line 668):
        
        # Call to makeMappingArray(...): (line 668)
        # Processing the call arguments (line 668)
        # Getting the type of 'self' (line 669)
        self_35715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 12), 'self', False)
        # Obtaining the member 'N' of a type (line 669)
        N_35716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 12), self_35715, 'N')
        
        # Obtaining the type of the subscript
        unicode_35717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 669, 38), 'unicode', u'red')
        # Getting the type of 'self' (line 669)
        self_35718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 20), 'self', False)
        # Obtaining the member '_segmentdata' of a type (line 669)
        _segmentdata_35719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 20), self_35718, '_segmentdata')
        # Obtaining the member '__getitem__' of a type (line 669)
        getitem___35720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 20), _segmentdata_35719, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 669)
        subscript_call_result_35721 = invoke(stypy.reporting.localization.Localization(__file__, 669, 20), getitem___35720, unicode_35717)
        
        # Getting the type of 'self' (line 669)
        self_35722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 46), 'self', False)
        # Obtaining the member '_gamma' of a type (line 669)
        _gamma_35723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 46), self_35722, '_gamma')
        # Processing the call keyword arguments (line 668)
        kwargs_35724 = {}
        # Getting the type of 'makeMappingArray' (line 668)
        makeMappingArray_35714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 28), 'makeMappingArray', False)
        # Calling makeMappingArray(args, kwargs) (line 668)
        makeMappingArray_call_result_35725 = invoke(stypy.reporting.localization.Localization(__file__, 668, 28), makeMappingArray_35714, *[N_35716, subscript_call_result_35721, _gamma_35723], **kwargs_35724)
        
        # Getting the type of 'self' (line 668)
        self_35726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 8), 'self')
        # Obtaining the member '_lut' of a type (line 668)
        _lut_35727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 8), self_35726, '_lut')
        int_35728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, 19), 'int')
        slice_35729 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 668, 8), None, int_35728, None)
        int_35730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, 23), 'int')
        # Storing an element on a container (line 668)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 668, 8), _lut_35727, ((slice_35729, int_35730), makeMappingArray_call_result_35725))
        
        # Assigning a Call to a Subscript (line 670):
        
        # Assigning a Call to a Subscript (line 670):
        
        # Assigning a Call to a Subscript (line 670):
        
        # Call to makeMappingArray(...): (line 670)
        # Processing the call arguments (line 670)
        # Getting the type of 'self' (line 671)
        self_35732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 12), 'self', False)
        # Obtaining the member 'N' of a type (line 671)
        N_35733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 12), self_35732, 'N')
        
        # Obtaining the type of the subscript
        unicode_35734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 671, 38), 'unicode', u'green')
        # Getting the type of 'self' (line 671)
        self_35735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 20), 'self', False)
        # Obtaining the member '_segmentdata' of a type (line 671)
        _segmentdata_35736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 20), self_35735, '_segmentdata')
        # Obtaining the member '__getitem__' of a type (line 671)
        getitem___35737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 20), _segmentdata_35736, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 671)
        subscript_call_result_35738 = invoke(stypy.reporting.localization.Localization(__file__, 671, 20), getitem___35737, unicode_35734)
        
        # Getting the type of 'self' (line 671)
        self_35739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 48), 'self', False)
        # Obtaining the member '_gamma' of a type (line 671)
        _gamma_35740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 48), self_35739, '_gamma')
        # Processing the call keyword arguments (line 670)
        kwargs_35741 = {}
        # Getting the type of 'makeMappingArray' (line 670)
        makeMappingArray_35731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 28), 'makeMappingArray', False)
        # Calling makeMappingArray(args, kwargs) (line 670)
        makeMappingArray_call_result_35742 = invoke(stypy.reporting.localization.Localization(__file__, 670, 28), makeMappingArray_35731, *[N_35733, subscript_call_result_35738, _gamma_35740], **kwargs_35741)
        
        # Getting the type of 'self' (line 670)
        self_35743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 8), 'self')
        # Obtaining the member '_lut' of a type (line 670)
        _lut_35744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 8), self_35743, '_lut')
        int_35745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 19), 'int')
        slice_35746 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 670, 8), None, int_35745, None)
        int_35747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 23), 'int')
        # Storing an element on a container (line 670)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 670, 8), _lut_35744, ((slice_35746, int_35747), makeMappingArray_call_result_35742))
        
        # Assigning a Call to a Subscript (line 672):
        
        # Assigning a Call to a Subscript (line 672):
        
        # Assigning a Call to a Subscript (line 672):
        
        # Call to makeMappingArray(...): (line 672)
        # Processing the call arguments (line 672)
        # Getting the type of 'self' (line 673)
        self_35749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 12), 'self', False)
        # Obtaining the member 'N' of a type (line 673)
        N_35750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 12), self_35749, 'N')
        
        # Obtaining the type of the subscript
        unicode_35751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 673, 38), 'unicode', u'blue')
        # Getting the type of 'self' (line 673)
        self_35752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 20), 'self', False)
        # Obtaining the member '_segmentdata' of a type (line 673)
        _segmentdata_35753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 20), self_35752, '_segmentdata')
        # Obtaining the member '__getitem__' of a type (line 673)
        getitem___35754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 20), _segmentdata_35753, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 673)
        subscript_call_result_35755 = invoke(stypy.reporting.localization.Localization(__file__, 673, 20), getitem___35754, unicode_35751)
        
        # Getting the type of 'self' (line 673)
        self_35756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 47), 'self', False)
        # Obtaining the member '_gamma' of a type (line 673)
        _gamma_35757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 47), self_35756, '_gamma')
        # Processing the call keyword arguments (line 672)
        kwargs_35758 = {}
        # Getting the type of 'makeMappingArray' (line 672)
        makeMappingArray_35748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 28), 'makeMappingArray', False)
        # Calling makeMappingArray(args, kwargs) (line 672)
        makeMappingArray_call_result_35759 = invoke(stypy.reporting.localization.Localization(__file__, 672, 28), makeMappingArray_35748, *[N_35750, subscript_call_result_35755, _gamma_35757], **kwargs_35758)
        
        # Getting the type of 'self' (line 672)
        self_35760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'self')
        # Obtaining the member '_lut' of a type (line 672)
        _lut_35761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 8), self_35760, '_lut')
        int_35762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 19), 'int')
        slice_35763 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 672, 8), None, int_35762, None)
        int_35764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 23), 'int')
        # Storing an element on a container (line 672)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 672, 8), _lut_35761, ((slice_35763, int_35764), makeMappingArray_call_result_35759))
        
        
        unicode_35765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, 11), 'unicode', u'alpha')
        # Getting the type of 'self' (line 674)
        self_35766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 22), 'self')
        # Obtaining the member '_segmentdata' of a type (line 674)
        _segmentdata_35767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 22), self_35766, '_segmentdata')
        # Applying the binary operator 'in' (line 674)
        result_contains_35768 = python_operator(stypy.reporting.localization.Localization(__file__, 674, 11), 'in', unicode_35765, _segmentdata_35767)
        
        # Testing the type of an if condition (line 674)
        if_condition_35769 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 674, 8), result_contains_35768)
        # Assigning a type to the variable 'if_condition_35769' (line 674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 8), 'if_condition_35769', if_condition_35769)
        # SSA begins for if statement (line 674)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 675):
        
        # Assigning a Call to a Subscript (line 675):
        
        # Assigning a Call to a Subscript (line 675):
        
        # Call to makeMappingArray(...): (line 675)
        # Processing the call arguments (line 675)
        # Getting the type of 'self' (line 676)
        self_35771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 16), 'self', False)
        # Obtaining the member 'N' of a type (line 676)
        N_35772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 16), self_35771, 'N')
        
        # Obtaining the type of the subscript
        unicode_35773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 42), 'unicode', u'alpha')
        # Getting the type of 'self' (line 676)
        self_35774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 24), 'self', False)
        # Obtaining the member '_segmentdata' of a type (line 676)
        _segmentdata_35775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 24), self_35774, '_segmentdata')
        # Obtaining the member '__getitem__' of a type (line 676)
        getitem___35776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 24), _segmentdata_35775, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 676)
        subscript_call_result_35777 = invoke(stypy.reporting.localization.Localization(__file__, 676, 24), getitem___35776, unicode_35773)
        
        int_35778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 52), 'int')
        # Processing the call keyword arguments (line 675)
        kwargs_35779 = {}
        # Getting the type of 'makeMappingArray' (line 675)
        makeMappingArray_35770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 32), 'makeMappingArray', False)
        # Calling makeMappingArray(args, kwargs) (line 675)
        makeMappingArray_call_result_35780 = invoke(stypy.reporting.localization.Localization(__file__, 675, 32), makeMappingArray_35770, *[N_35772, subscript_call_result_35777, int_35778], **kwargs_35779)
        
        # Getting the type of 'self' (line 675)
        self_35781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 12), 'self')
        # Obtaining the member '_lut' of a type (line 675)
        _lut_35782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 12), self_35781, '_lut')
        int_35783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 23), 'int')
        slice_35784 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 675, 12), None, int_35783, None)
        int_35785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 27), 'int')
        # Storing an element on a container (line 675)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 675, 12), _lut_35782, ((slice_35784, int_35785), makeMappingArray_call_result_35780))
        # SSA join for if statement (line 674)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 677):
        
        # Assigning a Name to a Attribute (line 677):
        
        # Assigning a Name to a Attribute (line 677):
        # Getting the type of 'True' (line 677)
        True_35786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 23), 'True')
        # Getting the type of 'self' (line 677)
        self_35787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 8), 'self')
        # Setting the type of the member '_isinit' of a type (line 677)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 677, 8), self_35787, '_isinit', True_35786)
        
        # Call to _set_extremes(...): (line 678)
        # Processing the call keyword arguments (line 678)
        kwargs_35790 = {}
        # Getting the type of 'self' (line 678)
        self_35788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 8), 'self', False)
        # Obtaining the member '_set_extremes' of a type (line 678)
        _set_extremes_35789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 8), self_35788, '_set_extremes')
        # Calling _set_extremes(args, kwargs) (line 678)
        _set_extremes_call_result_35791 = invoke(stypy.reporting.localization.Localization(__file__, 678, 8), _set_extremes_35789, *[], **kwargs_35790)
        
        
        # ################# End of '_init(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_init' in the type store
        # Getting the type of 'stypy_return_type' (line 666)
        stypy_return_type_35792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_35792)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_init'
        return stypy_return_type_35792


    @norecursion
    def set_gamma(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_gamma'
        module_type_store = module_type_store.open_function_context('set_gamma', 680, 4, False)
        # Assigning a type to the variable 'self' (line 681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearSegmentedColormap.set_gamma.__dict__.__setitem__('stypy_localization', localization)
        LinearSegmentedColormap.set_gamma.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearSegmentedColormap.set_gamma.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearSegmentedColormap.set_gamma.__dict__.__setitem__('stypy_function_name', 'LinearSegmentedColormap.set_gamma')
        LinearSegmentedColormap.set_gamma.__dict__.__setitem__('stypy_param_names_list', ['gamma'])
        LinearSegmentedColormap.set_gamma.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearSegmentedColormap.set_gamma.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearSegmentedColormap.set_gamma.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearSegmentedColormap.set_gamma.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearSegmentedColormap.set_gamma.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearSegmentedColormap.set_gamma.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearSegmentedColormap.set_gamma', ['gamma'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_gamma', localization, ['gamma'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_gamma(...)' code ##################

        unicode_35793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 683, (-1)), 'unicode', u'\n        Set a new gamma value and regenerate color map.\n        ')
        
        # Assigning a Name to a Attribute (line 684):
        
        # Assigning a Name to a Attribute (line 684):
        
        # Assigning a Name to a Attribute (line 684):
        # Getting the type of 'gamma' (line 684)
        gamma_35794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 22), 'gamma')
        # Getting the type of 'self' (line 684)
        self_35795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 8), 'self')
        # Setting the type of the member '_gamma' of a type (line 684)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 8), self_35795, '_gamma', gamma_35794)
        
        # Call to _init(...): (line 685)
        # Processing the call keyword arguments (line 685)
        kwargs_35798 = {}
        # Getting the type of 'self' (line 685)
        self_35796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 8), 'self', False)
        # Obtaining the member '_init' of a type (line 685)
        _init_35797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 8), self_35796, '_init')
        # Calling _init(args, kwargs) (line 685)
        _init_call_result_35799 = invoke(stypy.reporting.localization.Localization(__file__, 685, 8), _init_35797, *[], **kwargs_35798)
        
        
        # ################# End of 'set_gamma(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_gamma' in the type store
        # Getting the type of 'stypy_return_type' (line 680)
        stypy_return_type_35800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_35800)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_gamma'
        return stypy_return_type_35800


    @staticmethod
    @norecursion
    def from_list(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_35801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 34), 'int')
        float_35802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 45), 'float')
        defaults = [int_35801, float_35802]
        # Create a new context for function 'from_list'
        module_type_store = module_type_store.open_function_context('from_list', 687, 4, False)
        
        # Passed parameters checking function
        LinearSegmentedColormap.from_list.__dict__.__setitem__('stypy_localization', localization)
        LinearSegmentedColormap.from_list.__dict__.__setitem__('stypy_type_of_self', None)
        LinearSegmentedColormap.from_list.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearSegmentedColormap.from_list.__dict__.__setitem__('stypy_function_name', 'from_list')
        LinearSegmentedColormap.from_list.__dict__.__setitem__('stypy_param_names_list', ['name', 'colors', 'N', 'gamma'])
        LinearSegmentedColormap.from_list.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearSegmentedColormap.from_list.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearSegmentedColormap.from_list.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearSegmentedColormap.from_list.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearSegmentedColormap.from_list.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearSegmentedColormap.from_list.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, None, module_type_store, 'from_list', ['name', 'colors', 'N', 'gamma'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'from_list', localization, ['colors', 'N', 'gamma'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'from_list(...)' code ##################

        unicode_35803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, (-1)), 'unicode', u'\n        Make a linear segmented colormap with *name* from a sequence\n        of *colors* which evenly transitions from colors[0] at val=0\n        to colors[-1] at val=1.  *N* is the number of rgb quantization\n        levels.\n        Alternatively, a list of (value, color) tuples can be given\n        to divide the range unevenly.\n        ')
        
        
        
        # Call to iterable(...): (line 698)
        # Processing the call arguments (line 698)
        # Getting the type of 'colors' (line 698)
        colors_35806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 30), 'colors', False)
        # Processing the call keyword arguments (line 698)
        kwargs_35807 = {}
        # Getting the type of 'cbook' (line 698)
        cbook_35804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 15), 'cbook', False)
        # Obtaining the member 'iterable' of a type (line 698)
        iterable_35805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 15), cbook_35804, 'iterable')
        # Calling iterable(args, kwargs) (line 698)
        iterable_call_result_35808 = invoke(stypy.reporting.localization.Localization(__file__, 698, 15), iterable_35805, *[colors_35806], **kwargs_35807)
        
        # Applying the 'not' unary operator (line 698)
        result_not__35809 = python_operator(stypy.reporting.localization.Localization(__file__, 698, 11), 'not', iterable_call_result_35808)
        
        # Testing the type of an if condition (line 698)
        if_condition_35810 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 698, 8), result_not__35809)
        # Assigning a type to the variable 'if_condition_35810' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 8), 'if_condition_35810', if_condition_35810)
        # SSA begins for if statement (line 698)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 699)
        # Processing the call arguments (line 699)
        unicode_35812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 29), 'unicode', u'colors must be iterable')
        # Processing the call keyword arguments (line 699)
        kwargs_35813 = {}
        # Getting the type of 'ValueError' (line 699)
        ValueError_35811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 699)
        ValueError_call_result_35814 = invoke(stypy.reporting.localization.Localization(__file__, 699, 18), ValueError_35811, *[unicode_35812], **kwargs_35813)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 699, 12), ValueError_call_result_35814, 'raise parameter', BaseException)
        # SSA join for if statement (line 698)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 701)
        # Processing the call arguments (line 701)
        
        # Obtaining the type of the subscript
        int_35816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 30), 'int')
        # Getting the type of 'colors' (line 701)
        colors_35817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 23), 'colors', False)
        # Obtaining the member '__getitem__' of a type (line 701)
        getitem___35818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 23), colors_35817, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 701)
        subscript_call_result_35819 = invoke(stypy.reporting.localization.Localization(__file__, 701, 23), getitem___35818, int_35816)
        
        # Getting the type of 'Sized' (line 701)
        Sized_35820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 34), 'Sized', False)
        # Processing the call keyword arguments (line 701)
        kwargs_35821 = {}
        # Getting the type of 'isinstance' (line 701)
        isinstance_35815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 12), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 701)
        isinstance_call_result_35822 = invoke(stypy.reporting.localization.Localization(__file__, 701, 12), isinstance_35815, *[subscript_call_result_35819, Sized_35820], **kwargs_35821)
        
        
        
        # Call to len(...): (line 701)
        # Processing the call arguments (line 701)
        
        # Obtaining the type of the subscript
        int_35824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 56), 'int')
        # Getting the type of 'colors' (line 701)
        colors_35825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 49), 'colors', False)
        # Obtaining the member '__getitem__' of a type (line 701)
        getitem___35826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 49), colors_35825, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 701)
        subscript_call_result_35827 = invoke(stypy.reporting.localization.Localization(__file__, 701, 49), getitem___35826, int_35824)
        
        # Processing the call keyword arguments (line 701)
        kwargs_35828 = {}
        # Getting the type of 'len' (line 701)
        len_35823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 45), 'len', False)
        # Calling len(args, kwargs) (line 701)
        len_call_result_35829 = invoke(stypy.reporting.localization.Localization(__file__, 701, 45), len_35823, *[subscript_call_result_35827], **kwargs_35828)
        
        int_35830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 63), 'int')
        # Applying the binary operator '==' (line 701)
        result_eq_35831 = python_operator(stypy.reporting.localization.Localization(__file__, 701, 45), '==', len_call_result_35829, int_35830)
        
        # Applying the binary operator 'and' (line 701)
        result_and_keyword_35832 = python_operator(stypy.reporting.localization.Localization(__file__, 701, 12), 'and', isinstance_call_result_35822, result_eq_35831)
        
        
        # Call to isinstance(...): (line 702)
        # Processing the call arguments (line 702)
        
        # Obtaining the type of the subscript
        int_35834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, 42), 'int')
        # Getting the type of 'colors' (line 702)
        colors_35835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 35), 'colors', False)
        # Obtaining the member '__getitem__' of a type (line 702)
        getitem___35836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 702, 35), colors_35835, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 702)
        subscript_call_result_35837 = invoke(stypy.reporting.localization.Localization(__file__, 702, 35), getitem___35836, int_35834)
        
        # Getting the type of 'six' (line 702)
        six_35838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 46), 'six', False)
        # Obtaining the member 'string_types' of a type (line 702)
        string_types_35839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 702, 46), six_35838, 'string_types')
        # Processing the call keyword arguments (line 702)
        kwargs_35840 = {}
        # Getting the type of 'isinstance' (line 702)
        isinstance_35833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 24), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 702)
        isinstance_call_result_35841 = invoke(stypy.reporting.localization.Localization(__file__, 702, 24), isinstance_35833, *[subscript_call_result_35837, string_types_35839], **kwargs_35840)
        
        # Applying the 'not' unary operator (line 702)
        result_not__35842 = python_operator(stypy.reporting.localization.Localization(__file__, 702, 20), 'not', isinstance_call_result_35841)
        
        # Applying the binary operator 'and' (line 701)
        result_and_keyword_35843 = python_operator(stypy.reporting.localization.Localization(__file__, 701, 12), 'and', result_and_keyword_35832, result_not__35842)
        
        # Testing the type of an if condition (line 701)
        if_condition_35844 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 701, 8), result_and_keyword_35843)
        # Assigning a type to the variable 'if_condition_35844' (line 701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 701, 8), 'if_condition_35844', if_condition_35844)
        # SSA begins for if statement (line 701)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 704):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to zip(...): (line 704)
        # Getting the type of 'colors' (line 704)
        colors_35846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 32), 'colors', False)
        # Processing the call keyword arguments (line 704)
        kwargs_35847 = {}
        # Getting the type of 'zip' (line 704)
        zip_35845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 27), 'zip', False)
        # Calling zip(args, kwargs) (line 704)
        zip_call_result_35848 = invoke(stypy.reporting.localization.Localization(__file__, 704, 27), zip_35845, *[colors_35846], **kwargs_35847)
        
        # Assigning a type to the variable 'call_assignment_34210' (line 704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'call_assignment_34210', zip_call_result_35848)
        
        # Assigning a Call to a Name (line 704):
        
        # Assigning a Call to a Name (line 704):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_35851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 12), 'int')
        # Processing the call keyword arguments
        kwargs_35852 = {}
        # Getting the type of 'call_assignment_34210' (line 704)
        call_assignment_34210_35849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'call_assignment_34210', False)
        # Obtaining the member '__getitem__' of a type (line 704)
        getitem___35850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 12), call_assignment_34210_35849, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_35853 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___35850, *[int_35851], **kwargs_35852)
        
        # Assigning a type to the variable 'call_assignment_34211' (line 704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'call_assignment_34211', getitem___call_result_35853)
        
        # Assigning a Name to a Name (line 704):
        
        # Assigning a Name to a Name (line 704):
        # Getting the type of 'call_assignment_34211' (line 704)
        call_assignment_34211_35854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'call_assignment_34211')
        # Assigning a type to the variable 'vals' (line 704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'vals', call_assignment_34211_35854)
        
        # Assigning a Call to a Name (line 704):
        
        # Assigning a Call to a Name (line 704):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_35857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 12), 'int')
        # Processing the call keyword arguments
        kwargs_35858 = {}
        # Getting the type of 'call_assignment_34210' (line 704)
        call_assignment_34210_35855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'call_assignment_34210', False)
        # Obtaining the member '__getitem__' of a type (line 704)
        getitem___35856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 12), call_assignment_34210_35855, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_35859 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___35856, *[int_35857], **kwargs_35858)
        
        # Assigning a type to the variable 'call_assignment_34212' (line 704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'call_assignment_34212', getitem___call_result_35859)
        
        # Assigning a Name to a Name (line 704):
        
        # Assigning a Name to a Name (line 704):
        # Getting the type of 'call_assignment_34212' (line 704)
        call_assignment_34212_35860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'call_assignment_34212')
        # Assigning a type to the variable 'colors' (line 704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 18), 'colors', call_assignment_34212_35860)
        # SSA branch for the else part of an if statement (line 701)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 706):
        
        # Assigning a Call to a Name (line 706):
        
        # Assigning a Call to a Name (line 706):
        
        # Call to linspace(...): (line 706)
        # Processing the call arguments (line 706)
        int_35863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 706, 31), 'int')
        int_35864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 706, 34), 'int')
        
        # Call to len(...): (line 706)
        # Processing the call arguments (line 706)
        # Getting the type of 'colors' (line 706)
        colors_35866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 41), 'colors', False)
        # Processing the call keyword arguments (line 706)
        kwargs_35867 = {}
        # Getting the type of 'len' (line 706)
        len_35865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 37), 'len', False)
        # Calling len(args, kwargs) (line 706)
        len_call_result_35868 = invoke(stypy.reporting.localization.Localization(__file__, 706, 37), len_35865, *[colors_35866], **kwargs_35867)
        
        # Processing the call keyword arguments (line 706)
        kwargs_35869 = {}
        # Getting the type of 'np' (line 706)
        np_35861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 19), 'np', False)
        # Obtaining the member 'linspace' of a type (line 706)
        linspace_35862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 19), np_35861, 'linspace')
        # Calling linspace(args, kwargs) (line 706)
        linspace_call_result_35870 = invoke(stypy.reporting.localization.Localization(__file__, 706, 19), linspace_35862, *[int_35863, int_35864, len_call_result_35868], **kwargs_35869)
        
        # Assigning a type to the variable 'vals' (line 706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 12), 'vals', linspace_call_result_35870)
        # SSA join for if statement (line 701)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 708):
        
        # Assigning a Call to a Name (line 708):
        
        # Assigning a Call to a Name (line 708):
        
        # Call to dict(...): (line 708)
        # Processing the call keyword arguments (line 708)
        
        # Obtaining an instance of the builtin type 'list' (line 708)
        list_35872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 708)
        
        keyword_35873 = list_35872
        
        # Obtaining an instance of the builtin type 'list' (line 708)
        list_35874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 708)
        
        keyword_35875 = list_35874
        
        # Obtaining an instance of the builtin type 'list' (line 708)
        list_35876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 708)
        
        keyword_35877 = list_35876
        
        # Obtaining an instance of the builtin type 'list' (line 708)
        list_35878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 54), 'list')
        # Adding type elements to the builtin type 'list' instance (line 708)
        
        keyword_35879 = list_35878
        kwargs_35880 = {'blue': keyword_35877, 'alpha': keyword_35879, 'green': keyword_35875, 'red': keyword_35873}
        # Getting the type of 'dict' (line 708)
        dict_35871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 16), 'dict', False)
        # Calling dict(args, kwargs) (line 708)
        dict_call_result_35881 = invoke(stypy.reporting.localization.Localization(__file__, 708, 16), dict_35871, *[], **kwargs_35880)
        
        # Assigning a type to the variable 'cdict' (line 708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 8), 'cdict', dict_call_result_35881)
        
        
        # Call to zip(...): (line 709)
        # Processing the call arguments (line 709)
        # Getting the type of 'vals' (line 709)
        vals_35883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 30), 'vals', False)
        # Getting the type of 'colors' (line 709)
        colors_35884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 36), 'colors', False)
        # Processing the call keyword arguments (line 709)
        kwargs_35885 = {}
        # Getting the type of 'zip' (line 709)
        zip_35882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 26), 'zip', False)
        # Calling zip(args, kwargs) (line 709)
        zip_call_result_35886 = invoke(stypy.reporting.localization.Localization(__file__, 709, 26), zip_35882, *[vals_35883, colors_35884], **kwargs_35885)
        
        # Testing the type of a for loop iterable (line 709)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 709, 8), zip_call_result_35886)
        # Getting the type of the for loop variable (line 709)
        for_loop_var_35887 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 709, 8), zip_call_result_35886)
        # Assigning a type to the variable 'val' (line 709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 709, 8), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 709, 8), for_loop_var_35887))
        # Assigning a type to the variable 'color' (line 709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 709, 8), 'color', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 709, 8), for_loop_var_35887))
        # SSA begins for a for statement (line 709)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Tuple (line 710):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to to_rgba(...): (line 710)
        # Processing the call arguments (line 710)
        # Getting the type of 'color' (line 710)
        color_35890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 48), 'color', False)
        # Processing the call keyword arguments (line 710)
        kwargs_35891 = {}
        # Getting the type of 'colorConverter' (line 710)
        colorConverter_35888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 25), 'colorConverter', False)
        # Obtaining the member 'to_rgba' of a type (line 710)
        to_rgba_35889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 25), colorConverter_35888, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 710)
        to_rgba_call_result_35892 = invoke(stypy.reporting.localization.Localization(__file__, 710, 25), to_rgba_35889, *[color_35890], **kwargs_35891)
        
        # Assigning a type to the variable 'call_assignment_34213' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'call_assignment_34213', to_rgba_call_result_35892)
        
        # Assigning a Call to a Name (line 710):
        
        # Assigning a Call to a Name (line 710):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_35895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 12), 'int')
        # Processing the call keyword arguments
        kwargs_35896 = {}
        # Getting the type of 'call_assignment_34213' (line 710)
        call_assignment_34213_35893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'call_assignment_34213', False)
        # Obtaining the member '__getitem__' of a type (line 710)
        getitem___35894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 12), call_assignment_34213_35893, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_35897 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___35894, *[int_35895], **kwargs_35896)
        
        # Assigning a type to the variable 'call_assignment_34214' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'call_assignment_34214', getitem___call_result_35897)
        
        # Assigning a Name to a Name (line 710):
        
        # Assigning a Name to a Name (line 710):
        # Getting the type of 'call_assignment_34214' (line 710)
        call_assignment_34214_35898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'call_assignment_34214')
        # Assigning a type to the variable 'r' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'r', call_assignment_34214_35898)
        
        # Assigning a Call to a Name (line 710):
        
        # Assigning a Call to a Name (line 710):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_35901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 12), 'int')
        # Processing the call keyword arguments
        kwargs_35902 = {}
        # Getting the type of 'call_assignment_34213' (line 710)
        call_assignment_34213_35899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'call_assignment_34213', False)
        # Obtaining the member '__getitem__' of a type (line 710)
        getitem___35900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 12), call_assignment_34213_35899, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_35903 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___35900, *[int_35901], **kwargs_35902)
        
        # Assigning a type to the variable 'call_assignment_34215' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'call_assignment_34215', getitem___call_result_35903)
        
        # Assigning a Name to a Name (line 710):
        
        # Assigning a Name to a Name (line 710):
        # Getting the type of 'call_assignment_34215' (line 710)
        call_assignment_34215_35904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'call_assignment_34215')
        # Assigning a type to the variable 'g' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 15), 'g', call_assignment_34215_35904)
        
        # Assigning a Call to a Name (line 710):
        
        # Assigning a Call to a Name (line 710):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_35907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 12), 'int')
        # Processing the call keyword arguments
        kwargs_35908 = {}
        # Getting the type of 'call_assignment_34213' (line 710)
        call_assignment_34213_35905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'call_assignment_34213', False)
        # Obtaining the member '__getitem__' of a type (line 710)
        getitem___35906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 12), call_assignment_34213_35905, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_35909 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___35906, *[int_35907], **kwargs_35908)
        
        # Assigning a type to the variable 'call_assignment_34216' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'call_assignment_34216', getitem___call_result_35909)
        
        # Assigning a Name to a Name (line 710):
        
        # Assigning a Name to a Name (line 710):
        # Getting the type of 'call_assignment_34216' (line 710)
        call_assignment_34216_35910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'call_assignment_34216')
        # Assigning a type to the variable 'b' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 18), 'b', call_assignment_34216_35910)
        
        # Assigning a Call to a Name (line 710):
        
        # Assigning a Call to a Name (line 710):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_35913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 12), 'int')
        # Processing the call keyword arguments
        kwargs_35914 = {}
        # Getting the type of 'call_assignment_34213' (line 710)
        call_assignment_34213_35911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'call_assignment_34213', False)
        # Obtaining the member '__getitem__' of a type (line 710)
        getitem___35912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 12), call_assignment_34213_35911, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_35915 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___35912, *[int_35913], **kwargs_35914)
        
        # Assigning a type to the variable 'call_assignment_34217' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'call_assignment_34217', getitem___call_result_35915)
        
        # Assigning a Name to a Name (line 710):
        
        # Assigning a Name to a Name (line 710):
        # Getting the type of 'call_assignment_34217' (line 710)
        call_assignment_34217_35916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'call_assignment_34217')
        # Assigning a type to the variable 'a' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 21), 'a', call_assignment_34217_35916)
        
        # Call to append(...): (line 711)
        # Processing the call arguments (line 711)
        
        # Obtaining an instance of the builtin type 'tuple' (line 711)
        tuple_35922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 711)
        # Adding element type (line 711)
        # Getting the type of 'val' (line 711)
        val_35923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 33), 'val', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 33), tuple_35922, val_35923)
        # Adding element type (line 711)
        # Getting the type of 'r' (line 711)
        r_35924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 38), 'r', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 33), tuple_35922, r_35924)
        # Adding element type (line 711)
        # Getting the type of 'r' (line 711)
        r_35925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 41), 'r', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 33), tuple_35922, r_35925)
        
        # Processing the call keyword arguments (line 711)
        kwargs_35926 = {}
        
        # Obtaining the type of the subscript
        unicode_35917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 18), 'unicode', u'red')
        # Getting the type of 'cdict' (line 711)
        cdict_35918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 12), 'cdict', False)
        # Obtaining the member '__getitem__' of a type (line 711)
        getitem___35919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 12), cdict_35918, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 711)
        subscript_call_result_35920 = invoke(stypy.reporting.localization.Localization(__file__, 711, 12), getitem___35919, unicode_35917)
        
        # Obtaining the member 'append' of a type (line 711)
        append_35921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 12), subscript_call_result_35920, 'append')
        # Calling append(args, kwargs) (line 711)
        append_call_result_35927 = invoke(stypy.reporting.localization.Localization(__file__, 711, 12), append_35921, *[tuple_35922], **kwargs_35926)
        
        
        # Call to append(...): (line 712)
        # Processing the call arguments (line 712)
        
        # Obtaining an instance of the builtin type 'tuple' (line 712)
        tuple_35933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 712)
        # Adding element type (line 712)
        # Getting the type of 'val' (line 712)
        val_35934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 35), 'val', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 712, 35), tuple_35933, val_35934)
        # Adding element type (line 712)
        # Getting the type of 'g' (line 712)
        g_35935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 40), 'g', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 712, 35), tuple_35933, g_35935)
        # Adding element type (line 712)
        # Getting the type of 'g' (line 712)
        g_35936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 43), 'g', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 712, 35), tuple_35933, g_35936)
        
        # Processing the call keyword arguments (line 712)
        kwargs_35937 = {}
        
        # Obtaining the type of the subscript
        unicode_35928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 18), 'unicode', u'green')
        # Getting the type of 'cdict' (line 712)
        cdict_35929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 12), 'cdict', False)
        # Obtaining the member '__getitem__' of a type (line 712)
        getitem___35930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 12), cdict_35929, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 712)
        subscript_call_result_35931 = invoke(stypy.reporting.localization.Localization(__file__, 712, 12), getitem___35930, unicode_35928)
        
        # Obtaining the member 'append' of a type (line 712)
        append_35932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 12), subscript_call_result_35931, 'append')
        # Calling append(args, kwargs) (line 712)
        append_call_result_35938 = invoke(stypy.reporting.localization.Localization(__file__, 712, 12), append_35932, *[tuple_35933], **kwargs_35937)
        
        
        # Call to append(...): (line 713)
        # Processing the call arguments (line 713)
        
        # Obtaining an instance of the builtin type 'tuple' (line 713)
        tuple_35944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 713)
        # Adding element type (line 713)
        # Getting the type of 'val' (line 713)
        val_35945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 34), 'val', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 713, 34), tuple_35944, val_35945)
        # Adding element type (line 713)
        # Getting the type of 'b' (line 713)
        b_35946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 39), 'b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 713, 34), tuple_35944, b_35946)
        # Adding element type (line 713)
        # Getting the type of 'b' (line 713)
        b_35947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 42), 'b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 713, 34), tuple_35944, b_35947)
        
        # Processing the call keyword arguments (line 713)
        kwargs_35948 = {}
        
        # Obtaining the type of the subscript
        unicode_35939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 18), 'unicode', u'blue')
        # Getting the type of 'cdict' (line 713)
        cdict_35940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 12), 'cdict', False)
        # Obtaining the member '__getitem__' of a type (line 713)
        getitem___35941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 12), cdict_35940, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 713)
        subscript_call_result_35942 = invoke(stypy.reporting.localization.Localization(__file__, 713, 12), getitem___35941, unicode_35939)
        
        # Obtaining the member 'append' of a type (line 713)
        append_35943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 12), subscript_call_result_35942, 'append')
        # Calling append(args, kwargs) (line 713)
        append_call_result_35949 = invoke(stypy.reporting.localization.Localization(__file__, 713, 12), append_35943, *[tuple_35944], **kwargs_35948)
        
        
        # Call to append(...): (line 714)
        # Processing the call arguments (line 714)
        
        # Obtaining an instance of the builtin type 'tuple' (line 714)
        tuple_35955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 714, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 714)
        # Adding element type (line 714)
        # Getting the type of 'val' (line 714)
        val_35956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 35), 'val', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 714, 35), tuple_35955, val_35956)
        # Adding element type (line 714)
        # Getting the type of 'a' (line 714)
        a_35957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 40), 'a', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 714, 35), tuple_35955, a_35957)
        # Adding element type (line 714)
        # Getting the type of 'a' (line 714)
        a_35958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 43), 'a', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 714, 35), tuple_35955, a_35958)
        
        # Processing the call keyword arguments (line 714)
        kwargs_35959 = {}
        
        # Obtaining the type of the subscript
        unicode_35950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 714, 18), 'unicode', u'alpha')
        # Getting the type of 'cdict' (line 714)
        cdict_35951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 12), 'cdict', False)
        # Obtaining the member '__getitem__' of a type (line 714)
        getitem___35952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 12), cdict_35951, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 714)
        subscript_call_result_35953 = invoke(stypy.reporting.localization.Localization(__file__, 714, 12), getitem___35952, unicode_35950)
        
        # Obtaining the member 'append' of a type (line 714)
        append_35954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 12), subscript_call_result_35953, 'append')
        # Calling append(args, kwargs) (line 714)
        append_call_result_35960 = invoke(stypy.reporting.localization.Localization(__file__, 714, 12), append_35954, *[tuple_35955], **kwargs_35959)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to LinearSegmentedColormap(...): (line 716)
        # Processing the call arguments (line 716)
        # Getting the type of 'name' (line 716)
        name_35962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 39), 'name', False)
        # Getting the type of 'cdict' (line 716)
        cdict_35963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 45), 'cdict', False)
        # Getting the type of 'N' (line 716)
        N_35964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 52), 'N', False)
        # Getting the type of 'gamma' (line 716)
        gamma_35965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 55), 'gamma', False)
        # Processing the call keyword arguments (line 716)
        kwargs_35966 = {}
        # Getting the type of 'LinearSegmentedColormap' (line 716)
        LinearSegmentedColormap_35961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 15), 'LinearSegmentedColormap', False)
        # Calling LinearSegmentedColormap(args, kwargs) (line 716)
        LinearSegmentedColormap_call_result_35967 = invoke(stypy.reporting.localization.Localization(__file__, 716, 15), LinearSegmentedColormap_35961, *[name_35962, cdict_35963, N_35964, gamma_35965], **kwargs_35966)
        
        # Assigning a type to the variable 'stypy_return_type' (line 716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 8), 'stypy_return_type', LinearSegmentedColormap_call_result_35967)
        
        # ################# End of 'from_list(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'from_list' in the type store
        # Getting the type of 'stypy_return_type' (line 687)
        stypy_return_type_35968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_35968)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'from_list'
        return stypy_return_type_35968


    @norecursion
    def _resample(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_resample'
        module_type_store = module_type_store.open_function_context('_resample', 718, 4, False)
        # Assigning a type to the variable 'self' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearSegmentedColormap._resample.__dict__.__setitem__('stypy_localization', localization)
        LinearSegmentedColormap._resample.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearSegmentedColormap._resample.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearSegmentedColormap._resample.__dict__.__setitem__('stypy_function_name', 'LinearSegmentedColormap._resample')
        LinearSegmentedColormap._resample.__dict__.__setitem__('stypy_param_names_list', ['lutsize'])
        LinearSegmentedColormap._resample.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearSegmentedColormap._resample.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearSegmentedColormap._resample.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearSegmentedColormap._resample.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearSegmentedColormap._resample.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearSegmentedColormap._resample.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearSegmentedColormap._resample', ['lutsize'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_resample', localization, ['lutsize'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_resample(...)' code ##################

        unicode_35969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, (-1)), 'unicode', u'\n        Return a new color map with *lutsize* entries.\n        ')
        
        # Call to LinearSegmentedColormap(...): (line 722)
        # Processing the call arguments (line 722)
        # Getting the type of 'self' (line 722)
        self_35971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 39), 'self', False)
        # Obtaining the member 'name' of a type (line 722)
        name_35972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 39), self_35971, 'name')
        # Getting the type of 'self' (line 722)
        self_35973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 50), 'self', False)
        # Obtaining the member '_segmentdata' of a type (line 722)
        _segmentdata_35974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 50), self_35973, '_segmentdata')
        # Getting the type of 'lutsize' (line 722)
        lutsize_35975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 69), 'lutsize', False)
        # Processing the call keyword arguments (line 722)
        kwargs_35976 = {}
        # Getting the type of 'LinearSegmentedColormap' (line 722)
        LinearSegmentedColormap_35970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 15), 'LinearSegmentedColormap', False)
        # Calling LinearSegmentedColormap(args, kwargs) (line 722)
        LinearSegmentedColormap_call_result_35977 = invoke(stypy.reporting.localization.Localization(__file__, 722, 15), LinearSegmentedColormap_35970, *[name_35972, _segmentdata_35974, lutsize_35975], **kwargs_35976)
        
        # Assigning a type to the variable 'stypy_return_type' (line 722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 722, 8), 'stypy_return_type', LinearSegmentedColormap_call_result_35977)
        
        # ################# End of '_resample(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_resample' in the type store
        # Getting the type of 'stypy_return_type' (line 718)
        stypy_return_type_35978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_35978)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_resample'
        return stypy_return_type_35978


    @norecursion
    def reversed(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 724)
        None_35979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 28), 'None')
        defaults = [None_35979]
        # Create a new context for function 'reversed'
        module_type_store = module_type_store.open_function_context('reversed', 724, 4, False)
        # Assigning a type to the variable 'self' (line 725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearSegmentedColormap.reversed.__dict__.__setitem__('stypy_localization', localization)
        LinearSegmentedColormap.reversed.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearSegmentedColormap.reversed.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearSegmentedColormap.reversed.__dict__.__setitem__('stypy_function_name', 'LinearSegmentedColormap.reversed')
        LinearSegmentedColormap.reversed.__dict__.__setitem__('stypy_param_names_list', ['name'])
        LinearSegmentedColormap.reversed.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearSegmentedColormap.reversed.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearSegmentedColormap.reversed.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearSegmentedColormap.reversed.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearSegmentedColormap.reversed.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearSegmentedColormap.reversed.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearSegmentedColormap.reversed', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'reversed', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'reversed(...)' code ##################

        unicode_35980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, (-1)), 'unicode', u'\n        Make a reversed instance of the Colormap.\n\n        Parameters\n        ----------\n        name : str, optional\n            The name for the reversed colormap. If it\'s None the\n            name will be the name of the parent colormap + "_r".\n\n        Returns\n        -------\n        LinearSegmentedColormap\n            The reversed colormap.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 739)
        # Getting the type of 'name' (line 739)
        name_35981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 11), 'name')
        # Getting the type of 'None' (line 739)
        None_35982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 19), 'None')
        
        (may_be_35983, more_types_in_union_35984) = may_be_none(name_35981, None_35982)

        if may_be_35983:

            if more_types_in_union_35984:
                # Runtime conditional SSA (line 739)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 740):
            
            # Assigning a BinOp to a Name (line 740):
            
            # Assigning a BinOp to a Name (line 740):
            # Getting the type of 'self' (line 740)
            self_35985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 19), 'self')
            # Obtaining the member 'name' of a type (line 740)
            name_35986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 19), self_35985, 'name')
            unicode_35987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, 31), 'unicode', u'_r')
            # Applying the binary operator '+' (line 740)
            result_add_35988 = python_operator(stypy.reporting.localization.Localization(__file__, 740, 19), '+', name_35986, unicode_35987)
            
            # Assigning a type to the variable 'name' (line 740)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 740, 12), 'name', result_add_35988)

            if more_types_in_union_35984:
                # SSA join for if statement (line 739)
                module_type_store = module_type_store.join_ssa_context()


        

        @norecursion
        def factory(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'factory'
            module_type_store = module_type_store.open_function_context('factory', 743, 8, False)
            
            # Passed parameters checking function
            factory.stypy_localization = localization
            factory.stypy_type_of_self = None
            factory.stypy_type_store = module_type_store
            factory.stypy_function_name = 'factory'
            factory.stypy_param_names_list = ['dat']
            factory.stypy_varargs_param_name = None
            factory.stypy_kwargs_param_name = None
            factory.stypy_call_defaults = defaults
            factory.stypy_call_varargs = varargs
            factory.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'factory', ['dat'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'factory', localization, ['dat'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'factory(...)' code ##################


            @norecursion
            def func_r(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'func_r'
                module_type_store = module_type_store.open_function_context('func_r', 744, 12, False)
                
                # Passed parameters checking function
                func_r.stypy_localization = localization
                func_r.stypy_type_of_self = None
                func_r.stypy_type_store = module_type_store
                func_r.stypy_function_name = 'func_r'
                func_r.stypy_param_names_list = ['x']
                func_r.stypy_varargs_param_name = None
                func_r.stypy_kwargs_param_name = None
                func_r.stypy_call_defaults = defaults
                func_r.stypy_call_varargs = varargs
                func_r.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, 'func_r', ['x'], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'func_r', localization, ['x'], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'func_r(...)' code ##################

                
                # Call to dat(...): (line 745)
                # Processing the call arguments (line 745)
                float_35990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 745, 27), 'float')
                # Getting the type of 'x' (line 745)
                x_35991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 33), 'x', False)
                # Applying the binary operator '-' (line 745)
                result_sub_35992 = python_operator(stypy.reporting.localization.Localization(__file__, 745, 27), '-', float_35990, x_35991)
                
                # Processing the call keyword arguments (line 745)
                kwargs_35993 = {}
                # Getting the type of 'dat' (line 745)
                dat_35989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 23), 'dat', False)
                # Calling dat(args, kwargs) (line 745)
                dat_call_result_35994 = invoke(stypy.reporting.localization.Localization(__file__, 745, 23), dat_35989, *[result_sub_35992], **kwargs_35993)
                
                # Assigning a type to the variable 'stypy_return_type' (line 745)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 745, 16), 'stypy_return_type', dat_call_result_35994)
                
                # ################# End of 'func_r(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'func_r' in the type store
                # Getting the type of 'stypy_return_type' (line 744)
                stypy_return_type_35995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_35995)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'func_r'
                return stypy_return_type_35995

            # Assigning a type to the variable 'func_r' (line 744)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 744, 12), 'func_r', func_r)
            # Getting the type of 'func_r' (line 746)
            func_r_35996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 19), 'func_r')
            # Assigning a type to the variable 'stypy_return_type' (line 746)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 12), 'stypy_return_type', func_r_35996)
            
            # ################# End of 'factory(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'factory' in the type store
            # Getting the type of 'stypy_return_type' (line 743)
            stypy_return_type_35997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_35997)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'factory'
            return stypy_return_type_35997

        # Assigning a type to the variable 'factory' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 8), 'factory', factory)
        
        # Assigning a Call to a Name (line 748):
        
        # Assigning a Call to a Name (line 748):
        
        # Assigning a Call to a Name (line 748):
        
        # Call to dict(...): (line 748)
        # Processing the call keyword arguments (line 748)
        kwargs_35999 = {}
        # Getting the type of 'dict' (line 748)
        dict_35998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 17), 'dict', False)
        # Calling dict(args, kwargs) (line 748)
        dict_call_result_36000 = invoke(stypy.reporting.localization.Localization(__file__, 748, 17), dict_35998, *[], **kwargs_35999)
        
        # Assigning a type to the variable 'data_r' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 8), 'data_r', dict_call_result_36000)
        
        
        # Call to iteritems(...): (line 749)
        # Processing the call arguments (line 749)
        # Getting the type of 'self' (line 749)
        self_36003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 39), 'self', False)
        # Obtaining the member '_segmentdata' of a type (line 749)
        _segmentdata_36004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 749, 39), self_36003, '_segmentdata')
        # Processing the call keyword arguments (line 749)
        kwargs_36005 = {}
        # Getting the type of 'six' (line 749)
        six_36001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 25), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 749)
        iteritems_36002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 749, 25), six_36001, 'iteritems')
        # Calling iteritems(args, kwargs) (line 749)
        iteritems_call_result_36006 = invoke(stypy.reporting.localization.Localization(__file__, 749, 25), iteritems_36002, *[_segmentdata_36004], **kwargs_36005)
        
        # Testing the type of a for loop iterable (line 749)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 749, 8), iteritems_call_result_36006)
        # Getting the type of the for loop variable (line 749)
        for_loop_var_36007 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 749, 8), iteritems_call_result_36006)
        # Assigning a type to the variable 'key' (line 749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 8), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 749, 8), for_loop_var_36007))
        # Assigning a type to the variable 'data' (line 749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 8), 'data', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 749, 8), for_loop_var_36007))
        # SSA begins for a for statement (line 749)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to callable(...): (line 750)
        # Processing the call arguments (line 750)
        # Getting the type of 'data' (line 750)
        data_36009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 24), 'data', False)
        # Processing the call keyword arguments (line 750)
        kwargs_36010 = {}
        # Getting the type of 'callable' (line 750)
        callable_36008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 15), 'callable', False)
        # Calling callable(args, kwargs) (line 750)
        callable_call_result_36011 = invoke(stypy.reporting.localization.Localization(__file__, 750, 15), callable_36008, *[data_36009], **kwargs_36010)
        
        # Testing the type of an if condition (line 750)
        if_condition_36012 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 750, 12), callable_call_result_36011)
        # Assigning a type to the variable 'if_condition_36012' (line 750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 12), 'if_condition_36012', if_condition_36012)
        # SSA begins for if statement (line 750)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 751):
        
        # Assigning a Call to a Subscript (line 751):
        
        # Assigning a Call to a Subscript (line 751):
        
        # Call to factory(...): (line 751)
        # Processing the call arguments (line 751)
        # Getting the type of 'data' (line 751)
        data_36014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 38), 'data', False)
        # Processing the call keyword arguments (line 751)
        kwargs_36015 = {}
        # Getting the type of 'factory' (line 751)
        factory_36013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 30), 'factory', False)
        # Calling factory(args, kwargs) (line 751)
        factory_call_result_36016 = invoke(stypy.reporting.localization.Localization(__file__, 751, 30), factory_36013, *[data_36014], **kwargs_36015)
        
        # Getting the type of 'data_r' (line 751)
        data_r_36017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 16), 'data_r')
        # Getting the type of 'key' (line 751)
        key_36018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 23), 'key')
        # Storing an element on a container (line 751)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 751, 16), data_r_36017, (key_36018, factory_call_result_36016))
        # SSA branch for the else part of an if statement (line 750)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a ListComp to a Name (line 753):
        
        # Assigning a ListComp to a Name (line 753):
        
        # Assigning a ListComp to a Name (line 753):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to reversed(...): (line 753)
        # Processing the call arguments (line 753)
        # Getting the type of 'data' (line 753)
        data_36026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 72), 'data', False)
        # Processing the call keyword arguments (line 753)
        kwargs_36027 = {}
        # Getting the type of 'reversed' (line 753)
        reversed_36025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 63), 'reversed', False)
        # Calling reversed(args, kwargs) (line 753)
        reversed_call_result_36028 = invoke(stypy.reporting.localization.Localization(__file__, 753, 63), reversed_36025, *[data_36026], **kwargs_36027)
        
        comprehension_36029 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 753, 28), reversed_call_result_36028)
        # Assigning a type to the variable 'x' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 28), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 753, 28), comprehension_36029))
        # Assigning a type to the variable 'y0' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 28), 'y0', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 753, 28), comprehension_36029))
        # Assigning a type to the variable 'y1' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 28), 'y1', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 753, 28), comprehension_36029))
        
        # Obtaining an instance of the builtin type 'tuple' (line 753)
        tuple_36019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 753)
        # Adding element type (line 753)
        float_36020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 29), 'float')
        # Getting the type of 'x' (line 753)
        x_36021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 35), 'x')
        # Applying the binary operator '-' (line 753)
        result_sub_36022 = python_operator(stypy.reporting.localization.Localization(__file__, 753, 29), '-', float_36020, x_36021)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 753, 29), tuple_36019, result_sub_36022)
        # Adding element type (line 753)
        # Getting the type of 'y1' (line 753)
        y1_36023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 38), 'y1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 753, 29), tuple_36019, y1_36023)
        # Adding element type (line 753)
        # Getting the type of 'y0' (line 753)
        y0_36024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 42), 'y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 753, 29), tuple_36019, y0_36024)
        
        list_36030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 28), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 753, 28), list_36030, tuple_36019)
        # Assigning a type to the variable 'new_data' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 16), 'new_data', list_36030)
        
        # Assigning a Name to a Subscript (line 754):
        
        # Assigning a Name to a Subscript (line 754):
        
        # Assigning a Name to a Subscript (line 754):
        # Getting the type of 'new_data' (line 754)
        new_data_36031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 30), 'new_data')
        # Getting the type of 'data_r' (line 754)
        data_r_36032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 16), 'data_r')
        # Getting the type of 'key' (line 754)
        key_36033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 23), 'key')
        # Storing an element on a container (line 754)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 754, 16), data_r_36032, (key_36033, new_data_36031))
        # SSA join for if statement (line 750)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to LinearSegmentedColormap(...): (line 756)
        # Processing the call arguments (line 756)
        # Getting the type of 'name' (line 756)
        name_36035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 39), 'name', False)
        # Getting the type of 'data_r' (line 756)
        data_r_36036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 45), 'data_r', False)
        # Getting the type of 'self' (line 756)
        self_36037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 53), 'self', False)
        # Obtaining the member 'N' of a type (line 756)
        N_36038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 53), self_36037, 'N')
        # Getting the type of 'self' (line 756)
        self_36039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 61), 'self', False)
        # Obtaining the member '_gamma' of a type (line 756)
        _gamma_36040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 61), self_36039, '_gamma')
        # Processing the call keyword arguments (line 756)
        kwargs_36041 = {}
        # Getting the type of 'LinearSegmentedColormap' (line 756)
        LinearSegmentedColormap_36034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 15), 'LinearSegmentedColormap', False)
        # Calling LinearSegmentedColormap(args, kwargs) (line 756)
        LinearSegmentedColormap_call_result_36042 = invoke(stypy.reporting.localization.Localization(__file__, 756, 15), LinearSegmentedColormap_36034, *[name_36035, data_r_36036, N_36038, _gamma_36040], **kwargs_36041)
        
        # Assigning a type to the variable 'stypy_return_type' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 8), 'stypy_return_type', LinearSegmentedColormap_call_result_36042)
        
        # ################# End of 'reversed(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'reversed' in the type store
        # Getting the type of 'stypy_return_type' (line 724)
        stypy_return_type_36043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_36043)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'reversed'
        return stypy_return_type_36043


# Assigning a type to the variable 'LinearSegmentedColormap' (line 606)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 0), 'LinearSegmentedColormap', LinearSegmentedColormap)
# Declaration of the 'ListedColormap' class
# Getting the type of 'Colormap' (line 759)
Colormap_36044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 21), 'Colormap')

class ListedColormap(Colormap_36044, ):
    unicode_36045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, (-1)), 'unicode', u'Colormap object generated from a list of colors.\n\n    This may be most useful when indexing directly into a colormap,\n    but it can also be used to generate special colormaps for ordinary\n    mapping.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_36046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 36), 'unicode', u'from_list')
        # Getting the type of 'None' (line 766)
        None_36047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 51), 'None')
        defaults = [unicode_36046, None_36047]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 766, 4, False)
        # Assigning a type to the variable 'self' (line 767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ListedColormap.__init__', ['colors', 'name', 'N'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['colors', 'name', 'N'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_36048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 788, (-1)), 'unicode', u'\n        Make a colormap from a list of colors.\n\n        *colors*\n            a list of matplotlib color specifications,\n            or an equivalent Nx3 or Nx4 floating point array\n            (*N* rgb or rgba values)\n        *name*\n            a string to identify the colormap\n        *N*\n            the number of entries in the map.  The default is *None*,\n            in which case there is one colormap entry for each\n            element in the list of colors.  If::\n\n                N < len(colors)\n\n            the list will be truncated at *N*.  If::\n\n                N > len(colors)\n\n            the list will be extended by repetition.\n        ')
        
        # Assigning a Name to a Attribute (line 789):
        
        # Assigning a Name to a Attribute (line 789):
        
        # Assigning a Name to a Attribute (line 789):
        # Getting the type of 'False' (line 789)
        False_36049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 26), 'False')
        # Getting the type of 'self' (line 789)
        self_36050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 8), 'self')
        # Setting the type of the member 'monochrome' of a type (line 789)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 8), self_36050, 'monochrome', False_36049)
        
        # Type idiom detected: calculating its left and rigth part (line 791)
        # Getting the type of 'N' (line 791)
        N_36051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 11), 'N')
        # Getting the type of 'None' (line 791)
        None_36052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 16), 'None')
        
        (may_be_36053, more_types_in_union_36054) = may_be_none(N_36051, None_36052)

        if may_be_36053:

            if more_types_in_union_36054:
                # Runtime conditional SSA (line 791)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 792):
            
            # Assigning a Name to a Attribute (line 792):
            
            # Assigning a Name to a Attribute (line 792):
            # Getting the type of 'colors' (line 792)
            colors_36055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 26), 'colors')
            # Getting the type of 'self' (line 792)
            self_36056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 12), 'self')
            # Setting the type of the member 'colors' of a type (line 792)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 12), self_36056, 'colors', colors_36055)
            
            # Assigning a Call to a Name (line 793):
            
            # Assigning a Call to a Name (line 793):
            
            # Assigning a Call to a Name (line 793):
            
            # Call to len(...): (line 793)
            # Processing the call arguments (line 793)
            # Getting the type of 'colors' (line 793)
            colors_36058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 20), 'colors', False)
            # Processing the call keyword arguments (line 793)
            kwargs_36059 = {}
            # Getting the type of 'len' (line 793)
            len_36057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 16), 'len', False)
            # Calling len(args, kwargs) (line 793)
            len_call_result_36060 = invoke(stypy.reporting.localization.Localization(__file__, 793, 16), len_36057, *[colors_36058], **kwargs_36059)
            
            # Assigning a type to the variable 'N' (line 793)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 12), 'N', len_call_result_36060)

            if more_types_in_union_36054:
                # Runtime conditional SSA for else branch (line 791)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_36053) or more_types_in_union_36054):
            
            
            # Call to isinstance(...): (line 795)
            # Processing the call arguments (line 795)
            # Getting the type of 'colors' (line 795)
            colors_36062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 26), 'colors', False)
            # Getting the type of 'six' (line 795)
            six_36063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 34), 'six', False)
            # Obtaining the member 'string_types' of a type (line 795)
            string_types_36064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 34), six_36063, 'string_types')
            # Processing the call keyword arguments (line 795)
            kwargs_36065 = {}
            # Getting the type of 'isinstance' (line 795)
            isinstance_36061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 795)
            isinstance_call_result_36066 = invoke(stypy.reporting.localization.Localization(__file__, 795, 15), isinstance_36061, *[colors_36062, string_types_36064], **kwargs_36065)
            
            # Testing the type of an if condition (line 795)
            if_condition_36067 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 795, 12), isinstance_call_result_36066)
            # Assigning a type to the variable 'if_condition_36067' (line 795)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 795, 12), 'if_condition_36067', if_condition_36067)
            # SSA begins for if statement (line 795)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Attribute (line 796):
            
            # Assigning a BinOp to a Attribute (line 796):
            
            # Assigning a BinOp to a Attribute (line 796):
            
            # Obtaining an instance of the builtin type 'list' (line 796)
            list_36068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 30), 'list')
            # Adding type elements to the builtin type 'list' instance (line 796)
            # Adding element type (line 796)
            # Getting the type of 'colors' (line 796)
            colors_36069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 31), 'colors')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 796, 30), list_36068, colors_36069)
            
            # Getting the type of 'N' (line 796)
            N_36070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 41), 'N')
            # Applying the binary operator '*' (line 796)
            result_mul_36071 = python_operator(stypy.reporting.localization.Localization(__file__, 796, 30), '*', list_36068, N_36070)
            
            # Getting the type of 'self' (line 796)
            self_36072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 16), 'self')
            # Setting the type of the member 'colors' of a type (line 796)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 16), self_36072, 'colors', result_mul_36071)
            
            # Assigning a Name to a Attribute (line 797):
            
            # Assigning a Name to a Attribute (line 797):
            
            # Assigning a Name to a Attribute (line 797):
            # Getting the type of 'True' (line 797)
            True_36073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 34), 'True')
            # Getting the type of 'self' (line 797)
            self_36074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 16), 'self')
            # Setting the type of the member 'monochrome' of a type (line 797)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 16), self_36074, 'monochrome', True_36073)
            # SSA branch for the else part of an if statement (line 795)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to iterable(...): (line 798)
            # Processing the call arguments (line 798)
            # Getting the type of 'colors' (line 798)
            colors_36077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 32), 'colors', False)
            # Processing the call keyword arguments (line 798)
            kwargs_36078 = {}
            # Getting the type of 'cbook' (line 798)
            cbook_36075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 17), 'cbook', False)
            # Obtaining the member 'iterable' of a type (line 798)
            iterable_36076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 17), cbook_36075, 'iterable')
            # Calling iterable(args, kwargs) (line 798)
            iterable_call_result_36079 = invoke(stypy.reporting.localization.Localization(__file__, 798, 17), iterable_36076, *[colors_36077], **kwargs_36078)
            
            # Testing the type of an if condition (line 798)
            if_condition_36080 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 798, 17), iterable_call_result_36079)
            # Assigning a type to the variable 'if_condition_36080' (line 798)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 17), 'if_condition_36080', if_condition_36080)
            # SSA begins for if statement (line 798)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            
            # Call to len(...): (line 799)
            # Processing the call arguments (line 799)
            # Getting the type of 'colors' (line 799)
            colors_36082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 23), 'colors', False)
            # Processing the call keyword arguments (line 799)
            kwargs_36083 = {}
            # Getting the type of 'len' (line 799)
            len_36081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 19), 'len', False)
            # Calling len(args, kwargs) (line 799)
            len_call_result_36084 = invoke(stypy.reporting.localization.Localization(__file__, 799, 19), len_36081, *[colors_36082], **kwargs_36083)
            
            int_36085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 34), 'int')
            # Applying the binary operator '==' (line 799)
            result_eq_36086 = python_operator(stypy.reporting.localization.Localization(__file__, 799, 19), '==', len_call_result_36084, int_36085)
            
            # Testing the type of an if condition (line 799)
            if_condition_36087 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 799, 16), result_eq_36086)
            # Assigning a type to the variable 'if_condition_36087' (line 799)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 16), 'if_condition_36087', if_condition_36087)
            # SSA begins for if statement (line 799)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 800):
            
            # Assigning a Name to a Attribute (line 800):
            
            # Assigning a Name to a Attribute (line 800):
            # Getting the type of 'True' (line 800)
            True_36088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 38), 'True')
            # Getting the type of 'self' (line 800)
            self_36089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 20), 'self')
            # Setting the type of the member 'monochrome' of a type (line 800)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 800, 20), self_36089, 'monochrome', True_36088)
            # SSA join for if statement (line 799)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Attribute (line 801):
            
            # Assigning a Call to a Attribute (line 801):
            
            # Assigning a Call to a Attribute (line 801):
            
            # Call to list(...): (line 801)
            # Processing the call arguments (line 801)
            
            # Call to islice(...): (line 802)
            # Processing the call arguments (line 802)
            
            # Call to cycle(...): (line 802)
            # Processing the call arguments (line 802)
            # Getting the type of 'colors' (line 802)
            colors_36095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 53), 'colors', False)
            # Processing the call keyword arguments (line 802)
            kwargs_36096 = {}
            # Getting the type of 'itertools' (line 802)
            itertools_36093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 37), 'itertools', False)
            # Obtaining the member 'cycle' of a type (line 802)
            cycle_36094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 37), itertools_36093, 'cycle')
            # Calling cycle(args, kwargs) (line 802)
            cycle_call_result_36097 = invoke(stypy.reporting.localization.Localization(__file__, 802, 37), cycle_36094, *[colors_36095], **kwargs_36096)
            
            # Getting the type of 'N' (line 802)
            N_36098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 62), 'N', False)
            # Processing the call keyword arguments (line 802)
            kwargs_36099 = {}
            # Getting the type of 'itertools' (line 802)
            itertools_36091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 20), 'itertools', False)
            # Obtaining the member 'islice' of a type (line 802)
            islice_36092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 20), itertools_36091, 'islice')
            # Calling islice(args, kwargs) (line 802)
            islice_call_result_36100 = invoke(stypy.reporting.localization.Localization(__file__, 802, 20), islice_36092, *[cycle_call_result_36097, N_36098], **kwargs_36099)
            
            # Processing the call keyword arguments (line 801)
            kwargs_36101 = {}
            # Getting the type of 'list' (line 801)
            list_36090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 30), 'list', False)
            # Calling list(args, kwargs) (line 801)
            list_call_result_36102 = invoke(stypy.reporting.localization.Localization(__file__, 801, 30), list_36090, *[islice_call_result_36100], **kwargs_36101)
            
            # Getting the type of 'self' (line 801)
            self_36103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 16), 'self')
            # Setting the type of the member 'colors' of a type (line 801)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 801, 16), self_36103, 'colors', list_call_result_36102)
            # SSA branch for the else part of an if statement (line 798)
            module_type_store.open_ssa_branch('else')
            
            
            # SSA begins for try-except statement (line 804)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Name (line 805):
            
            # Assigning a Call to a Name (line 805):
            
            # Assigning a Call to a Name (line 805):
            
            # Call to float(...): (line 805)
            # Processing the call arguments (line 805)
            # Getting the type of 'colors' (line 805)
            colors_36105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 33), 'colors', False)
            # Processing the call keyword arguments (line 805)
            kwargs_36106 = {}
            # Getting the type of 'float' (line 805)
            float_36104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 27), 'float', False)
            # Calling float(args, kwargs) (line 805)
            float_call_result_36107 = invoke(stypy.reporting.localization.Localization(__file__, 805, 27), float_36104, *[colors_36105], **kwargs_36106)
            
            # Assigning a type to the variable 'gray' (line 805)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 20), 'gray', float_call_result_36107)
            # SSA branch for the except part of a try statement (line 804)
            # SSA branch for the except 'TypeError' branch of a try statement (line 804)
            module_type_store.open_ssa_branch('except')
            pass
            # SSA branch for the else branch of a try statement (line 804)
            module_type_store.open_ssa_branch('except else')
            
            # Assigning a BinOp to a Attribute (line 809):
            
            # Assigning a BinOp to a Attribute (line 809):
            
            # Assigning a BinOp to a Attribute (line 809):
            
            # Obtaining an instance of the builtin type 'list' (line 809)
            list_36108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 34), 'list')
            # Adding type elements to the builtin type 'list' instance (line 809)
            # Adding element type (line 809)
            # Getting the type of 'gray' (line 809)
            gray_36109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 35), 'gray')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 809, 34), list_36108, gray_36109)
            
            # Getting the type of 'N' (line 809)
            N_36110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 43), 'N')
            # Applying the binary operator '*' (line 809)
            result_mul_36111 = python_operator(stypy.reporting.localization.Localization(__file__, 809, 34), '*', list_36108, N_36110)
            
            # Getting the type of 'self' (line 809)
            self_36112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 20), 'self')
            # Setting the type of the member 'colors' of a type (line 809)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 20), self_36112, 'colors', result_mul_36111)
            # SSA join for try-except statement (line 804)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Name to a Attribute (line 810):
            
            # Assigning a Name to a Attribute (line 810):
            
            # Assigning a Name to a Attribute (line 810):
            # Getting the type of 'True' (line 810)
            True_36113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 34), 'True')
            # Getting the type of 'self' (line 810)
            self_36114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 16), 'self')
            # Setting the type of the member 'monochrome' of a type (line 810)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 810, 16), self_36114, 'monochrome', True_36113)
            # SSA join for if statement (line 798)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 795)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_36053 and more_types_in_union_36054):
                # SSA join for if statement (line 791)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to __init__(...): (line 811)
        # Processing the call arguments (line 811)
        # Getting the type of 'self' (line 811)
        self_36117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 26), 'self', False)
        # Getting the type of 'name' (line 811)
        name_36118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 32), 'name', False)
        # Getting the type of 'N' (line 811)
        N_36119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 38), 'N', False)
        # Processing the call keyword arguments (line 811)
        kwargs_36120 = {}
        # Getting the type of 'Colormap' (line 811)
        Colormap_36115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 8), 'Colormap', False)
        # Obtaining the member '__init__' of a type (line 811)
        init___36116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 8), Colormap_36115, '__init__')
        # Calling __init__(args, kwargs) (line 811)
        init___call_result_36121 = invoke(stypy.reporting.localization.Localization(__file__, 811, 8), init___36116, *[self_36117, name_36118, N_36119], **kwargs_36120)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _init(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_init'
        module_type_store = module_type_store.open_function_context('_init', 813, 4, False)
        # Assigning a type to the variable 'self' (line 814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ListedColormap._init.__dict__.__setitem__('stypy_localization', localization)
        ListedColormap._init.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ListedColormap._init.__dict__.__setitem__('stypy_type_store', module_type_store)
        ListedColormap._init.__dict__.__setitem__('stypy_function_name', 'ListedColormap._init')
        ListedColormap._init.__dict__.__setitem__('stypy_param_names_list', [])
        ListedColormap._init.__dict__.__setitem__('stypy_varargs_param_name', None)
        ListedColormap._init.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ListedColormap._init.__dict__.__setitem__('stypy_call_defaults', defaults)
        ListedColormap._init.__dict__.__setitem__('stypy_call_varargs', varargs)
        ListedColormap._init.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ListedColormap._init.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ListedColormap._init', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_init', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_init(...)' code ##################

        
        # Assigning a Call to a Name (line 814):
        
        # Assigning a Call to a Name (line 814):
        
        # Assigning a Call to a Name (line 814):
        
        # Call to to_rgba_array(...): (line 814)
        # Processing the call arguments (line 814)
        # Getting the type of 'self' (line 814)
        self_36124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 44), 'self', False)
        # Obtaining the member 'colors' of a type (line 814)
        colors_36125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 44), self_36124, 'colors')
        # Processing the call keyword arguments (line 814)
        kwargs_36126 = {}
        # Getting the type of 'colorConverter' (line 814)
        colorConverter_36122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 15), 'colorConverter', False)
        # Obtaining the member 'to_rgba_array' of a type (line 814)
        to_rgba_array_36123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 15), colorConverter_36122, 'to_rgba_array')
        # Calling to_rgba_array(args, kwargs) (line 814)
        to_rgba_array_call_result_36127 = invoke(stypy.reporting.localization.Localization(__file__, 814, 15), to_rgba_array_36123, *[colors_36125], **kwargs_36126)
        
        # Assigning a type to the variable 'rgba' (line 814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 8), 'rgba', to_rgba_array_call_result_36127)
        
        # Assigning a Call to a Attribute (line 815):
        
        # Assigning a Call to a Attribute (line 815):
        
        # Assigning a Call to a Attribute (line 815):
        
        # Call to zeros(...): (line 815)
        # Processing the call arguments (line 815)
        
        # Obtaining an instance of the builtin type 'tuple' (line 815)
        tuple_36130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 815)
        # Adding element type (line 815)
        # Getting the type of 'self' (line 815)
        self_36131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 30), 'self', False)
        # Obtaining the member 'N' of a type (line 815)
        N_36132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 30), self_36131, 'N')
        int_36133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 39), 'int')
        # Applying the binary operator '+' (line 815)
        result_add_36134 = python_operator(stypy.reporting.localization.Localization(__file__, 815, 30), '+', N_36132, int_36133)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 815, 30), tuple_36130, result_add_36134)
        # Adding element type (line 815)
        int_36135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 42), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 815, 30), tuple_36130, int_36135)
        
        # Getting the type of 'float' (line 815)
        float_36136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 46), 'float', False)
        # Processing the call keyword arguments (line 815)
        kwargs_36137 = {}
        # Getting the type of 'np' (line 815)
        np_36128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 20), 'np', False)
        # Obtaining the member 'zeros' of a type (line 815)
        zeros_36129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 20), np_36128, 'zeros')
        # Calling zeros(args, kwargs) (line 815)
        zeros_call_result_36138 = invoke(stypy.reporting.localization.Localization(__file__, 815, 20), zeros_36129, *[tuple_36130, float_36136], **kwargs_36137)
        
        # Getting the type of 'self' (line 815)
        self_36139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 8), 'self')
        # Setting the type of the member '_lut' of a type (line 815)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 8), self_36139, '_lut', zeros_call_result_36138)
        
        # Assigning a Name to a Subscript (line 816):
        
        # Assigning a Name to a Subscript (line 816):
        
        # Assigning a Name to a Subscript (line 816):
        # Getting the type of 'rgba' (line 816)
        rgba_36140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 25), 'rgba')
        # Getting the type of 'self' (line 816)
        self_36141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 8), 'self')
        # Obtaining the member '_lut' of a type (line 816)
        _lut_36142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 816, 8), self_36141, '_lut')
        int_36143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 816, 19), 'int')
        slice_36144 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 816, 8), None, int_36143, None)
        # Storing an element on a container (line 816)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 816, 8), _lut_36142, (slice_36144, rgba_36140))
        
        # Assigning a Name to a Attribute (line 817):
        
        # Assigning a Name to a Attribute (line 817):
        
        # Assigning a Name to a Attribute (line 817):
        # Getting the type of 'True' (line 817)
        True_36145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 23), 'True')
        # Getting the type of 'self' (line 817)
        self_36146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'self')
        # Setting the type of the member '_isinit' of a type (line 817)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 8), self_36146, '_isinit', True_36145)
        
        # Call to _set_extremes(...): (line 818)
        # Processing the call keyword arguments (line 818)
        kwargs_36149 = {}
        # Getting the type of 'self' (line 818)
        self_36147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'self', False)
        # Obtaining the member '_set_extremes' of a type (line 818)
        _set_extremes_36148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 8), self_36147, '_set_extremes')
        # Calling _set_extremes(args, kwargs) (line 818)
        _set_extremes_call_result_36150 = invoke(stypy.reporting.localization.Localization(__file__, 818, 8), _set_extremes_36148, *[], **kwargs_36149)
        
        
        # ################# End of '_init(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_init' in the type store
        # Getting the type of 'stypy_return_type' (line 813)
        stypy_return_type_36151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_36151)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_init'
        return stypy_return_type_36151


    @norecursion
    def _resample(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_resample'
        module_type_store = module_type_store.open_function_context('_resample', 820, 4, False)
        # Assigning a type to the variable 'self' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ListedColormap._resample.__dict__.__setitem__('stypy_localization', localization)
        ListedColormap._resample.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ListedColormap._resample.__dict__.__setitem__('stypy_type_store', module_type_store)
        ListedColormap._resample.__dict__.__setitem__('stypy_function_name', 'ListedColormap._resample')
        ListedColormap._resample.__dict__.__setitem__('stypy_param_names_list', ['lutsize'])
        ListedColormap._resample.__dict__.__setitem__('stypy_varargs_param_name', None)
        ListedColormap._resample.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ListedColormap._resample.__dict__.__setitem__('stypy_call_defaults', defaults)
        ListedColormap._resample.__dict__.__setitem__('stypy_call_varargs', varargs)
        ListedColormap._resample.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ListedColormap._resample.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ListedColormap._resample', ['lutsize'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_resample', localization, ['lutsize'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_resample(...)' code ##################

        unicode_36152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, (-1)), 'unicode', u'\n        Return a new color map with *lutsize* entries.\n        ')
        
        # Assigning a Call to a Name (line 824):
        
        # Assigning a Call to a Name (line 824):
        
        # Assigning a Call to a Name (line 824):
        
        # Call to self(...): (line 824)
        # Processing the call arguments (line 824)
        
        # Call to linspace(...): (line 824)
        # Processing the call arguments (line 824)
        int_36156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 824, 34), 'int')
        int_36157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 824, 37), 'int')
        # Getting the type of 'lutsize' (line 824)
        lutsize_36158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 40), 'lutsize', False)
        # Processing the call keyword arguments (line 824)
        kwargs_36159 = {}
        # Getting the type of 'np' (line 824)
        np_36154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 22), 'np', False)
        # Obtaining the member 'linspace' of a type (line 824)
        linspace_36155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 824, 22), np_36154, 'linspace')
        # Calling linspace(args, kwargs) (line 824)
        linspace_call_result_36160 = invoke(stypy.reporting.localization.Localization(__file__, 824, 22), linspace_36155, *[int_36156, int_36157, lutsize_36158], **kwargs_36159)
        
        # Processing the call keyword arguments (line 824)
        kwargs_36161 = {}
        # Getting the type of 'self' (line 824)
        self_36153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 17), 'self', False)
        # Calling self(args, kwargs) (line 824)
        self_call_result_36162 = invoke(stypy.reporting.localization.Localization(__file__, 824, 17), self_36153, *[linspace_call_result_36160], **kwargs_36161)
        
        # Assigning a type to the variable 'colors' (line 824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 8), 'colors', self_call_result_36162)
        
        # Call to ListedColormap(...): (line 825)
        # Processing the call arguments (line 825)
        # Getting the type of 'colors' (line 825)
        colors_36164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 30), 'colors', False)
        # Processing the call keyword arguments (line 825)
        # Getting the type of 'self' (line 825)
        self_36165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 43), 'self', False)
        # Obtaining the member 'name' of a type (line 825)
        name_36166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 43), self_36165, 'name')
        keyword_36167 = name_36166
        kwargs_36168 = {'name': keyword_36167}
        # Getting the type of 'ListedColormap' (line 825)
        ListedColormap_36163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 15), 'ListedColormap', False)
        # Calling ListedColormap(args, kwargs) (line 825)
        ListedColormap_call_result_36169 = invoke(stypy.reporting.localization.Localization(__file__, 825, 15), ListedColormap_36163, *[colors_36164], **kwargs_36168)
        
        # Assigning a type to the variable 'stypy_return_type' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'stypy_return_type', ListedColormap_call_result_36169)
        
        # ################# End of '_resample(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_resample' in the type store
        # Getting the type of 'stypy_return_type' (line 820)
        stypy_return_type_36170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_36170)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_resample'
        return stypy_return_type_36170


    @norecursion
    def reversed(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 827)
        None_36171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 28), 'None')
        defaults = [None_36171]
        # Create a new context for function 'reversed'
        module_type_store = module_type_store.open_function_context('reversed', 827, 4, False)
        # Assigning a type to the variable 'self' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ListedColormap.reversed.__dict__.__setitem__('stypy_localization', localization)
        ListedColormap.reversed.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ListedColormap.reversed.__dict__.__setitem__('stypy_type_store', module_type_store)
        ListedColormap.reversed.__dict__.__setitem__('stypy_function_name', 'ListedColormap.reversed')
        ListedColormap.reversed.__dict__.__setitem__('stypy_param_names_list', ['name'])
        ListedColormap.reversed.__dict__.__setitem__('stypy_varargs_param_name', None)
        ListedColormap.reversed.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ListedColormap.reversed.__dict__.__setitem__('stypy_call_defaults', defaults)
        ListedColormap.reversed.__dict__.__setitem__('stypy_call_varargs', varargs)
        ListedColormap.reversed.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ListedColormap.reversed.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ListedColormap.reversed', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'reversed', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'reversed(...)' code ##################

        unicode_36172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 841, (-1)), 'unicode', u'\n        Make a reversed instance of the Colormap.\n\n        Parameters\n        ----------\n        name : str, optional\n            The name for the reversed colormap. If it\'s None the\n            name will be the name of the parent colormap + "_r".\n\n        Returns\n        -------\n        ListedColormap\n            A reversed instance of the colormap.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 842)
        # Getting the type of 'name' (line 842)
        name_36173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 11), 'name')
        # Getting the type of 'None' (line 842)
        None_36174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 19), 'None')
        
        (may_be_36175, more_types_in_union_36176) = may_be_none(name_36173, None_36174)

        if may_be_36175:

            if more_types_in_union_36176:
                # Runtime conditional SSA (line 842)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 843):
            
            # Assigning a BinOp to a Name (line 843):
            
            # Assigning a BinOp to a Name (line 843):
            # Getting the type of 'self' (line 843)
            self_36177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 19), 'self')
            # Obtaining the member 'name' of a type (line 843)
            name_36178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 843, 19), self_36177, 'name')
            unicode_36179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 31), 'unicode', u'_r')
            # Applying the binary operator '+' (line 843)
            result_add_36180 = python_operator(stypy.reporting.localization.Localization(__file__, 843, 19), '+', name_36178, unicode_36179)
            
            # Assigning a type to the variable 'name' (line 843)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 843, 12), 'name', result_add_36180)

            if more_types_in_union_36176:
                # SSA join for if statement (line 842)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 845):
        
        # Assigning a Call to a Name (line 845):
        
        # Assigning a Call to a Name (line 845):
        
        # Call to list(...): (line 845)
        # Processing the call arguments (line 845)
        
        # Call to reversed(...): (line 845)
        # Processing the call arguments (line 845)
        # Getting the type of 'self' (line 845)
        self_36183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 33), 'self', False)
        # Obtaining the member 'colors' of a type (line 845)
        colors_36184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 33), self_36183, 'colors')
        # Processing the call keyword arguments (line 845)
        kwargs_36185 = {}
        # Getting the type of 'reversed' (line 845)
        reversed_36182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 24), 'reversed', False)
        # Calling reversed(args, kwargs) (line 845)
        reversed_call_result_36186 = invoke(stypy.reporting.localization.Localization(__file__, 845, 24), reversed_36182, *[colors_36184], **kwargs_36185)
        
        # Processing the call keyword arguments (line 845)
        kwargs_36187 = {}
        # Getting the type of 'list' (line 845)
        list_36181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 19), 'list', False)
        # Calling list(args, kwargs) (line 845)
        list_call_result_36188 = invoke(stypy.reporting.localization.Localization(__file__, 845, 19), list_36181, *[reversed_call_result_36186], **kwargs_36187)
        
        # Assigning a type to the variable 'colors_r' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 8), 'colors_r', list_call_result_36188)
        
        # Call to ListedColormap(...): (line 846)
        # Processing the call arguments (line 846)
        # Getting the type of 'colors_r' (line 846)
        colors_r_36190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 30), 'colors_r', False)
        # Processing the call keyword arguments (line 846)
        # Getting the type of 'name' (line 846)
        name_36191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 45), 'name', False)
        keyword_36192 = name_36191
        # Getting the type of 'self' (line 846)
        self_36193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 53), 'self', False)
        # Obtaining the member 'N' of a type (line 846)
        N_36194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 846, 53), self_36193, 'N')
        keyword_36195 = N_36194
        kwargs_36196 = {'name': keyword_36192, 'N': keyword_36195}
        # Getting the type of 'ListedColormap' (line 846)
        ListedColormap_36189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 15), 'ListedColormap', False)
        # Calling ListedColormap(args, kwargs) (line 846)
        ListedColormap_call_result_36197 = invoke(stypy.reporting.localization.Localization(__file__, 846, 15), ListedColormap_36189, *[colors_r_36190], **kwargs_36196)
        
        # Assigning a type to the variable 'stypy_return_type' (line 846)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 8), 'stypy_return_type', ListedColormap_call_result_36197)
        
        # ################# End of 'reversed(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'reversed' in the type store
        # Getting the type of 'stypy_return_type' (line 827)
        stypy_return_type_36198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_36198)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'reversed'
        return stypy_return_type_36198


# Assigning a type to the variable 'ListedColormap' (line 759)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 0), 'ListedColormap', ListedColormap)
# Declaration of the 'Normalize' class

class Normalize(object, ):
    unicode_36199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 854, (-1)), 'unicode', u'\n    A class which, when called, can normalize data into\n    the ``[0.0, 1.0]`` interval.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 855)
        None_36200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 28), 'None')
        # Getting the type of 'None' (line 855)
        None_36201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 39), 'None')
        # Getting the type of 'False' (line 855)
        False_36202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 50), 'False')
        defaults = [None_36200, None_36201, False_36202]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 855, 4, False)
        # Assigning a type to the variable 'self' (line 856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 856, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Normalize.__init__', ['vmin', 'vmax', 'clip'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['vmin', 'vmax', 'clip'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_36203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 872, (-1)), 'unicode', u'\n        If *vmin* or *vmax* is not given, they are initialized from the\n        minimum and maximum value respectively of the first input\n        processed.  That is, *__call__(A)* calls *autoscale_None(A)*.\n        If *clip* is *True* and the given value falls outside the range,\n        the returned value will be 0 or 1, whichever is closer.\n        Returns 0 if::\n\n            vmin==vmax\n\n        Works with scalars or arrays, including masked arrays.  If\n        *clip* is *True*, masked values are set to 1; otherwise they\n        remain masked.  Clipping silently defeats the purpose of setting\n        the over, under, and masked colors in the colormap, so it is\n        likely to lead to surprises; therefore the default is\n        *clip* = *False*.\n        ')
        
        # Assigning a Name to a Attribute (line 873):
        
        # Assigning a Name to a Attribute (line 873):
        
        # Assigning a Name to a Attribute (line 873):
        # Getting the type of 'vmin' (line 873)
        vmin_36204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 20), 'vmin')
        # Getting the type of 'self' (line 873)
        self_36205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'self')
        # Setting the type of the member 'vmin' of a type (line 873)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 8), self_36205, 'vmin', vmin_36204)
        
        # Assigning a Name to a Attribute (line 874):
        
        # Assigning a Name to a Attribute (line 874):
        
        # Assigning a Name to a Attribute (line 874):
        # Getting the type of 'vmax' (line 874)
        vmax_36206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 20), 'vmax')
        # Getting the type of 'self' (line 874)
        self_36207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 8), 'self')
        # Setting the type of the member 'vmax' of a type (line 874)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 874, 8), self_36207, 'vmax', vmax_36206)
        
        # Assigning a Name to a Attribute (line 875):
        
        # Assigning a Name to a Attribute (line 875):
        
        # Assigning a Name to a Attribute (line 875):
        # Getting the type of 'clip' (line 875)
        clip_36208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 20), 'clip')
        # Getting the type of 'self' (line 875)
        self_36209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 8), 'self')
        # Setting the type of the member 'clip' of a type (line 875)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 8), self_36209, 'clip', clip_36208)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @staticmethod
    @norecursion
    def process_value(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'process_value'
        module_type_store = module_type_store.open_function_context('process_value', 877, 4, False)
        
        # Passed parameters checking function
        Normalize.process_value.__dict__.__setitem__('stypy_localization', localization)
        Normalize.process_value.__dict__.__setitem__('stypy_type_of_self', None)
        Normalize.process_value.__dict__.__setitem__('stypy_type_store', module_type_store)
        Normalize.process_value.__dict__.__setitem__('stypy_function_name', 'process_value')
        Normalize.process_value.__dict__.__setitem__('stypy_param_names_list', ['value'])
        Normalize.process_value.__dict__.__setitem__('stypy_varargs_param_name', None)
        Normalize.process_value.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Normalize.process_value.__dict__.__setitem__('stypy_call_defaults', defaults)
        Normalize.process_value.__dict__.__setitem__('stypy_call_varargs', varargs)
        Normalize.process_value.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Normalize.process_value.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, 'process_value', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'process_value', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'process_value(...)' code ##################

        unicode_36210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 893, (-1)), 'unicode', u'\n        Homogenize the input *value* for easy and efficient normalization.\n\n        *value* can be a scalar or sequence.\n\n        Returns *result*, *is_scalar*, where *result* is a\n        masked array matching *value*.  Float dtypes are preserved;\n        integer types with two bytes or smaller are converted to\n        np.float32, and larger types are converted to np.float64.\n        Preserving float32 when possible, and using in-place operations,\n        can greatly improve speed for large arrays.\n\n        Experimental; we may want to add an option to force the\n        use of float32.\n        ')
        
        # Assigning a UnaryOp to a Name (line 894):
        
        # Assigning a UnaryOp to a Name (line 894):
        
        # Assigning a UnaryOp to a Name (line 894):
        
        
        # Call to iterable(...): (line 894)
        # Processing the call arguments (line 894)
        # Getting the type of 'value' (line 894)
        value_36213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 39), 'value', False)
        # Processing the call keyword arguments (line 894)
        kwargs_36214 = {}
        # Getting the type of 'cbook' (line 894)
        cbook_36211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 24), 'cbook', False)
        # Obtaining the member 'iterable' of a type (line 894)
        iterable_36212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 24), cbook_36211, 'iterable')
        # Calling iterable(args, kwargs) (line 894)
        iterable_call_result_36215 = invoke(stypy.reporting.localization.Localization(__file__, 894, 24), iterable_36212, *[value_36213], **kwargs_36214)
        
        # Applying the 'not' unary operator (line 894)
        result_not__36216 = python_operator(stypy.reporting.localization.Localization(__file__, 894, 20), 'not', iterable_call_result_36215)
        
        # Assigning a type to the variable 'is_scalar' (line 894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 894, 8), 'is_scalar', result_not__36216)
        
        # Getting the type of 'is_scalar' (line 895)
        is_scalar_36217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 11), 'is_scalar')
        # Testing the type of an if condition (line 895)
        if_condition_36218 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 895, 8), is_scalar_36217)
        # Assigning a type to the variable 'if_condition_36218' (line 895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 8), 'if_condition_36218', if_condition_36218)
        # SSA begins for if statement (line 895)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 896):
        
        # Assigning a List to a Name (line 896):
        
        # Assigning a List to a Name (line 896):
        
        # Obtaining an instance of the builtin type 'list' (line 896)
        list_36219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 896)
        # Adding element type (line 896)
        # Getting the type of 'value' (line 896)
        value_36220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 21), 'value')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 20), list_36219, value_36220)
        
        # Assigning a type to the variable 'value' (line 896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 12), 'value', list_36219)
        # SSA join for if statement (line 895)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 897):
        
        # Assigning a Call to a Name (line 897):
        
        # Assigning a Call to a Name (line 897):
        
        # Call to min_scalar_type(...): (line 897)
        # Processing the call arguments (line 897)
        # Getting the type of 'value' (line 897)
        value_36223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 35), 'value', False)
        # Processing the call keyword arguments (line 897)
        kwargs_36224 = {}
        # Getting the type of 'np' (line 897)
        np_36221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 16), 'np', False)
        # Obtaining the member 'min_scalar_type' of a type (line 897)
        min_scalar_type_36222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 16), np_36221, 'min_scalar_type')
        # Calling min_scalar_type(args, kwargs) (line 897)
        min_scalar_type_call_result_36225 = invoke(stypy.reporting.localization.Localization(__file__, 897, 16), min_scalar_type_36222, *[value_36223], **kwargs_36224)
        
        # Assigning a type to the variable 'dtype' (line 897)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 897, 8), 'dtype', min_scalar_type_call_result_36225)
        
        
        # Evaluating a boolean operation
        
        # Call to issubdtype(...): (line 898)
        # Processing the call arguments (line 898)
        # Getting the type of 'dtype' (line 898)
        dtype_36228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 25), 'dtype', False)
        # Getting the type of 'np' (line 898)
        np_36229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 32), 'np', False)
        # Obtaining the member 'integer' of a type (line 898)
        integer_36230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 32), np_36229, 'integer')
        # Processing the call keyword arguments (line 898)
        kwargs_36231 = {}
        # Getting the type of 'np' (line 898)
        np_36226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 11), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 898)
        issubdtype_36227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 11), np_36226, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 898)
        issubdtype_call_result_36232 = invoke(stypy.reporting.localization.Localization(__file__, 898, 11), issubdtype_36227, *[dtype_36228, integer_36230], **kwargs_36231)
        
        
        # Getting the type of 'dtype' (line 898)
        dtype_36233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 47), 'dtype')
        # Obtaining the member 'type' of a type (line 898)
        type_36234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 47), dtype_36233, 'type')
        # Getting the type of 'np' (line 898)
        np_36235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 61), 'np')
        # Obtaining the member 'bool_' of a type (line 898)
        bool__36236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 61), np_36235, 'bool_')
        # Applying the binary operator 'is' (line 898)
        result_is__36237 = python_operator(stypy.reporting.localization.Localization(__file__, 898, 47), 'is', type_36234, bool__36236)
        
        # Applying the binary operator 'or' (line 898)
        result_or_keyword_36238 = python_operator(stypy.reporting.localization.Localization(__file__, 898, 11), 'or', issubdtype_call_result_36232, result_is__36237)
        
        # Testing the type of an if condition (line 898)
        if_condition_36239 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 898, 8), result_or_keyword_36238)
        # Assigning a type to the variable 'if_condition_36239' (line 898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 898, 8), 'if_condition_36239', if_condition_36239)
        # SSA begins for if statement (line 898)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 900):
        
        # Assigning a Call to a Name (line 900):
        
        # Assigning a Call to a Name (line 900):
        
        # Call to promote_types(...): (line 900)
        # Processing the call arguments (line 900)
        # Getting the type of 'dtype' (line 900)
        dtype_36242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 37), 'dtype', False)
        # Getting the type of 'np' (line 900)
        np_36243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 44), 'np', False)
        # Obtaining the member 'float32' of a type (line 900)
        float32_36244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 44), np_36243, 'float32')
        # Processing the call keyword arguments (line 900)
        kwargs_36245 = {}
        # Getting the type of 'np' (line 900)
        np_36240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 20), 'np', False)
        # Obtaining the member 'promote_types' of a type (line 900)
        promote_types_36241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 20), np_36240, 'promote_types')
        # Calling promote_types(args, kwargs) (line 900)
        promote_types_call_result_36246 = invoke(stypy.reporting.localization.Localization(__file__, 900, 20), promote_types_36241, *[dtype_36242, float32_36244], **kwargs_36245)
        
        # Assigning a type to the variable 'dtype' (line 900)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 12), 'dtype', promote_types_call_result_36246)
        # SSA join for if statement (line 898)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 903):
        
        # Assigning a Call to a Name (line 903):
        
        # Assigning a Call to a Name (line 903):
        
        # Call to getmask(...): (line 903)
        # Processing the call arguments (line 903)
        # Getting the type of 'value' (line 903)
        value_36250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 29), 'value', False)
        # Processing the call keyword arguments (line 903)
        kwargs_36251 = {}
        # Getting the type of 'np' (line 903)
        np_36247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 15), 'np', False)
        # Obtaining the member 'ma' of a type (line 903)
        ma_36248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 15), np_36247, 'ma')
        # Obtaining the member 'getmask' of a type (line 903)
        getmask_36249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 15), ma_36248, 'getmask')
        # Calling getmask(args, kwargs) (line 903)
        getmask_call_result_36252 = invoke(stypy.reporting.localization.Localization(__file__, 903, 15), getmask_36249, *[value_36250], **kwargs_36251)
        
        # Assigning a type to the variable 'mask' (line 903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 8), 'mask', getmask_call_result_36252)
        
        # Assigning a Call to a Name (line 904):
        
        # Assigning a Call to a Name (line 904):
        
        # Assigning a Call to a Name (line 904):
        
        # Call to asarray(...): (line 904)
        # Processing the call arguments (line 904)
        
        # Call to getdata(...): (line 904)
        # Processing the call arguments (line 904)
        # Getting the type of 'value' (line 904)
        value_36258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 40), 'value', False)
        # Processing the call keyword arguments (line 904)
        kwargs_36259 = {}
        # Getting the type of 'np' (line 904)
        np_36255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 26), 'np', False)
        # Obtaining the member 'ma' of a type (line 904)
        ma_36256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 904, 26), np_36255, 'ma')
        # Obtaining the member 'getdata' of a type (line 904)
        getdata_36257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 904, 26), ma_36256, 'getdata')
        # Calling getdata(args, kwargs) (line 904)
        getdata_call_result_36260 = invoke(stypy.reporting.localization.Localization(__file__, 904, 26), getdata_36257, *[value_36258], **kwargs_36259)
        
        # Processing the call keyword arguments (line 904)
        kwargs_36261 = {}
        # Getting the type of 'np' (line 904)
        np_36253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 15), 'np', False)
        # Obtaining the member 'asarray' of a type (line 904)
        asarray_36254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 904, 15), np_36253, 'asarray')
        # Calling asarray(args, kwargs) (line 904)
        asarray_call_result_36262 = invoke(stypy.reporting.localization.Localization(__file__, 904, 15), asarray_36254, *[getdata_call_result_36260], **kwargs_36261)
        
        # Assigning a type to the variable 'data' (line 904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 8), 'data', asarray_call_result_36262)
        
        # Assigning a Call to a Name (line 905):
        
        # Assigning a Call to a Name (line 905):
        
        # Assigning a Call to a Name (line 905):
        
        # Call to array(...): (line 905)
        # Processing the call arguments (line 905)
        # Getting the type of 'data' (line 905)
        data_36266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 29), 'data', False)
        # Processing the call keyword arguments (line 905)
        # Getting the type of 'mask' (line 905)
        mask_36267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 40), 'mask', False)
        keyword_36268 = mask_36267
        # Getting the type of 'dtype' (line 905)
        dtype_36269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 52), 'dtype', False)
        keyword_36270 = dtype_36269
        # Getting the type of 'True' (line 905)
        True_36271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 64), 'True', False)
        keyword_36272 = True_36271
        kwargs_36273 = {'dtype': keyword_36270, 'copy': keyword_36272, 'mask': keyword_36268}
        # Getting the type of 'np' (line 905)
        np_36263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 17), 'np', False)
        # Obtaining the member 'ma' of a type (line 905)
        ma_36264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 17), np_36263, 'ma')
        # Obtaining the member 'array' of a type (line 905)
        array_36265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 17), ma_36264, 'array')
        # Calling array(args, kwargs) (line 905)
        array_call_result_36274 = invoke(stypy.reporting.localization.Localization(__file__, 905, 17), array_36265, *[data_36266], **kwargs_36273)
        
        # Assigning a type to the variable 'result' (line 905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'result', array_call_result_36274)
        
        # Obtaining an instance of the builtin type 'tuple' (line 906)
        tuple_36275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 906, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 906)
        # Adding element type (line 906)
        # Getting the type of 'result' (line 906)
        result_36276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 15), 'result')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 906, 15), tuple_36275, result_36276)
        # Adding element type (line 906)
        # Getting the type of 'is_scalar' (line 906)
        is_scalar_36277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 23), 'is_scalar')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 906, 15), tuple_36275, is_scalar_36277)
        
        # Assigning a type to the variable 'stypy_return_type' (line 906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 8), 'stypy_return_type', tuple_36275)
        
        # ################# End of 'process_value(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'process_value' in the type store
        # Getting the type of 'stypy_return_type' (line 877)
        stypy_return_type_36278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_36278)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'process_value'
        return stypy_return_type_36278


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 908)
        None_36279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 35), 'None')
        defaults = [None_36279]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 908, 4, False)
        # Assigning a type to the variable 'self' (line 909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Normalize.__call__.__dict__.__setitem__('stypy_localization', localization)
        Normalize.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Normalize.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Normalize.__call__.__dict__.__setitem__('stypy_function_name', 'Normalize.__call__')
        Normalize.__call__.__dict__.__setitem__('stypy_param_names_list', ['value', 'clip'])
        Normalize.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Normalize.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Normalize.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Normalize.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Normalize.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Normalize.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Normalize.__call__', ['value', 'clip'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['value', 'clip'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_36280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, (-1)), 'unicode', u'\n        Normalize *value* data in the ``[vmin, vmax]`` interval into\n        the ``[0.0, 1.0]`` interval and return it.  *clip* defaults\n        to *self.clip* (which defaults to *False*).  If not already\n        initialized, *vmin* and *vmax* are initialized using\n        *autoscale_None(value)*.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 916)
        # Getting the type of 'clip' (line 916)
        clip_36281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 11), 'clip')
        # Getting the type of 'None' (line 916)
        None_36282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 19), 'None')
        
        (may_be_36283, more_types_in_union_36284) = may_be_none(clip_36281, None_36282)

        if may_be_36283:

            if more_types_in_union_36284:
                # Runtime conditional SSA (line 916)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 917):
            
            # Assigning a Attribute to a Name (line 917):
            
            # Assigning a Attribute to a Name (line 917):
            # Getting the type of 'self' (line 917)
            self_36285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 19), 'self')
            # Obtaining the member 'clip' of a type (line 917)
            clip_36286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 19), self_36285, 'clip')
            # Assigning a type to the variable 'clip' (line 917)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 12), 'clip', clip_36286)

            if more_types_in_union_36284:
                # SSA join for if statement (line 916)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 919):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to process_value(...): (line 919)
        # Processing the call arguments (line 919)
        # Getting the type of 'value' (line 919)
        value_36289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 47), 'value', False)
        # Processing the call keyword arguments (line 919)
        kwargs_36290 = {}
        # Getting the type of 'self' (line 919)
        self_36287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 28), 'self', False)
        # Obtaining the member 'process_value' of a type (line 919)
        process_value_36288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 919, 28), self_36287, 'process_value')
        # Calling process_value(args, kwargs) (line 919)
        process_value_call_result_36291 = invoke(stypy.reporting.localization.Localization(__file__, 919, 28), process_value_36288, *[value_36289], **kwargs_36290)
        
        # Assigning a type to the variable 'call_assignment_34218' (line 919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'call_assignment_34218', process_value_call_result_36291)
        
        # Assigning a Call to a Name (line 919):
        
        # Assigning a Call to a Name (line 919):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_36294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 919, 8), 'int')
        # Processing the call keyword arguments
        kwargs_36295 = {}
        # Getting the type of 'call_assignment_34218' (line 919)
        call_assignment_34218_36292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'call_assignment_34218', False)
        # Obtaining the member '__getitem__' of a type (line 919)
        getitem___36293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 919, 8), call_assignment_34218_36292, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_36296 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___36293, *[int_36294], **kwargs_36295)
        
        # Assigning a type to the variable 'call_assignment_34219' (line 919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'call_assignment_34219', getitem___call_result_36296)
        
        # Assigning a Name to a Name (line 919):
        
        # Assigning a Name to a Name (line 919):
        # Getting the type of 'call_assignment_34219' (line 919)
        call_assignment_34219_36297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'call_assignment_34219')
        # Assigning a type to the variable 'result' (line 919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'result', call_assignment_34219_36297)
        
        # Assigning a Call to a Name (line 919):
        
        # Assigning a Call to a Name (line 919):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_36300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 919, 8), 'int')
        # Processing the call keyword arguments
        kwargs_36301 = {}
        # Getting the type of 'call_assignment_34218' (line 919)
        call_assignment_34218_36298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'call_assignment_34218', False)
        # Obtaining the member '__getitem__' of a type (line 919)
        getitem___36299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 919, 8), call_assignment_34218_36298, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_36302 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___36299, *[int_36300], **kwargs_36301)
        
        # Assigning a type to the variable 'call_assignment_34220' (line 919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'call_assignment_34220', getitem___call_result_36302)
        
        # Assigning a Name to a Name (line 919):
        
        # Assigning a Name to a Name (line 919):
        # Getting the type of 'call_assignment_34220' (line 919)
        call_assignment_34220_36303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'call_assignment_34220')
        # Assigning a type to the variable 'is_scalar' (line 919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 16), 'is_scalar', call_assignment_34220_36303)
        
        # Call to autoscale_None(...): (line 921)
        # Processing the call arguments (line 921)
        # Getting the type of 'result' (line 921)
        result_36306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 28), 'result', False)
        # Processing the call keyword arguments (line 921)
        kwargs_36307 = {}
        # Getting the type of 'self' (line 921)
        self_36304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 8), 'self', False)
        # Obtaining the member 'autoscale_None' of a type (line 921)
        autoscale_None_36305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 8), self_36304, 'autoscale_None')
        # Calling autoscale_None(args, kwargs) (line 921)
        autoscale_None_call_result_36308 = invoke(stypy.reporting.localization.Localization(__file__, 921, 8), autoscale_None_36305, *[result_36306], **kwargs_36307)
        
        
        # Assigning a Call to a Tuple (line 923):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to process_value(...): (line 923)
        # Processing the call arguments (line 923)
        # Getting the type of 'self' (line 923)
        self_36311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 40), 'self', False)
        # Obtaining the member 'vmin' of a type (line 923)
        vmin_36312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 40), self_36311, 'vmin')
        # Processing the call keyword arguments (line 923)
        kwargs_36313 = {}
        # Getting the type of 'self' (line 923)
        self_36309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 21), 'self', False)
        # Obtaining the member 'process_value' of a type (line 923)
        process_value_36310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 21), self_36309, 'process_value')
        # Calling process_value(args, kwargs) (line 923)
        process_value_call_result_36314 = invoke(stypy.reporting.localization.Localization(__file__, 923, 21), process_value_36310, *[vmin_36312], **kwargs_36313)
        
        # Assigning a type to the variable 'call_assignment_34221' (line 923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'call_assignment_34221', process_value_call_result_36314)
        
        # Assigning a Call to a Name (line 923):
        
        # Assigning a Call to a Name (line 923):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_36317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 923, 8), 'int')
        # Processing the call keyword arguments
        kwargs_36318 = {}
        # Getting the type of 'call_assignment_34221' (line 923)
        call_assignment_34221_36315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'call_assignment_34221', False)
        # Obtaining the member '__getitem__' of a type (line 923)
        getitem___36316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 8), call_assignment_34221_36315, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_36319 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___36316, *[int_36317], **kwargs_36318)
        
        # Assigning a type to the variable 'call_assignment_34222' (line 923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'call_assignment_34222', getitem___call_result_36319)
        
        # Assigning a Name to a Tuple (line 923):
        
        # Assigning a Subscript to a Name (line 923):
        
        # Obtaining the type of the subscript
        int_36320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 923, 8), 'int')
        # Getting the type of 'call_assignment_34222' (line 923)
        call_assignment_34222_36321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'call_assignment_34222')
        # Obtaining the member '__getitem__' of a type (line 923)
        getitem___36322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 8), call_assignment_34222_36321, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 923)
        subscript_call_result_36323 = invoke(stypy.reporting.localization.Localization(__file__, 923, 8), getitem___36322, int_36320)
        
        # Assigning a type to the variable 'tuple_var_assignment_34265' (line 923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'tuple_var_assignment_34265', subscript_call_result_36323)
        
        # Assigning a Name to a Name (line 923):
        # Getting the type of 'tuple_var_assignment_34265' (line 923)
        tuple_var_assignment_34265_36324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'tuple_var_assignment_34265')
        # Assigning a type to the variable 'vmin' (line 923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 9), 'vmin', tuple_var_assignment_34265_36324)
        
        # Assigning a Call to a Name (line 923):
        
        # Assigning a Call to a Name (line 923):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_36327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 923, 8), 'int')
        # Processing the call keyword arguments
        kwargs_36328 = {}
        # Getting the type of 'call_assignment_34221' (line 923)
        call_assignment_34221_36325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'call_assignment_34221', False)
        # Obtaining the member '__getitem__' of a type (line 923)
        getitem___36326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 8), call_assignment_34221_36325, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_36329 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___36326, *[int_36327], **kwargs_36328)
        
        # Assigning a type to the variable 'call_assignment_34223' (line 923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'call_assignment_34223', getitem___call_result_36329)
        
        # Assigning a Name to a Name (line 923):
        
        # Assigning a Name to a Name (line 923):
        # Getting the type of 'call_assignment_34223' (line 923)
        call_assignment_34223_36330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'call_assignment_34223')
        # Assigning a type to the variable '_' (line 923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 17), '_', call_assignment_34223_36330)
        
        # Assigning a Call to a Tuple (line 924):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to process_value(...): (line 924)
        # Processing the call arguments (line 924)
        # Getting the type of 'self' (line 924)
        self_36333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 40), 'self', False)
        # Obtaining the member 'vmax' of a type (line 924)
        vmax_36334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 40), self_36333, 'vmax')
        # Processing the call keyword arguments (line 924)
        kwargs_36335 = {}
        # Getting the type of 'self' (line 924)
        self_36331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 21), 'self', False)
        # Obtaining the member 'process_value' of a type (line 924)
        process_value_36332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 21), self_36331, 'process_value')
        # Calling process_value(args, kwargs) (line 924)
        process_value_call_result_36336 = invoke(stypy.reporting.localization.Localization(__file__, 924, 21), process_value_36332, *[vmax_36334], **kwargs_36335)
        
        # Assigning a type to the variable 'call_assignment_34224' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'call_assignment_34224', process_value_call_result_36336)
        
        # Assigning a Call to a Name (line 924):
        
        # Assigning a Call to a Name (line 924):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_36339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, 8), 'int')
        # Processing the call keyword arguments
        kwargs_36340 = {}
        # Getting the type of 'call_assignment_34224' (line 924)
        call_assignment_34224_36337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'call_assignment_34224', False)
        # Obtaining the member '__getitem__' of a type (line 924)
        getitem___36338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 8), call_assignment_34224_36337, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_36341 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___36338, *[int_36339], **kwargs_36340)
        
        # Assigning a type to the variable 'call_assignment_34225' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'call_assignment_34225', getitem___call_result_36341)
        
        # Assigning a Name to a Tuple (line 924):
        
        # Assigning a Subscript to a Name (line 924):
        
        # Obtaining the type of the subscript
        int_36342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, 8), 'int')
        # Getting the type of 'call_assignment_34225' (line 924)
        call_assignment_34225_36343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'call_assignment_34225')
        # Obtaining the member '__getitem__' of a type (line 924)
        getitem___36344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 8), call_assignment_34225_36343, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 924)
        subscript_call_result_36345 = invoke(stypy.reporting.localization.Localization(__file__, 924, 8), getitem___36344, int_36342)
        
        # Assigning a type to the variable 'tuple_var_assignment_34266' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'tuple_var_assignment_34266', subscript_call_result_36345)
        
        # Assigning a Name to a Name (line 924):
        # Getting the type of 'tuple_var_assignment_34266' (line 924)
        tuple_var_assignment_34266_36346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'tuple_var_assignment_34266')
        # Assigning a type to the variable 'vmax' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 9), 'vmax', tuple_var_assignment_34266_36346)
        
        # Assigning a Call to a Name (line 924):
        
        # Assigning a Call to a Name (line 924):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_36349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, 8), 'int')
        # Processing the call keyword arguments
        kwargs_36350 = {}
        # Getting the type of 'call_assignment_34224' (line 924)
        call_assignment_34224_36347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'call_assignment_34224', False)
        # Obtaining the member '__getitem__' of a type (line 924)
        getitem___36348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 8), call_assignment_34224_36347, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_36351 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___36348, *[int_36349], **kwargs_36350)
        
        # Assigning a type to the variable 'call_assignment_34226' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'call_assignment_34226', getitem___call_result_36351)
        
        # Assigning a Name to a Name (line 924):
        
        # Assigning a Name to a Name (line 924):
        # Getting the type of 'call_assignment_34226' (line 924)
        call_assignment_34226_36352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'call_assignment_34226')
        # Assigning a type to the variable '_' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 17), '_', call_assignment_34226_36352)
        
        
        # Getting the type of 'vmin' (line 925)
        vmin_36353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 11), 'vmin')
        # Getting the type of 'vmax' (line 925)
        vmax_36354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 19), 'vmax')
        # Applying the binary operator '==' (line 925)
        result_eq_36355 = python_operator(stypy.reporting.localization.Localization(__file__, 925, 11), '==', vmin_36353, vmax_36354)
        
        # Testing the type of an if condition (line 925)
        if_condition_36356 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 925, 8), result_eq_36355)
        # Assigning a type to the variable 'if_condition_36356' (line 925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 8), 'if_condition_36356', if_condition_36356)
        # SSA begins for if statement (line 925)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to fill(...): (line 926)
        # Processing the call arguments (line 926)
        int_36359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 926, 24), 'int')
        # Processing the call keyword arguments (line 926)
        kwargs_36360 = {}
        # Getting the type of 'result' (line 926)
        result_36357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 12), 'result', False)
        # Obtaining the member 'fill' of a type (line 926)
        fill_36358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 926, 12), result_36357, 'fill')
        # Calling fill(args, kwargs) (line 926)
        fill_call_result_36361 = invoke(stypy.reporting.localization.Localization(__file__, 926, 12), fill_36358, *[int_36359], **kwargs_36360)
        
        # SSA branch for the else part of an if statement (line 925)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'vmin' (line 927)
        vmin_36362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 13), 'vmin')
        # Getting the type of 'vmax' (line 927)
        vmax_36363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 20), 'vmax')
        # Applying the binary operator '>' (line 927)
        result_gt_36364 = python_operator(stypy.reporting.localization.Localization(__file__, 927, 13), '>', vmin_36362, vmax_36363)
        
        # Testing the type of an if condition (line 927)
        if_condition_36365 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 927, 13), result_gt_36364)
        # Assigning a type to the variable 'if_condition_36365' (line 927)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 927, 13), 'if_condition_36365', if_condition_36365)
        # SSA begins for if statement (line 927)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 928)
        # Processing the call arguments (line 928)
        unicode_36367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 29), 'unicode', u'minvalue must be less than or equal to maxvalue')
        # Processing the call keyword arguments (line 928)
        kwargs_36368 = {}
        # Getting the type of 'ValueError' (line 928)
        ValueError_36366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 928)
        ValueError_call_result_36369 = invoke(stypy.reporting.localization.Localization(__file__, 928, 18), ValueError_36366, *[unicode_36367], **kwargs_36368)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 928, 12), ValueError_call_result_36369, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 927)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'clip' (line 930)
        clip_36370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 15), 'clip')
        # Testing the type of an if condition (line 930)
        if_condition_36371 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 930, 12), clip_36370)
        # Assigning a type to the variable 'if_condition_36371' (line 930)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 12), 'if_condition_36371', if_condition_36371)
        # SSA begins for if statement (line 930)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 931):
        
        # Assigning a Call to a Name (line 931):
        
        # Assigning a Call to a Name (line 931):
        
        # Call to getmask(...): (line 931)
        # Processing the call arguments (line 931)
        # Getting the type of 'result' (line 931)
        result_36375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 37), 'result', False)
        # Processing the call keyword arguments (line 931)
        kwargs_36376 = {}
        # Getting the type of 'np' (line 931)
        np_36372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 23), 'np', False)
        # Obtaining the member 'ma' of a type (line 931)
        ma_36373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 23), np_36372, 'ma')
        # Obtaining the member 'getmask' of a type (line 931)
        getmask_36374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 23), ma_36373, 'getmask')
        # Calling getmask(args, kwargs) (line 931)
        getmask_call_result_36377 = invoke(stypy.reporting.localization.Localization(__file__, 931, 23), getmask_36374, *[result_36375], **kwargs_36376)
        
        # Assigning a type to the variable 'mask' (line 931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 16), 'mask', getmask_call_result_36377)
        
        # Assigning a Call to a Name (line 932):
        
        # Assigning a Call to a Name (line 932):
        
        # Assigning a Call to a Name (line 932):
        
        # Call to array(...): (line 932)
        # Processing the call arguments (line 932)
        
        # Call to clip(...): (line 932)
        # Processing the call arguments (line 932)
        
        # Call to filled(...): (line 932)
        # Processing the call arguments (line 932)
        # Getting the type of 'vmax' (line 932)
        vmax_36385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 59), 'vmax', False)
        # Processing the call keyword arguments (line 932)
        kwargs_36386 = {}
        # Getting the type of 'result' (line 932)
        result_36383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 45), 'result', False)
        # Obtaining the member 'filled' of a type (line 932)
        filled_36384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 45), result_36383, 'filled')
        # Calling filled(args, kwargs) (line 932)
        filled_call_result_36387 = invoke(stypy.reporting.localization.Localization(__file__, 932, 45), filled_36384, *[vmax_36385], **kwargs_36386)
        
        # Getting the type of 'vmin' (line 932)
        vmin_36388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 66), 'vmin', False)
        # Getting the type of 'vmax' (line 932)
        vmax_36389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 72), 'vmax', False)
        # Processing the call keyword arguments (line 932)
        kwargs_36390 = {}
        # Getting the type of 'np' (line 932)
        np_36381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 37), 'np', False)
        # Obtaining the member 'clip' of a type (line 932)
        clip_36382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 37), np_36381, 'clip')
        # Calling clip(args, kwargs) (line 932)
        clip_call_result_36391 = invoke(stypy.reporting.localization.Localization(__file__, 932, 37), clip_36382, *[filled_call_result_36387, vmin_36388, vmax_36389], **kwargs_36390)
        
        # Processing the call keyword arguments (line 932)
        # Getting the type of 'mask' (line 933)
        mask_36392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 42), 'mask', False)
        keyword_36393 = mask_36392
        kwargs_36394 = {'mask': keyword_36393}
        # Getting the type of 'np' (line 932)
        np_36378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 25), 'np', False)
        # Obtaining the member 'ma' of a type (line 932)
        ma_36379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 25), np_36378, 'ma')
        # Obtaining the member 'array' of a type (line 932)
        array_36380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 25), ma_36379, 'array')
        # Calling array(args, kwargs) (line 932)
        array_call_result_36395 = invoke(stypy.reporting.localization.Localization(__file__, 932, 25), array_36380, *[clip_call_result_36391], **kwargs_36394)
        
        # Assigning a type to the variable 'result' (line 932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 932, 16), 'result', array_call_result_36395)
        # SSA join for if statement (line 930)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 935):
        
        # Assigning a Attribute to a Name (line 935):
        
        # Assigning a Attribute to a Name (line 935):
        # Getting the type of 'result' (line 935)
        result_36396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 21), 'result')
        # Obtaining the member 'data' of a type (line 935)
        data_36397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 21), result_36396, 'data')
        # Assigning a type to the variable 'resdat' (line 935)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 12), 'resdat', data_36397)
        
        # Getting the type of 'resdat' (line 936)
        resdat_36398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 12), 'resdat')
        # Getting the type of 'vmin' (line 936)
        vmin_36399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 22), 'vmin')
        # Applying the binary operator '-=' (line 936)
        result_isub_36400 = python_operator(stypy.reporting.localization.Localization(__file__, 936, 12), '-=', resdat_36398, vmin_36399)
        # Assigning a type to the variable 'resdat' (line 936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 12), 'resdat', result_isub_36400)
        
        
        # Getting the type of 'resdat' (line 937)
        resdat_36401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 12), 'resdat')
        # Getting the type of 'vmax' (line 937)
        vmax_36402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 23), 'vmax')
        # Getting the type of 'vmin' (line 937)
        vmin_36403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 30), 'vmin')
        # Applying the binary operator '-' (line 937)
        result_sub_36404 = python_operator(stypy.reporting.localization.Localization(__file__, 937, 23), '-', vmax_36402, vmin_36403)
        
        # Applying the binary operator 'div=' (line 937)
        result_div_36405 = python_operator(stypy.reporting.localization.Localization(__file__, 937, 12), 'div=', resdat_36401, result_sub_36404)
        # Assigning a type to the variable 'resdat' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 12), 'resdat', result_div_36405)
        
        
        # Assigning a Call to a Name (line 938):
        
        # Assigning a Call to a Name (line 938):
        
        # Assigning a Call to a Name (line 938):
        
        # Call to array(...): (line 938)
        # Processing the call arguments (line 938)
        # Getting the type of 'resdat' (line 938)
        resdat_36409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 33), 'resdat', False)
        # Processing the call keyword arguments (line 938)
        # Getting the type of 'result' (line 938)
        result_36410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 46), 'result', False)
        # Obtaining the member 'mask' of a type (line 938)
        mask_36411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 46), result_36410, 'mask')
        keyword_36412 = mask_36411
        # Getting the type of 'False' (line 938)
        False_36413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 64), 'False', False)
        keyword_36414 = False_36413
        kwargs_36415 = {'copy': keyword_36414, 'mask': keyword_36412}
        # Getting the type of 'np' (line 938)
        np_36406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 21), 'np', False)
        # Obtaining the member 'ma' of a type (line 938)
        ma_36407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 21), np_36406, 'ma')
        # Obtaining the member 'array' of a type (line 938)
        array_36408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 21), ma_36407, 'array')
        # Calling array(args, kwargs) (line 938)
        array_call_result_36416 = invoke(stypy.reporting.localization.Localization(__file__, 938, 21), array_36408, *[resdat_36409], **kwargs_36415)
        
        # Assigning a type to the variable 'result' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 12), 'result', array_call_result_36416)
        # SSA join for if statement (line 927)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 925)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'result' (line 942)
        result_36417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 11), 'result')
        # Obtaining the member 'dtype' of a type (line 942)
        dtype_36418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 11), result_36417, 'dtype')
        # Getting the type of 'np' (line 942)
        np_36419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 27), 'np')
        # Obtaining the member 'longdouble' of a type (line 942)
        longdouble_36420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 27), np_36419, 'longdouble')
        # Applying the binary operator '==' (line 942)
        result_eq_36421 = python_operator(stypy.reporting.localization.Localization(__file__, 942, 11), '==', dtype_36418, longdouble_36420)
        
        # Testing the type of an if condition (line 942)
        if_condition_36422 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 942, 8), result_eq_36421)
        # Assigning a type to the variable 'if_condition_36422' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'if_condition_36422', if_condition_36422)
        # SSA begins for if statement (line 942)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 943):
        
        # Assigning a Call to a Name (line 943):
        
        # Assigning a Call to a Name (line 943):
        
        # Call to astype(...): (line 943)
        # Processing the call arguments (line 943)
        # Getting the type of 'np' (line 943)
        np_36425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 35), 'np', False)
        # Obtaining the member 'float64' of a type (line 943)
        float64_36426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 35), np_36425, 'float64')
        # Processing the call keyword arguments (line 943)
        kwargs_36427 = {}
        # Getting the type of 'result' (line 943)
        result_36423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 21), 'result', False)
        # Obtaining the member 'astype' of a type (line 943)
        astype_36424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 21), result_36423, 'astype')
        # Calling astype(args, kwargs) (line 943)
        astype_call_result_36428 = invoke(stypy.reporting.localization.Localization(__file__, 943, 21), astype_36424, *[float64_36426], **kwargs_36427)
        
        # Assigning a type to the variable 'result' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 12), 'result', astype_call_result_36428)
        # SSA join for if statement (line 942)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'is_scalar' (line 944)
        is_scalar_36429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 11), 'is_scalar')
        # Testing the type of an if condition (line 944)
        if_condition_36430 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 944, 8), is_scalar_36429)
        # Assigning a type to the variable 'if_condition_36430' (line 944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'if_condition_36430', if_condition_36430)
        # SSA begins for if statement (line 944)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 945):
        
        # Assigning a Subscript to a Name (line 945):
        
        # Assigning a Subscript to a Name (line 945):
        
        # Obtaining the type of the subscript
        int_36431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 945, 28), 'int')
        # Getting the type of 'result' (line 945)
        result_36432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 21), 'result')
        # Obtaining the member '__getitem__' of a type (line 945)
        getitem___36433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 21), result_36432, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 945)
        subscript_call_result_36434 = invoke(stypy.reporting.localization.Localization(__file__, 945, 21), getitem___36433, int_36431)
        
        # Assigning a type to the variable 'result' (line 945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 12), 'result', subscript_call_result_36434)
        # SSA join for if statement (line 944)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 946)
        result_36435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 8), 'stypy_return_type', result_36435)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 908)
        stypy_return_type_36436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_36436)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_36436


    @norecursion
    def inverse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inverse'
        module_type_store = module_type_store.open_function_context('inverse', 948, 4, False)
        # Assigning a type to the variable 'self' (line 949)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Normalize.inverse.__dict__.__setitem__('stypy_localization', localization)
        Normalize.inverse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Normalize.inverse.__dict__.__setitem__('stypy_type_store', module_type_store)
        Normalize.inverse.__dict__.__setitem__('stypy_function_name', 'Normalize.inverse')
        Normalize.inverse.__dict__.__setitem__('stypy_param_names_list', ['value'])
        Normalize.inverse.__dict__.__setitem__('stypy_varargs_param_name', None)
        Normalize.inverse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Normalize.inverse.__dict__.__setitem__('stypy_call_defaults', defaults)
        Normalize.inverse.__dict__.__setitem__('stypy_call_varargs', varargs)
        Normalize.inverse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Normalize.inverse.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Normalize.inverse', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inverse', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inverse(...)' code ##################

        
        
        
        # Call to scaled(...): (line 949)
        # Processing the call keyword arguments (line 949)
        kwargs_36439 = {}
        # Getting the type of 'self' (line 949)
        self_36437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 15), 'self', False)
        # Obtaining the member 'scaled' of a type (line 949)
        scaled_36438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 15), self_36437, 'scaled')
        # Calling scaled(args, kwargs) (line 949)
        scaled_call_result_36440 = invoke(stypy.reporting.localization.Localization(__file__, 949, 15), scaled_36438, *[], **kwargs_36439)
        
        # Applying the 'not' unary operator (line 949)
        result_not__36441 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 11), 'not', scaled_call_result_36440)
        
        # Testing the type of an if condition (line 949)
        if_condition_36442 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 949, 8), result_not__36441)
        # Assigning a type to the variable 'if_condition_36442' (line 949)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 8), 'if_condition_36442', if_condition_36442)
        # SSA begins for if statement (line 949)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 950)
        # Processing the call arguments (line 950)
        unicode_36444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 29), 'unicode', u'Not invertible until scaled')
        # Processing the call keyword arguments (line 950)
        kwargs_36445 = {}
        # Getting the type of 'ValueError' (line 950)
        ValueError_36443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 950)
        ValueError_call_result_36446 = invoke(stypy.reporting.localization.Localization(__file__, 950, 18), ValueError_36443, *[unicode_36444], **kwargs_36445)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 950, 12), ValueError_call_result_36446, 'raise parameter', BaseException)
        # SSA join for if statement (line 949)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 951):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to process_value(...): (line 951)
        # Processing the call arguments (line 951)
        # Getting the type of 'self' (line 951)
        self_36449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 40), 'self', False)
        # Obtaining the member 'vmin' of a type (line 951)
        vmin_36450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 40), self_36449, 'vmin')
        # Processing the call keyword arguments (line 951)
        kwargs_36451 = {}
        # Getting the type of 'self' (line 951)
        self_36447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 21), 'self', False)
        # Obtaining the member 'process_value' of a type (line 951)
        process_value_36448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 21), self_36447, 'process_value')
        # Calling process_value(args, kwargs) (line 951)
        process_value_call_result_36452 = invoke(stypy.reporting.localization.Localization(__file__, 951, 21), process_value_36448, *[vmin_36450], **kwargs_36451)
        
        # Assigning a type to the variable 'call_assignment_34227' (line 951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 8), 'call_assignment_34227', process_value_call_result_36452)
        
        # Assigning a Call to a Name (line 951):
        
        # Assigning a Call to a Name (line 951):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_36455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 951, 8), 'int')
        # Processing the call keyword arguments
        kwargs_36456 = {}
        # Getting the type of 'call_assignment_34227' (line 951)
        call_assignment_34227_36453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 8), 'call_assignment_34227', False)
        # Obtaining the member '__getitem__' of a type (line 951)
        getitem___36454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 8), call_assignment_34227_36453, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_36457 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___36454, *[int_36455], **kwargs_36456)
        
        # Assigning a type to the variable 'call_assignment_34228' (line 951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 8), 'call_assignment_34228', getitem___call_result_36457)
        
        # Assigning a Name to a Tuple (line 951):
        
        # Assigning a Subscript to a Name (line 951):
        
        # Obtaining the type of the subscript
        int_36458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 951, 8), 'int')
        # Getting the type of 'call_assignment_34228' (line 951)
        call_assignment_34228_36459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 8), 'call_assignment_34228')
        # Obtaining the member '__getitem__' of a type (line 951)
        getitem___36460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 8), call_assignment_34228_36459, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 951)
        subscript_call_result_36461 = invoke(stypy.reporting.localization.Localization(__file__, 951, 8), getitem___36460, int_36458)
        
        # Assigning a type to the variable 'tuple_var_assignment_34267' (line 951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 8), 'tuple_var_assignment_34267', subscript_call_result_36461)
        
        # Assigning a Name to a Name (line 951):
        # Getting the type of 'tuple_var_assignment_34267' (line 951)
        tuple_var_assignment_34267_36462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 8), 'tuple_var_assignment_34267')
        # Assigning a type to the variable 'vmin' (line 951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 9), 'vmin', tuple_var_assignment_34267_36462)
        
        # Assigning a Call to a Name (line 951):
        
        # Assigning a Call to a Name (line 951):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_36465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 951, 8), 'int')
        # Processing the call keyword arguments
        kwargs_36466 = {}
        # Getting the type of 'call_assignment_34227' (line 951)
        call_assignment_34227_36463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 8), 'call_assignment_34227', False)
        # Obtaining the member '__getitem__' of a type (line 951)
        getitem___36464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 8), call_assignment_34227_36463, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_36467 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___36464, *[int_36465], **kwargs_36466)
        
        # Assigning a type to the variable 'call_assignment_34229' (line 951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 8), 'call_assignment_34229', getitem___call_result_36467)
        
        # Assigning a Name to a Name (line 951):
        
        # Assigning a Name to a Name (line 951):
        # Getting the type of 'call_assignment_34229' (line 951)
        call_assignment_34229_36468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 8), 'call_assignment_34229')
        # Assigning a type to the variable '_' (line 951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 17), '_', call_assignment_34229_36468)
        
        # Assigning a Call to a Tuple (line 952):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to process_value(...): (line 952)
        # Processing the call arguments (line 952)
        # Getting the type of 'self' (line 952)
        self_36471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 40), 'self', False)
        # Obtaining the member 'vmax' of a type (line 952)
        vmax_36472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 40), self_36471, 'vmax')
        # Processing the call keyword arguments (line 952)
        kwargs_36473 = {}
        # Getting the type of 'self' (line 952)
        self_36469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 21), 'self', False)
        # Obtaining the member 'process_value' of a type (line 952)
        process_value_36470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 21), self_36469, 'process_value')
        # Calling process_value(args, kwargs) (line 952)
        process_value_call_result_36474 = invoke(stypy.reporting.localization.Localization(__file__, 952, 21), process_value_36470, *[vmax_36472], **kwargs_36473)
        
        # Assigning a type to the variable 'call_assignment_34230' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'call_assignment_34230', process_value_call_result_36474)
        
        # Assigning a Call to a Name (line 952):
        
        # Assigning a Call to a Name (line 952):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_36477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 8), 'int')
        # Processing the call keyword arguments
        kwargs_36478 = {}
        # Getting the type of 'call_assignment_34230' (line 952)
        call_assignment_34230_36475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'call_assignment_34230', False)
        # Obtaining the member '__getitem__' of a type (line 952)
        getitem___36476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 8), call_assignment_34230_36475, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_36479 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___36476, *[int_36477], **kwargs_36478)
        
        # Assigning a type to the variable 'call_assignment_34231' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'call_assignment_34231', getitem___call_result_36479)
        
        # Assigning a Name to a Tuple (line 952):
        
        # Assigning a Subscript to a Name (line 952):
        
        # Obtaining the type of the subscript
        int_36480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 8), 'int')
        # Getting the type of 'call_assignment_34231' (line 952)
        call_assignment_34231_36481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'call_assignment_34231')
        # Obtaining the member '__getitem__' of a type (line 952)
        getitem___36482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 8), call_assignment_34231_36481, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 952)
        subscript_call_result_36483 = invoke(stypy.reporting.localization.Localization(__file__, 952, 8), getitem___36482, int_36480)
        
        # Assigning a type to the variable 'tuple_var_assignment_34268' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'tuple_var_assignment_34268', subscript_call_result_36483)
        
        # Assigning a Name to a Name (line 952):
        # Getting the type of 'tuple_var_assignment_34268' (line 952)
        tuple_var_assignment_34268_36484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'tuple_var_assignment_34268')
        # Assigning a type to the variable 'vmax' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 9), 'vmax', tuple_var_assignment_34268_36484)
        
        # Assigning a Call to a Name (line 952):
        
        # Assigning a Call to a Name (line 952):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_36487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 8), 'int')
        # Processing the call keyword arguments
        kwargs_36488 = {}
        # Getting the type of 'call_assignment_34230' (line 952)
        call_assignment_34230_36485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'call_assignment_34230', False)
        # Obtaining the member '__getitem__' of a type (line 952)
        getitem___36486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 8), call_assignment_34230_36485, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_36489 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___36486, *[int_36487], **kwargs_36488)
        
        # Assigning a type to the variable 'call_assignment_34232' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'call_assignment_34232', getitem___call_result_36489)
        
        # Assigning a Name to a Name (line 952):
        
        # Assigning a Name to a Name (line 952):
        # Getting the type of 'call_assignment_34232' (line 952)
        call_assignment_34232_36490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'call_assignment_34232')
        # Assigning a type to the variable '_' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 17), '_', call_assignment_34232_36490)
        
        
        # Call to iterable(...): (line 954)
        # Processing the call arguments (line 954)
        # Getting the type of 'value' (line 954)
        value_36493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 26), 'value', False)
        # Processing the call keyword arguments (line 954)
        kwargs_36494 = {}
        # Getting the type of 'cbook' (line 954)
        cbook_36491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 11), 'cbook', False)
        # Obtaining the member 'iterable' of a type (line 954)
        iterable_36492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 11), cbook_36491, 'iterable')
        # Calling iterable(args, kwargs) (line 954)
        iterable_call_result_36495 = invoke(stypy.reporting.localization.Localization(__file__, 954, 11), iterable_36492, *[value_36493], **kwargs_36494)
        
        # Testing the type of an if condition (line 954)
        if_condition_36496 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 954, 8), iterable_call_result_36495)
        # Assigning a type to the variable 'if_condition_36496' (line 954)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 8), 'if_condition_36496', if_condition_36496)
        # SSA begins for if statement (line 954)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 955):
        
        # Assigning a Call to a Name (line 955):
        
        # Assigning a Call to a Name (line 955):
        
        # Call to asarray(...): (line 955)
        # Processing the call arguments (line 955)
        # Getting the type of 'value' (line 955)
        value_36500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 32), 'value', False)
        # Processing the call keyword arguments (line 955)
        kwargs_36501 = {}
        # Getting the type of 'np' (line 955)
        np_36497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 18), 'np', False)
        # Obtaining the member 'ma' of a type (line 955)
        ma_36498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 18), np_36497, 'ma')
        # Obtaining the member 'asarray' of a type (line 955)
        asarray_36499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 18), ma_36498, 'asarray')
        # Calling asarray(args, kwargs) (line 955)
        asarray_call_result_36502 = invoke(stypy.reporting.localization.Localization(__file__, 955, 18), asarray_36499, *[value_36500], **kwargs_36501)
        
        # Assigning a type to the variable 'val' (line 955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 955, 12), 'val', asarray_call_result_36502)
        # Getting the type of 'vmin' (line 956)
        vmin_36503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 19), 'vmin')
        # Getting the type of 'val' (line 956)
        val_36504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 26), 'val')
        # Getting the type of 'vmax' (line 956)
        vmax_36505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 33), 'vmax')
        # Getting the type of 'vmin' (line 956)
        vmin_36506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 40), 'vmin')
        # Applying the binary operator '-' (line 956)
        result_sub_36507 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 33), '-', vmax_36505, vmin_36506)
        
        # Applying the binary operator '*' (line 956)
        result_mul_36508 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 26), '*', val_36504, result_sub_36507)
        
        # Applying the binary operator '+' (line 956)
        result_add_36509 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 19), '+', vmin_36503, result_mul_36508)
        
        # Assigning a type to the variable 'stypy_return_type' (line 956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 12), 'stypy_return_type', result_add_36509)
        # SSA branch for the else part of an if statement (line 954)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'vmin' (line 958)
        vmin_36510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 19), 'vmin')
        # Getting the type of 'value' (line 958)
        value_36511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 26), 'value')
        # Getting the type of 'vmax' (line 958)
        vmax_36512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 35), 'vmax')
        # Getting the type of 'vmin' (line 958)
        vmin_36513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 42), 'vmin')
        # Applying the binary operator '-' (line 958)
        result_sub_36514 = python_operator(stypy.reporting.localization.Localization(__file__, 958, 35), '-', vmax_36512, vmin_36513)
        
        # Applying the binary operator '*' (line 958)
        result_mul_36515 = python_operator(stypy.reporting.localization.Localization(__file__, 958, 26), '*', value_36511, result_sub_36514)
        
        # Applying the binary operator '+' (line 958)
        result_add_36516 = python_operator(stypy.reporting.localization.Localization(__file__, 958, 19), '+', vmin_36510, result_mul_36515)
        
        # Assigning a type to the variable 'stypy_return_type' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'stypy_return_type', result_add_36516)
        # SSA join for if statement (line 954)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'inverse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inverse' in the type store
        # Getting the type of 'stypy_return_type' (line 948)
        stypy_return_type_36517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_36517)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inverse'
        return stypy_return_type_36517


    @norecursion
    def autoscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'autoscale'
        module_type_store = module_type_store.open_function_context('autoscale', 960, 4, False)
        # Assigning a type to the variable 'self' (line 961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Normalize.autoscale.__dict__.__setitem__('stypy_localization', localization)
        Normalize.autoscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Normalize.autoscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        Normalize.autoscale.__dict__.__setitem__('stypy_function_name', 'Normalize.autoscale')
        Normalize.autoscale.__dict__.__setitem__('stypy_param_names_list', ['A'])
        Normalize.autoscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        Normalize.autoscale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Normalize.autoscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        Normalize.autoscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        Normalize.autoscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Normalize.autoscale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Normalize.autoscale', ['A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale', localization, ['A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale(...)' code ##################

        unicode_36518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, (-1)), 'unicode', u'\n        Set *vmin*, *vmax* to min, max of *A*.\n        ')
        
        # Assigning a Call to a Name (line 964):
        
        # Assigning a Call to a Name (line 964):
        
        # Assigning a Call to a Name (line 964):
        
        # Call to asanyarray(...): (line 964)
        # Processing the call arguments (line 964)
        # Getting the type of 'A' (line 964)
        A_36521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 26), 'A', False)
        # Processing the call keyword arguments (line 964)
        kwargs_36522 = {}
        # Getting the type of 'np' (line 964)
        np_36519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 12), 'np', False)
        # Obtaining the member 'asanyarray' of a type (line 964)
        asanyarray_36520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 12), np_36519, 'asanyarray')
        # Calling asanyarray(args, kwargs) (line 964)
        asanyarray_call_result_36523 = invoke(stypy.reporting.localization.Localization(__file__, 964, 12), asanyarray_36520, *[A_36521], **kwargs_36522)
        
        # Assigning a type to the variable 'A' (line 964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 8), 'A', asanyarray_call_result_36523)
        
        # Assigning a Call to a Attribute (line 965):
        
        # Assigning a Call to a Attribute (line 965):
        
        # Assigning a Call to a Attribute (line 965):
        
        # Call to min(...): (line 965)
        # Processing the call keyword arguments (line 965)
        kwargs_36526 = {}
        # Getting the type of 'A' (line 965)
        A_36524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 20), 'A', False)
        # Obtaining the member 'min' of a type (line 965)
        min_36525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 20), A_36524, 'min')
        # Calling min(args, kwargs) (line 965)
        min_call_result_36527 = invoke(stypy.reporting.localization.Localization(__file__, 965, 20), min_36525, *[], **kwargs_36526)
        
        # Getting the type of 'self' (line 965)
        self_36528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 8), 'self')
        # Setting the type of the member 'vmin' of a type (line 965)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 8), self_36528, 'vmin', min_call_result_36527)
        
        # Assigning a Call to a Attribute (line 966):
        
        # Assigning a Call to a Attribute (line 966):
        
        # Assigning a Call to a Attribute (line 966):
        
        # Call to max(...): (line 966)
        # Processing the call keyword arguments (line 966)
        kwargs_36531 = {}
        # Getting the type of 'A' (line 966)
        A_36529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 20), 'A', False)
        # Obtaining the member 'max' of a type (line 966)
        max_36530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 20), A_36529, 'max')
        # Calling max(args, kwargs) (line 966)
        max_call_result_36532 = invoke(stypy.reporting.localization.Localization(__file__, 966, 20), max_36530, *[], **kwargs_36531)
        
        # Getting the type of 'self' (line 966)
        self_36533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'self')
        # Setting the type of the member 'vmax' of a type (line 966)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 8), self_36533, 'vmax', max_call_result_36532)
        
        # ################# End of 'autoscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale' in the type store
        # Getting the type of 'stypy_return_type' (line 960)
        stypy_return_type_36534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_36534)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale'
        return stypy_return_type_36534


    @norecursion
    def autoscale_None(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'autoscale_None'
        module_type_store = module_type_store.open_function_context('autoscale_None', 968, 4, False)
        # Assigning a type to the variable 'self' (line 969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 969, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Normalize.autoscale_None.__dict__.__setitem__('stypy_localization', localization)
        Normalize.autoscale_None.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Normalize.autoscale_None.__dict__.__setitem__('stypy_type_store', module_type_store)
        Normalize.autoscale_None.__dict__.__setitem__('stypy_function_name', 'Normalize.autoscale_None')
        Normalize.autoscale_None.__dict__.__setitem__('stypy_param_names_list', ['A'])
        Normalize.autoscale_None.__dict__.__setitem__('stypy_varargs_param_name', None)
        Normalize.autoscale_None.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Normalize.autoscale_None.__dict__.__setitem__('stypy_call_defaults', defaults)
        Normalize.autoscale_None.__dict__.__setitem__('stypy_call_varargs', varargs)
        Normalize.autoscale_None.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Normalize.autoscale_None.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Normalize.autoscale_None', ['A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale_None', localization, ['A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale_None(...)' code ##################

        unicode_36535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 8), 'unicode', u'autoscale only None-valued vmin or vmax.')
        
        # Assigning a Call to a Name (line 970):
        
        # Assigning a Call to a Name (line 970):
        
        # Assigning a Call to a Name (line 970):
        
        # Call to asanyarray(...): (line 970)
        # Processing the call arguments (line 970)
        # Getting the type of 'A' (line 970)
        A_36538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 26), 'A', False)
        # Processing the call keyword arguments (line 970)
        kwargs_36539 = {}
        # Getting the type of 'np' (line 970)
        np_36536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 12), 'np', False)
        # Obtaining the member 'asanyarray' of a type (line 970)
        asanyarray_36537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 12), np_36536, 'asanyarray')
        # Calling asanyarray(args, kwargs) (line 970)
        asanyarray_call_result_36540 = invoke(stypy.reporting.localization.Localization(__file__, 970, 12), asanyarray_36537, *[A_36538], **kwargs_36539)
        
        # Assigning a type to the variable 'A' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'A', asanyarray_call_result_36540)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 971)
        self_36541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 11), 'self')
        # Obtaining the member 'vmin' of a type (line 971)
        vmin_36542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 11), self_36541, 'vmin')
        # Getting the type of 'None' (line 971)
        None_36543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 24), 'None')
        # Applying the binary operator 'is' (line 971)
        result_is__36544 = python_operator(stypy.reporting.localization.Localization(__file__, 971, 11), 'is', vmin_36542, None_36543)
        
        # Getting the type of 'A' (line 971)
        A_36545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 33), 'A')
        # Obtaining the member 'size' of a type (line 971)
        size_36546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 33), A_36545, 'size')
        # Applying the binary operator 'and' (line 971)
        result_and_keyword_36547 = python_operator(stypy.reporting.localization.Localization(__file__, 971, 11), 'and', result_is__36544, size_36546)
        
        # Testing the type of an if condition (line 971)
        if_condition_36548 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 971, 8), result_and_keyword_36547)
        # Assigning a type to the variable 'if_condition_36548' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'if_condition_36548', if_condition_36548)
        # SSA begins for if statement (line 971)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 972):
        
        # Assigning a Call to a Attribute (line 972):
        
        # Assigning a Call to a Attribute (line 972):
        
        # Call to min(...): (line 972)
        # Processing the call keyword arguments (line 972)
        kwargs_36551 = {}
        # Getting the type of 'A' (line 972)
        A_36549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 24), 'A', False)
        # Obtaining the member 'min' of a type (line 972)
        min_36550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 972, 24), A_36549, 'min')
        # Calling min(args, kwargs) (line 972)
        min_call_result_36552 = invoke(stypy.reporting.localization.Localization(__file__, 972, 24), min_36550, *[], **kwargs_36551)
        
        # Getting the type of 'self' (line 972)
        self_36553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 12), 'self')
        # Setting the type of the member 'vmin' of a type (line 972)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 972, 12), self_36553, 'vmin', min_call_result_36552)
        # SSA join for if statement (line 971)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 973)
        self_36554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 11), 'self')
        # Obtaining the member 'vmax' of a type (line 973)
        vmax_36555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 11), self_36554, 'vmax')
        # Getting the type of 'None' (line 973)
        None_36556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 24), 'None')
        # Applying the binary operator 'is' (line 973)
        result_is__36557 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 11), 'is', vmax_36555, None_36556)
        
        # Getting the type of 'A' (line 973)
        A_36558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 33), 'A')
        # Obtaining the member 'size' of a type (line 973)
        size_36559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 33), A_36558, 'size')
        # Applying the binary operator 'and' (line 973)
        result_and_keyword_36560 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 11), 'and', result_is__36557, size_36559)
        
        # Testing the type of an if condition (line 973)
        if_condition_36561 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 973, 8), result_and_keyword_36560)
        # Assigning a type to the variable 'if_condition_36561' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 8), 'if_condition_36561', if_condition_36561)
        # SSA begins for if statement (line 973)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 974):
        
        # Assigning a Call to a Attribute (line 974):
        
        # Assigning a Call to a Attribute (line 974):
        
        # Call to max(...): (line 974)
        # Processing the call keyword arguments (line 974)
        kwargs_36564 = {}
        # Getting the type of 'A' (line 974)
        A_36562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 24), 'A', False)
        # Obtaining the member 'max' of a type (line 974)
        max_36563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 24), A_36562, 'max')
        # Calling max(args, kwargs) (line 974)
        max_call_result_36565 = invoke(stypy.reporting.localization.Localization(__file__, 974, 24), max_36563, *[], **kwargs_36564)
        
        # Getting the type of 'self' (line 974)
        self_36566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 12), 'self')
        # Setting the type of the member 'vmax' of a type (line 974)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 12), self_36566, 'vmax', max_call_result_36565)
        # SSA join for if statement (line 973)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'autoscale_None(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale_None' in the type store
        # Getting the type of 'stypy_return_type' (line 968)
        stypy_return_type_36567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_36567)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale_None'
        return stypy_return_type_36567


    @norecursion
    def scaled(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'scaled'
        module_type_store = module_type_store.open_function_context('scaled', 976, 4, False)
        # Assigning a type to the variable 'self' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Normalize.scaled.__dict__.__setitem__('stypy_localization', localization)
        Normalize.scaled.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Normalize.scaled.__dict__.__setitem__('stypy_type_store', module_type_store)
        Normalize.scaled.__dict__.__setitem__('stypy_function_name', 'Normalize.scaled')
        Normalize.scaled.__dict__.__setitem__('stypy_param_names_list', [])
        Normalize.scaled.__dict__.__setitem__('stypy_varargs_param_name', None)
        Normalize.scaled.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Normalize.scaled.__dict__.__setitem__('stypy_call_defaults', defaults)
        Normalize.scaled.__dict__.__setitem__('stypy_call_varargs', varargs)
        Normalize.scaled.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Normalize.scaled.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Normalize.scaled', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'scaled', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'scaled(...)' code ##################

        unicode_36568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 8), 'unicode', u'return true if vmin and vmax set')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 978)
        self_36569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 16), 'self')
        # Obtaining the member 'vmin' of a type (line 978)
        vmin_36570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 16), self_36569, 'vmin')
        # Getting the type of 'None' (line 978)
        None_36571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 33), 'None')
        # Applying the binary operator 'isnot' (line 978)
        result_is_not_36572 = python_operator(stypy.reporting.localization.Localization(__file__, 978, 16), 'isnot', vmin_36570, None_36571)
        
        
        # Getting the type of 'self' (line 978)
        self_36573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 42), 'self')
        # Obtaining the member 'vmax' of a type (line 978)
        vmax_36574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 42), self_36573, 'vmax')
        # Getting the type of 'None' (line 978)
        None_36575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 59), 'None')
        # Applying the binary operator 'isnot' (line 978)
        result_is_not_36576 = python_operator(stypy.reporting.localization.Localization(__file__, 978, 42), 'isnot', vmax_36574, None_36575)
        
        # Applying the binary operator 'and' (line 978)
        result_and_keyword_36577 = python_operator(stypy.reporting.localization.Localization(__file__, 978, 16), 'and', result_is_not_36572, result_is_not_36576)
        
        # Assigning a type to the variable 'stypy_return_type' (line 978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 8), 'stypy_return_type', result_and_keyword_36577)
        
        # ################# End of 'scaled(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'scaled' in the type store
        # Getting the type of 'stypy_return_type' (line 976)
        stypy_return_type_36578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_36578)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'scaled'
        return stypy_return_type_36578


# Assigning a type to the variable 'Normalize' (line 849)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 0), 'Normalize', Normalize)
# Declaration of the 'LogNorm' class
# Getting the type of 'Normalize' (line 981)
Normalize_36579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 14), 'Normalize')

class LogNorm(Normalize_36579, ):
    unicode_36580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, (-1)), 'unicode', u'\n    Normalize a given value to the 0-1 range on a log scale\n    ')

    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 985)
        None_36581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 35), 'None')
        defaults = [None_36581]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 985, 4, False)
        # Assigning a type to the variable 'self' (line 986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogNorm.__call__.__dict__.__setitem__('stypy_localization', localization)
        LogNorm.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogNorm.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogNorm.__call__.__dict__.__setitem__('stypy_function_name', 'LogNorm.__call__')
        LogNorm.__call__.__dict__.__setitem__('stypy_param_names_list', ['value', 'clip'])
        LogNorm.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogNorm.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogNorm.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogNorm.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogNorm.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogNorm.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogNorm.__call__', ['value', 'clip'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['value', 'clip'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 986)
        # Getting the type of 'clip' (line 986)
        clip_36582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 11), 'clip')
        # Getting the type of 'None' (line 986)
        None_36583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 19), 'None')
        
        (may_be_36584, more_types_in_union_36585) = may_be_none(clip_36582, None_36583)

        if may_be_36584:

            if more_types_in_union_36585:
                # Runtime conditional SSA (line 986)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 987):
            
            # Assigning a Attribute to a Name (line 987):
            
            # Assigning a Attribute to a Name (line 987):
            # Getting the type of 'self' (line 987)
            self_36586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 19), 'self')
            # Obtaining the member 'clip' of a type (line 987)
            clip_36587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 19), self_36586, 'clip')
            # Assigning a type to the variable 'clip' (line 987)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 12), 'clip', clip_36587)

            if more_types_in_union_36585:
                # SSA join for if statement (line 986)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 989):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to process_value(...): (line 989)
        # Processing the call arguments (line 989)
        # Getting the type of 'value' (line 989)
        value_36590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 47), 'value', False)
        # Processing the call keyword arguments (line 989)
        kwargs_36591 = {}
        # Getting the type of 'self' (line 989)
        self_36588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 28), 'self', False)
        # Obtaining the member 'process_value' of a type (line 989)
        process_value_36589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 989, 28), self_36588, 'process_value')
        # Calling process_value(args, kwargs) (line 989)
        process_value_call_result_36592 = invoke(stypy.reporting.localization.Localization(__file__, 989, 28), process_value_36589, *[value_36590], **kwargs_36591)
        
        # Assigning a type to the variable 'call_assignment_34233' (line 989)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 8), 'call_assignment_34233', process_value_call_result_36592)
        
        # Assigning a Call to a Name (line 989):
        
        # Assigning a Call to a Name (line 989):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_36595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 8), 'int')
        # Processing the call keyword arguments
        kwargs_36596 = {}
        # Getting the type of 'call_assignment_34233' (line 989)
        call_assignment_34233_36593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 8), 'call_assignment_34233', False)
        # Obtaining the member '__getitem__' of a type (line 989)
        getitem___36594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 989, 8), call_assignment_34233_36593, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_36597 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___36594, *[int_36595], **kwargs_36596)
        
        # Assigning a type to the variable 'call_assignment_34234' (line 989)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 8), 'call_assignment_34234', getitem___call_result_36597)
        
        # Assigning a Name to a Name (line 989):
        
        # Assigning a Name to a Name (line 989):
        # Getting the type of 'call_assignment_34234' (line 989)
        call_assignment_34234_36598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 8), 'call_assignment_34234')
        # Assigning a type to the variable 'result' (line 989)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 8), 'result', call_assignment_34234_36598)
        
        # Assigning a Call to a Name (line 989):
        
        # Assigning a Call to a Name (line 989):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_36601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 8), 'int')
        # Processing the call keyword arguments
        kwargs_36602 = {}
        # Getting the type of 'call_assignment_34233' (line 989)
        call_assignment_34233_36599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 8), 'call_assignment_34233', False)
        # Obtaining the member '__getitem__' of a type (line 989)
        getitem___36600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 989, 8), call_assignment_34233_36599, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_36603 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___36600, *[int_36601], **kwargs_36602)
        
        # Assigning a type to the variable 'call_assignment_34235' (line 989)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 8), 'call_assignment_34235', getitem___call_result_36603)
        
        # Assigning a Name to a Name (line 989):
        
        # Assigning a Name to a Name (line 989):
        # Getting the type of 'call_assignment_34235' (line 989)
        call_assignment_34235_36604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 8), 'call_assignment_34235')
        # Assigning a type to the variable 'is_scalar' (line 989)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 16), 'is_scalar', call_assignment_34235_36604)
        
        # Assigning a Call to a Name (line 991):
        
        # Assigning a Call to a Name (line 991):
        
        # Assigning a Call to a Name (line 991):
        
        # Call to masked_less_equal(...): (line 991)
        # Processing the call arguments (line 991)
        # Getting the type of 'result' (line 991)
        result_36608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 41), 'result', False)
        int_36609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 991, 49), 'int')
        # Processing the call keyword arguments (line 991)
        # Getting the type of 'False' (line 991)
        False_36610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 57), 'False', False)
        keyword_36611 = False_36610
        kwargs_36612 = {'copy': keyword_36611}
        # Getting the type of 'np' (line 991)
        np_36605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 17), 'np', False)
        # Obtaining the member 'ma' of a type (line 991)
        ma_36606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 17), np_36605, 'ma')
        # Obtaining the member 'masked_less_equal' of a type (line 991)
        masked_less_equal_36607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 17), ma_36606, 'masked_less_equal')
        # Calling masked_less_equal(args, kwargs) (line 991)
        masked_less_equal_call_result_36613 = invoke(stypy.reporting.localization.Localization(__file__, 991, 17), masked_less_equal_36607, *[result_36608, int_36609], **kwargs_36612)
        
        # Assigning a type to the variable 'result' (line 991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 991, 8), 'result', masked_less_equal_call_result_36613)
        
        # Call to autoscale_None(...): (line 993)
        # Processing the call arguments (line 993)
        # Getting the type of 'result' (line 993)
        result_36616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 28), 'result', False)
        # Processing the call keyword arguments (line 993)
        kwargs_36617 = {}
        # Getting the type of 'self' (line 993)
        self_36614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 8), 'self', False)
        # Obtaining the member 'autoscale_None' of a type (line 993)
        autoscale_None_36615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 8), self_36614, 'autoscale_None')
        # Calling autoscale_None(args, kwargs) (line 993)
        autoscale_None_call_result_36618 = invoke(stypy.reporting.localization.Localization(__file__, 993, 8), autoscale_None_36615, *[result_36616], **kwargs_36617)
        
        
        # Assigning a Tuple to a Tuple (line 994):
        
        # Assigning a Attribute to a Name (line 994):
        
        # Assigning a Attribute to a Name (line 994):
        # Getting the type of 'self' (line 994)
        self_36619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 21), 'self')
        # Obtaining the member 'vmin' of a type (line 994)
        vmin_36620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 21), self_36619, 'vmin')
        # Assigning a type to the variable 'tuple_assignment_34236' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 8), 'tuple_assignment_34236', vmin_36620)
        
        # Assigning a Attribute to a Name (line 994):
        
        # Assigning a Attribute to a Name (line 994):
        # Getting the type of 'self' (line 994)
        self_36621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 32), 'self')
        # Obtaining the member 'vmax' of a type (line 994)
        vmax_36622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 32), self_36621, 'vmax')
        # Assigning a type to the variable 'tuple_assignment_34237' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 8), 'tuple_assignment_34237', vmax_36622)
        
        # Assigning a Name to a Name (line 994):
        
        # Assigning a Name to a Name (line 994):
        # Getting the type of 'tuple_assignment_34236' (line 994)
        tuple_assignment_34236_36623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 8), 'tuple_assignment_34236')
        # Assigning a type to the variable 'vmin' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 8), 'vmin', tuple_assignment_34236_36623)
        
        # Assigning a Name to a Name (line 994):
        
        # Assigning a Name to a Name (line 994):
        # Getting the type of 'tuple_assignment_34237' (line 994)
        tuple_assignment_34237_36624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 8), 'tuple_assignment_34237')
        # Assigning a type to the variable 'vmax' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 14), 'vmax', tuple_assignment_34237_36624)
        
        
        # Getting the type of 'vmin' (line 995)
        vmin_36625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 11), 'vmin')
        # Getting the type of 'vmax' (line 995)
        vmax_36626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 18), 'vmax')
        # Applying the binary operator '>' (line 995)
        result_gt_36627 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 11), '>', vmin_36625, vmax_36626)
        
        # Testing the type of an if condition (line 995)
        if_condition_36628 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 995, 8), result_gt_36627)
        # Assigning a type to the variable 'if_condition_36628' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 8), 'if_condition_36628', if_condition_36628)
        # SSA begins for if statement (line 995)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 996)
        # Processing the call arguments (line 996)
        unicode_36630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 29), 'unicode', u'minvalue must be less than or equal to maxvalue')
        # Processing the call keyword arguments (line 996)
        kwargs_36631 = {}
        # Getting the type of 'ValueError' (line 996)
        ValueError_36629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 996)
        ValueError_call_result_36632 = invoke(stypy.reporting.localization.Localization(__file__, 996, 18), ValueError_36629, *[unicode_36630], **kwargs_36631)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 996, 12), ValueError_call_result_36632, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 995)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'vmin' (line 997)
        vmin_36633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 13), 'vmin')
        int_36634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 997, 21), 'int')
        # Applying the binary operator '<=' (line 997)
        result_le_36635 = python_operator(stypy.reporting.localization.Localization(__file__, 997, 13), '<=', vmin_36633, int_36634)
        
        # Testing the type of an if condition (line 997)
        if_condition_36636 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 997, 13), result_le_36635)
        # Assigning a type to the variable 'if_condition_36636' (line 997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 13), 'if_condition_36636', if_condition_36636)
        # SSA begins for if statement (line 997)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 998)
        # Processing the call arguments (line 998)
        unicode_36638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 29), 'unicode', u'values must all be positive')
        # Processing the call keyword arguments (line 998)
        kwargs_36639 = {}
        # Getting the type of 'ValueError' (line 998)
        ValueError_36637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 998)
        ValueError_call_result_36640 = invoke(stypy.reporting.localization.Localization(__file__, 998, 18), ValueError_36637, *[unicode_36638], **kwargs_36639)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 998, 12), ValueError_call_result_36640, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 997)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'vmin' (line 999)
        vmin_36641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 13), 'vmin')
        # Getting the type of 'vmax' (line 999)
        vmax_36642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 21), 'vmax')
        # Applying the binary operator '==' (line 999)
        result_eq_36643 = python_operator(stypy.reporting.localization.Localization(__file__, 999, 13), '==', vmin_36641, vmax_36642)
        
        # Testing the type of an if condition (line 999)
        if_condition_36644 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 999, 13), result_eq_36643)
        # Assigning a type to the variable 'if_condition_36644' (line 999)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 999, 13), 'if_condition_36644', if_condition_36644)
        # SSA begins for if statement (line 999)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to fill(...): (line 1000)
        # Processing the call arguments (line 1000)
        int_36647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1000, 24), 'int')
        # Processing the call keyword arguments (line 1000)
        kwargs_36648 = {}
        # Getting the type of 'result' (line 1000)
        result_36645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 12), 'result', False)
        # Obtaining the member 'fill' of a type (line 1000)
        fill_36646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 12), result_36645, 'fill')
        # Calling fill(args, kwargs) (line 1000)
        fill_call_result_36649 = invoke(stypy.reporting.localization.Localization(__file__, 1000, 12), fill_36646, *[int_36647], **kwargs_36648)
        
        # SSA branch for the else part of an if statement (line 999)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'clip' (line 1002)
        clip_36650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 15), 'clip')
        # Testing the type of an if condition (line 1002)
        if_condition_36651 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1002, 12), clip_36650)
        # Assigning a type to the variable 'if_condition_36651' (line 1002)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1002, 12), 'if_condition_36651', if_condition_36651)
        # SSA begins for if statement (line 1002)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1003):
        
        # Assigning a Call to a Name (line 1003):
        
        # Assigning a Call to a Name (line 1003):
        
        # Call to getmask(...): (line 1003)
        # Processing the call arguments (line 1003)
        # Getting the type of 'result' (line 1003)
        result_36655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 37), 'result', False)
        # Processing the call keyword arguments (line 1003)
        kwargs_36656 = {}
        # Getting the type of 'np' (line 1003)
        np_36652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 23), 'np', False)
        # Obtaining the member 'ma' of a type (line 1003)
        ma_36653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 23), np_36652, 'ma')
        # Obtaining the member 'getmask' of a type (line 1003)
        getmask_36654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 23), ma_36653, 'getmask')
        # Calling getmask(args, kwargs) (line 1003)
        getmask_call_result_36657 = invoke(stypy.reporting.localization.Localization(__file__, 1003, 23), getmask_36654, *[result_36655], **kwargs_36656)
        
        # Assigning a type to the variable 'mask' (line 1003)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1003, 16), 'mask', getmask_call_result_36657)
        
        # Assigning a Call to a Name (line 1004):
        
        # Assigning a Call to a Name (line 1004):
        
        # Assigning a Call to a Name (line 1004):
        
        # Call to array(...): (line 1004)
        # Processing the call arguments (line 1004)
        
        # Call to clip(...): (line 1004)
        # Processing the call arguments (line 1004)
        
        # Call to filled(...): (line 1004)
        # Processing the call arguments (line 1004)
        # Getting the type of 'vmax' (line 1004)
        vmax_36665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 59), 'vmax', False)
        # Processing the call keyword arguments (line 1004)
        kwargs_36666 = {}
        # Getting the type of 'result' (line 1004)
        result_36663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 45), 'result', False)
        # Obtaining the member 'filled' of a type (line 1004)
        filled_36664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 45), result_36663, 'filled')
        # Calling filled(args, kwargs) (line 1004)
        filled_call_result_36667 = invoke(stypy.reporting.localization.Localization(__file__, 1004, 45), filled_36664, *[vmax_36665], **kwargs_36666)
        
        # Getting the type of 'vmin' (line 1004)
        vmin_36668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 66), 'vmin', False)
        # Getting the type of 'vmax' (line 1004)
        vmax_36669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 72), 'vmax', False)
        # Processing the call keyword arguments (line 1004)
        kwargs_36670 = {}
        # Getting the type of 'np' (line 1004)
        np_36661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 37), 'np', False)
        # Obtaining the member 'clip' of a type (line 1004)
        clip_36662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 37), np_36661, 'clip')
        # Calling clip(args, kwargs) (line 1004)
        clip_call_result_36671 = invoke(stypy.reporting.localization.Localization(__file__, 1004, 37), clip_36662, *[filled_call_result_36667, vmin_36668, vmax_36669], **kwargs_36670)
        
        # Processing the call keyword arguments (line 1004)
        # Getting the type of 'mask' (line 1005)
        mask_36672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 42), 'mask', False)
        keyword_36673 = mask_36672
        kwargs_36674 = {'mask': keyword_36673}
        # Getting the type of 'np' (line 1004)
        np_36658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 25), 'np', False)
        # Obtaining the member 'ma' of a type (line 1004)
        ma_36659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 25), np_36658, 'ma')
        # Obtaining the member 'array' of a type (line 1004)
        array_36660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 25), ma_36659, 'array')
        # Calling array(args, kwargs) (line 1004)
        array_call_result_36675 = invoke(stypy.reporting.localization.Localization(__file__, 1004, 25), array_36660, *[clip_call_result_36671], **kwargs_36674)
        
        # Assigning a type to the variable 'result' (line 1004)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1004, 16), 'result', array_call_result_36675)
        # SSA join for if statement (line 1002)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 1007):
        
        # Assigning a Attribute to a Name (line 1007):
        
        # Assigning a Attribute to a Name (line 1007):
        # Getting the type of 'result' (line 1007)
        result_36676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 21), 'result')
        # Obtaining the member 'data' of a type (line 1007)
        data_36677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1007, 21), result_36676, 'data')
        # Assigning a type to the variable 'resdat' (line 1007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1007, 12), 'resdat', data_36677)
        
        # Assigning a Attribute to a Name (line 1008):
        
        # Assigning a Attribute to a Name (line 1008):
        
        # Assigning a Attribute to a Name (line 1008):
        # Getting the type of 'result' (line 1008)
        result_36678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 19), 'result')
        # Obtaining the member 'mask' of a type (line 1008)
        mask_36679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1008, 19), result_36678, 'mask')
        # Assigning a type to the variable 'mask' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 12), 'mask', mask_36679)
        
        
        # Getting the type of 'mask' (line 1009)
        mask_36680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 15), 'mask')
        # Getting the type of 'np' (line 1009)
        np_36681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 23), 'np')
        # Obtaining the member 'ma' of a type (line 1009)
        ma_36682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 23), np_36681, 'ma')
        # Obtaining the member 'nomask' of a type (line 1009)
        nomask_36683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 23), ma_36682, 'nomask')
        # Applying the binary operator 'is' (line 1009)
        result_is__36684 = python_operator(stypy.reporting.localization.Localization(__file__, 1009, 15), 'is', mask_36680, nomask_36683)
        
        # Testing the type of an if condition (line 1009)
        if_condition_36685 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1009, 12), result_is__36684)
        # Assigning a type to the variable 'if_condition_36685' (line 1009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 12), 'if_condition_36685', if_condition_36685)
        # SSA begins for if statement (line 1009)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Compare to a Name (line 1010):
        
        # Assigning a Compare to a Name (line 1010):
        
        # Assigning a Compare to a Name (line 1010):
        
        # Getting the type of 'resdat' (line 1010)
        resdat_36686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 24), 'resdat')
        int_36687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1010, 34), 'int')
        # Applying the binary operator '<=' (line 1010)
        result_le_36688 = python_operator(stypy.reporting.localization.Localization(__file__, 1010, 24), '<=', resdat_36686, int_36687)
        
        # Assigning a type to the variable 'mask' (line 1010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 16), 'mask', result_le_36688)
        # SSA branch for the else part of an if statement (line 1009)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'mask' (line 1012)
        mask_36689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 16), 'mask')
        
        # Getting the type of 'resdat' (line 1012)
        resdat_36690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 24), 'resdat')
        int_36691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 34), 'int')
        # Applying the binary operator '<=' (line 1012)
        result_le_36692 = python_operator(stypy.reporting.localization.Localization(__file__, 1012, 24), '<=', resdat_36690, int_36691)
        
        # Applying the binary operator '|=' (line 1012)
        result_ior_36693 = python_operator(stypy.reporting.localization.Localization(__file__, 1012, 16), '|=', mask_36689, result_le_36692)
        # Assigning a type to the variable 'mask' (line 1012)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1012, 16), 'mask', result_ior_36693)
        
        # SSA join for if statement (line 1009)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to copyto(...): (line 1013)
        # Processing the call arguments (line 1013)
        # Getting the type of 'resdat' (line 1013)
        resdat_36696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 22), 'resdat', False)
        int_36697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 30), 'int')
        # Processing the call keyword arguments (line 1013)
        # Getting the type of 'mask' (line 1013)
        mask_36698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 39), 'mask', False)
        keyword_36699 = mask_36698
        kwargs_36700 = {'where': keyword_36699}
        # Getting the type of 'np' (line 1013)
        np_36694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 12), 'np', False)
        # Obtaining the member 'copyto' of a type (line 1013)
        copyto_36695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 12), np_36694, 'copyto')
        # Calling copyto(args, kwargs) (line 1013)
        copyto_call_result_36701 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 12), copyto_36695, *[resdat_36696, int_36697], **kwargs_36700)
        
        
        # Call to log(...): (line 1014)
        # Processing the call arguments (line 1014)
        # Getting the type of 'resdat' (line 1014)
        resdat_36704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 19), 'resdat', False)
        # Getting the type of 'resdat' (line 1014)
        resdat_36705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 27), 'resdat', False)
        # Processing the call keyword arguments (line 1014)
        kwargs_36706 = {}
        # Getting the type of 'np' (line 1014)
        np_36702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 12), 'np', False)
        # Obtaining the member 'log' of a type (line 1014)
        log_36703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1014, 12), np_36702, 'log')
        # Calling log(args, kwargs) (line 1014)
        log_call_result_36707 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 12), log_36703, *[resdat_36704, resdat_36705], **kwargs_36706)
        
        
        # Getting the type of 'resdat' (line 1015)
        resdat_36708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 12), 'resdat')
        
        # Call to log(...): (line 1015)
        # Processing the call arguments (line 1015)
        # Getting the type of 'vmin' (line 1015)
        vmin_36711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 29), 'vmin', False)
        # Processing the call keyword arguments (line 1015)
        kwargs_36712 = {}
        # Getting the type of 'np' (line 1015)
        np_36709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 22), 'np', False)
        # Obtaining the member 'log' of a type (line 1015)
        log_36710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1015, 22), np_36709, 'log')
        # Calling log(args, kwargs) (line 1015)
        log_call_result_36713 = invoke(stypy.reporting.localization.Localization(__file__, 1015, 22), log_36710, *[vmin_36711], **kwargs_36712)
        
        # Applying the binary operator '-=' (line 1015)
        result_isub_36714 = python_operator(stypy.reporting.localization.Localization(__file__, 1015, 12), '-=', resdat_36708, log_call_result_36713)
        # Assigning a type to the variable 'resdat' (line 1015)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1015, 12), 'resdat', result_isub_36714)
        
        
        # Getting the type of 'resdat' (line 1016)
        resdat_36715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 12), 'resdat')
        
        # Call to log(...): (line 1016)
        # Processing the call arguments (line 1016)
        # Getting the type of 'vmax' (line 1016)
        vmax_36718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 30), 'vmax', False)
        # Processing the call keyword arguments (line 1016)
        kwargs_36719 = {}
        # Getting the type of 'np' (line 1016)
        np_36716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 23), 'np', False)
        # Obtaining the member 'log' of a type (line 1016)
        log_36717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1016, 23), np_36716, 'log')
        # Calling log(args, kwargs) (line 1016)
        log_call_result_36720 = invoke(stypy.reporting.localization.Localization(__file__, 1016, 23), log_36717, *[vmax_36718], **kwargs_36719)
        
        
        # Call to log(...): (line 1016)
        # Processing the call arguments (line 1016)
        # Getting the type of 'vmin' (line 1016)
        vmin_36723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 45), 'vmin', False)
        # Processing the call keyword arguments (line 1016)
        kwargs_36724 = {}
        # Getting the type of 'np' (line 1016)
        np_36721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 38), 'np', False)
        # Obtaining the member 'log' of a type (line 1016)
        log_36722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1016, 38), np_36721, 'log')
        # Calling log(args, kwargs) (line 1016)
        log_call_result_36725 = invoke(stypy.reporting.localization.Localization(__file__, 1016, 38), log_36722, *[vmin_36723], **kwargs_36724)
        
        # Applying the binary operator '-' (line 1016)
        result_sub_36726 = python_operator(stypy.reporting.localization.Localization(__file__, 1016, 23), '-', log_call_result_36720, log_call_result_36725)
        
        # Applying the binary operator 'div=' (line 1016)
        result_div_36727 = python_operator(stypy.reporting.localization.Localization(__file__, 1016, 12), 'div=', resdat_36715, result_sub_36726)
        # Assigning a type to the variable 'resdat' (line 1016)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 12), 'resdat', result_div_36727)
        
        
        # Assigning a Call to a Name (line 1017):
        
        # Assigning a Call to a Name (line 1017):
        
        # Assigning a Call to a Name (line 1017):
        
        # Call to array(...): (line 1017)
        # Processing the call arguments (line 1017)
        # Getting the type of 'resdat' (line 1017)
        resdat_36731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 33), 'resdat', False)
        # Processing the call keyword arguments (line 1017)
        # Getting the type of 'mask' (line 1017)
        mask_36732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 46), 'mask', False)
        keyword_36733 = mask_36732
        # Getting the type of 'False' (line 1017)
        False_36734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 57), 'False', False)
        keyword_36735 = False_36734
        kwargs_36736 = {'copy': keyword_36735, 'mask': keyword_36733}
        # Getting the type of 'np' (line 1017)
        np_36728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 21), 'np', False)
        # Obtaining the member 'ma' of a type (line 1017)
        ma_36729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 21), np_36728, 'ma')
        # Obtaining the member 'array' of a type (line 1017)
        array_36730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 21), ma_36729, 'array')
        # Calling array(args, kwargs) (line 1017)
        array_call_result_36737 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 21), array_36730, *[resdat_36731], **kwargs_36736)
        
        # Assigning a type to the variable 'result' (line 1017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1017, 12), 'result', array_call_result_36737)
        # SSA join for if statement (line 999)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 997)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 995)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'is_scalar' (line 1018)
        is_scalar_36738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 11), 'is_scalar')
        # Testing the type of an if condition (line 1018)
        if_condition_36739 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1018, 8), is_scalar_36738)
        # Assigning a type to the variable 'if_condition_36739' (line 1018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 8), 'if_condition_36739', if_condition_36739)
        # SSA begins for if statement (line 1018)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1019):
        
        # Assigning a Subscript to a Name (line 1019):
        
        # Assigning a Subscript to a Name (line 1019):
        
        # Obtaining the type of the subscript
        int_36740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1019, 28), 'int')
        # Getting the type of 'result' (line 1019)
        result_36741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 21), 'result')
        # Obtaining the member '__getitem__' of a type (line 1019)
        getitem___36742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1019, 21), result_36741, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1019)
        subscript_call_result_36743 = invoke(stypy.reporting.localization.Localization(__file__, 1019, 21), getitem___36742, int_36740)
        
        # Assigning a type to the variable 'result' (line 1019)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1019, 12), 'result', subscript_call_result_36743)
        # SSA join for if statement (line 1018)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 1020)
        result_36744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 1020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1020, 8), 'stypy_return_type', result_36744)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 985)
        stypy_return_type_36745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_36745)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_36745


    @norecursion
    def inverse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inverse'
        module_type_store = module_type_store.open_function_context('inverse', 1022, 4, False)
        # Assigning a type to the variable 'self' (line 1023)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1023, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogNorm.inverse.__dict__.__setitem__('stypy_localization', localization)
        LogNorm.inverse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogNorm.inverse.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogNorm.inverse.__dict__.__setitem__('stypy_function_name', 'LogNorm.inverse')
        LogNorm.inverse.__dict__.__setitem__('stypy_param_names_list', ['value'])
        LogNorm.inverse.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogNorm.inverse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogNorm.inverse.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogNorm.inverse.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogNorm.inverse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogNorm.inverse.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogNorm.inverse', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inverse', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inverse(...)' code ##################

        
        
        
        # Call to scaled(...): (line 1023)
        # Processing the call keyword arguments (line 1023)
        kwargs_36748 = {}
        # Getting the type of 'self' (line 1023)
        self_36746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 15), 'self', False)
        # Obtaining the member 'scaled' of a type (line 1023)
        scaled_36747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 15), self_36746, 'scaled')
        # Calling scaled(args, kwargs) (line 1023)
        scaled_call_result_36749 = invoke(stypy.reporting.localization.Localization(__file__, 1023, 15), scaled_36747, *[], **kwargs_36748)
        
        # Applying the 'not' unary operator (line 1023)
        result_not__36750 = python_operator(stypy.reporting.localization.Localization(__file__, 1023, 11), 'not', scaled_call_result_36749)
        
        # Testing the type of an if condition (line 1023)
        if_condition_36751 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1023, 8), result_not__36750)
        # Assigning a type to the variable 'if_condition_36751' (line 1023)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1023, 8), 'if_condition_36751', if_condition_36751)
        # SSA begins for if statement (line 1023)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1024)
        # Processing the call arguments (line 1024)
        unicode_36753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, 29), 'unicode', u'Not invertible until scaled')
        # Processing the call keyword arguments (line 1024)
        kwargs_36754 = {}
        # Getting the type of 'ValueError' (line 1024)
        ValueError_36752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1024)
        ValueError_call_result_36755 = invoke(stypy.reporting.localization.Localization(__file__, 1024, 18), ValueError_36752, *[unicode_36753], **kwargs_36754)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1024, 12), ValueError_call_result_36755, 'raise parameter', BaseException)
        # SSA join for if statement (line 1023)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 1025):
        
        # Assigning a Attribute to a Name (line 1025):
        
        # Assigning a Attribute to a Name (line 1025):
        # Getting the type of 'self' (line 1025)
        self_36756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 21), 'self')
        # Obtaining the member 'vmin' of a type (line 1025)
        vmin_36757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 21), self_36756, 'vmin')
        # Assigning a type to the variable 'tuple_assignment_34238' (line 1025)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1025, 8), 'tuple_assignment_34238', vmin_36757)
        
        # Assigning a Attribute to a Name (line 1025):
        
        # Assigning a Attribute to a Name (line 1025):
        # Getting the type of 'self' (line 1025)
        self_36758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 32), 'self')
        # Obtaining the member 'vmax' of a type (line 1025)
        vmax_36759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 32), self_36758, 'vmax')
        # Assigning a type to the variable 'tuple_assignment_34239' (line 1025)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1025, 8), 'tuple_assignment_34239', vmax_36759)
        
        # Assigning a Name to a Name (line 1025):
        
        # Assigning a Name to a Name (line 1025):
        # Getting the type of 'tuple_assignment_34238' (line 1025)
        tuple_assignment_34238_36760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 8), 'tuple_assignment_34238')
        # Assigning a type to the variable 'vmin' (line 1025)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1025, 8), 'vmin', tuple_assignment_34238_36760)
        
        # Assigning a Name to a Name (line 1025):
        
        # Assigning a Name to a Name (line 1025):
        # Getting the type of 'tuple_assignment_34239' (line 1025)
        tuple_assignment_34239_36761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 8), 'tuple_assignment_34239')
        # Assigning a type to the variable 'vmax' (line 1025)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1025, 14), 'vmax', tuple_assignment_34239_36761)
        
        
        # Call to iterable(...): (line 1027)
        # Processing the call arguments (line 1027)
        # Getting the type of 'value' (line 1027)
        value_36764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 26), 'value', False)
        # Processing the call keyword arguments (line 1027)
        kwargs_36765 = {}
        # Getting the type of 'cbook' (line 1027)
        cbook_36762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 11), 'cbook', False)
        # Obtaining the member 'iterable' of a type (line 1027)
        iterable_36763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 11), cbook_36762, 'iterable')
        # Calling iterable(args, kwargs) (line 1027)
        iterable_call_result_36766 = invoke(stypy.reporting.localization.Localization(__file__, 1027, 11), iterable_36763, *[value_36764], **kwargs_36765)
        
        # Testing the type of an if condition (line 1027)
        if_condition_36767 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1027, 8), iterable_call_result_36766)
        # Assigning a type to the variable 'if_condition_36767' (line 1027)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1027, 8), 'if_condition_36767', if_condition_36767)
        # SSA begins for if statement (line 1027)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1028):
        
        # Assigning a Call to a Name (line 1028):
        
        # Assigning a Call to a Name (line 1028):
        
        # Call to asarray(...): (line 1028)
        # Processing the call arguments (line 1028)
        # Getting the type of 'value' (line 1028)
        value_36771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 32), 'value', False)
        # Processing the call keyword arguments (line 1028)
        kwargs_36772 = {}
        # Getting the type of 'np' (line 1028)
        np_36768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 18), 'np', False)
        # Obtaining the member 'ma' of a type (line 1028)
        ma_36769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 18), np_36768, 'ma')
        # Obtaining the member 'asarray' of a type (line 1028)
        asarray_36770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 18), ma_36769, 'asarray')
        # Calling asarray(args, kwargs) (line 1028)
        asarray_call_result_36773 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 18), asarray_36770, *[value_36771], **kwargs_36772)
        
        # Assigning a type to the variable 'val' (line 1028)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 12), 'val', asarray_call_result_36773)
        # Getting the type of 'vmin' (line 1029)
        vmin_36774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 19), 'vmin')
        
        # Call to power(...): (line 1029)
        # Processing the call arguments (line 1029)
        # Getting the type of 'vmax' (line 1029)
        vmax_36778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 39), 'vmax', False)
        # Getting the type of 'vmin' (line 1029)
        vmin_36779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 46), 'vmin', False)
        # Applying the binary operator 'div' (line 1029)
        result_div_36780 = python_operator(stypy.reporting.localization.Localization(__file__, 1029, 39), 'div', vmax_36778, vmin_36779)
        
        # Getting the type of 'val' (line 1029)
        val_36781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 53), 'val', False)
        # Processing the call keyword arguments (line 1029)
        kwargs_36782 = {}
        # Getting the type of 'np' (line 1029)
        np_36775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 26), 'np', False)
        # Obtaining the member 'ma' of a type (line 1029)
        ma_36776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 26), np_36775, 'ma')
        # Obtaining the member 'power' of a type (line 1029)
        power_36777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 26), ma_36776, 'power')
        # Calling power(args, kwargs) (line 1029)
        power_call_result_36783 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 26), power_36777, *[result_div_36780, val_36781], **kwargs_36782)
        
        # Applying the binary operator '*' (line 1029)
        result_mul_36784 = python_operator(stypy.reporting.localization.Localization(__file__, 1029, 19), '*', vmin_36774, power_call_result_36783)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 12), 'stypy_return_type', result_mul_36784)
        # SSA branch for the else part of an if statement (line 1027)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'vmin' (line 1031)
        vmin_36785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 19), 'vmin')
        
        # Call to pow(...): (line 1031)
        # Processing the call arguments (line 1031)
        # Getting the type of 'vmax' (line 1031)
        vmax_36787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 31), 'vmax', False)
        # Getting the type of 'vmin' (line 1031)
        vmin_36788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 38), 'vmin', False)
        # Applying the binary operator 'div' (line 1031)
        result_div_36789 = python_operator(stypy.reporting.localization.Localization(__file__, 1031, 31), 'div', vmax_36787, vmin_36788)
        
        # Getting the type of 'value' (line 1031)
        value_36790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 45), 'value', False)
        # Processing the call keyword arguments (line 1031)
        kwargs_36791 = {}
        # Getting the type of 'pow' (line 1031)
        pow_36786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 26), 'pow', False)
        # Calling pow(args, kwargs) (line 1031)
        pow_call_result_36792 = invoke(stypy.reporting.localization.Localization(__file__, 1031, 26), pow_36786, *[result_div_36789, value_36790], **kwargs_36791)
        
        # Applying the binary operator '*' (line 1031)
        result_mul_36793 = python_operator(stypy.reporting.localization.Localization(__file__, 1031, 19), '*', vmin_36785, pow_call_result_36792)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1031)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1031, 12), 'stypy_return_type', result_mul_36793)
        # SSA join for if statement (line 1027)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'inverse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inverse' in the type store
        # Getting the type of 'stypy_return_type' (line 1022)
        stypy_return_type_36794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_36794)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inverse'
        return stypy_return_type_36794


    @norecursion
    def autoscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'autoscale'
        module_type_store = module_type_store.open_function_context('autoscale', 1033, 4, False)
        # Assigning a type to the variable 'self' (line 1034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogNorm.autoscale.__dict__.__setitem__('stypy_localization', localization)
        LogNorm.autoscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogNorm.autoscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogNorm.autoscale.__dict__.__setitem__('stypy_function_name', 'LogNorm.autoscale')
        LogNorm.autoscale.__dict__.__setitem__('stypy_param_names_list', ['A'])
        LogNorm.autoscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogNorm.autoscale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogNorm.autoscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogNorm.autoscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogNorm.autoscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogNorm.autoscale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogNorm.autoscale', ['A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale', localization, ['A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale(...)' code ##################

        unicode_36795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1036, (-1)), 'unicode', u'\n        Set *vmin*, *vmax* to min, max of *A*.\n        ')
        
        # Assigning a Call to a Name (line 1037):
        
        # Assigning a Call to a Name (line 1037):
        
        # Assigning a Call to a Name (line 1037):
        
        # Call to masked_less_equal(...): (line 1037)
        # Processing the call arguments (line 1037)
        # Getting the type of 'A' (line 1037)
        A_36799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 36), 'A', False)
        int_36800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 39), 'int')
        # Processing the call keyword arguments (line 1037)
        # Getting the type of 'False' (line 1037)
        False_36801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 47), 'False', False)
        keyword_36802 = False_36801
        kwargs_36803 = {'copy': keyword_36802}
        # Getting the type of 'np' (line 1037)
        np_36796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 12), 'np', False)
        # Obtaining the member 'ma' of a type (line 1037)
        ma_36797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 12), np_36796, 'ma')
        # Obtaining the member 'masked_less_equal' of a type (line 1037)
        masked_less_equal_36798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 12), ma_36797, 'masked_less_equal')
        # Calling masked_less_equal(args, kwargs) (line 1037)
        masked_less_equal_call_result_36804 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 12), masked_less_equal_36798, *[A_36799, int_36800], **kwargs_36803)
        
        # Assigning a type to the variable 'A' (line 1037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'A', masked_less_equal_call_result_36804)
        
        # Assigning a Call to a Attribute (line 1038):
        
        # Assigning a Call to a Attribute (line 1038):
        
        # Assigning a Call to a Attribute (line 1038):
        
        # Call to min(...): (line 1038)
        # Processing the call arguments (line 1038)
        # Getting the type of 'A' (line 1038)
        A_36808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 30), 'A', False)
        # Processing the call keyword arguments (line 1038)
        kwargs_36809 = {}
        # Getting the type of 'np' (line 1038)
        np_36805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 20), 'np', False)
        # Obtaining the member 'ma' of a type (line 1038)
        ma_36806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 20), np_36805, 'ma')
        # Obtaining the member 'min' of a type (line 1038)
        min_36807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 20), ma_36806, 'min')
        # Calling min(args, kwargs) (line 1038)
        min_call_result_36810 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 20), min_36807, *[A_36808], **kwargs_36809)
        
        # Getting the type of 'self' (line 1038)
        self_36811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'self')
        # Setting the type of the member 'vmin' of a type (line 1038)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 8), self_36811, 'vmin', min_call_result_36810)
        
        # Assigning a Call to a Attribute (line 1039):
        
        # Assigning a Call to a Attribute (line 1039):
        
        # Assigning a Call to a Attribute (line 1039):
        
        # Call to max(...): (line 1039)
        # Processing the call arguments (line 1039)
        # Getting the type of 'A' (line 1039)
        A_36815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 30), 'A', False)
        # Processing the call keyword arguments (line 1039)
        kwargs_36816 = {}
        # Getting the type of 'np' (line 1039)
        np_36812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 20), 'np', False)
        # Obtaining the member 'ma' of a type (line 1039)
        ma_36813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 20), np_36812, 'ma')
        # Obtaining the member 'max' of a type (line 1039)
        max_36814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 20), ma_36813, 'max')
        # Calling max(args, kwargs) (line 1039)
        max_call_result_36817 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 20), max_36814, *[A_36815], **kwargs_36816)
        
        # Getting the type of 'self' (line 1039)
        self_36818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 8), 'self')
        # Setting the type of the member 'vmax' of a type (line 1039)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 8), self_36818, 'vmax', max_call_result_36817)
        
        # ################# End of 'autoscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale' in the type store
        # Getting the type of 'stypy_return_type' (line 1033)
        stypy_return_type_36819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_36819)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale'
        return stypy_return_type_36819


    @norecursion
    def autoscale_None(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'autoscale_None'
        module_type_store = module_type_store.open_function_context('autoscale_None', 1041, 4, False)
        # Assigning a type to the variable 'self' (line 1042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LogNorm.autoscale_None.__dict__.__setitem__('stypy_localization', localization)
        LogNorm.autoscale_None.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LogNorm.autoscale_None.__dict__.__setitem__('stypy_type_store', module_type_store)
        LogNorm.autoscale_None.__dict__.__setitem__('stypy_function_name', 'LogNorm.autoscale_None')
        LogNorm.autoscale_None.__dict__.__setitem__('stypy_param_names_list', ['A'])
        LogNorm.autoscale_None.__dict__.__setitem__('stypy_varargs_param_name', None)
        LogNorm.autoscale_None.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LogNorm.autoscale_None.__dict__.__setitem__('stypy_call_defaults', defaults)
        LogNorm.autoscale_None.__dict__.__setitem__('stypy_call_varargs', varargs)
        LogNorm.autoscale_None.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LogNorm.autoscale_None.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogNorm.autoscale_None', ['A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale_None', localization, ['A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale_None(...)' code ##################

        unicode_36820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 8), 'unicode', u'autoscale only None-valued vmin or vmax.')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1043)
        self_36821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 11), 'self')
        # Obtaining the member 'vmin' of a type (line 1043)
        vmin_36822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 11), self_36821, 'vmin')
        # Getting the type of 'None' (line 1043)
        None_36823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 28), 'None')
        # Applying the binary operator 'isnot' (line 1043)
        result_is_not_36824 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 11), 'isnot', vmin_36822, None_36823)
        
        
        # Getting the type of 'self' (line 1043)
        self_36825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 37), 'self')
        # Obtaining the member 'vmax' of a type (line 1043)
        vmax_36826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 37), self_36825, 'vmax')
        # Getting the type of 'None' (line 1043)
        None_36827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 54), 'None')
        # Applying the binary operator 'isnot' (line 1043)
        result_is_not_36828 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 37), 'isnot', vmax_36826, None_36827)
        
        # Applying the binary operator 'and' (line 1043)
        result_and_keyword_36829 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 11), 'and', result_is_not_36824, result_is_not_36828)
        
        # Testing the type of an if condition (line 1043)
        if_condition_36830 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1043, 8), result_and_keyword_36829)
        # Assigning a type to the variable 'if_condition_36830' (line 1043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'if_condition_36830', if_condition_36830)
        # SSA begins for if statement (line 1043)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1044, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1043)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1045):
        
        # Assigning a Call to a Name (line 1045):
        
        # Assigning a Call to a Name (line 1045):
        
        # Call to masked_less_equal(...): (line 1045)
        # Processing the call arguments (line 1045)
        # Getting the type of 'A' (line 1045)
        A_36834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 36), 'A', False)
        int_36835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 39), 'int')
        # Processing the call keyword arguments (line 1045)
        # Getting the type of 'False' (line 1045)
        False_36836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 47), 'False', False)
        keyword_36837 = False_36836
        kwargs_36838 = {'copy': keyword_36837}
        # Getting the type of 'np' (line 1045)
        np_36831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 12), 'np', False)
        # Obtaining the member 'ma' of a type (line 1045)
        ma_36832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 12), np_36831, 'ma')
        # Obtaining the member 'masked_less_equal' of a type (line 1045)
        masked_less_equal_36833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 12), ma_36832, 'masked_less_equal')
        # Calling masked_less_equal(args, kwargs) (line 1045)
        masked_less_equal_call_result_36839 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 12), masked_less_equal_36833, *[A_36834, int_36835], **kwargs_36838)
        
        # Assigning a type to the variable 'A' (line 1045)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 8), 'A', masked_less_equal_call_result_36839)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1046)
        self_36840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 11), 'self')
        # Obtaining the member 'vmin' of a type (line 1046)
        vmin_36841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 11), self_36840, 'vmin')
        # Getting the type of 'None' (line 1046)
        None_36842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 24), 'None')
        # Applying the binary operator 'is' (line 1046)
        result_is__36843 = python_operator(stypy.reporting.localization.Localization(__file__, 1046, 11), 'is', vmin_36841, None_36842)
        
        # Getting the type of 'A' (line 1046)
        A_36844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 33), 'A')
        # Obtaining the member 'size' of a type (line 1046)
        size_36845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 33), A_36844, 'size')
        # Applying the binary operator 'and' (line 1046)
        result_and_keyword_36846 = python_operator(stypy.reporting.localization.Localization(__file__, 1046, 11), 'and', result_is__36843, size_36845)
        
        # Testing the type of an if condition (line 1046)
        if_condition_36847 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1046, 8), result_and_keyword_36846)
        # Assigning a type to the variable 'if_condition_36847' (line 1046)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1046, 8), 'if_condition_36847', if_condition_36847)
        # SSA begins for if statement (line 1046)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1047):
        
        # Assigning a Call to a Attribute (line 1047):
        
        # Assigning a Call to a Attribute (line 1047):
        
        # Call to min(...): (line 1047)
        # Processing the call keyword arguments (line 1047)
        kwargs_36850 = {}
        # Getting the type of 'A' (line 1047)
        A_36848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 24), 'A', False)
        # Obtaining the member 'min' of a type (line 1047)
        min_36849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 24), A_36848, 'min')
        # Calling min(args, kwargs) (line 1047)
        min_call_result_36851 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 24), min_36849, *[], **kwargs_36850)
        
        # Getting the type of 'self' (line 1047)
        self_36852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'self')
        # Setting the type of the member 'vmin' of a type (line 1047)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 12), self_36852, 'vmin', min_call_result_36851)
        # SSA join for if statement (line 1046)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1048)
        self_36853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 11), 'self')
        # Obtaining the member 'vmax' of a type (line 1048)
        vmax_36854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 11), self_36853, 'vmax')
        # Getting the type of 'None' (line 1048)
        None_36855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 24), 'None')
        # Applying the binary operator 'is' (line 1048)
        result_is__36856 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 11), 'is', vmax_36854, None_36855)
        
        # Getting the type of 'A' (line 1048)
        A_36857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 33), 'A')
        # Obtaining the member 'size' of a type (line 1048)
        size_36858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 33), A_36857, 'size')
        # Applying the binary operator 'and' (line 1048)
        result_and_keyword_36859 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 11), 'and', result_is__36856, size_36858)
        
        # Testing the type of an if condition (line 1048)
        if_condition_36860 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1048, 8), result_and_keyword_36859)
        # Assigning a type to the variable 'if_condition_36860' (line 1048)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 8), 'if_condition_36860', if_condition_36860)
        # SSA begins for if statement (line 1048)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1049):
        
        # Assigning a Call to a Attribute (line 1049):
        
        # Assigning a Call to a Attribute (line 1049):
        
        # Call to max(...): (line 1049)
        # Processing the call keyword arguments (line 1049)
        kwargs_36863 = {}
        # Getting the type of 'A' (line 1049)
        A_36861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 24), 'A', False)
        # Obtaining the member 'max' of a type (line 1049)
        max_36862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 24), A_36861, 'max')
        # Calling max(args, kwargs) (line 1049)
        max_call_result_36864 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 24), max_36862, *[], **kwargs_36863)
        
        # Getting the type of 'self' (line 1049)
        self_36865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 12), 'self')
        # Setting the type of the member 'vmax' of a type (line 1049)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 12), self_36865, 'vmax', max_call_result_36864)
        # SSA join for if statement (line 1048)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'autoscale_None(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale_None' in the type store
        # Getting the type of 'stypy_return_type' (line 1041)
        stypy_return_type_36866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_36866)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale_None'
        return stypy_return_type_36866


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 981, 0, False)
        # Assigning a type to the variable 'self' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LogNorm.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'LogNorm' (line 981)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 981, 0), 'LogNorm', LogNorm)
# Declaration of the 'SymLogNorm' class
# Getting the type of 'Normalize' (line 1052)
Normalize_36867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 17), 'Normalize')

class SymLogNorm(Normalize_36867, ):
    unicode_36868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1061, (-1)), 'unicode', u'\n    The symmetrical logarithmic scale is logarithmic in both the\n    positive and negative directions from the origin.\n\n    Since the values close to zero tend toward infinity, there is a\n    need to have a range around zero that is linear.  The parameter\n    *linthresh* allows the user to specify the size of this range\n    (-*linthresh*, *linthresh*).\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_36869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1062, 44), 'float')
        # Getting the type of 'None' (line 1063)
        None_36870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 22), 'None')
        # Getting the type of 'None' (line 1063)
        None_36871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 33), 'None')
        # Getting the type of 'False' (line 1063)
        False_36872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 44), 'False')
        defaults = [float_36869, None_36870, None_36871, False_36872]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1062, 4, False)
        # Assigning a type to the variable 'self' (line 1063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1063, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SymLogNorm.__init__', ['linthresh', 'linscale', 'vmin', 'vmax', 'clip'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['linthresh', 'linscale', 'vmin', 'vmax', 'clip'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_36873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, (-1)), 'unicode', u'\n        *linthresh*:\n        The range within which the plot is linear (to\n        avoid having the plot go to infinity around zero).\n\n        *linscale*:\n        This allows the linear range (-*linthresh* to *linthresh*)\n        to be stretched relative to the logarithmic range.  Its\n        value is the number of decades to use for each half of the\n        linear range.  For example, when *linscale* == 1.0 (the\n        default), the space used for the positive and negative\n        halves of the linear range will be equal to one decade in\n        the logarithmic range. Defaults to 1.\n        ')
        
        # Call to __init__(...): (line 1078)
        # Processing the call arguments (line 1078)
        # Getting the type of 'self' (line 1078)
        self_36876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 27), 'self', False)
        # Getting the type of 'vmin' (line 1078)
        vmin_36877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 33), 'vmin', False)
        # Getting the type of 'vmax' (line 1078)
        vmax_36878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 39), 'vmax', False)
        # Getting the type of 'clip' (line 1078)
        clip_36879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 45), 'clip', False)
        # Processing the call keyword arguments (line 1078)
        kwargs_36880 = {}
        # Getting the type of 'Normalize' (line 1078)
        Normalize_36874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 8), 'Normalize', False)
        # Obtaining the member '__init__' of a type (line 1078)
        init___36875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 8), Normalize_36874, '__init__')
        # Calling __init__(args, kwargs) (line 1078)
        init___call_result_36881 = invoke(stypy.reporting.localization.Localization(__file__, 1078, 8), init___36875, *[self_36876, vmin_36877, vmax_36878, clip_36879], **kwargs_36880)
        
        
        # Assigning a Call to a Attribute (line 1079):
        
        # Assigning a Call to a Attribute (line 1079):
        
        # Assigning a Call to a Attribute (line 1079):
        
        # Call to float(...): (line 1079)
        # Processing the call arguments (line 1079)
        # Getting the type of 'linthresh' (line 1079)
        linthresh_36883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 31), 'linthresh', False)
        # Processing the call keyword arguments (line 1079)
        kwargs_36884 = {}
        # Getting the type of 'float' (line 1079)
        float_36882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 25), 'float', False)
        # Calling float(args, kwargs) (line 1079)
        float_call_result_36885 = invoke(stypy.reporting.localization.Localization(__file__, 1079, 25), float_36882, *[linthresh_36883], **kwargs_36884)
        
        # Getting the type of 'self' (line 1079)
        self_36886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 8), 'self')
        # Setting the type of the member 'linthresh' of a type (line 1079)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1079, 8), self_36886, 'linthresh', float_call_result_36885)
        
        # Assigning a BinOp to a Attribute (line 1080):
        
        # Assigning a BinOp to a Attribute (line 1080):
        
        # Assigning a BinOp to a Attribute (line 1080):
        # Getting the type of 'linscale' (line 1080)
        linscale_36887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 30), 'linscale')
        float_36888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 42), 'float')
        # Getting the type of 'np' (line 1080)
        np_36889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 48), 'np')
        # Obtaining the member 'e' of a type (line 1080)
        e_36890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 48), np_36889, 'e')
        int_36891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 56), 'int')
        # Applying the binary operator '**' (line 1080)
        result_pow_36892 = python_operator(stypy.reporting.localization.Localization(__file__, 1080, 48), '**', e_36890, int_36891)
        
        # Applying the binary operator '-' (line 1080)
        result_sub_36893 = python_operator(stypy.reporting.localization.Localization(__file__, 1080, 42), '-', float_36888, result_pow_36892)
        
        # Applying the binary operator 'div' (line 1080)
        result_div_36894 = python_operator(stypy.reporting.localization.Localization(__file__, 1080, 30), 'div', linscale_36887, result_sub_36893)
        
        # Getting the type of 'self' (line 1080)
        self_36895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 8), 'self')
        # Setting the type of the member '_linscale_adj' of a type (line 1080)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 8), self_36895, '_linscale_adj', result_div_36894)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'vmin' (line 1081)
        vmin_36896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 11), 'vmin')
        # Getting the type of 'None' (line 1081)
        None_36897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 23), 'None')
        # Applying the binary operator 'isnot' (line 1081)
        result_is_not_36898 = python_operator(stypy.reporting.localization.Localization(__file__, 1081, 11), 'isnot', vmin_36896, None_36897)
        
        
        # Getting the type of 'vmax' (line 1081)
        vmax_36899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 32), 'vmax')
        # Getting the type of 'None' (line 1081)
        None_36900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 44), 'None')
        # Applying the binary operator 'isnot' (line 1081)
        result_is_not_36901 = python_operator(stypy.reporting.localization.Localization(__file__, 1081, 32), 'isnot', vmax_36899, None_36900)
        
        # Applying the binary operator 'and' (line 1081)
        result_and_keyword_36902 = python_operator(stypy.reporting.localization.Localization(__file__, 1081, 11), 'and', result_is_not_36898, result_is_not_36901)
        
        # Testing the type of an if condition (line 1081)
        if_condition_36903 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1081, 8), result_and_keyword_36902)
        # Assigning a type to the variable 'if_condition_36903' (line 1081)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 8), 'if_condition_36903', if_condition_36903)
        # SSA begins for if statement (line 1081)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _transform_vmin_vmax(...): (line 1082)
        # Processing the call keyword arguments (line 1082)
        kwargs_36906 = {}
        # Getting the type of 'self' (line 1082)
        self_36904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 12), 'self', False)
        # Obtaining the member '_transform_vmin_vmax' of a type (line 1082)
        _transform_vmin_vmax_36905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1082, 12), self_36904, '_transform_vmin_vmax')
        # Calling _transform_vmin_vmax(args, kwargs) (line 1082)
        _transform_vmin_vmax_call_result_36907 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 12), _transform_vmin_vmax_36905, *[], **kwargs_36906)
        
        # SSA join for if statement (line 1081)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1084)
        None_36908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 35), 'None')
        defaults = [None_36908]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1084, 4, False)
        # Assigning a type to the variable 'self' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SymLogNorm.__call__.__dict__.__setitem__('stypy_localization', localization)
        SymLogNorm.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SymLogNorm.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        SymLogNorm.__call__.__dict__.__setitem__('stypy_function_name', 'SymLogNorm.__call__')
        SymLogNorm.__call__.__dict__.__setitem__('stypy_param_names_list', ['value', 'clip'])
        SymLogNorm.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        SymLogNorm.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SymLogNorm.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        SymLogNorm.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        SymLogNorm.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SymLogNorm.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SymLogNorm.__call__', ['value', 'clip'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['value', 'clip'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1085)
        # Getting the type of 'clip' (line 1085)
        clip_36909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 11), 'clip')
        # Getting the type of 'None' (line 1085)
        None_36910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 19), 'None')
        
        (may_be_36911, more_types_in_union_36912) = may_be_none(clip_36909, None_36910)

        if may_be_36911:

            if more_types_in_union_36912:
                # Runtime conditional SSA (line 1085)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1086):
            
            # Assigning a Attribute to a Name (line 1086):
            
            # Assigning a Attribute to a Name (line 1086):
            # Getting the type of 'self' (line 1086)
            self_36913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 19), 'self')
            # Obtaining the member 'clip' of a type (line 1086)
            clip_36914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 19), self_36913, 'clip')
            # Assigning a type to the variable 'clip' (line 1086)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 12), 'clip', clip_36914)

            if more_types_in_union_36912:
                # SSA join for if statement (line 1085)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 1088):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to process_value(...): (line 1088)
        # Processing the call arguments (line 1088)
        # Getting the type of 'value' (line 1088)
        value_36917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 47), 'value', False)
        # Processing the call keyword arguments (line 1088)
        kwargs_36918 = {}
        # Getting the type of 'self' (line 1088)
        self_36915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 28), 'self', False)
        # Obtaining the member 'process_value' of a type (line 1088)
        process_value_36916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 28), self_36915, 'process_value')
        # Calling process_value(args, kwargs) (line 1088)
        process_value_call_result_36919 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 28), process_value_36916, *[value_36917], **kwargs_36918)
        
        # Assigning a type to the variable 'call_assignment_34240' (line 1088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 8), 'call_assignment_34240', process_value_call_result_36919)
        
        # Assigning a Call to a Name (line 1088):
        
        # Assigning a Call to a Name (line 1088):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_36922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 8), 'int')
        # Processing the call keyword arguments
        kwargs_36923 = {}
        # Getting the type of 'call_assignment_34240' (line 1088)
        call_assignment_34240_36920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 8), 'call_assignment_34240', False)
        # Obtaining the member '__getitem__' of a type (line 1088)
        getitem___36921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 8), call_assignment_34240_36920, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_36924 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___36921, *[int_36922], **kwargs_36923)
        
        # Assigning a type to the variable 'call_assignment_34241' (line 1088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 8), 'call_assignment_34241', getitem___call_result_36924)
        
        # Assigning a Name to a Name (line 1088):
        
        # Assigning a Name to a Name (line 1088):
        # Getting the type of 'call_assignment_34241' (line 1088)
        call_assignment_34241_36925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 8), 'call_assignment_34241')
        # Assigning a type to the variable 'result' (line 1088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 8), 'result', call_assignment_34241_36925)
        
        # Assigning a Call to a Name (line 1088):
        
        # Assigning a Call to a Name (line 1088):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_36928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 8), 'int')
        # Processing the call keyword arguments
        kwargs_36929 = {}
        # Getting the type of 'call_assignment_34240' (line 1088)
        call_assignment_34240_36926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 8), 'call_assignment_34240', False)
        # Obtaining the member '__getitem__' of a type (line 1088)
        getitem___36927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 8), call_assignment_34240_36926, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_36930 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___36927, *[int_36928], **kwargs_36929)
        
        # Assigning a type to the variable 'call_assignment_34242' (line 1088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 8), 'call_assignment_34242', getitem___call_result_36930)
        
        # Assigning a Name to a Name (line 1088):
        
        # Assigning a Name to a Name (line 1088):
        # Getting the type of 'call_assignment_34242' (line 1088)
        call_assignment_34242_36931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 8), 'call_assignment_34242')
        # Assigning a type to the variable 'is_scalar' (line 1088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 16), 'is_scalar', call_assignment_34242_36931)
        
        # Call to autoscale_None(...): (line 1089)
        # Processing the call arguments (line 1089)
        # Getting the type of 'result' (line 1089)
        result_36934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 28), 'result', False)
        # Processing the call keyword arguments (line 1089)
        kwargs_36935 = {}
        # Getting the type of 'self' (line 1089)
        self_36932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'self', False)
        # Obtaining the member 'autoscale_None' of a type (line 1089)
        autoscale_None_36933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1089, 8), self_36932, 'autoscale_None')
        # Calling autoscale_None(args, kwargs) (line 1089)
        autoscale_None_call_result_36936 = invoke(stypy.reporting.localization.Localization(__file__, 1089, 8), autoscale_None_36933, *[result_36934], **kwargs_36935)
        
        
        # Assigning a Tuple to a Tuple (line 1090):
        
        # Assigning a Attribute to a Name (line 1090):
        
        # Assigning a Attribute to a Name (line 1090):
        # Getting the type of 'self' (line 1090)
        self_36937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 21), 'self')
        # Obtaining the member 'vmin' of a type (line 1090)
        vmin_36938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 21), self_36937, 'vmin')
        # Assigning a type to the variable 'tuple_assignment_34243' (line 1090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'tuple_assignment_34243', vmin_36938)
        
        # Assigning a Attribute to a Name (line 1090):
        
        # Assigning a Attribute to a Name (line 1090):
        # Getting the type of 'self' (line 1090)
        self_36939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 32), 'self')
        # Obtaining the member 'vmax' of a type (line 1090)
        vmax_36940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 32), self_36939, 'vmax')
        # Assigning a type to the variable 'tuple_assignment_34244' (line 1090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'tuple_assignment_34244', vmax_36940)
        
        # Assigning a Name to a Name (line 1090):
        
        # Assigning a Name to a Name (line 1090):
        # Getting the type of 'tuple_assignment_34243' (line 1090)
        tuple_assignment_34243_36941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'tuple_assignment_34243')
        # Assigning a type to the variable 'vmin' (line 1090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'vmin', tuple_assignment_34243_36941)
        
        # Assigning a Name to a Name (line 1090):
        
        # Assigning a Name to a Name (line 1090):
        # Getting the type of 'tuple_assignment_34244' (line 1090)
        tuple_assignment_34244_36942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'tuple_assignment_34244')
        # Assigning a type to the variable 'vmax' (line 1090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 14), 'vmax', tuple_assignment_34244_36942)
        
        
        # Getting the type of 'vmin' (line 1092)
        vmin_36943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 11), 'vmin')
        # Getting the type of 'vmax' (line 1092)
        vmax_36944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 18), 'vmax')
        # Applying the binary operator '>' (line 1092)
        result_gt_36945 = python_operator(stypy.reporting.localization.Localization(__file__, 1092, 11), '>', vmin_36943, vmax_36944)
        
        # Testing the type of an if condition (line 1092)
        if_condition_36946 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1092, 8), result_gt_36945)
        # Assigning a type to the variable 'if_condition_36946' (line 1092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 8), 'if_condition_36946', if_condition_36946)
        # SSA begins for if statement (line 1092)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1093)
        # Processing the call arguments (line 1093)
        unicode_36948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1093, 29), 'unicode', u'minvalue must be less than or equal to maxvalue')
        # Processing the call keyword arguments (line 1093)
        kwargs_36949 = {}
        # Getting the type of 'ValueError' (line 1093)
        ValueError_36947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1093)
        ValueError_call_result_36950 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 18), ValueError_36947, *[unicode_36948], **kwargs_36949)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1093, 12), ValueError_call_result_36950, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 1092)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'vmin' (line 1094)
        vmin_36951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 13), 'vmin')
        # Getting the type of 'vmax' (line 1094)
        vmax_36952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 21), 'vmax')
        # Applying the binary operator '==' (line 1094)
        result_eq_36953 = python_operator(stypy.reporting.localization.Localization(__file__, 1094, 13), '==', vmin_36951, vmax_36952)
        
        # Testing the type of an if condition (line 1094)
        if_condition_36954 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1094, 13), result_eq_36953)
        # Assigning a type to the variable 'if_condition_36954' (line 1094)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1094, 13), 'if_condition_36954', if_condition_36954)
        # SSA begins for if statement (line 1094)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to fill(...): (line 1095)
        # Processing the call arguments (line 1095)
        int_36957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 24), 'int')
        # Processing the call keyword arguments (line 1095)
        kwargs_36958 = {}
        # Getting the type of 'result' (line 1095)
        result_36955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 12), 'result', False)
        # Obtaining the member 'fill' of a type (line 1095)
        fill_36956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 12), result_36955, 'fill')
        # Calling fill(args, kwargs) (line 1095)
        fill_call_result_36959 = invoke(stypy.reporting.localization.Localization(__file__, 1095, 12), fill_36956, *[int_36957], **kwargs_36958)
        
        # SSA branch for the else part of an if statement (line 1094)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'clip' (line 1097)
        clip_36960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 15), 'clip')
        # Testing the type of an if condition (line 1097)
        if_condition_36961 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1097, 12), clip_36960)
        # Assigning a type to the variable 'if_condition_36961' (line 1097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1097, 12), 'if_condition_36961', if_condition_36961)
        # SSA begins for if statement (line 1097)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1098):
        
        # Assigning a Call to a Name (line 1098):
        
        # Assigning a Call to a Name (line 1098):
        
        # Call to getmask(...): (line 1098)
        # Processing the call arguments (line 1098)
        # Getting the type of 'result' (line 1098)
        result_36965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 37), 'result', False)
        # Processing the call keyword arguments (line 1098)
        kwargs_36966 = {}
        # Getting the type of 'np' (line 1098)
        np_36962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 23), 'np', False)
        # Obtaining the member 'ma' of a type (line 1098)
        ma_36963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1098, 23), np_36962, 'ma')
        # Obtaining the member 'getmask' of a type (line 1098)
        getmask_36964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1098, 23), ma_36963, 'getmask')
        # Calling getmask(args, kwargs) (line 1098)
        getmask_call_result_36967 = invoke(stypy.reporting.localization.Localization(__file__, 1098, 23), getmask_36964, *[result_36965], **kwargs_36966)
        
        # Assigning a type to the variable 'mask' (line 1098)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1098, 16), 'mask', getmask_call_result_36967)
        
        # Assigning a Call to a Name (line 1099):
        
        # Assigning a Call to a Name (line 1099):
        
        # Assigning a Call to a Name (line 1099):
        
        # Call to array(...): (line 1099)
        # Processing the call arguments (line 1099)
        
        # Call to clip(...): (line 1099)
        # Processing the call arguments (line 1099)
        
        # Call to filled(...): (line 1099)
        # Processing the call arguments (line 1099)
        # Getting the type of 'vmax' (line 1099)
        vmax_36975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 59), 'vmax', False)
        # Processing the call keyword arguments (line 1099)
        kwargs_36976 = {}
        # Getting the type of 'result' (line 1099)
        result_36973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 45), 'result', False)
        # Obtaining the member 'filled' of a type (line 1099)
        filled_36974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 45), result_36973, 'filled')
        # Calling filled(args, kwargs) (line 1099)
        filled_call_result_36977 = invoke(stypy.reporting.localization.Localization(__file__, 1099, 45), filled_36974, *[vmax_36975], **kwargs_36976)
        
        # Getting the type of 'vmin' (line 1099)
        vmin_36978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 66), 'vmin', False)
        # Getting the type of 'vmax' (line 1099)
        vmax_36979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 72), 'vmax', False)
        # Processing the call keyword arguments (line 1099)
        kwargs_36980 = {}
        # Getting the type of 'np' (line 1099)
        np_36971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 37), 'np', False)
        # Obtaining the member 'clip' of a type (line 1099)
        clip_36972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 37), np_36971, 'clip')
        # Calling clip(args, kwargs) (line 1099)
        clip_call_result_36981 = invoke(stypy.reporting.localization.Localization(__file__, 1099, 37), clip_36972, *[filled_call_result_36977, vmin_36978, vmax_36979], **kwargs_36980)
        
        # Processing the call keyword arguments (line 1099)
        # Getting the type of 'mask' (line 1100)
        mask_36982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 42), 'mask', False)
        keyword_36983 = mask_36982
        kwargs_36984 = {'mask': keyword_36983}
        # Getting the type of 'np' (line 1099)
        np_36968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 25), 'np', False)
        # Obtaining the member 'ma' of a type (line 1099)
        ma_36969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 25), np_36968, 'ma')
        # Obtaining the member 'array' of a type (line 1099)
        array_36970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 25), ma_36969, 'array')
        # Calling array(args, kwargs) (line 1099)
        array_call_result_36985 = invoke(stypy.reporting.localization.Localization(__file__, 1099, 25), array_36970, *[clip_call_result_36981], **kwargs_36984)
        
        # Assigning a type to the variable 'result' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 16), 'result', array_call_result_36985)
        # SSA join for if statement (line 1097)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1102):
        
        # Assigning a Call to a Name (line 1102):
        
        # Assigning a Call to a Name (line 1102):
        
        # Call to _transform(...): (line 1102)
        # Processing the call arguments (line 1102)
        # Getting the type of 'result' (line 1102)
        result_36988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 37), 'result', False)
        # Obtaining the member 'data' of a type (line 1102)
        data_36989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 37), result_36988, 'data')
        # Processing the call keyword arguments (line 1102)
        kwargs_36990 = {}
        # Getting the type of 'self' (line 1102)
        self_36986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 21), 'self', False)
        # Obtaining the member '_transform' of a type (line 1102)
        _transform_36987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 21), self_36986, '_transform')
        # Calling _transform(args, kwargs) (line 1102)
        _transform_call_result_36991 = invoke(stypy.reporting.localization.Localization(__file__, 1102, 21), _transform_36987, *[data_36989], **kwargs_36990)
        
        # Assigning a type to the variable 'resdat' (line 1102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1102, 12), 'resdat', _transform_call_result_36991)
        
        # Getting the type of 'resdat' (line 1103)
        resdat_36992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 12), 'resdat')
        # Getting the type of 'self' (line 1103)
        self_36993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 22), 'self')
        # Obtaining the member '_lower' of a type (line 1103)
        _lower_36994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 22), self_36993, '_lower')
        # Applying the binary operator '-=' (line 1103)
        result_isub_36995 = python_operator(stypy.reporting.localization.Localization(__file__, 1103, 12), '-=', resdat_36992, _lower_36994)
        # Assigning a type to the variable 'resdat' (line 1103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1103, 12), 'resdat', result_isub_36995)
        
        
        # Getting the type of 'resdat' (line 1104)
        resdat_36996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 12), 'resdat')
        # Getting the type of 'self' (line 1104)
        self_36997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 23), 'self')
        # Obtaining the member '_upper' of a type (line 1104)
        _upper_36998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 23), self_36997, '_upper')
        # Getting the type of 'self' (line 1104)
        self_36999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 37), 'self')
        # Obtaining the member '_lower' of a type (line 1104)
        _lower_37000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 37), self_36999, '_lower')
        # Applying the binary operator '-' (line 1104)
        result_sub_37001 = python_operator(stypy.reporting.localization.Localization(__file__, 1104, 23), '-', _upper_36998, _lower_37000)
        
        # Applying the binary operator 'div=' (line 1104)
        result_div_37002 = python_operator(stypy.reporting.localization.Localization(__file__, 1104, 12), 'div=', resdat_36996, result_sub_37001)
        # Assigning a type to the variable 'resdat' (line 1104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1104, 12), 'resdat', result_div_37002)
        
        # SSA join for if statement (line 1094)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1092)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'is_scalar' (line 1106)
        is_scalar_37003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 11), 'is_scalar')
        # Testing the type of an if condition (line 1106)
        if_condition_37004 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1106, 8), is_scalar_37003)
        # Assigning a type to the variable 'if_condition_37004' (line 1106)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1106, 8), 'if_condition_37004', if_condition_37004)
        # SSA begins for if statement (line 1106)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1107):
        
        # Assigning a Subscript to a Name (line 1107):
        
        # Assigning a Subscript to a Name (line 1107):
        
        # Obtaining the type of the subscript
        int_37005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 28), 'int')
        # Getting the type of 'result' (line 1107)
        result_37006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 21), 'result')
        # Obtaining the member '__getitem__' of a type (line 1107)
        getitem___37007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 21), result_37006, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1107)
        subscript_call_result_37008 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 21), getitem___37007, int_37005)
        
        # Assigning a type to the variable 'result' (line 1107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 12), 'result', subscript_call_result_37008)
        # SSA join for if statement (line 1106)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 1108)
        result_37009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 1108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1108, 8), 'stypy_return_type', result_37009)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1084)
        stypy_return_type_37010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37010)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_37010


    @norecursion
    def _transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_transform'
        module_type_store = module_type_store.open_function_context('_transform', 1110, 4, False)
        # Assigning a type to the variable 'self' (line 1111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SymLogNorm._transform.__dict__.__setitem__('stypy_localization', localization)
        SymLogNorm._transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SymLogNorm._transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        SymLogNorm._transform.__dict__.__setitem__('stypy_function_name', 'SymLogNorm._transform')
        SymLogNorm._transform.__dict__.__setitem__('stypy_param_names_list', ['a'])
        SymLogNorm._transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        SymLogNorm._transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SymLogNorm._transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        SymLogNorm._transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        SymLogNorm._transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SymLogNorm._transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SymLogNorm._transform', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_transform', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_transform(...)' code ##################

        unicode_37011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, (-1)), 'unicode', u'\n        Inplace transformation.\n        ')
        
        # Assigning a Compare to a Name (line 1114):
        
        # Assigning a Compare to a Name (line 1114):
        
        # Assigning a Compare to a Name (line 1114):
        
        
        # Call to abs(...): (line 1114)
        # Processing the call arguments (line 1114)
        # Getting the type of 'a' (line 1114)
        a_37014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 24), 'a', False)
        # Processing the call keyword arguments (line 1114)
        kwargs_37015 = {}
        # Getting the type of 'np' (line 1114)
        np_37012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 17), 'np', False)
        # Obtaining the member 'abs' of a type (line 1114)
        abs_37013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 17), np_37012, 'abs')
        # Calling abs(args, kwargs) (line 1114)
        abs_call_result_37016 = invoke(stypy.reporting.localization.Localization(__file__, 1114, 17), abs_37013, *[a_37014], **kwargs_37015)
        
        # Getting the type of 'self' (line 1114)
        self_37017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 29), 'self')
        # Obtaining the member 'linthresh' of a type (line 1114)
        linthresh_37018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 29), self_37017, 'linthresh')
        # Applying the binary operator '>' (line 1114)
        result_gt_37019 = python_operator(stypy.reporting.localization.Localization(__file__, 1114, 17), '>', abs_call_result_37016, linthresh_37018)
        
        # Assigning a type to the variable 'masked' (line 1114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'masked', result_gt_37019)
        
        # Assigning a Call to a Name (line 1115):
        
        # Assigning a Call to a Name (line 1115):
        
        # Assigning a Call to a Name (line 1115):
        
        # Call to sign(...): (line 1115)
        # Processing the call arguments (line 1115)
        
        # Obtaining the type of the subscript
        # Getting the type of 'masked' (line 1115)
        masked_37022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 25), 'masked', False)
        # Getting the type of 'a' (line 1115)
        a_37023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 23), 'a', False)
        # Obtaining the member '__getitem__' of a type (line 1115)
        getitem___37024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 23), a_37023, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1115)
        subscript_call_result_37025 = invoke(stypy.reporting.localization.Localization(__file__, 1115, 23), getitem___37024, masked_37022)
        
        # Processing the call keyword arguments (line 1115)
        kwargs_37026 = {}
        # Getting the type of 'np' (line 1115)
        np_37020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 15), 'np', False)
        # Obtaining the member 'sign' of a type (line 1115)
        sign_37021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 15), np_37020, 'sign')
        # Calling sign(args, kwargs) (line 1115)
        sign_call_result_37027 = invoke(stypy.reporting.localization.Localization(__file__, 1115, 15), sign_37021, *[subscript_call_result_37025], **kwargs_37026)
        
        # Assigning a type to the variable 'sign' (line 1115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'sign', sign_call_result_37027)
        
        # Assigning a BinOp to a Name (line 1116):
        
        # Assigning a BinOp to a Name (line 1116):
        
        # Assigning a BinOp to a Name (line 1116):
        # Getting the type of 'self' (line 1116)
        self_37028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 15), 'self')
        # Obtaining the member '_linscale_adj' of a type (line 1116)
        _linscale_adj_37029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 15), self_37028, '_linscale_adj')
        
        # Call to log(...): (line 1116)
        # Processing the call arguments (line 1116)
        
        # Call to abs(...): (line 1116)
        # Processing the call arguments (line 1116)
        
        # Obtaining the type of the subscript
        # Getting the type of 'masked' (line 1116)
        masked_37034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 52), 'masked', False)
        # Getting the type of 'a' (line 1116)
        a_37035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 50), 'a', False)
        # Obtaining the member '__getitem__' of a type (line 1116)
        getitem___37036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 50), a_37035, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1116)
        subscript_call_result_37037 = invoke(stypy.reporting.localization.Localization(__file__, 1116, 50), getitem___37036, masked_37034)
        
        # Processing the call keyword arguments (line 1116)
        kwargs_37038 = {}
        # Getting the type of 'np' (line 1116)
        np_37032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 43), 'np', False)
        # Obtaining the member 'abs' of a type (line 1116)
        abs_37033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 43), np_37032, 'abs')
        # Calling abs(args, kwargs) (line 1116)
        abs_call_result_37039 = invoke(stypy.reporting.localization.Localization(__file__, 1116, 43), abs_37033, *[subscript_call_result_37037], **kwargs_37038)
        
        # Getting the type of 'self' (line 1116)
        self_37040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 63), 'self', False)
        # Obtaining the member 'linthresh' of a type (line 1116)
        linthresh_37041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 63), self_37040, 'linthresh')
        # Applying the binary operator 'div' (line 1116)
        result_div_37042 = python_operator(stypy.reporting.localization.Localization(__file__, 1116, 43), 'div', abs_call_result_37039, linthresh_37041)
        
        # Processing the call keyword arguments (line 1116)
        kwargs_37043 = {}
        # Getting the type of 'np' (line 1116)
        np_37030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 36), 'np', False)
        # Obtaining the member 'log' of a type (line 1116)
        log_37031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 36), np_37030, 'log')
        # Calling log(args, kwargs) (line 1116)
        log_call_result_37044 = invoke(stypy.reporting.localization.Localization(__file__, 1116, 36), log_37031, *[result_div_37042], **kwargs_37043)
        
        # Applying the binary operator '+' (line 1116)
        result_add_37045 = python_operator(stypy.reporting.localization.Localization(__file__, 1116, 15), '+', _linscale_adj_37029, log_call_result_37044)
        
        # Assigning a type to the variable 'log' (line 1116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1116, 8), 'log', result_add_37045)
        
        # Getting the type of 'log' (line 1117)
        log_37046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 8), 'log')
        # Getting the type of 'sign' (line 1117)
        sign_37047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 15), 'sign')
        # Getting the type of 'self' (line 1117)
        self_37048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 22), 'self')
        # Obtaining the member 'linthresh' of a type (line 1117)
        linthresh_37049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 22), self_37048, 'linthresh')
        # Applying the binary operator '*' (line 1117)
        result_mul_37050 = python_operator(stypy.reporting.localization.Localization(__file__, 1117, 15), '*', sign_37047, linthresh_37049)
        
        # Applying the binary operator '*=' (line 1117)
        result_imul_37051 = python_operator(stypy.reporting.localization.Localization(__file__, 1117, 8), '*=', log_37046, result_mul_37050)
        # Assigning a type to the variable 'log' (line 1117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1117, 8), 'log', result_imul_37051)
        
        
        # Assigning a Name to a Subscript (line 1118):
        
        # Assigning a Name to a Subscript (line 1118):
        
        # Assigning a Name to a Subscript (line 1118):
        # Getting the type of 'log' (line 1118)
        log_37052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 20), 'log')
        # Getting the type of 'a' (line 1118)
        a_37053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 8), 'a')
        # Getting the type of 'masked' (line 1118)
        masked_37054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 10), 'masked')
        # Storing an element on a container (line 1118)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1118, 8), a_37053, (masked_37054, log_37052))
        
        # Getting the type of 'a' (line 1119)
        a_37055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'a')
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'masked' (line 1119)
        masked_37056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 11), 'masked')
        # Applying the '~' unary operator (line 1119)
        result_inv_37057 = python_operator(stypy.reporting.localization.Localization(__file__, 1119, 10), '~', masked_37056)
        
        # Getting the type of 'a' (line 1119)
        a_37058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'a')
        # Obtaining the member '__getitem__' of a type (line 1119)
        getitem___37059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 8), a_37058, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1119)
        subscript_call_result_37060 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 8), getitem___37059, result_inv_37057)
        
        # Getting the type of 'self' (line 1119)
        self_37061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 22), 'self')
        # Obtaining the member '_linscale_adj' of a type (line 1119)
        _linscale_adj_37062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 22), self_37061, '_linscale_adj')
        # Applying the binary operator '*=' (line 1119)
        result_imul_37063 = python_operator(stypy.reporting.localization.Localization(__file__, 1119, 8), '*=', subscript_call_result_37060, _linscale_adj_37062)
        # Getting the type of 'a' (line 1119)
        a_37064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'a')
        
        # Getting the type of 'masked' (line 1119)
        masked_37065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 11), 'masked')
        # Applying the '~' unary operator (line 1119)
        result_inv_37066 = python_operator(stypy.reporting.localization.Localization(__file__, 1119, 10), '~', masked_37065)
        
        # Storing an element on a container (line 1119)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1119, 8), a_37064, (result_inv_37066, result_imul_37063))
        
        # Getting the type of 'a' (line 1120)
        a_37067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 15), 'a')
        # Assigning a type to the variable 'stypy_return_type' (line 1120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1120, 8), 'stypy_return_type', a_37067)
        
        # ################# End of '_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 1110)
        stypy_return_type_37068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37068)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_transform'
        return stypy_return_type_37068


    @norecursion
    def _inv_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_inv_transform'
        module_type_store = module_type_store.open_function_context('_inv_transform', 1122, 4, False)
        # Assigning a type to the variable 'self' (line 1123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SymLogNorm._inv_transform.__dict__.__setitem__('stypy_localization', localization)
        SymLogNorm._inv_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SymLogNorm._inv_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        SymLogNorm._inv_transform.__dict__.__setitem__('stypy_function_name', 'SymLogNorm._inv_transform')
        SymLogNorm._inv_transform.__dict__.__setitem__('stypy_param_names_list', ['a'])
        SymLogNorm._inv_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        SymLogNorm._inv_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SymLogNorm._inv_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        SymLogNorm._inv_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        SymLogNorm._inv_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SymLogNorm._inv_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SymLogNorm._inv_transform', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_inv_transform', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_inv_transform(...)' code ##################

        unicode_37069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1125, (-1)), 'unicode', u'\n        Inverse inplace Transformation.\n        ')
        
        # Assigning a Compare to a Name (line 1126):
        
        # Assigning a Compare to a Name (line 1126):
        
        # Assigning a Compare to a Name (line 1126):
        
        
        # Call to abs(...): (line 1126)
        # Processing the call arguments (line 1126)
        # Getting the type of 'a' (line 1126)
        a_37072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 24), 'a', False)
        # Processing the call keyword arguments (line 1126)
        kwargs_37073 = {}
        # Getting the type of 'np' (line 1126)
        np_37070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 17), 'np', False)
        # Obtaining the member 'abs' of a type (line 1126)
        abs_37071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 17), np_37070, 'abs')
        # Calling abs(args, kwargs) (line 1126)
        abs_call_result_37074 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 17), abs_37071, *[a_37072], **kwargs_37073)
        
        # Getting the type of 'self' (line 1126)
        self_37075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 30), 'self')
        # Obtaining the member 'linthresh' of a type (line 1126)
        linthresh_37076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 30), self_37075, 'linthresh')
        # Getting the type of 'self' (line 1126)
        self_37077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 47), 'self')
        # Obtaining the member '_linscale_adj' of a type (line 1126)
        _linscale_adj_37078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 47), self_37077, '_linscale_adj')
        # Applying the binary operator '*' (line 1126)
        result_mul_37079 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 30), '*', linthresh_37076, _linscale_adj_37078)
        
        # Applying the binary operator '>' (line 1126)
        result_gt_37080 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 17), '>', abs_call_result_37074, result_mul_37079)
        
        # Assigning a type to the variable 'masked' (line 1126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 8), 'masked', result_gt_37080)
        
        # Assigning a Call to a Name (line 1127):
        
        # Assigning a Call to a Name (line 1127):
        
        # Assigning a Call to a Name (line 1127):
        
        # Call to sign(...): (line 1127)
        # Processing the call arguments (line 1127)
        
        # Obtaining the type of the subscript
        # Getting the type of 'masked' (line 1127)
        masked_37083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 25), 'masked', False)
        # Getting the type of 'a' (line 1127)
        a_37084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 23), 'a', False)
        # Obtaining the member '__getitem__' of a type (line 1127)
        getitem___37085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1127, 23), a_37084, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1127)
        subscript_call_result_37086 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 23), getitem___37085, masked_37083)
        
        # Processing the call keyword arguments (line 1127)
        kwargs_37087 = {}
        # Getting the type of 'np' (line 1127)
        np_37081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 15), 'np', False)
        # Obtaining the member 'sign' of a type (line 1127)
        sign_37082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1127, 15), np_37081, 'sign')
        # Calling sign(args, kwargs) (line 1127)
        sign_call_result_37088 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 15), sign_37082, *[subscript_call_result_37086], **kwargs_37087)
        
        # Assigning a type to the variable 'sign' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 8), 'sign', sign_call_result_37088)
        
        # Assigning a Call to a Name (line 1128):
        
        # Assigning a Call to a Name (line 1128):
        
        # Assigning a Call to a Name (line 1128):
        
        # Call to exp(...): (line 1128)
        # Processing the call arguments (line 1128)
        # Getting the type of 'sign' (line 1128)
        sign_37091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 21), 'sign', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'masked' (line 1128)
        masked_37092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 30), 'masked', False)
        # Getting the type of 'a' (line 1128)
        a_37093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 28), 'a', False)
        # Obtaining the member '__getitem__' of a type (line 1128)
        getitem___37094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 28), a_37093, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1128)
        subscript_call_result_37095 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 28), getitem___37094, masked_37092)
        
        # Applying the binary operator '*' (line 1128)
        result_mul_37096 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 21), '*', sign_37091, subscript_call_result_37095)
        
        # Getting the type of 'self' (line 1128)
        self_37097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 40), 'self', False)
        # Obtaining the member 'linthresh' of a type (line 1128)
        linthresh_37098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 40), self_37097, 'linthresh')
        # Applying the binary operator 'div' (line 1128)
        result_div_37099 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 38), 'div', result_mul_37096, linthresh_37098)
        
        # Getting the type of 'self' (line 1128)
        self_37100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 57), 'self', False)
        # Obtaining the member '_linscale_adj' of a type (line 1128)
        _linscale_adj_37101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 57), self_37100, '_linscale_adj')
        # Applying the binary operator '-' (line 1128)
        result_sub_37102 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 21), '-', result_div_37099, _linscale_adj_37101)
        
        # Processing the call keyword arguments (line 1128)
        kwargs_37103 = {}
        # Getting the type of 'np' (line 1128)
        np_37089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 14), 'np', False)
        # Obtaining the member 'exp' of a type (line 1128)
        exp_37090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 14), np_37089, 'exp')
        # Calling exp(args, kwargs) (line 1128)
        exp_call_result_37104 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 14), exp_37090, *[result_sub_37102], **kwargs_37103)
        
        # Assigning a type to the variable 'exp' (line 1128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 8), 'exp', exp_call_result_37104)
        
        # Getting the type of 'exp' (line 1129)
        exp_37105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'exp')
        # Getting the type of 'sign' (line 1129)
        sign_37106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 15), 'sign')
        # Getting the type of 'self' (line 1129)
        self_37107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 22), 'self')
        # Obtaining the member 'linthresh' of a type (line 1129)
        linthresh_37108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 22), self_37107, 'linthresh')
        # Applying the binary operator '*' (line 1129)
        result_mul_37109 = python_operator(stypy.reporting.localization.Localization(__file__, 1129, 15), '*', sign_37106, linthresh_37108)
        
        # Applying the binary operator '*=' (line 1129)
        result_imul_37110 = python_operator(stypy.reporting.localization.Localization(__file__, 1129, 8), '*=', exp_37105, result_mul_37109)
        # Assigning a type to the variable 'exp' (line 1129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'exp', result_imul_37110)
        
        
        # Assigning a Name to a Subscript (line 1130):
        
        # Assigning a Name to a Subscript (line 1130):
        
        # Assigning a Name to a Subscript (line 1130):
        # Getting the type of 'exp' (line 1130)
        exp_37111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 20), 'exp')
        # Getting the type of 'a' (line 1130)
        a_37112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 8), 'a')
        # Getting the type of 'masked' (line 1130)
        masked_37113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 10), 'masked')
        # Storing an element on a container (line 1130)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1130, 8), a_37112, (masked_37113, exp_37111))
        
        # Getting the type of 'a' (line 1131)
        a_37114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 8), 'a')
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'masked' (line 1131)
        masked_37115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 11), 'masked')
        # Applying the '~' unary operator (line 1131)
        result_inv_37116 = python_operator(stypy.reporting.localization.Localization(__file__, 1131, 10), '~', masked_37115)
        
        # Getting the type of 'a' (line 1131)
        a_37117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 8), 'a')
        # Obtaining the member '__getitem__' of a type (line 1131)
        getitem___37118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 8), a_37117, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1131)
        subscript_call_result_37119 = invoke(stypy.reporting.localization.Localization(__file__, 1131, 8), getitem___37118, result_inv_37116)
        
        # Getting the type of 'self' (line 1131)
        self_37120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 22), 'self')
        # Obtaining the member '_linscale_adj' of a type (line 1131)
        _linscale_adj_37121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 22), self_37120, '_linscale_adj')
        # Applying the binary operator 'div=' (line 1131)
        result_div_37122 = python_operator(stypy.reporting.localization.Localization(__file__, 1131, 8), 'div=', subscript_call_result_37119, _linscale_adj_37121)
        # Getting the type of 'a' (line 1131)
        a_37123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 8), 'a')
        
        # Getting the type of 'masked' (line 1131)
        masked_37124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 11), 'masked')
        # Applying the '~' unary operator (line 1131)
        result_inv_37125 = python_operator(stypy.reporting.localization.Localization(__file__, 1131, 10), '~', masked_37124)
        
        # Storing an element on a container (line 1131)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1131, 8), a_37123, (result_inv_37125, result_div_37122))
        
        # Getting the type of 'a' (line 1132)
        a_37126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 15), 'a')
        # Assigning a type to the variable 'stypy_return_type' (line 1132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'stypy_return_type', a_37126)
        
        # ################# End of '_inv_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_inv_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 1122)
        stypy_return_type_37127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37127)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_inv_transform'
        return stypy_return_type_37127


    @norecursion
    def _transform_vmin_vmax(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_transform_vmin_vmax'
        module_type_store = module_type_store.open_function_context('_transform_vmin_vmax', 1134, 4, False)
        # Assigning a type to the variable 'self' (line 1135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SymLogNorm._transform_vmin_vmax.__dict__.__setitem__('stypy_localization', localization)
        SymLogNorm._transform_vmin_vmax.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SymLogNorm._transform_vmin_vmax.__dict__.__setitem__('stypy_type_store', module_type_store)
        SymLogNorm._transform_vmin_vmax.__dict__.__setitem__('stypy_function_name', 'SymLogNorm._transform_vmin_vmax')
        SymLogNorm._transform_vmin_vmax.__dict__.__setitem__('stypy_param_names_list', [])
        SymLogNorm._transform_vmin_vmax.__dict__.__setitem__('stypy_varargs_param_name', None)
        SymLogNorm._transform_vmin_vmax.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SymLogNorm._transform_vmin_vmax.__dict__.__setitem__('stypy_call_defaults', defaults)
        SymLogNorm._transform_vmin_vmax.__dict__.__setitem__('stypy_call_varargs', varargs)
        SymLogNorm._transform_vmin_vmax.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SymLogNorm._transform_vmin_vmax.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SymLogNorm._transform_vmin_vmax', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_transform_vmin_vmax', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_transform_vmin_vmax(...)' code ##################

        unicode_37128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1137, (-1)), 'unicode', u'\n        Calculates vmin and vmax in the transformed system.\n        ')
        
        # Assigning a Tuple to a Tuple (line 1138):
        
        # Assigning a Attribute to a Name (line 1138):
        
        # Assigning a Attribute to a Name (line 1138):
        # Getting the type of 'self' (line 1138)
        self_37129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 21), 'self')
        # Obtaining the member 'vmin' of a type (line 1138)
        vmin_37130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 21), self_37129, 'vmin')
        # Assigning a type to the variable 'tuple_assignment_34245' (line 1138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 8), 'tuple_assignment_34245', vmin_37130)
        
        # Assigning a Attribute to a Name (line 1138):
        
        # Assigning a Attribute to a Name (line 1138):
        # Getting the type of 'self' (line 1138)
        self_37131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 32), 'self')
        # Obtaining the member 'vmax' of a type (line 1138)
        vmax_37132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 32), self_37131, 'vmax')
        # Assigning a type to the variable 'tuple_assignment_34246' (line 1138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 8), 'tuple_assignment_34246', vmax_37132)
        
        # Assigning a Name to a Name (line 1138):
        
        # Assigning a Name to a Name (line 1138):
        # Getting the type of 'tuple_assignment_34245' (line 1138)
        tuple_assignment_34245_37133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 8), 'tuple_assignment_34245')
        # Assigning a type to the variable 'vmin' (line 1138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 8), 'vmin', tuple_assignment_34245_37133)
        
        # Assigning a Name to a Name (line 1138):
        
        # Assigning a Name to a Name (line 1138):
        # Getting the type of 'tuple_assignment_34246' (line 1138)
        tuple_assignment_34246_37134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 8), 'tuple_assignment_34246')
        # Assigning a type to the variable 'vmax' (line 1138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 14), 'vmax', tuple_assignment_34246_37134)
        
        # Assigning a Call to a Name (line 1139):
        
        # Assigning a Call to a Name (line 1139):
        
        # Assigning a Call to a Name (line 1139):
        
        # Call to astype(...): (line 1139)
        # Processing the call arguments (line 1139)
        # Getting the type of 'float' (line 1139)
        float_37143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 44), 'float', False)
        # Processing the call keyword arguments (line 1139)
        kwargs_37144 = {}
        
        # Call to array(...): (line 1139)
        # Processing the call arguments (line 1139)
        
        # Obtaining an instance of the builtin type 'list' (line 1139)
        list_37137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1139, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1139)
        # Adding element type (line 1139)
        # Getting the type of 'vmax' (line 1139)
        vmax_37138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 24), 'vmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1139, 23), list_37137, vmax_37138)
        # Adding element type (line 1139)
        # Getting the type of 'vmin' (line 1139)
        vmin_37139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 30), 'vmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1139, 23), list_37137, vmin_37139)
        
        # Processing the call keyword arguments (line 1139)
        kwargs_37140 = {}
        # Getting the type of 'np' (line 1139)
        np_37135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 14), 'np', False)
        # Obtaining the member 'array' of a type (line 1139)
        array_37136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 14), np_37135, 'array')
        # Calling array(args, kwargs) (line 1139)
        array_call_result_37141 = invoke(stypy.reporting.localization.Localization(__file__, 1139, 14), array_37136, *[list_37137], **kwargs_37140)
        
        # Obtaining the member 'astype' of a type (line 1139)
        astype_37142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 14), array_call_result_37141, 'astype')
        # Calling astype(args, kwargs) (line 1139)
        astype_call_result_37145 = invoke(stypy.reporting.localization.Localization(__file__, 1139, 14), astype_37142, *[float_37143], **kwargs_37144)
        
        # Assigning a type to the variable 'arr' (line 1139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'arr', astype_call_result_37145)
        
        # Assigning a Call to a Tuple (line 1140):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to _transform(...): (line 1140)
        # Processing the call arguments (line 1140)
        # Getting the type of 'arr' (line 1140)
        arr_37148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 51), 'arr', False)
        # Processing the call keyword arguments (line 1140)
        kwargs_37149 = {}
        # Getting the type of 'self' (line 1140)
        self_37146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 35), 'self', False)
        # Obtaining the member '_transform' of a type (line 1140)
        _transform_37147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 35), self_37146, '_transform')
        # Calling _transform(args, kwargs) (line 1140)
        _transform_call_result_37150 = invoke(stypy.reporting.localization.Localization(__file__, 1140, 35), _transform_37147, *[arr_37148], **kwargs_37149)
        
        # Assigning a type to the variable 'call_assignment_34247' (line 1140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'call_assignment_34247', _transform_call_result_37150)
        
        # Assigning a Call to a Name (line 1140):
        
        # Assigning a Call to a Name (line 1140):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_37153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1140, 8), 'int')
        # Processing the call keyword arguments
        kwargs_37154 = {}
        # Getting the type of 'call_assignment_34247' (line 1140)
        call_assignment_34247_37151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'call_assignment_34247', False)
        # Obtaining the member '__getitem__' of a type (line 1140)
        getitem___37152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 8), call_assignment_34247_37151, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_37155 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___37152, *[int_37153], **kwargs_37154)
        
        # Assigning a type to the variable 'call_assignment_34248' (line 1140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'call_assignment_34248', getitem___call_result_37155)
        
        # Assigning a Name to a Attribute (line 1140):
        
        # Assigning a Name to a Attribute (line 1140):
        # Getting the type of 'call_assignment_34248' (line 1140)
        call_assignment_34248_37156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'call_assignment_34248')
        # Getting the type of 'self' (line 1140)
        self_37157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'self')
        # Setting the type of the member '_upper' of a type (line 1140)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 8), self_37157, '_upper', call_assignment_34248_37156)
        
        # Assigning a Call to a Name (line 1140):
        
        # Assigning a Call to a Name (line 1140):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_37160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1140, 8), 'int')
        # Processing the call keyword arguments
        kwargs_37161 = {}
        # Getting the type of 'call_assignment_34247' (line 1140)
        call_assignment_34247_37158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'call_assignment_34247', False)
        # Obtaining the member '__getitem__' of a type (line 1140)
        getitem___37159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 8), call_assignment_34247_37158, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_37162 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___37159, *[int_37160], **kwargs_37161)
        
        # Assigning a type to the variable 'call_assignment_34249' (line 1140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'call_assignment_34249', getitem___call_result_37162)
        
        # Assigning a Name to a Attribute (line 1140):
        
        # Assigning a Name to a Attribute (line 1140):
        # Getting the type of 'call_assignment_34249' (line 1140)
        call_assignment_34249_37163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'call_assignment_34249')
        # Getting the type of 'self' (line 1140)
        self_37164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 21), 'self')
        # Setting the type of the member '_lower' of a type (line 1140)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 21), self_37164, '_lower', call_assignment_34249_37163)
        
        # ################# End of '_transform_vmin_vmax(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_transform_vmin_vmax' in the type store
        # Getting the type of 'stypy_return_type' (line 1134)
        stypy_return_type_37165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37165)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_transform_vmin_vmax'
        return stypy_return_type_37165


    @norecursion
    def inverse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inverse'
        module_type_store = module_type_store.open_function_context('inverse', 1142, 4, False)
        # Assigning a type to the variable 'self' (line 1143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SymLogNorm.inverse.__dict__.__setitem__('stypy_localization', localization)
        SymLogNorm.inverse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SymLogNorm.inverse.__dict__.__setitem__('stypy_type_store', module_type_store)
        SymLogNorm.inverse.__dict__.__setitem__('stypy_function_name', 'SymLogNorm.inverse')
        SymLogNorm.inverse.__dict__.__setitem__('stypy_param_names_list', ['value'])
        SymLogNorm.inverse.__dict__.__setitem__('stypy_varargs_param_name', None)
        SymLogNorm.inverse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SymLogNorm.inverse.__dict__.__setitem__('stypy_call_defaults', defaults)
        SymLogNorm.inverse.__dict__.__setitem__('stypy_call_varargs', varargs)
        SymLogNorm.inverse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SymLogNorm.inverse.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SymLogNorm.inverse', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inverse', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inverse(...)' code ##################

        
        
        
        # Call to scaled(...): (line 1143)
        # Processing the call keyword arguments (line 1143)
        kwargs_37168 = {}
        # Getting the type of 'self' (line 1143)
        self_37166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 15), 'self', False)
        # Obtaining the member 'scaled' of a type (line 1143)
        scaled_37167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 15), self_37166, 'scaled')
        # Calling scaled(args, kwargs) (line 1143)
        scaled_call_result_37169 = invoke(stypy.reporting.localization.Localization(__file__, 1143, 15), scaled_37167, *[], **kwargs_37168)
        
        # Applying the 'not' unary operator (line 1143)
        result_not__37170 = python_operator(stypy.reporting.localization.Localization(__file__, 1143, 11), 'not', scaled_call_result_37169)
        
        # Testing the type of an if condition (line 1143)
        if_condition_37171 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1143, 8), result_not__37170)
        # Assigning a type to the variable 'if_condition_37171' (line 1143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 8), 'if_condition_37171', if_condition_37171)
        # SSA begins for if statement (line 1143)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1144)
        # Processing the call arguments (line 1144)
        unicode_37173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1144, 29), 'unicode', u'Not invertible until scaled')
        # Processing the call keyword arguments (line 1144)
        kwargs_37174 = {}
        # Getting the type of 'ValueError' (line 1144)
        ValueError_37172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1144)
        ValueError_call_result_37175 = invoke(stypy.reporting.localization.Localization(__file__, 1144, 18), ValueError_37172, *[unicode_37173], **kwargs_37174)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1144, 12), ValueError_call_result_37175, 'raise parameter', BaseException)
        # SSA join for if statement (line 1143)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1145):
        
        # Assigning a Call to a Name (line 1145):
        
        # Assigning a Call to a Name (line 1145):
        
        # Call to asarray(...): (line 1145)
        # Processing the call arguments (line 1145)
        # Getting the type of 'value' (line 1145)
        value_37179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 28), 'value', False)
        # Processing the call keyword arguments (line 1145)
        kwargs_37180 = {}
        # Getting the type of 'np' (line 1145)
        np_37176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 14), 'np', False)
        # Obtaining the member 'ma' of a type (line 1145)
        ma_37177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 14), np_37176, 'ma')
        # Obtaining the member 'asarray' of a type (line 1145)
        asarray_37178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 14), ma_37177, 'asarray')
        # Calling asarray(args, kwargs) (line 1145)
        asarray_call_result_37181 = invoke(stypy.reporting.localization.Localization(__file__, 1145, 14), asarray_37178, *[value_37179], **kwargs_37180)
        
        # Assigning a type to the variable 'val' (line 1145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1145, 8), 'val', asarray_call_result_37181)
        
        # Assigning a BinOp to a Name (line 1146):
        
        # Assigning a BinOp to a Name (line 1146):
        
        # Assigning a BinOp to a Name (line 1146):
        # Getting the type of 'val' (line 1146)
        val_37182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 14), 'val')
        # Getting the type of 'self' (line 1146)
        self_37183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 21), 'self')
        # Obtaining the member '_upper' of a type (line 1146)
        _upper_37184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 21), self_37183, '_upper')
        # Getting the type of 'self' (line 1146)
        self_37185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 35), 'self')
        # Obtaining the member '_lower' of a type (line 1146)
        _lower_37186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 35), self_37185, '_lower')
        # Applying the binary operator '-' (line 1146)
        result_sub_37187 = python_operator(stypy.reporting.localization.Localization(__file__, 1146, 21), '-', _upper_37184, _lower_37186)
        
        # Applying the binary operator '*' (line 1146)
        result_mul_37188 = python_operator(stypy.reporting.localization.Localization(__file__, 1146, 14), '*', val_37182, result_sub_37187)
        
        # Getting the type of 'self' (line 1146)
        self_37189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 50), 'self')
        # Obtaining the member '_lower' of a type (line 1146)
        _lower_37190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 50), self_37189, '_lower')
        # Applying the binary operator '+' (line 1146)
        result_add_37191 = python_operator(stypy.reporting.localization.Localization(__file__, 1146, 14), '+', result_mul_37188, _lower_37190)
        
        # Assigning a type to the variable 'val' (line 1146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1146, 8), 'val', result_add_37191)
        
        # Call to _inv_transform(...): (line 1147)
        # Processing the call arguments (line 1147)
        # Getting the type of 'val' (line 1147)
        val_37194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 35), 'val', False)
        # Processing the call keyword arguments (line 1147)
        kwargs_37195 = {}
        # Getting the type of 'self' (line 1147)
        self_37192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 15), 'self', False)
        # Obtaining the member '_inv_transform' of a type (line 1147)
        _inv_transform_37193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 15), self_37192, '_inv_transform')
        # Calling _inv_transform(args, kwargs) (line 1147)
        _inv_transform_call_result_37196 = invoke(stypy.reporting.localization.Localization(__file__, 1147, 15), _inv_transform_37193, *[val_37194], **kwargs_37195)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 8), 'stypy_return_type', _inv_transform_call_result_37196)
        
        # ################# End of 'inverse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inverse' in the type store
        # Getting the type of 'stypy_return_type' (line 1142)
        stypy_return_type_37197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37197)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inverse'
        return stypy_return_type_37197


    @norecursion
    def autoscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'autoscale'
        module_type_store = module_type_store.open_function_context('autoscale', 1149, 4, False)
        # Assigning a type to the variable 'self' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SymLogNorm.autoscale.__dict__.__setitem__('stypy_localization', localization)
        SymLogNorm.autoscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SymLogNorm.autoscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        SymLogNorm.autoscale.__dict__.__setitem__('stypy_function_name', 'SymLogNorm.autoscale')
        SymLogNorm.autoscale.__dict__.__setitem__('stypy_param_names_list', ['A'])
        SymLogNorm.autoscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        SymLogNorm.autoscale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SymLogNorm.autoscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        SymLogNorm.autoscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        SymLogNorm.autoscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SymLogNorm.autoscale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SymLogNorm.autoscale', ['A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale', localization, ['A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale(...)' code ##################

        unicode_37198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1152, (-1)), 'unicode', u'\n        Set *vmin*, *vmax* to min, max of *A*.\n        ')
        
        # Assigning a Call to a Attribute (line 1153):
        
        # Assigning a Call to a Attribute (line 1153):
        
        # Assigning a Call to a Attribute (line 1153):
        
        # Call to min(...): (line 1153)
        # Processing the call arguments (line 1153)
        # Getting the type of 'A' (line 1153)
        A_37202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 30), 'A', False)
        # Processing the call keyword arguments (line 1153)
        kwargs_37203 = {}
        # Getting the type of 'np' (line 1153)
        np_37199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 20), 'np', False)
        # Obtaining the member 'ma' of a type (line 1153)
        ma_37200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 20), np_37199, 'ma')
        # Obtaining the member 'min' of a type (line 1153)
        min_37201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 20), ma_37200, 'min')
        # Calling min(args, kwargs) (line 1153)
        min_call_result_37204 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 20), min_37201, *[A_37202], **kwargs_37203)
        
        # Getting the type of 'self' (line 1153)
        self_37205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 8), 'self')
        # Setting the type of the member 'vmin' of a type (line 1153)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 8), self_37205, 'vmin', min_call_result_37204)
        
        # Assigning a Call to a Attribute (line 1154):
        
        # Assigning a Call to a Attribute (line 1154):
        
        # Assigning a Call to a Attribute (line 1154):
        
        # Call to max(...): (line 1154)
        # Processing the call arguments (line 1154)
        # Getting the type of 'A' (line 1154)
        A_37209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 30), 'A', False)
        # Processing the call keyword arguments (line 1154)
        kwargs_37210 = {}
        # Getting the type of 'np' (line 1154)
        np_37206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 20), 'np', False)
        # Obtaining the member 'ma' of a type (line 1154)
        ma_37207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1154, 20), np_37206, 'ma')
        # Obtaining the member 'max' of a type (line 1154)
        max_37208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1154, 20), ma_37207, 'max')
        # Calling max(args, kwargs) (line 1154)
        max_call_result_37211 = invoke(stypy.reporting.localization.Localization(__file__, 1154, 20), max_37208, *[A_37209], **kwargs_37210)
        
        # Getting the type of 'self' (line 1154)
        self_37212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 8), 'self')
        # Setting the type of the member 'vmax' of a type (line 1154)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1154, 8), self_37212, 'vmax', max_call_result_37211)
        
        # Call to _transform_vmin_vmax(...): (line 1155)
        # Processing the call keyword arguments (line 1155)
        kwargs_37215 = {}
        # Getting the type of 'self' (line 1155)
        self_37213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 8), 'self', False)
        # Obtaining the member '_transform_vmin_vmax' of a type (line 1155)
        _transform_vmin_vmax_37214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 8), self_37213, '_transform_vmin_vmax')
        # Calling _transform_vmin_vmax(args, kwargs) (line 1155)
        _transform_vmin_vmax_call_result_37216 = invoke(stypy.reporting.localization.Localization(__file__, 1155, 8), _transform_vmin_vmax_37214, *[], **kwargs_37215)
        
        
        # ################# End of 'autoscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale' in the type store
        # Getting the type of 'stypy_return_type' (line 1149)
        stypy_return_type_37217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37217)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale'
        return stypy_return_type_37217


    @norecursion
    def autoscale_None(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'autoscale_None'
        module_type_store = module_type_store.open_function_context('autoscale_None', 1157, 4, False)
        # Assigning a type to the variable 'self' (line 1158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1158, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SymLogNorm.autoscale_None.__dict__.__setitem__('stypy_localization', localization)
        SymLogNorm.autoscale_None.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SymLogNorm.autoscale_None.__dict__.__setitem__('stypy_type_store', module_type_store)
        SymLogNorm.autoscale_None.__dict__.__setitem__('stypy_function_name', 'SymLogNorm.autoscale_None')
        SymLogNorm.autoscale_None.__dict__.__setitem__('stypy_param_names_list', ['A'])
        SymLogNorm.autoscale_None.__dict__.__setitem__('stypy_varargs_param_name', None)
        SymLogNorm.autoscale_None.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SymLogNorm.autoscale_None.__dict__.__setitem__('stypy_call_defaults', defaults)
        SymLogNorm.autoscale_None.__dict__.__setitem__('stypy_call_varargs', varargs)
        SymLogNorm.autoscale_None.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SymLogNorm.autoscale_None.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SymLogNorm.autoscale_None', ['A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale_None', localization, ['A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale_None(...)' code ##################

        unicode_37218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1158, 8), 'unicode', u'autoscale only None-valued vmin or vmax.')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1159)
        self_37219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 11), 'self')
        # Obtaining the member 'vmin' of a type (line 1159)
        vmin_37220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1159, 11), self_37219, 'vmin')
        # Getting the type of 'None' (line 1159)
        None_37221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 28), 'None')
        # Applying the binary operator 'isnot' (line 1159)
        result_is_not_37222 = python_operator(stypy.reporting.localization.Localization(__file__, 1159, 11), 'isnot', vmin_37220, None_37221)
        
        
        # Getting the type of 'self' (line 1159)
        self_37223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 37), 'self')
        # Obtaining the member 'vmax' of a type (line 1159)
        vmax_37224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1159, 37), self_37223, 'vmax')
        # Getting the type of 'None' (line 1159)
        None_37225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 54), 'None')
        # Applying the binary operator 'isnot' (line 1159)
        result_is_not_37226 = python_operator(stypy.reporting.localization.Localization(__file__, 1159, 37), 'isnot', vmax_37224, None_37225)
        
        # Applying the binary operator 'and' (line 1159)
        result_and_keyword_37227 = python_operator(stypy.reporting.localization.Localization(__file__, 1159, 11), 'and', result_is_not_37222, result_is_not_37226)
        
        # Testing the type of an if condition (line 1159)
        if_condition_37228 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1159, 8), result_and_keyword_37227)
        # Assigning a type to the variable 'if_condition_37228' (line 1159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 8), 'if_condition_37228', if_condition_37228)
        # SSA begins for if statement (line 1159)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        pass
        # SSA join for if statement (line 1159)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1161):
        
        # Assigning a Call to a Name (line 1161):
        
        # Assigning a Call to a Name (line 1161):
        
        # Call to asanyarray(...): (line 1161)
        # Processing the call arguments (line 1161)
        # Getting the type of 'A' (line 1161)
        A_37231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 26), 'A', False)
        # Processing the call keyword arguments (line 1161)
        kwargs_37232 = {}
        # Getting the type of 'np' (line 1161)
        np_37229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 12), 'np', False)
        # Obtaining the member 'asanyarray' of a type (line 1161)
        asanyarray_37230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1161, 12), np_37229, 'asanyarray')
        # Calling asanyarray(args, kwargs) (line 1161)
        asanyarray_call_result_37233 = invoke(stypy.reporting.localization.Localization(__file__, 1161, 12), asanyarray_37230, *[A_37231], **kwargs_37232)
        
        # Assigning a type to the variable 'A' (line 1161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1161, 8), 'A', asanyarray_call_result_37233)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1162)
        self_37234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 11), 'self')
        # Obtaining the member 'vmin' of a type (line 1162)
        vmin_37235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1162, 11), self_37234, 'vmin')
        # Getting the type of 'None' (line 1162)
        None_37236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 24), 'None')
        # Applying the binary operator 'is' (line 1162)
        result_is__37237 = python_operator(stypy.reporting.localization.Localization(__file__, 1162, 11), 'is', vmin_37235, None_37236)
        
        # Getting the type of 'A' (line 1162)
        A_37238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 33), 'A')
        # Obtaining the member 'size' of a type (line 1162)
        size_37239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1162, 33), A_37238, 'size')
        # Applying the binary operator 'and' (line 1162)
        result_and_keyword_37240 = python_operator(stypy.reporting.localization.Localization(__file__, 1162, 11), 'and', result_is__37237, size_37239)
        
        # Testing the type of an if condition (line 1162)
        if_condition_37241 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1162, 8), result_and_keyword_37240)
        # Assigning a type to the variable 'if_condition_37241' (line 1162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1162, 8), 'if_condition_37241', if_condition_37241)
        # SSA begins for if statement (line 1162)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1163):
        
        # Assigning a Call to a Attribute (line 1163):
        
        # Assigning a Call to a Attribute (line 1163):
        
        # Call to min(...): (line 1163)
        # Processing the call keyword arguments (line 1163)
        kwargs_37244 = {}
        # Getting the type of 'A' (line 1163)
        A_37242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 24), 'A', False)
        # Obtaining the member 'min' of a type (line 1163)
        min_37243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 24), A_37242, 'min')
        # Calling min(args, kwargs) (line 1163)
        min_call_result_37245 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 24), min_37243, *[], **kwargs_37244)
        
        # Getting the type of 'self' (line 1163)
        self_37246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 12), 'self')
        # Setting the type of the member 'vmin' of a type (line 1163)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 12), self_37246, 'vmin', min_call_result_37245)
        # SSA join for if statement (line 1162)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1164)
        self_37247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 11), 'self')
        # Obtaining the member 'vmax' of a type (line 1164)
        vmax_37248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 11), self_37247, 'vmax')
        # Getting the type of 'None' (line 1164)
        None_37249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 24), 'None')
        # Applying the binary operator 'is' (line 1164)
        result_is__37250 = python_operator(stypy.reporting.localization.Localization(__file__, 1164, 11), 'is', vmax_37248, None_37249)
        
        # Getting the type of 'A' (line 1164)
        A_37251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 33), 'A')
        # Obtaining the member 'size' of a type (line 1164)
        size_37252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 33), A_37251, 'size')
        # Applying the binary operator 'and' (line 1164)
        result_and_keyword_37253 = python_operator(stypy.reporting.localization.Localization(__file__, 1164, 11), 'and', result_is__37250, size_37252)
        
        # Testing the type of an if condition (line 1164)
        if_condition_37254 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1164, 8), result_and_keyword_37253)
        # Assigning a type to the variable 'if_condition_37254' (line 1164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1164, 8), 'if_condition_37254', if_condition_37254)
        # SSA begins for if statement (line 1164)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1165):
        
        # Assigning a Call to a Attribute (line 1165):
        
        # Assigning a Call to a Attribute (line 1165):
        
        # Call to max(...): (line 1165)
        # Processing the call keyword arguments (line 1165)
        kwargs_37257 = {}
        # Getting the type of 'A' (line 1165)
        A_37255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 24), 'A', False)
        # Obtaining the member 'max' of a type (line 1165)
        max_37256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 24), A_37255, 'max')
        # Calling max(args, kwargs) (line 1165)
        max_call_result_37258 = invoke(stypy.reporting.localization.Localization(__file__, 1165, 24), max_37256, *[], **kwargs_37257)
        
        # Getting the type of 'self' (line 1165)
        self_37259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'self')
        # Setting the type of the member 'vmax' of a type (line 1165)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 12), self_37259, 'vmax', max_call_result_37258)
        # SSA join for if statement (line 1164)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _transform_vmin_vmax(...): (line 1166)
        # Processing the call keyword arguments (line 1166)
        kwargs_37262 = {}
        # Getting the type of 'self' (line 1166)
        self_37260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 8), 'self', False)
        # Obtaining the member '_transform_vmin_vmax' of a type (line 1166)
        _transform_vmin_vmax_37261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 8), self_37260, '_transform_vmin_vmax')
        # Calling _transform_vmin_vmax(args, kwargs) (line 1166)
        _transform_vmin_vmax_call_result_37263 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 8), _transform_vmin_vmax_37261, *[], **kwargs_37262)
        
        
        # ################# End of 'autoscale_None(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale_None' in the type store
        # Getting the type of 'stypy_return_type' (line 1157)
        stypy_return_type_37264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37264)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale_None'
        return stypy_return_type_37264


# Assigning a type to the variable 'SymLogNorm' (line 1052)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 0), 'SymLogNorm', SymLogNorm)
# Declaration of the 'PowerNorm' class
# Getting the type of 'Normalize' (line 1169)
Normalize_37265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 16), 'Normalize')

class PowerNorm(Normalize_37265, ):
    unicode_37266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1173, (-1)), 'unicode', u'\n    Normalize a given value to the ``[0, 1]`` interval with a power-law\n    scaling. This will clip any negative data points to 0.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1174)
        None_37267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 35), 'None')
        # Getting the type of 'None' (line 1174)
        None_37268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 46), 'None')
        # Getting the type of 'False' (line 1174)
        False_37269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 57), 'False')
        defaults = [None_37267, None_37268, False_37269]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1174, 4, False)
        # Assigning a type to the variable 'self' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PowerNorm.__init__', ['gamma', 'vmin', 'vmax', 'clip'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['gamma', 'vmin', 'vmax', 'clip'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1175)
        # Processing the call arguments (line 1175)
        # Getting the type of 'self' (line 1175)
        self_37272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 27), 'self', False)
        # Getting the type of 'vmin' (line 1175)
        vmin_37273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 33), 'vmin', False)
        # Getting the type of 'vmax' (line 1175)
        vmax_37274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 39), 'vmax', False)
        # Getting the type of 'clip' (line 1175)
        clip_37275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 45), 'clip', False)
        # Processing the call keyword arguments (line 1175)
        kwargs_37276 = {}
        # Getting the type of 'Normalize' (line 1175)
        Normalize_37270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'Normalize', False)
        # Obtaining the member '__init__' of a type (line 1175)
        init___37271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 8), Normalize_37270, '__init__')
        # Calling __init__(args, kwargs) (line 1175)
        init___call_result_37277 = invoke(stypy.reporting.localization.Localization(__file__, 1175, 8), init___37271, *[self_37272, vmin_37273, vmax_37274, clip_37275], **kwargs_37276)
        
        
        # Assigning a Name to a Attribute (line 1176):
        
        # Assigning a Name to a Attribute (line 1176):
        
        # Assigning a Name to a Attribute (line 1176):
        # Getting the type of 'gamma' (line 1176)
        gamma_37278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 21), 'gamma')
        # Getting the type of 'self' (line 1176)
        self_37279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 8), 'self')
        # Setting the type of the member 'gamma' of a type (line 1176)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 8), self_37279, 'gamma', gamma_37278)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1178)
        None_37280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 35), 'None')
        defaults = [None_37280]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1178, 4, False)
        # Assigning a type to the variable 'self' (line 1179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PowerNorm.__call__.__dict__.__setitem__('stypy_localization', localization)
        PowerNorm.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PowerNorm.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        PowerNorm.__call__.__dict__.__setitem__('stypy_function_name', 'PowerNorm.__call__')
        PowerNorm.__call__.__dict__.__setitem__('stypy_param_names_list', ['value', 'clip'])
        PowerNorm.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        PowerNorm.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PowerNorm.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        PowerNorm.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        PowerNorm.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PowerNorm.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PowerNorm.__call__', ['value', 'clip'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['value', 'clip'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1179)
        # Getting the type of 'clip' (line 1179)
        clip_37281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 11), 'clip')
        # Getting the type of 'None' (line 1179)
        None_37282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 19), 'None')
        
        (may_be_37283, more_types_in_union_37284) = may_be_none(clip_37281, None_37282)

        if may_be_37283:

            if more_types_in_union_37284:
                # Runtime conditional SSA (line 1179)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1180):
            
            # Assigning a Attribute to a Name (line 1180):
            
            # Assigning a Attribute to a Name (line 1180):
            # Getting the type of 'self' (line 1180)
            self_37285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 19), 'self')
            # Obtaining the member 'clip' of a type (line 1180)
            clip_37286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1180, 19), self_37285, 'clip')
            # Assigning a type to the variable 'clip' (line 1180)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1180, 12), 'clip', clip_37286)

            if more_types_in_union_37284:
                # SSA join for if statement (line 1179)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 1182):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to process_value(...): (line 1182)
        # Processing the call arguments (line 1182)
        # Getting the type of 'value' (line 1182)
        value_37289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 47), 'value', False)
        # Processing the call keyword arguments (line 1182)
        kwargs_37290 = {}
        # Getting the type of 'self' (line 1182)
        self_37287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 28), 'self', False)
        # Obtaining the member 'process_value' of a type (line 1182)
        process_value_37288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 28), self_37287, 'process_value')
        # Calling process_value(args, kwargs) (line 1182)
        process_value_call_result_37291 = invoke(stypy.reporting.localization.Localization(__file__, 1182, 28), process_value_37288, *[value_37289], **kwargs_37290)
        
        # Assigning a type to the variable 'call_assignment_34250' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'call_assignment_34250', process_value_call_result_37291)
        
        # Assigning a Call to a Name (line 1182):
        
        # Assigning a Call to a Name (line 1182):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_37294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 8), 'int')
        # Processing the call keyword arguments
        kwargs_37295 = {}
        # Getting the type of 'call_assignment_34250' (line 1182)
        call_assignment_34250_37292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'call_assignment_34250', False)
        # Obtaining the member '__getitem__' of a type (line 1182)
        getitem___37293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 8), call_assignment_34250_37292, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_37296 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___37293, *[int_37294], **kwargs_37295)
        
        # Assigning a type to the variable 'call_assignment_34251' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'call_assignment_34251', getitem___call_result_37296)
        
        # Assigning a Name to a Name (line 1182):
        
        # Assigning a Name to a Name (line 1182):
        # Getting the type of 'call_assignment_34251' (line 1182)
        call_assignment_34251_37297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'call_assignment_34251')
        # Assigning a type to the variable 'result' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'result', call_assignment_34251_37297)
        
        # Assigning a Call to a Name (line 1182):
        
        # Assigning a Call to a Name (line 1182):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_37300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 8), 'int')
        # Processing the call keyword arguments
        kwargs_37301 = {}
        # Getting the type of 'call_assignment_34250' (line 1182)
        call_assignment_34250_37298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'call_assignment_34250', False)
        # Obtaining the member '__getitem__' of a type (line 1182)
        getitem___37299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 8), call_assignment_34250_37298, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_37302 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___37299, *[int_37300], **kwargs_37301)
        
        # Assigning a type to the variable 'call_assignment_34252' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'call_assignment_34252', getitem___call_result_37302)
        
        # Assigning a Name to a Name (line 1182):
        
        # Assigning a Name to a Name (line 1182):
        # Getting the type of 'call_assignment_34252' (line 1182)
        call_assignment_34252_37303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'call_assignment_34252')
        # Assigning a type to the variable 'is_scalar' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 16), 'is_scalar', call_assignment_34252_37303)
        
        # Call to autoscale_None(...): (line 1184)
        # Processing the call arguments (line 1184)
        # Getting the type of 'result' (line 1184)
        result_37306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 28), 'result', False)
        # Processing the call keyword arguments (line 1184)
        kwargs_37307 = {}
        # Getting the type of 'self' (line 1184)
        self_37304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 8), 'self', False)
        # Obtaining the member 'autoscale_None' of a type (line 1184)
        autoscale_None_37305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1184, 8), self_37304, 'autoscale_None')
        # Calling autoscale_None(args, kwargs) (line 1184)
        autoscale_None_call_result_37308 = invoke(stypy.reporting.localization.Localization(__file__, 1184, 8), autoscale_None_37305, *[result_37306], **kwargs_37307)
        
        
        # Assigning a Attribute to a Name (line 1185):
        
        # Assigning a Attribute to a Name (line 1185):
        
        # Assigning a Attribute to a Name (line 1185):
        # Getting the type of 'self' (line 1185)
        self_37309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 16), 'self')
        # Obtaining the member 'gamma' of a type (line 1185)
        gamma_37310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 16), self_37309, 'gamma')
        # Assigning a type to the variable 'gamma' (line 1185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 8), 'gamma', gamma_37310)
        
        # Assigning a Tuple to a Tuple (line 1186):
        
        # Assigning a Attribute to a Name (line 1186):
        
        # Assigning a Attribute to a Name (line 1186):
        # Getting the type of 'self' (line 1186)
        self_37311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 21), 'self')
        # Obtaining the member 'vmin' of a type (line 1186)
        vmin_37312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 21), self_37311, 'vmin')
        # Assigning a type to the variable 'tuple_assignment_34253' (line 1186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 8), 'tuple_assignment_34253', vmin_37312)
        
        # Assigning a Attribute to a Name (line 1186):
        
        # Assigning a Attribute to a Name (line 1186):
        # Getting the type of 'self' (line 1186)
        self_37313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 32), 'self')
        # Obtaining the member 'vmax' of a type (line 1186)
        vmax_37314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 32), self_37313, 'vmax')
        # Assigning a type to the variable 'tuple_assignment_34254' (line 1186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 8), 'tuple_assignment_34254', vmax_37314)
        
        # Assigning a Name to a Name (line 1186):
        
        # Assigning a Name to a Name (line 1186):
        # Getting the type of 'tuple_assignment_34253' (line 1186)
        tuple_assignment_34253_37315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 8), 'tuple_assignment_34253')
        # Assigning a type to the variable 'vmin' (line 1186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 8), 'vmin', tuple_assignment_34253_37315)
        
        # Assigning a Name to a Name (line 1186):
        
        # Assigning a Name to a Name (line 1186):
        # Getting the type of 'tuple_assignment_34254' (line 1186)
        tuple_assignment_34254_37316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 8), 'tuple_assignment_34254')
        # Assigning a type to the variable 'vmax' (line 1186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 14), 'vmax', tuple_assignment_34254_37316)
        
        
        # Getting the type of 'vmin' (line 1187)
        vmin_37317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 11), 'vmin')
        # Getting the type of 'vmax' (line 1187)
        vmax_37318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 18), 'vmax')
        # Applying the binary operator '>' (line 1187)
        result_gt_37319 = python_operator(stypy.reporting.localization.Localization(__file__, 1187, 11), '>', vmin_37317, vmax_37318)
        
        # Testing the type of an if condition (line 1187)
        if_condition_37320 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1187, 8), result_gt_37319)
        # Assigning a type to the variable 'if_condition_37320' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'if_condition_37320', if_condition_37320)
        # SSA begins for if statement (line 1187)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1188)
        # Processing the call arguments (line 1188)
        unicode_37322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1188, 29), 'unicode', u'minvalue must be less than or equal to maxvalue')
        # Processing the call keyword arguments (line 1188)
        kwargs_37323 = {}
        # Getting the type of 'ValueError' (line 1188)
        ValueError_37321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1188)
        ValueError_call_result_37324 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 18), ValueError_37321, *[unicode_37322], **kwargs_37323)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1188, 12), ValueError_call_result_37324, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 1187)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'vmin' (line 1189)
        vmin_37325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 13), 'vmin')
        # Getting the type of 'vmax' (line 1189)
        vmax_37326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 21), 'vmax')
        # Applying the binary operator '==' (line 1189)
        result_eq_37327 = python_operator(stypy.reporting.localization.Localization(__file__, 1189, 13), '==', vmin_37325, vmax_37326)
        
        # Testing the type of an if condition (line 1189)
        if_condition_37328 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1189, 13), result_eq_37327)
        # Assigning a type to the variable 'if_condition_37328' (line 1189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 13), 'if_condition_37328', if_condition_37328)
        # SSA begins for if statement (line 1189)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to fill(...): (line 1190)
        # Processing the call arguments (line 1190)
        int_37331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 24), 'int')
        # Processing the call keyword arguments (line 1190)
        kwargs_37332 = {}
        # Getting the type of 'result' (line 1190)
        result_37329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 12), 'result', False)
        # Obtaining the member 'fill' of a type (line 1190)
        fill_37330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 12), result_37329, 'fill')
        # Calling fill(args, kwargs) (line 1190)
        fill_call_result_37333 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 12), fill_37330, *[int_37331], **kwargs_37332)
        
        # SSA branch for the else part of an if statement (line 1189)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Compare to a Name (line 1192):
        
        # Assigning a Compare to a Name (line 1192):
        
        # Assigning a Compare to a Name (line 1192):
        
        # Getting the type of 'result' (line 1192)
        result_37334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 23), 'result')
        # Obtaining the member 'data' of a type (line 1192)
        data_37335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1192, 23), result_37334, 'data')
        int_37336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1192, 37), 'int')
        # Applying the binary operator '<' (line 1192)
        result_lt_37337 = python_operator(stypy.reporting.localization.Localization(__file__, 1192, 23), '<', data_37335, int_37336)
        
        # Assigning a type to the variable 'res_mask' (line 1192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1192, 12), 'res_mask', result_lt_37337)
        
        # Getting the type of 'clip' (line 1193)
        clip_37338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 15), 'clip')
        # Testing the type of an if condition (line 1193)
        if_condition_37339 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1193, 12), clip_37338)
        # Assigning a type to the variable 'if_condition_37339' (line 1193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1193, 12), 'if_condition_37339', if_condition_37339)
        # SSA begins for if statement (line 1193)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1194):
        
        # Assigning a Call to a Name (line 1194):
        
        # Assigning a Call to a Name (line 1194):
        
        # Call to getmask(...): (line 1194)
        # Processing the call arguments (line 1194)
        # Getting the type of 'result' (line 1194)
        result_37343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 37), 'result', False)
        # Processing the call keyword arguments (line 1194)
        kwargs_37344 = {}
        # Getting the type of 'np' (line 1194)
        np_37340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 23), 'np', False)
        # Obtaining the member 'ma' of a type (line 1194)
        ma_37341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1194, 23), np_37340, 'ma')
        # Obtaining the member 'getmask' of a type (line 1194)
        getmask_37342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1194, 23), ma_37341, 'getmask')
        # Calling getmask(args, kwargs) (line 1194)
        getmask_call_result_37345 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 23), getmask_37342, *[result_37343], **kwargs_37344)
        
        # Assigning a type to the variable 'mask' (line 1194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 16), 'mask', getmask_call_result_37345)
        
        # Assigning a Call to a Name (line 1195):
        
        # Assigning a Call to a Name (line 1195):
        
        # Assigning a Call to a Name (line 1195):
        
        # Call to array(...): (line 1195)
        # Processing the call arguments (line 1195)
        
        # Call to clip(...): (line 1195)
        # Processing the call arguments (line 1195)
        
        # Call to filled(...): (line 1195)
        # Processing the call arguments (line 1195)
        # Getting the type of 'vmax' (line 1195)
        vmax_37353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 59), 'vmax', False)
        # Processing the call keyword arguments (line 1195)
        kwargs_37354 = {}
        # Getting the type of 'result' (line 1195)
        result_37351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 45), 'result', False)
        # Obtaining the member 'filled' of a type (line 1195)
        filled_37352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 45), result_37351, 'filled')
        # Calling filled(args, kwargs) (line 1195)
        filled_call_result_37355 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 45), filled_37352, *[vmax_37353], **kwargs_37354)
        
        # Getting the type of 'vmin' (line 1195)
        vmin_37356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 66), 'vmin', False)
        # Getting the type of 'vmax' (line 1195)
        vmax_37357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 72), 'vmax', False)
        # Processing the call keyword arguments (line 1195)
        kwargs_37358 = {}
        # Getting the type of 'np' (line 1195)
        np_37349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 37), 'np', False)
        # Obtaining the member 'clip' of a type (line 1195)
        clip_37350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 37), np_37349, 'clip')
        # Calling clip(args, kwargs) (line 1195)
        clip_call_result_37359 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 37), clip_37350, *[filled_call_result_37355, vmin_37356, vmax_37357], **kwargs_37358)
        
        # Processing the call keyword arguments (line 1195)
        # Getting the type of 'mask' (line 1196)
        mask_37360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 42), 'mask', False)
        keyword_37361 = mask_37360
        kwargs_37362 = {'mask': keyword_37361}
        # Getting the type of 'np' (line 1195)
        np_37346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 25), 'np', False)
        # Obtaining the member 'ma' of a type (line 1195)
        ma_37347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 25), np_37346, 'ma')
        # Obtaining the member 'array' of a type (line 1195)
        array_37348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 25), ma_37347, 'array')
        # Calling array(args, kwargs) (line 1195)
        array_call_result_37363 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 25), array_37348, *[clip_call_result_37359], **kwargs_37362)
        
        # Assigning a type to the variable 'result' (line 1195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 16), 'result', array_call_result_37363)
        # SSA join for if statement (line 1193)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 1197):
        
        # Assigning a Attribute to a Name (line 1197):
        
        # Assigning a Attribute to a Name (line 1197):
        # Getting the type of 'result' (line 1197)
        result_37364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 21), 'result')
        # Obtaining the member 'data' of a type (line 1197)
        data_37365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 21), result_37364, 'data')
        # Assigning a type to the variable 'resdat' (line 1197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 12), 'resdat', data_37365)
        
        # Getting the type of 'resdat' (line 1198)
        resdat_37366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 12), 'resdat')
        # Getting the type of 'vmin' (line 1198)
        vmin_37367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 22), 'vmin')
        # Applying the binary operator '-=' (line 1198)
        result_isub_37368 = python_operator(stypy.reporting.localization.Localization(__file__, 1198, 12), '-=', resdat_37366, vmin_37367)
        # Assigning a type to the variable 'resdat' (line 1198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1198, 12), 'resdat', result_isub_37368)
        
        
        # Call to power(...): (line 1199)
        # Processing the call arguments (line 1199)
        # Getting the type of 'resdat' (line 1199)
        resdat_37371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 21), 'resdat', False)
        # Getting the type of 'gamma' (line 1199)
        gamma_37372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 29), 'gamma', False)
        # Getting the type of 'resdat' (line 1199)
        resdat_37373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 36), 'resdat', False)
        # Processing the call keyword arguments (line 1199)
        kwargs_37374 = {}
        # Getting the type of 'np' (line 1199)
        np_37369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 12), 'np', False)
        # Obtaining the member 'power' of a type (line 1199)
        power_37370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 12), np_37369, 'power')
        # Calling power(args, kwargs) (line 1199)
        power_call_result_37375 = invoke(stypy.reporting.localization.Localization(__file__, 1199, 12), power_37370, *[resdat_37371, gamma_37372, resdat_37373], **kwargs_37374)
        
        
        # Getting the type of 'resdat' (line 1200)
        resdat_37376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 12), 'resdat')
        # Getting the type of 'vmax' (line 1200)
        vmax_37377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 23), 'vmax')
        # Getting the type of 'vmin' (line 1200)
        vmin_37378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 30), 'vmin')
        # Applying the binary operator '-' (line 1200)
        result_sub_37379 = python_operator(stypy.reporting.localization.Localization(__file__, 1200, 23), '-', vmax_37377, vmin_37378)
        
        # Getting the type of 'gamma' (line 1200)
        gamma_37380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 39), 'gamma')
        # Applying the binary operator '**' (line 1200)
        result_pow_37381 = python_operator(stypy.reporting.localization.Localization(__file__, 1200, 22), '**', result_sub_37379, gamma_37380)
        
        # Applying the binary operator 'div=' (line 1200)
        result_div_37382 = python_operator(stypy.reporting.localization.Localization(__file__, 1200, 12), 'div=', resdat_37376, result_pow_37381)
        # Assigning a type to the variable 'resdat' (line 1200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 12), 'resdat', result_div_37382)
        
        
        # Assigning a Call to a Name (line 1202):
        
        # Assigning a Call to a Name (line 1202):
        
        # Assigning a Call to a Name (line 1202):
        
        # Call to array(...): (line 1202)
        # Processing the call arguments (line 1202)
        # Getting the type of 'resdat' (line 1202)
        resdat_37386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 33), 'resdat', False)
        # Processing the call keyword arguments (line 1202)
        # Getting the type of 'result' (line 1202)
        result_37387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 46), 'result', False)
        # Obtaining the member 'mask' of a type (line 1202)
        mask_37388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 46), result_37387, 'mask')
        keyword_37389 = mask_37388
        # Getting the type of 'False' (line 1202)
        False_37390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 64), 'False', False)
        keyword_37391 = False_37390
        kwargs_37392 = {'copy': keyword_37391, 'mask': keyword_37389}
        # Getting the type of 'np' (line 1202)
        np_37383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 21), 'np', False)
        # Obtaining the member 'ma' of a type (line 1202)
        ma_37384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 21), np_37383, 'ma')
        # Obtaining the member 'array' of a type (line 1202)
        array_37385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 21), ma_37384, 'array')
        # Calling array(args, kwargs) (line 1202)
        array_call_result_37393 = invoke(stypy.reporting.localization.Localization(__file__, 1202, 21), array_37385, *[resdat_37386], **kwargs_37392)
        
        # Assigning a type to the variable 'result' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 12), 'result', array_call_result_37393)
        
        # Assigning a Num to a Subscript (line 1203):
        
        # Assigning a Num to a Subscript (line 1203):
        
        # Assigning a Num to a Subscript (line 1203):
        int_37394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 31), 'int')
        # Getting the type of 'result' (line 1203)
        result_37395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 12), 'result')
        # Getting the type of 'res_mask' (line 1203)
        res_mask_37396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 19), 'res_mask')
        # Storing an element on a container (line 1203)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1203, 12), result_37395, (res_mask_37396, int_37394))
        # SSA join for if statement (line 1189)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1187)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'is_scalar' (line 1204)
        is_scalar_37397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 11), 'is_scalar')
        # Testing the type of an if condition (line 1204)
        if_condition_37398 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1204, 8), is_scalar_37397)
        # Assigning a type to the variable 'if_condition_37398' (line 1204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1204, 8), 'if_condition_37398', if_condition_37398)
        # SSA begins for if statement (line 1204)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1205):
        
        # Assigning a Subscript to a Name (line 1205):
        
        # Assigning a Subscript to a Name (line 1205):
        
        # Obtaining the type of the subscript
        int_37399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 28), 'int')
        # Getting the type of 'result' (line 1205)
        result_37400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 21), 'result')
        # Obtaining the member '__getitem__' of a type (line 1205)
        getitem___37401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 21), result_37400, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1205)
        subscript_call_result_37402 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 21), getitem___37401, int_37399)
        
        # Assigning a type to the variable 'result' (line 1205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 12), 'result', subscript_call_result_37402)
        # SSA join for if statement (line 1204)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 1206)
        result_37403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 1206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 8), 'stypy_return_type', result_37403)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1178)
        stypy_return_type_37404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37404)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_37404


    @norecursion
    def inverse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inverse'
        module_type_store = module_type_store.open_function_context('inverse', 1208, 4, False)
        # Assigning a type to the variable 'self' (line 1209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PowerNorm.inverse.__dict__.__setitem__('stypy_localization', localization)
        PowerNorm.inverse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PowerNorm.inverse.__dict__.__setitem__('stypy_type_store', module_type_store)
        PowerNorm.inverse.__dict__.__setitem__('stypy_function_name', 'PowerNorm.inverse')
        PowerNorm.inverse.__dict__.__setitem__('stypy_param_names_list', ['value'])
        PowerNorm.inverse.__dict__.__setitem__('stypy_varargs_param_name', None)
        PowerNorm.inverse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PowerNorm.inverse.__dict__.__setitem__('stypy_call_defaults', defaults)
        PowerNorm.inverse.__dict__.__setitem__('stypy_call_varargs', varargs)
        PowerNorm.inverse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PowerNorm.inverse.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PowerNorm.inverse', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inverse', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inverse(...)' code ##################

        
        
        
        # Call to scaled(...): (line 1209)
        # Processing the call keyword arguments (line 1209)
        kwargs_37407 = {}
        # Getting the type of 'self' (line 1209)
        self_37405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 15), 'self', False)
        # Obtaining the member 'scaled' of a type (line 1209)
        scaled_37406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1209, 15), self_37405, 'scaled')
        # Calling scaled(args, kwargs) (line 1209)
        scaled_call_result_37408 = invoke(stypy.reporting.localization.Localization(__file__, 1209, 15), scaled_37406, *[], **kwargs_37407)
        
        # Applying the 'not' unary operator (line 1209)
        result_not__37409 = python_operator(stypy.reporting.localization.Localization(__file__, 1209, 11), 'not', scaled_call_result_37408)
        
        # Testing the type of an if condition (line 1209)
        if_condition_37410 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1209, 8), result_not__37409)
        # Assigning a type to the variable 'if_condition_37410' (line 1209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 8), 'if_condition_37410', if_condition_37410)
        # SSA begins for if statement (line 1209)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1210)
        # Processing the call arguments (line 1210)
        unicode_37412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 29), 'unicode', u'Not invertible until scaled')
        # Processing the call keyword arguments (line 1210)
        kwargs_37413 = {}
        # Getting the type of 'ValueError' (line 1210)
        ValueError_37411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1210)
        ValueError_call_result_37414 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 18), ValueError_37411, *[unicode_37412], **kwargs_37413)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1210, 12), ValueError_call_result_37414, 'raise parameter', BaseException)
        # SSA join for if statement (line 1209)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 1211):
        
        # Assigning a Attribute to a Name (line 1211):
        
        # Assigning a Attribute to a Name (line 1211):
        # Getting the type of 'self' (line 1211)
        self_37415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 16), 'self')
        # Obtaining the member 'gamma' of a type (line 1211)
        gamma_37416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1211, 16), self_37415, 'gamma')
        # Assigning a type to the variable 'gamma' (line 1211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 8), 'gamma', gamma_37416)
        
        # Assigning a Tuple to a Tuple (line 1212):
        
        # Assigning a Attribute to a Name (line 1212):
        
        # Assigning a Attribute to a Name (line 1212):
        # Getting the type of 'self' (line 1212)
        self_37417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 21), 'self')
        # Obtaining the member 'vmin' of a type (line 1212)
        vmin_37418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1212, 21), self_37417, 'vmin')
        # Assigning a type to the variable 'tuple_assignment_34255' (line 1212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1212, 8), 'tuple_assignment_34255', vmin_37418)
        
        # Assigning a Attribute to a Name (line 1212):
        
        # Assigning a Attribute to a Name (line 1212):
        # Getting the type of 'self' (line 1212)
        self_37419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 32), 'self')
        # Obtaining the member 'vmax' of a type (line 1212)
        vmax_37420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1212, 32), self_37419, 'vmax')
        # Assigning a type to the variable 'tuple_assignment_34256' (line 1212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1212, 8), 'tuple_assignment_34256', vmax_37420)
        
        # Assigning a Name to a Name (line 1212):
        
        # Assigning a Name to a Name (line 1212):
        # Getting the type of 'tuple_assignment_34255' (line 1212)
        tuple_assignment_34255_37421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 8), 'tuple_assignment_34255')
        # Assigning a type to the variable 'vmin' (line 1212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1212, 8), 'vmin', tuple_assignment_34255_37421)
        
        # Assigning a Name to a Name (line 1212):
        
        # Assigning a Name to a Name (line 1212):
        # Getting the type of 'tuple_assignment_34256' (line 1212)
        tuple_assignment_34256_37422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 8), 'tuple_assignment_34256')
        # Assigning a type to the variable 'vmax' (line 1212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1212, 14), 'vmax', tuple_assignment_34256_37422)
        
        
        # Call to iterable(...): (line 1214)
        # Processing the call arguments (line 1214)
        # Getting the type of 'value' (line 1214)
        value_37425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 26), 'value', False)
        # Processing the call keyword arguments (line 1214)
        kwargs_37426 = {}
        # Getting the type of 'cbook' (line 1214)
        cbook_37423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 11), 'cbook', False)
        # Obtaining the member 'iterable' of a type (line 1214)
        iterable_37424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 11), cbook_37423, 'iterable')
        # Calling iterable(args, kwargs) (line 1214)
        iterable_call_result_37427 = invoke(stypy.reporting.localization.Localization(__file__, 1214, 11), iterable_37424, *[value_37425], **kwargs_37426)
        
        # Testing the type of an if condition (line 1214)
        if_condition_37428 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1214, 8), iterable_call_result_37427)
        # Assigning a type to the variable 'if_condition_37428' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 8), 'if_condition_37428', if_condition_37428)
        # SSA begins for if statement (line 1214)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1215):
        
        # Assigning a Call to a Name (line 1215):
        
        # Assigning a Call to a Name (line 1215):
        
        # Call to asarray(...): (line 1215)
        # Processing the call arguments (line 1215)
        # Getting the type of 'value' (line 1215)
        value_37432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 32), 'value', False)
        # Processing the call keyword arguments (line 1215)
        kwargs_37433 = {}
        # Getting the type of 'np' (line 1215)
        np_37429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 18), 'np', False)
        # Obtaining the member 'ma' of a type (line 1215)
        ma_37430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 18), np_37429, 'ma')
        # Obtaining the member 'asarray' of a type (line 1215)
        asarray_37431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 18), ma_37430, 'asarray')
        # Calling asarray(args, kwargs) (line 1215)
        asarray_call_result_37434 = invoke(stypy.reporting.localization.Localization(__file__, 1215, 18), asarray_37431, *[value_37432], **kwargs_37433)
        
        # Assigning a type to the variable 'val' (line 1215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 12), 'val', asarray_call_result_37434)
        
        # Call to power(...): (line 1216)
        # Processing the call arguments (line 1216)
        # Getting the type of 'val' (line 1216)
        val_37438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 31), 'val', False)
        float_37439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 36), 'float')
        # Getting the type of 'gamma' (line 1216)
        gamma_37440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 41), 'gamma', False)
        # Applying the binary operator 'div' (line 1216)
        result_div_37441 = python_operator(stypy.reporting.localization.Localization(__file__, 1216, 36), 'div', float_37439, gamma_37440)
        
        # Processing the call keyword arguments (line 1216)
        kwargs_37442 = {}
        # Getting the type of 'np' (line 1216)
        np_37435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 19), 'np', False)
        # Obtaining the member 'ma' of a type (line 1216)
        ma_37436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 19), np_37435, 'ma')
        # Obtaining the member 'power' of a type (line 1216)
        power_37437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 19), ma_37436, 'power')
        # Calling power(args, kwargs) (line 1216)
        power_call_result_37443 = invoke(stypy.reporting.localization.Localization(__file__, 1216, 19), power_37437, *[val_37438, result_div_37441], **kwargs_37442)
        
        # Getting the type of 'vmax' (line 1216)
        vmax_37444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 51), 'vmax')
        # Getting the type of 'vmin' (line 1216)
        vmin_37445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 58), 'vmin')
        # Applying the binary operator '-' (line 1216)
        result_sub_37446 = python_operator(stypy.reporting.localization.Localization(__file__, 1216, 51), '-', vmax_37444, vmin_37445)
        
        # Applying the binary operator '*' (line 1216)
        result_mul_37447 = python_operator(stypy.reporting.localization.Localization(__file__, 1216, 19), '*', power_call_result_37443, result_sub_37446)
        
        # Getting the type of 'vmin' (line 1216)
        vmin_37448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 66), 'vmin')
        # Applying the binary operator '+' (line 1216)
        result_add_37449 = python_operator(stypy.reporting.localization.Localization(__file__, 1216, 19), '+', result_mul_37447, vmin_37448)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1216, 12), 'stypy_return_type', result_add_37449)
        # SSA branch for the else part of an if statement (line 1214)
        module_type_store.open_ssa_branch('else')
        
        # Call to pow(...): (line 1218)
        # Processing the call arguments (line 1218)
        # Getting the type of 'value' (line 1218)
        value_37451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 23), 'value', False)
        float_37452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1218, 30), 'float')
        # Getting the type of 'gamma' (line 1218)
        gamma_37453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 35), 'gamma', False)
        # Applying the binary operator 'div' (line 1218)
        result_div_37454 = python_operator(stypy.reporting.localization.Localization(__file__, 1218, 30), 'div', float_37452, gamma_37453)
        
        # Processing the call keyword arguments (line 1218)
        kwargs_37455 = {}
        # Getting the type of 'pow' (line 1218)
        pow_37450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 19), 'pow', False)
        # Calling pow(args, kwargs) (line 1218)
        pow_call_result_37456 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 19), pow_37450, *[value_37451, result_div_37454], **kwargs_37455)
        
        # Getting the type of 'vmax' (line 1218)
        vmax_37457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 45), 'vmax')
        # Getting the type of 'vmin' (line 1218)
        vmin_37458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 52), 'vmin')
        # Applying the binary operator '-' (line 1218)
        result_sub_37459 = python_operator(stypy.reporting.localization.Localization(__file__, 1218, 45), '-', vmax_37457, vmin_37458)
        
        # Applying the binary operator '*' (line 1218)
        result_mul_37460 = python_operator(stypy.reporting.localization.Localization(__file__, 1218, 19), '*', pow_call_result_37456, result_sub_37459)
        
        # Getting the type of 'vmin' (line 1218)
        vmin_37461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 60), 'vmin')
        # Applying the binary operator '+' (line 1218)
        result_add_37462 = python_operator(stypy.reporting.localization.Localization(__file__, 1218, 19), '+', result_mul_37460, vmin_37461)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 12), 'stypy_return_type', result_add_37462)
        # SSA join for if statement (line 1214)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'inverse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inverse' in the type store
        # Getting the type of 'stypy_return_type' (line 1208)
        stypy_return_type_37463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37463)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inverse'
        return stypy_return_type_37463


    @norecursion
    def autoscale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'autoscale'
        module_type_store = module_type_store.open_function_context('autoscale', 1220, 4, False)
        # Assigning a type to the variable 'self' (line 1221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PowerNorm.autoscale.__dict__.__setitem__('stypy_localization', localization)
        PowerNorm.autoscale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PowerNorm.autoscale.__dict__.__setitem__('stypy_type_store', module_type_store)
        PowerNorm.autoscale.__dict__.__setitem__('stypy_function_name', 'PowerNorm.autoscale')
        PowerNorm.autoscale.__dict__.__setitem__('stypy_param_names_list', ['A'])
        PowerNorm.autoscale.__dict__.__setitem__('stypy_varargs_param_name', None)
        PowerNorm.autoscale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PowerNorm.autoscale.__dict__.__setitem__('stypy_call_defaults', defaults)
        PowerNorm.autoscale.__dict__.__setitem__('stypy_call_varargs', varargs)
        PowerNorm.autoscale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PowerNorm.autoscale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PowerNorm.autoscale', ['A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale', localization, ['A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale(...)' code ##################

        unicode_37464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1223, (-1)), 'unicode', u'\n        Set *vmin*, *vmax* to min, max of *A*.\n        ')
        
        # Assigning a Call to a Attribute (line 1224):
        
        # Assigning a Call to a Attribute (line 1224):
        
        # Assigning a Call to a Attribute (line 1224):
        
        # Call to min(...): (line 1224)
        # Processing the call arguments (line 1224)
        # Getting the type of 'A' (line 1224)
        A_37468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 30), 'A', False)
        # Processing the call keyword arguments (line 1224)
        kwargs_37469 = {}
        # Getting the type of 'np' (line 1224)
        np_37465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 20), 'np', False)
        # Obtaining the member 'ma' of a type (line 1224)
        ma_37466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 20), np_37465, 'ma')
        # Obtaining the member 'min' of a type (line 1224)
        min_37467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 20), ma_37466, 'min')
        # Calling min(args, kwargs) (line 1224)
        min_call_result_37470 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 20), min_37467, *[A_37468], **kwargs_37469)
        
        # Getting the type of 'self' (line 1224)
        self_37471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 8), 'self')
        # Setting the type of the member 'vmin' of a type (line 1224)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 8), self_37471, 'vmin', min_call_result_37470)
        
        
        # Getting the type of 'self' (line 1225)
        self_37472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 11), 'self')
        # Obtaining the member 'vmin' of a type (line 1225)
        vmin_37473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1225, 11), self_37472, 'vmin')
        int_37474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, 23), 'int')
        # Applying the binary operator '<' (line 1225)
        result_lt_37475 = python_operator(stypy.reporting.localization.Localization(__file__, 1225, 11), '<', vmin_37473, int_37474)
        
        # Testing the type of an if condition (line 1225)
        if_condition_37476 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1225, 8), result_lt_37475)
        # Assigning a type to the variable 'if_condition_37476' (line 1225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1225, 8), 'if_condition_37476', if_condition_37476)
        # SSA begins for if statement (line 1225)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 1226):
        
        # Assigning a Num to a Attribute (line 1226):
        
        # Assigning a Num to a Attribute (line 1226):
        int_37477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 24), 'int')
        # Getting the type of 'self' (line 1226)
        self_37478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 12), 'self')
        # Setting the type of the member 'vmin' of a type (line 1226)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 12), self_37478, 'vmin', int_37477)
        
        # Call to warn(...): (line 1227)
        # Processing the call arguments (line 1227)
        unicode_37481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 26), 'unicode', u'Power-law scaling on negative values is ill-defined, clamping to 0.')
        # Processing the call keyword arguments (line 1227)
        kwargs_37482 = {}
        # Getting the type of 'warnings' (line 1227)
        warnings_37479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1227)
        warn_37480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1227, 12), warnings_37479, 'warn')
        # Calling warn(args, kwargs) (line 1227)
        warn_call_result_37483 = invoke(stypy.reporting.localization.Localization(__file__, 1227, 12), warn_37480, *[unicode_37481], **kwargs_37482)
        
        # SSA join for if statement (line 1225)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1229):
        
        # Assigning a Call to a Attribute (line 1229):
        
        # Assigning a Call to a Attribute (line 1229):
        
        # Call to max(...): (line 1229)
        # Processing the call arguments (line 1229)
        # Getting the type of 'A' (line 1229)
        A_37487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 30), 'A', False)
        # Processing the call keyword arguments (line 1229)
        kwargs_37488 = {}
        # Getting the type of 'np' (line 1229)
        np_37484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 20), 'np', False)
        # Obtaining the member 'ma' of a type (line 1229)
        ma_37485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 20), np_37484, 'ma')
        # Obtaining the member 'max' of a type (line 1229)
        max_37486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 20), ma_37485, 'max')
        # Calling max(args, kwargs) (line 1229)
        max_call_result_37489 = invoke(stypy.reporting.localization.Localization(__file__, 1229, 20), max_37486, *[A_37487], **kwargs_37488)
        
        # Getting the type of 'self' (line 1229)
        self_37490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'self')
        # Setting the type of the member 'vmax' of a type (line 1229)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 8), self_37490, 'vmax', max_call_result_37489)
        
        # ################# End of 'autoscale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale' in the type store
        # Getting the type of 'stypy_return_type' (line 1220)
        stypy_return_type_37491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37491)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale'
        return stypy_return_type_37491


    @norecursion
    def autoscale_None(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'autoscale_None'
        module_type_store = module_type_store.open_function_context('autoscale_None', 1231, 4, False)
        # Assigning a type to the variable 'self' (line 1232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PowerNorm.autoscale_None.__dict__.__setitem__('stypy_localization', localization)
        PowerNorm.autoscale_None.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PowerNorm.autoscale_None.__dict__.__setitem__('stypy_type_store', module_type_store)
        PowerNorm.autoscale_None.__dict__.__setitem__('stypy_function_name', 'PowerNorm.autoscale_None')
        PowerNorm.autoscale_None.__dict__.__setitem__('stypy_param_names_list', ['A'])
        PowerNorm.autoscale_None.__dict__.__setitem__('stypy_varargs_param_name', None)
        PowerNorm.autoscale_None.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PowerNorm.autoscale_None.__dict__.__setitem__('stypy_call_defaults', defaults)
        PowerNorm.autoscale_None.__dict__.__setitem__('stypy_call_varargs', varargs)
        PowerNorm.autoscale_None.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PowerNorm.autoscale_None.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PowerNorm.autoscale_None', ['A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autoscale_None', localization, ['A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autoscale_None(...)' code ##################

        unicode_37492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 8), 'unicode', u'autoscale only None-valued vmin or vmax.')
        
        # Assigning a Call to a Name (line 1233):
        
        # Assigning a Call to a Name (line 1233):
        
        # Assigning a Call to a Name (line 1233):
        
        # Call to asanyarray(...): (line 1233)
        # Processing the call arguments (line 1233)
        # Getting the type of 'A' (line 1233)
        A_37495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 26), 'A', False)
        # Processing the call keyword arguments (line 1233)
        kwargs_37496 = {}
        # Getting the type of 'np' (line 1233)
        np_37493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 12), 'np', False)
        # Obtaining the member 'asanyarray' of a type (line 1233)
        asanyarray_37494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1233, 12), np_37493, 'asanyarray')
        # Calling asanyarray(args, kwargs) (line 1233)
        asanyarray_call_result_37497 = invoke(stypy.reporting.localization.Localization(__file__, 1233, 12), asanyarray_37494, *[A_37495], **kwargs_37496)
        
        # Assigning a type to the variable 'A' (line 1233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 8), 'A', asanyarray_call_result_37497)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1234)
        self_37498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 11), 'self')
        # Obtaining the member 'vmin' of a type (line 1234)
        vmin_37499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 11), self_37498, 'vmin')
        # Getting the type of 'None' (line 1234)
        None_37500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 24), 'None')
        # Applying the binary operator 'is' (line 1234)
        result_is__37501 = python_operator(stypy.reporting.localization.Localization(__file__, 1234, 11), 'is', vmin_37499, None_37500)
        
        # Getting the type of 'A' (line 1234)
        A_37502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 33), 'A')
        # Obtaining the member 'size' of a type (line 1234)
        size_37503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 33), A_37502, 'size')
        # Applying the binary operator 'and' (line 1234)
        result_and_keyword_37504 = python_operator(stypy.reporting.localization.Localization(__file__, 1234, 11), 'and', result_is__37501, size_37503)
        
        # Testing the type of an if condition (line 1234)
        if_condition_37505 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1234, 8), result_and_keyword_37504)
        # Assigning a type to the variable 'if_condition_37505' (line 1234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1234, 8), 'if_condition_37505', if_condition_37505)
        # SSA begins for if statement (line 1234)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1235):
        
        # Assigning a Call to a Attribute (line 1235):
        
        # Assigning a Call to a Attribute (line 1235):
        
        # Call to min(...): (line 1235)
        # Processing the call keyword arguments (line 1235)
        kwargs_37508 = {}
        # Getting the type of 'A' (line 1235)
        A_37506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 24), 'A', False)
        # Obtaining the member 'min' of a type (line 1235)
        min_37507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 24), A_37506, 'min')
        # Calling min(args, kwargs) (line 1235)
        min_call_result_37509 = invoke(stypy.reporting.localization.Localization(__file__, 1235, 24), min_37507, *[], **kwargs_37508)
        
        # Getting the type of 'self' (line 1235)
        self_37510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 12), 'self')
        # Setting the type of the member 'vmin' of a type (line 1235)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 12), self_37510, 'vmin', min_call_result_37509)
        
        
        # Getting the type of 'self' (line 1236)
        self_37511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 15), 'self')
        # Obtaining the member 'vmin' of a type (line 1236)
        vmin_37512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 15), self_37511, 'vmin')
        int_37513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1236, 27), 'int')
        # Applying the binary operator '<' (line 1236)
        result_lt_37514 = python_operator(stypy.reporting.localization.Localization(__file__, 1236, 15), '<', vmin_37512, int_37513)
        
        # Testing the type of an if condition (line 1236)
        if_condition_37515 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1236, 12), result_lt_37514)
        # Assigning a type to the variable 'if_condition_37515' (line 1236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 12), 'if_condition_37515', if_condition_37515)
        # SSA begins for if statement (line 1236)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 1237):
        
        # Assigning a Num to a Attribute (line 1237):
        
        # Assigning a Num to a Attribute (line 1237):
        int_37516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 28), 'int')
        # Getting the type of 'self' (line 1237)
        self_37517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 16), 'self')
        # Setting the type of the member 'vmin' of a type (line 1237)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1237, 16), self_37517, 'vmin', int_37516)
        
        # Call to warn(...): (line 1238)
        # Processing the call arguments (line 1238)
        unicode_37520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 30), 'unicode', u'Power-law scaling on negative values is ill-defined, clamping to 0.')
        # Processing the call keyword arguments (line 1238)
        kwargs_37521 = {}
        # Getting the type of 'warnings' (line 1238)
        warnings_37518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1238)
        warn_37519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 16), warnings_37518, 'warn')
        # Calling warn(args, kwargs) (line 1238)
        warn_call_result_37522 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 16), warn_37519, *[unicode_37520], **kwargs_37521)
        
        # SSA join for if statement (line 1236)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1234)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1240)
        self_37523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 11), 'self')
        # Obtaining the member 'vmax' of a type (line 1240)
        vmax_37524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 11), self_37523, 'vmax')
        # Getting the type of 'None' (line 1240)
        None_37525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 24), 'None')
        # Applying the binary operator 'is' (line 1240)
        result_is__37526 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 11), 'is', vmax_37524, None_37525)
        
        # Getting the type of 'A' (line 1240)
        A_37527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 33), 'A')
        # Obtaining the member 'size' of a type (line 1240)
        size_37528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 33), A_37527, 'size')
        # Applying the binary operator 'and' (line 1240)
        result_and_keyword_37529 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 11), 'and', result_is__37526, size_37528)
        
        # Testing the type of an if condition (line 1240)
        if_condition_37530 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1240, 8), result_and_keyword_37529)
        # Assigning a type to the variable 'if_condition_37530' (line 1240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 8), 'if_condition_37530', if_condition_37530)
        # SSA begins for if statement (line 1240)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1241):
        
        # Assigning a Call to a Attribute (line 1241):
        
        # Assigning a Call to a Attribute (line 1241):
        
        # Call to max(...): (line 1241)
        # Processing the call keyword arguments (line 1241)
        kwargs_37533 = {}
        # Getting the type of 'A' (line 1241)
        A_37531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 24), 'A', False)
        # Obtaining the member 'max' of a type (line 1241)
        max_37532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 24), A_37531, 'max')
        # Calling max(args, kwargs) (line 1241)
        max_call_result_37534 = invoke(stypy.reporting.localization.Localization(__file__, 1241, 24), max_37532, *[], **kwargs_37533)
        
        # Getting the type of 'self' (line 1241)
        self_37535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 12), 'self')
        # Setting the type of the member 'vmax' of a type (line 1241)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 12), self_37535, 'vmax', max_call_result_37534)
        # SSA join for if statement (line 1240)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'autoscale_None(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autoscale_None' in the type store
        # Getting the type of 'stypy_return_type' (line 1231)
        stypy_return_type_37536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37536)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autoscale_None'
        return stypy_return_type_37536


# Assigning a type to the variable 'PowerNorm' (line 1169)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 0), 'PowerNorm', PowerNorm)
# Declaration of the 'BoundaryNorm' class
# Getting the type of 'Normalize' (line 1244)
Normalize_37537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 19), 'Normalize')

class BoundaryNorm(Normalize_37537, ):
    unicode_37538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, (-1)), 'unicode', u'\n    Generate a colormap index based on discrete intervals.\n\n    Unlike :class:`Normalize` or :class:`LogNorm`,\n    :class:`BoundaryNorm` maps values to integers instead of to the\n    interval 0-1.\n\n    Mapping to the 0-1 interval could have been done via\n    piece-wise linear interpolation, but using integers seems\n    simpler, and reduces the number of conversions back and forth\n    between integer and floating point.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1257)
        False_37539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 49), 'False')
        defaults = [False_37539]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1257, 4, False)
        # Assigning a type to the variable 'self' (line 1258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BoundaryNorm.__init__', ['boundaries', 'ncolors', 'clip'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['boundaries', 'ncolors', 'clip'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_37540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1282, (-1)), 'unicode', u"\n        Parameters\n        ----------\n        boundaries : array-like\n            Monotonically increasing sequence of boundaries\n        ncolors : int\n            Number of colors in the colormap to be used\n        clip : bool, optional\n            If clip is ``True``, out of range values are mapped to 0 if they\n            are below ``boundaries[0]`` or mapped to ncolors - 1 if they are\n            above ``boundaries[-1]``.\n\n            If clip is ``False``, out of range values are mapped to -1 if\n            they are below ``boundaries[0]`` or mapped to ncolors if they are\n            above ``boundaries[-1]``. These are then converted to valid indices\n            by :meth:`Colormap.__call__`.\n\n        Notes\n        -----\n        *boundaries* defines the edges of bins, and data falling within a bin\n        is mapped to the color with the same index.\n\n        If the number of bins doesn't equal *ncolors*, the color is chosen\n        by linear interpolation of the bin number onto color numbers.\n        ")
        
        # Assigning a Name to a Attribute (line 1283):
        
        # Assigning a Name to a Attribute (line 1283):
        
        # Assigning a Name to a Attribute (line 1283):
        # Getting the type of 'clip' (line 1283)
        clip_37541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 20), 'clip')
        # Getting the type of 'self' (line 1283)
        self_37542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 8), 'self')
        # Setting the type of the member 'clip' of a type (line 1283)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 8), self_37542, 'clip', clip_37541)
        
        # Assigning a Subscript to a Attribute (line 1284):
        
        # Assigning a Subscript to a Attribute (line 1284):
        
        # Assigning a Subscript to a Attribute (line 1284):
        
        # Obtaining the type of the subscript
        int_37543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1284, 31), 'int')
        # Getting the type of 'boundaries' (line 1284)
        boundaries_37544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 20), 'boundaries')
        # Obtaining the member '__getitem__' of a type (line 1284)
        getitem___37545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 20), boundaries_37544, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1284)
        subscript_call_result_37546 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 20), getitem___37545, int_37543)
        
        # Getting the type of 'self' (line 1284)
        self_37547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 8), 'self')
        # Setting the type of the member 'vmin' of a type (line 1284)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 8), self_37547, 'vmin', subscript_call_result_37546)
        
        # Assigning a Subscript to a Attribute (line 1285):
        
        # Assigning a Subscript to a Attribute (line 1285):
        
        # Assigning a Subscript to a Attribute (line 1285):
        
        # Obtaining the type of the subscript
        int_37548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1285, 31), 'int')
        # Getting the type of 'boundaries' (line 1285)
        boundaries_37549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 20), 'boundaries')
        # Obtaining the member '__getitem__' of a type (line 1285)
        getitem___37550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 20), boundaries_37549, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1285)
        subscript_call_result_37551 = invoke(stypy.reporting.localization.Localization(__file__, 1285, 20), getitem___37550, int_37548)
        
        # Getting the type of 'self' (line 1285)
        self_37552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 8), 'self')
        # Setting the type of the member 'vmax' of a type (line 1285)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 8), self_37552, 'vmax', subscript_call_result_37551)
        
        # Assigning a Call to a Attribute (line 1286):
        
        # Assigning a Call to a Attribute (line 1286):
        
        # Assigning a Call to a Attribute (line 1286):
        
        # Call to asarray(...): (line 1286)
        # Processing the call arguments (line 1286)
        # Getting the type of 'boundaries' (line 1286)
        boundaries_37555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 37), 'boundaries', False)
        # Processing the call keyword arguments (line 1286)
        kwargs_37556 = {}
        # Getting the type of 'np' (line 1286)
        np_37553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 26), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1286)
        asarray_37554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1286, 26), np_37553, 'asarray')
        # Calling asarray(args, kwargs) (line 1286)
        asarray_call_result_37557 = invoke(stypy.reporting.localization.Localization(__file__, 1286, 26), asarray_37554, *[boundaries_37555], **kwargs_37556)
        
        # Getting the type of 'self' (line 1286)
        self_37558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 8), 'self')
        # Setting the type of the member 'boundaries' of a type (line 1286)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1286, 8), self_37558, 'boundaries', asarray_call_result_37557)
        
        # Assigning a Call to a Attribute (line 1287):
        
        # Assigning a Call to a Attribute (line 1287):
        
        # Assigning a Call to a Attribute (line 1287):
        
        # Call to len(...): (line 1287)
        # Processing the call arguments (line 1287)
        # Getting the type of 'self' (line 1287)
        self_37560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 21), 'self', False)
        # Obtaining the member 'boundaries' of a type (line 1287)
        boundaries_37561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1287, 21), self_37560, 'boundaries')
        # Processing the call keyword arguments (line 1287)
        kwargs_37562 = {}
        # Getting the type of 'len' (line 1287)
        len_37559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 17), 'len', False)
        # Calling len(args, kwargs) (line 1287)
        len_call_result_37563 = invoke(stypy.reporting.localization.Localization(__file__, 1287, 17), len_37559, *[boundaries_37561], **kwargs_37562)
        
        # Getting the type of 'self' (line 1287)
        self_37564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 8), 'self')
        # Setting the type of the member 'N' of a type (line 1287)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1287, 8), self_37564, 'N', len_call_result_37563)
        
        # Assigning a Name to a Attribute (line 1288):
        
        # Assigning a Name to a Attribute (line 1288):
        
        # Assigning a Name to a Attribute (line 1288):
        # Getting the type of 'ncolors' (line 1288)
        ncolors_37565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 21), 'ncolors')
        # Getting the type of 'self' (line 1288)
        self_37566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 8), 'self')
        # Setting the type of the member 'Ncmap' of a type (line 1288)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1288, 8), self_37566, 'Ncmap', ncolors_37565)
        
        
        # Getting the type of 'self' (line 1289)
        self_37567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 11), 'self')
        # Obtaining the member 'N' of a type (line 1289)
        N_37568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1289, 11), self_37567, 'N')
        int_37569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1289, 20), 'int')
        # Applying the binary operator '-' (line 1289)
        result_sub_37570 = python_operator(stypy.reporting.localization.Localization(__file__, 1289, 11), '-', N_37568, int_37569)
        
        # Getting the type of 'self' (line 1289)
        self_37571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 25), 'self')
        # Obtaining the member 'Ncmap' of a type (line 1289)
        Ncmap_37572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1289, 25), self_37571, 'Ncmap')
        # Applying the binary operator '==' (line 1289)
        result_eq_37573 = python_operator(stypy.reporting.localization.Localization(__file__, 1289, 11), '==', result_sub_37570, Ncmap_37572)
        
        # Testing the type of an if condition (line 1289)
        if_condition_37574 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1289, 8), result_eq_37573)
        # Assigning a type to the variable 'if_condition_37574' (line 1289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 8), 'if_condition_37574', if_condition_37574)
        # SSA begins for if statement (line 1289)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1290):
        
        # Assigning a Name to a Attribute (line 1290):
        
        # Assigning a Name to a Attribute (line 1290):
        # Getting the type of 'False' (line 1290)
        False_37575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 27), 'False')
        # Getting the type of 'self' (line 1290)
        self_37576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 12), 'self')
        # Setting the type of the member '_interp' of a type (line 1290)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1290, 12), self_37576, '_interp', False_37575)
        # SSA branch for the else part of an if statement (line 1289)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 1292):
        
        # Assigning a Name to a Attribute (line 1292):
        
        # Assigning a Name to a Attribute (line 1292):
        # Getting the type of 'True' (line 1292)
        True_37577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 27), 'True')
        # Getting the type of 'self' (line 1292)
        self_37578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 12), 'self')
        # Setting the type of the member '_interp' of a type (line 1292)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1292, 12), self_37578, '_interp', True_37577)
        # SSA join for if statement (line 1289)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1294)
        None_37579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 35), 'None')
        defaults = [None_37579]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1294, 4, False)
        # Assigning a type to the variable 'self' (line 1295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BoundaryNorm.__call__.__dict__.__setitem__('stypy_localization', localization)
        BoundaryNorm.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BoundaryNorm.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        BoundaryNorm.__call__.__dict__.__setitem__('stypy_function_name', 'BoundaryNorm.__call__')
        BoundaryNorm.__call__.__dict__.__setitem__('stypy_param_names_list', ['value', 'clip'])
        BoundaryNorm.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        BoundaryNorm.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BoundaryNorm.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        BoundaryNorm.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        BoundaryNorm.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BoundaryNorm.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BoundaryNorm.__call__', ['value', 'clip'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['value', 'clip'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1295)
        # Getting the type of 'clip' (line 1295)
        clip_37580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 11), 'clip')
        # Getting the type of 'None' (line 1295)
        None_37581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 19), 'None')
        
        (may_be_37582, more_types_in_union_37583) = may_be_none(clip_37580, None_37581)

        if may_be_37582:

            if more_types_in_union_37583:
                # Runtime conditional SSA (line 1295)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1296):
            
            # Assigning a Attribute to a Name (line 1296):
            
            # Assigning a Attribute to a Name (line 1296):
            # Getting the type of 'self' (line 1296)
            self_37584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 19), 'self')
            # Obtaining the member 'clip' of a type (line 1296)
            clip_37585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 19), self_37584, 'clip')
            # Assigning a type to the variable 'clip' (line 1296)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 12), 'clip', clip_37585)

            if more_types_in_union_37583:
                # SSA join for if statement (line 1295)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 1298):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to process_value(...): (line 1298)
        # Processing the call arguments (line 1298)
        # Getting the type of 'value' (line 1298)
        value_37588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 43), 'value', False)
        # Processing the call keyword arguments (line 1298)
        kwargs_37589 = {}
        # Getting the type of 'self' (line 1298)
        self_37586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 24), 'self', False)
        # Obtaining the member 'process_value' of a type (line 1298)
        process_value_37587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 24), self_37586, 'process_value')
        # Calling process_value(args, kwargs) (line 1298)
        process_value_call_result_37590 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 24), process_value_37587, *[value_37588], **kwargs_37589)
        
        # Assigning a type to the variable 'call_assignment_34257' (line 1298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'call_assignment_34257', process_value_call_result_37590)
        
        # Assigning a Call to a Name (line 1298):
        
        # Assigning a Call to a Name (line 1298):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_37593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 8), 'int')
        # Processing the call keyword arguments
        kwargs_37594 = {}
        # Getting the type of 'call_assignment_34257' (line 1298)
        call_assignment_34257_37591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'call_assignment_34257', False)
        # Obtaining the member '__getitem__' of a type (line 1298)
        getitem___37592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 8), call_assignment_34257_37591, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_37595 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___37592, *[int_37593], **kwargs_37594)
        
        # Assigning a type to the variable 'call_assignment_34258' (line 1298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'call_assignment_34258', getitem___call_result_37595)
        
        # Assigning a Name to a Name (line 1298):
        
        # Assigning a Name to a Name (line 1298):
        # Getting the type of 'call_assignment_34258' (line 1298)
        call_assignment_34258_37596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'call_assignment_34258')
        # Assigning a type to the variable 'xx' (line 1298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'xx', call_assignment_34258_37596)
        
        # Assigning a Call to a Name (line 1298):
        
        # Assigning a Call to a Name (line 1298):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_37599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 8), 'int')
        # Processing the call keyword arguments
        kwargs_37600 = {}
        # Getting the type of 'call_assignment_34257' (line 1298)
        call_assignment_34257_37597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'call_assignment_34257', False)
        # Obtaining the member '__getitem__' of a type (line 1298)
        getitem___37598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 8), call_assignment_34257_37597, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_37601 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___37598, *[int_37599], **kwargs_37600)
        
        # Assigning a type to the variable 'call_assignment_34259' (line 1298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'call_assignment_34259', getitem___call_result_37601)
        
        # Assigning a Name to a Name (line 1298):
        
        # Assigning a Name to a Name (line 1298):
        # Getting the type of 'call_assignment_34259' (line 1298)
        call_assignment_34259_37602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'call_assignment_34259')
        # Assigning a type to the variable 'is_scalar' (line 1298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 12), 'is_scalar', call_assignment_34259_37602)
        
        # Assigning a Call to a Name (line 1299):
        
        # Assigning a Call to a Name (line 1299):
        
        # Assigning a Call to a Name (line 1299):
        
        # Call to getmaskarray(...): (line 1299)
        # Processing the call arguments (line 1299)
        # Getting the type of 'xx' (line 1299)
        xx_37606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 34), 'xx', False)
        # Processing the call keyword arguments (line 1299)
        kwargs_37607 = {}
        # Getting the type of 'np' (line 1299)
        np_37603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 15), 'np', False)
        # Obtaining the member 'ma' of a type (line 1299)
        ma_37604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 15), np_37603, 'ma')
        # Obtaining the member 'getmaskarray' of a type (line 1299)
        getmaskarray_37605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 15), ma_37604, 'getmaskarray')
        # Calling getmaskarray(args, kwargs) (line 1299)
        getmaskarray_call_result_37608 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 15), getmaskarray_37605, *[xx_37606], **kwargs_37607)
        
        # Assigning a type to the variable 'mask' (line 1299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 8), 'mask', getmaskarray_call_result_37608)
        
        # Assigning a Call to a Name (line 1300):
        
        # Assigning a Call to a Name (line 1300):
        
        # Assigning a Call to a Name (line 1300):
        
        # Call to atleast_1d(...): (line 1300)
        # Processing the call arguments (line 1300)
        
        # Call to filled(...): (line 1300)
        # Processing the call arguments (line 1300)
        # Getting the type of 'self' (line 1300)
        self_37613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 37), 'self', False)
        # Obtaining the member 'vmax' of a type (line 1300)
        vmax_37614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1300, 37), self_37613, 'vmax')
        int_37615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1300, 49), 'int')
        # Applying the binary operator '+' (line 1300)
        result_add_37616 = python_operator(stypy.reporting.localization.Localization(__file__, 1300, 37), '+', vmax_37614, int_37615)
        
        # Processing the call keyword arguments (line 1300)
        kwargs_37617 = {}
        # Getting the type of 'xx' (line 1300)
        xx_37611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 27), 'xx', False)
        # Obtaining the member 'filled' of a type (line 1300)
        filled_37612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1300, 27), xx_37611, 'filled')
        # Calling filled(args, kwargs) (line 1300)
        filled_call_result_37618 = invoke(stypy.reporting.localization.Localization(__file__, 1300, 27), filled_37612, *[result_add_37616], **kwargs_37617)
        
        # Processing the call keyword arguments (line 1300)
        kwargs_37619 = {}
        # Getting the type of 'np' (line 1300)
        np_37609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 13), 'np', False)
        # Obtaining the member 'atleast_1d' of a type (line 1300)
        atleast_1d_37610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1300, 13), np_37609, 'atleast_1d')
        # Calling atleast_1d(args, kwargs) (line 1300)
        atleast_1d_call_result_37620 = invoke(stypy.reporting.localization.Localization(__file__, 1300, 13), atleast_1d_37610, *[filled_call_result_37618], **kwargs_37619)
        
        # Assigning a type to the variable 'xx' (line 1300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 8), 'xx', atleast_1d_call_result_37620)
        
        # Getting the type of 'clip' (line 1301)
        clip_37621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 11), 'clip')
        # Testing the type of an if condition (line 1301)
        if_condition_37622 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1301, 8), clip_37621)
        # Assigning a type to the variable 'if_condition_37622' (line 1301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 8), 'if_condition_37622', if_condition_37622)
        # SSA begins for if statement (line 1301)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to clip(...): (line 1302)
        # Processing the call arguments (line 1302)
        # Getting the type of 'xx' (line 1302)
        xx_37625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 20), 'xx', False)
        # Getting the type of 'self' (line 1302)
        self_37626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 24), 'self', False)
        # Obtaining the member 'vmin' of a type (line 1302)
        vmin_37627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 24), self_37626, 'vmin')
        # Getting the type of 'self' (line 1302)
        self_37628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 35), 'self', False)
        # Obtaining the member 'vmax' of a type (line 1302)
        vmax_37629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 35), self_37628, 'vmax')
        # Processing the call keyword arguments (line 1302)
        # Getting the type of 'xx' (line 1302)
        xx_37630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 50), 'xx', False)
        keyword_37631 = xx_37630
        kwargs_37632 = {'out': keyword_37631}
        # Getting the type of 'np' (line 1302)
        np_37623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 12), 'np', False)
        # Obtaining the member 'clip' of a type (line 1302)
        clip_37624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 12), np_37623, 'clip')
        # Calling clip(args, kwargs) (line 1302)
        clip_call_result_37633 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 12), clip_37624, *[xx_37625, vmin_37627, vmax_37629], **kwargs_37632)
        
        
        # Assigning a BinOp to a Name (line 1303):
        
        # Assigning a BinOp to a Name (line 1303):
        
        # Assigning a BinOp to a Name (line 1303):
        # Getting the type of 'self' (line 1303)
        self_37634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 22), 'self')
        # Obtaining the member 'Ncmap' of a type (line 1303)
        Ncmap_37635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1303, 22), self_37634, 'Ncmap')
        int_37636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 35), 'int')
        # Applying the binary operator '-' (line 1303)
        result_sub_37637 = python_operator(stypy.reporting.localization.Localization(__file__, 1303, 22), '-', Ncmap_37635, int_37636)
        
        # Assigning a type to the variable 'max_col' (line 1303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 12), 'max_col', result_sub_37637)
        # SSA branch for the else part of an if statement (line 1301)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 1305):
        
        # Assigning a Attribute to a Name (line 1305):
        
        # Assigning a Attribute to a Name (line 1305):
        # Getting the type of 'self' (line 1305)
        self_37638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 22), 'self')
        # Obtaining the member 'Ncmap' of a type (line 1305)
        Ncmap_37639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 22), self_37638, 'Ncmap')
        # Assigning a type to the variable 'max_col' (line 1305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 12), 'max_col', Ncmap_37639)
        # SSA join for if statement (line 1301)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1306):
        
        # Assigning a Call to a Name (line 1306):
        
        # Assigning a Call to a Name (line 1306):
        
        # Call to zeros(...): (line 1306)
        # Processing the call arguments (line 1306)
        # Getting the type of 'xx' (line 1306)
        xx_37642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 24), 'xx', False)
        # Obtaining the member 'shape' of a type (line 1306)
        shape_37643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1306, 24), xx_37642, 'shape')
        # Processing the call keyword arguments (line 1306)
        # Getting the type of 'np' (line 1306)
        np_37644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 40), 'np', False)
        # Obtaining the member 'int16' of a type (line 1306)
        int16_37645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1306, 40), np_37644, 'int16')
        keyword_37646 = int16_37645
        kwargs_37647 = {'dtype': keyword_37646}
        # Getting the type of 'np' (line 1306)
        np_37640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 15), 'np', False)
        # Obtaining the member 'zeros' of a type (line 1306)
        zeros_37641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1306, 15), np_37640, 'zeros')
        # Calling zeros(args, kwargs) (line 1306)
        zeros_call_result_37648 = invoke(stypy.reporting.localization.Localization(__file__, 1306, 15), zeros_37641, *[shape_37643], **kwargs_37647)
        
        # Assigning a type to the variable 'iret' (line 1306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1306, 8), 'iret', zeros_call_result_37648)
        
        
        # Call to enumerate(...): (line 1307)
        # Processing the call arguments (line 1307)
        # Getting the type of 'self' (line 1307)
        self_37650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 30), 'self', False)
        # Obtaining the member 'boundaries' of a type (line 1307)
        boundaries_37651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 30), self_37650, 'boundaries')
        # Processing the call keyword arguments (line 1307)
        kwargs_37652 = {}
        # Getting the type of 'enumerate' (line 1307)
        enumerate_37649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 20), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 1307)
        enumerate_call_result_37653 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 20), enumerate_37649, *[boundaries_37651], **kwargs_37652)
        
        # Testing the type of a for loop iterable (line 1307)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1307, 8), enumerate_call_result_37653)
        # Getting the type of the for loop variable (line 1307)
        for_loop_var_37654 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1307, 8), enumerate_call_result_37653)
        # Assigning a type to the variable 'i' (line 1307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1307, 8), for_loop_var_37654))
        # Assigning a type to the variable 'b' (line 1307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 8), 'b', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1307, 8), for_loop_var_37654))
        # SSA begins for a for statement (line 1307)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Name to a Subscript (line 1308):
        
        # Assigning a Name to a Subscript (line 1308):
        
        # Assigning a Name to a Subscript (line 1308):
        # Getting the type of 'i' (line 1308)
        i_37655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 28), 'i')
        # Getting the type of 'iret' (line 1308)
        iret_37656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 12), 'iret')
        
        # Getting the type of 'xx' (line 1308)
        xx_37657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 17), 'xx')
        # Getting the type of 'b' (line 1308)
        b_37658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 23), 'b')
        # Applying the binary operator '>=' (line 1308)
        result_ge_37659 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 17), '>=', xx_37657, b_37658)
        
        # Storing an element on a container (line 1308)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1308, 12), iret_37656, (result_ge_37659, i_37655))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1309)
        self_37660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 11), 'self')
        # Obtaining the member '_interp' of a type (line 1309)
        _interp_37661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 11), self_37660, '_interp')
        # Testing the type of an if condition (line 1309)
        if_condition_37662 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1309, 8), _interp_37661)
        # Assigning a type to the variable 'if_condition_37662' (line 1309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1309, 8), 'if_condition_37662', if_condition_37662)
        # SSA begins for if statement (line 1309)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1310):
        
        # Assigning a BinOp to a Name (line 1310):
        
        # Assigning a BinOp to a Name (line 1310):
        
        # Call to float(...): (line 1310)
        # Processing the call arguments (line 1310)
        # Getting the type of 'self' (line 1310)
        self_37664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 29), 'self', False)
        # Obtaining the member 'Ncmap' of a type (line 1310)
        Ncmap_37665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1310, 29), self_37664, 'Ncmap')
        int_37666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1310, 42), 'int')
        # Applying the binary operator '-' (line 1310)
        result_sub_37667 = python_operator(stypy.reporting.localization.Localization(__file__, 1310, 29), '-', Ncmap_37665, int_37666)
        
        # Processing the call keyword arguments (line 1310)
        kwargs_37668 = {}
        # Getting the type of 'float' (line 1310)
        float_37663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 23), 'float', False)
        # Calling float(args, kwargs) (line 1310)
        float_call_result_37669 = invoke(stypy.reporting.localization.Localization(__file__, 1310, 23), float_37663, *[result_sub_37667], **kwargs_37668)
        
        # Getting the type of 'self' (line 1310)
        self_37670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 48), 'self')
        # Obtaining the member 'N' of a type (line 1310)
        N_37671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1310, 48), self_37670, 'N')
        int_37672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1310, 57), 'int')
        # Applying the binary operator '-' (line 1310)
        result_sub_37673 = python_operator(stypy.reporting.localization.Localization(__file__, 1310, 48), '-', N_37671, int_37672)
        
        # Applying the binary operator 'div' (line 1310)
        result_div_37674 = python_operator(stypy.reporting.localization.Localization(__file__, 1310, 23), 'div', float_call_result_37669, result_sub_37673)
        
        # Assigning a type to the variable 'scalefac' (line 1310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1310, 12), 'scalefac', result_div_37674)
        
        # Assigning a Call to a Name (line 1311):
        
        # Assigning a Call to a Name (line 1311):
        
        # Assigning a Call to a Name (line 1311):
        
        # Call to astype(...): (line 1311)
        # Processing the call arguments (line 1311)
        # Getting the type of 'np' (line 1311)
        np_37679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 44), 'np', False)
        # Obtaining the member 'int16' of a type (line 1311)
        int16_37680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 44), np_37679, 'int16')
        # Processing the call keyword arguments (line 1311)
        kwargs_37681 = {}
        # Getting the type of 'iret' (line 1311)
        iret_37675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 20), 'iret', False)
        # Getting the type of 'scalefac' (line 1311)
        scalefac_37676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 27), 'scalefac', False)
        # Applying the binary operator '*' (line 1311)
        result_mul_37677 = python_operator(stypy.reporting.localization.Localization(__file__, 1311, 20), '*', iret_37675, scalefac_37676)
        
        # Obtaining the member 'astype' of a type (line 1311)
        astype_37678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 20), result_mul_37677, 'astype')
        # Calling astype(args, kwargs) (line 1311)
        astype_call_result_37682 = invoke(stypy.reporting.localization.Localization(__file__, 1311, 20), astype_37678, *[int16_37680], **kwargs_37681)
        
        # Assigning a type to the variable 'iret' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 12), 'iret', astype_call_result_37682)
        # SSA join for if statement (line 1309)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Subscript (line 1312):
        
        # Assigning a Num to a Subscript (line 1312):
        
        # Assigning a Num to a Subscript (line 1312):
        int_37683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 31), 'int')
        # Getting the type of 'iret' (line 1312)
        iret_37684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 8), 'iret')
        
        # Getting the type of 'xx' (line 1312)
        xx_37685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 13), 'xx')
        # Getting the type of 'self' (line 1312)
        self_37686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 18), 'self')
        # Obtaining the member 'vmin' of a type (line 1312)
        vmin_37687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 18), self_37686, 'vmin')
        # Applying the binary operator '<' (line 1312)
        result_lt_37688 = python_operator(stypy.reporting.localization.Localization(__file__, 1312, 13), '<', xx_37685, vmin_37687)
        
        # Storing an element on a container (line 1312)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1312, 8), iret_37684, (result_lt_37688, int_37683))
        
        # Assigning a Name to a Subscript (line 1313):
        
        # Assigning a Name to a Subscript (line 1313):
        
        # Assigning a Name to a Subscript (line 1313):
        # Getting the type of 'max_col' (line 1313)
        max_col_37689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 32), 'max_col')
        # Getting the type of 'iret' (line 1313)
        iret_37690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 8), 'iret')
        
        # Getting the type of 'xx' (line 1313)
        xx_37691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 13), 'xx')
        # Getting the type of 'self' (line 1313)
        self_37692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 19), 'self')
        # Obtaining the member 'vmax' of a type (line 1313)
        vmax_37693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 19), self_37692, 'vmax')
        # Applying the binary operator '>=' (line 1313)
        result_ge_37694 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 13), '>=', xx_37691, vmax_37693)
        
        # Storing an element on a container (line 1313)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1313, 8), iret_37690, (result_ge_37694, max_col_37689))
        
        # Assigning a Call to a Name (line 1314):
        
        # Assigning a Call to a Name (line 1314):
        
        # Assigning a Call to a Name (line 1314):
        
        # Call to array(...): (line 1314)
        # Processing the call arguments (line 1314)
        # Getting the type of 'iret' (line 1314)
        iret_37698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 26), 'iret', False)
        # Processing the call keyword arguments (line 1314)
        # Getting the type of 'mask' (line 1314)
        mask_37699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 37), 'mask', False)
        keyword_37700 = mask_37699
        kwargs_37701 = {'mask': keyword_37700}
        # Getting the type of 'np' (line 1314)
        np_37695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 14), 'np', False)
        # Obtaining the member 'ma' of a type (line 1314)
        ma_37696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 14), np_37695, 'ma')
        # Obtaining the member 'array' of a type (line 1314)
        array_37697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 14), ma_37696, 'array')
        # Calling array(args, kwargs) (line 1314)
        array_call_result_37702 = invoke(stypy.reporting.localization.Localization(__file__, 1314, 14), array_37697, *[iret_37698], **kwargs_37701)
        
        # Assigning a type to the variable 'ret' (line 1314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 8), 'ret', array_call_result_37702)
        
        # Getting the type of 'is_scalar' (line 1315)
        is_scalar_37703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 11), 'is_scalar')
        # Testing the type of an if condition (line 1315)
        if_condition_37704 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1315, 8), is_scalar_37703)
        # Assigning a type to the variable 'if_condition_37704' (line 1315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1315, 8), 'if_condition_37704', if_condition_37704)
        # SSA begins for if statement (line 1315)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1316):
        
        # Assigning a Call to a Name (line 1316):
        
        # Assigning a Call to a Name (line 1316):
        
        # Call to int(...): (line 1316)
        # Processing the call arguments (line 1316)
        
        # Obtaining the type of the subscript
        int_37706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 26), 'int')
        # Getting the type of 'ret' (line 1316)
        ret_37707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 22), 'ret', False)
        # Obtaining the member '__getitem__' of a type (line 1316)
        getitem___37708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 22), ret_37707, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1316)
        subscript_call_result_37709 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 22), getitem___37708, int_37706)
        
        # Processing the call keyword arguments (line 1316)
        kwargs_37710 = {}
        # Getting the type of 'int' (line 1316)
        int_37705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 18), 'int', False)
        # Calling int(args, kwargs) (line 1316)
        int_call_result_37711 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 18), int_37705, *[subscript_call_result_37709], **kwargs_37710)
        
        # Assigning a type to the variable 'ret' (line 1316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 12), 'ret', int_call_result_37711)
        # SSA join for if statement (line 1315)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'ret' (line 1317)
        ret_37712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 15), 'ret')
        # Assigning a type to the variable 'stypy_return_type' (line 1317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1317, 8), 'stypy_return_type', ret_37712)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1294)
        stypy_return_type_37713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37713)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_37713


    @norecursion
    def inverse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inverse'
        module_type_store = module_type_store.open_function_context('inverse', 1319, 4, False)
        # Assigning a type to the variable 'self' (line 1320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BoundaryNorm.inverse.__dict__.__setitem__('stypy_localization', localization)
        BoundaryNorm.inverse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BoundaryNorm.inverse.__dict__.__setitem__('stypy_type_store', module_type_store)
        BoundaryNorm.inverse.__dict__.__setitem__('stypy_function_name', 'BoundaryNorm.inverse')
        BoundaryNorm.inverse.__dict__.__setitem__('stypy_param_names_list', ['value'])
        BoundaryNorm.inverse.__dict__.__setitem__('stypy_varargs_param_name', None)
        BoundaryNorm.inverse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BoundaryNorm.inverse.__dict__.__setitem__('stypy_call_defaults', defaults)
        BoundaryNorm.inverse.__dict__.__setitem__('stypy_call_varargs', varargs)
        BoundaryNorm.inverse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BoundaryNorm.inverse.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BoundaryNorm.inverse', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inverse', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inverse(...)' code ##################

        unicode_37714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1326, (-1)), 'unicode', u'\n        Raises\n        ------\n        ValueError\n            BoundaryNorm is not invertible, so calling this method will always\n            raise an error\n        ')
        
        # Call to ValueError(...): (line 1327)
        # Processing the call arguments (line 1327)
        unicode_37716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 26), 'unicode', u'BoundaryNorm is not invertible')
        # Processing the call keyword arguments (line 1327)
        kwargs_37717 = {}
        # Getting the type of 'ValueError' (line 1327)
        ValueError_37715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 15), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1327)
        ValueError_call_result_37718 = invoke(stypy.reporting.localization.Localization(__file__, 1327, 15), ValueError_37715, *[unicode_37716], **kwargs_37717)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 8), 'stypy_return_type', ValueError_call_result_37718)
        
        # ################# End of 'inverse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inverse' in the type store
        # Getting the type of 'stypy_return_type' (line 1319)
        stypy_return_type_37719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37719)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inverse'
        return stypy_return_type_37719


# Assigning a type to the variable 'BoundaryNorm' (line 1244)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1244, 0), 'BoundaryNorm', BoundaryNorm)
# Declaration of the 'NoNorm' class
# Getting the type of 'Normalize' (line 1330)
Normalize_37720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 13), 'Normalize')

class NoNorm(Normalize_37720, ):
    unicode_37721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1335, (-1)), 'unicode', u'\n    Dummy replacement for Normalize, for the case where we\n    want to use indices directly in a\n    :class:`~matplotlib.cm.ScalarMappable` .\n    ')

    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1336)
        None_37722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 35), 'None')
        defaults = [None_37722]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1336, 4, False)
        # Assigning a type to the variable 'self' (line 1337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NoNorm.__call__.__dict__.__setitem__('stypy_localization', localization)
        NoNorm.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NoNorm.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        NoNorm.__call__.__dict__.__setitem__('stypy_function_name', 'NoNorm.__call__')
        NoNorm.__call__.__dict__.__setitem__('stypy_param_names_list', ['value', 'clip'])
        NoNorm.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        NoNorm.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NoNorm.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        NoNorm.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        NoNorm.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NoNorm.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NoNorm.__call__', ['value', 'clip'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['value', 'clip'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        # Getting the type of 'value' (line 1337)
        value_37723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 15), 'value')
        # Assigning a type to the variable 'stypy_return_type' (line 1337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 8), 'stypy_return_type', value_37723)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1336)
        stypy_return_type_37724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37724)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_37724


    @norecursion
    def inverse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inverse'
        module_type_store = module_type_store.open_function_context('inverse', 1339, 4, False)
        # Assigning a type to the variable 'self' (line 1340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NoNorm.inverse.__dict__.__setitem__('stypy_localization', localization)
        NoNorm.inverse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NoNorm.inverse.__dict__.__setitem__('stypy_type_store', module_type_store)
        NoNorm.inverse.__dict__.__setitem__('stypy_function_name', 'NoNorm.inverse')
        NoNorm.inverse.__dict__.__setitem__('stypy_param_names_list', ['value'])
        NoNorm.inverse.__dict__.__setitem__('stypy_varargs_param_name', None)
        NoNorm.inverse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NoNorm.inverse.__dict__.__setitem__('stypy_call_defaults', defaults)
        NoNorm.inverse.__dict__.__setitem__('stypy_call_varargs', varargs)
        NoNorm.inverse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NoNorm.inverse.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NoNorm.inverse', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inverse', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inverse(...)' code ##################

        # Getting the type of 'value' (line 1340)
        value_37725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 15), 'value')
        # Assigning a type to the variable 'stypy_return_type' (line 1340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'stypy_return_type', value_37725)
        
        # ################# End of 'inverse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inverse' in the type store
        # Getting the type of 'stypy_return_type' (line 1339)
        stypy_return_type_37726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_37726)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inverse'
        return stypy_return_type_37726


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1330, 0, False)
        # Assigning a type to the variable 'self' (line 1331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1331, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NoNorm.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'NoNorm' (line 1330)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1330, 0), 'NoNorm', NoNorm)

@norecursion
def rgb_to_hsv(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rgb_to_hsv'
    module_type_store = module_type_store.open_function_context('rgb_to_hsv', 1343, 0, False)
    
    # Passed parameters checking function
    rgb_to_hsv.stypy_localization = localization
    rgb_to_hsv.stypy_type_of_self = None
    rgb_to_hsv.stypy_type_store = module_type_store
    rgb_to_hsv.stypy_function_name = 'rgb_to_hsv'
    rgb_to_hsv.stypy_param_names_list = ['arr']
    rgb_to_hsv.stypy_varargs_param_name = None
    rgb_to_hsv.stypy_kwargs_param_name = None
    rgb_to_hsv.stypy_call_defaults = defaults
    rgb_to_hsv.stypy_call_varargs = varargs
    rgb_to_hsv.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rgb_to_hsv', ['arr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rgb_to_hsv', localization, ['arr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rgb_to_hsv(...)' code ##################

    unicode_37727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1357, (-1)), 'unicode', u'\n    convert float rgb values (in the range [0, 1]), in a numpy array to hsv\n    values.\n\n    Parameters\n    ----------\n    arr : (..., 3) array-like\n       All values must be in the range [0, 1]\n\n    Returns\n    -------\n    hsv : (..., 3) ndarray\n       Colors converted to hsv values in range [0, 1]\n    ')
    
    # Assigning a Call to a Name (line 1359):
    
    # Assigning a Call to a Name (line 1359):
    
    # Assigning a Call to a Name (line 1359):
    
    # Call to asarray(...): (line 1359)
    # Processing the call arguments (line 1359)
    # Getting the type of 'arr' (line 1359)
    arr_37730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 21), 'arr', False)
    # Processing the call keyword arguments (line 1359)
    kwargs_37731 = {}
    # Getting the type of 'np' (line 1359)
    np_37728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 10), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1359)
    asarray_37729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 10), np_37728, 'asarray')
    # Calling asarray(args, kwargs) (line 1359)
    asarray_call_result_37732 = invoke(stypy.reporting.localization.Localization(__file__, 1359, 10), asarray_37729, *[arr_37730], **kwargs_37731)
    
    # Assigning a type to the variable 'arr' (line 1359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 4), 'arr', asarray_call_result_37732)
    
    
    
    # Obtaining the type of the subscript
    int_37733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1362, 17), 'int')
    # Getting the type of 'arr' (line 1362)
    arr_37734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 7), 'arr')
    # Obtaining the member 'shape' of a type (line 1362)
    shape_37735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 7), arr_37734, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1362)
    getitem___37736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 7), shape_37735, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1362)
    subscript_call_result_37737 = invoke(stypy.reporting.localization.Localization(__file__, 1362, 7), getitem___37736, int_37733)
    
    int_37738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1362, 24), 'int')
    # Applying the binary operator '!=' (line 1362)
    result_ne_37739 = python_operator(stypy.reporting.localization.Localization(__file__, 1362, 7), '!=', subscript_call_result_37737, int_37738)
    
    # Testing the type of an if condition (line 1362)
    if_condition_37740 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1362, 4), result_ne_37739)
    # Assigning a type to the variable 'if_condition_37740' (line 1362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 4), 'if_condition_37740', if_condition_37740)
    # SSA begins for if statement (line 1362)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1363)
    # Processing the call arguments (line 1363)
    
    # Call to format(...): (line 1363)
    # Processing the call arguments (line 1363)
    # Getting the type of 'arr' (line 1364)
    arr_37744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 54), 'arr', False)
    # Obtaining the member 'shape' of a type (line 1364)
    shape_37745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1364, 54), arr_37744, 'shape')
    # Processing the call keyword arguments (line 1363)
    kwargs_37746 = {}
    unicode_37742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1363, 25), 'unicode', u'Last dimension of input array must be 3; shape {} was found.')
    # Obtaining the member 'format' of a type (line 1363)
    format_37743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1363, 25), unicode_37742, 'format')
    # Calling format(args, kwargs) (line 1363)
    format_call_result_37747 = invoke(stypy.reporting.localization.Localization(__file__, 1363, 25), format_37743, *[shape_37745], **kwargs_37746)
    
    # Processing the call keyword arguments (line 1363)
    kwargs_37748 = {}
    # Getting the type of 'ValueError' (line 1363)
    ValueError_37741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1363)
    ValueError_call_result_37749 = invoke(stypy.reporting.localization.Localization(__file__, 1363, 14), ValueError_37741, *[format_call_result_37747], **kwargs_37748)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1363, 8), ValueError_call_result_37749, 'raise parameter', BaseException)
    # SSA join for if statement (line 1362)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 1366):
    
    # Assigning a Attribute to a Name (line 1366):
    
    # Assigning a Attribute to a Name (line 1366):
    # Getting the type of 'arr' (line 1366)
    arr_37750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 14), 'arr')
    # Obtaining the member 'ndim' of a type (line 1366)
    ndim_37751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 14), arr_37750, 'ndim')
    # Assigning a type to the variable 'in_ndim' (line 1366)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 4), 'in_ndim', ndim_37751)
    
    
    # Getting the type of 'arr' (line 1367)
    arr_37752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 7), 'arr')
    # Obtaining the member 'ndim' of a type (line 1367)
    ndim_37753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 7), arr_37752, 'ndim')
    int_37754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1367, 19), 'int')
    # Applying the binary operator '==' (line 1367)
    result_eq_37755 = python_operator(stypy.reporting.localization.Localization(__file__, 1367, 7), '==', ndim_37753, int_37754)
    
    # Testing the type of an if condition (line 1367)
    if_condition_37756 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1367, 4), result_eq_37755)
    # Assigning a type to the variable 'if_condition_37756' (line 1367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 4), 'if_condition_37756', if_condition_37756)
    # SSA begins for if statement (line 1367)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1368):
    
    # Assigning a Call to a Name (line 1368):
    
    # Assigning a Call to a Name (line 1368):
    
    # Call to array(...): (line 1368)
    # Processing the call arguments (line 1368)
    # Getting the type of 'arr' (line 1368)
    arr_37759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 23), 'arr', False)
    # Processing the call keyword arguments (line 1368)
    int_37760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1368, 34), 'int')
    keyword_37761 = int_37760
    kwargs_37762 = {'ndmin': keyword_37761}
    # Getting the type of 'np' (line 1368)
    np_37757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 14), 'np', False)
    # Obtaining the member 'array' of a type (line 1368)
    array_37758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 14), np_37757, 'array')
    # Calling array(args, kwargs) (line 1368)
    array_call_result_37763 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 14), array_37758, *[arr_37759], **kwargs_37762)
    
    # Assigning a type to the variable 'arr' (line 1368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 8), 'arr', array_call_result_37763)
    # SSA join for if statement (line 1367)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1371):
    
    # Assigning a Call to a Name (line 1371):
    
    # Assigning a Call to a Name (line 1371):
    
    # Call to astype(...): (line 1371)
    # Processing the call arguments (line 1371)
    
    # Call to promote_types(...): (line 1371)
    # Processing the call arguments (line 1371)
    # Getting the type of 'arr' (line 1371)
    arr_37768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 38), 'arr', False)
    # Obtaining the member 'dtype' of a type (line 1371)
    dtype_37769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 38), arr_37768, 'dtype')
    # Getting the type of 'np' (line 1371)
    np_37770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 49), 'np', False)
    # Obtaining the member 'float32' of a type (line 1371)
    float32_37771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 49), np_37770, 'float32')
    # Processing the call keyword arguments (line 1371)
    kwargs_37772 = {}
    # Getting the type of 'np' (line 1371)
    np_37766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 21), 'np', False)
    # Obtaining the member 'promote_types' of a type (line 1371)
    promote_types_37767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 21), np_37766, 'promote_types')
    # Calling promote_types(args, kwargs) (line 1371)
    promote_types_call_result_37773 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 21), promote_types_37767, *[dtype_37769, float32_37771], **kwargs_37772)
    
    # Processing the call keyword arguments (line 1371)
    kwargs_37774 = {}
    # Getting the type of 'arr' (line 1371)
    arr_37764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 10), 'arr', False)
    # Obtaining the member 'astype' of a type (line 1371)
    astype_37765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 10), arr_37764, 'astype')
    # Calling astype(args, kwargs) (line 1371)
    astype_call_result_37775 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 10), astype_37765, *[promote_types_call_result_37773], **kwargs_37774)
    
    # Assigning a type to the variable 'arr' (line 1371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 4), 'arr', astype_call_result_37775)
    
    # Assigning a Call to a Name (line 1373):
    
    # Assigning a Call to a Name (line 1373):
    
    # Assigning a Call to a Name (line 1373):
    
    # Call to zeros_like(...): (line 1373)
    # Processing the call arguments (line 1373)
    # Getting the type of 'arr' (line 1373)
    arr_37778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 24), 'arr', False)
    # Processing the call keyword arguments (line 1373)
    kwargs_37779 = {}
    # Getting the type of 'np' (line 1373)
    np_37776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 10), 'np', False)
    # Obtaining the member 'zeros_like' of a type (line 1373)
    zeros_like_37777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1373, 10), np_37776, 'zeros_like')
    # Calling zeros_like(args, kwargs) (line 1373)
    zeros_like_call_result_37780 = invoke(stypy.reporting.localization.Localization(__file__, 1373, 10), zeros_like_37777, *[arr_37778], **kwargs_37779)
    
    # Assigning a type to the variable 'out' (line 1373)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 4), 'out', zeros_like_call_result_37780)
    
    # Assigning a Call to a Name (line 1374):
    
    # Assigning a Call to a Name (line 1374):
    
    # Assigning a Call to a Name (line 1374):
    
    # Call to max(...): (line 1374)
    # Processing the call arguments (line 1374)
    int_37783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1374, 22), 'int')
    # Processing the call keyword arguments (line 1374)
    kwargs_37784 = {}
    # Getting the type of 'arr' (line 1374)
    arr_37781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 14), 'arr', False)
    # Obtaining the member 'max' of a type (line 1374)
    max_37782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1374, 14), arr_37781, 'max')
    # Calling max(args, kwargs) (line 1374)
    max_call_result_37785 = invoke(stypy.reporting.localization.Localization(__file__, 1374, 14), max_37782, *[int_37783], **kwargs_37784)
    
    # Assigning a type to the variable 'arr_max' (line 1374)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1374, 4), 'arr_max', max_call_result_37785)
    
    # Assigning a Compare to a Name (line 1375):
    
    # Assigning a Compare to a Name (line 1375):
    
    # Assigning a Compare to a Name (line 1375):
    
    # Getting the type of 'arr_max' (line 1375)
    arr_max_37786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 11), 'arr_max')
    int_37787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 21), 'int')
    # Applying the binary operator '>' (line 1375)
    result_gt_37788 = python_operator(stypy.reporting.localization.Localization(__file__, 1375, 11), '>', arr_max_37786, int_37787)
    
    # Assigning a type to the variable 'ipos' (line 1375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 4), 'ipos', result_gt_37788)
    
    # Assigning a Call to a Name (line 1376):
    
    # Assigning a Call to a Name (line 1376):
    
    # Assigning a Call to a Name (line 1376):
    
    # Call to ptp(...): (line 1376)
    # Processing the call arguments (line 1376)
    int_37791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1376, 20), 'int')
    # Processing the call keyword arguments (line 1376)
    kwargs_37792 = {}
    # Getting the type of 'arr' (line 1376)
    arr_37789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 12), 'arr', False)
    # Obtaining the member 'ptp' of a type (line 1376)
    ptp_37790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 12), arr_37789, 'ptp')
    # Calling ptp(args, kwargs) (line 1376)
    ptp_call_result_37793 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 12), ptp_37790, *[int_37791], **kwargs_37792)
    
    # Assigning a type to the variable 'delta' (line 1376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 4), 'delta', ptp_call_result_37793)
    
    # Assigning a Call to a Name (line 1377):
    
    # Assigning a Call to a Name (line 1377):
    
    # Assigning a Call to a Name (line 1377):
    
    # Call to zeros_like(...): (line 1377)
    # Processing the call arguments (line 1377)
    # Getting the type of 'delta' (line 1377)
    delta_37796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 22), 'delta', False)
    # Processing the call keyword arguments (line 1377)
    kwargs_37797 = {}
    # Getting the type of 'np' (line 1377)
    np_37794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 8), 'np', False)
    # Obtaining the member 'zeros_like' of a type (line 1377)
    zeros_like_37795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 8), np_37794, 'zeros_like')
    # Calling zeros_like(args, kwargs) (line 1377)
    zeros_like_call_result_37798 = invoke(stypy.reporting.localization.Localization(__file__, 1377, 8), zeros_like_37795, *[delta_37796], **kwargs_37797)
    
    # Assigning a type to the variable 's' (line 1377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1377, 4), 's', zeros_like_call_result_37798)
    
    # Assigning a BinOp to a Subscript (line 1378):
    
    # Assigning a BinOp to a Subscript (line 1378):
    
    # Assigning a BinOp to a Subscript (line 1378):
    
    # Obtaining the type of the subscript
    # Getting the type of 'ipos' (line 1378)
    ipos_37799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 20), 'ipos')
    # Getting the type of 'delta' (line 1378)
    delta_37800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 14), 'delta')
    # Obtaining the member '__getitem__' of a type (line 1378)
    getitem___37801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 14), delta_37800, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1378)
    subscript_call_result_37802 = invoke(stypy.reporting.localization.Localization(__file__, 1378, 14), getitem___37801, ipos_37799)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'ipos' (line 1378)
    ipos_37803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 36), 'ipos')
    # Getting the type of 'arr_max' (line 1378)
    arr_max_37804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 28), 'arr_max')
    # Obtaining the member '__getitem__' of a type (line 1378)
    getitem___37805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 28), arr_max_37804, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1378)
    subscript_call_result_37806 = invoke(stypy.reporting.localization.Localization(__file__, 1378, 28), getitem___37805, ipos_37803)
    
    # Applying the binary operator 'div' (line 1378)
    result_div_37807 = python_operator(stypy.reporting.localization.Localization(__file__, 1378, 14), 'div', subscript_call_result_37802, subscript_call_result_37806)
    
    # Getting the type of 's' (line 1378)
    s_37808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 4), 's')
    # Getting the type of 'ipos' (line 1378)
    ipos_37809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 6), 'ipos')
    # Storing an element on a container (line 1378)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1378, 4), s_37808, (ipos_37809, result_div_37807))
    
    # Assigning a Compare to a Name (line 1379):
    
    # Assigning a Compare to a Name (line 1379):
    
    # Assigning a Compare to a Name (line 1379):
    
    # Getting the type of 'delta' (line 1379)
    delta_37810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 11), 'delta')
    int_37811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 19), 'int')
    # Applying the binary operator '>' (line 1379)
    result_gt_37812 = python_operator(stypy.reporting.localization.Localization(__file__, 1379, 11), '>', delta_37810, int_37811)
    
    # Assigning a type to the variable 'ipos' (line 1379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 4), 'ipos', result_gt_37812)
    
    # Assigning a BinOp to a Name (line 1381):
    
    # Assigning a BinOp to a Name (line 1381):
    
    # Assigning a BinOp to a Name (line 1381):
    
    
    # Obtaining the type of the subscript
    Ellipsis_37813 = Ellipsis
    int_37814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, 20), 'int')
    # Getting the type of 'arr' (line 1381)
    arr_37815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 11), 'arr')
    # Obtaining the member '__getitem__' of a type (line 1381)
    getitem___37816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1381, 11), arr_37815, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1381)
    subscript_call_result_37817 = invoke(stypy.reporting.localization.Localization(__file__, 1381, 11), getitem___37816, (Ellipsis_37813, int_37814))
    
    # Getting the type of 'arr_max' (line 1381)
    arr_max_37818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 26), 'arr_max')
    # Applying the binary operator '==' (line 1381)
    result_eq_37819 = python_operator(stypy.reporting.localization.Localization(__file__, 1381, 11), '==', subscript_call_result_37817, arr_max_37818)
    
    # Getting the type of 'ipos' (line 1381)
    ipos_37820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 37), 'ipos')
    # Applying the binary operator '&' (line 1381)
    result_and__37821 = python_operator(stypy.reporting.localization.Localization(__file__, 1381, 10), '&', result_eq_37819, ipos_37820)
    
    # Assigning a type to the variable 'idx' (line 1381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 4), 'idx', result_and__37821)
    
    # Assigning a BinOp to a Subscript (line 1382):
    
    # Assigning a BinOp to a Subscript (line 1382):
    
    # Assigning a BinOp to a Subscript (line 1382):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1382)
    tuple_37822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1382)
    # Adding element type (line 1382)
    # Getting the type of 'idx' (line 1382)
    idx_37823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 23), 'idx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 23), tuple_37822, idx_37823)
    # Adding element type (line 1382)
    int_37824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 28), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 23), tuple_37822, int_37824)
    
    # Getting the type of 'arr' (line 1382)
    arr_37825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 19), 'arr')
    # Obtaining the member '__getitem__' of a type (line 1382)
    getitem___37826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1382, 19), arr_37825, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1382)
    subscript_call_result_37827 = invoke(stypy.reporting.localization.Localization(__file__, 1382, 19), getitem___37826, tuple_37822)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1382)
    tuple_37828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1382)
    # Adding element type (line 1382)
    # Getting the type of 'idx' (line 1382)
    idx_37829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 37), 'idx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 37), tuple_37828, idx_37829)
    # Adding element type (line 1382)
    int_37830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 42), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 37), tuple_37828, int_37830)
    
    # Getting the type of 'arr' (line 1382)
    arr_37831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 33), 'arr')
    # Obtaining the member '__getitem__' of a type (line 1382)
    getitem___37832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1382, 33), arr_37831, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1382)
    subscript_call_result_37833 = invoke(stypy.reporting.localization.Localization(__file__, 1382, 33), getitem___37832, tuple_37828)
    
    # Applying the binary operator '-' (line 1382)
    result_sub_37834 = python_operator(stypy.reporting.localization.Localization(__file__, 1382, 19), '-', subscript_call_result_37827, subscript_call_result_37833)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1382)
    idx_37835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 54), 'idx')
    # Getting the type of 'delta' (line 1382)
    delta_37836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 48), 'delta')
    # Obtaining the member '__getitem__' of a type (line 1382)
    getitem___37837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1382, 48), delta_37836, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1382)
    subscript_call_result_37838 = invoke(stypy.reporting.localization.Localization(__file__, 1382, 48), getitem___37837, idx_37835)
    
    # Applying the binary operator 'div' (line 1382)
    result_div_37839 = python_operator(stypy.reporting.localization.Localization(__file__, 1382, 18), 'div', result_sub_37834, subscript_call_result_37838)
    
    # Getting the type of 'out' (line 1382)
    out_37840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 4), 'out')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1382)
    tuple_37841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 8), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1382)
    # Adding element type (line 1382)
    # Getting the type of 'idx' (line 1382)
    idx_37842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 8), 'idx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 8), tuple_37841, idx_37842)
    # Adding element type (line 1382)
    int_37843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 13), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 8), tuple_37841, int_37843)
    
    # Storing an element on a container (line 1382)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 4), out_37840, (tuple_37841, result_div_37839))
    
    # Assigning a BinOp to a Name (line 1384):
    
    # Assigning a BinOp to a Name (line 1384):
    
    # Assigning a BinOp to a Name (line 1384):
    
    
    # Obtaining the type of the subscript
    Ellipsis_37844 = Ellipsis
    int_37845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1384, 20), 'int')
    # Getting the type of 'arr' (line 1384)
    arr_37846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 11), 'arr')
    # Obtaining the member '__getitem__' of a type (line 1384)
    getitem___37847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 11), arr_37846, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1384)
    subscript_call_result_37848 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 11), getitem___37847, (Ellipsis_37844, int_37845))
    
    # Getting the type of 'arr_max' (line 1384)
    arr_max_37849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 26), 'arr_max')
    # Applying the binary operator '==' (line 1384)
    result_eq_37850 = python_operator(stypy.reporting.localization.Localization(__file__, 1384, 11), '==', subscript_call_result_37848, arr_max_37849)
    
    # Getting the type of 'ipos' (line 1384)
    ipos_37851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 37), 'ipos')
    # Applying the binary operator '&' (line 1384)
    result_and__37852 = python_operator(stypy.reporting.localization.Localization(__file__, 1384, 10), '&', result_eq_37850, ipos_37851)
    
    # Assigning a type to the variable 'idx' (line 1384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 4), 'idx', result_and__37852)
    
    # Assigning a BinOp to a Subscript (line 1385):
    
    # Assigning a BinOp to a Subscript (line 1385):
    
    # Assigning a BinOp to a Subscript (line 1385):
    float_37853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 18), 'float')
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1385)
    tuple_37854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1385)
    # Adding element type (line 1385)
    # Getting the type of 'idx' (line 1385)
    idx_37855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 28), 'idx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1385, 28), tuple_37854, idx_37855)
    # Adding element type (line 1385)
    int_37856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 33), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1385, 28), tuple_37854, int_37856)
    
    # Getting the type of 'arr' (line 1385)
    arr_37857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 24), 'arr')
    # Obtaining the member '__getitem__' of a type (line 1385)
    getitem___37858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 24), arr_37857, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1385)
    subscript_call_result_37859 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 24), getitem___37858, tuple_37854)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1385)
    tuple_37860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1385)
    # Adding element type (line 1385)
    # Getting the type of 'idx' (line 1385)
    idx_37861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 42), 'idx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1385, 42), tuple_37860, idx_37861)
    # Adding element type (line 1385)
    int_37862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 47), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1385, 42), tuple_37860, int_37862)
    
    # Getting the type of 'arr' (line 1385)
    arr_37863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 38), 'arr')
    # Obtaining the member '__getitem__' of a type (line 1385)
    getitem___37864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 38), arr_37863, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1385)
    subscript_call_result_37865 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 38), getitem___37864, tuple_37860)
    
    # Applying the binary operator '-' (line 1385)
    result_sub_37866 = python_operator(stypy.reporting.localization.Localization(__file__, 1385, 24), '-', subscript_call_result_37859, subscript_call_result_37865)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1385)
    idx_37867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 59), 'idx')
    # Getting the type of 'delta' (line 1385)
    delta_37868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 53), 'delta')
    # Obtaining the member '__getitem__' of a type (line 1385)
    getitem___37869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 53), delta_37868, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1385)
    subscript_call_result_37870 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 53), getitem___37869, idx_37867)
    
    # Applying the binary operator 'div' (line 1385)
    result_div_37871 = python_operator(stypy.reporting.localization.Localization(__file__, 1385, 23), 'div', result_sub_37866, subscript_call_result_37870)
    
    # Applying the binary operator '+' (line 1385)
    result_add_37872 = python_operator(stypy.reporting.localization.Localization(__file__, 1385, 18), '+', float_37853, result_div_37871)
    
    # Getting the type of 'out' (line 1385)
    out_37873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 4), 'out')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1385)
    tuple_37874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 8), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1385)
    # Adding element type (line 1385)
    # Getting the type of 'idx' (line 1385)
    idx_37875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 8), 'idx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1385, 8), tuple_37874, idx_37875)
    # Adding element type (line 1385)
    int_37876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 13), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1385, 8), tuple_37874, int_37876)
    
    # Storing an element on a container (line 1385)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1385, 4), out_37873, (tuple_37874, result_add_37872))
    
    # Assigning a BinOp to a Name (line 1387):
    
    # Assigning a BinOp to a Name (line 1387):
    
    # Assigning a BinOp to a Name (line 1387):
    
    
    # Obtaining the type of the subscript
    Ellipsis_37877 = Ellipsis
    int_37878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1387, 20), 'int')
    # Getting the type of 'arr' (line 1387)
    arr_37879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 11), 'arr')
    # Obtaining the member '__getitem__' of a type (line 1387)
    getitem___37880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1387, 11), arr_37879, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1387)
    subscript_call_result_37881 = invoke(stypy.reporting.localization.Localization(__file__, 1387, 11), getitem___37880, (Ellipsis_37877, int_37878))
    
    # Getting the type of 'arr_max' (line 1387)
    arr_max_37882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 26), 'arr_max')
    # Applying the binary operator '==' (line 1387)
    result_eq_37883 = python_operator(stypy.reporting.localization.Localization(__file__, 1387, 11), '==', subscript_call_result_37881, arr_max_37882)
    
    # Getting the type of 'ipos' (line 1387)
    ipos_37884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 37), 'ipos')
    # Applying the binary operator '&' (line 1387)
    result_and__37885 = python_operator(stypy.reporting.localization.Localization(__file__, 1387, 10), '&', result_eq_37883, ipos_37884)
    
    # Assigning a type to the variable 'idx' (line 1387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 4), 'idx', result_and__37885)
    
    # Assigning a BinOp to a Subscript (line 1388):
    
    # Assigning a BinOp to a Subscript (line 1388):
    
    # Assigning a BinOp to a Subscript (line 1388):
    float_37886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 18), 'float')
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1388)
    tuple_37887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1388)
    # Adding element type (line 1388)
    # Getting the type of 'idx' (line 1388)
    idx_37888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 28), 'idx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1388, 28), tuple_37887, idx_37888)
    # Adding element type (line 1388)
    int_37889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 33), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1388, 28), tuple_37887, int_37889)
    
    # Getting the type of 'arr' (line 1388)
    arr_37890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 24), 'arr')
    # Obtaining the member '__getitem__' of a type (line 1388)
    getitem___37891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 24), arr_37890, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1388)
    subscript_call_result_37892 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 24), getitem___37891, tuple_37887)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1388)
    tuple_37893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1388)
    # Adding element type (line 1388)
    # Getting the type of 'idx' (line 1388)
    idx_37894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 42), 'idx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1388, 42), tuple_37893, idx_37894)
    # Adding element type (line 1388)
    int_37895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 47), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1388, 42), tuple_37893, int_37895)
    
    # Getting the type of 'arr' (line 1388)
    arr_37896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 38), 'arr')
    # Obtaining the member '__getitem__' of a type (line 1388)
    getitem___37897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 38), arr_37896, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1388)
    subscript_call_result_37898 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 38), getitem___37897, tuple_37893)
    
    # Applying the binary operator '-' (line 1388)
    result_sub_37899 = python_operator(stypy.reporting.localization.Localization(__file__, 1388, 24), '-', subscript_call_result_37892, subscript_call_result_37898)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1388)
    idx_37900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 59), 'idx')
    # Getting the type of 'delta' (line 1388)
    delta_37901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 53), 'delta')
    # Obtaining the member '__getitem__' of a type (line 1388)
    getitem___37902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 53), delta_37901, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1388)
    subscript_call_result_37903 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 53), getitem___37902, idx_37900)
    
    # Applying the binary operator 'div' (line 1388)
    result_div_37904 = python_operator(stypy.reporting.localization.Localization(__file__, 1388, 23), 'div', result_sub_37899, subscript_call_result_37903)
    
    # Applying the binary operator '+' (line 1388)
    result_add_37905 = python_operator(stypy.reporting.localization.Localization(__file__, 1388, 18), '+', float_37886, result_div_37904)
    
    # Getting the type of 'out' (line 1388)
    out_37906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 4), 'out')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1388)
    tuple_37907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 8), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1388)
    # Adding element type (line 1388)
    # Getting the type of 'idx' (line 1388)
    idx_37908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 8), 'idx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1388, 8), tuple_37907, idx_37908)
    # Adding element type (line 1388)
    int_37909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 13), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1388, 8), tuple_37907, int_37909)
    
    # Storing an element on a container (line 1388)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1388, 4), out_37906, (tuple_37907, result_add_37905))
    
    # Assigning a BinOp to a Subscript (line 1390):
    
    # Assigning a BinOp to a Subscript (line 1390):
    
    # Assigning a BinOp to a Subscript (line 1390):
    
    # Obtaining the type of the subscript
    Ellipsis_37910 = Ellipsis
    int_37911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 28), 'int')
    # Getting the type of 'out' (line 1390)
    out_37912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 19), 'out')
    # Obtaining the member '__getitem__' of a type (line 1390)
    getitem___37913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1390, 19), out_37912, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1390)
    subscript_call_result_37914 = invoke(stypy.reporting.localization.Localization(__file__, 1390, 19), getitem___37913, (Ellipsis_37910, int_37911))
    
    float_37915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 33), 'float')
    # Applying the binary operator 'div' (line 1390)
    result_div_37916 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 19), 'div', subscript_call_result_37914, float_37915)
    
    float_37917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 40), 'float')
    # Applying the binary operator '%' (line 1390)
    result_mod_37918 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 18), '%', result_div_37916, float_37917)
    
    # Getting the type of 'out' (line 1390)
    out_37919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 4), 'out')
    Ellipsis_37920 = Ellipsis
    int_37921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 13), 'int')
    # Storing an element on a container (line 1390)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1390, 4), out_37919, ((Ellipsis_37920, int_37921), result_mod_37918))
    
    # Assigning a Name to a Subscript (line 1391):
    
    # Assigning a Name to a Subscript (line 1391):
    
    # Assigning a Name to a Subscript (line 1391):
    # Getting the type of 's' (line 1391)
    s_37922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 18), 's')
    # Getting the type of 'out' (line 1391)
    out_37923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 4), 'out')
    Ellipsis_37924 = Ellipsis
    int_37925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1391, 13), 'int')
    # Storing an element on a container (line 1391)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1391, 4), out_37923, ((Ellipsis_37924, int_37925), s_37922))
    
    # Assigning a Name to a Subscript (line 1392):
    
    # Assigning a Name to a Subscript (line 1392):
    
    # Assigning a Name to a Subscript (line 1392):
    # Getting the type of 'arr_max' (line 1392)
    arr_max_37926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 18), 'arr_max')
    # Getting the type of 'out' (line 1392)
    out_37927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 4), 'out')
    Ellipsis_37928 = Ellipsis
    int_37929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 13), 'int')
    # Storing an element on a container (line 1392)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1392, 4), out_37927, ((Ellipsis_37928, int_37929), arr_max_37926))
    
    
    # Getting the type of 'in_ndim' (line 1394)
    in_ndim_37930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 7), 'in_ndim')
    int_37931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 18), 'int')
    # Applying the binary operator '==' (line 1394)
    result_eq_37932 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 7), '==', in_ndim_37930, int_37931)
    
    # Testing the type of an if condition (line 1394)
    if_condition_37933 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1394, 4), result_eq_37932)
    # Assigning a type to the variable 'if_condition_37933' (line 1394)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 4), 'if_condition_37933', if_condition_37933)
    # SSA begins for if statement (line 1394)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Attribute (line 1395):
    
    # Assigning a Tuple to a Attribute (line 1395):
    
    # Assigning a Tuple to a Attribute (line 1395):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1395)
    tuple_37934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1395, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1395)
    # Adding element type (line 1395)
    int_37935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1395, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1395, 21), tuple_37934, int_37935)
    
    # Getting the type of 'out' (line 1395)
    out_37936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 8), 'out')
    # Setting the type of the member 'shape' of a type (line 1395)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1395, 8), out_37936, 'shape', tuple_37934)
    # SSA join for if statement (line 1394)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'out' (line 1397)
    out_37937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 11), 'out')
    # Assigning a type to the variable 'stypy_return_type' (line 1397)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 4), 'stypy_return_type', out_37937)
    
    # ################# End of 'rgb_to_hsv(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rgb_to_hsv' in the type store
    # Getting the type of 'stypy_return_type' (line 1343)
    stypy_return_type_37938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_37938)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rgb_to_hsv'
    return stypy_return_type_37938

# Assigning a type to the variable 'rgb_to_hsv' (line 1343)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 0), 'rgb_to_hsv', rgb_to_hsv)

@norecursion
def hsv_to_rgb(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'hsv_to_rgb'
    module_type_store = module_type_store.open_function_context('hsv_to_rgb', 1400, 0, False)
    
    # Passed parameters checking function
    hsv_to_rgb.stypy_localization = localization
    hsv_to_rgb.stypy_type_of_self = None
    hsv_to_rgb.stypy_type_store = module_type_store
    hsv_to_rgb.stypy_function_name = 'hsv_to_rgb'
    hsv_to_rgb.stypy_param_names_list = ['hsv']
    hsv_to_rgb.stypy_varargs_param_name = None
    hsv_to_rgb.stypy_kwargs_param_name = None
    hsv_to_rgb.stypy_call_defaults = defaults
    hsv_to_rgb.stypy_call_varargs = varargs
    hsv_to_rgb.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hsv_to_rgb', ['hsv'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hsv_to_rgb', localization, ['hsv'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hsv_to_rgb(...)' code ##################

    unicode_37939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1414, (-1)), 'unicode', u'\n    convert hsv values in a numpy array to rgb values\n    all values assumed to be in range [0, 1]\n\n    Parameters\n    ----------\n    hsv : (..., 3) array-like\n       All values assumed to be in range [0, 1]\n\n    Returns\n    -------\n    rgb : (..., 3) ndarray\n       Colors converted to RGB values in range [0, 1]\n    ')
    
    # Assigning a Call to a Name (line 1415):
    
    # Assigning a Call to a Name (line 1415):
    
    # Assigning a Call to a Name (line 1415):
    
    # Call to asarray(...): (line 1415)
    # Processing the call arguments (line 1415)
    # Getting the type of 'hsv' (line 1415)
    hsv_37942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 21), 'hsv', False)
    # Processing the call keyword arguments (line 1415)
    kwargs_37943 = {}
    # Getting the type of 'np' (line 1415)
    np_37940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 10), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1415)
    asarray_37941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1415, 10), np_37940, 'asarray')
    # Calling asarray(args, kwargs) (line 1415)
    asarray_call_result_37944 = invoke(stypy.reporting.localization.Localization(__file__, 1415, 10), asarray_37941, *[hsv_37942], **kwargs_37943)
    
    # Assigning a type to the variable 'hsv' (line 1415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1415, 4), 'hsv', asarray_call_result_37944)
    
    
    
    # Obtaining the type of the subscript
    int_37945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 17), 'int')
    # Getting the type of 'hsv' (line 1418)
    hsv_37946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 7), 'hsv')
    # Obtaining the member 'shape' of a type (line 1418)
    shape_37947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 7), hsv_37946, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1418)
    getitem___37948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 7), shape_37947, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1418)
    subscript_call_result_37949 = invoke(stypy.reporting.localization.Localization(__file__, 1418, 7), getitem___37948, int_37945)
    
    int_37950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 24), 'int')
    # Applying the binary operator '!=' (line 1418)
    result_ne_37951 = python_operator(stypy.reporting.localization.Localization(__file__, 1418, 7), '!=', subscript_call_result_37949, int_37950)
    
    # Testing the type of an if condition (line 1418)
    if_condition_37952 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1418, 4), result_ne_37951)
    # Assigning a type to the variable 'if_condition_37952' (line 1418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 4), 'if_condition_37952', if_condition_37952)
    # SSA begins for if statement (line 1418)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1419)
    # Processing the call arguments (line 1419)
    
    # Call to format(...): (line 1419)
    # Processing the call keyword arguments (line 1419)
    # Getting the type of 'hsv' (line 1420)
    hsv_37956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 61), 'hsv', False)
    # Obtaining the member 'shape' of a type (line 1420)
    shape_37957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 61), hsv_37956, 'shape')
    keyword_37958 = shape_37957
    kwargs_37959 = {'shp': keyword_37958}
    unicode_37954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, 25), 'unicode', u'Last dimension of input array must be 3; shape {shp} was found.')
    # Obtaining the member 'format' of a type (line 1419)
    format_37955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 25), unicode_37954, 'format')
    # Calling format(args, kwargs) (line 1419)
    format_call_result_37960 = invoke(stypy.reporting.localization.Localization(__file__, 1419, 25), format_37955, *[], **kwargs_37959)
    
    # Processing the call keyword arguments (line 1419)
    kwargs_37961 = {}
    # Getting the type of 'ValueError' (line 1419)
    ValueError_37953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1419)
    ValueError_call_result_37962 = invoke(stypy.reporting.localization.Localization(__file__, 1419, 14), ValueError_37953, *[format_call_result_37960], **kwargs_37961)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1419, 8), ValueError_call_result_37962, 'raise parameter', BaseException)
    # SSA join for if statement (line 1418)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 1424):
    
    # Assigning a Attribute to a Name (line 1424):
    
    # Assigning a Attribute to a Name (line 1424):
    # Getting the type of 'hsv' (line 1424)
    hsv_37963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 14), 'hsv')
    # Obtaining the member 'ndim' of a type (line 1424)
    ndim_37964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1424, 14), hsv_37963, 'ndim')
    # Assigning a type to the variable 'in_ndim' (line 1424)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1424, 4), 'in_ndim', ndim_37964)
    
    
    # Getting the type of 'in_ndim' (line 1425)
    in_ndim_37965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 7), 'in_ndim')
    int_37966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 18), 'int')
    # Applying the binary operator '==' (line 1425)
    result_eq_37967 = python_operator(stypy.reporting.localization.Localization(__file__, 1425, 7), '==', in_ndim_37965, int_37966)
    
    # Testing the type of an if condition (line 1425)
    if_condition_37968 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1425, 4), result_eq_37967)
    # Assigning a type to the variable 'if_condition_37968' (line 1425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 4), 'if_condition_37968', if_condition_37968)
    # SSA begins for if statement (line 1425)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1426):
    
    # Assigning a Call to a Name (line 1426):
    
    # Assigning a Call to a Name (line 1426):
    
    # Call to array(...): (line 1426)
    # Processing the call arguments (line 1426)
    # Getting the type of 'hsv' (line 1426)
    hsv_37971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 23), 'hsv', False)
    # Processing the call keyword arguments (line 1426)
    int_37972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1426, 34), 'int')
    keyword_37973 = int_37972
    kwargs_37974 = {'ndmin': keyword_37973}
    # Getting the type of 'np' (line 1426)
    np_37969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 14), 'np', False)
    # Obtaining the member 'array' of a type (line 1426)
    array_37970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 14), np_37969, 'array')
    # Calling array(args, kwargs) (line 1426)
    array_call_result_37975 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 14), array_37970, *[hsv_37971], **kwargs_37974)
    
    # Assigning a type to the variable 'hsv' (line 1426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'hsv', array_call_result_37975)
    # SSA join for if statement (line 1425)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1429):
    
    # Assigning a Call to a Name (line 1429):
    
    # Assigning a Call to a Name (line 1429):
    
    # Call to astype(...): (line 1429)
    # Processing the call arguments (line 1429)
    
    # Call to promote_types(...): (line 1429)
    # Processing the call arguments (line 1429)
    # Getting the type of 'hsv' (line 1429)
    hsv_37980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 38), 'hsv', False)
    # Obtaining the member 'dtype' of a type (line 1429)
    dtype_37981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1429, 38), hsv_37980, 'dtype')
    # Getting the type of 'np' (line 1429)
    np_37982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 49), 'np', False)
    # Obtaining the member 'float32' of a type (line 1429)
    float32_37983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1429, 49), np_37982, 'float32')
    # Processing the call keyword arguments (line 1429)
    kwargs_37984 = {}
    # Getting the type of 'np' (line 1429)
    np_37978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 21), 'np', False)
    # Obtaining the member 'promote_types' of a type (line 1429)
    promote_types_37979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1429, 21), np_37978, 'promote_types')
    # Calling promote_types(args, kwargs) (line 1429)
    promote_types_call_result_37985 = invoke(stypy.reporting.localization.Localization(__file__, 1429, 21), promote_types_37979, *[dtype_37981, float32_37983], **kwargs_37984)
    
    # Processing the call keyword arguments (line 1429)
    kwargs_37986 = {}
    # Getting the type of 'hsv' (line 1429)
    hsv_37976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 10), 'hsv', False)
    # Obtaining the member 'astype' of a type (line 1429)
    astype_37977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1429, 10), hsv_37976, 'astype')
    # Calling astype(args, kwargs) (line 1429)
    astype_call_result_37987 = invoke(stypy.reporting.localization.Localization(__file__, 1429, 10), astype_37977, *[promote_types_call_result_37985], **kwargs_37986)
    
    # Assigning a type to the variable 'hsv' (line 1429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1429, 4), 'hsv', astype_call_result_37987)
    
    # Assigning a Subscript to a Name (line 1431):
    
    # Assigning a Subscript to a Name (line 1431):
    
    # Assigning a Subscript to a Name (line 1431):
    
    # Obtaining the type of the subscript
    Ellipsis_37988 = Ellipsis
    int_37989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 17), 'int')
    # Getting the type of 'hsv' (line 1431)
    hsv_37990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 8), 'hsv')
    # Obtaining the member '__getitem__' of a type (line 1431)
    getitem___37991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 8), hsv_37990, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1431)
    subscript_call_result_37992 = invoke(stypy.reporting.localization.Localization(__file__, 1431, 8), getitem___37991, (Ellipsis_37988, int_37989))
    
    # Assigning a type to the variable 'h' (line 1431)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1431, 4), 'h', subscript_call_result_37992)
    
    # Assigning a Subscript to a Name (line 1432):
    
    # Assigning a Subscript to a Name (line 1432):
    
    # Assigning a Subscript to a Name (line 1432):
    
    # Obtaining the type of the subscript
    Ellipsis_37993 = Ellipsis
    int_37994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1432, 17), 'int')
    # Getting the type of 'hsv' (line 1432)
    hsv_37995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 8), 'hsv')
    # Obtaining the member '__getitem__' of a type (line 1432)
    getitem___37996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 8), hsv_37995, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1432)
    subscript_call_result_37997 = invoke(stypy.reporting.localization.Localization(__file__, 1432, 8), getitem___37996, (Ellipsis_37993, int_37994))
    
    # Assigning a type to the variable 's' (line 1432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1432, 4), 's', subscript_call_result_37997)
    
    # Assigning a Subscript to a Name (line 1433):
    
    # Assigning a Subscript to a Name (line 1433):
    
    # Assigning a Subscript to a Name (line 1433):
    
    # Obtaining the type of the subscript
    Ellipsis_37998 = Ellipsis
    int_37999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 17), 'int')
    # Getting the type of 'hsv' (line 1433)
    hsv_38000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 8), 'hsv')
    # Obtaining the member '__getitem__' of a type (line 1433)
    getitem___38001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 8), hsv_38000, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1433)
    subscript_call_result_38002 = invoke(stypy.reporting.localization.Localization(__file__, 1433, 8), getitem___38001, (Ellipsis_37998, int_37999))
    
    # Assigning a type to the variable 'v' (line 1433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 4), 'v', subscript_call_result_38002)
    
    # Assigning a Call to a Name (line 1435):
    
    # Assigning a Call to a Name (line 1435):
    
    # Assigning a Call to a Name (line 1435):
    
    # Call to empty_like(...): (line 1435)
    # Processing the call arguments (line 1435)
    # Getting the type of 'h' (line 1435)
    h_38005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 22), 'h', False)
    # Processing the call keyword arguments (line 1435)
    kwargs_38006 = {}
    # Getting the type of 'np' (line 1435)
    np_38003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 8), 'np', False)
    # Obtaining the member 'empty_like' of a type (line 1435)
    empty_like_38004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1435, 8), np_38003, 'empty_like')
    # Calling empty_like(args, kwargs) (line 1435)
    empty_like_call_result_38007 = invoke(stypy.reporting.localization.Localization(__file__, 1435, 8), empty_like_38004, *[h_38005], **kwargs_38006)
    
    # Assigning a type to the variable 'r' (line 1435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1435, 4), 'r', empty_like_call_result_38007)
    
    # Assigning a Call to a Name (line 1436):
    
    # Assigning a Call to a Name (line 1436):
    
    # Assigning a Call to a Name (line 1436):
    
    # Call to empty_like(...): (line 1436)
    # Processing the call arguments (line 1436)
    # Getting the type of 'h' (line 1436)
    h_38010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 22), 'h', False)
    # Processing the call keyword arguments (line 1436)
    kwargs_38011 = {}
    # Getting the type of 'np' (line 1436)
    np_38008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 8), 'np', False)
    # Obtaining the member 'empty_like' of a type (line 1436)
    empty_like_38009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1436, 8), np_38008, 'empty_like')
    # Calling empty_like(args, kwargs) (line 1436)
    empty_like_call_result_38012 = invoke(stypy.reporting.localization.Localization(__file__, 1436, 8), empty_like_38009, *[h_38010], **kwargs_38011)
    
    # Assigning a type to the variable 'g' (line 1436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 4), 'g', empty_like_call_result_38012)
    
    # Assigning a Call to a Name (line 1437):
    
    # Assigning a Call to a Name (line 1437):
    
    # Assigning a Call to a Name (line 1437):
    
    # Call to empty_like(...): (line 1437)
    # Processing the call arguments (line 1437)
    # Getting the type of 'h' (line 1437)
    h_38015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 22), 'h', False)
    # Processing the call keyword arguments (line 1437)
    kwargs_38016 = {}
    # Getting the type of 'np' (line 1437)
    np_38013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 8), 'np', False)
    # Obtaining the member 'empty_like' of a type (line 1437)
    empty_like_38014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 8), np_38013, 'empty_like')
    # Calling empty_like(args, kwargs) (line 1437)
    empty_like_call_result_38017 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 8), empty_like_38014, *[h_38015], **kwargs_38016)
    
    # Assigning a type to the variable 'b' (line 1437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 4), 'b', empty_like_call_result_38017)
    
    # Assigning a Call to a Name (line 1439):
    
    # Assigning a Call to a Name (line 1439):
    
    # Assigning a Call to a Name (line 1439):
    
    # Call to astype(...): (line 1439)
    # Processing the call arguments (line 1439)
    # Getting the type of 'int' (line 1439)
    int_38022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 25), 'int', False)
    # Processing the call keyword arguments (line 1439)
    kwargs_38023 = {}
    # Getting the type of 'h' (line 1439)
    h_38018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 9), 'h', False)
    float_38019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1439, 13), 'float')
    # Applying the binary operator '*' (line 1439)
    result_mul_38020 = python_operator(stypy.reporting.localization.Localization(__file__, 1439, 9), '*', h_38018, float_38019)
    
    # Obtaining the member 'astype' of a type (line 1439)
    astype_38021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 9), result_mul_38020, 'astype')
    # Calling astype(args, kwargs) (line 1439)
    astype_call_result_38024 = invoke(stypy.reporting.localization.Localization(__file__, 1439, 9), astype_38021, *[int_38022], **kwargs_38023)
    
    # Assigning a type to the variable 'i' (line 1439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 4), 'i', astype_call_result_38024)
    
    # Assigning a BinOp to a Name (line 1440):
    
    # Assigning a BinOp to a Name (line 1440):
    
    # Assigning a BinOp to a Name (line 1440):
    # Getting the type of 'h' (line 1440)
    h_38025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 9), 'h')
    float_38026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1440, 13), 'float')
    # Applying the binary operator '*' (line 1440)
    result_mul_38027 = python_operator(stypy.reporting.localization.Localization(__file__, 1440, 9), '*', h_38025, float_38026)
    
    # Getting the type of 'i' (line 1440)
    i_38028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 20), 'i')
    # Applying the binary operator '-' (line 1440)
    result_sub_38029 = python_operator(stypy.reporting.localization.Localization(__file__, 1440, 8), '-', result_mul_38027, i_38028)
    
    # Assigning a type to the variable 'f' (line 1440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 4), 'f', result_sub_38029)
    
    # Assigning a BinOp to a Name (line 1441):
    
    # Assigning a BinOp to a Name (line 1441):
    
    # Assigning a BinOp to a Name (line 1441):
    # Getting the type of 'v' (line 1441)
    v_38030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 8), 'v')
    float_38031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 13), 'float')
    # Getting the type of 's' (line 1441)
    s_38032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 19), 's')
    # Applying the binary operator '-' (line 1441)
    result_sub_38033 = python_operator(stypy.reporting.localization.Localization(__file__, 1441, 13), '-', float_38031, s_38032)
    
    # Applying the binary operator '*' (line 1441)
    result_mul_38034 = python_operator(stypy.reporting.localization.Localization(__file__, 1441, 8), '*', v_38030, result_sub_38033)
    
    # Assigning a type to the variable 'p' (line 1441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1441, 4), 'p', result_mul_38034)
    
    # Assigning a BinOp to a Name (line 1442):
    
    # Assigning a BinOp to a Name (line 1442):
    
    # Assigning a BinOp to a Name (line 1442):
    # Getting the type of 'v' (line 1442)
    v_38035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 8), 'v')
    float_38036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 13), 'float')
    # Getting the type of 's' (line 1442)
    s_38037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 19), 's')
    # Getting the type of 'f' (line 1442)
    f_38038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 23), 'f')
    # Applying the binary operator '*' (line 1442)
    result_mul_38039 = python_operator(stypy.reporting.localization.Localization(__file__, 1442, 19), '*', s_38037, f_38038)
    
    # Applying the binary operator '-' (line 1442)
    result_sub_38040 = python_operator(stypy.reporting.localization.Localization(__file__, 1442, 13), '-', float_38036, result_mul_38039)
    
    # Applying the binary operator '*' (line 1442)
    result_mul_38041 = python_operator(stypy.reporting.localization.Localization(__file__, 1442, 8), '*', v_38035, result_sub_38040)
    
    # Assigning a type to the variable 'q' (line 1442)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 4), 'q', result_mul_38041)
    
    # Assigning a BinOp to a Name (line 1443):
    
    # Assigning a BinOp to a Name (line 1443):
    
    # Assigning a BinOp to a Name (line 1443):
    # Getting the type of 'v' (line 1443)
    v_38042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 8), 'v')
    float_38043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1443, 13), 'float')
    # Getting the type of 's' (line 1443)
    s_38044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 19), 's')
    float_38045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1443, 24), 'float')
    # Getting the type of 'f' (line 1443)
    f_38046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 30), 'f')
    # Applying the binary operator '-' (line 1443)
    result_sub_38047 = python_operator(stypy.reporting.localization.Localization(__file__, 1443, 24), '-', float_38045, f_38046)
    
    # Applying the binary operator '*' (line 1443)
    result_mul_38048 = python_operator(stypy.reporting.localization.Localization(__file__, 1443, 19), '*', s_38044, result_sub_38047)
    
    # Applying the binary operator '-' (line 1443)
    result_sub_38049 = python_operator(stypy.reporting.localization.Localization(__file__, 1443, 13), '-', float_38043, result_mul_38048)
    
    # Applying the binary operator '*' (line 1443)
    result_mul_38050 = python_operator(stypy.reporting.localization.Localization(__file__, 1443, 8), '*', v_38042, result_sub_38049)
    
    # Assigning a type to the variable 't' (line 1443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1443, 4), 't', result_mul_38050)
    
    # Assigning a Compare to a Name (line 1445):
    
    # Assigning a Compare to a Name (line 1445):
    
    # Assigning a Compare to a Name (line 1445):
    
    # Getting the type of 'i' (line 1445)
    i_38051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 10), 'i')
    int_38052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1445, 14), 'int')
    # Applying the binary operator '%' (line 1445)
    result_mod_38053 = python_operator(stypy.reporting.localization.Localization(__file__, 1445, 10), '%', i_38051, int_38052)
    
    int_38054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1445, 19), 'int')
    # Applying the binary operator '==' (line 1445)
    result_eq_38055 = python_operator(stypy.reporting.localization.Localization(__file__, 1445, 10), '==', result_mod_38053, int_38054)
    
    # Assigning a type to the variable 'idx' (line 1445)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 4), 'idx', result_eq_38055)
    
    # Assigning a Subscript to a Subscript (line 1446):
    
    # Assigning a Subscript to a Subscript (line 1446):
    
    # Assigning a Subscript to a Subscript (line 1446):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1446)
    idx_38056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 15), 'idx')
    # Getting the type of 'v' (line 1446)
    v_38057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 13), 'v')
    # Obtaining the member '__getitem__' of a type (line 1446)
    getitem___38058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 13), v_38057, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1446)
    subscript_call_result_38059 = invoke(stypy.reporting.localization.Localization(__file__, 1446, 13), getitem___38058, idx_38056)
    
    # Getting the type of 'r' (line 1446)
    r_38060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 4), 'r')
    # Getting the type of 'idx' (line 1446)
    idx_38061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 6), 'idx')
    # Storing an element on a container (line 1446)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1446, 4), r_38060, (idx_38061, subscript_call_result_38059))
    
    # Assigning a Subscript to a Subscript (line 1447):
    
    # Assigning a Subscript to a Subscript (line 1447):
    
    # Assigning a Subscript to a Subscript (line 1447):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1447)
    idx_38062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 15), 'idx')
    # Getting the type of 't' (line 1447)
    t_38063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 13), 't')
    # Obtaining the member '__getitem__' of a type (line 1447)
    getitem___38064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 13), t_38063, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1447)
    subscript_call_result_38065 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 13), getitem___38064, idx_38062)
    
    # Getting the type of 'g' (line 1447)
    g_38066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 4), 'g')
    # Getting the type of 'idx' (line 1447)
    idx_38067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 6), 'idx')
    # Storing an element on a container (line 1447)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1447, 4), g_38066, (idx_38067, subscript_call_result_38065))
    
    # Assigning a Subscript to a Subscript (line 1448):
    
    # Assigning a Subscript to a Subscript (line 1448):
    
    # Assigning a Subscript to a Subscript (line 1448):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1448)
    idx_38068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 15), 'idx')
    # Getting the type of 'p' (line 1448)
    p_38069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 13), 'p')
    # Obtaining the member '__getitem__' of a type (line 1448)
    getitem___38070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1448, 13), p_38069, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1448)
    subscript_call_result_38071 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 13), getitem___38070, idx_38068)
    
    # Getting the type of 'b' (line 1448)
    b_38072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 4), 'b')
    # Getting the type of 'idx' (line 1448)
    idx_38073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 6), 'idx')
    # Storing an element on a container (line 1448)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1448, 4), b_38072, (idx_38073, subscript_call_result_38071))
    
    # Assigning a Compare to a Name (line 1450):
    
    # Assigning a Compare to a Name (line 1450):
    
    # Assigning a Compare to a Name (line 1450):
    
    # Getting the type of 'i' (line 1450)
    i_38074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 10), 'i')
    int_38075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1450, 15), 'int')
    # Applying the binary operator '==' (line 1450)
    result_eq_38076 = python_operator(stypy.reporting.localization.Localization(__file__, 1450, 10), '==', i_38074, int_38075)
    
    # Assigning a type to the variable 'idx' (line 1450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1450, 4), 'idx', result_eq_38076)
    
    # Assigning a Subscript to a Subscript (line 1451):
    
    # Assigning a Subscript to a Subscript (line 1451):
    
    # Assigning a Subscript to a Subscript (line 1451):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1451)
    idx_38077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 15), 'idx')
    # Getting the type of 'q' (line 1451)
    q_38078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 13), 'q')
    # Obtaining the member '__getitem__' of a type (line 1451)
    getitem___38079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1451, 13), q_38078, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1451)
    subscript_call_result_38080 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 13), getitem___38079, idx_38077)
    
    # Getting the type of 'r' (line 1451)
    r_38081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 4), 'r')
    # Getting the type of 'idx' (line 1451)
    idx_38082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 6), 'idx')
    # Storing an element on a container (line 1451)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1451, 4), r_38081, (idx_38082, subscript_call_result_38080))
    
    # Assigning a Subscript to a Subscript (line 1452):
    
    # Assigning a Subscript to a Subscript (line 1452):
    
    # Assigning a Subscript to a Subscript (line 1452):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1452)
    idx_38083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 15), 'idx')
    # Getting the type of 'v' (line 1452)
    v_38084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 13), 'v')
    # Obtaining the member '__getitem__' of a type (line 1452)
    getitem___38085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1452, 13), v_38084, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1452)
    subscript_call_result_38086 = invoke(stypy.reporting.localization.Localization(__file__, 1452, 13), getitem___38085, idx_38083)
    
    # Getting the type of 'g' (line 1452)
    g_38087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 4), 'g')
    # Getting the type of 'idx' (line 1452)
    idx_38088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 6), 'idx')
    # Storing an element on a container (line 1452)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1452, 4), g_38087, (idx_38088, subscript_call_result_38086))
    
    # Assigning a Subscript to a Subscript (line 1453):
    
    # Assigning a Subscript to a Subscript (line 1453):
    
    # Assigning a Subscript to a Subscript (line 1453):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1453)
    idx_38089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 15), 'idx')
    # Getting the type of 'p' (line 1453)
    p_38090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 13), 'p')
    # Obtaining the member '__getitem__' of a type (line 1453)
    getitem___38091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1453, 13), p_38090, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1453)
    subscript_call_result_38092 = invoke(stypy.reporting.localization.Localization(__file__, 1453, 13), getitem___38091, idx_38089)
    
    # Getting the type of 'b' (line 1453)
    b_38093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 4), 'b')
    # Getting the type of 'idx' (line 1453)
    idx_38094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 6), 'idx')
    # Storing an element on a container (line 1453)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1453, 4), b_38093, (idx_38094, subscript_call_result_38092))
    
    # Assigning a Compare to a Name (line 1455):
    
    # Assigning a Compare to a Name (line 1455):
    
    # Assigning a Compare to a Name (line 1455):
    
    # Getting the type of 'i' (line 1455)
    i_38095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 10), 'i')
    int_38096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1455, 15), 'int')
    # Applying the binary operator '==' (line 1455)
    result_eq_38097 = python_operator(stypy.reporting.localization.Localization(__file__, 1455, 10), '==', i_38095, int_38096)
    
    # Assigning a type to the variable 'idx' (line 1455)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 4), 'idx', result_eq_38097)
    
    # Assigning a Subscript to a Subscript (line 1456):
    
    # Assigning a Subscript to a Subscript (line 1456):
    
    # Assigning a Subscript to a Subscript (line 1456):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1456)
    idx_38098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 15), 'idx')
    # Getting the type of 'p' (line 1456)
    p_38099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 13), 'p')
    # Obtaining the member '__getitem__' of a type (line 1456)
    getitem___38100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 13), p_38099, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1456)
    subscript_call_result_38101 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 13), getitem___38100, idx_38098)
    
    # Getting the type of 'r' (line 1456)
    r_38102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 4), 'r')
    # Getting the type of 'idx' (line 1456)
    idx_38103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 6), 'idx')
    # Storing an element on a container (line 1456)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1456, 4), r_38102, (idx_38103, subscript_call_result_38101))
    
    # Assigning a Subscript to a Subscript (line 1457):
    
    # Assigning a Subscript to a Subscript (line 1457):
    
    # Assigning a Subscript to a Subscript (line 1457):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1457)
    idx_38104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 15), 'idx')
    # Getting the type of 'v' (line 1457)
    v_38105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 13), 'v')
    # Obtaining the member '__getitem__' of a type (line 1457)
    getitem___38106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1457, 13), v_38105, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1457)
    subscript_call_result_38107 = invoke(stypy.reporting.localization.Localization(__file__, 1457, 13), getitem___38106, idx_38104)
    
    # Getting the type of 'g' (line 1457)
    g_38108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 4), 'g')
    # Getting the type of 'idx' (line 1457)
    idx_38109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 6), 'idx')
    # Storing an element on a container (line 1457)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1457, 4), g_38108, (idx_38109, subscript_call_result_38107))
    
    # Assigning a Subscript to a Subscript (line 1458):
    
    # Assigning a Subscript to a Subscript (line 1458):
    
    # Assigning a Subscript to a Subscript (line 1458):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1458)
    idx_38110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 15), 'idx')
    # Getting the type of 't' (line 1458)
    t_38111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 13), 't')
    # Obtaining the member '__getitem__' of a type (line 1458)
    getitem___38112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 13), t_38111, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1458)
    subscript_call_result_38113 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 13), getitem___38112, idx_38110)
    
    # Getting the type of 'b' (line 1458)
    b_38114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 4), 'b')
    # Getting the type of 'idx' (line 1458)
    idx_38115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 6), 'idx')
    # Storing an element on a container (line 1458)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1458, 4), b_38114, (idx_38115, subscript_call_result_38113))
    
    # Assigning a Compare to a Name (line 1460):
    
    # Assigning a Compare to a Name (line 1460):
    
    # Assigning a Compare to a Name (line 1460):
    
    # Getting the type of 'i' (line 1460)
    i_38116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 10), 'i')
    int_38117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1460, 15), 'int')
    # Applying the binary operator '==' (line 1460)
    result_eq_38118 = python_operator(stypy.reporting.localization.Localization(__file__, 1460, 10), '==', i_38116, int_38117)
    
    # Assigning a type to the variable 'idx' (line 1460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 4), 'idx', result_eq_38118)
    
    # Assigning a Subscript to a Subscript (line 1461):
    
    # Assigning a Subscript to a Subscript (line 1461):
    
    # Assigning a Subscript to a Subscript (line 1461):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1461)
    idx_38119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 15), 'idx')
    # Getting the type of 'p' (line 1461)
    p_38120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 13), 'p')
    # Obtaining the member '__getitem__' of a type (line 1461)
    getitem___38121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 13), p_38120, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1461)
    subscript_call_result_38122 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 13), getitem___38121, idx_38119)
    
    # Getting the type of 'r' (line 1461)
    r_38123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'r')
    # Getting the type of 'idx' (line 1461)
    idx_38124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 6), 'idx')
    # Storing an element on a container (line 1461)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1461, 4), r_38123, (idx_38124, subscript_call_result_38122))
    
    # Assigning a Subscript to a Subscript (line 1462):
    
    # Assigning a Subscript to a Subscript (line 1462):
    
    # Assigning a Subscript to a Subscript (line 1462):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1462)
    idx_38125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 15), 'idx')
    # Getting the type of 'q' (line 1462)
    q_38126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 13), 'q')
    # Obtaining the member '__getitem__' of a type (line 1462)
    getitem___38127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1462, 13), q_38126, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1462)
    subscript_call_result_38128 = invoke(stypy.reporting.localization.Localization(__file__, 1462, 13), getitem___38127, idx_38125)
    
    # Getting the type of 'g' (line 1462)
    g_38129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 4), 'g')
    # Getting the type of 'idx' (line 1462)
    idx_38130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 6), 'idx')
    # Storing an element on a container (line 1462)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1462, 4), g_38129, (idx_38130, subscript_call_result_38128))
    
    # Assigning a Subscript to a Subscript (line 1463):
    
    # Assigning a Subscript to a Subscript (line 1463):
    
    # Assigning a Subscript to a Subscript (line 1463):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1463)
    idx_38131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 15), 'idx')
    # Getting the type of 'v' (line 1463)
    v_38132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 13), 'v')
    # Obtaining the member '__getitem__' of a type (line 1463)
    getitem___38133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1463, 13), v_38132, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1463)
    subscript_call_result_38134 = invoke(stypy.reporting.localization.Localization(__file__, 1463, 13), getitem___38133, idx_38131)
    
    # Getting the type of 'b' (line 1463)
    b_38135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 4), 'b')
    # Getting the type of 'idx' (line 1463)
    idx_38136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 6), 'idx')
    # Storing an element on a container (line 1463)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1463, 4), b_38135, (idx_38136, subscript_call_result_38134))
    
    # Assigning a Compare to a Name (line 1465):
    
    # Assigning a Compare to a Name (line 1465):
    
    # Assigning a Compare to a Name (line 1465):
    
    # Getting the type of 'i' (line 1465)
    i_38137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 10), 'i')
    int_38138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1465, 15), 'int')
    # Applying the binary operator '==' (line 1465)
    result_eq_38139 = python_operator(stypy.reporting.localization.Localization(__file__, 1465, 10), '==', i_38137, int_38138)
    
    # Assigning a type to the variable 'idx' (line 1465)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1465, 4), 'idx', result_eq_38139)
    
    # Assigning a Subscript to a Subscript (line 1466):
    
    # Assigning a Subscript to a Subscript (line 1466):
    
    # Assigning a Subscript to a Subscript (line 1466):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1466)
    idx_38140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 15), 'idx')
    # Getting the type of 't' (line 1466)
    t_38141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 13), 't')
    # Obtaining the member '__getitem__' of a type (line 1466)
    getitem___38142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1466, 13), t_38141, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1466)
    subscript_call_result_38143 = invoke(stypy.reporting.localization.Localization(__file__, 1466, 13), getitem___38142, idx_38140)
    
    # Getting the type of 'r' (line 1466)
    r_38144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 4), 'r')
    # Getting the type of 'idx' (line 1466)
    idx_38145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 6), 'idx')
    # Storing an element on a container (line 1466)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1466, 4), r_38144, (idx_38145, subscript_call_result_38143))
    
    # Assigning a Subscript to a Subscript (line 1467):
    
    # Assigning a Subscript to a Subscript (line 1467):
    
    # Assigning a Subscript to a Subscript (line 1467):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1467)
    idx_38146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 15), 'idx')
    # Getting the type of 'p' (line 1467)
    p_38147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 13), 'p')
    # Obtaining the member '__getitem__' of a type (line 1467)
    getitem___38148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 13), p_38147, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1467)
    subscript_call_result_38149 = invoke(stypy.reporting.localization.Localization(__file__, 1467, 13), getitem___38148, idx_38146)
    
    # Getting the type of 'g' (line 1467)
    g_38150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 4), 'g')
    # Getting the type of 'idx' (line 1467)
    idx_38151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 6), 'idx')
    # Storing an element on a container (line 1467)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1467, 4), g_38150, (idx_38151, subscript_call_result_38149))
    
    # Assigning a Subscript to a Subscript (line 1468):
    
    # Assigning a Subscript to a Subscript (line 1468):
    
    # Assigning a Subscript to a Subscript (line 1468):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1468)
    idx_38152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 15), 'idx')
    # Getting the type of 'v' (line 1468)
    v_38153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 13), 'v')
    # Obtaining the member '__getitem__' of a type (line 1468)
    getitem___38154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 13), v_38153, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1468)
    subscript_call_result_38155 = invoke(stypy.reporting.localization.Localization(__file__, 1468, 13), getitem___38154, idx_38152)
    
    # Getting the type of 'b' (line 1468)
    b_38156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 4), 'b')
    # Getting the type of 'idx' (line 1468)
    idx_38157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 6), 'idx')
    # Storing an element on a container (line 1468)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1468, 4), b_38156, (idx_38157, subscript_call_result_38155))
    
    # Assigning a Compare to a Name (line 1470):
    
    # Assigning a Compare to a Name (line 1470):
    
    # Assigning a Compare to a Name (line 1470):
    
    # Getting the type of 'i' (line 1470)
    i_38158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 10), 'i')
    int_38159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 15), 'int')
    # Applying the binary operator '==' (line 1470)
    result_eq_38160 = python_operator(stypy.reporting.localization.Localization(__file__, 1470, 10), '==', i_38158, int_38159)
    
    # Assigning a type to the variable 'idx' (line 1470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 4), 'idx', result_eq_38160)
    
    # Assigning a Subscript to a Subscript (line 1471):
    
    # Assigning a Subscript to a Subscript (line 1471):
    
    # Assigning a Subscript to a Subscript (line 1471):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1471)
    idx_38161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 15), 'idx')
    # Getting the type of 'v' (line 1471)
    v_38162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 13), 'v')
    # Obtaining the member '__getitem__' of a type (line 1471)
    getitem___38163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 13), v_38162, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1471)
    subscript_call_result_38164 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 13), getitem___38163, idx_38161)
    
    # Getting the type of 'r' (line 1471)
    r_38165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 4), 'r')
    # Getting the type of 'idx' (line 1471)
    idx_38166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 6), 'idx')
    # Storing an element on a container (line 1471)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1471, 4), r_38165, (idx_38166, subscript_call_result_38164))
    
    # Assigning a Subscript to a Subscript (line 1472):
    
    # Assigning a Subscript to a Subscript (line 1472):
    
    # Assigning a Subscript to a Subscript (line 1472):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1472)
    idx_38167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 15), 'idx')
    # Getting the type of 'p' (line 1472)
    p_38168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 13), 'p')
    # Obtaining the member '__getitem__' of a type (line 1472)
    getitem___38169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 13), p_38168, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1472)
    subscript_call_result_38170 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 13), getitem___38169, idx_38167)
    
    # Getting the type of 'g' (line 1472)
    g_38171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 4), 'g')
    # Getting the type of 'idx' (line 1472)
    idx_38172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 6), 'idx')
    # Storing an element on a container (line 1472)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 4), g_38171, (idx_38172, subscript_call_result_38170))
    
    # Assigning a Subscript to a Subscript (line 1473):
    
    # Assigning a Subscript to a Subscript (line 1473):
    
    # Assigning a Subscript to a Subscript (line 1473):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1473)
    idx_38173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 15), 'idx')
    # Getting the type of 'q' (line 1473)
    q_38174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 13), 'q')
    # Obtaining the member '__getitem__' of a type (line 1473)
    getitem___38175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 13), q_38174, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1473)
    subscript_call_result_38176 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 13), getitem___38175, idx_38173)
    
    # Getting the type of 'b' (line 1473)
    b_38177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 4), 'b')
    # Getting the type of 'idx' (line 1473)
    idx_38178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 6), 'idx')
    # Storing an element on a container (line 1473)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1473, 4), b_38177, (idx_38178, subscript_call_result_38176))
    
    # Assigning a Compare to a Name (line 1475):
    
    # Assigning a Compare to a Name (line 1475):
    
    # Assigning a Compare to a Name (line 1475):
    
    # Getting the type of 's' (line 1475)
    s_38179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 10), 's')
    int_38180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1475, 15), 'int')
    # Applying the binary operator '==' (line 1475)
    result_eq_38181 = python_operator(stypy.reporting.localization.Localization(__file__, 1475, 10), '==', s_38179, int_38180)
    
    # Assigning a type to the variable 'idx' (line 1475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1475, 4), 'idx', result_eq_38181)
    
    # Assigning a Subscript to a Subscript (line 1476):
    
    # Assigning a Subscript to a Subscript (line 1476):
    
    # Assigning a Subscript to a Subscript (line 1476):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1476)
    idx_38182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 15), 'idx')
    # Getting the type of 'v' (line 1476)
    v_38183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 13), 'v')
    # Obtaining the member '__getitem__' of a type (line 1476)
    getitem___38184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1476, 13), v_38183, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1476)
    subscript_call_result_38185 = invoke(stypy.reporting.localization.Localization(__file__, 1476, 13), getitem___38184, idx_38182)
    
    # Getting the type of 'r' (line 1476)
    r_38186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 4), 'r')
    # Getting the type of 'idx' (line 1476)
    idx_38187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 6), 'idx')
    # Storing an element on a container (line 1476)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1476, 4), r_38186, (idx_38187, subscript_call_result_38185))
    
    # Assigning a Subscript to a Subscript (line 1477):
    
    # Assigning a Subscript to a Subscript (line 1477):
    
    # Assigning a Subscript to a Subscript (line 1477):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1477)
    idx_38188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 15), 'idx')
    # Getting the type of 'v' (line 1477)
    v_38189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 13), 'v')
    # Obtaining the member '__getitem__' of a type (line 1477)
    getitem___38190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 13), v_38189, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1477)
    subscript_call_result_38191 = invoke(stypy.reporting.localization.Localization(__file__, 1477, 13), getitem___38190, idx_38188)
    
    # Getting the type of 'g' (line 1477)
    g_38192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 4), 'g')
    # Getting the type of 'idx' (line 1477)
    idx_38193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 6), 'idx')
    # Storing an element on a container (line 1477)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1477, 4), g_38192, (idx_38193, subscript_call_result_38191))
    
    # Assigning a Subscript to a Subscript (line 1478):
    
    # Assigning a Subscript to a Subscript (line 1478):
    
    # Assigning a Subscript to a Subscript (line 1478):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1478)
    idx_38194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 15), 'idx')
    # Getting the type of 'v' (line 1478)
    v_38195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 13), 'v')
    # Obtaining the member '__getitem__' of a type (line 1478)
    getitem___38196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1478, 13), v_38195, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1478)
    subscript_call_result_38197 = invoke(stypy.reporting.localization.Localization(__file__, 1478, 13), getitem___38196, idx_38194)
    
    # Getting the type of 'b' (line 1478)
    b_38198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 4), 'b')
    # Getting the type of 'idx' (line 1478)
    idx_38199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 6), 'idx')
    # Storing an element on a container (line 1478)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1478, 4), b_38198, (idx_38199, subscript_call_result_38197))
    
    # Assigning a Call to a Name (line 1481):
    
    # Assigning a Call to a Name (line 1481):
    
    # Assigning a Call to a Name (line 1481):
    
    # Call to concatenate(...): (line 1481)
    # Processing the call arguments (line 1481)
    
    # Obtaining an instance of the builtin type 'list' (line 1481)
    list_38202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1481, 25), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1481)
    # Adding element type (line 1481)
    
    # Obtaining the type of the subscript
    Ellipsis_38203 = Ellipsis
    # Getting the type of 'None' (line 1481)
    None_38204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 33), 'None', False)
    # Getting the type of 'r' (line 1481)
    r_38205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 26), 'r', False)
    # Obtaining the member '__getitem__' of a type (line 1481)
    getitem___38206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 26), r_38205, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1481)
    subscript_call_result_38207 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 26), getitem___38206, (Ellipsis_38203, None_38204))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1481, 25), list_38202, subscript_call_result_38207)
    # Adding element type (line 1481)
    
    # Obtaining the type of the subscript
    Ellipsis_38208 = Ellipsis
    # Getting the type of 'None' (line 1481)
    None_38209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 47), 'None', False)
    # Getting the type of 'g' (line 1481)
    g_38210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 40), 'g', False)
    # Obtaining the member '__getitem__' of a type (line 1481)
    getitem___38211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 40), g_38210, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1481)
    subscript_call_result_38212 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 40), getitem___38211, (Ellipsis_38208, None_38209))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1481, 25), list_38202, subscript_call_result_38212)
    # Adding element type (line 1481)
    
    # Obtaining the type of the subscript
    Ellipsis_38213 = Ellipsis
    # Getting the type of 'None' (line 1481)
    None_38214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 61), 'None', False)
    # Getting the type of 'b' (line 1481)
    b_38215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 54), 'b', False)
    # Obtaining the member '__getitem__' of a type (line 1481)
    getitem___38216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 54), b_38215, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1481)
    subscript_call_result_38217 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 54), getitem___38216, (Ellipsis_38213, None_38214))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1481, 25), list_38202, subscript_call_result_38217)
    
    int_38218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1481, 69), 'int')
    # Processing the call keyword arguments (line 1481)
    kwargs_38219 = {}
    # Getting the type of 'np' (line 1481)
    np_38200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 10), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 1481)
    concatenate_38201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 10), np_38200, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1481)
    concatenate_call_result_38220 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 10), concatenate_38201, *[list_38202, int_38218], **kwargs_38219)
    
    # Assigning a type to the variable 'rgb' (line 1481)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 4), 'rgb', concatenate_call_result_38220)
    
    
    # Getting the type of 'in_ndim' (line 1483)
    in_ndim_38221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 7), 'in_ndim')
    int_38222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, 18), 'int')
    # Applying the binary operator '==' (line 1483)
    result_eq_38223 = python_operator(stypy.reporting.localization.Localization(__file__, 1483, 7), '==', in_ndim_38221, int_38222)
    
    # Testing the type of an if condition (line 1483)
    if_condition_38224 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1483, 4), result_eq_38223)
    # Assigning a type to the variable 'if_condition_38224' (line 1483)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 4), 'if_condition_38224', if_condition_38224)
    # SSA begins for if statement (line 1483)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Attribute (line 1484):
    
    # Assigning a Tuple to a Attribute (line 1484):
    
    # Assigning a Tuple to a Attribute (line 1484):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1484)
    tuple_38225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1484, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1484)
    # Adding element type (line 1484)
    int_38226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1484, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1484, 21), tuple_38225, int_38226)
    
    # Getting the type of 'rgb' (line 1484)
    rgb_38227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 8), 'rgb')
    # Setting the type of the member 'shape' of a type (line 1484)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 8), rgb_38227, 'shape', tuple_38225)
    # SSA join for if statement (line 1483)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'rgb' (line 1486)
    rgb_38228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 11), 'rgb')
    # Assigning a type to the variable 'stypy_return_type' (line 1486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 4), 'stypy_return_type', rgb_38228)
    
    # ################# End of 'hsv_to_rgb(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hsv_to_rgb' in the type store
    # Getting the type of 'stypy_return_type' (line 1400)
    stypy_return_type_38229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_38229)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hsv_to_rgb'
    return stypy_return_type_38229

# Assigning a type to the variable 'hsv_to_rgb' (line 1400)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 0), 'hsv_to_rgb', hsv_to_rgb)

@norecursion
def _vector_magnitude(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_vector_magnitude'
    module_type_store = module_type_store.open_function_context('_vector_magnitude', 1489, 0, False)
    
    # Passed parameters checking function
    _vector_magnitude.stypy_localization = localization
    _vector_magnitude.stypy_type_of_self = None
    _vector_magnitude.stypy_type_store = module_type_store
    _vector_magnitude.stypy_function_name = '_vector_magnitude'
    _vector_magnitude.stypy_param_names_list = ['arr']
    _vector_magnitude.stypy_varargs_param_name = None
    _vector_magnitude.stypy_kwargs_param_name = None
    _vector_magnitude.stypy_call_defaults = defaults
    _vector_magnitude.stypy_call_varargs = varargs
    _vector_magnitude.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_vector_magnitude', ['arr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_vector_magnitude', localization, ['arr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_vector_magnitude(...)' code ##################

    
    # Assigning a Num to a Name (line 1497):
    
    # Assigning a Num to a Name (line 1497):
    
    # Assigning a Num to a Name (line 1497):
    int_38230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1497, 13), 'int')
    # Assigning a type to the variable 'sum_sq' (line 1497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 4), 'sum_sq', int_38230)
    
    
    # Call to range(...): (line 1498)
    # Processing the call arguments (line 1498)
    
    # Obtaining the type of the subscript
    int_38232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1498, 29), 'int')
    # Getting the type of 'arr' (line 1498)
    arr_38233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 19), 'arr', False)
    # Obtaining the member 'shape' of a type (line 1498)
    shape_38234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1498, 19), arr_38233, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1498)
    getitem___38235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1498, 19), shape_38234, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1498)
    subscript_call_result_38236 = invoke(stypy.reporting.localization.Localization(__file__, 1498, 19), getitem___38235, int_38232)
    
    # Processing the call keyword arguments (line 1498)
    kwargs_38237 = {}
    # Getting the type of 'range' (line 1498)
    range_38231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 13), 'range', False)
    # Calling range(args, kwargs) (line 1498)
    range_call_result_38238 = invoke(stypy.reporting.localization.Localization(__file__, 1498, 13), range_38231, *[subscript_call_result_38236], **kwargs_38237)
    
    # Testing the type of a for loop iterable (line 1498)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1498, 4), range_call_result_38238)
    # Getting the type of the for loop variable (line 1498)
    for_loop_var_38239 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1498, 4), range_call_result_38238)
    # Assigning a type to the variable 'i' (line 1498)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1498, 4), 'i', for_loop_var_38239)
    # SSA begins for a for statement (line 1498)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'sum_sq' (line 1499)
    sum_sq_38240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 8), 'sum_sq')
    
    # Call to square(...): (line 1499)
    # Processing the call arguments (line 1499)
    
    # Obtaining the type of the subscript
    Ellipsis_38243 = Ellipsis
    # Getting the type of 'i' (line 1499)
    i_38244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 37), 'i', False)
    # Getting the type of 'np' (line 1499)
    np_38245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 40), 'np', False)
    # Obtaining the member 'newaxis' of a type (line 1499)
    newaxis_38246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1499, 40), np_38245, 'newaxis')
    # Getting the type of 'arr' (line 1499)
    arr_38247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 28), 'arr', False)
    # Obtaining the member '__getitem__' of a type (line 1499)
    getitem___38248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1499, 28), arr_38247, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1499)
    subscript_call_result_38249 = invoke(stypy.reporting.localization.Localization(__file__, 1499, 28), getitem___38248, (Ellipsis_38243, i_38244, newaxis_38246))
    
    # Processing the call keyword arguments (line 1499)
    kwargs_38250 = {}
    # Getting the type of 'np' (line 1499)
    np_38241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 18), 'np', False)
    # Obtaining the member 'square' of a type (line 1499)
    square_38242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1499, 18), np_38241, 'square')
    # Calling square(args, kwargs) (line 1499)
    square_call_result_38251 = invoke(stypy.reporting.localization.Localization(__file__, 1499, 18), square_38242, *[subscript_call_result_38249], **kwargs_38250)
    
    # Applying the binary operator '+=' (line 1499)
    result_iadd_38252 = python_operator(stypy.reporting.localization.Localization(__file__, 1499, 8), '+=', sum_sq_38240, square_call_result_38251)
    # Assigning a type to the variable 'sum_sq' (line 1499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1499, 8), 'sum_sq', result_iadd_38252)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to sqrt(...): (line 1500)
    # Processing the call arguments (line 1500)
    # Getting the type of 'sum_sq' (line 1500)
    sum_sq_38255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 19), 'sum_sq', False)
    # Processing the call keyword arguments (line 1500)
    kwargs_38256 = {}
    # Getting the type of 'np' (line 1500)
    np_38253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 11), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1500)
    sqrt_38254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 11), np_38253, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1500)
    sqrt_call_result_38257 = invoke(stypy.reporting.localization.Localization(__file__, 1500, 11), sqrt_38254, *[sum_sq_38255], **kwargs_38256)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1500)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 4), 'stypy_return_type', sqrt_call_result_38257)
    
    # ################# End of '_vector_magnitude(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_vector_magnitude' in the type store
    # Getting the type of 'stypy_return_type' (line 1489)
    stypy_return_type_38258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_38258)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_vector_magnitude'
    return stypy_return_type_38258

# Assigning a type to the variable '_vector_magnitude' (line 1489)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 0), '_vector_magnitude', _vector_magnitude)

@norecursion
def _vector_dot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_vector_dot'
    module_type_store = module_type_store.open_function_context('_vector_dot', 1503, 0, False)
    
    # Passed parameters checking function
    _vector_dot.stypy_localization = localization
    _vector_dot.stypy_type_of_self = None
    _vector_dot.stypy_type_store = module_type_store
    _vector_dot.stypy_function_name = '_vector_dot'
    _vector_dot.stypy_param_names_list = ['a', 'b']
    _vector_dot.stypy_varargs_param_name = None
    _vector_dot.stypy_kwargs_param_name = None
    _vector_dot.stypy_call_defaults = defaults
    _vector_dot.stypy_call_varargs = varargs
    _vector_dot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_vector_dot', ['a', 'b'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_vector_dot', localization, ['a', 'b'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_vector_dot(...)' code ##################

    
    # Assigning a Num to a Name (line 1508):
    
    # Assigning a Num to a Name (line 1508):
    
    # Assigning a Num to a Name (line 1508):
    int_38259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1508, 10), 'int')
    # Assigning a type to the variable 'dot' (line 1508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1508, 4), 'dot', int_38259)
    
    
    # Call to range(...): (line 1509)
    # Processing the call arguments (line 1509)
    
    # Obtaining the type of the subscript
    int_38261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1509, 27), 'int')
    # Getting the type of 'a' (line 1509)
    a_38262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 19), 'a', False)
    # Obtaining the member 'shape' of a type (line 1509)
    shape_38263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1509, 19), a_38262, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1509)
    getitem___38264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1509, 19), shape_38263, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1509)
    subscript_call_result_38265 = invoke(stypy.reporting.localization.Localization(__file__, 1509, 19), getitem___38264, int_38261)
    
    # Processing the call keyword arguments (line 1509)
    kwargs_38266 = {}
    # Getting the type of 'range' (line 1509)
    range_38260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 13), 'range', False)
    # Calling range(args, kwargs) (line 1509)
    range_call_result_38267 = invoke(stypy.reporting.localization.Localization(__file__, 1509, 13), range_38260, *[subscript_call_result_38265], **kwargs_38266)
    
    # Testing the type of a for loop iterable (line 1509)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1509, 4), range_call_result_38267)
    # Getting the type of the for loop variable (line 1509)
    for_loop_var_38268 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1509, 4), range_call_result_38267)
    # Assigning a type to the variable 'i' (line 1509)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1509, 4), 'i', for_loop_var_38268)
    # SSA begins for a for statement (line 1509)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'dot' (line 1510)
    dot_38269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 8), 'dot')
    
    # Obtaining the type of the subscript
    Ellipsis_38270 = Ellipsis
    # Getting the type of 'i' (line 1510)
    i_38271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 22), 'i')
    # Getting the type of 'a' (line 1510)
    a_38272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 15), 'a')
    # Obtaining the member '__getitem__' of a type (line 1510)
    getitem___38273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1510, 15), a_38272, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1510)
    subscript_call_result_38274 = invoke(stypy.reporting.localization.Localization(__file__, 1510, 15), getitem___38273, (Ellipsis_38270, i_38271))
    
    
    # Obtaining the type of the subscript
    Ellipsis_38275 = Ellipsis
    # Getting the type of 'i' (line 1510)
    i_38276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 34), 'i')
    # Getting the type of 'b' (line 1510)
    b_38277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 27), 'b')
    # Obtaining the member '__getitem__' of a type (line 1510)
    getitem___38278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1510, 27), b_38277, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1510)
    subscript_call_result_38279 = invoke(stypy.reporting.localization.Localization(__file__, 1510, 27), getitem___38278, (Ellipsis_38275, i_38276))
    
    # Applying the binary operator '*' (line 1510)
    result_mul_38280 = python_operator(stypy.reporting.localization.Localization(__file__, 1510, 15), '*', subscript_call_result_38274, subscript_call_result_38279)
    
    # Applying the binary operator '+=' (line 1510)
    result_iadd_38281 = python_operator(stypy.reporting.localization.Localization(__file__, 1510, 8), '+=', dot_38269, result_mul_38280)
    # Assigning a type to the variable 'dot' (line 1510)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1510, 8), 'dot', result_iadd_38281)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'dot' (line 1511)
    dot_38282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 11), 'dot')
    # Assigning a type to the variable 'stypy_return_type' (line 1511)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1511, 4), 'stypy_return_type', dot_38282)
    
    # ################# End of '_vector_dot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_vector_dot' in the type store
    # Getting the type of 'stypy_return_type' (line 1503)
    stypy_return_type_38283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_38283)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_vector_dot'
    return stypy_return_type_38283

# Assigning a type to the variable '_vector_dot' (line 1503)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1503, 0), '_vector_dot', _vector_dot)
# Declaration of the 'LightSource' class

class LightSource(object, ):
    unicode_38284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1524, (-1)), 'unicode', u'\n    Create a light source coming from the specified azimuth and elevation.\n    Angles are in degrees, with the azimuth measured\n    clockwise from north and elevation up from the zero plane of the surface.\n\n    The :meth:`shade` is used to produce "shaded" rgb values for a data array.\n    :meth:`shade_rgb` can be used to combine an rgb image with\n    The :meth:`shade_rgb`\n    The :meth:`hillshade` produces an illumination map of a surface.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_38285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1525, 29), 'int')
        int_38286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1525, 41), 'int')
        int_38287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1525, 57), 'int')
        int_38288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1525, 72), 'int')
        int_38289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1526, 29), 'int')
        int_38290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1526, 44), 'int')
        defaults = [int_38285, int_38286, int_38287, int_38288, int_38289, int_38290]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1525, 4, False)
        # Assigning a type to the variable 'self' (line 1526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LightSource.__init__', ['azdeg', 'altdeg', 'hsv_min_val', 'hsv_max_val', 'hsv_min_sat', 'hsv_max_sat'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['azdeg', 'altdeg', 'hsv_min_val', 'hsv_max_val', 'hsv_min_sat', 'hsv_max_sat'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_38291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, (-1)), 'unicode', u'\n        Specify the azimuth (measured clockwise from south) and altitude\n        (measured up from the plane of the surface) of the light source\n        in degrees.\n\n        Parameters\n        ----------\n        azdeg : number, optional\n            The azimuth (0-360, degrees clockwise from North) of the light\n            source. Defaults to 315 degrees (from the northwest).\n        altdeg : number, optional\n            The altitude (0-90, degrees up from horizontal) of the light\n            source.  Defaults to 45 degrees from horizontal.\n\n        Notes\n        -----\n        For backwards compatibility, the parameters *hsv_min_val*,\n        *hsv_max_val*, *hsv_min_sat*, and *hsv_max_sat* may be supplied at\n        initialization as well.  However, these parameters will only be used if\n        "blend_mode=\'hsv\'" is passed into :meth:`shade` or :meth:`shade_rgb`.\n        See the documentation for :meth:`blend_hsv` for more details.\n        ')
        
        # Assigning a Name to a Attribute (line 1549):
        
        # Assigning a Name to a Attribute (line 1549):
        
        # Assigning a Name to a Attribute (line 1549):
        # Getting the type of 'azdeg' (line 1549)
        azdeg_38292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 21), 'azdeg')
        # Getting the type of 'self' (line 1549)
        self_38293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 8), 'self')
        # Setting the type of the member 'azdeg' of a type (line 1549)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1549, 8), self_38293, 'azdeg', azdeg_38292)
        
        # Assigning a Name to a Attribute (line 1550):
        
        # Assigning a Name to a Attribute (line 1550):
        
        # Assigning a Name to a Attribute (line 1550):
        # Getting the type of 'altdeg' (line 1550)
        altdeg_38294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 22), 'altdeg')
        # Getting the type of 'self' (line 1550)
        self_38295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 8), 'self')
        # Setting the type of the member 'altdeg' of a type (line 1550)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1550, 8), self_38295, 'altdeg', altdeg_38294)
        
        # Assigning a Name to a Attribute (line 1551):
        
        # Assigning a Name to a Attribute (line 1551):
        
        # Assigning a Name to a Attribute (line 1551):
        # Getting the type of 'hsv_min_val' (line 1551)
        hsv_min_val_38296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 27), 'hsv_min_val')
        # Getting the type of 'self' (line 1551)
        self_38297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'self')
        # Setting the type of the member 'hsv_min_val' of a type (line 1551)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 8), self_38297, 'hsv_min_val', hsv_min_val_38296)
        
        # Assigning a Name to a Attribute (line 1552):
        
        # Assigning a Name to a Attribute (line 1552):
        
        # Assigning a Name to a Attribute (line 1552):
        # Getting the type of 'hsv_max_val' (line 1552)
        hsv_max_val_38298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 27), 'hsv_max_val')
        # Getting the type of 'self' (line 1552)
        self_38299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 8), 'self')
        # Setting the type of the member 'hsv_max_val' of a type (line 1552)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1552, 8), self_38299, 'hsv_max_val', hsv_max_val_38298)
        
        # Assigning a Name to a Attribute (line 1553):
        
        # Assigning a Name to a Attribute (line 1553):
        
        # Assigning a Name to a Attribute (line 1553):
        # Getting the type of 'hsv_min_sat' (line 1553)
        hsv_min_sat_38300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 27), 'hsv_min_sat')
        # Getting the type of 'self' (line 1553)
        self_38301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 8), 'self')
        # Setting the type of the member 'hsv_min_sat' of a type (line 1553)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1553, 8), self_38301, 'hsv_min_sat', hsv_min_sat_38300)
        
        # Assigning a Name to a Attribute (line 1554):
        
        # Assigning a Name to a Attribute (line 1554):
        
        # Assigning a Name to a Attribute (line 1554):
        # Getting the type of 'hsv_max_sat' (line 1554)
        hsv_max_sat_38302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 27), 'hsv_max_sat')
        # Getting the type of 'self' (line 1554)
        self_38303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 8), 'self')
        # Setting the type of the member 'hsv_max_sat' of a type (line 1554)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1554, 8), self_38303, 'hsv_max_sat', hsv_max_sat_38302)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def direction(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'direction'
        module_type_store = module_type_store.open_function_context('direction', 1556, 4, False)
        # Assigning a type to the variable 'self' (line 1557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LightSource.direction.__dict__.__setitem__('stypy_localization', localization)
        LightSource.direction.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LightSource.direction.__dict__.__setitem__('stypy_type_store', module_type_store)
        LightSource.direction.__dict__.__setitem__('stypy_function_name', 'LightSource.direction')
        LightSource.direction.__dict__.__setitem__('stypy_param_names_list', [])
        LightSource.direction.__dict__.__setitem__('stypy_varargs_param_name', None)
        LightSource.direction.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LightSource.direction.__dict__.__setitem__('stypy_call_defaults', defaults)
        LightSource.direction.__dict__.__setitem__('stypy_call_varargs', varargs)
        LightSource.direction.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LightSource.direction.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LightSource.direction', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'direction', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'direction(...)' code ##################

        unicode_38304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1558, 8), 'unicode', u' The unit vector direction towards the light source ')
        
        # Assigning a Call to a Name (line 1562):
        
        # Assigning a Call to a Name (line 1562):
        
        # Assigning a Call to a Name (line 1562):
        
        # Call to radians(...): (line 1562)
        # Processing the call arguments (line 1562)
        int_38307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1562, 24), 'int')
        # Getting the type of 'self' (line 1562)
        self_38308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 29), 'self', False)
        # Obtaining the member 'azdeg' of a type (line 1562)
        azdeg_38309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1562, 29), self_38308, 'azdeg')
        # Applying the binary operator '-' (line 1562)
        result_sub_38310 = python_operator(stypy.reporting.localization.Localization(__file__, 1562, 24), '-', int_38307, azdeg_38309)
        
        # Processing the call keyword arguments (line 1562)
        kwargs_38311 = {}
        # Getting the type of 'np' (line 1562)
        np_38305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 13), 'np', False)
        # Obtaining the member 'radians' of a type (line 1562)
        radians_38306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1562, 13), np_38305, 'radians')
        # Calling radians(args, kwargs) (line 1562)
        radians_call_result_38312 = invoke(stypy.reporting.localization.Localization(__file__, 1562, 13), radians_38306, *[result_sub_38310], **kwargs_38311)
        
        # Assigning a type to the variable 'az' (line 1562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 8), 'az', radians_call_result_38312)
        
        # Assigning a Call to a Name (line 1563):
        
        # Assigning a Call to a Name (line 1563):
        
        # Assigning a Call to a Name (line 1563):
        
        # Call to radians(...): (line 1563)
        # Processing the call arguments (line 1563)
        # Getting the type of 'self' (line 1563)
        self_38315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 25), 'self', False)
        # Obtaining the member 'altdeg' of a type (line 1563)
        altdeg_38316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1563, 25), self_38315, 'altdeg')
        # Processing the call keyword arguments (line 1563)
        kwargs_38317 = {}
        # Getting the type of 'np' (line 1563)
        np_38313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 14), 'np', False)
        # Obtaining the member 'radians' of a type (line 1563)
        radians_38314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1563, 14), np_38313, 'radians')
        # Calling radians(args, kwargs) (line 1563)
        radians_call_result_38318 = invoke(stypy.reporting.localization.Localization(__file__, 1563, 14), radians_38314, *[altdeg_38316], **kwargs_38317)
        
        # Assigning a type to the variable 'alt' (line 1563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1563, 8), 'alt', radians_call_result_38318)
        
        # Call to array(...): (line 1565)
        # Processing the call arguments (line 1565)
        
        # Obtaining an instance of the builtin type 'list' (line 1565)
        list_38321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1565)
        # Adding element type (line 1565)
        
        # Call to cos(...): (line 1566)
        # Processing the call arguments (line 1566)
        # Getting the type of 'az' (line 1566)
        az_38324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 19), 'az', False)
        # Processing the call keyword arguments (line 1566)
        kwargs_38325 = {}
        # Getting the type of 'np' (line 1566)
        np_38322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 12), 'np', False)
        # Obtaining the member 'cos' of a type (line 1566)
        cos_38323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 12), np_38322, 'cos')
        # Calling cos(args, kwargs) (line 1566)
        cos_call_result_38326 = invoke(stypy.reporting.localization.Localization(__file__, 1566, 12), cos_38323, *[az_38324], **kwargs_38325)
        
        
        # Call to cos(...): (line 1566)
        # Processing the call arguments (line 1566)
        # Getting the type of 'alt' (line 1566)
        alt_38329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 32), 'alt', False)
        # Processing the call keyword arguments (line 1566)
        kwargs_38330 = {}
        # Getting the type of 'np' (line 1566)
        np_38327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 25), 'np', False)
        # Obtaining the member 'cos' of a type (line 1566)
        cos_38328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 25), np_38327, 'cos')
        # Calling cos(args, kwargs) (line 1566)
        cos_call_result_38331 = invoke(stypy.reporting.localization.Localization(__file__, 1566, 25), cos_38328, *[alt_38329], **kwargs_38330)
        
        # Applying the binary operator '*' (line 1566)
        result_mul_38332 = python_operator(stypy.reporting.localization.Localization(__file__, 1566, 12), '*', cos_call_result_38326, cos_call_result_38331)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1565, 24), list_38321, result_mul_38332)
        # Adding element type (line 1565)
        
        # Call to sin(...): (line 1567)
        # Processing the call arguments (line 1567)
        # Getting the type of 'az' (line 1567)
        az_38335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 19), 'az', False)
        # Processing the call keyword arguments (line 1567)
        kwargs_38336 = {}
        # Getting the type of 'np' (line 1567)
        np_38333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 12), 'np', False)
        # Obtaining the member 'sin' of a type (line 1567)
        sin_38334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 12), np_38333, 'sin')
        # Calling sin(args, kwargs) (line 1567)
        sin_call_result_38337 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 12), sin_38334, *[az_38335], **kwargs_38336)
        
        
        # Call to cos(...): (line 1567)
        # Processing the call arguments (line 1567)
        # Getting the type of 'alt' (line 1567)
        alt_38340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 32), 'alt', False)
        # Processing the call keyword arguments (line 1567)
        kwargs_38341 = {}
        # Getting the type of 'np' (line 1567)
        np_38338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 25), 'np', False)
        # Obtaining the member 'cos' of a type (line 1567)
        cos_38339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 25), np_38338, 'cos')
        # Calling cos(args, kwargs) (line 1567)
        cos_call_result_38342 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 25), cos_38339, *[alt_38340], **kwargs_38341)
        
        # Applying the binary operator '*' (line 1567)
        result_mul_38343 = python_operator(stypy.reporting.localization.Localization(__file__, 1567, 12), '*', sin_call_result_38337, cos_call_result_38342)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1565, 24), list_38321, result_mul_38343)
        # Adding element type (line 1565)
        
        # Call to sin(...): (line 1568)
        # Processing the call arguments (line 1568)
        # Getting the type of 'alt' (line 1568)
        alt_38346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 19), 'alt', False)
        # Processing the call keyword arguments (line 1568)
        kwargs_38347 = {}
        # Getting the type of 'np' (line 1568)
        np_38344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 12), 'np', False)
        # Obtaining the member 'sin' of a type (line 1568)
        sin_38345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1568, 12), np_38344, 'sin')
        # Calling sin(args, kwargs) (line 1568)
        sin_call_result_38348 = invoke(stypy.reporting.localization.Localization(__file__, 1568, 12), sin_38345, *[alt_38346], **kwargs_38347)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1565, 24), list_38321, sin_call_result_38348)
        
        # Processing the call keyword arguments (line 1565)
        kwargs_38349 = {}
        # Getting the type of 'np' (line 1565)
        np_38319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 15), 'np', False)
        # Obtaining the member 'array' of a type (line 1565)
        array_38320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 15), np_38319, 'array')
        # Calling array(args, kwargs) (line 1565)
        array_call_result_38350 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 15), array_38320, *[list_38321], **kwargs_38349)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'stypy_return_type', array_call_result_38350)
        
        # ################# End of 'direction(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'direction' in the type store
        # Getting the type of 'stypy_return_type' (line 1556)
        stypy_return_type_38351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_38351)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'direction'
        return stypy_return_type_38351


    @norecursion
    def hillshade(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_38352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 45), 'int')
        int_38353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 51), 'int')
        int_38354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 57), 'int')
        float_38355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 69), 'float')
        defaults = [int_38352, int_38353, int_38354, float_38355]
        # Create a new context for function 'hillshade'
        module_type_store = module_type_store.open_function_context('hillshade', 1571, 4, False)
        # Assigning a type to the variable 'self' (line 1572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1572, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LightSource.hillshade.__dict__.__setitem__('stypy_localization', localization)
        LightSource.hillshade.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LightSource.hillshade.__dict__.__setitem__('stypy_type_store', module_type_store)
        LightSource.hillshade.__dict__.__setitem__('stypy_function_name', 'LightSource.hillshade')
        LightSource.hillshade.__dict__.__setitem__('stypy_param_names_list', ['elevation', 'vert_exag', 'dx', 'dy', 'fraction'])
        LightSource.hillshade.__dict__.__setitem__('stypy_varargs_param_name', None)
        LightSource.hillshade.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LightSource.hillshade.__dict__.__setitem__('stypy_call_defaults', defaults)
        LightSource.hillshade.__dict__.__setitem__('stypy_call_varargs', varargs)
        LightSource.hillshade.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LightSource.hillshade.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LightSource.hillshade', ['elevation', 'vert_exag', 'dx', 'dy', 'fraction'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'hillshade', localization, ['elevation', 'vert_exag', 'dx', 'dy', 'fraction'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'hillshade(...)' code ##################

        unicode_38356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1605, (-1)), 'unicode', u'\n        Calculates the illumination intensity for a surface using the defined\n        azimuth and elevation for the light source.\n\n        This computes the normal vectors for the surface, and then passes them\n        on to `shade_normals`\n\n        Parameters\n        ----------\n        elevation : array-like\n            A 2d array (or equivalent) of the height values used to generate an\n            illumination map\n        vert_exag : number, optional\n            The amount to exaggerate the elevation values by when calculating\n            illumination. This can be used either to correct for differences in\n            units between the x-y coordinate system and the elevation\n            coordinate system (e.g. decimal degrees vs meters) or to exaggerate\n            or de-emphasize topographic effects.\n        dx : number, optional\n            The x-spacing (columns) of the input *elevation* grid.\n        dy : number, optional\n            The y-spacing (rows) of the input *elevation* grid.\n        fraction : number, optional\n            Increases or decreases the contrast of the hillshade.  Values\n            greater than one will cause intermediate values to move closer to\n            full illumination or shadow (and clipping any values that move\n            beyond 0 or 1). Note that this is not visually or mathematically\n            the same as vertical exaggeration.\n        Returns\n        -------\n        intensity : ndarray\n            A 2d array of illumination values between 0-1, where 0 is\n            completely in shadow and 1 is completely illuminated.\n        ')
        
        # Assigning a UnaryOp to a Name (line 1610):
        
        # Assigning a UnaryOp to a Name (line 1610):
        
        # Assigning a UnaryOp to a Name (line 1610):
        
        # Getting the type of 'dy' (line 1610)
        dy_38357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 14), 'dy')
        # Applying the 'usub' unary operator (line 1610)
        result___neg___38358 = python_operator(stypy.reporting.localization.Localization(__file__, 1610, 13), 'usub', dy_38357)
        
        # Assigning a type to the variable 'dy' (line 1610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1610, 8), 'dy', result___neg___38358)
        
        # Assigning a Call to a Tuple (line 1613):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to gradient(...): (line 1613)
        # Processing the call arguments (line 1613)
        # Getting the type of 'vert_exag' (line 1613)
        vert_exag_38361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 33), 'vert_exag', False)
        # Getting the type of 'elevation' (line 1613)
        elevation_38362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 45), 'elevation', False)
        # Applying the binary operator '*' (line 1613)
        result_mul_38363 = python_operator(stypy.reporting.localization.Localization(__file__, 1613, 33), '*', vert_exag_38361, elevation_38362)
        
        # Getting the type of 'dy' (line 1613)
        dy_38364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 56), 'dy', False)
        # Getting the type of 'dx' (line 1613)
        dx_38365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 60), 'dx', False)
        # Processing the call keyword arguments (line 1613)
        kwargs_38366 = {}
        # Getting the type of 'np' (line 1613)
        np_38359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 21), 'np', False)
        # Obtaining the member 'gradient' of a type (line 1613)
        gradient_38360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1613, 21), np_38359, 'gradient')
        # Calling gradient(args, kwargs) (line 1613)
        gradient_call_result_38367 = invoke(stypy.reporting.localization.Localization(__file__, 1613, 21), gradient_38360, *[result_mul_38363, dy_38364, dx_38365], **kwargs_38366)
        
        # Assigning a type to the variable 'call_assignment_34260' (line 1613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1613, 8), 'call_assignment_34260', gradient_call_result_38367)
        
        # Assigning a Call to a Name (line 1613):
        
        # Assigning a Call to a Name (line 1613):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_38370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1613, 8), 'int')
        # Processing the call keyword arguments
        kwargs_38371 = {}
        # Getting the type of 'call_assignment_34260' (line 1613)
        call_assignment_34260_38368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 8), 'call_assignment_34260', False)
        # Obtaining the member '__getitem__' of a type (line 1613)
        getitem___38369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1613, 8), call_assignment_34260_38368, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_38372 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___38369, *[int_38370], **kwargs_38371)
        
        # Assigning a type to the variable 'call_assignment_34261' (line 1613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1613, 8), 'call_assignment_34261', getitem___call_result_38372)
        
        # Assigning a Name to a Name (line 1613):
        
        # Assigning a Name to a Name (line 1613):
        # Getting the type of 'call_assignment_34261' (line 1613)
        call_assignment_34261_38373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 8), 'call_assignment_34261')
        # Assigning a type to the variable 'e_dy' (line 1613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1613, 8), 'e_dy', call_assignment_34261_38373)
        
        # Assigning a Call to a Name (line 1613):
        
        # Assigning a Call to a Name (line 1613):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_38376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1613, 8), 'int')
        # Processing the call keyword arguments
        kwargs_38377 = {}
        # Getting the type of 'call_assignment_34260' (line 1613)
        call_assignment_34260_38374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 8), 'call_assignment_34260', False)
        # Obtaining the member '__getitem__' of a type (line 1613)
        getitem___38375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1613, 8), call_assignment_34260_38374, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_38378 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___38375, *[int_38376], **kwargs_38377)
        
        # Assigning a type to the variable 'call_assignment_34262' (line 1613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1613, 8), 'call_assignment_34262', getitem___call_result_38378)
        
        # Assigning a Name to a Name (line 1613):
        
        # Assigning a Name to a Name (line 1613):
        # Getting the type of 'call_assignment_34262' (line 1613)
        call_assignment_34262_38379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 8), 'call_assignment_34262')
        # Assigning a type to the variable 'e_dx' (line 1613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1613, 14), 'e_dx', call_assignment_34262_38379)
        
        # Assigning a Call to a Name (line 1616):
        
        # Assigning a Call to a Name (line 1616):
        
        # Assigning a Call to a Name (line 1616):
        
        # Call to view(...): (line 1616)
        # Processing the call arguments (line 1616)
        
        # Call to type(...): (line 1616)
        # Processing the call arguments (line 1616)
        # Getting the type of 'elevation' (line 1616)
        elevation_38391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 60), 'elevation', False)
        # Processing the call keyword arguments (line 1616)
        kwargs_38392 = {}
        # Getting the type of 'type' (line 1616)
        type_38390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 55), 'type', False)
        # Calling type(args, kwargs) (line 1616)
        type_call_result_38393 = invoke(stypy.reporting.localization.Localization(__file__, 1616, 55), type_38390, *[elevation_38391], **kwargs_38392)
        
        # Processing the call keyword arguments (line 1616)
        kwargs_38394 = {}
        
        # Call to empty(...): (line 1616)
        # Processing the call arguments (line 1616)
        # Getting the type of 'elevation' (line 1616)
        elevation_38382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 26), 'elevation', False)
        # Obtaining the member 'shape' of a type (line 1616)
        shape_38383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1616, 26), elevation_38382, 'shape')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1616)
        tuple_38384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1616, 45), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1616)
        # Adding element type (line 1616)
        int_38385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1616, 45), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1616, 45), tuple_38384, int_38385)
        
        # Applying the binary operator '+' (line 1616)
        result_add_38386 = python_operator(stypy.reporting.localization.Localization(__file__, 1616, 26), '+', shape_38383, tuple_38384)
        
        # Processing the call keyword arguments (line 1616)
        kwargs_38387 = {}
        # Getting the type of 'np' (line 1616)
        np_38380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 17), 'np', False)
        # Obtaining the member 'empty' of a type (line 1616)
        empty_38381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1616, 17), np_38380, 'empty')
        # Calling empty(args, kwargs) (line 1616)
        empty_call_result_38388 = invoke(stypy.reporting.localization.Localization(__file__, 1616, 17), empty_38381, *[result_add_38386], **kwargs_38387)
        
        # Obtaining the member 'view' of a type (line 1616)
        view_38389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1616, 17), empty_call_result_38388, 'view')
        # Calling view(args, kwargs) (line 1616)
        view_call_result_38395 = invoke(stypy.reporting.localization.Localization(__file__, 1616, 17), view_38389, *[type_call_result_38393], **kwargs_38394)
        
        # Assigning a type to the variable 'normal' (line 1616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1616, 8), 'normal', view_call_result_38395)
        
        # Assigning a UnaryOp to a Subscript (line 1617):
        
        # Assigning a UnaryOp to a Subscript (line 1617):
        
        # Assigning a UnaryOp to a Subscript (line 1617):
        
        # Getting the type of 'e_dx' (line 1617)
        e_dx_38396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 26), 'e_dx')
        # Applying the 'usub' unary operator (line 1617)
        result___neg___38397 = python_operator(stypy.reporting.localization.Localization(__file__, 1617, 25), 'usub', e_dx_38396)
        
        # Getting the type of 'normal' (line 1617)
        normal_38398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 8), 'normal')
        Ellipsis_38399 = Ellipsis
        int_38400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1617, 20), 'int')
        # Storing an element on a container (line 1617)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1617, 8), normal_38398, ((Ellipsis_38399, int_38400), result___neg___38397))
        
        # Assigning a UnaryOp to a Subscript (line 1618):
        
        # Assigning a UnaryOp to a Subscript (line 1618):
        
        # Assigning a UnaryOp to a Subscript (line 1618):
        
        # Getting the type of 'e_dy' (line 1618)
        e_dy_38401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 26), 'e_dy')
        # Applying the 'usub' unary operator (line 1618)
        result___neg___38402 = python_operator(stypy.reporting.localization.Localization(__file__, 1618, 25), 'usub', e_dy_38401)
        
        # Getting the type of 'normal' (line 1618)
        normal_38403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 8), 'normal')
        Ellipsis_38404 = Ellipsis
        int_38405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1618, 20), 'int')
        # Storing an element on a container (line 1618)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1618, 8), normal_38403, ((Ellipsis_38404, int_38405), result___neg___38402))
        
        # Assigning a Num to a Subscript (line 1619):
        
        # Assigning a Num to a Subscript (line 1619):
        
        # Assigning a Num to a Subscript (line 1619):
        int_38406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1619, 25), 'int')
        # Getting the type of 'normal' (line 1619)
        normal_38407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 8), 'normal')
        Ellipsis_38408 = Ellipsis
        int_38409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1619, 20), 'int')
        # Storing an element on a container (line 1619)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1619, 8), normal_38407, ((Ellipsis_38408, int_38409), int_38406))
        
        # Getting the type of 'normal' (line 1620)
        normal_38410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 8), 'normal')
        
        # Call to _vector_magnitude(...): (line 1620)
        # Processing the call arguments (line 1620)
        # Getting the type of 'normal' (line 1620)
        normal_38412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 36), 'normal', False)
        # Processing the call keyword arguments (line 1620)
        kwargs_38413 = {}
        # Getting the type of '_vector_magnitude' (line 1620)
        _vector_magnitude_38411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 18), '_vector_magnitude', False)
        # Calling _vector_magnitude(args, kwargs) (line 1620)
        _vector_magnitude_call_result_38414 = invoke(stypy.reporting.localization.Localization(__file__, 1620, 18), _vector_magnitude_38411, *[normal_38412], **kwargs_38413)
        
        # Applying the binary operator 'div=' (line 1620)
        result_div_38415 = python_operator(stypy.reporting.localization.Localization(__file__, 1620, 8), 'div=', normal_38410, _vector_magnitude_call_result_38414)
        # Assigning a type to the variable 'normal' (line 1620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 8), 'normal', result_div_38415)
        
        
        # Call to shade_normals(...): (line 1622)
        # Processing the call arguments (line 1622)
        # Getting the type of 'normal' (line 1622)
        normal_38418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 34), 'normal', False)
        # Getting the type of 'fraction' (line 1622)
        fraction_38419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 42), 'fraction', False)
        # Processing the call keyword arguments (line 1622)
        kwargs_38420 = {}
        # Getting the type of 'self' (line 1622)
        self_38416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 15), 'self', False)
        # Obtaining the member 'shade_normals' of a type (line 1622)
        shade_normals_38417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 15), self_38416, 'shade_normals')
        # Calling shade_normals(args, kwargs) (line 1622)
        shade_normals_call_result_38421 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 15), shade_normals_38417, *[normal_38418, fraction_38419], **kwargs_38420)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 8), 'stypy_return_type', shade_normals_call_result_38421)
        
        # ################# End of 'hillshade(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'hillshade' in the type store
        # Getting the type of 'stypy_return_type' (line 1571)
        stypy_return_type_38422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_38422)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'hillshade'
        return stypy_return_type_38422


    @norecursion
    def shade_normals(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_38423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1624, 46), 'float')
        defaults = [float_38423]
        # Create a new context for function 'shade_normals'
        module_type_store = module_type_store.open_function_context('shade_normals', 1624, 4, False)
        # Assigning a type to the variable 'self' (line 1625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1625, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LightSource.shade_normals.__dict__.__setitem__('stypy_localization', localization)
        LightSource.shade_normals.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LightSource.shade_normals.__dict__.__setitem__('stypy_type_store', module_type_store)
        LightSource.shade_normals.__dict__.__setitem__('stypy_function_name', 'LightSource.shade_normals')
        LightSource.shade_normals.__dict__.__setitem__('stypy_param_names_list', ['normals', 'fraction'])
        LightSource.shade_normals.__dict__.__setitem__('stypy_varargs_param_name', None)
        LightSource.shade_normals.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LightSource.shade_normals.__dict__.__setitem__('stypy_call_defaults', defaults)
        LightSource.shade_normals.__dict__.__setitem__('stypy_call_varargs', varargs)
        LightSource.shade_normals.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LightSource.shade_normals.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LightSource.shade_normals', ['normals', 'fraction'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'shade_normals', localization, ['normals', 'fraction'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'shade_normals(...)' code ##################

        unicode_38424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1648, (-1)), 'unicode', u'\n        Calculates the illumination intensity for the normal vectors of a\n        surface using the defined azimuth and elevation for the light source.\n\n        Imagine an artificial sun placed at infinity in some azimuth and\n        elevation position illuminating our surface. The parts of the surface\n        that slope toward the sun should brighten while those sides facing away\n        should become darker.\n\n        Parameters\n        ----------\n        fraction : number, optional\n            Increases or decreases the contrast of the hillshade.  Values\n            greater than one will cause intermediate values to move closer to\n            full illumination or shadow (and clipping any values that move\n            beyond 0 or 1). Note that this is not visually or mathematically\n            the same as vertical exaggeration.\n\n        Returns\n        -------\n        intensity : ndarray\n            A 2d array of illumination values between 0-1, where 0 is\n            completely in shadow and 1 is completely illuminated.\n        ')
        
        # Assigning a Call to a Name (line 1650):
        
        # Assigning a Call to a Name (line 1650):
        
        # Assigning a Call to a Name (line 1650):
        
        # Call to _vector_dot(...): (line 1650)
        # Processing the call arguments (line 1650)
        # Getting the type of 'normals' (line 1650)
        normals_38426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 32), 'normals', False)
        # Getting the type of 'self' (line 1650)
        self_38427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 41), 'self', False)
        # Obtaining the member 'direction' of a type (line 1650)
        direction_38428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1650, 41), self_38427, 'direction')
        # Processing the call keyword arguments (line 1650)
        kwargs_38429 = {}
        # Getting the type of '_vector_dot' (line 1650)
        _vector_dot_38425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 20), '_vector_dot', False)
        # Calling _vector_dot(args, kwargs) (line 1650)
        _vector_dot_call_result_38430 = invoke(stypy.reporting.localization.Localization(__file__, 1650, 20), _vector_dot_38425, *[normals_38426, direction_38428], **kwargs_38429)
        
        # Assigning a type to the variable 'intensity' (line 1650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1650, 8), 'intensity', _vector_dot_call_result_38430)
        
        # Assigning a Tuple to a Tuple (line 1653):
        
        # Assigning a Call to a Name (line 1653):
        
        # Assigning a Call to a Name (line 1653):
        
        # Call to min(...): (line 1653)
        # Processing the call keyword arguments (line 1653)
        kwargs_38433 = {}
        # Getting the type of 'intensity' (line 1653)
        intensity_38431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 21), 'intensity', False)
        # Obtaining the member 'min' of a type (line 1653)
        min_38432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1653, 21), intensity_38431, 'min')
        # Calling min(args, kwargs) (line 1653)
        min_call_result_38434 = invoke(stypy.reporting.localization.Localization(__file__, 1653, 21), min_38432, *[], **kwargs_38433)
        
        # Assigning a type to the variable 'tuple_assignment_34263' (line 1653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1653, 8), 'tuple_assignment_34263', min_call_result_38434)
        
        # Assigning a Call to a Name (line 1653):
        
        # Assigning a Call to a Name (line 1653):
        
        # Call to max(...): (line 1653)
        # Processing the call keyword arguments (line 1653)
        kwargs_38437 = {}
        # Getting the type of 'intensity' (line 1653)
        intensity_38435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 38), 'intensity', False)
        # Obtaining the member 'max' of a type (line 1653)
        max_38436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1653, 38), intensity_38435, 'max')
        # Calling max(args, kwargs) (line 1653)
        max_call_result_38438 = invoke(stypy.reporting.localization.Localization(__file__, 1653, 38), max_38436, *[], **kwargs_38437)
        
        # Assigning a type to the variable 'tuple_assignment_34264' (line 1653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1653, 8), 'tuple_assignment_34264', max_call_result_38438)
        
        # Assigning a Name to a Name (line 1653):
        
        # Assigning a Name to a Name (line 1653):
        # Getting the type of 'tuple_assignment_34263' (line 1653)
        tuple_assignment_34263_38439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 8), 'tuple_assignment_34263')
        # Assigning a type to the variable 'imin' (line 1653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1653, 8), 'imin', tuple_assignment_34263_38439)
        
        # Assigning a Name to a Name (line 1653):
        
        # Assigning a Name to a Name (line 1653):
        # Getting the type of 'tuple_assignment_34264' (line 1653)
        tuple_assignment_34264_38440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 8), 'tuple_assignment_34264')
        # Assigning a type to the variable 'imax' (line 1653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1653, 14), 'imax', tuple_assignment_34264_38440)
        
        # Getting the type of 'intensity' (line 1654)
        intensity_38441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 8), 'intensity')
        # Getting the type of 'fraction' (line 1654)
        fraction_38442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 21), 'fraction')
        # Applying the binary operator '*=' (line 1654)
        result_imul_38443 = python_operator(stypy.reporting.localization.Localization(__file__, 1654, 8), '*=', intensity_38441, fraction_38442)
        # Assigning a type to the variable 'intensity' (line 1654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1654, 8), 'intensity', result_imul_38443)
        
        
        
        # Getting the type of 'imax' (line 1659)
        imax_38444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 12), 'imax')
        # Getting the type of 'imin' (line 1659)
        imin_38445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 19), 'imin')
        # Applying the binary operator '-' (line 1659)
        result_sub_38446 = python_operator(stypy.reporting.localization.Localization(__file__, 1659, 12), '-', imax_38444, imin_38445)
        
        float_38447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1659, 27), 'float')
        # Applying the binary operator '>' (line 1659)
        result_gt_38448 = python_operator(stypy.reporting.localization.Localization(__file__, 1659, 11), '>', result_sub_38446, float_38447)
        
        # Testing the type of an if condition (line 1659)
        if_condition_38449 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1659, 8), result_gt_38448)
        # Assigning a type to the variable 'if_condition_38449' (line 1659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 8), 'if_condition_38449', if_condition_38449)
        # SSA begins for if statement (line 1659)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'intensity' (line 1664)
        intensity_38450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 12), 'intensity')
        # Getting the type of 'imin' (line 1664)
        imin_38451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 25), 'imin')
        # Applying the binary operator '-=' (line 1664)
        result_isub_38452 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 12), '-=', intensity_38450, imin_38451)
        # Assigning a type to the variable 'intensity' (line 1664)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1664, 12), 'intensity', result_isub_38452)
        
        
        # Getting the type of 'intensity' (line 1665)
        intensity_38453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 12), 'intensity')
        # Getting the type of 'imax' (line 1665)
        imax_38454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 26), 'imax')
        # Getting the type of 'imin' (line 1665)
        imin_38455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 33), 'imin')
        # Applying the binary operator '-' (line 1665)
        result_sub_38456 = python_operator(stypy.reporting.localization.Localization(__file__, 1665, 26), '-', imax_38454, imin_38455)
        
        # Applying the binary operator 'div=' (line 1665)
        result_div_38457 = python_operator(stypy.reporting.localization.Localization(__file__, 1665, 12), 'div=', intensity_38453, result_sub_38456)
        # Assigning a type to the variable 'intensity' (line 1665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1665, 12), 'intensity', result_div_38457)
        
        # SSA join for if statement (line 1659)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1666):
        
        # Assigning a Call to a Name (line 1666):
        
        # Assigning a Call to a Name (line 1666):
        
        # Call to clip(...): (line 1666)
        # Processing the call arguments (line 1666)
        # Getting the type of 'intensity' (line 1666)
        intensity_38460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 28), 'intensity', False)
        int_38461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1666, 39), 'int')
        int_38462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1666, 42), 'int')
        # Getting the type of 'intensity' (line 1666)
        intensity_38463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 45), 'intensity', False)
        # Processing the call keyword arguments (line 1666)
        kwargs_38464 = {}
        # Getting the type of 'np' (line 1666)
        np_38458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 20), 'np', False)
        # Obtaining the member 'clip' of a type (line 1666)
        clip_38459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1666, 20), np_38458, 'clip')
        # Calling clip(args, kwargs) (line 1666)
        clip_call_result_38465 = invoke(stypy.reporting.localization.Localization(__file__, 1666, 20), clip_38459, *[intensity_38460, int_38461, int_38462, intensity_38463], **kwargs_38464)
        
        # Assigning a type to the variable 'intensity' (line 1666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1666, 8), 'intensity', clip_call_result_38465)
        # Getting the type of 'intensity' (line 1668)
        intensity_38466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 15), 'intensity')
        # Assigning a type to the variable 'stypy_return_type' (line 1668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 8), 'stypy_return_type', intensity_38466)
        
        # ################# End of 'shade_normals(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'shade_normals' in the type store
        # Getting the type of 'stypy_return_type' (line 1624)
        stypy_return_type_38467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1624, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_38467)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'shade_normals'
        return stypy_return_type_38467


    @norecursion
    def shade(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1670)
        None_38468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 37), 'None')
        unicode_38469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 54), 'unicode', u'overlay')
        # Getting the type of 'None' (line 1670)
        None_38470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 70), 'None')
        # Getting the type of 'None' (line 1671)
        None_38471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 19), 'None')
        int_38472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 35), 'int')
        int_38473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 41), 'int')
        int_38474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 47), 'int')
        int_38475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 59), 'int')
        defaults = [None_38468, unicode_38469, None_38470, None_38471, int_38472, int_38473, int_38474, int_38475]
        # Create a new context for function 'shade'
        module_type_store = module_type_store.open_function_context('shade', 1670, 4, False)
        # Assigning a type to the variable 'self' (line 1671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LightSource.shade.__dict__.__setitem__('stypy_localization', localization)
        LightSource.shade.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LightSource.shade.__dict__.__setitem__('stypy_type_store', module_type_store)
        LightSource.shade.__dict__.__setitem__('stypy_function_name', 'LightSource.shade')
        LightSource.shade.__dict__.__setitem__('stypy_param_names_list', ['data', 'cmap', 'norm', 'blend_mode', 'vmin', 'vmax', 'vert_exag', 'dx', 'dy', 'fraction'])
        LightSource.shade.__dict__.__setitem__('stypy_varargs_param_name', None)
        LightSource.shade.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        LightSource.shade.__dict__.__setitem__('stypy_call_defaults', defaults)
        LightSource.shade.__dict__.__setitem__('stypy_call_varargs', varargs)
        LightSource.shade.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LightSource.shade.__dict__.__setitem__('stypy_declared_arg_number', 11)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LightSource.shade', ['data', 'cmap', 'norm', 'blend_mode', 'vmin', 'vmax', 'vert_exag', 'dx', 'dy', 'fraction'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'shade', localization, ['data', 'cmap', 'norm', 'blend_mode', 'vmin', 'vmax', 'vert_exag', 'dx', 'dy', 'fraction'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'shade(...)' code ##################

        unicode_38476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1730, (-1)), 'unicode', u'\n        Combine colormapped data values with an illumination intensity map\n        (a.k.a.  "hillshade") of the values.\n\n        Parameters\n        ----------\n        data : array-like\n            A 2d array (or equivalent) of the height values used to generate a\n            shaded map.\n        cmap : `~matplotlib.colors.Colormap` instance\n            The colormap used to color the *data* array. Note that this must be\n            a `~matplotlib.colors.Colormap` instance.  For example, rather than\n            passing in `cmap=\'gist_earth\'`, use\n            `cmap=plt.get_cmap(\'gist_earth\')` instead.\n        norm : `~matplotlib.colors.Normalize` instance, optional\n            The normalization used to scale values before colormapping. If\n            None, the input will be linearly scaled between its min and max.\n        blend_mode : {\'hsv\', \'overlay\', \'soft\'} or callable, optional\n            The type of blending used to combine the colormapped data\n            values with the illumination intensity.  Default is\n            "overlay".  Note that for most topographic surfaces,\n            "overlay" or "soft" appear more visually realistic. If a\n            user-defined function is supplied, it is expected to\n            combine an MxNx3 RGB array of floats (ranging 0 to 1) with\n            an MxNx1 hillshade array (also 0 to 1).  (Call signature\n            `func(rgb, illum, **kwargs)`) Additional kwargs supplied\n            to this function will be passed on to the *blend_mode*\n            function.\n        vmin : scalar or None, optional\n            The minimum value used in colormapping *data*. If *None* the\n            minimum value in *data* is used. If *norm* is specified, then this\n            argument will be ignored.\n        vmax : scalar or None, optional\n            The maximum value used in colormapping *data*. If *None* the\n            maximum value in *data* is used. If *norm* is specified, then this\n            argument will be ignored.\n        vert_exag : number, optional\n            The amount to exaggerate the elevation values by when calculating\n            illumination. This can be used either to correct for differences in\n            units between the x-y coordinate system and the elevation\n            coordinate system (e.g. decimal degrees vs meters) or to exaggerate\n            or de-emphasize topography.\n        dx : number, optional\n            The x-spacing (columns) of the input *elevation* grid.\n        dy : number, optional\n            The y-spacing (rows) of the input *elevation* grid.\n        fraction : number, optional\n            Increases or decreases the contrast of the hillshade.  Values\n            greater than one will cause intermediate values to move closer to\n            full illumination or shadow (and clipping any values that move\n            beyond 0 or 1). Note that this is not visually or mathematically\n            the same as vertical exaggeration.\n        Additional kwargs are passed on to the *blend_mode* function.\n\n        Returns\n        -------\n        rgba : ndarray\n            An MxNx4 array of floats ranging between 0-1.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1731)
        # Getting the type of 'vmin' (line 1731)
        vmin_38477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 11), 'vmin')
        # Getting the type of 'None' (line 1731)
        None_38478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 19), 'None')
        
        (may_be_38479, more_types_in_union_38480) = may_be_none(vmin_38477, None_38478)

        if may_be_38479:

            if more_types_in_union_38480:
                # Runtime conditional SSA (line 1731)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1732):
            
            # Assigning a Call to a Name (line 1732):
            
            # Assigning a Call to a Name (line 1732):
            
            # Call to min(...): (line 1732)
            # Processing the call keyword arguments (line 1732)
            kwargs_38483 = {}
            # Getting the type of 'data' (line 1732)
            data_38481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 19), 'data', False)
            # Obtaining the member 'min' of a type (line 1732)
            min_38482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1732, 19), data_38481, 'min')
            # Calling min(args, kwargs) (line 1732)
            min_call_result_38484 = invoke(stypy.reporting.localization.Localization(__file__, 1732, 19), min_38482, *[], **kwargs_38483)
            
            # Assigning a type to the variable 'vmin' (line 1732)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 12), 'vmin', min_call_result_38484)

            if more_types_in_union_38480:
                # SSA join for if statement (line 1731)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1733)
        # Getting the type of 'vmax' (line 1733)
        vmax_38485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 11), 'vmax')
        # Getting the type of 'None' (line 1733)
        None_38486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 19), 'None')
        
        (may_be_38487, more_types_in_union_38488) = may_be_none(vmax_38485, None_38486)

        if may_be_38487:

            if more_types_in_union_38488:
                # Runtime conditional SSA (line 1733)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1734):
            
            # Assigning a Call to a Name (line 1734):
            
            # Assigning a Call to a Name (line 1734):
            
            # Call to max(...): (line 1734)
            # Processing the call keyword arguments (line 1734)
            kwargs_38491 = {}
            # Getting the type of 'data' (line 1734)
            data_38489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 19), 'data', False)
            # Obtaining the member 'max' of a type (line 1734)
            max_38490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1734, 19), data_38489, 'max')
            # Calling max(args, kwargs) (line 1734)
            max_call_result_38492 = invoke(stypy.reporting.localization.Localization(__file__, 1734, 19), max_38490, *[], **kwargs_38491)
            
            # Assigning a type to the variable 'vmax' (line 1734)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 12), 'vmax', max_call_result_38492)

            if more_types_in_union_38488:
                # SSA join for if statement (line 1733)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1735)
        # Getting the type of 'norm' (line 1735)
        norm_38493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 11), 'norm')
        # Getting the type of 'None' (line 1735)
        None_38494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 19), 'None')
        
        (may_be_38495, more_types_in_union_38496) = may_be_none(norm_38493, None_38494)

        if may_be_38495:

            if more_types_in_union_38496:
                # Runtime conditional SSA (line 1735)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1736):
            
            # Assigning a Call to a Name (line 1736):
            
            # Assigning a Call to a Name (line 1736):
            
            # Call to Normalize(...): (line 1736)
            # Processing the call keyword arguments (line 1736)
            # Getting the type of 'vmin' (line 1736)
            vmin_38498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 34), 'vmin', False)
            keyword_38499 = vmin_38498
            # Getting the type of 'vmax' (line 1736)
            vmax_38500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 45), 'vmax', False)
            keyword_38501 = vmax_38500
            kwargs_38502 = {'vmax': keyword_38501, 'vmin': keyword_38499}
            # Getting the type of 'Normalize' (line 1736)
            Normalize_38497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 19), 'Normalize', False)
            # Calling Normalize(args, kwargs) (line 1736)
            Normalize_call_result_38503 = invoke(stypy.reporting.localization.Localization(__file__, 1736, 19), Normalize_38497, *[], **kwargs_38502)
            
            # Assigning a type to the variable 'norm' (line 1736)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 12), 'norm', Normalize_call_result_38503)

            if more_types_in_union_38496:
                # SSA join for if statement (line 1735)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1738):
        
        # Assigning a Call to a Name (line 1738):
        
        # Assigning a Call to a Name (line 1738):
        
        # Call to cmap(...): (line 1738)
        # Processing the call arguments (line 1738)
        
        # Call to norm(...): (line 1738)
        # Processing the call arguments (line 1738)
        # Getting the type of 'data' (line 1738)
        data_38506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 25), 'data', False)
        # Processing the call keyword arguments (line 1738)
        kwargs_38507 = {}
        # Getting the type of 'norm' (line 1738)
        norm_38505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 20), 'norm', False)
        # Calling norm(args, kwargs) (line 1738)
        norm_call_result_38508 = invoke(stypy.reporting.localization.Localization(__file__, 1738, 20), norm_38505, *[data_38506], **kwargs_38507)
        
        # Processing the call keyword arguments (line 1738)
        kwargs_38509 = {}
        # Getting the type of 'cmap' (line 1738)
        cmap_38504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 15), 'cmap', False)
        # Calling cmap(args, kwargs) (line 1738)
        cmap_call_result_38510 = invoke(stypy.reporting.localization.Localization(__file__, 1738, 15), cmap_38504, *[norm_call_result_38508], **kwargs_38509)
        
        # Assigning a type to the variable 'rgb0' (line 1738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 8), 'rgb0', cmap_call_result_38510)
        
        # Assigning a Call to a Name (line 1739):
        
        # Assigning a Call to a Name (line 1739):
        
        # Assigning a Call to a Name (line 1739):
        
        # Call to shade_rgb(...): (line 1739)
        # Processing the call arguments (line 1739)
        # Getting the type of 'rgb0' (line 1739)
        rgb0_38513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 30), 'rgb0', False)
        # Processing the call keyword arguments (line 1739)
        # Getting the type of 'data' (line 1739)
        data_38514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 46), 'data', False)
        keyword_38515 = data_38514
        # Getting the type of 'blend_mode' (line 1739)
        blend_mode_38516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 63), 'blend_mode', False)
        keyword_38517 = blend_mode_38516
        # Getting the type of 'vert_exag' (line 1740)
        vert_exag_38518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 40), 'vert_exag', False)
        keyword_38519 = vert_exag_38518
        # Getting the type of 'dx' (line 1740)
        dx_38520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 54), 'dx', False)
        keyword_38521 = dx_38520
        # Getting the type of 'dy' (line 1740)
        dy_38522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 61), 'dy', False)
        keyword_38523 = dy_38522
        # Getting the type of 'fraction' (line 1741)
        fraction_38524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 39), 'fraction', False)
        keyword_38525 = fraction_38524
        # Getting the type of 'kwargs' (line 1741)
        kwargs_38526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 51), 'kwargs', False)
        kwargs_38527 = {'elevation': keyword_38515, 'dx': keyword_38521, 'kwargs_38526': kwargs_38526, 'vert_exag': keyword_38519, 'fraction': keyword_38525, 'dy': keyword_38523, 'blend_mode': keyword_38517}
        # Getting the type of 'self' (line 1739)
        self_38511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 15), 'self', False)
        # Obtaining the member 'shade_rgb' of a type (line 1739)
        shade_rgb_38512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1739, 15), self_38511, 'shade_rgb')
        # Calling shade_rgb(args, kwargs) (line 1739)
        shade_rgb_call_result_38528 = invoke(stypy.reporting.localization.Localization(__file__, 1739, 15), shade_rgb_38512, *[rgb0_38513], **kwargs_38527)
        
        # Assigning a type to the variable 'rgb1' (line 1739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1739, 8), 'rgb1', shade_rgb_call_result_38528)
        
        # Assigning a Subscript to a Subscript (line 1743):
        
        # Assigning a Subscript to a Subscript (line 1743):
        
        # Assigning a Subscript to a Subscript (line 1743):
        
        # Obtaining the type of the subscript
        Ellipsis_38529 = Ellipsis
        int_38530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1743, 35), 'int')
        slice_38531 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1743, 24), None, int_38530, None)
        # Getting the type of 'rgb1' (line 1743)
        rgb1_38532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 24), 'rgb1')
        # Obtaining the member '__getitem__' of a type (line 1743)
        getitem___38533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 24), rgb1_38532, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1743)
        subscript_call_result_38534 = invoke(stypy.reporting.localization.Localization(__file__, 1743, 24), getitem___38533, (Ellipsis_38529, slice_38531))
        
        # Getting the type of 'rgb0' (line 1743)
        rgb0_38535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 8), 'rgb0')
        Ellipsis_38536 = Ellipsis
        int_38537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1743, 19), 'int')
        slice_38538 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1743, 8), None, int_38537, None)
        # Storing an element on a container (line 1743)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1743, 8), rgb0_38535, ((Ellipsis_38536, slice_38538), subscript_call_result_38534))
        # Getting the type of 'rgb0' (line 1744)
        rgb0_38539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 15), 'rgb0')
        # Assigning a type to the variable 'stypy_return_type' (line 1744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 8), 'stypy_return_type', rgb0_38539)
        
        # ################# End of 'shade(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'shade' in the type store
        # Getting the type of 'stypy_return_type' (line 1670)
        stypy_return_type_38540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_38540)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'shade'
        return stypy_return_type_38540


    @norecursion
    def shade_rgb(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_38541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1746, 49), 'float')
        unicode_38542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1746, 64), 'unicode', u'hsv')
        int_38543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1747, 28), 'int')
        int_38544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1747, 34), 'int')
        int_38545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1747, 40), 'int')
        defaults = [float_38541, unicode_38542, int_38543, int_38544, int_38545]
        # Create a new context for function 'shade_rgb'
        module_type_store = module_type_store.open_function_context('shade_rgb', 1746, 4, False)
        # Assigning a type to the variable 'self' (line 1747)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1747, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LightSource.shade_rgb.__dict__.__setitem__('stypy_localization', localization)
        LightSource.shade_rgb.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LightSource.shade_rgb.__dict__.__setitem__('stypy_type_store', module_type_store)
        LightSource.shade_rgb.__dict__.__setitem__('stypy_function_name', 'LightSource.shade_rgb')
        LightSource.shade_rgb.__dict__.__setitem__('stypy_param_names_list', ['rgb', 'elevation', 'fraction', 'blend_mode', 'vert_exag', 'dx', 'dy'])
        LightSource.shade_rgb.__dict__.__setitem__('stypy_varargs_param_name', None)
        LightSource.shade_rgb.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        LightSource.shade_rgb.__dict__.__setitem__('stypy_call_defaults', defaults)
        LightSource.shade_rgb.__dict__.__setitem__('stypy_call_varargs', varargs)
        LightSource.shade_rgb.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LightSource.shade_rgb.__dict__.__setitem__('stypy_declared_arg_number', 8)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LightSource.shade_rgb', ['rgb', 'elevation', 'fraction', 'blend_mode', 'vert_exag', 'dx', 'dy'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'shade_rgb', localization, ['rgb', 'elevation', 'fraction', 'blend_mode', 'vert_exag', 'dx', 'dy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'shade_rgb(...)' code ##################

        unicode_38546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1793, (-1)), 'unicode', u'\n        Take the input RGB array (ny*nx*3) adjust their color values\n        to given the impression of a shaded relief map with a\n        specified light source using the elevation (ny*nx).\n        A new RGB array ((ny*nx*3)) is returned.\n\n        Parameters\n        ----------\n        rgb : array-like\n            An MxNx3 RGB array, assumed to be in the range of 0 to 1.\n        elevation : array-like\n            A 2d array (or equivalent) of the height values used to generate a\n            shaded map.\n        fraction : number\n            Increases or decreases the contrast of the hillshade.  Values\n            greater than one will cause intermediate values to move closer to\n            full illumination or shadow (and clipping any values that move\n            beyond 0 or 1). Note that this is not visually or mathematically\n            the same as vertical exaggeration.\n        blend_mode : {\'hsv\', \'overlay\', \'soft\'} or callable, optional\n            The type of blending used to combine the colormapped data values\n            with the illumination intensity.  For backwards compatibility, this\n            defaults to "hsv". Note that for most topographic surfaces,\n            "overlay" or "soft" appear more visually realistic. If a\n            user-defined function is supplied, it is expected to combine an\n            MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade\n            array (also 0 to 1).  (Call signature `func(rgb, illum, **kwargs)`)\n            Additional kwargs supplied to this function will be passed on to\n            the *blend_mode* function.\n        vert_exag : number, optional\n            The amount to exaggerate the elevation values by when calculating\n            illumination. This can be used either to correct for differences in\n            units between the x-y coordinate system and the elevation\n            coordinate system (e.g. decimal degrees vs meters) or to exaggerate\n            or de-emphasize topography.\n        dx : number, optional\n            The x-spacing (columns) of the input *elevation* grid.\n        dy : number, optional\n            The y-spacing (rows) of the input *elevation* grid.\n        Additional kwargs are passed on to the *blend_mode* function.\n\n        Returns\n        -------\n        shaded_rgb : ndarray\n            An MxNx3 array of floats ranging between 0-1.\n        ')
        
        # Assigning a Call to a Name (line 1795):
        
        # Assigning a Call to a Name (line 1795):
        
        # Assigning a Call to a Name (line 1795):
        
        # Call to hillshade(...): (line 1795)
        # Processing the call arguments (line 1795)
        # Getting the type of 'elevation' (line 1795)
        elevation_38549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 35), 'elevation', False)
        # Getting the type of 'vert_exag' (line 1795)
        vert_exag_38550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 46), 'vert_exag', False)
        # Getting the type of 'dx' (line 1795)
        dx_38551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 57), 'dx', False)
        # Getting the type of 'dy' (line 1795)
        dy_38552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 61), 'dy', False)
        # Getting the type of 'fraction' (line 1795)
        fraction_38553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 65), 'fraction', False)
        # Processing the call keyword arguments (line 1795)
        kwargs_38554 = {}
        # Getting the type of 'self' (line 1795)
        self_38547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 20), 'self', False)
        # Obtaining the member 'hillshade' of a type (line 1795)
        hillshade_38548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1795, 20), self_38547, 'hillshade')
        # Calling hillshade(args, kwargs) (line 1795)
        hillshade_call_result_38555 = invoke(stypy.reporting.localization.Localization(__file__, 1795, 20), hillshade_38548, *[elevation_38549, vert_exag_38550, dx_38551, dy_38552, fraction_38553], **kwargs_38554)
        
        # Assigning a type to the variable 'intensity' (line 1795)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 8), 'intensity', hillshade_call_result_38555)
        
        # Assigning a Subscript to a Name (line 1796):
        
        # Assigning a Subscript to a Name (line 1796):
        
        # Assigning a Subscript to a Name (line 1796):
        
        # Obtaining the type of the subscript
        Ellipsis_38556 = Ellipsis
        # Getting the type of 'np' (line 1796)
        np_38557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 35), 'np')
        # Obtaining the member 'newaxis' of a type (line 1796)
        newaxis_38558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1796, 35), np_38557, 'newaxis')
        # Getting the type of 'intensity' (line 1796)
        intensity_38559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 20), 'intensity')
        # Obtaining the member '__getitem__' of a type (line 1796)
        getitem___38560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1796, 20), intensity_38559, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1796)
        subscript_call_result_38561 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 20), getitem___38560, (Ellipsis_38556, newaxis_38558))
        
        # Assigning a type to the variable 'intensity' (line 1796)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1796, 8), 'intensity', subscript_call_result_38561)
        
        # Assigning a Dict to a Name (line 1799):
        
        # Assigning a Dict to a Name (line 1799):
        
        # Assigning a Dict to a Name (line 1799):
        
        # Obtaining an instance of the builtin type 'dict' (line 1799)
        dict_38562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1799, 17), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1799)
        # Adding element type (key, value) (line 1799)
        unicode_38563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, 16), 'unicode', u'hsv')
        # Getting the type of 'self' (line 1800)
        self_38564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 23), 'self')
        # Obtaining the member 'blend_hsv' of a type (line 1800)
        blend_hsv_38565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1800, 23), self_38564, 'blend_hsv')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1799, 17), dict_38562, (unicode_38563, blend_hsv_38565))
        # Adding element type (key, value) (line 1799)
        unicode_38566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1801, 16), 'unicode', u'soft')
        # Getting the type of 'self' (line 1801)
        self_38567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 24), 'self')
        # Obtaining the member 'blend_soft_light' of a type (line 1801)
        blend_soft_light_38568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1801, 24), self_38567, 'blend_soft_light')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1799, 17), dict_38562, (unicode_38566, blend_soft_light_38568))
        # Adding element type (key, value) (line 1799)
        unicode_38569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, 16), 'unicode', u'overlay')
        # Getting the type of 'self' (line 1802)
        self_38570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 27), 'self')
        # Obtaining the member 'blend_overlay' of a type (line 1802)
        blend_overlay_38571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 27), self_38570, 'blend_overlay')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1799, 17), dict_38562, (unicode_38569, blend_overlay_38571))
        
        # Assigning a type to the variable 'lookup' (line 1799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1799, 8), 'lookup', dict_38562)
        
        
        # Getting the type of 'blend_mode' (line 1804)
        blend_mode_38572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 11), 'blend_mode')
        # Getting the type of 'lookup' (line 1804)
        lookup_38573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 25), 'lookup')
        # Applying the binary operator 'in' (line 1804)
        result_contains_38574 = python_operator(stypy.reporting.localization.Localization(__file__, 1804, 11), 'in', blend_mode_38572, lookup_38573)
        
        # Testing the type of an if condition (line 1804)
        if_condition_38575 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1804, 8), result_contains_38574)
        # Assigning a type to the variable 'if_condition_38575' (line 1804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 8), 'if_condition_38575', if_condition_38575)
        # SSA begins for if statement (line 1804)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1805):
        
        # Assigning a Call to a Name (line 1805):
        
        # Assigning a Call to a Name (line 1805):
        
        # Call to (...): (line 1805)
        # Processing the call arguments (line 1805)
        # Getting the type of 'rgb' (line 1805)
        rgb_38580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 39), 'rgb', False)
        # Getting the type of 'intensity' (line 1805)
        intensity_38581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 44), 'intensity', False)
        # Processing the call keyword arguments (line 1805)
        # Getting the type of 'kwargs' (line 1805)
        kwargs_38582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 57), 'kwargs', False)
        kwargs_38583 = {'kwargs_38582': kwargs_38582}
        
        # Obtaining the type of the subscript
        # Getting the type of 'blend_mode' (line 1805)
        blend_mode_38576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 27), 'blend_mode', False)
        # Getting the type of 'lookup' (line 1805)
        lookup_38577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 20), 'lookup', False)
        # Obtaining the member '__getitem__' of a type (line 1805)
        getitem___38578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 20), lookup_38577, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1805)
        subscript_call_result_38579 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 20), getitem___38578, blend_mode_38576)
        
        # Calling (args, kwargs) (line 1805)
        _call_result_38584 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 20), subscript_call_result_38579, *[rgb_38580, intensity_38581], **kwargs_38583)
        
        # Assigning a type to the variable 'blend' (line 1805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 12), 'blend', _call_result_38584)
        # SSA branch for the else part of an if statement (line 1804)
        module_type_store.open_ssa_branch('else')
        
        
        # SSA begins for try-except statement (line 1807)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1808):
        
        # Assigning a Call to a Name (line 1808):
        
        # Assigning a Call to a Name (line 1808):
        
        # Call to blend_mode(...): (line 1808)
        # Processing the call arguments (line 1808)
        # Getting the type of 'rgb' (line 1808)
        rgb_38586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 35), 'rgb', False)
        # Getting the type of 'intensity' (line 1808)
        intensity_38587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 40), 'intensity', False)
        # Processing the call keyword arguments (line 1808)
        # Getting the type of 'kwargs' (line 1808)
        kwargs_38588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 53), 'kwargs', False)
        kwargs_38589 = {'kwargs_38588': kwargs_38588}
        # Getting the type of 'blend_mode' (line 1808)
        blend_mode_38585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 24), 'blend_mode', False)
        # Calling blend_mode(args, kwargs) (line 1808)
        blend_mode_call_result_38590 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 24), blend_mode_38585, *[rgb_38586, intensity_38587], **kwargs_38589)
        
        # Assigning a type to the variable 'blend' (line 1808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1808, 16), 'blend', blend_mode_call_result_38590)
        # SSA branch for the except part of a try statement (line 1807)
        # SSA branch for the except 'TypeError' branch of a try statement (line 1807)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Str to a Name (line 1810):
        
        # Assigning a Str to a Name (line 1810):
        
        # Assigning a Str to a Name (line 1810):
        unicode_38591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 22), 'unicode', u'"blend_mode" must be callable or one of {0}')
        # Assigning a type to the variable 'msg' (line 1810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1810, 16), 'msg', unicode_38591)
        
        # Call to ValueError(...): (line 1811)
        # Processing the call arguments (line 1811)
        
        # Call to format(...): (line 1811)
        # Processing the call arguments (line 1811)
        # Getting the type of 'lookup' (line 1811)
        lookup_38595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 44), 'lookup', False)
        # Obtaining the member 'keys' of a type (line 1811)
        keys_38596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 44), lookup_38595, 'keys')
        # Processing the call keyword arguments (line 1811)
        kwargs_38597 = {}
        # Getting the type of 'msg' (line 1811)
        msg_38593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 33), 'msg', False)
        # Obtaining the member 'format' of a type (line 1811)
        format_38594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 33), msg_38593, 'format')
        # Calling format(args, kwargs) (line 1811)
        format_call_result_38598 = invoke(stypy.reporting.localization.Localization(__file__, 1811, 33), format_38594, *[keys_38596], **kwargs_38597)
        
        # Processing the call keyword arguments (line 1811)
        kwargs_38599 = {}
        # Getting the type of 'ValueError' (line 1811)
        ValueError_38592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1811)
        ValueError_call_result_38600 = invoke(stypy.reporting.localization.Localization(__file__, 1811, 22), ValueError_38592, *[format_call_result_38598], **kwargs_38599)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1811, 16), ValueError_call_result_38600, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 1807)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1804)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1814)
        unicode_38601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1814, 30), 'unicode', u'mask')
        # Getting the type of 'intensity' (line 1814)
        intensity_38602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 19), 'intensity')
        
        (may_be_38603, more_types_in_union_38604) = may_provide_member(unicode_38601, intensity_38602)

        if may_be_38603:

            if more_types_in_union_38604:
                # Runtime conditional SSA (line 1814)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'intensity' (line 1814)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'intensity', remove_not_member_provider_from_union(intensity_38602, u'mask'))
            
            # Assigning a Subscript to a Name (line 1815):
            
            # Assigning a Subscript to a Name (line 1815):
            
            # Assigning a Subscript to a Name (line 1815):
            
            # Obtaining the type of the subscript
            Ellipsis_38605 = Ellipsis
            int_38606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1815, 39), 'int')
            # Getting the type of 'intensity' (line 1815)
            intensity_38607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 19), 'intensity')
            # Obtaining the member 'mask' of a type (line 1815)
            mask_38608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 19), intensity_38607, 'mask')
            # Obtaining the member '__getitem__' of a type (line 1815)
            getitem___38609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 19), mask_38608, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1815)
            subscript_call_result_38610 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 19), getitem___38609, (Ellipsis_38605, int_38606))
            
            # Assigning a type to the variable 'mask' (line 1815)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1815, 12), 'mask', subscript_call_result_38610)
            
            
            # Call to range(...): (line 1816)
            # Processing the call arguments (line 1816)
            int_38612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1816, 27), 'int')
            # Processing the call keyword arguments (line 1816)
            kwargs_38613 = {}
            # Getting the type of 'range' (line 1816)
            range_38611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 21), 'range', False)
            # Calling range(args, kwargs) (line 1816)
            range_call_result_38614 = invoke(stypy.reporting.localization.Localization(__file__, 1816, 21), range_38611, *[int_38612], **kwargs_38613)
            
            # Testing the type of a for loop iterable (line 1816)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1816, 12), range_call_result_38614)
            # Getting the type of the for loop variable (line 1816)
            for_loop_var_38615 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1816, 12), range_call_result_38614)
            # Assigning a type to the variable 'i' (line 1816)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 12), 'i', for_loop_var_38615)
            # SSA begins for a for statement (line 1816)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Assigning a Subscript to a Subscript (line 1817):
            
            # Assigning a Subscript to a Subscript (line 1817):
            
            # Assigning a Subscript to a Subscript (line 1817):
            
            # Obtaining the type of the subscript
            # Getting the type of 'mask' (line 1817)
            mask_38616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 50), 'mask')
            
            # Obtaining the type of the subscript
            Ellipsis_38617 = Ellipsis
            # Getting the type of 'i' (line 1817)
            i_38618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 47), 'i')
            # Getting the type of 'rgb' (line 1817)
            rgb_38619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 38), 'rgb')
            # Obtaining the member '__getitem__' of a type (line 1817)
            getitem___38620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 38), rgb_38619, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1817)
            subscript_call_result_38621 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 38), getitem___38620, (Ellipsis_38617, i_38618))
            
            # Obtaining the member '__getitem__' of a type (line 1817)
            getitem___38622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 38), subscript_call_result_38621, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1817)
            subscript_call_result_38623 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 38), getitem___38622, mask_38616)
            
            
            # Obtaining the type of the subscript
            Ellipsis_38624 = Ellipsis
            # Getting the type of 'i' (line 1817)
            i_38625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 27), 'i')
            # Getting the type of 'blend' (line 1817)
            blend_38626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 16), 'blend')
            # Obtaining the member '__getitem__' of a type (line 1817)
            getitem___38627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 16), blend_38626, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1817)
            subscript_call_result_38628 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 16), getitem___38627, (Ellipsis_38624, i_38625))
            
            # Getting the type of 'mask' (line 1817)
            mask_38629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 30), 'mask')
            # Storing an element on a container (line 1817)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1817, 16), subscript_call_result_38628, (mask_38629, subscript_call_result_38623))
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_38604:
                # SSA join for if statement (line 1814)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'blend' (line 1819)
        blend_38630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 15), 'blend')
        # Assigning a type to the variable 'stypy_return_type' (line 1819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 8), 'stypy_return_type', blend_38630)
        
        # ################# End of 'shade_rgb(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'shade_rgb' in the type store
        # Getting the type of 'stypy_return_type' (line 1746)
        stypy_return_type_38631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_38631)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'shade_rgb'
        return stypy_return_type_38631


    @norecursion
    def blend_hsv(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1821)
        None_38632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 52), 'None')
        # Getting the type of 'None' (line 1821)
        None_38633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 70), 'None')
        # Getting the type of 'None' (line 1822)
        None_38634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 30), 'None')
        # Getting the type of 'None' (line 1822)
        None_38635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 48), 'None')
        defaults = [None_38632, None_38633, None_38634, None_38635]
        # Create a new context for function 'blend_hsv'
        module_type_store = module_type_store.open_function_context('blend_hsv', 1821, 4, False)
        # Assigning a type to the variable 'self' (line 1822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LightSource.blend_hsv.__dict__.__setitem__('stypy_localization', localization)
        LightSource.blend_hsv.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LightSource.blend_hsv.__dict__.__setitem__('stypy_type_store', module_type_store)
        LightSource.blend_hsv.__dict__.__setitem__('stypy_function_name', 'LightSource.blend_hsv')
        LightSource.blend_hsv.__dict__.__setitem__('stypy_param_names_list', ['rgb', 'intensity', 'hsv_max_sat', 'hsv_max_val', 'hsv_min_val', 'hsv_min_sat'])
        LightSource.blend_hsv.__dict__.__setitem__('stypy_varargs_param_name', None)
        LightSource.blend_hsv.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LightSource.blend_hsv.__dict__.__setitem__('stypy_call_defaults', defaults)
        LightSource.blend_hsv.__dict__.__setitem__('stypy_call_varargs', varargs)
        LightSource.blend_hsv.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LightSource.blend_hsv.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LightSource.blend_hsv', ['rgb', 'intensity', 'hsv_max_sat', 'hsv_max_val', 'hsv_min_val', 'hsv_min_sat'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'blend_hsv', localization, ['rgb', 'intensity', 'hsv_max_sat', 'hsv_max_val', 'hsv_min_val', 'hsv_min_sat'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'blend_hsv(...)' code ##################

        unicode_38636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1859, (-1)), 'unicode', u'\n        Take the input data array, convert to HSV values in the given colormap,\n        then adjust those color values to give the impression of a shaded\n        relief map with a specified light source.  RGBA values are returned,\n        which can then be used to plot the shaded image with imshow.\n\n        The color of the resulting image will be darkened by moving the (s,v)\n        values (in hsv colorspace) toward (hsv_min_sat, hsv_min_val) in the\n        shaded regions, or lightened by sliding (s,v) toward (hsv_max_sat\n        hsv_max_val) in regions that are illuminated.  The default extremes are\n        chose so that completely shaded points are nearly black (s = 1, v = 0)\n        and completely illuminated points are nearly white (s = 0, v = 1).\n\n        Parameters\n        ----------\n        rgb : ndarray\n            An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n        intensity : ndarray\n            An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n        hsv_max_sat : number, optional\n            The maximum saturation value that the *intensity* map can shift the\n            output image to. Defaults to 1.\n        hsv_min_sat : number, optional\n            The minimum saturation value that the *intensity* map can shift the\n            output image to. Defaults to 0.\n        hsv_max_val : number, optional\n            The maximum value ("v" in "hsv") that the *intensity* map can shift\n            the output image to. Defaults to 1.\n        hsv_min_val: number, optional\n            The minimum value ("v" in "hsv") that the *intensity* map can shift\n            the output image to. Defaults to 0.\n\n        Returns\n        -------\n        rgb : ndarray\n            An MxNx3 RGB array representing the combined images.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1861)
        # Getting the type of 'hsv_max_sat' (line 1861)
        hsv_max_sat_38637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 11), 'hsv_max_sat')
        # Getting the type of 'None' (line 1861)
        None_38638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 26), 'None')
        
        (may_be_38639, more_types_in_union_38640) = may_be_none(hsv_max_sat_38637, None_38638)

        if may_be_38639:

            if more_types_in_union_38640:
                # Runtime conditional SSA (line 1861)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1862):
            
            # Assigning a Attribute to a Name (line 1862):
            
            # Assigning a Attribute to a Name (line 1862):
            # Getting the type of 'self' (line 1862)
            self_38641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 26), 'self')
            # Obtaining the member 'hsv_max_sat' of a type (line 1862)
            hsv_max_sat_38642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 26), self_38641, 'hsv_max_sat')
            # Assigning a type to the variable 'hsv_max_sat' (line 1862)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1862, 12), 'hsv_max_sat', hsv_max_sat_38642)

            if more_types_in_union_38640:
                # SSA join for if statement (line 1861)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1863)
        # Getting the type of 'hsv_max_val' (line 1863)
        hsv_max_val_38643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 11), 'hsv_max_val')
        # Getting the type of 'None' (line 1863)
        None_38644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 26), 'None')
        
        (may_be_38645, more_types_in_union_38646) = may_be_none(hsv_max_val_38643, None_38644)

        if may_be_38645:

            if more_types_in_union_38646:
                # Runtime conditional SSA (line 1863)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1864):
            
            # Assigning a Attribute to a Name (line 1864):
            
            # Assigning a Attribute to a Name (line 1864):
            # Getting the type of 'self' (line 1864)
            self_38647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 26), 'self')
            # Obtaining the member 'hsv_max_val' of a type (line 1864)
            hsv_max_val_38648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1864, 26), self_38647, 'hsv_max_val')
            # Assigning a type to the variable 'hsv_max_val' (line 1864)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1864, 12), 'hsv_max_val', hsv_max_val_38648)

            if more_types_in_union_38646:
                # SSA join for if statement (line 1863)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1865)
        # Getting the type of 'hsv_min_sat' (line 1865)
        hsv_min_sat_38649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 11), 'hsv_min_sat')
        # Getting the type of 'None' (line 1865)
        None_38650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 26), 'None')
        
        (may_be_38651, more_types_in_union_38652) = may_be_none(hsv_min_sat_38649, None_38650)

        if may_be_38651:

            if more_types_in_union_38652:
                # Runtime conditional SSA (line 1865)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1866):
            
            # Assigning a Attribute to a Name (line 1866):
            
            # Assigning a Attribute to a Name (line 1866):
            # Getting the type of 'self' (line 1866)
            self_38653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 26), 'self')
            # Obtaining the member 'hsv_min_sat' of a type (line 1866)
            hsv_min_sat_38654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 26), self_38653, 'hsv_min_sat')
            # Assigning a type to the variable 'hsv_min_sat' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'hsv_min_sat', hsv_min_sat_38654)

            if more_types_in_union_38652:
                # SSA join for if statement (line 1865)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1867)
        # Getting the type of 'hsv_min_val' (line 1867)
        hsv_min_val_38655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 11), 'hsv_min_val')
        # Getting the type of 'None' (line 1867)
        None_38656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 26), 'None')
        
        (may_be_38657, more_types_in_union_38658) = may_be_none(hsv_min_val_38655, None_38656)

        if may_be_38657:

            if more_types_in_union_38658:
                # Runtime conditional SSA (line 1867)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1868):
            
            # Assigning a Attribute to a Name (line 1868):
            
            # Assigning a Attribute to a Name (line 1868):
            # Getting the type of 'self' (line 1868)
            self_38659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 26), 'self')
            # Obtaining the member 'hsv_min_val' of a type (line 1868)
            hsv_min_val_38660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 26), self_38659, 'hsv_min_val')
            # Assigning a type to the variable 'hsv_min_val' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'hsv_min_val', hsv_min_val_38660)

            if more_types_in_union_38658:
                # SSA join for if statement (line 1867)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Subscript to a Name (line 1871):
        
        # Assigning a Subscript to a Name (line 1871):
        
        # Assigning a Subscript to a Name (line 1871):
        
        # Obtaining the type of the subscript
        Ellipsis_38661 = Ellipsis
        int_38662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 35), 'int')
        # Getting the type of 'intensity' (line 1871)
        intensity_38663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 20), 'intensity')
        # Obtaining the member '__getitem__' of a type (line 1871)
        getitem___38664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 20), intensity_38663, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1871)
        subscript_call_result_38665 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 20), getitem___38664, (Ellipsis_38661, int_38662))
        
        # Assigning a type to the variable 'intensity' (line 1871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 8), 'intensity', subscript_call_result_38665)
        
        # Assigning a BinOp to a Name (line 1872):
        
        # Assigning a BinOp to a Name (line 1872):
        
        # Assigning a BinOp to a Name (line 1872):
        int_38666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1872, 20), 'int')
        # Getting the type of 'intensity' (line 1872)
        intensity_38667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 24), 'intensity')
        # Applying the binary operator '*' (line 1872)
        result_mul_38668 = python_operator(stypy.reporting.localization.Localization(__file__, 1872, 20), '*', int_38666, intensity_38667)
        
        int_38669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1872, 36), 'int')
        # Applying the binary operator '-' (line 1872)
        result_sub_38670 = python_operator(stypy.reporting.localization.Localization(__file__, 1872, 20), '-', result_mul_38668, int_38669)
        
        # Assigning a type to the variable 'intensity' (line 1872)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 8), 'intensity', result_sub_38670)
        
        # Assigning a Call to a Name (line 1875):
        
        # Assigning a Call to a Name (line 1875):
        
        # Assigning a Call to a Name (line 1875):
        
        # Call to rgb_to_hsv(...): (line 1875)
        # Processing the call arguments (line 1875)
        
        # Obtaining the type of the subscript
        slice_38672 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1875, 25), None, None, None)
        slice_38673 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1875, 25), None, None, None)
        int_38674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1875, 35), 'int')
        int_38675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1875, 37), 'int')
        slice_38676 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1875, 25), int_38674, int_38675, None)
        # Getting the type of 'rgb' (line 1875)
        rgb_38677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 25), 'rgb', False)
        # Obtaining the member '__getitem__' of a type (line 1875)
        getitem___38678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1875, 25), rgb_38677, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1875)
        subscript_call_result_38679 = invoke(stypy.reporting.localization.Localization(__file__, 1875, 25), getitem___38678, (slice_38672, slice_38673, slice_38676))
        
        # Processing the call keyword arguments (line 1875)
        kwargs_38680 = {}
        # Getting the type of 'rgb_to_hsv' (line 1875)
        rgb_to_hsv_38671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 14), 'rgb_to_hsv', False)
        # Calling rgb_to_hsv(args, kwargs) (line 1875)
        rgb_to_hsv_call_result_38681 = invoke(stypy.reporting.localization.Localization(__file__, 1875, 14), rgb_to_hsv_38671, *[subscript_call_result_38679], **kwargs_38680)
        
        # Assigning a type to the variable 'hsv' (line 1875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1875, 8), 'hsv', rgb_to_hsv_call_result_38681)
        
        # Assigning a Call to a Subscript (line 1878):
        
        # Assigning a Call to a Subscript (line 1878):
        
        # Assigning a Call to a Subscript (line 1878):
        
        # Call to where(...): (line 1878)
        # Processing the call arguments (line 1878)
        
        # Call to logical_and(...): (line 1878)
        # Processing the call arguments (line 1878)
        
        
        # Call to abs(...): (line 1878)
        # Processing the call arguments (line 1878)
        
        # Obtaining the type of the subscript
        slice_38688 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1878, 54), None, None, None)
        slice_38689 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1878, 54), None, None, None)
        int_38690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1878, 64), 'int')
        # Getting the type of 'hsv' (line 1878)
        hsv_38691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 54), 'hsv', False)
        # Obtaining the member '__getitem__' of a type (line 1878)
        getitem___38692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 54), hsv_38691, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1878)
        subscript_call_result_38693 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 54), getitem___38692, (slice_38688, slice_38689, int_38690))
        
        # Processing the call keyword arguments (line 1878)
        kwargs_38694 = {}
        # Getting the type of 'np' (line 1878)
        np_38686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 47), 'np', False)
        # Obtaining the member 'abs' of a type (line 1878)
        abs_38687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 47), np_38686, 'abs')
        # Calling abs(args, kwargs) (line 1878)
        abs_call_result_38695 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 47), abs_38687, *[subscript_call_result_38693], **kwargs_38694)
        
        float_38696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1878, 70), 'float')
        # Applying the binary operator '>' (line 1878)
        result_gt_38697 = python_operator(stypy.reporting.localization.Localization(__file__, 1878, 47), '>', abs_call_result_38695, float_38696)
        
        
        # Getting the type of 'intensity' (line 1879)
        intensity_38698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 47), 'intensity', False)
        int_38699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1879, 59), 'int')
        # Applying the binary operator '>' (line 1879)
        result_gt_38700 = python_operator(stypy.reporting.localization.Localization(__file__, 1879, 47), '>', intensity_38698, int_38699)
        
        # Processing the call keyword arguments (line 1878)
        kwargs_38701 = {}
        # Getting the type of 'np' (line 1878)
        np_38684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 32), 'np', False)
        # Obtaining the member 'logical_and' of a type (line 1878)
        logical_and_38685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 32), np_38684, 'logical_and')
        # Calling logical_and(args, kwargs) (line 1878)
        logical_and_call_result_38702 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 32), logical_and_38685, *[result_gt_38697, result_gt_38700], **kwargs_38701)
        
        float_38703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1880, 34), 'float')
        # Getting the type of 'intensity' (line 1880)
        intensity_38704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 39), 'intensity', False)
        # Applying the binary operator '-' (line 1880)
        result_sub_38705 = python_operator(stypy.reporting.localization.Localization(__file__, 1880, 34), '-', float_38703, intensity_38704)
        
        
        # Obtaining the type of the subscript
        slice_38706 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1880, 52), None, None, None)
        slice_38707 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1880, 52), None, None, None)
        int_38708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1880, 62), 'int')
        # Getting the type of 'hsv' (line 1880)
        hsv_38709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 52), 'hsv', False)
        # Obtaining the member '__getitem__' of a type (line 1880)
        getitem___38710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1880, 52), hsv_38709, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1880)
        subscript_call_result_38711 = invoke(stypy.reporting.localization.Localization(__file__, 1880, 52), getitem___38710, (slice_38706, slice_38707, int_38708))
        
        # Applying the binary operator '*' (line 1880)
        result_mul_38712 = python_operator(stypy.reporting.localization.Localization(__file__, 1880, 33), '*', result_sub_38705, subscript_call_result_38711)
        
        # Getting the type of 'intensity' (line 1881)
        intensity_38713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 33), 'intensity', False)
        # Getting the type of 'hsv_max_sat' (line 1881)
        hsv_max_sat_38714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 45), 'hsv_max_sat', False)
        # Applying the binary operator '*' (line 1881)
        result_mul_38715 = python_operator(stypy.reporting.localization.Localization(__file__, 1881, 33), '*', intensity_38713, hsv_max_sat_38714)
        
        # Applying the binary operator '+' (line 1880)
        result_add_38716 = python_operator(stypy.reporting.localization.Localization(__file__, 1880, 33), '+', result_mul_38712, result_mul_38715)
        
        
        # Obtaining the type of the subscript
        slice_38717 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1882, 32), None, None, None)
        slice_38718 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1882, 32), None, None, None)
        int_38719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1882, 42), 'int')
        # Getting the type of 'hsv' (line 1882)
        hsv_38720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 32), 'hsv', False)
        # Obtaining the member '__getitem__' of a type (line 1882)
        getitem___38721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1882, 32), hsv_38720, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1882)
        subscript_call_result_38722 = invoke(stypy.reporting.localization.Localization(__file__, 1882, 32), getitem___38721, (slice_38717, slice_38718, int_38719))
        
        # Processing the call keyword arguments (line 1878)
        kwargs_38723 = {}
        # Getting the type of 'np' (line 1878)
        np_38682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 23), 'np', False)
        # Obtaining the member 'where' of a type (line 1878)
        where_38683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 23), np_38682, 'where')
        # Calling where(args, kwargs) (line 1878)
        where_call_result_38724 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 23), where_38683, *[logical_and_call_result_38702, result_add_38716, subscript_call_result_38722], **kwargs_38723)
        
        # Getting the type of 'hsv' (line 1878)
        hsv_38725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 8), 'hsv')
        slice_38726 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1878, 8), None, None, None)
        slice_38727 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1878, 8), None, None, None)
        int_38728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1878, 18), 'int')
        # Storing an element on a container (line 1878)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1878, 8), hsv_38725, ((slice_38726, slice_38727, int_38728), where_call_result_38724))
        
        # Assigning a Call to a Subscript (line 1884):
        
        # Assigning a Call to a Subscript (line 1884):
        
        # Assigning a Call to a Subscript (line 1884):
        
        # Call to where(...): (line 1884)
        # Processing the call arguments (line 1884)
        
        # Getting the type of 'intensity' (line 1884)
        intensity_38731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 32), 'intensity', False)
        int_38732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1884, 44), 'int')
        # Applying the binary operator '>' (line 1884)
        result_gt_38733 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 32), '>', intensity_38731, int_38732)
        
        float_38734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1885, 34), 'float')
        # Getting the type of 'intensity' (line 1885)
        intensity_38735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 39), 'intensity', False)
        # Applying the binary operator '-' (line 1885)
        result_sub_38736 = python_operator(stypy.reporting.localization.Localization(__file__, 1885, 34), '-', float_38734, intensity_38735)
        
        
        # Obtaining the type of the subscript
        slice_38737 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1885, 52), None, None, None)
        slice_38738 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1885, 52), None, None, None)
        int_38739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1885, 62), 'int')
        # Getting the type of 'hsv' (line 1885)
        hsv_38740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 52), 'hsv', False)
        # Obtaining the member '__getitem__' of a type (line 1885)
        getitem___38741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 52), hsv_38740, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1885)
        subscript_call_result_38742 = invoke(stypy.reporting.localization.Localization(__file__, 1885, 52), getitem___38741, (slice_38737, slice_38738, int_38739))
        
        # Applying the binary operator '*' (line 1885)
        result_mul_38743 = python_operator(stypy.reporting.localization.Localization(__file__, 1885, 33), '*', result_sub_38736, subscript_call_result_38742)
        
        # Getting the type of 'intensity' (line 1886)
        intensity_38744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 33), 'intensity', False)
        # Getting the type of 'hsv_max_val' (line 1886)
        hsv_max_val_38745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 45), 'hsv_max_val', False)
        # Applying the binary operator '*' (line 1886)
        result_mul_38746 = python_operator(stypy.reporting.localization.Localization(__file__, 1886, 33), '*', intensity_38744, hsv_max_val_38745)
        
        # Applying the binary operator '+' (line 1885)
        result_add_38747 = python_operator(stypy.reporting.localization.Localization(__file__, 1885, 33), '+', result_mul_38743, result_mul_38746)
        
        
        # Obtaining the type of the subscript
        slice_38748 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1887, 32), None, None, None)
        slice_38749 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1887, 32), None, None, None)
        int_38750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1887, 42), 'int')
        # Getting the type of 'hsv' (line 1887)
        hsv_38751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 32), 'hsv', False)
        # Obtaining the member '__getitem__' of a type (line 1887)
        getitem___38752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1887, 32), hsv_38751, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1887)
        subscript_call_result_38753 = invoke(stypy.reporting.localization.Localization(__file__, 1887, 32), getitem___38752, (slice_38748, slice_38749, int_38750))
        
        # Processing the call keyword arguments (line 1884)
        kwargs_38754 = {}
        # Getting the type of 'np' (line 1884)
        np_38729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 23), 'np', False)
        # Obtaining the member 'where' of a type (line 1884)
        where_38730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1884, 23), np_38729, 'where')
        # Calling where(args, kwargs) (line 1884)
        where_call_result_38755 = invoke(stypy.reporting.localization.Localization(__file__, 1884, 23), where_38730, *[result_gt_38733, result_add_38747, subscript_call_result_38753], **kwargs_38754)
        
        # Getting the type of 'hsv' (line 1884)
        hsv_38756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 8), 'hsv')
        slice_38757 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1884, 8), None, None, None)
        slice_38758 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1884, 8), None, None, None)
        int_38759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1884, 18), 'int')
        # Storing an element on a container (line 1884)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1884, 8), hsv_38756, ((slice_38757, slice_38758, int_38759), where_call_result_38755))
        
        # Assigning a Call to a Subscript (line 1889):
        
        # Assigning a Call to a Subscript (line 1889):
        
        # Assigning a Call to a Subscript (line 1889):
        
        # Call to where(...): (line 1889)
        # Processing the call arguments (line 1889)
        
        # Call to logical_and(...): (line 1889)
        # Processing the call arguments (line 1889)
        
        
        # Call to abs(...): (line 1889)
        # Processing the call arguments (line 1889)
        
        # Obtaining the type of the subscript
        slice_38766 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1889, 54), None, None, None)
        slice_38767 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1889, 54), None, None, None)
        int_38768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1889, 64), 'int')
        # Getting the type of 'hsv' (line 1889)
        hsv_38769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 54), 'hsv', False)
        # Obtaining the member '__getitem__' of a type (line 1889)
        getitem___38770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 54), hsv_38769, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1889)
        subscript_call_result_38771 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 54), getitem___38770, (slice_38766, slice_38767, int_38768))
        
        # Processing the call keyword arguments (line 1889)
        kwargs_38772 = {}
        # Getting the type of 'np' (line 1889)
        np_38764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 47), 'np', False)
        # Obtaining the member 'abs' of a type (line 1889)
        abs_38765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 47), np_38764, 'abs')
        # Calling abs(args, kwargs) (line 1889)
        abs_call_result_38773 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 47), abs_38765, *[subscript_call_result_38771], **kwargs_38772)
        
        float_38774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1889, 70), 'float')
        # Applying the binary operator '>' (line 1889)
        result_gt_38775 = python_operator(stypy.reporting.localization.Localization(__file__, 1889, 47), '>', abs_call_result_38773, float_38774)
        
        
        # Getting the type of 'intensity' (line 1890)
        intensity_38776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 47), 'intensity', False)
        int_38777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1890, 59), 'int')
        # Applying the binary operator '<' (line 1890)
        result_lt_38778 = python_operator(stypy.reporting.localization.Localization(__file__, 1890, 47), '<', intensity_38776, int_38777)
        
        # Processing the call keyword arguments (line 1889)
        kwargs_38779 = {}
        # Getting the type of 'np' (line 1889)
        np_38762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 32), 'np', False)
        # Obtaining the member 'logical_and' of a type (line 1889)
        logical_and_38763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 32), np_38762, 'logical_and')
        # Calling logical_and(args, kwargs) (line 1889)
        logical_and_call_result_38780 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 32), logical_and_38763, *[result_gt_38775, result_lt_38778], **kwargs_38779)
        
        float_38781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1891, 34), 'float')
        # Getting the type of 'intensity' (line 1891)
        intensity_38782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 39), 'intensity', False)
        # Applying the binary operator '+' (line 1891)
        result_add_38783 = python_operator(stypy.reporting.localization.Localization(__file__, 1891, 34), '+', float_38781, intensity_38782)
        
        
        # Obtaining the type of the subscript
        slice_38784 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1891, 52), None, None, None)
        slice_38785 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1891, 52), None, None, None)
        int_38786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1891, 62), 'int')
        # Getting the type of 'hsv' (line 1891)
        hsv_38787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 52), 'hsv', False)
        # Obtaining the member '__getitem__' of a type (line 1891)
        getitem___38788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1891, 52), hsv_38787, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1891)
        subscript_call_result_38789 = invoke(stypy.reporting.localization.Localization(__file__, 1891, 52), getitem___38788, (slice_38784, slice_38785, int_38786))
        
        # Applying the binary operator '*' (line 1891)
        result_mul_38790 = python_operator(stypy.reporting.localization.Localization(__file__, 1891, 33), '*', result_add_38783, subscript_call_result_38789)
        
        # Getting the type of 'intensity' (line 1892)
        intensity_38791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 33), 'intensity', False)
        # Getting the type of 'hsv_min_sat' (line 1892)
        hsv_min_sat_38792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 45), 'hsv_min_sat', False)
        # Applying the binary operator '*' (line 1892)
        result_mul_38793 = python_operator(stypy.reporting.localization.Localization(__file__, 1892, 33), '*', intensity_38791, hsv_min_sat_38792)
        
        # Applying the binary operator '-' (line 1891)
        result_sub_38794 = python_operator(stypy.reporting.localization.Localization(__file__, 1891, 33), '-', result_mul_38790, result_mul_38793)
        
        
        # Obtaining the type of the subscript
        slice_38795 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1893, 32), None, None, None)
        slice_38796 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1893, 32), None, None, None)
        int_38797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1893, 42), 'int')
        # Getting the type of 'hsv' (line 1893)
        hsv_38798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 32), 'hsv', False)
        # Obtaining the member '__getitem__' of a type (line 1893)
        getitem___38799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1893, 32), hsv_38798, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1893)
        subscript_call_result_38800 = invoke(stypy.reporting.localization.Localization(__file__, 1893, 32), getitem___38799, (slice_38795, slice_38796, int_38797))
        
        # Processing the call keyword arguments (line 1889)
        kwargs_38801 = {}
        # Getting the type of 'np' (line 1889)
        np_38760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 23), 'np', False)
        # Obtaining the member 'where' of a type (line 1889)
        where_38761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 23), np_38760, 'where')
        # Calling where(args, kwargs) (line 1889)
        where_call_result_38802 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 23), where_38761, *[logical_and_call_result_38780, result_sub_38794, subscript_call_result_38800], **kwargs_38801)
        
        # Getting the type of 'hsv' (line 1889)
        hsv_38803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 8), 'hsv')
        slice_38804 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1889, 8), None, None, None)
        slice_38805 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1889, 8), None, None, None)
        int_38806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1889, 18), 'int')
        # Storing an element on a container (line 1889)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1889, 8), hsv_38803, ((slice_38804, slice_38805, int_38806), where_call_result_38802))
        
        # Assigning a Call to a Subscript (line 1894):
        
        # Assigning a Call to a Subscript (line 1894):
        
        # Assigning a Call to a Subscript (line 1894):
        
        # Call to where(...): (line 1894)
        # Processing the call arguments (line 1894)
        
        # Getting the type of 'intensity' (line 1894)
        intensity_38809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 32), 'intensity', False)
        int_38810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1894, 44), 'int')
        # Applying the binary operator '<' (line 1894)
        result_lt_38811 = python_operator(stypy.reporting.localization.Localization(__file__, 1894, 32), '<', intensity_38809, int_38810)
        
        float_38812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1895, 34), 'float')
        # Getting the type of 'intensity' (line 1895)
        intensity_38813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 39), 'intensity', False)
        # Applying the binary operator '+' (line 1895)
        result_add_38814 = python_operator(stypy.reporting.localization.Localization(__file__, 1895, 34), '+', float_38812, intensity_38813)
        
        
        # Obtaining the type of the subscript
        slice_38815 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1895, 52), None, None, None)
        slice_38816 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1895, 52), None, None, None)
        int_38817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1895, 62), 'int')
        # Getting the type of 'hsv' (line 1895)
        hsv_38818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 52), 'hsv', False)
        # Obtaining the member '__getitem__' of a type (line 1895)
        getitem___38819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1895, 52), hsv_38818, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1895)
        subscript_call_result_38820 = invoke(stypy.reporting.localization.Localization(__file__, 1895, 52), getitem___38819, (slice_38815, slice_38816, int_38817))
        
        # Applying the binary operator '*' (line 1895)
        result_mul_38821 = python_operator(stypy.reporting.localization.Localization(__file__, 1895, 33), '*', result_add_38814, subscript_call_result_38820)
        
        # Getting the type of 'intensity' (line 1896)
        intensity_38822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 33), 'intensity', False)
        # Getting the type of 'hsv_min_val' (line 1896)
        hsv_min_val_38823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 45), 'hsv_min_val', False)
        # Applying the binary operator '*' (line 1896)
        result_mul_38824 = python_operator(stypy.reporting.localization.Localization(__file__, 1896, 33), '*', intensity_38822, hsv_min_val_38823)
        
        # Applying the binary operator '-' (line 1895)
        result_sub_38825 = python_operator(stypy.reporting.localization.Localization(__file__, 1895, 33), '-', result_mul_38821, result_mul_38824)
        
        
        # Obtaining the type of the subscript
        slice_38826 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1897, 32), None, None, None)
        slice_38827 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1897, 32), None, None, None)
        int_38828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 42), 'int')
        # Getting the type of 'hsv' (line 1897)
        hsv_38829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 32), 'hsv', False)
        # Obtaining the member '__getitem__' of a type (line 1897)
        getitem___38830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1897, 32), hsv_38829, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1897)
        subscript_call_result_38831 = invoke(stypy.reporting.localization.Localization(__file__, 1897, 32), getitem___38830, (slice_38826, slice_38827, int_38828))
        
        # Processing the call keyword arguments (line 1894)
        kwargs_38832 = {}
        # Getting the type of 'np' (line 1894)
        np_38807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 23), 'np', False)
        # Obtaining the member 'where' of a type (line 1894)
        where_38808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1894, 23), np_38807, 'where')
        # Calling where(args, kwargs) (line 1894)
        where_call_result_38833 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 23), where_38808, *[result_lt_38811, result_sub_38825, subscript_call_result_38831], **kwargs_38832)
        
        # Getting the type of 'hsv' (line 1894)
        hsv_38834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 8), 'hsv')
        slice_38835 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1894, 8), None, None, None)
        slice_38836 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1894, 8), None, None, None)
        int_38837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1894, 18), 'int')
        # Storing an element on a container (line 1894)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1894, 8), hsv_38834, ((slice_38835, slice_38836, int_38837), where_call_result_38833))
        
        # Assigning a Call to a Subscript (line 1898):
        
        # Assigning a Call to a Subscript (line 1898):
        
        # Assigning a Call to a Subscript (line 1898):
        
        # Call to where(...): (line 1898)
        # Processing the call arguments (line 1898)
        
        
        # Obtaining the type of the subscript
        slice_38840 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1898, 33), None, None, None)
        slice_38841 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1898, 33), None, None, None)
        int_38842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1898, 43), 'int')
        slice_38843 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1898, 33), int_38842, None, None)
        # Getting the type of 'hsv' (line 1898)
        hsv_38844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 33), 'hsv', False)
        # Obtaining the member '__getitem__' of a type (line 1898)
        getitem___38845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1898, 33), hsv_38844, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1898)
        subscript_call_result_38846 = invoke(stypy.reporting.localization.Localization(__file__, 1898, 33), getitem___38845, (slice_38840, slice_38841, slice_38843))
        
        float_38847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1898, 49), 'float')
        # Applying the binary operator '<' (line 1898)
        result_lt_38848 = python_operator(stypy.reporting.localization.Localization(__file__, 1898, 33), '<', subscript_call_result_38846, float_38847)
        
        int_38849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1898, 53), 'int')
        
        # Obtaining the type of the subscript
        slice_38850 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1898, 56), None, None, None)
        slice_38851 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1898, 56), None, None, None)
        int_38852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1898, 66), 'int')
        slice_38853 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1898, 56), int_38852, None, None)
        # Getting the type of 'hsv' (line 1898)
        hsv_38854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 56), 'hsv', False)
        # Obtaining the member '__getitem__' of a type (line 1898)
        getitem___38855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1898, 56), hsv_38854, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1898)
        subscript_call_result_38856 = invoke(stypy.reporting.localization.Localization(__file__, 1898, 56), getitem___38855, (slice_38850, slice_38851, slice_38853))
        
        # Processing the call keyword arguments (line 1898)
        kwargs_38857 = {}
        # Getting the type of 'np' (line 1898)
        np_38838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 24), 'np', False)
        # Obtaining the member 'where' of a type (line 1898)
        where_38839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1898, 24), np_38838, 'where')
        # Calling where(args, kwargs) (line 1898)
        where_call_result_38858 = invoke(stypy.reporting.localization.Localization(__file__, 1898, 24), where_38839, *[result_lt_38848, int_38849, subscript_call_result_38856], **kwargs_38857)
        
        # Getting the type of 'hsv' (line 1898)
        hsv_38859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 8), 'hsv')
        slice_38860 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1898, 8), None, None, None)
        slice_38861 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1898, 8), None, None, None)
        int_38862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1898, 18), 'int')
        slice_38863 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1898, 8), int_38862, None, None)
        # Storing an element on a container (line 1898)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1898, 8), hsv_38859, ((slice_38860, slice_38861, slice_38863), where_call_result_38858))
        
        # Assigning a Call to a Subscript (line 1899):
        
        # Assigning a Call to a Subscript (line 1899):
        
        # Assigning a Call to a Subscript (line 1899):
        
        # Call to where(...): (line 1899)
        # Processing the call arguments (line 1899)
        
        
        # Obtaining the type of the subscript
        slice_38866 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1899, 33), None, None, None)
        slice_38867 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1899, 33), None, None, None)
        int_38868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1899, 43), 'int')
        slice_38869 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1899, 33), int_38868, None, None)
        # Getting the type of 'hsv' (line 1899)
        hsv_38870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 33), 'hsv', False)
        # Obtaining the member '__getitem__' of a type (line 1899)
        getitem___38871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1899, 33), hsv_38870, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1899)
        subscript_call_result_38872 = invoke(stypy.reporting.localization.Localization(__file__, 1899, 33), getitem___38871, (slice_38866, slice_38867, slice_38869))
        
        float_38873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1899, 49), 'float')
        # Applying the binary operator '>' (line 1899)
        result_gt_38874 = python_operator(stypy.reporting.localization.Localization(__file__, 1899, 33), '>', subscript_call_result_38872, float_38873)
        
        int_38875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1899, 53), 'int')
        
        # Obtaining the type of the subscript
        slice_38876 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1899, 56), None, None, None)
        slice_38877 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1899, 56), None, None, None)
        int_38878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1899, 66), 'int')
        slice_38879 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1899, 56), int_38878, None, None)
        # Getting the type of 'hsv' (line 1899)
        hsv_38880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 56), 'hsv', False)
        # Obtaining the member '__getitem__' of a type (line 1899)
        getitem___38881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1899, 56), hsv_38880, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1899)
        subscript_call_result_38882 = invoke(stypy.reporting.localization.Localization(__file__, 1899, 56), getitem___38881, (slice_38876, slice_38877, slice_38879))
        
        # Processing the call keyword arguments (line 1899)
        kwargs_38883 = {}
        # Getting the type of 'np' (line 1899)
        np_38864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 24), 'np', False)
        # Obtaining the member 'where' of a type (line 1899)
        where_38865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1899, 24), np_38864, 'where')
        # Calling where(args, kwargs) (line 1899)
        where_call_result_38884 = invoke(stypy.reporting.localization.Localization(__file__, 1899, 24), where_38865, *[result_gt_38874, int_38875, subscript_call_result_38882], **kwargs_38883)
        
        # Getting the type of 'hsv' (line 1899)
        hsv_38885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 8), 'hsv')
        slice_38886 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1899, 8), None, None, None)
        slice_38887 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1899, 8), None, None, None)
        int_38888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1899, 18), 'int')
        slice_38889 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1899, 8), int_38888, None, None)
        # Storing an element on a container (line 1899)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1899, 8), hsv_38885, ((slice_38886, slice_38887, slice_38889), where_call_result_38884))
        
        # Call to hsv_to_rgb(...): (line 1901)
        # Processing the call arguments (line 1901)
        # Getting the type of 'hsv' (line 1901)
        hsv_38891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 26), 'hsv', False)
        # Processing the call keyword arguments (line 1901)
        kwargs_38892 = {}
        # Getting the type of 'hsv_to_rgb' (line 1901)
        hsv_to_rgb_38890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 15), 'hsv_to_rgb', False)
        # Calling hsv_to_rgb(args, kwargs) (line 1901)
        hsv_to_rgb_call_result_38893 = invoke(stypy.reporting.localization.Localization(__file__, 1901, 15), hsv_to_rgb_38890, *[hsv_38891], **kwargs_38892)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1901, 8), 'stypy_return_type', hsv_to_rgb_call_result_38893)
        
        # ################# End of 'blend_hsv(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'blend_hsv' in the type store
        # Getting the type of 'stypy_return_type' (line 1821)
        stypy_return_type_38894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_38894)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'blend_hsv'
        return stypy_return_type_38894


    @norecursion
    def blend_soft_light(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'blend_soft_light'
        module_type_store = module_type_store.open_function_context('blend_soft_light', 1903, 4, False)
        # Assigning a type to the variable 'self' (line 1904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1904, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LightSource.blend_soft_light.__dict__.__setitem__('stypy_localization', localization)
        LightSource.blend_soft_light.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LightSource.blend_soft_light.__dict__.__setitem__('stypy_type_store', module_type_store)
        LightSource.blend_soft_light.__dict__.__setitem__('stypy_function_name', 'LightSource.blend_soft_light')
        LightSource.blend_soft_light.__dict__.__setitem__('stypy_param_names_list', ['rgb', 'intensity'])
        LightSource.blend_soft_light.__dict__.__setitem__('stypy_varargs_param_name', None)
        LightSource.blend_soft_light.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LightSource.blend_soft_light.__dict__.__setitem__('stypy_call_defaults', defaults)
        LightSource.blend_soft_light.__dict__.__setitem__('stypy_call_varargs', varargs)
        LightSource.blend_soft_light.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LightSource.blend_soft_light.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LightSource.blend_soft_light', ['rgb', 'intensity'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'blend_soft_light', localization, ['rgb', 'intensity'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'blend_soft_light(...)' code ##################

        unicode_38895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1919, (-1)), 'unicode', u'\n        Combines an rgb image with an intensity map using "soft light"\n        blending.  Uses the "pegtop" formula.\n\n        Parameters\n        ----------\n        rgb : ndarray\n            An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n        intensity : ndarray\n            An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n\n        Returns\n        -------\n        rgb : ndarray\n            An MxNx3 RGB array representing the combined images.\n        ')
        int_38896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 15), 'int')
        # Getting the type of 'intensity' (line 1920)
        intensity_38897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 19), 'intensity')
        # Applying the binary operator '*' (line 1920)
        result_mul_38898 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 15), '*', int_38896, intensity_38897)
        
        # Getting the type of 'rgb' (line 1920)
        rgb_38899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 31), 'rgb')
        # Applying the binary operator '*' (line 1920)
        result_mul_38900 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 29), '*', result_mul_38898, rgb_38899)
        
        int_38901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 38), 'int')
        int_38902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 42), 'int')
        # Getting the type of 'intensity' (line 1920)
        intensity_38903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 46), 'intensity')
        # Applying the binary operator '*' (line 1920)
        result_mul_38904 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 42), '*', int_38902, intensity_38903)
        
        # Applying the binary operator '-' (line 1920)
        result_sub_38905 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 38), '-', int_38901, result_mul_38904)
        
        # Getting the type of 'rgb' (line 1920)
        rgb_38906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 59), 'rgb')
        int_38907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 64), 'int')
        # Applying the binary operator '**' (line 1920)
        result_pow_38908 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 59), '**', rgb_38906, int_38907)
        
        # Applying the binary operator '*' (line 1920)
        result_mul_38909 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 37), '*', result_sub_38905, result_pow_38908)
        
        # Applying the binary operator '+' (line 1920)
        result_add_38910 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 15), '+', result_mul_38900, result_mul_38909)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 8), 'stypy_return_type', result_add_38910)
        
        # ################# End of 'blend_soft_light(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'blend_soft_light' in the type store
        # Getting the type of 'stypy_return_type' (line 1903)
        stypy_return_type_38911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_38911)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'blend_soft_light'
        return stypy_return_type_38911


    @norecursion
    def blend_overlay(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'blend_overlay'
        module_type_store = module_type_store.open_function_context('blend_overlay', 1922, 4, False)
        # Assigning a type to the variable 'self' (line 1923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LightSource.blend_overlay.__dict__.__setitem__('stypy_localization', localization)
        LightSource.blend_overlay.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LightSource.blend_overlay.__dict__.__setitem__('stypy_type_store', module_type_store)
        LightSource.blend_overlay.__dict__.__setitem__('stypy_function_name', 'LightSource.blend_overlay')
        LightSource.blend_overlay.__dict__.__setitem__('stypy_param_names_list', ['rgb', 'intensity'])
        LightSource.blend_overlay.__dict__.__setitem__('stypy_varargs_param_name', None)
        LightSource.blend_overlay.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LightSource.blend_overlay.__dict__.__setitem__('stypy_call_defaults', defaults)
        LightSource.blend_overlay.__dict__.__setitem__('stypy_call_varargs', varargs)
        LightSource.blend_overlay.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LightSource.blend_overlay.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LightSource.blend_overlay', ['rgb', 'intensity'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'blend_overlay', localization, ['rgb', 'intensity'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'blend_overlay(...)' code ##################

        unicode_38912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1937, (-1)), 'unicode', u'\n        Combines an rgb image with an intensity map using "overlay" blending.\n\n        Parameters\n        ----------\n        rgb : ndarray\n            An MxNx3 RGB array of floats ranging from 0 to 1 (color image).\n        intensity : ndarray\n            An MxNx1 array of floats ranging from 0 to 1 (grayscale image).\n\n        Returns\n        -------\n        rgb : ndarray\n            An MxNx3 RGB array representing the combined images.\n        ')
        
        # Assigning a BinOp to a Name (line 1938):
        
        # Assigning a BinOp to a Name (line 1938):
        
        # Assigning a BinOp to a Name (line 1938):
        int_38913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1938, 14), 'int')
        # Getting the type of 'intensity' (line 1938)
        intensity_38914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 18), 'intensity')
        # Applying the binary operator '*' (line 1938)
        result_mul_38915 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 14), '*', int_38913, intensity_38914)
        
        # Getting the type of 'rgb' (line 1938)
        rgb_38916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 30), 'rgb')
        # Applying the binary operator '*' (line 1938)
        result_mul_38917 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 28), '*', result_mul_38915, rgb_38916)
        
        # Assigning a type to the variable 'low' (line 1938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1938, 8), 'low', result_mul_38917)
        
        # Assigning a BinOp to a Name (line 1939):
        
        # Assigning a BinOp to a Name (line 1939):
        
        # Assigning a BinOp to a Name (line 1939):
        int_38918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1939, 15), 'int')
        int_38919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1939, 19), 'int')
        int_38920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1939, 24), 'int')
        # Getting the type of 'intensity' (line 1939)
        intensity_38921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 28), 'intensity')
        # Applying the binary operator '-' (line 1939)
        result_sub_38922 = python_operator(stypy.reporting.localization.Localization(__file__, 1939, 24), '-', int_38920, intensity_38921)
        
        # Applying the binary operator '*' (line 1939)
        result_mul_38923 = python_operator(stypy.reporting.localization.Localization(__file__, 1939, 19), '*', int_38919, result_sub_38922)
        
        int_38924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1939, 42), 'int')
        # Getting the type of 'rgb' (line 1939)
        rgb_38925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 46), 'rgb')
        # Applying the binary operator '-' (line 1939)
        result_sub_38926 = python_operator(stypy.reporting.localization.Localization(__file__, 1939, 42), '-', int_38924, rgb_38925)
        
        # Applying the binary operator '*' (line 1939)
        result_mul_38927 = python_operator(stypy.reporting.localization.Localization(__file__, 1939, 39), '*', result_mul_38923, result_sub_38926)
        
        # Applying the binary operator '-' (line 1939)
        result_sub_38928 = python_operator(stypy.reporting.localization.Localization(__file__, 1939, 15), '-', int_38918, result_mul_38927)
        
        # Assigning a type to the variable 'high' (line 1939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1939, 8), 'high', result_sub_38928)
        
        # Call to where(...): (line 1940)
        # Processing the call arguments (line 1940)
        
        # Getting the type of 'rgb' (line 1940)
        rgb_38931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 24), 'rgb', False)
        float_38932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1940, 31), 'float')
        # Applying the binary operator '<=' (line 1940)
        result_le_38933 = python_operator(stypy.reporting.localization.Localization(__file__, 1940, 24), '<=', rgb_38931, float_38932)
        
        # Getting the type of 'low' (line 1940)
        low_38934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 36), 'low', False)
        # Getting the type of 'high' (line 1940)
        high_38935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 41), 'high', False)
        # Processing the call keyword arguments (line 1940)
        kwargs_38936 = {}
        # Getting the type of 'np' (line 1940)
        np_38929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 15), 'np', False)
        # Obtaining the member 'where' of a type (line 1940)
        where_38930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1940, 15), np_38929, 'where')
        # Calling where(args, kwargs) (line 1940)
        where_call_result_38937 = invoke(stypy.reporting.localization.Localization(__file__, 1940, 15), where_38930, *[result_le_38933, low_38934, high_38935], **kwargs_38936)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1940, 8), 'stypy_return_type', where_call_result_38937)
        
        # ################# End of 'blend_overlay(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'blend_overlay' in the type store
        # Getting the type of 'stypy_return_type' (line 1922)
        stypy_return_type_38938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_38938)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'blend_overlay'
        return stypy_return_type_38938


# Assigning a type to the variable 'LightSource' (line 1514)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 0), 'LightSource', LightSource)

@norecursion
def from_levels_and_colors(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_38939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1943, 50), 'unicode', u'neither')
    defaults = [unicode_38939]
    # Create a new context for function 'from_levels_and_colors'
    module_type_store = module_type_store.open_function_context('from_levels_and_colors', 1943, 0, False)
    
    # Passed parameters checking function
    from_levels_and_colors.stypy_localization = localization
    from_levels_and_colors.stypy_type_of_self = None
    from_levels_and_colors.stypy_type_store = module_type_store
    from_levels_and_colors.stypy_function_name = 'from_levels_and_colors'
    from_levels_and_colors.stypy_param_names_list = ['levels', 'colors', 'extend']
    from_levels_and_colors.stypy_varargs_param_name = None
    from_levels_and_colors.stypy_kwargs_param_name = None
    from_levels_and_colors.stypy_call_defaults = defaults
    from_levels_and_colors.stypy_call_varargs = varargs
    from_levels_and_colors.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'from_levels_and_colors', ['levels', 'colors', 'extend'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'from_levels_and_colors', localization, ['levels', 'colors', 'extend'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'from_levels_and_colors(...)' code ##################

    unicode_38940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1966, (-1)), 'unicode', u'\n    A helper routine to generate a cmap and a norm instance which\n    behave similar to contourf\'s levels and colors arguments.\n\n    Parameters\n    ----------\n    levels : sequence of numbers\n        The quantization levels used to construct the :class:`BoundaryNorm`.\n        Values ``v`` are quantizized to level ``i`` if\n        ``lev[i] <= v < lev[i+1]``.\n    colors : sequence of colors\n        The fill color to use for each level. If `extend` is "neither" there\n        must be ``n_level - 1`` colors. For an `extend` of "min" or "max" add\n        one extra color, and for an `extend` of "both" add two colors.\n    extend : {\'neither\', \'min\', \'max\', \'both\'}, optional\n        The behaviour when a value falls out of range of the given levels.\n        See :func:`~matplotlib.pyplot.contourf` for details.\n\n    Returns\n    -------\n    (cmap, norm) : tuple containing a :class:`Colormap` and a                    :class:`Normalize` instance\n    ')
    
    # Assigning a Num to a Name (line 1967):
    
    # Assigning a Num to a Name (line 1967):
    
    # Assigning a Num to a Name (line 1967):
    int_38941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1967, 16), 'int')
    # Assigning a type to the variable 'colors_i0' (line 1967)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1967, 4), 'colors_i0', int_38941)
    
    # Assigning a Name to a Name (line 1968):
    
    # Assigning a Name to a Name (line 1968):
    
    # Assigning a Name to a Name (line 1968):
    # Getting the type of 'None' (line 1968)
    None_38942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 16), 'None')
    # Assigning a type to the variable 'colors_i1' (line 1968)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1968, 4), 'colors_i1', None_38942)
    
    
    # Getting the type of 'extend' (line 1970)
    extend_38943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 7), 'extend')
    unicode_38944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1970, 17), 'unicode', u'both')
    # Applying the binary operator '==' (line 1970)
    result_eq_38945 = python_operator(stypy.reporting.localization.Localization(__file__, 1970, 7), '==', extend_38943, unicode_38944)
    
    # Testing the type of an if condition (line 1970)
    if_condition_38946 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1970, 4), result_eq_38945)
    # Assigning a type to the variable 'if_condition_38946' (line 1970)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 4), 'if_condition_38946', if_condition_38946)
    # SSA begins for if statement (line 1970)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1971):
    
    # Assigning a Num to a Name (line 1971):
    
    # Assigning a Num to a Name (line 1971):
    int_38947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1971, 20), 'int')
    # Assigning a type to the variable 'colors_i0' (line 1971)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1971, 8), 'colors_i0', int_38947)
    
    # Assigning a Num to a Name (line 1972):
    
    # Assigning a Num to a Name (line 1972):
    
    # Assigning a Num to a Name (line 1972):
    int_38948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 20), 'int')
    # Assigning a type to the variable 'colors_i1' (line 1972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 8), 'colors_i1', int_38948)
    
    # Assigning a Num to a Name (line 1973):
    
    # Assigning a Num to a Name (line 1973):
    
    # Assigning a Num to a Name (line 1973):
    int_38949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 23), 'int')
    # Assigning a type to the variable 'extra_colors' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 8), 'extra_colors', int_38949)
    # SSA branch for the else part of an if statement (line 1970)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'extend' (line 1974)
    extend_38950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 9), 'extend')
    unicode_38951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1974, 19), 'unicode', u'min')
    # Applying the binary operator '==' (line 1974)
    result_eq_38952 = python_operator(stypy.reporting.localization.Localization(__file__, 1974, 9), '==', extend_38950, unicode_38951)
    
    # Testing the type of an if condition (line 1974)
    if_condition_38953 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1974, 9), result_eq_38952)
    # Assigning a type to the variable 'if_condition_38953' (line 1974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 9), 'if_condition_38953', if_condition_38953)
    # SSA begins for if statement (line 1974)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1975):
    
    # Assigning a Num to a Name (line 1975):
    
    # Assigning a Num to a Name (line 1975):
    int_38954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1975, 20), 'int')
    # Assigning a type to the variable 'colors_i0' (line 1975)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1975, 8), 'colors_i0', int_38954)
    
    # Assigning a Num to a Name (line 1976):
    
    # Assigning a Num to a Name (line 1976):
    
    # Assigning a Num to a Name (line 1976):
    int_38955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1976, 23), 'int')
    # Assigning a type to the variable 'extra_colors' (line 1976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1976, 8), 'extra_colors', int_38955)
    # SSA branch for the else part of an if statement (line 1974)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'extend' (line 1977)
    extend_38956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 9), 'extend')
    unicode_38957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1977, 19), 'unicode', u'max')
    # Applying the binary operator '==' (line 1977)
    result_eq_38958 = python_operator(stypy.reporting.localization.Localization(__file__, 1977, 9), '==', extend_38956, unicode_38957)
    
    # Testing the type of an if condition (line 1977)
    if_condition_38959 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1977, 9), result_eq_38958)
    # Assigning a type to the variable 'if_condition_38959' (line 1977)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1977, 9), 'if_condition_38959', if_condition_38959)
    # SSA begins for if statement (line 1977)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1978):
    
    # Assigning a Num to a Name (line 1978):
    
    # Assigning a Num to a Name (line 1978):
    int_38960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1978, 20), 'int')
    # Assigning a type to the variable 'colors_i1' (line 1978)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1978, 8), 'colors_i1', int_38960)
    
    # Assigning a Num to a Name (line 1979):
    
    # Assigning a Num to a Name (line 1979):
    
    # Assigning a Num to a Name (line 1979):
    int_38961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1979, 23), 'int')
    # Assigning a type to the variable 'extra_colors' (line 1979)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1979, 8), 'extra_colors', int_38961)
    # SSA branch for the else part of an if statement (line 1977)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'extend' (line 1980)
    extend_38962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 9), 'extend')
    unicode_38963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1980, 19), 'unicode', u'neither')
    # Applying the binary operator '==' (line 1980)
    result_eq_38964 = python_operator(stypy.reporting.localization.Localization(__file__, 1980, 9), '==', extend_38962, unicode_38963)
    
    # Testing the type of an if condition (line 1980)
    if_condition_38965 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1980, 9), result_eq_38964)
    # Assigning a type to the variable 'if_condition_38965' (line 1980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 9), 'if_condition_38965', if_condition_38965)
    # SSA begins for if statement (line 1980)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1981):
    
    # Assigning a Num to a Name (line 1981):
    
    # Assigning a Num to a Name (line 1981):
    int_38966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1981, 23), 'int')
    # Assigning a type to the variable 'extra_colors' (line 1981)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 8), 'extra_colors', int_38966)
    # SSA branch for the else part of an if statement (line 1980)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 1983)
    # Processing the call arguments (line 1983)
    
    # Call to format(...): (line 1983)
    # Processing the call arguments (line 1983)
    # Getting the type of 'extend' (line 1983)
    extend_38970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 69), 'extend', False)
    # Processing the call keyword arguments (line 1983)
    kwargs_38971 = {}
    unicode_38968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 25), 'unicode', u'Unexpected value for extend: {0!r}')
    # Obtaining the member 'format' of a type (line 1983)
    format_38969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1983, 25), unicode_38968, 'format')
    # Calling format(args, kwargs) (line 1983)
    format_call_result_38972 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 25), format_38969, *[extend_38970], **kwargs_38971)
    
    # Processing the call keyword arguments (line 1983)
    kwargs_38973 = {}
    # Getting the type of 'ValueError' (line 1983)
    ValueError_38967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1983)
    ValueError_call_result_38974 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 14), ValueError_38967, *[format_call_result_38972], **kwargs_38973)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1983, 8), ValueError_call_result_38974, 'raise parameter', BaseException)
    # SSA join for if statement (line 1980)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1977)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1974)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1970)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1985):
    
    # Assigning a BinOp to a Name (line 1985):
    
    # Assigning a BinOp to a Name (line 1985):
    
    # Call to len(...): (line 1985)
    # Processing the call arguments (line 1985)
    # Getting the type of 'levels' (line 1985)
    levels_38976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 24), 'levels', False)
    # Processing the call keyword arguments (line 1985)
    kwargs_38977 = {}
    # Getting the type of 'len' (line 1985)
    len_38975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 20), 'len', False)
    # Calling len(args, kwargs) (line 1985)
    len_call_result_38978 = invoke(stypy.reporting.localization.Localization(__file__, 1985, 20), len_38975, *[levels_38976], **kwargs_38977)
    
    int_38979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1985, 34), 'int')
    # Applying the binary operator '-' (line 1985)
    result_sub_38980 = python_operator(stypy.reporting.localization.Localization(__file__, 1985, 20), '-', len_call_result_38978, int_38979)
    
    # Assigning a type to the variable 'n_data_colors' (line 1985)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 4), 'n_data_colors', result_sub_38980)
    
    # Assigning a BinOp to a Name (line 1986):
    
    # Assigning a BinOp to a Name (line 1986):
    
    # Assigning a BinOp to a Name (line 1986):
    # Getting the type of 'n_data_colors' (line 1986)
    n_data_colors_38981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1986, 24), 'n_data_colors')
    # Getting the type of 'extra_colors' (line 1986)
    extra_colors_38982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1986, 40), 'extra_colors')
    # Applying the binary operator '+' (line 1986)
    result_add_38983 = python_operator(stypy.reporting.localization.Localization(__file__, 1986, 24), '+', n_data_colors_38981, extra_colors_38982)
    
    # Assigning a type to the variable 'n_expected_colors' (line 1986)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1986, 4), 'n_expected_colors', result_add_38983)
    
    
    
    # Call to len(...): (line 1987)
    # Processing the call arguments (line 1987)
    # Getting the type of 'colors' (line 1987)
    colors_38985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 11), 'colors', False)
    # Processing the call keyword arguments (line 1987)
    kwargs_38986 = {}
    # Getting the type of 'len' (line 1987)
    len_38984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 7), 'len', False)
    # Calling len(args, kwargs) (line 1987)
    len_call_result_38987 = invoke(stypy.reporting.localization.Localization(__file__, 1987, 7), len_38984, *[colors_38985], **kwargs_38986)
    
    # Getting the type of 'n_expected_colors' (line 1987)
    n_expected_colors_38988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 22), 'n_expected_colors')
    # Applying the binary operator '!=' (line 1987)
    result_ne_38989 = python_operator(stypy.reporting.localization.Localization(__file__, 1987, 7), '!=', len_call_result_38987, n_expected_colors_38988)
    
    # Testing the type of an if condition (line 1987)
    if_condition_38990 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1987, 4), result_ne_38989)
    # Assigning a type to the variable 'if_condition_38990' (line 1987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1987, 4), 'if_condition_38990', if_condition_38990)
    # SSA begins for if statement (line 1987)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1988)
    # Processing the call arguments (line 1988)
    
    # Call to format(...): (line 1988)
    # Processing the call arguments (line 1988)
    # Getting the type of 'extend' (line 1990)
    extend_38994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 35), 'extend', False)
    
    # Call to len(...): (line 1990)
    # Processing the call arguments (line 1990)
    # Getting the type of 'levels' (line 1990)
    levels_38996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 47), 'levels', False)
    # Processing the call keyword arguments (line 1990)
    kwargs_38997 = {}
    # Getting the type of 'len' (line 1990)
    len_38995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 43), 'len', False)
    # Calling len(args, kwargs) (line 1990)
    len_call_result_38998 = invoke(stypy.reporting.localization.Localization(__file__, 1990, 43), len_38995, *[levels_38996], **kwargs_38997)
    
    # Getting the type of 'n_expected_colors' (line 1990)
    n_expected_colors_38999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 56), 'n_expected_colors', False)
    
    # Call to len(...): (line 1991)
    # Processing the call arguments (line 1991)
    # Getting the type of 'colors' (line 1991)
    colors_39001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 39), 'colors', False)
    # Processing the call keyword arguments (line 1991)
    kwargs_39002 = {}
    # Getting the type of 'len' (line 1991)
    len_39000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 35), 'len', False)
    # Calling len(args, kwargs) (line 1991)
    len_call_result_39003 = invoke(stypy.reporting.localization.Localization(__file__, 1991, 35), len_39000, *[colors_39001], **kwargs_39002)
    
    # Processing the call keyword arguments (line 1988)
    kwargs_39004 = {}
    unicode_38992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1988, 25), 'unicode', u'With extend == {0!r} and n_levels == {1!r} expected n_colors == {2!r}. Got {3!r}.')
    # Obtaining the member 'format' of a type (line 1988)
    format_38993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1988, 25), unicode_38992, 'format')
    # Calling format(args, kwargs) (line 1988)
    format_call_result_39005 = invoke(stypy.reporting.localization.Localization(__file__, 1988, 25), format_38993, *[extend_38994, len_call_result_38998, n_expected_colors_38999, len_call_result_39003], **kwargs_39004)
    
    # Processing the call keyword arguments (line 1988)
    kwargs_39006 = {}
    # Getting the type of 'ValueError' (line 1988)
    ValueError_38991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1988, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1988)
    ValueError_call_result_39007 = invoke(stypy.reporting.localization.Localization(__file__, 1988, 14), ValueError_38991, *[format_call_result_39005], **kwargs_39006)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1988, 8), ValueError_call_result_39007, 'raise parameter', BaseException)
    # SSA join for if statement (line 1987)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1993):
    
    # Assigning a Call to a Name (line 1993):
    
    # Assigning a Call to a Name (line 1993):
    
    # Call to ListedColormap(...): (line 1993)
    # Processing the call arguments (line 1993)
    
    # Obtaining the type of the subscript
    # Getting the type of 'colors_i0' (line 1993)
    colors_i0_39009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 33), 'colors_i0', False)
    # Getting the type of 'colors_i1' (line 1993)
    colors_i1_39010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 43), 'colors_i1', False)
    slice_39011 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1993, 26), colors_i0_39009, colors_i1_39010, None)
    # Getting the type of 'colors' (line 1993)
    colors_39012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 26), 'colors', False)
    # Obtaining the member '__getitem__' of a type (line 1993)
    getitem___39013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1993, 26), colors_39012, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1993)
    subscript_call_result_39014 = invoke(stypy.reporting.localization.Localization(__file__, 1993, 26), getitem___39013, slice_39011)
    
    # Processing the call keyword arguments (line 1993)
    # Getting the type of 'n_data_colors' (line 1993)
    n_data_colors_39015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 57), 'n_data_colors', False)
    keyword_39016 = n_data_colors_39015
    kwargs_39017 = {'N': keyword_39016}
    # Getting the type of 'ListedColormap' (line 1993)
    ListedColormap_39008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 11), 'ListedColormap', False)
    # Calling ListedColormap(args, kwargs) (line 1993)
    ListedColormap_call_result_39018 = invoke(stypy.reporting.localization.Localization(__file__, 1993, 11), ListedColormap_39008, *[subscript_call_result_39014], **kwargs_39017)
    
    # Assigning a type to the variable 'cmap' (line 1993)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1993, 4), 'cmap', ListedColormap_call_result_39018)
    
    
    # Getting the type of 'extend' (line 1995)
    extend_39019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 7), 'extend')
    
    # Obtaining an instance of the builtin type 'list' (line 1995)
    list_39020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1995)
    # Adding element type (line 1995)
    unicode_39021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 18), 'unicode', u'min')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1995, 17), list_39020, unicode_39021)
    # Adding element type (line 1995)
    unicode_39022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 25), 'unicode', u'both')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1995, 17), list_39020, unicode_39022)
    
    # Applying the binary operator 'in' (line 1995)
    result_contains_39023 = python_operator(stypy.reporting.localization.Localization(__file__, 1995, 7), 'in', extend_39019, list_39020)
    
    # Testing the type of an if condition (line 1995)
    if_condition_39024 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1995, 4), result_contains_39023)
    # Assigning a type to the variable 'if_condition_39024' (line 1995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1995, 4), 'if_condition_39024', if_condition_39024)
    # SSA begins for if statement (line 1995)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_under(...): (line 1996)
    # Processing the call arguments (line 1996)
    
    # Obtaining the type of the subscript
    int_39027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1996, 30), 'int')
    # Getting the type of 'colors' (line 1996)
    colors_39028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 23), 'colors', False)
    # Obtaining the member '__getitem__' of a type (line 1996)
    getitem___39029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1996, 23), colors_39028, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1996)
    subscript_call_result_39030 = invoke(stypy.reporting.localization.Localization(__file__, 1996, 23), getitem___39029, int_39027)
    
    # Processing the call keyword arguments (line 1996)
    kwargs_39031 = {}
    # Getting the type of 'cmap' (line 1996)
    cmap_39025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 8), 'cmap', False)
    # Obtaining the member 'set_under' of a type (line 1996)
    set_under_39026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1996, 8), cmap_39025, 'set_under')
    # Calling set_under(args, kwargs) (line 1996)
    set_under_call_result_39032 = invoke(stypy.reporting.localization.Localization(__file__, 1996, 8), set_under_39026, *[subscript_call_result_39030], **kwargs_39031)
    
    # SSA branch for the else part of an if statement (line 1995)
    module_type_store.open_ssa_branch('else')
    
    # Call to set_under(...): (line 1998)
    # Processing the call arguments (line 1998)
    unicode_39035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1998, 23), 'unicode', u'none')
    # Processing the call keyword arguments (line 1998)
    kwargs_39036 = {}
    # Getting the type of 'cmap' (line 1998)
    cmap_39033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 8), 'cmap', False)
    # Obtaining the member 'set_under' of a type (line 1998)
    set_under_39034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1998, 8), cmap_39033, 'set_under')
    # Calling set_under(args, kwargs) (line 1998)
    set_under_call_result_39037 = invoke(stypy.reporting.localization.Localization(__file__, 1998, 8), set_under_39034, *[unicode_39035], **kwargs_39036)
    
    # SSA join for if statement (line 1995)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'extend' (line 2000)
    extend_39038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 7), 'extend')
    
    # Obtaining an instance of the builtin type 'list' (line 2000)
    list_39039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2000, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2000)
    # Adding element type (line 2000)
    unicode_39040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2000, 18), 'unicode', u'max')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2000, 17), list_39039, unicode_39040)
    # Adding element type (line 2000)
    unicode_39041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2000, 25), 'unicode', u'both')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2000, 17), list_39039, unicode_39041)
    
    # Applying the binary operator 'in' (line 2000)
    result_contains_39042 = python_operator(stypy.reporting.localization.Localization(__file__, 2000, 7), 'in', extend_39038, list_39039)
    
    # Testing the type of an if condition (line 2000)
    if_condition_39043 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2000, 4), result_contains_39042)
    # Assigning a type to the variable 'if_condition_39043' (line 2000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2000, 4), 'if_condition_39043', if_condition_39043)
    # SSA begins for if statement (line 2000)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_over(...): (line 2001)
    # Processing the call arguments (line 2001)
    
    # Obtaining the type of the subscript
    int_39046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2001, 29), 'int')
    # Getting the type of 'colors' (line 2001)
    colors_39047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 22), 'colors', False)
    # Obtaining the member '__getitem__' of a type (line 2001)
    getitem___39048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2001, 22), colors_39047, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2001)
    subscript_call_result_39049 = invoke(stypy.reporting.localization.Localization(__file__, 2001, 22), getitem___39048, int_39046)
    
    # Processing the call keyword arguments (line 2001)
    kwargs_39050 = {}
    # Getting the type of 'cmap' (line 2001)
    cmap_39044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 8), 'cmap', False)
    # Obtaining the member 'set_over' of a type (line 2001)
    set_over_39045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2001, 8), cmap_39044, 'set_over')
    # Calling set_over(args, kwargs) (line 2001)
    set_over_call_result_39051 = invoke(stypy.reporting.localization.Localization(__file__, 2001, 8), set_over_39045, *[subscript_call_result_39049], **kwargs_39050)
    
    # SSA branch for the else part of an if statement (line 2000)
    module_type_store.open_ssa_branch('else')
    
    # Call to set_over(...): (line 2003)
    # Processing the call arguments (line 2003)
    unicode_39054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2003, 22), 'unicode', u'none')
    # Processing the call keyword arguments (line 2003)
    kwargs_39055 = {}
    # Getting the type of 'cmap' (line 2003)
    cmap_39052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 8), 'cmap', False)
    # Obtaining the member 'set_over' of a type (line 2003)
    set_over_39053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2003, 8), cmap_39052, 'set_over')
    # Calling set_over(args, kwargs) (line 2003)
    set_over_call_result_39056 = invoke(stypy.reporting.localization.Localization(__file__, 2003, 8), set_over_39053, *[unicode_39054], **kwargs_39055)
    
    # SSA join for if statement (line 2000)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Attribute (line 2005):
    
    # Assigning a Name to a Attribute (line 2005):
    
    # Assigning a Name to a Attribute (line 2005):
    # Getting the type of 'extend' (line 2005)
    extend_39057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 27), 'extend')
    # Getting the type of 'cmap' (line 2005)
    cmap_39058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 4), 'cmap')
    # Setting the type of the member 'colorbar_extend' of a type (line 2005)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2005, 4), cmap_39058, 'colorbar_extend', extend_39057)
    
    # Assigning a Call to a Name (line 2007):
    
    # Assigning a Call to a Name (line 2007):
    
    # Assigning a Call to a Name (line 2007):
    
    # Call to BoundaryNorm(...): (line 2007)
    # Processing the call arguments (line 2007)
    # Getting the type of 'levels' (line 2007)
    levels_39060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 24), 'levels', False)
    # Processing the call keyword arguments (line 2007)
    # Getting the type of 'n_data_colors' (line 2007)
    n_data_colors_39061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 40), 'n_data_colors', False)
    keyword_39062 = n_data_colors_39061
    kwargs_39063 = {'ncolors': keyword_39062}
    # Getting the type of 'BoundaryNorm' (line 2007)
    BoundaryNorm_39059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 11), 'BoundaryNorm', False)
    # Calling BoundaryNorm(args, kwargs) (line 2007)
    BoundaryNorm_call_result_39064 = invoke(stypy.reporting.localization.Localization(__file__, 2007, 11), BoundaryNorm_39059, *[levels_39060], **kwargs_39063)
    
    # Assigning a type to the variable 'norm' (line 2007)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2007, 4), 'norm', BoundaryNorm_call_result_39064)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2008)
    tuple_39065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2008, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2008)
    # Adding element type (line 2008)
    # Getting the type of 'cmap' (line 2008)
    cmap_39066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 11), 'cmap')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2008, 11), tuple_39065, cmap_39066)
    # Adding element type (line 2008)
    # Getting the type of 'norm' (line 2008)
    norm_39067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 17), 'norm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2008, 11), tuple_39065, norm_39067)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2008)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2008, 4), 'stypy_return_type', tuple_39065)
    
    # ################# End of 'from_levels_and_colors(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'from_levels_and_colors' in the type store
    # Getting the type of 'stypy_return_type' (line 1943)
    stypy_return_type_39068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_39068)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'from_levels_and_colors'
    return stypy_return_type_39068

# Assigning a type to the variable 'from_levels_and_colors' (line 1943)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1943, 0), 'from_levels_and_colors', from_levels_and_colors)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
