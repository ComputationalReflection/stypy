
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: from __future__ import (absolute_import, division, print_function,
2:                         unicode_literals)
3: 
4: import six
5: 
6: import math
7: import os
8: import sys
9: import errno
10: import re
11: import shutil
12: import tempfile
13: import codecs
14: import atexit
15: import weakref
16: import warnings
17: 
18: import numpy as np
19: 
20: import matplotlib as mpl
21: from matplotlib.backend_bases import (
22:     _Backend, FigureCanvasBase, FigureManagerBase, GraphicsContextBase,
23:     RendererBase)
24: from matplotlib.backends.backend_mixed import MixedModeRenderer
25: from matplotlib.figure import Figure
26: from matplotlib.text import Text
27: from matplotlib.path import Path
28: from matplotlib import _png, rcParams
29: from matplotlib.cbook import is_writable_file_like
30: from matplotlib.compat import subprocess
31: from matplotlib.compat.subprocess import check_output
32: 
33: 
34: ###############################################################################
35: 
36: # create a list of system fonts, all of these should work with xe/lua-latex
37: system_fonts = []
38: if sys.platform.startswith('win'):
39:     from matplotlib import font_manager
40:     for f in font_manager.win32InstalledFonts():
41:         try:
42:             system_fonts.append(font_manager.get_font(str(f)).family_name)
43:         except:
44:             pass # unknown error, skip this font
45: else:
46:     # assuming fontconfig is installed and the command 'fc-list' exists
47:     try:
48:         # list scalable (non-bitmap) fonts
49:         fc_list = check_output([str('fc-list'), ':outline,scalable', 'family'])
50:         fc_list = fc_list.decode('utf8')
51:         system_fonts = [f.split(',')[0] for f in fc_list.splitlines()]
52:         system_fonts = list(set(system_fonts))
53:     except:
54:         warnings.warn('error getting fonts from fc-list', UserWarning)
55: 
56: def get_texcommand():
57:     '''Get chosen TeX system from rc.'''
58:     texsystem_options = ["xelatex", "lualatex", "pdflatex"]
59:     texsystem = rcParams["pgf.texsystem"]
60:     return texsystem if texsystem in texsystem_options else "xelatex"
61: 
62: 
63: def get_fontspec():
64:     '''Build fontspec preamble from rc.'''
65:     latex_fontspec = []
66:     texcommand = get_texcommand()
67: 
68:     if texcommand != "pdflatex":
69:         latex_fontspec.append("\\usepackage{fontspec}")
70: 
71:     if texcommand != "pdflatex" and rcParams["pgf.rcfonts"]:
72:         # try to find fonts from rc parameters
73:         families = ["serif", "sans-serif", "monospace"]
74:         fontspecs = [r"\setmainfont{%s}", r"\setsansfont{%s}",
75:                      r"\setmonofont{%s}"]
76:         for family, fontspec in zip(families, fontspecs):
77:             matches = [f for f in rcParams["font." + family]
78:                        if f in system_fonts]
79:             if matches:
80:                 latex_fontspec.append(fontspec % matches[0])
81:             else:
82:                 pass  # no fonts found, fallback to LaTeX defaule
83: 
84:     return "\n".join(latex_fontspec)
85: 
86: 
87: def get_preamble():
88:     '''Get LaTeX preamble from rc.'''
89:     return "\n".join(rcParams["pgf.preamble"])
90: 
91: ###############################################################################
92: 
93: # This almost made me cry!!!
94: # In the end, it's better to use only one unit for all coordinates, since the
95: # arithmetic in latex seems to produce inaccurate conversions.
96: latex_pt_to_in = 1. / 72.27
97: latex_in_to_pt = 1. / latex_pt_to_in
98: mpl_pt_to_in = 1. / 72.
99: mpl_in_to_pt = 1. / mpl_pt_to_in
100: 
101: ###############################################################################
102: # helper functions
103: 
104: NO_ESCAPE = r"(?<!\\)(?:\\\\)*"
105: re_mathsep = re.compile(NO_ESCAPE + r"\$")
106: re_escapetext = re.compile(NO_ESCAPE + "([_^$%])")
107: repl_escapetext = lambda m: "\\" + m.group(1)
108: re_mathdefault = re.compile(NO_ESCAPE + r"(\\mathdefault)")
109: repl_mathdefault = lambda m: m.group(0)[:-len(m.group(1))]
110: 
111: 
112: def common_texification(text):
113:     '''
114:     Do some necessary and/or useful substitutions for texts to be included in
115:     LaTeX documents.
116:     '''
117: 
118:     # Sometimes, matplotlib adds the unknown command \mathdefault.
119:     # Not using \mathnormal instead since this looks odd for the latex cm font.
120:     text = re_mathdefault.sub(repl_mathdefault, text)
121: 
122:     # split text into normaltext and inline math parts
123:     parts = re_mathsep.split(text)
124:     for i, s in enumerate(parts):
125:         if not i % 2:
126:             # textmode replacements
127:             s = re_escapetext.sub(repl_escapetext, s)
128:         else:
129:             # mathmode replacements
130:             s = r"\(\displaystyle %s\)" % s
131:         parts[i] = s
132: 
133:     return "".join(parts)
134: 
135: 
136: def writeln(fh, line):
137:     # every line of a file included with \\input must be terminated with %
138:     # if not, latex will create additional vertical spaces for some reason
139:     fh.write(line)
140:     fh.write("%\n")
141: 
142: 
143: def _font_properties_str(prop):
144:     # translate font properties to latex commands, return as string
145:     commands = []
146: 
147:     families = {"serif": r"\rmfamily", "sans": r"\sffamily",
148:                 "sans-serif": r"\sffamily", "monospace": r"\ttfamily"}
149:     family = prop.get_family()[0]
150:     if family in families:
151:         commands.append(families[family])
152:     elif family in system_fonts and get_texcommand() != "pdflatex":
153:         commands.append(r"\setmainfont{%s}\rmfamily" % family)
154:     else:
155:         pass  # print warning?
156: 
157:     size = prop.get_size_in_points()
158:     commands.append(r"\fontsize{%f}{%f}" % (size, size * 1.2))
159: 
160:     styles = {"normal": r"", "italic": r"\itshape", "oblique": r"\slshape"}
161:     commands.append(styles[prop.get_style()])
162: 
163:     boldstyles = ["semibold", "demibold", "demi", "bold", "heavy",
164:                   "extra bold", "black"]
165:     if prop.get_weight() in boldstyles:
166:         commands.append(r"\bfseries")
167: 
168:     commands.append(r"\selectfont")
169:     return "".join(commands)
170: 
171: 
172: def make_pdf_to_png_converter():
173:     '''
174:     Returns a function that converts a pdf file to a png file.
175:     '''
176: 
177:     tools_available = []
178:     # check for pdftocairo
179:     try:
180:         check_output([str("pdftocairo"), "-v"], stderr=subprocess.STDOUT)
181:         tools_available.append("pdftocairo")
182:     except:
183:         pass
184:     # check for ghostscript
185:     gs, ver = mpl.checkdep_ghostscript()
186:     if gs:
187:         tools_available.append("gs")
188: 
189:     # pick converter
190:     if "pdftocairo" in tools_available:
191:         def cairo_convert(pdffile, pngfile, dpi):
192:             cmd = [str("pdftocairo"), "-singlefile", "-png", "-r", "%d" % dpi,
193:                    pdffile, os.path.splitext(pngfile)[0]]
194:             check_output(cmd, stderr=subprocess.STDOUT)
195:         return cairo_convert
196:     elif "gs" in tools_available:
197:         def gs_convert(pdffile, pngfile, dpi):
198:             cmd = [str(gs), '-dQUIET', '-dSAFER', '-dBATCH', '-dNOPAUSE', '-dNOPROMPT',
199:                    '-sDEVICE=png16m', '-dUseCIEColor', '-dTextAlphaBits=4',
200:                    '-dGraphicsAlphaBits=4', '-dDOINTERPOLATE', '-sOutputFile=%s' % pngfile,
201:                    '-r%d' % dpi, pdffile]
202:             check_output(cmd, stderr=subprocess.STDOUT)
203:         return gs_convert
204:     else:
205:         raise RuntimeError("No suitable pdf to png renderer found.")
206: 
207: 
208: class LatexError(Exception):
209:     def __init__(self, message, latex_output=""):
210:         Exception.__init__(self, message)
211:         self.latex_output = latex_output
212: 
213: 
214: class LatexManagerFactory(object):
215:     previous_instance = None
216: 
217:     @staticmethod
218:     def get_latex_manager():
219:         texcommand = get_texcommand()
220:         latex_header = LatexManager._build_latex_header()
221:         prev = LatexManagerFactory.previous_instance
222: 
223:         # Check if the previous instance of LatexManager can be reused.
224:         if (prev and prev.latex_header == latex_header
225:                 and prev.texcommand == texcommand):
226:             if rcParams["pgf.debug"]:
227:                 print("reusing LatexManager")
228:             return prev
229:         else:
230:             if rcParams["pgf.debug"]:
231:                 print("creating LatexManager")
232:             new_inst = LatexManager()
233:             LatexManagerFactory.previous_instance = new_inst
234:             return new_inst
235: 
236: 
237: class LatexManager(object):
238:     '''
239:     The LatexManager opens an instance of the LaTeX application for
240:     determining the metrics of text elements. The LaTeX environment can be
241:     modified by setting fonts and/or a custem preamble in the rc parameters.
242:     '''
243:     _unclean_instances = weakref.WeakSet()
244: 
245:     @staticmethod
246:     def _build_latex_header():
247:         latex_preamble = get_preamble()
248:         latex_fontspec = get_fontspec()
249:         # Create LaTeX header with some content, else LaTeX will load some
250:         # math fonts later when we don't expect the additional output on stdout.
251:         # TODO: is this sufficient?
252:         latex_header = [r"\documentclass{minimal}",
253:                         latex_preamble,
254:                         latex_fontspec,
255:                         r"\begin{document}",
256:                         r"text $math \mu$",  # force latex to load fonts now
257:                         r"\typeout{pgf_backend_query_start}"]
258:         return "\n".join(latex_header)
259: 
260:     @staticmethod
261:     def _cleanup_remaining_instances():
262:         unclean_instances = list(LatexManager._unclean_instances)
263:         for latex_manager in unclean_instances:
264:             latex_manager._cleanup()
265: 
266:     def _stdin_writeln(self, s):
267:         self.latex_stdin_utf8.write(s)
268:         self.latex_stdin_utf8.write("\n")
269:         self.latex_stdin_utf8.flush()
270: 
271:     def _expect(self, s):
272:         exp = s.encode("utf8")
273:         buf = bytearray()
274:         while True:
275:             b = self.latex.stdout.read(1)
276:             buf += b
277:             if buf[-len(exp):] == exp:
278:                 break
279:             if not len(b):
280:                 raise LatexError("LaTeX process halted", buf.decode("utf8"))
281:         return buf.decode("utf8")
282: 
283:     def _expect_prompt(self):
284:         return self._expect("\n*")
285: 
286:     def __init__(self):
287:         # store references for __del__
288:         self._os_path = os.path
289:         self._shutil = shutil
290:         self._debug = rcParams["pgf.debug"]
291: 
292:         # create a tmp directory for running latex, remember to cleanup
293:         self.tmpdir = tempfile.mkdtemp(prefix="mpl_pgf_lm_")
294:         LatexManager._unclean_instances.add(self)
295: 
296:         # test the LaTeX setup to ensure a clean startup of the subprocess
297:         self.texcommand = get_texcommand()
298:         self.latex_header = LatexManager._build_latex_header()
299:         latex_end = "\n\\makeatletter\n\\@@end\n"
300:         try:
301:             latex = subprocess.Popen([str(self.texcommand), "-halt-on-error"],
302:                                      stdin=subprocess.PIPE,
303:                                      stdout=subprocess.PIPE,
304:                                      cwd=self.tmpdir)
305:         except OSError as e:
306:             if e.errno == errno.ENOENT:
307:                 raise RuntimeError("Latex command not found. "
308:                     "Install '%s' or change pgf.texsystem to the desired command."
309:                     % self.texcommand
310:                 )
311:             else:
312:                 raise RuntimeError("Error starting process '%s'" % self.texcommand)
313:         test_input = self.latex_header + latex_end
314:         stdout, stderr = latex.communicate(test_input.encode("utf-8"))
315:         if latex.returncode != 0:
316:             raise LatexError("LaTeX returned an error, probably missing font or error in preamble:\n%s" % stdout)
317: 
318:         # open LaTeX process for real work
319:         latex = subprocess.Popen([str(self.texcommand), "-halt-on-error"],
320:                                  stdin=subprocess.PIPE, stdout=subprocess.PIPE,
321:                                  cwd=self.tmpdir)
322:         self.latex = latex
323:         self.latex_stdin_utf8 = codecs.getwriter("utf8")(self.latex.stdin)
324:         # write header with 'pgf_backend_query_start' token
325:         self._stdin_writeln(self._build_latex_header())
326:         # read all lines until our 'pgf_backend_query_start' token appears
327:         self._expect("*pgf_backend_query_start")
328:         self._expect_prompt()
329: 
330:         # cache for strings already processed
331:         self.str_cache = {}
332: 
333:     def _cleanup(self):
334:         if not self._os_path.isdir(self.tmpdir):
335:             return
336:         try:
337:             self.latex.communicate()
338:             self.latex_stdin_utf8.close()
339:             self.latex.stdout.close()
340:         except:
341:             pass
342:         try:
343:             self._shutil.rmtree(self.tmpdir)
344:             LatexManager._unclean_instances.discard(self)
345:         except:
346:             sys.stderr.write("error deleting tmp directory %s\n" % self.tmpdir)
347: 
348:     def __del__(self):
349:         if self._debug:
350:             print("deleting LatexManager")
351:         self._cleanup()
352: 
353:     def get_width_height_descent(self, text, prop):
354:         '''
355:         Get the width, total height and descent for a text typesetted by the
356:         current LaTeX environment.
357:         '''
358: 
359:         # apply font properties and define textbox
360:         prop_cmds = _font_properties_str(prop)
361:         textbox = "\\sbox0{%s %s}" % (prop_cmds, text)
362: 
363:         # check cache
364:         if textbox in self.str_cache:
365:             return self.str_cache[textbox]
366: 
367:         # send textbox to LaTeX and wait for prompt
368:         self._stdin_writeln(textbox)
369:         try:
370:             self._expect_prompt()
371:         except LatexError as e:
372:             msg = "Error processing '%s'\nLaTeX Output:\n%s"
373:             raise ValueError(msg % (text, e.latex_output))
374: 
375:         # typeout width, height and text offset of the last textbox
376:         self._stdin_writeln(r"\typeout{\the\wd0,\the\ht0,\the\dp0}")
377:         # read answer from latex and advance to the next prompt
378:         try:
379:             answer = self._expect_prompt()
380:         except LatexError as e:
381:             msg = "Error processing '%s'\nLaTeX Output:\n%s"
382:             raise ValueError(msg % (text, e.latex_output))
383: 
384:         # parse metrics from the answer string
385:         try:
386:             width, height, offset = answer.splitlines()[0].split(",")
387:         except:
388:             msg = "Error processing '%s'\nLaTeX Output:\n%s" % (text, answer)
389:             raise ValueError(msg)
390:         w, h, o = float(width[:-2]), float(height[:-2]), float(offset[:-2])
391: 
392:         # the height returned from LaTeX goes from base to top.
393:         # the height matplotlib expects goes from bottom to top.
394:         self.str_cache[textbox] = (w, h + o, o)
395:         return w, h + o, o
396: 
397: 
398: class RendererPgf(RendererBase):
399: 
400:     def __init__(self, figure, fh, dummy=False):
401:         '''
402:         Creates a new PGF renderer that translates any drawing instruction
403:         into text commands to be interpreted in a latex pgfpicture environment.
404: 
405:         Attributes
406:         ----------
407:         figure : `matplotlib.figure.Figure`
408:             Matplotlib figure to initialize height, width and dpi from.
409:         fh : file-like
410:             File handle for the output of the drawing commands.
411: 
412:         '''
413:         RendererBase.__init__(self)
414:         self.dpi = figure.dpi
415:         self.fh = fh
416:         self.figure = figure
417:         self.image_counter = 0
418: 
419:         # get LatexManager instance
420:         self.latexManager = LatexManagerFactory.get_latex_manager()
421: 
422:         if dummy:
423:             # dummy==True deactivate all methods
424:             nop = lambda *args, **kwargs: None
425:             for m in RendererPgf.__dict__:
426:                 if m.startswith("draw_"):
427:                     self.__dict__[m] = nop
428:         else:
429:             # if fh does not belong to a filename, deactivate draw_image
430:             if not hasattr(fh, 'name') or not os.path.exists(fh.name):
431:                 warnings.warn("streamed pgf-code does not support raster "
432:                               "graphics, consider using the pgf-to-pdf option",
433:                               UserWarning)
434:                 self.__dict__["draw_image"] = lambda *args, **kwargs: None
435: 
436:     def draw_markers(self, gc, marker_path, marker_trans, path, trans, rgbFace=None):
437:         writeln(self.fh, r"\begin{pgfscope}")
438: 
439:         # convert from display units to in
440:         f = 1. / self.dpi
441: 
442:         # set style and clip
443:         self._print_pgf_clip(gc)
444:         self._print_pgf_path_styles(gc, rgbFace)
445: 
446:         # build marker definition
447:         bl, tr = marker_path.get_extents(marker_trans).get_points()
448:         coords = bl[0] * f, bl[1] * f, tr[0] * f, tr[1] * f
449:         writeln(self.fh, r"\pgfsys@defobject{currentmarker}{\pgfqpoint{%fin}{%fin}}{\pgfqpoint{%fin}{%fin}}{" % coords)
450:         self._print_pgf_path(None, marker_path, marker_trans)
451:         self._pgf_path_draw(stroke=gc.get_linewidth() != 0.0,
452:                             fill=rgbFace is not None)
453:         writeln(self.fh, r"}")
454: 
455:         # draw marker for each vertex
456:         for point, code in path.iter_segments(trans, simplify=False):
457:             x, y = point[0] * f, point[1] * f
458:             writeln(self.fh, r"\begin{pgfscope}")
459:             writeln(self.fh, r"\pgfsys@transformshift{%fin}{%fin}" % (x, y))
460:             writeln(self.fh, r"\pgfsys@useobject{currentmarker}{}")
461:             writeln(self.fh, r"\end{pgfscope}")
462: 
463:         writeln(self.fh, r"\end{pgfscope}")
464: 
465:     def draw_path(self, gc, path, transform, rgbFace=None):
466:         writeln(self.fh, r"\begin{pgfscope}")
467:         # draw the path
468:         self._print_pgf_clip(gc)
469:         self._print_pgf_path_styles(gc, rgbFace)
470:         self._print_pgf_path(gc, path, transform, rgbFace)
471:         self._pgf_path_draw(stroke=gc.get_linewidth() != 0.0,
472:                             fill=rgbFace is not None)
473:         writeln(self.fh, r"\end{pgfscope}")
474: 
475:         # if present, draw pattern on top
476:         if gc.get_hatch():
477:             writeln(self.fh, r"\begin{pgfscope}")
478:             self._print_pgf_path_styles(gc, rgbFace)
479: 
480:             # combine clip and path for clipping
481:             self._print_pgf_clip(gc)
482:             self._print_pgf_path(gc, path, transform, rgbFace)
483:             writeln(self.fh, r"\pgfusepath{clip}")
484: 
485:             # build pattern definition
486:             writeln(self.fh, r"\pgfsys@defobject{currentpattern}{\pgfqpoint{0in}{0in}}{\pgfqpoint{1in}{1in}}{")
487:             writeln(self.fh, r"\begin{pgfscope}")
488:             writeln(self.fh, r"\pgfpathrectangle{\pgfqpoint{0in}{0in}}{\pgfqpoint{1in}{1in}}")
489:             writeln(self.fh, r"\pgfusepath{clip}")
490:             scale = mpl.transforms.Affine2D().scale(self.dpi)
491:             self._print_pgf_path(None, gc.get_hatch_path(), scale)
492:             self._pgf_path_draw(stroke=True)
493:             writeln(self.fh, r"\end{pgfscope}")
494:             writeln(self.fh, r"}")
495:             # repeat pattern, filling the bounding rect of the path
496:             f = 1. / self.dpi
497:             (xmin, ymin), (xmax, ymax) = path.get_extents(transform).get_points()
498:             xmin, xmax = f * xmin, f * xmax
499:             ymin, ymax = f * ymin, f * ymax
500:             repx, repy = int(math.ceil(xmax-xmin)), int(math.ceil(ymax-ymin))
501:             writeln(self.fh, r"\pgfsys@transformshift{%fin}{%fin}" % (xmin, ymin))
502:             for iy in range(repy):
503:                 for ix in range(repx):
504:                     writeln(self.fh, r"\pgfsys@useobject{currentpattern}{}")
505:                     writeln(self.fh, r"\pgfsys@transformshift{1in}{0in}")
506:                 writeln(self.fh, r"\pgfsys@transformshift{-%din}{0in}" % repx)
507:                 writeln(self.fh, r"\pgfsys@transformshift{0in}{1in}")
508: 
509:             writeln(self.fh, r"\end{pgfscope}")
510: 
511:     def _print_pgf_clip(self, gc):
512:         f = 1. / self.dpi
513:         # check for clip box
514:         bbox = gc.get_clip_rectangle()
515:         if bbox:
516:             p1, p2 = bbox.get_points()
517:             w, h = p2 - p1
518:             coords = p1[0] * f, p1[1] * f, w * f, h * f
519:             writeln(self.fh, r"\pgfpathrectangle{\pgfqpoint{%fin}{%fin}}{\pgfqpoint{%fin}{%fin}} " % coords)
520:             writeln(self.fh, r"\pgfusepath{clip}")
521: 
522:         # check for clip path
523:         clippath, clippath_trans = gc.get_clip_path()
524:         if clippath is not None:
525:             self._print_pgf_path(gc, clippath, clippath_trans)
526:             writeln(self.fh, r"\pgfusepath{clip}")
527: 
528:     def _print_pgf_path_styles(self, gc, rgbFace):
529:         # cap style
530:         capstyles = {"butt": r"\pgfsetbuttcap",
531:                      "round": r"\pgfsetroundcap",
532:                      "projecting": r"\pgfsetrectcap"}
533:         writeln(self.fh, capstyles[gc.get_capstyle()])
534: 
535:         # join style
536:         joinstyles = {"miter": r"\pgfsetmiterjoin",
537:                       "round": r"\pgfsetroundjoin",
538:                       "bevel": r"\pgfsetbeveljoin"}
539:         writeln(self.fh, joinstyles[gc.get_joinstyle()])
540: 
541:         # filling
542:         has_fill = rgbFace is not None
543: 
544:         if gc.get_forced_alpha():
545:             fillopacity = strokeopacity = gc.get_alpha()
546:         else:
547:             strokeopacity = gc.get_rgb()[3]
548:             fillopacity = rgbFace[3] if has_fill and len(rgbFace) > 3 else 1.0
549: 
550:         if has_fill:
551:             writeln(self.fh, r"\definecolor{currentfill}{rgb}{%f,%f,%f}" % tuple(rgbFace[:3]))
552:             writeln(self.fh, r"\pgfsetfillcolor{currentfill}")
553:         if has_fill and fillopacity != 1.0:
554:             writeln(self.fh, r"\pgfsetfillopacity{%f}" % fillopacity)
555: 
556:         # linewidth and color
557:         lw = gc.get_linewidth() * mpl_pt_to_in * latex_in_to_pt
558:         stroke_rgba = gc.get_rgb()
559:         writeln(self.fh, r"\pgfsetlinewidth{%fpt}" % lw)
560:         writeln(self.fh, r"\definecolor{currentstroke}{rgb}{%f,%f,%f}" % stroke_rgba[:3])
561:         writeln(self.fh, r"\pgfsetstrokecolor{currentstroke}")
562:         if strokeopacity != 1.0:
563:             writeln(self.fh, r"\pgfsetstrokeopacity{%f}" % strokeopacity)
564: 
565:         # line style
566:         dash_offset, dash_list = gc.get_dashes()
567:         if dash_list is None:
568:             writeln(self.fh, r"\pgfsetdash{}{0pt}")
569:         else:
570:             dash_str = r"\pgfsetdash{"
571:             for dash in dash_list:
572:                 dash_str += r"{%fpt}" % dash
573:             dash_str += r"}{%fpt}" % dash_offset
574:             writeln(self.fh, dash_str)
575: 
576:     def _print_pgf_path(self, gc, path, transform, rgbFace=None):
577:         f = 1. / self.dpi
578:         # check for clip box / ignore clip for filled paths
579:         bbox = gc.get_clip_rectangle() if gc else None
580:         if bbox and (rgbFace is None):
581:             p1, p2 = bbox.get_points()
582:             clip = (p1[0], p1[1], p2[0], p2[1])
583:         else:
584:             clip = None
585:         # build path
586:         for points, code in path.iter_segments(transform, clip=clip):
587:             if code == Path.MOVETO:
588:                 x, y = tuple(points)
589:                 writeln(self.fh, r"\pgfpathmoveto{\pgfqpoint{%fin}{%fin}}" %
590:                         (f * x, f * y))
591:             elif code == Path.CLOSEPOLY:
592:                 writeln(self.fh, r"\pgfpathclose")
593:             elif code == Path.LINETO:
594:                 x, y = tuple(points)
595:                 writeln(self.fh, r"\pgfpathlineto{\pgfqpoint{%fin}{%fin}}" %
596:                         (f * x, f * y))
597:             elif code == Path.CURVE3:
598:                 cx, cy, px, py = tuple(points)
599:                 coords = cx * f, cy * f, px * f, py * f
600:                 writeln(self.fh, r"\pgfpathquadraticcurveto{\pgfqpoint{%fin}{%fin}}{\pgfqpoint{%fin}{%fin}}" % coords)
601:             elif code == Path.CURVE4:
602:                 c1x, c1y, c2x, c2y, px, py = tuple(points)
603:                 coords = c1x * f, c1y * f, c2x * f, c2y * f, px * f, py * f
604:                 writeln(self.fh, r"\pgfpathcurveto{\pgfqpoint{%fin}{%fin}}{\pgfqpoint{%fin}{%fin}}{\pgfqpoint{%fin}{%fin}}" % coords)
605: 
606:     def _pgf_path_draw(self, stroke=True, fill=False):
607:         actions = []
608:         if stroke:
609:             actions.append("stroke")
610:         if fill:
611:             actions.append("fill")
612:         writeln(self.fh, r"\pgfusepath{%s}" % ",".join(actions))
613: 
614:     def option_scale_image(self):
615:         '''
616:         pgf backend supports affine transform of image.
617:         '''
618:         return True
619: 
620:     def option_image_nocomposite(self):
621:         '''
622:         return whether to generate a composite image from multiple images on
623:         a set of axes
624:         '''
625:         return not rcParams['image.composite_image']
626: 
627:     def draw_image(self, gc, x, y, im, transform=None):
628:         h, w = im.shape[:2]
629:         if w == 0 or h == 0:
630:             return
631: 
632:         # save the images to png files
633:         path = os.path.dirname(self.fh.name)
634:         fname = os.path.splitext(os.path.basename(self.fh.name))[0]
635:         fname_img = "%s-img%d.png" % (fname, self.image_counter)
636:         self.image_counter += 1
637:         _png.write_png(im[::-1], os.path.join(path, fname_img))
638: 
639:         # reference the image in the pgf picture
640:         writeln(self.fh, r"\begin{pgfscope}")
641:         self._print_pgf_clip(gc)
642:         f = 1. / self.dpi  # from display coords to inch
643:         if transform is None:
644:             writeln(self.fh,
645:                     r"\pgfsys@transformshift{%fin}{%fin}" % (x * f, y * f))
646:             w, h = w * f, h * f
647:         else:
648:             tr1, tr2, tr3, tr4, tr5, tr6 = transform.frozen().to_values()
649:             writeln(self.fh,
650:                     r"\pgfsys@transformcm{%f}{%f}{%f}{%f}{%fin}{%fin}" %
651:                     (tr1 * f, tr2 * f, tr3 * f, tr4 * f,
652:                      (tr5 + x) * f, (tr6 + y) * f))
653:             w = h = 1  # scale is already included in the transform
654:         interp = str(transform is None).lower()  # interpolation in PDF reader
655:         writeln(self.fh,
656:                 r"\pgftext[left,bottom]"
657:                 r"{\pgfimage[interpolate=%s,width=%fin,height=%fin]{%s}}" %
658:                 (interp, w, h, fname_img))
659:         writeln(self.fh, r"\end{pgfscope}")
660: 
661:     def draw_tex(self, gc, x, y, s, prop, angle, ismath="TeX!", mtext=None):
662:         self.draw_text(gc, x, y, s, prop, angle, ismath, mtext)
663: 
664:     def draw_text(self, gc, x, y, s, prop, angle, ismath=False, mtext=None):
665:         # prepare string for tex
666:         s = common_texification(s)
667:         prop_cmds = _font_properties_str(prop)
668:         s = r"%s %s" % (prop_cmds, s)
669: 
670: 
671:         writeln(self.fh, r"\begin{pgfscope}")
672: 
673:         alpha = gc.get_alpha()
674:         if alpha != 1.0:
675:             writeln(self.fh, r"\pgfsetfillopacity{%f}" % alpha)
676:             writeln(self.fh, r"\pgfsetstrokeopacity{%f}" % alpha)
677:         rgb = tuple(gc.get_rgb())[:3]
678:         if rgb != (0, 0, 0):
679:             writeln(self.fh, r"\definecolor{textcolor}{rgb}{%f,%f,%f}" % rgb)
680:             writeln(self.fh, r"\pgfsetstrokecolor{textcolor}")
681:             writeln(self.fh, r"\pgfsetfillcolor{textcolor}")
682:             s = r"\color{textcolor}" + s
683: 
684:         f = 1.0 / self.figure.dpi
685:         text_args = []
686:         if mtext and (
687:                 (angle == 0 or
688:                  mtext.get_rotation_mode() == "anchor") and
689:                 mtext.get_va() != "center_baseline"):
690:             # if text anchoring can be supported, get the original coordinates
691:             # and add alignment information
692:             x, y = mtext.get_transform().transform_point(mtext.get_position())
693:             text_args.append("x=%fin" % (x * f))
694:             text_args.append("y=%fin" % (y * f))
695: 
696:             halign = {"left": "left", "right": "right", "center": ""}
697:             valign = {"top": "top", "bottom": "bottom",
698:                       "baseline": "base", "center": ""}
699:             text_args.append(halign[mtext.get_ha()])
700:             text_args.append(valign[mtext.get_va()])
701:         else:
702:             # if not, use the text layout provided by matplotlib
703:             text_args.append("x=%fin" % (x * f))
704:             text_args.append("y=%fin" % (y * f))
705:             text_args.append("left")
706:             text_args.append("base")
707: 
708:         if angle != 0:
709:             text_args.append("rotate=%f" % angle)
710: 
711:         writeln(self.fh, r"\pgftext[%s]{%s}" % (",".join(text_args), s))
712:         writeln(self.fh, r"\end{pgfscope}")
713: 
714:     def get_text_width_height_descent(self, s, prop, ismath):
715:         # check if the math is supposed to be displaystyled
716:         s = common_texification(s)
717: 
718:         # get text metrics in units of latex pt, convert to display units
719:         w, h, d = self.latexManager.get_width_height_descent(s, prop)
720:         # TODO: this should be latex_pt_to_in instead of mpl_pt_to_in
721:         # but having a little bit more space around the text looks better,
722:         # plus the bounding box reported by LaTeX is VERY narrow
723:         f = mpl_pt_to_in * self.dpi
724:         return w * f, h * f, d * f
725: 
726:     def flipy(self):
727:         return False
728: 
729:     def get_canvas_width_height(self):
730:         return self.figure.get_figwidth(), self.figure.get_figheight()
731: 
732:     def points_to_pixels(self, points):
733:         return points * mpl_pt_to_in * self.dpi
734: 
735:     def new_gc(self):
736:         return GraphicsContextPgf()
737: 
738: 
739: class GraphicsContextPgf(GraphicsContextBase):
740:     pass
741: 
742: ########################################################################
743: 
744: 
745: class TmpDirCleaner(object):
746:     remaining_tmpdirs = set()
747: 
748:     @staticmethod
749:     def add(tmpdir):
750:         TmpDirCleaner.remaining_tmpdirs.add(tmpdir)
751: 
752:     @staticmethod
753:     def cleanup_remaining_tmpdirs():
754:         for tmpdir in TmpDirCleaner.remaining_tmpdirs:
755:             try:
756:                 shutil.rmtree(tmpdir)
757:             except:
758:                 sys.stderr.write("error deleting tmp directory %s\n" % tmpdir)
759: 
760: 
761: class FigureCanvasPgf(FigureCanvasBase):
762:     filetypes = {"pgf": "LaTeX PGF picture",
763:                  "pdf": "LaTeX compiled PGF picture",
764:                  "png": "Portable Network Graphics", }
765: 
766:     def get_default_filetype(self):
767:         return 'pdf'
768: 
769:     def _print_pgf_to_fh(self, fh, *args, **kwargs):
770:         if kwargs.get("dryrun", False):
771:             renderer = RendererPgf(self.figure, None, dummy=True)
772:             self.figure.draw(renderer)
773:             return
774: 
775:         header_text = '''%% Creator: Matplotlib, PGF backend
776: %%
777: %% To include the figure in your LaTeX document, write
778: %%   \\input{<filename>.pgf}
779: %%
780: %% Make sure the required packages are loaded in your preamble
781: %%   \\usepackage{pgf}
782: %%
783: %% Figures using additional raster images can only be included by \\input if
784: %% they are in the same directory as the main LaTeX file. For loading figures
785: %% from other directories you can use the `import` package
786: %%   \\usepackage{import}
787: %% and then include the figures with
788: %%   \\import{<path to file>}{<filename>.pgf}
789: %%
790: '''
791: 
792:         # append the preamble used by the backend as a comment for debugging
793:         header_info_preamble = ["%% Matplotlib used the following preamble"]
794:         for line in get_preamble().splitlines():
795:             header_info_preamble.append("%%   " + line)
796:         for line in get_fontspec().splitlines():
797:             header_info_preamble.append("%%   " + line)
798:         header_info_preamble.append("%%")
799:         header_info_preamble = "\n".join(header_info_preamble)
800: 
801:         # get figure size in inch
802:         w, h = self.figure.get_figwidth(), self.figure.get_figheight()
803:         dpi = self.figure.get_dpi()
804: 
805:         # create pgfpicture environment and write the pgf code
806:         fh.write(header_text)
807:         fh.write(header_info_preamble)
808:         fh.write("\n")
809:         writeln(fh, r"\begingroup")
810:         writeln(fh, r"\makeatletter")
811:         writeln(fh, r"\begin{pgfpicture}")
812:         writeln(fh, r"\pgfpathrectangle{\pgfpointorigin}{\pgfqpoint{%fin}{%fin}}" % (w, h))
813:         writeln(fh, r"\pgfusepath{use as bounding box, clip}")
814:         _bbox_inches_restore = kwargs.pop("bbox_inches_restore", None)
815:         renderer = MixedModeRenderer(self.figure, w, h, dpi,
816:                                      RendererPgf(self.figure, fh),
817:                                      bbox_inches_restore=_bbox_inches_restore)
818:         self.figure.draw(renderer)
819: 
820:         # end the pgfpicture environment
821:         writeln(fh, r"\end{pgfpicture}")
822:         writeln(fh, r"\makeatother")
823:         writeln(fh, r"\endgroup")
824: 
825:     def print_pgf(self, fname_or_fh, *args, **kwargs):
826:         '''
827:         Output pgf commands for drawing the figure so it can be included and
828:         rendered in latex documents.
829:         '''
830:         if kwargs.get("dryrun", False):
831:             self._print_pgf_to_fh(None, *args, **kwargs)
832:             return
833: 
834:         # figure out where the pgf is to be written to
835:         if isinstance(fname_or_fh, six.string_types):
836:             with codecs.open(fname_or_fh, "w", encoding="utf-8") as fh:
837:                 self._print_pgf_to_fh(fh, *args, **kwargs)
838:         elif is_writable_file_like(fname_or_fh):
839:             fh = codecs.getwriter("utf-8")(fname_or_fh)
840:             self._print_pgf_to_fh(fh, *args, **kwargs)
841:         else:
842:             raise ValueError("filename must be a path")
843: 
844:     def _print_pdf_to_fh(self, fh, *args, **kwargs):
845:         w, h = self.figure.get_figwidth(), self.figure.get_figheight()
846: 
847:         try:
848:             # create temporary directory for compiling the figure
849:             tmpdir = tempfile.mkdtemp(prefix="mpl_pgf_")
850:             fname_pgf = os.path.join(tmpdir, "figure.pgf")
851:             fname_tex = os.path.join(tmpdir, "figure.tex")
852:             fname_pdf = os.path.join(tmpdir, "figure.pdf")
853: 
854:             # print figure to pgf and compile it with latex
855:             self.print_pgf(fname_pgf, *args, **kwargs)
856: 
857:             latex_preamble = get_preamble()
858:             latex_fontspec = get_fontspec()
859:             latexcode = '''
860: \\documentclass[12pt]{minimal}
861: \\usepackage[paperwidth=%fin, paperheight=%fin, margin=0in]{geometry}
862: %s
863: %s
864: \\usepackage{pgf}
865: 
866: \\begin{document}
867: \\centering
868: \\input{figure.pgf}
869: \\end{document}''' % (w, h, latex_preamble, latex_fontspec)
870:             with codecs.open(fname_tex, "w", "utf-8") as fh_tex:
871:                 fh_tex.write(latexcode)
872: 
873:             texcommand = get_texcommand()
874:             cmdargs = [str(texcommand), "-interaction=nonstopmode",
875:                        "-halt-on-error", "figure.tex"]
876:             try:
877:                 check_output(cmdargs, stderr=subprocess.STDOUT, cwd=tmpdir)
878:             except subprocess.CalledProcessError as e:
879:                 raise RuntimeError("%s was not able to process your file.\n\nFull log:\n%s" % (texcommand, e.output))
880: 
881:             # copy file contents to target
882:             with open(fname_pdf, "rb") as fh_src:
883:                 shutil.copyfileobj(fh_src, fh)
884:         finally:
885:             try:
886:                 shutil.rmtree(tmpdir)
887:             except:
888:                 TmpDirCleaner.add(tmpdir)
889: 
890:     def print_pdf(self, fname_or_fh, *args, **kwargs):
891:         '''
892:         Use LaTeX to compile a Pgf generated figure to PDF.
893:         '''
894:         if kwargs.get("dryrun", False):
895:             self._print_pgf_to_fh(None, *args, **kwargs)
896:             return
897: 
898:         # figure out where the pdf is to be written to
899:         if isinstance(fname_or_fh, six.string_types):
900:             with open(fname_or_fh, "wb") as fh:
901:                 self._print_pdf_to_fh(fh, *args, **kwargs)
902:         elif is_writable_file_like(fname_or_fh):
903:             self._print_pdf_to_fh(fname_or_fh, *args, **kwargs)
904:         else:
905:             raise ValueError("filename must be a path or a file-like object")
906: 
907:     def _print_png_to_fh(self, fh, *args, **kwargs):
908:         converter = make_pdf_to_png_converter()
909: 
910:         try:
911:             # create temporary directory for pdf creation and png conversion
912:             tmpdir = tempfile.mkdtemp(prefix="mpl_pgf_")
913:             fname_pdf = os.path.join(tmpdir, "figure.pdf")
914:             fname_png = os.path.join(tmpdir, "figure.png")
915:             # create pdf and try to convert it to png
916:             self.print_pdf(fname_pdf, *args, **kwargs)
917:             converter(fname_pdf, fname_png, dpi=self.figure.dpi)
918:             # copy file contents to target
919:             with open(fname_png, "rb") as fh_src:
920:                 shutil.copyfileobj(fh_src, fh)
921:         finally:
922:             try:
923:                 shutil.rmtree(tmpdir)
924:             except:
925:                 TmpDirCleaner.add(tmpdir)
926: 
927:     def print_png(self, fname_or_fh, *args, **kwargs):
928:         '''
929:         Use LaTeX to compile a pgf figure to pdf and convert it to png.
930:         '''
931:         if kwargs.get("dryrun", False):
932:             self._print_pgf_to_fh(None, *args, **kwargs)
933:             return
934: 
935:         if isinstance(fname_or_fh, six.string_types):
936:             with open(fname_or_fh, "wb") as fh:
937:                 self._print_png_to_fh(fh, *args, **kwargs)
938:         elif is_writable_file_like(fname_or_fh):
939:             self._print_png_to_fh(fname_or_fh, *args, **kwargs)
940:         else:
941:             raise ValueError("filename must be a path or a file-like object")
942: 
943:     def get_renderer(self):
944:         return RendererPgf(self.figure, None, dummy=True)
945: 
946: 
947: class FigureManagerPgf(FigureManagerBase):
948:     def __init__(self, *args):
949:         FigureManagerBase.__init__(self, *args)
950: 
951: 
952: @_Backend.export
953: class _BackendPgf(_Backend):
954:     FigureCanvas = FigureCanvasPgf
955:     FigureManager = FigureManagerPgf
956: 
957: 
958: def _cleanup_all():
959:     LatexManager._cleanup_remaining_instances()
960:     TmpDirCleaner.cleanup_remaining_tmpdirs()
961: 
962: atexit.register(_cleanup_all)
963: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 4, 0))

# 'import six' statement (line 4)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_240315 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 4, 0), 'six')

if (type(import_240315) is not StypyTypeError):

    if (import_240315 != 'pyd_module'):
        __import__(import_240315)
        sys_modules_240316 = sys.modules[import_240315]
        import_module(stypy.reporting.localization.Localization(__file__, 4, 0), 'six', sys_modules_240316.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 4, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 4)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4, 0), 'six', import_240315)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 6, 0))

# 'import math' statement (line 6)
import math

import_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'math', math, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'import os' statement (line 7)
import os

import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'import sys' statement (line 8)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'import errno' statement (line 9)
import errno

import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'errno', errno, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import re' statement (line 10)
import re

import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 're', re, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'import shutil' statement (line 11)
import shutil

import_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'shutil', shutil, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'import tempfile' statement (line 12)
import tempfile

import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'tempfile', tempfile, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'import codecs' statement (line 13)
import codecs

import_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'codecs', codecs, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'import atexit' statement (line 14)
import atexit

import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'atexit', atexit, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'import weakref' statement (line 15)
import weakref

import_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'weakref', weakref, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'import warnings' statement (line 16)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'import numpy' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_240317 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'numpy')

if (type(import_240317) is not StypyTypeError):

    if (import_240317 != 'pyd_module'):
        __import__(import_240317)
        sys_modules_240318 = sys.modules[import_240317]
        import_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'np', sys_modules_240318.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'numpy', import_240317)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'import matplotlib' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_240319 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib')

if (type(import_240319) is not StypyTypeError):

    if (import_240319 != 'pyd_module'):
        __import__(import_240319)
        sys_modules_240320 = sys.modules[import_240319]
        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'mpl', sys_modules_240320.module_type_store, module_type_store)
    else:
        import matplotlib as mpl

        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'mpl', matplotlib, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib', import_240319)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'from matplotlib.backend_bases import _Backend, FigureCanvasBase, FigureManagerBase, GraphicsContextBase, RendererBase' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_240321 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.backend_bases')

if (type(import_240321) is not StypyTypeError):

    if (import_240321 != 'pyd_module'):
        __import__(import_240321)
        sys_modules_240322 = sys.modules[import_240321]
        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.backend_bases', sys_modules_240322.module_type_store, module_type_store, ['_Backend', 'FigureCanvasBase', 'FigureManagerBase', 'GraphicsContextBase', 'RendererBase'])
        nest_module(stypy.reporting.localization.Localization(__file__, 21, 0), __file__, sys_modules_240322, sys_modules_240322.module_type_store, module_type_store)
    else:
        from matplotlib.backend_bases import _Backend, FigureCanvasBase, FigureManagerBase, GraphicsContextBase, RendererBase

        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.backend_bases', None, module_type_store, ['_Backend', 'FigureCanvasBase', 'FigureManagerBase', 'GraphicsContextBase', 'RendererBase'], [_Backend, FigureCanvasBase, FigureManagerBase, GraphicsContextBase, RendererBase])

else:
    # Assigning a type to the variable 'matplotlib.backend_bases' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.backend_bases', import_240321)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'from matplotlib.backends.backend_mixed import MixedModeRenderer' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_240323 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.backends.backend_mixed')

if (type(import_240323) is not StypyTypeError):

    if (import_240323 != 'pyd_module'):
        __import__(import_240323)
        sys_modules_240324 = sys.modules[import_240323]
        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.backends.backend_mixed', sys_modules_240324.module_type_store, module_type_store, ['MixedModeRenderer'])
        nest_module(stypy.reporting.localization.Localization(__file__, 24, 0), __file__, sys_modules_240324, sys_modules_240324.module_type_store, module_type_store)
    else:
        from matplotlib.backends.backend_mixed import MixedModeRenderer

        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.backends.backend_mixed', None, module_type_store, ['MixedModeRenderer'], [MixedModeRenderer])

else:
    # Assigning a type to the variable 'matplotlib.backends.backend_mixed' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.backends.backend_mixed', import_240323)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'from matplotlib.figure import Figure' statement (line 25)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_240325 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.figure')

if (type(import_240325) is not StypyTypeError):

    if (import_240325 != 'pyd_module'):
        __import__(import_240325)
        sys_modules_240326 = sys.modules[import_240325]
        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.figure', sys_modules_240326.module_type_store, module_type_store, ['Figure'])
        nest_module(stypy.reporting.localization.Localization(__file__, 25, 0), __file__, sys_modules_240326, sys_modules_240326.module_type_store, module_type_store)
    else:
        from matplotlib.figure import Figure

        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.figure', None, module_type_store, ['Figure'], [Figure])

else:
    # Assigning a type to the variable 'matplotlib.figure' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.figure', import_240325)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'from matplotlib.text import Text' statement (line 26)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_240327 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.text')

if (type(import_240327) is not StypyTypeError):

    if (import_240327 != 'pyd_module'):
        __import__(import_240327)
        sys_modules_240328 = sys.modules[import_240327]
        import_from_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.text', sys_modules_240328.module_type_store, module_type_store, ['Text'])
        nest_module(stypy.reporting.localization.Localization(__file__, 26, 0), __file__, sys_modules_240328, sys_modules_240328.module_type_store, module_type_store)
    else:
        from matplotlib.text import Text

        import_from_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.text', None, module_type_store, ['Text'], [Text])

else:
    # Assigning a type to the variable 'matplotlib.text' (line 26)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.text', import_240327)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'from matplotlib.path import Path' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_240329 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.path')

if (type(import_240329) is not StypyTypeError):

    if (import_240329 != 'pyd_module'):
        __import__(import_240329)
        sys_modules_240330 = sys.modules[import_240329]
        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.path', sys_modules_240330.module_type_store, module_type_store, ['Path'])
        nest_module(stypy.reporting.localization.Localization(__file__, 27, 0), __file__, sys_modules_240330, sys_modules_240330.module_type_store, module_type_store)
    else:
        from matplotlib.path import Path

        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.path', None, module_type_store, ['Path'], [Path])

else:
    # Assigning a type to the variable 'matplotlib.path' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.path', import_240329)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'from matplotlib import _png, rcParams' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_240331 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib')

if (type(import_240331) is not StypyTypeError):

    if (import_240331 != 'pyd_module'):
        __import__(import_240331)
        sys_modules_240332 = sys.modules[import_240331]
        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib', sys_modules_240332.module_type_store, module_type_store, ['_png', 'rcParams'])
        nest_module(stypy.reporting.localization.Localization(__file__, 28, 0), __file__, sys_modules_240332, sys_modules_240332.module_type_store, module_type_store)
    else:
        from matplotlib import _png, rcParams

        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib', None, module_type_store, ['_png', 'rcParams'], [_png, rcParams])

else:
    # Assigning a type to the variable 'matplotlib' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib', import_240331)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'from matplotlib.cbook import is_writable_file_like' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_240333 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.cbook')

if (type(import_240333) is not StypyTypeError):

    if (import_240333 != 'pyd_module'):
        __import__(import_240333)
        sys_modules_240334 = sys.modules[import_240333]
        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.cbook', sys_modules_240334.module_type_store, module_type_store, ['is_writable_file_like'])
        nest_module(stypy.reporting.localization.Localization(__file__, 29, 0), __file__, sys_modules_240334, sys_modules_240334.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import is_writable_file_like

        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.cbook', None, module_type_store, ['is_writable_file_like'], [is_writable_file_like])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.cbook', import_240333)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'from matplotlib.compat import subprocess' statement (line 30)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_240335 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.compat')

if (type(import_240335) is not StypyTypeError):

    if (import_240335 != 'pyd_module'):
        __import__(import_240335)
        sys_modules_240336 = sys.modules[import_240335]
        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.compat', sys_modules_240336.module_type_store, module_type_store, ['subprocess'])
        nest_module(stypy.reporting.localization.Localization(__file__, 30, 0), __file__, sys_modules_240336, sys_modules_240336.module_type_store, module_type_store)
    else:
        from matplotlib.compat import subprocess

        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.compat', None, module_type_store, ['subprocess'], [subprocess])

else:
    # Assigning a type to the variable 'matplotlib.compat' (line 30)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.compat', import_240335)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'from matplotlib.compat.subprocess import check_output' statement (line 31)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_240337 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.compat.subprocess')

if (type(import_240337) is not StypyTypeError):

    if (import_240337 != 'pyd_module'):
        __import__(import_240337)
        sys_modules_240338 = sys.modules[import_240337]
        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.compat.subprocess', sys_modules_240338.module_type_store, module_type_store, ['check_output'])
        nest_module(stypy.reporting.localization.Localization(__file__, 31, 0), __file__, sys_modules_240338, sys_modules_240338.module_type_store, module_type_store)
    else:
        from matplotlib.compat.subprocess import check_output

        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.compat.subprocess', None, module_type_store, ['check_output'], [check_output])

else:
    # Assigning a type to the variable 'matplotlib.compat.subprocess' (line 31)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.compat.subprocess', import_240337)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')


# Assigning a List to a Name (line 37):

# Assigning a List to a Name (line 37):

# Assigning a List to a Name (line 37):

# Obtaining an instance of the builtin type 'list' (line 37)
list_240339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 15), 'list')
# Adding type elements to the builtin type 'list' instance (line 37)

# Assigning a type to the variable 'system_fonts' (line 37)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), 'system_fonts', list_240339)


# Call to startswith(...): (line 38)
# Processing the call arguments (line 38)
unicode_240343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 27), 'unicode', u'win')
# Processing the call keyword arguments (line 38)
kwargs_240344 = {}
# Getting the type of 'sys' (line 38)
sys_240340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 38, 3), 'sys', False)
# Obtaining the member 'platform' of a type (line 38)
platform_240341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 38, 3), sys_240340, 'platform')
# Obtaining the member 'startswith' of a type (line 38)
startswith_240342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 38, 3), platform_240341, 'startswith')
# Calling startswith(args, kwargs) (line 38)
startswith_call_result_240345 = invoke(stypy.reporting.localization.Localization(__file__, 38, 3), startswith_240342, *[unicode_240343], **kwargs_240344)

# Testing the type of an if condition (line 38)
if_condition_240346 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 38, 0), startswith_call_result_240345)
# Assigning a type to the variable 'if_condition_240346' (line 38)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'if_condition_240346', if_condition_240346)
# SSA begins for if statement (line 38)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 39, 4))

# 'from matplotlib import font_manager' statement (line 39)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_240347 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 39, 4), 'matplotlib')

if (type(import_240347) is not StypyTypeError):

    if (import_240347 != 'pyd_module'):
        __import__(import_240347)
        sys_modules_240348 = sys.modules[import_240347]
        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 4), 'matplotlib', sys_modules_240348.module_type_store, module_type_store, ['font_manager'])
        nest_module(stypy.reporting.localization.Localization(__file__, 39, 4), __file__, sys_modules_240348, sys_modules_240348.module_type_store, module_type_store)
    else:
        from matplotlib import font_manager

        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 4), 'matplotlib', None, module_type_store, ['font_manager'], [font_manager])

else:
    # Assigning a type to the variable 'matplotlib' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 4), 'matplotlib', import_240347)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')



# Call to win32InstalledFonts(...): (line 40)
# Processing the call keyword arguments (line 40)
kwargs_240351 = {}
# Getting the type of 'font_manager' (line 40)
font_manager_240349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 13), 'font_manager', False)
# Obtaining the member 'win32InstalledFonts' of a type (line 40)
win32InstalledFonts_240350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 40, 13), font_manager_240349, 'win32InstalledFonts')
# Calling win32InstalledFonts(args, kwargs) (line 40)
win32InstalledFonts_call_result_240352 = invoke(stypy.reporting.localization.Localization(__file__, 40, 13), win32InstalledFonts_240350, *[], **kwargs_240351)

# Testing the type of a for loop iterable (line 40)
is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 40, 4), win32InstalledFonts_call_result_240352)
# Getting the type of the for loop variable (line 40)
for_loop_var_240353 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 40, 4), win32InstalledFonts_call_result_240352)
# Assigning a type to the variable 'f' (line 40)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 4), 'f', for_loop_var_240353)
# SSA begins for a for statement (line 40)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')


# SSA begins for try-except statement (line 41)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')

# Call to append(...): (line 42)
# Processing the call arguments (line 42)

# Call to get_font(...): (line 42)
# Processing the call arguments (line 42)

# Call to str(...): (line 42)
# Processing the call arguments (line 42)
# Getting the type of 'f' (line 42)
f_240359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 42, 58), 'f', False)
# Processing the call keyword arguments (line 42)
kwargs_240360 = {}
# Getting the type of 'str' (line 42)
str_240358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 42, 54), 'str', False)
# Calling str(args, kwargs) (line 42)
str_call_result_240361 = invoke(stypy.reporting.localization.Localization(__file__, 42, 54), str_240358, *[f_240359], **kwargs_240360)

# Processing the call keyword arguments (line 42)
kwargs_240362 = {}
# Getting the type of 'font_manager' (line 42)
font_manager_240356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 42, 32), 'font_manager', False)
# Obtaining the member 'get_font' of a type (line 42)
get_font_240357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 42, 32), font_manager_240356, 'get_font')
# Calling get_font(args, kwargs) (line 42)
get_font_call_result_240363 = invoke(stypy.reporting.localization.Localization(__file__, 42, 32), get_font_240357, *[str_call_result_240361], **kwargs_240362)

# Obtaining the member 'family_name' of a type (line 42)
family_name_240364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 42, 32), get_font_call_result_240363, 'family_name')
# Processing the call keyword arguments (line 42)
kwargs_240365 = {}
# Getting the type of 'system_fonts' (line 42)
system_fonts_240354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 42, 12), 'system_fonts', False)
# Obtaining the member 'append' of a type (line 42)
append_240355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 42, 12), system_fonts_240354, 'append')
# Calling append(args, kwargs) (line 42)
append_call_result_240366 = invoke(stypy.reporting.localization.Localization(__file__, 42, 12), append_240355, *[family_name_240364], **kwargs_240365)

# SSA branch for the except part of a try statement (line 41)
# SSA branch for the except '<any exception>' branch of a try statement (line 41)
module_type_store.open_ssa_branch('except')
pass
# SSA join for try-except statement (line 41)
module_type_store = module_type_store.join_ssa_context()

# SSA join for a for statement
module_type_store = module_type_store.join_ssa_context()

# SSA branch for the else part of an if statement (line 38)
module_type_store.open_ssa_branch('else')


# SSA begins for try-except statement (line 47)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')

# Assigning a Call to a Name (line 49):

# Assigning a Call to a Name (line 49):

# Assigning a Call to a Name (line 49):

# Call to check_output(...): (line 49)
# Processing the call arguments (line 49)

# Obtaining an instance of the builtin type 'list' (line 49)
list_240368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 49)
# Adding element type (line 49)

# Call to str(...): (line 49)
# Processing the call arguments (line 49)
unicode_240370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 36), 'unicode', u'fc-list')
# Processing the call keyword arguments (line 49)
kwargs_240371 = {}
# Getting the type of 'str' (line 49)
str_240369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 32), 'str', False)
# Calling str(args, kwargs) (line 49)
str_call_result_240372 = invoke(stypy.reporting.localization.Localization(__file__, 49, 32), str_240369, *[unicode_240370], **kwargs_240371)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 49, 31), list_240368, str_call_result_240372)
# Adding element type (line 49)
unicode_240373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 48), 'unicode', u':outline,scalable')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 49, 31), list_240368, unicode_240373)
# Adding element type (line 49)
unicode_240374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 69), 'unicode', u'family')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 49, 31), list_240368, unicode_240374)

# Processing the call keyword arguments (line 49)
kwargs_240375 = {}
# Getting the type of 'check_output' (line 49)
check_output_240367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 18), 'check_output', False)
# Calling check_output(args, kwargs) (line 49)
check_output_call_result_240376 = invoke(stypy.reporting.localization.Localization(__file__, 49, 18), check_output_240367, *[list_240368], **kwargs_240375)

# Assigning a type to the variable 'fc_list' (line 49)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 8), 'fc_list', check_output_call_result_240376)

# Assigning a Call to a Name (line 50):

# Assigning a Call to a Name (line 50):

# Assigning a Call to a Name (line 50):

# Call to decode(...): (line 50)
# Processing the call arguments (line 50)
unicode_240379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 33), 'unicode', u'utf8')
# Processing the call keyword arguments (line 50)
kwargs_240380 = {}
# Getting the type of 'fc_list' (line 50)
fc_list_240377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 18), 'fc_list', False)
# Obtaining the member 'decode' of a type (line 50)
decode_240378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 50, 18), fc_list_240377, 'decode')
# Calling decode(args, kwargs) (line 50)
decode_call_result_240381 = invoke(stypy.reporting.localization.Localization(__file__, 50, 18), decode_240378, *[unicode_240379], **kwargs_240380)

# Assigning a type to the variable 'fc_list' (line 50)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 8), 'fc_list', decode_call_result_240381)

# Assigning a ListComp to a Name (line 51):

# Assigning a ListComp to a Name (line 51):

# Assigning a ListComp to a Name (line 51):
# Calculating list comprehension
# Calculating comprehension expression

# Call to splitlines(...): (line 51)
# Processing the call keyword arguments (line 51)
kwargs_240392 = {}
# Getting the type of 'fc_list' (line 51)
fc_list_240390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 49), 'fc_list', False)
# Obtaining the member 'splitlines' of a type (line 51)
splitlines_240391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 49), fc_list_240390, 'splitlines')
# Calling splitlines(args, kwargs) (line 51)
splitlines_call_result_240393 = invoke(stypy.reporting.localization.Localization(__file__, 51, 49), splitlines_240391, *[], **kwargs_240392)

comprehension_240394 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 51, 24), splitlines_call_result_240393)
# Assigning a type to the variable 'f' (line 51)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 24), 'f', comprehension_240394)

# Obtaining the type of the subscript
int_240382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 37), 'int')

# Call to split(...): (line 51)
# Processing the call arguments (line 51)
unicode_240385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 32), 'unicode', u',')
# Processing the call keyword arguments (line 51)
kwargs_240386 = {}
# Getting the type of 'f' (line 51)
f_240383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 24), 'f', False)
# Obtaining the member 'split' of a type (line 51)
split_240384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 24), f_240383, 'split')
# Calling split(args, kwargs) (line 51)
split_call_result_240387 = invoke(stypy.reporting.localization.Localization(__file__, 51, 24), split_240384, *[unicode_240385], **kwargs_240386)

# Obtaining the member '__getitem__' of a type (line 51)
getitem___240388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 24), split_call_result_240387, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 51)
subscript_call_result_240389 = invoke(stypy.reporting.localization.Localization(__file__, 51, 24), getitem___240388, int_240382)

list_240395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 24), 'list')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 51, 24), list_240395, subscript_call_result_240389)
# Assigning a type to the variable 'system_fonts' (line 51)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 8), 'system_fonts', list_240395)

# Assigning a Call to a Name (line 52):

# Assigning a Call to a Name (line 52):

# Assigning a Call to a Name (line 52):

# Call to list(...): (line 52)
# Processing the call arguments (line 52)

# Call to set(...): (line 52)
# Processing the call arguments (line 52)
# Getting the type of 'system_fonts' (line 52)
system_fonts_240398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 32), 'system_fonts', False)
# Processing the call keyword arguments (line 52)
kwargs_240399 = {}
# Getting the type of 'set' (line 52)
set_240397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 28), 'set', False)
# Calling set(args, kwargs) (line 52)
set_call_result_240400 = invoke(stypy.reporting.localization.Localization(__file__, 52, 28), set_240397, *[system_fonts_240398], **kwargs_240399)

# Processing the call keyword arguments (line 52)
kwargs_240401 = {}
# Getting the type of 'list' (line 52)
list_240396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 23), 'list', False)
# Calling list(args, kwargs) (line 52)
list_call_result_240402 = invoke(stypy.reporting.localization.Localization(__file__, 52, 23), list_240396, *[set_call_result_240400], **kwargs_240401)

# Assigning a type to the variable 'system_fonts' (line 52)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 8), 'system_fonts', list_call_result_240402)
# SSA branch for the except part of a try statement (line 47)
# SSA branch for the except '<any exception>' branch of a try statement (line 47)
module_type_store.open_ssa_branch('except')

# Call to warn(...): (line 54)
# Processing the call arguments (line 54)
unicode_240405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 22), 'unicode', u'error getting fonts from fc-list')
# Getting the type of 'UserWarning' (line 54)
UserWarning_240406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 58), 'UserWarning', False)
# Processing the call keyword arguments (line 54)
kwargs_240407 = {}
# Getting the type of 'warnings' (line 54)
warnings_240403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 8), 'warnings', False)
# Obtaining the member 'warn' of a type (line 54)
warn_240404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 54, 8), warnings_240403, 'warn')
# Calling warn(args, kwargs) (line 54)
warn_call_result_240408 = invoke(stypy.reporting.localization.Localization(__file__, 54, 8), warn_240404, *[unicode_240405, UserWarning_240406], **kwargs_240407)

# SSA join for try-except statement (line 47)
module_type_store = module_type_store.join_ssa_context()

# SSA join for if statement (line 38)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def get_texcommand(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_texcommand'
    module_type_store = module_type_store.open_function_context('get_texcommand', 56, 0, False)
    
    # Passed parameters checking function
    get_texcommand.stypy_localization = localization
    get_texcommand.stypy_type_of_self = None
    get_texcommand.stypy_type_store = module_type_store
    get_texcommand.stypy_function_name = 'get_texcommand'
    get_texcommand.stypy_param_names_list = []
    get_texcommand.stypy_varargs_param_name = None
    get_texcommand.stypy_kwargs_param_name = None
    get_texcommand.stypy_call_defaults = defaults
    get_texcommand.stypy_call_varargs = varargs
    get_texcommand.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_texcommand', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_texcommand', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_texcommand(...)' code ##################

    unicode_240409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 57, 4), 'unicode', u'Get chosen TeX system from rc.')
    
    # Assigning a List to a Name (line 58):
    
    # Assigning a List to a Name (line 58):
    
    # Assigning a List to a Name (line 58):
    
    # Obtaining an instance of the builtin type 'list' (line 58)
    list_240410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 58)
    # Adding element type (line 58)
    unicode_240411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 25), 'unicode', u'xelatex')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 58, 24), list_240410, unicode_240411)
    # Adding element type (line 58)
    unicode_240412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 36), 'unicode', u'lualatex')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 58, 24), list_240410, unicode_240412)
    # Adding element type (line 58)
    unicode_240413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 48), 'unicode', u'pdflatex')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 58, 24), list_240410, unicode_240413)
    
    # Assigning a type to the variable 'texsystem_options' (line 58)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 58, 4), 'texsystem_options', list_240410)
    
    # Assigning a Subscript to a Name (line 59):
    
    # Assigning a Subscript to a Name (line 59):
    
    # Assigning a Subscript to a Name (line 59):
    
    # Obtaining the type of the subscript
    unicode_240414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 25), 'unicode', u'pgf.texsystem')
    # Getting the type of 'rcParams' (line 59)
    rcParams_240415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 16), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 59)
    getitem___240416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 59, 16), rcParams_240415, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 59)
    subscript_call_result_240417 = invoke(stypy.reporting.localization.Localization(__file__, 59, 16), getitem___240416, unicode_240414)
    
    # Assigning a type to the variable 'texsystem' (line 59)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 59, 4), 'texsystem', subscript_call_result_240417)
    
    
    # Getting the type of 'texsystem' (line 60)
    texsystem_240418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 24), 'texsystem')
    # Getting the type of 'texsystem_options' (line 60)
    texsystem_options_240419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 37), 'texsystem_options')
    # Applying the binary operator 'in' (line 60)
    result_contains_240420 = python_operator(stypy.reporting.localization.Localization(__file__, 60, 24), 'in', texsystem_240418, texsystem_options_240419)
    
    # Testing the type of an if expression (line 60)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 60, 11), result_contains_240420)
    # SSA begins for if expression (line 60)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'texsystem' (line 60)
    texsystem_240421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 11), 'texsystem')
    # SSA branch for the else part of an if expression (line 60)
    module_type_store.open_ssa_branch('if expression else')
    unicode_240422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 60), 'unicode', u'xelatex')
    # SSA join for if expression (line 60)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_240423 = union_type.UnionType.add(texsystem_240421, unicode_240422)
    
    # Assigning a type to the variable 'stypy_return_type' (line 60)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 4), 'stypy_return_type', if_exp_240423)
    
    # ################# End of 'get_texcommand(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_texcommand' in the type store
    # Getting the type of 'stypy_return_type' (line 56)
    stypy_return_type_240424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_240424)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_texcommand'
    return stypy_return_type_240424

# Assigning a type to the variable 'get_texcommand' (line 56)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 0), 'get_texcommand', get_texcommand)

@norecursion
def get_fontspec(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_fontspec'
    module_type_store = module_type_store.open_function_context('get_fontspec', 63, 0, False)
    
    # Passed parameters checking function
    get_fontspec.stypy_localization = localization
    get_fontspec.stypy_type_of_self = None
    get_fontspec.stypy_type_store = module_type_store
    get_fontspec.stypy_function_name = 'get_fontspec'
    get_fontspec.stypy_param_names_list = []
    get_fontspec.stypy_varargs_param_name = None
    get_fontspec.stypy_kwargs_param_name = None
    get_fontspec.stypy_call_defaults = defaults
    get_fontspec.stypy_call_varargs = varargs
    get_fontspec.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_fontspec', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_fontspec', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_fontspec(...)' code ##################

    unicode_240425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 4), 'unicode', u'Build fontspec preamble from rc.')
    
    # Assigning a List to a Name (line 65):
    
    # Assigning a List to a Name (line 65):
    
    # Assigning a List to a Name (line 65):
    
    # Obtaining an instance of the builtin type 'list' (line 65)
    list_240426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 65)
    
    # Assigning a type to the variable 'latex_fontspec' (line 65)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 65, 4), 'latex_fontspec', list_240426)
    
    # Assigning a Call to a Name (line 66):
    
    # Assigning a Call to a Name (line 66):
    
    # Assigning a Call to a Name (line 66):
    
    # Call to get_texcommand(...): (line 66)
    # Processing the call keyword arguments (line 66)
    kwargs_240428 = {}
    # Getting the type of 'get_texcommand' (line 66)
    get_texcommand_240427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 17), 'get_texcommand', False)
    # Calling get_texcommand(args, kwargs) (line 66)
    get_texcommand_call_result_240429 = invoke(stypy.reporting.localization.Localization(__file__, 66, 17), get_texcommand_240427, *[], **kwargs_240428)
    
    # Assigning a type to the variable 'texcommand' (line 66)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 66, 4), 'texcommand', get_texcommand_call_result_240429)
    
    
    # Getting the type of 'texcommand' (line 68)
    texcommand_240430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 7), 'texcommand')
    unicode_240431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 21), 'unicode', u'pdflatex')
    # Applying the binary operator '!=' (line 68)
    result_ne_240432 = python_operator(stypy.reporting.localization.Localization(__file__, 68, 7), '!=', texcommand_240430, unicode_240431)
    
    # Testing the type of an if condition (line 68)
    if_condition_240433 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 68, 4), result_ne_240432)
    # Assigning a type to the variable 'if_condition_240433' (line 68)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 68, 4), 'if_condition_240433', if_condition_240433)
    # SSA begins for if statement (line 68)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 69)
    # Processing the call arguments (line 69)
    unicode_240436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 30), 'unicode', u'\\usepackage{fontspec}')
    # Processing the call keyword arguments (line 69)
    kwargs_240437 = {}
    # Getting the type of 'latex_fontspec' (line 69)
    latex_fontspec_240434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 8), 'latex_fontspec', False)
    # Obtaining the member 'append' of a type (line 69)
    append_240435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 69, 8), latex_fontspec_240434, 'append')
    # Calling append(args, kwargs) (line 69)
    append_call_result_240438 = invoke(stypy.reporting.localization.Localization(__file__, 69, 8), append_240435, *[unicode_240436], **kwargs_240437)
    
    # SSA join for if statement (line 68)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'texcommand' (line 71)
    texcommand_240439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 7), 'texcommand')
    unicode_240440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, 21), 'unicode', u'pdflatex')
    # Applying the binary operator '!=' (line 71)
    result_ne_240441 = python_operator(stypy.reporting.localization.Localization(__file__, 71, 7), '!=', texcommand_240439, unicode_240440)
    
    
    # Obtaining the type of the subscript
    unicode_240442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, 45), 'unicode', u'pgf.rcfonts')
    # Getting the type of 'rcParams' (line 71)
    rcParams_240443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 36), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 71)
    getitem___240444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 36), rcParams_240443, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 71)
    subscript_call_result_240445 = invoke(stypy.reporting.localization.Localization(__file__, 71, 36), getitem___240444, unicode_240442)
    
    # Applying the binary operator 'and' (line 71)
    result_and_keyword_240446 = python_operator(stypy.reporting.localization.Localization(__file__, 71, 7), 'and', result_ne_240441, subscript_call_result_240445)
    
    # Testing the type of an if condition (line 71)
    if_condition_240447 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 71, 4), result_and_keyword_240446)
    # Assigning a type to the variable 'if_condition_240447' (line 71)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 71, 4), 'if_condition_240447', if_condition_240447)
    # SSA begins for if statement (line 71)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 73):
    
    # Assigning a List to a Name (line 73):
    
    # Assigning a List to a Name (line 73):
    
    # Obtaining an instance of the builtin type 'list' (line 73)
    list_240448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 73)
    # Adding element type (line 73)
    unicode_240449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 20), 'unicode', u'serif')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 73, 19), list_240448, unicode_240449)
    # Adding element type (line 73)
    unicode_240450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 29), 'unicode', u'sans-serif')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 73, 19), list_240448, unicode_240450)
    # Adding element type (line 73)
    unicode_240451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 43), 'unicode', u'monospace')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 73, 19), list_240448, unicode_240451)
    
    # Assigning a type to the variable 'families' (line 73)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 73, 8), 'families', list_240448)
    
    # Assigning a List to a Name (line 74):
    
    # Assigning a List to a Name (line 74):
    
    # Assigning a List to a Name (line 74):
    
    # Obtaining an instance of the builtin type 'list' (line 74)
    list_240452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 74)
    # Adding element type (line 74)
    unicode_240453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, 21), 'unicode', u'\\setmainfont{%s}')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 74, 20), list_240452, unicode_240453)
    # Adding element type (line 74)
    unicode_240454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, 42), 'unicode', u'\\setsansfont{%s}')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 74, 20), list_240452, unicode_240454)
    # Adding element type (line 74)
    unicode_240455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 21), 'unicode', u'\\setmonofont{%s}')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 74, 20), list_240452, unicode_240455)
    
    # Assigning a type to the variable 'fontspecs' (line 74)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 74, 8), 'fontspecs', list_240452)
    
    
    # Call to zip(...): (line 76)
    # Processing the call arguments (line 76)
    # Getting the type of 'families' (line 76)
    families_240457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 36), 'families', False)
    # Getting the type of 'fontspecs' (line 76)
    fontspecs_240458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 46), 'fontspecs', False)
    # Processing the call keyword arguments (line 76)
    kwargs_240459 = {}
    # Getting the type of 'zip' (line 76)
    zip_240456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 32), 'zip', False)
    # Calling zip(args, kwargs) (line 76)
    zip_call_result_240460 = invoke(stypy.reporting.localization.Localization(__file__, 76, 32), zip_240456, *[families_240457, fontspecs_240458], **kwargs_240459)
    
    # Testing the type of a for loop iterable (line 76)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 76, 8), zip_call_result_240460)
    # Getting the type of the for loop variable (line 76)
    for_loop_var_240461 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 76, 8), zip_call_result_240460)
    # Assigning a type to the variable 'family' (line 76)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 8), 'family', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 76, 8), for_loop_var_240461))
    # Assigning a type to the variable 'fontspec' (line 76)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 8), 'fontspec', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 76, 8), for_loop_var_240461))
    # SSA begins for a for statement (line 76)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a ListComp to a Name (line 77):
    
    # Assigning a ListComp to a Name (line 77):
    
    # Assigning a ListComp to a Name (line 77):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Obtaining the type of the subscript
    unicode_240466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 43), 'unicode', u'font.')
    # Getting the type of 'family' (line 77)
    family_240467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 53), 'family')
    # Applying the binary operator '+' (line 77)
    result_add_240468 = python_operator(stypy.reporting.localization.Localization(__file__, 77, 43), '+', unicode_240466, family_240467)
    
    # Getting the type of 'rcParams' (line 77)
    rcParams_240469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 34), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 77)
    getitem___240470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 77, 34), rcParams_240469, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 77)
    subscript_call_result_240471 = invoke(stypy.reporting.localization.Localization(__file__, 77, 34), getitem___240470, result_add_240468)
    
    comprehension_240472 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 23), subscript_call_result_240471)
    # Assigning a type to the variable 'f' (line 77)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 23), 'f', comprehension_240472)
    
    # Getting the type of 'f' (line 78)
    f_240463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 26), 'f')
    # Getting the type of 'system_fonts' (line 78)
    system_fonts_240464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 31), 'system_fonts')
    # Applying the binary operator 'in' (line 78)
    result_contains_240465 = python_operator(stypy.reporting.localization.Localization(__file__, 78, 26), 'in', f_240463, system_fonts_240464)
    
    # Getting the type of 'f' (line 77)
    f_240462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 23), 'f')
    list_240473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 23), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 23), list_240473, f_240462)
    # Assigning a type to the variable 'matches' (line 77)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 12), 'matches', list_240473)
    
    # Getting the type of 'matches' (line 79)
    matches_240474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 15), 'matches')
    # Testing the type of an if condition (line 79)
    if_condition_240475 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 79, 12), matches_240474)
    # Assigning a type to the variable 'if_condition_240475' (line 79)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 79, 12), 'if_condition_240475', if_condition_240475)
    # SSA begins for if statement (line 79)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 80)
    # Processing the call arguments (line 80)
    # Getting the type of 'fontspec' (line 80)
    fontspec_240478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 38), 'fontspec', False)
    
    # Obtaining the type of the subscript
    int_240479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 80, 57), 'int')
    # Getting the type of 'matches' (line 80)
    matches_240480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 49), 'matches', False)
    # Obtaining the member '__getitem__' of a type (line 80)
    getitem___240481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 80, 49), matches_240480, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 80)
    subscript_call_result_240482 = invoke(stypy.reporting.localization.Localization(__file__, 80, 49), getitem___240481, int_240479)
    
    # Applying the binary operator '%' (line 80)
    result_mod_240483 = python_operator(stypy.reporting.localization.Localization(__file__, 80, 38), '%', fontspec_240478, subscript_call_result_240482)
    
    # Processing the call keyword arguments (line 80)
    kwargs_240484 = {}
    # Getting the type of 'latex_fontspec' (line 80)
    latex_fontspec_240476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 16), 'latex_fontspec', False)
    # Obtaining the member 'append' of a type (line 80)
    append_240477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 80, 16), latex_fontspec_240476, 'append')
    # Calling append(args, kwargs) (line 80)
    append_call_result_240485 = invoke(stypy.reporting.localization.Localization(__file__, 80, 16), append_240477, *[result_mod_240483], **kwargs_240484)
    
    # SSA branch for the else part of an if statement (line 79)
    module_type_store.open_ssa_branch('else')
    pass
    # SSA join for if statement (line 79)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 71)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to join(...): (line 84)
    # Processing the call arguments (line 84)
    # Getting the type of 'latex_fontspec' (line 84)
    latex_fontspec_240488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 21), 'latex_fontspec', False)
    # Processing the call keyword arguments (line 84)
    kwargs_240489 = {}
    unicode_240486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 11), 'unicode', u'\n')
    # Obtaining the member 'join' of a type (line 84)
    join_240487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 84, 11), unicode_240486, 'join')
    # Calling join(args, kwargs) (line 84)
    join_call_result_240490 = invoke(stypy.reporting.localization.Localization(__file__, 84, 11), join_240487, *[latex_fontspec_240488], **kwargs_240489)
    
    # Assigning a type to the variable 'stypy_return_type' (line 84)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 4), 'stypy_return_type', join_call_result_240490)
    
    # ################# End of 'get_fontspec(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_fontspec' in the type store
    # Getting the type of 'stypy_return_type' (line 63)
    stypy_return_type_240491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_240491)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_fontspec'
    return stypy_return_type_240491

# Assigning a type to the variable 'get_fontspec' (line 63)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 63, 0), 'get_fontspec', get_fontspec)

@norecursion
def get_preamble(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_preamble'
    module_type_store = module_type_store.open_function_context('get_preamble', 87, 0, False)
    
    # Passed parameters checking function
    get_preamble.stypy_localization = localization
    get_preamble.stypy_type_of_self = None
    get_preamble.stypy_type_store = module_type_store
    get_preamble.stypy_function_name = 'get_preamble'
    get_preamble.stypy_param_names_list = []
    get_preamble.stypy_varargs_param_name = None
    get_preamble.stypy_kwargs_param_name = None
    get_preamble.stypy_call_defaults = defaults
    get_preamble.stypy_call_varargs = varargs
    get_preamble.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_preamble', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_preamble', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_preamble(...)' code ##################

    unicode_240492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 4), 'unicode', u'Get LaTeX preamble from rc.')
    
    # Call to join(...): (line 89)
    # Processing the call arguments (line 89)
    
    # Obtaining the type of the subscript
    unicode_240495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 30), 'unicode', u'pgf.preamble')
    # Getting the type of 'rcParams' (line 89)
    rcParams_240496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 21), 'rcParams', False)
    # Obtaining the member '__getitem__' of a type (line 89)
    getitem___240497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 89, 21), rcParams_240496, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 89)
    subscript_call_result_240498 = invoke(stypy.reporting.localization.Localization(__file__, 89, 21), getitem___240497, unicode_240495)
    
    # Processing the call keyword arguments (line 89)
    kwargs_240499 = {}
    unicode_240493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 11), 'unicode', u'\n')
    # Obtaining the member 'join' of a type (line 89)
    join_240494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 89, 11), unicode_240493, 'join')
    # Calling join(args, kwargs) (line 89)
    join_call_result_240500 = invoke(stypy.reporting.localization.Localization(__file__, 89, 11), join_240494, *[subscript_call_result_240498], **kwargs_240499)
    
    # Assigning a type to the variable 'stypy_return_type' (line 89)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 4), 'stypy_return_type', join_call_result_240500)
    
    # ################# End of 'get_preamble(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_preamble' in the type store
    # Getting the type of 'stypy_return_type' (line 87)
    stypy_return_type_240501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_240501)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_preamble'
    return stypy_return_type_240501

# Assigning a type to the variable 'get_preamble' (line 87)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 0), 'get_preamble', get_preamble)

# Assigning a BinOp to a Name (line 96):

# Assigning a BinOp to a Name (line 96):

# Assigning a BinOp to a Name (line 96):
float_240502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 17), 'float')
float_240503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 22), 'float')
# Applying the binary operator 'div' (line 96)
result_div_240504 = python_operator(stypy.reporting.localization.Localization(__file__, 96, 17), 'div', float_240502, float_240503)

# Assigning a type to the variable 'latex_pt_to_in' (line 96)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 0), 'latex_pt_to_in', result_div_240504)

# Assigning a BinOp to a Name (line 97):

# Assigning a BinOp to a Name (line 97):

# Assigning a BinOp to a Name (line 97):
float_240505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 17), 'float')
# Getting the type of 'latex_pt_to_in' (line 97)
latex_pt_to_in_240506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 22), 'latex_pt_to_in')
# Applying the binary operator 'div' (line 97)
result_div_240507 = python_operator(stypy.reporting.localization.Localization(__file__, 97, 17), 'div', float_240505, latex_pt_to_in_240506)

# Assigning a type to the variable 'latex_in_to_pt' (line 97)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 0), 'latex_in_to_pt', result_div_240507)

# Assigning a BinOp to a Name (line 98):

# Assigning a BinOp to a Name (line 98):

# Assigning a BinOp to a Name (line 98):
float_240508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 15), 'float')
float_240509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 20), 'float')
# Applying the binary operator 'div' (line 98)
result_div_240510 = python_operator(stypy.reporting.localization.Localization(__file__, 98, 15), 'div', float_240508, float_240509)

# Assigning a type to the variable 'mpl_pt_to_in' (line 98)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 0), 'mpl_pt_to_in', result_div_240510)

# Assigning a BinOp to a Name (line 99):

# Assigning a BinOp to a Name (line 99):

# Assigning a BinOp to a Name (line 99):
float_240511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 15), 'float')
# Getting the type of 'mpl_pt_to_in' (line 99)
mpl_pt_to_in_240512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 20), 'mpl_pt_to_in')
# Applying the binary operator 'div' (line 99)
result_div_240513 = python_operator(stypy.reporting.localization.Localization(__file__, 99, 15), 'div', float_240511, mpl_pt_to_in_240512)

# Assigning a type to the variable 'mpl_in_to_pt' (line 99)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 0), 'mpl_in_to_pt', result_div_240513)

# Assigning a Str to a Name (line 104):

# Assigning a Str to a Name (line 104):

# Assigning a Str to a Name (line 104):
unicode_240514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 12), 'unicode', u'(?<!\\\\)(?:\\\\\\\\)*')
# Assigning a type to the variable 'NO_ESCAPE' (line 104)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 0), 'NO_ESCAPE', unicode_240514)

# Assigning a Call to a Name (line 105):

# Assigning a Call to a Name (line 105):

# Assigning a Call to a Name (line 105):

# Call to compile(...): (line 105)
# Processing the call arguments (line 105)
# Getting the type of 'NO_ESCAPE' (line 105)
NO_ESCAPE_240517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 24), 'NO_ESCAPE', False)
unicode_240518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 36), 'unicode', u'\\$')
# Applying the binary operator '+' (line 105)
result_add_240519 = python_operator(stypy.reporting.localization.Localization(__file__, 105, 24), '+', NO_ESCAPE_240517, unicode_240518)

# Processing the call keyword arguments (line 105)
kwargs_240520 = {}
# Getting the type of 're' (line 105)
re_240515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 13), 're', False)
# Obtaining the member 'compile' of a type (line 105)
compile_240516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 13), re_240515, 'compile')
# Calling compile(args, kwargs) (line 105)
compile_call_result_240521 = invoke(stypy.reporting.localization.Localization(__file__, 105, 13), compile_240516, *[result_add_240519], **kwargs_240520)

# Assigning a type to the variable 're_mathsep' (line 105)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 0), 're_mathsep', compile_call_result_240521)

# Assigning a Call to a Name (line 106):

# Assigning a Call to a Name (line 106):

# Assigning a Call to a Name (line 106):

# Call to compile(...): (line 106)
# Processing the call arguments (line 106)
# Getting the type of 'NO_ESCAPE' (line 106)
NO_ESCAPE_240524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 27), 'NO_ESCAPE', False)
unicode_240525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 106, 39), 'unicode', u'([_^$%])')
# Applying the binary operator '+' (line 106)
result_add_240526 = python_operator(stypy.reporting.localization.Localization(__file__, 106, 27), '+', NO_ESCAPE_240524, unicode_240525)

# Processing the call keyword arguments (line 106)
kwargs_240527 = {}
# Getting the type of 're' (line 106)
re_240522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 16), 're', False)
# Obtaining the member 'compile' of a type (line 106)
compile_240523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 106, 16), re_240522, 'compile')
# Calling compile(args, kwargs) (line 106)
compile_call_result_240528 = invoke(stypy.reporting.localization.Localization(__file__, 106, 16), compile_240523, *[result_add_240526], **kwargs_240527)

# Assigning a type to the variable 're_escapetext' (line 106)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 106, 0), 're_escapetext', compile_call_result_240528)

# Assigning a Lambda to a Name (line 107):

# Assigning a Lambda to a Name (line 107):

# Assigning a Lambda to a Name (line 107):

@norecursion
def _stypy_temp_lambda_102(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_102'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_102', 107, 18, True)
    # Passed parameters checking function
    _stypy_temp_lambda_102.stypy_localization = localization
    _stypy_temp_lambda_102.stypy_type_of_self = None
    _stypy_temp_lambda_102.stypy_type_store = module_type_store
    _stypy_temp_lambda_102.stypy_function_name = '_stypy_temp_lambda_102'
    _stypy_temp_lambda_102.stypy_param_names_list = ['m']
    _stypy_temp_lambda_102.stypy_varargs_param_name = None
    _stypy_temp_lambda_102.stypy_kwargs_param_name = None
    _stypy_temp_lambda_102.stypy_call_defaults = defaults
    _stypy_temp_lambda_102.stypy_call_varargs = varargs
    _stypy_temp_lambda_102.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_102', ['m'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_102', ['m'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    unicode_240529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 28), 'unicode', u'\\')
    
    # Call to group(...): (line 107)
    # Processing the call arguments (line 107)
    int_240532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 43), 'int')
    # Processing the call keyword arguments (line 107)
    kwargs_240533 = {}
    # Getting the type of 'm' (line 107)
    m_240530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 35), 'm', False)
    # Obtaining the member 'group' of a type (line 107)
    group_240531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 107, 35), m_240530, 'group')
    # Calling group(args, kwargs) (line 107)
    group_call_result_240534 = invoke(stypy.reporting.localization.Localization(__file__, 107, 35), group_240531, *[int_240532], **kwargs_240533)
    
    # Applying the binary operator '+' (line 107)
    result_add_240535 = python_operator(stypy.reporting.localization.Localization(__file__, 107, 28), '+', unicode_240529, group_call_result_240534)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 107)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 18), 'stypy_return_type', result_add_240535)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_102' in the type store
    # Getting the type of 'stypy_return_type' (line 107)
    stypy_return_type_240536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 18), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_240536)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_102'
    return stypy_return_type_240536

# Assigning a type to the variable '_stypy_temp_lambda_102' (line 107)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 18), '_stypy_temp_lambda_102', _stypy_temp_lambda_102)
# Getting the type of '_stypy_temp_lambda_102' (line 107)
_stypy_temp_lambda_102_240537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 18), '_stypy_temp_lambda_102')
# Assigning a type to the variable 'repl_escapetext' (line 107)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 0), 'repl_escapetext', _stypy_temp_lambda_102_240537)

# Assigning a Call to a Name (line 108):

# Assigning a Call to a Name (line 108):

# Assigning a Call to a Name (line 108):

# Call to compile(...): (line 108)
# Processing the call arguments (line 108)
# Getting the type of 'NO_ESCAPE' (line 108)
NO_ESCAPE_240540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 28), 'NO_ESCAPE', False)
unicode_240541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, 40), 'unicode', u'(\\\\mathdefault)')
# Applying the binary operator '+' (line 108)
result_add_240542 = python_operator(stypy.reporting.localization.Localization(__file__, 108, 28), '+', NO_ESCAPE_240540, unicode_240541)

# Processing the call keyword arguments (line 108)
kwargs_240543 = {}
# Getting the type of 're' (line 108)
re_240538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 17), 're', False)
# Obtaining the member 'compile' of a type (line 108)
compile_240539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 17), re_240538, 'compile')
# Calling compile(args, kwargs) (line 108)
compile_call_result_240544 = invoke(stypy.reporting.localization.Localization(__file__, 108, 17), compile_240539, *[result_add_240542], **kwargs_240543)

# Assigning a type to the variable 're_mathdefault' (line 108)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 0), 're_mathdefault', compile_call_result_240544)

# Assigning a Lambda to a Name (line 109):

# Assigning a Lambda to a Name (line 109):

# Assigning a Lambda to a Name (line 109):

@norecursion
def _stypy_temp_lambda_103(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_103'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_103', 109, 19, True)
    # Passed parameters checking function
    _stypy_temp_lambda_103.stypy_localization = localization
    _stypy_temp_lambda_103.stypy_type_of_self = None
    _stypy_temp_lambda_103.stypy_type_store = module_type_store
    _stypy_temp_lambda_103.stypy_function_name = '_stypy_temp_lambda_103'
    _stypy_temp_lambda_103.stypy_param_names_list = ['m']
    _stypy_temp_lambda_103.stypy_varargs_param_name = None
    _stypy_temp_lambda_103.stypy_kwargs_param_name = None
    _stypy_temp_lambda_103.stypy_call_defaults = defaults
    _stypy_temp_lambda_103.stypy_call_varargs = varargs
    _stypy_temp_lambda_103.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_103', ['m'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_103', ['m'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    # Obtaining the type of the subscript
    
    
    # Call to len(...): (line 109)
    # Processing the call arguments (line 109)
    
    # Call to group(...): (line 109)
    # Processing the call arguments (line 109)
    int_240548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 54), 'int')
    # Processing the call keyword arguments (line 109)
    kwargs_240549 = {}
    # Getting the type of 'm' (line 109)
    m_240546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 46), 'm', False)
    # Obtaining the member 'group' of a type (line 109)
    group_240547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 46), m_240546, 'group')
    # Calling group(args, kwargs) (line 109)
    group_call_result_240550 = invoke(stypy.reporting.localization.Localization(__file__, 109, 46), group_240547, *[int_240548], **kwargs_240549)
    
    # Processing the call keyword arguments (line 109)
    kwargs_240551 = {}
    # Getting the type of 'len' (line 109)
    len_240545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 42), 'len', False)
    # Calling len(args, kwargs) (line 109)
    len_call_result_240552 = invoke(stypy.reporting.localization.Localization(__file__, 109, 42), len_240545, *[group_call_result_240550], **kwargs_240551)
    
    # Applying the 'usub' unary operator (line 109)
    result___neg___240553 = python_operator(stypy.reporting.localization.Localization(__file__, 109, 41), 'usub', len_call_result_240552)
    
    slice_240554 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 109, 29), None, result___neg___240553, None)
    
    # Call to group(...): (line 109)
    # Processing the call arguments (line 109)
    int_240557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 37), 'int')
    # Processing the call keyword arguments (line 109)
    kwargs_240558 = {}
    # Getting the type of 'm' (line 109)
    m_240555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 29), 'm', False)
    # Obtaining the member 'group' of a type (line 109)
    group_240556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 29), m_240555, 'group')
    # Calling group(args, kwargs) (line 109)
    group_call_result_240559 = invoke(stypy.reporting.localization.Localization(__file__, 109, 29), group_240556, *[int_240557], **kwargs_240558)
    
    # Obtaining the member '__getitem__' of a type (line 109)
    getitem___240560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 29), group_call_result_240559, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 109)
    subscript_call_result_240561 = invoke(stypy.reporting.localization.Localization(__file__, 109, 29), getitem___240560, slice_240554)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 19), 'stypy_return_type', subscript_call_result_240561)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_103' in the type store
    # Getting the type of 'stypy_return_type' (line 109)
    stypy_return_type_240562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 19), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_240562)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_103'
    return stypy_return_type_240562

# Assigning a type to the variable '_stypy_temp_lambda_103' (line 109)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 19), '_stypy_temp_lambda_103', _stypy_temp_lambda_103)
# Getting the type of '_stypy_temp_lambda_103' (line 109)
_stypy_temp_lambda_103_240563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 19), '_stypy_temp_lambda_103')
# Assigning a type to the variable 'repl_mathdefault' (line 109)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 0), 'repl_mathdefault', _stypy_temp_lambda_103_240563)

@norecursion
def common_texification(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'common_texification'
    module_type_store = module_type_store.open_function_context('common_texification', 112, 0, False)
    
    # Passed parameters checking function
    common_texification.stypy_localization = localization
    common_texification.stypy_type_of_self = None
    common_texification.stypy_type_store = module_type_store
    common_texification.stypy_function_name = 'common_texification'
    common_texification.stypy_param_names_list = ['text']
    common_texification.stypy_varargs_param_name = None
    common_texification.stypy_kwargs_param_name = None
    common_texification.stypy_call_defaults = defaults
    common_texification.stypy_call_varargs = varargs
    common_texification.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'common_texification', ['text'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'common_texification', localization, ['text'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'common_texification(...)' code ##################

    unicode_240564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, (-1)), 'unicode', u'\n    Do some necessary and/or useful substitutions for texts to be included in\n    LaTeX documents.\n    ')
    
    # Assigning a Call to a Name (line 120):
    
    # Assigning a Call to a Name (line 120):
    
    # Assigning a Call to a Name (line 120):
    
    # Call to sub(...): (line 120)
    # Processing the call arguments (line 120)
    # Getting the type of 'repl_mathdefault' (line 120)
    repl_mathdefault_240567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 30), 'repl_mathdefault', False)
    # Getting the type of 'text' (line 120)
    text_240568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 48), 'text', False)
    # Processing the call keyword arguments (line 120)
    kwargs_240569 = {}
    # Getting the type of 're_mathdefault' (line 120)
    re_mathdefault_240565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 11), 're_mathdefault', False)
    # Obtaining the member 'sub' of a type (line 120)
    sub_240566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 120, 11), re_mathdefault_240565, 'sub')
    # Calling sub(args, kwargs) (line 120)
    sub_call_result_240570 = invoke(stypy.reporting.localization.Localization(__file__, 120, 11), sub_240566, *[repl_mathdefault_240567, text_240568], **kwargs_240569)
    
    # Assigning a type to the variable 'text' (line 120)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 120, 4), 'text', sub_call_result_240570)
    
    # Assigning a Call to a Name (line 123):
    
    # Assigning a Call to a Name (line 123):
    
    # Assigning a Call to a Name (line 123):
    
    # Call to split(...): (line 123)
    # Processing the call arguments (line 123)
    # Getting the type of 'text' (line 123)
    text_240573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 29), 'text', False)
    # Processing the call keyword arguments (line 123)
    kwargs_240574 = {}
    # Getting the type of 're_mathsep' (line 123)
    re_mathsep_240571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 12), 're_mathsep', False)
    # Obtaining the member 'split' of a type (line 123)
    split_240572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 12), re_mathsep_240571, 'split')
    # Calling split(args, kwargs) (line 123)
    split_call_result_240575 = invoke(stypy.reporting.localization.Localization(__file__, 123, 12), split_240572, *[text_240573], **kwargs_240574)
    
    # Assigning a type to the variable 'parts' (line 123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 123, 4), 'parts', split_call_result_240575)
    
    
    # Call to enumerate(...): (line 124)
    # Processing the call arguments (line 124)
    # Getting the type of 'parts' (line 124)
    parts_240577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 26), 'parts', False)
    # Processing the call keyword arguments (line 124)
    kwargs_240578 = {}
    # Getting the type of 'enumerate' (line 124)
    enumerate_240576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 16), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 124)
    enumerate_call_result_240579 = invoke(stypy.reporting.localization.Localization(__file__, 124, 16), enumerate_240576, *[parts_240577], **kwargs_240578)
    
    # Testing the type of a for loop iterable (line 124)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 124, 4), enumerate_call_result_240579)
    # Getting the type of the for loop variable (line 124)
    for_loop_var_240580 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 124, 4), enumerate_call_result_240579)
    # Assigning a type to the variable 'i' (line 124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 124, 4), for_loop_var_240580))
    # Assigning a type to the variable 's' (line 124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 4), 's', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 124, 4), for_loop_var_240580))
    # SSA begins for a for statement (line 124)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'i' (line 125)
    i_240581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 15), 'i')
    int_240582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 19), 'int')
    # Applying the binary operator '%' (line 125)
    result_mod_240583 = python_operator(stypy.reporting.localization.Localization(__file__, 125, 15), '%', i_240581, int_240582)
    
    # Applying the 'not' unary operator (line 125)
    result_not__240584 = python_operator(stypy.reporting.localization.Localization(__file__, 125, 11), 'not', result_mod_240583)
    
    # Testing the type of an if condition (line 125)
    if_condition_240585 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 125, 8), result_not__240584)
    # Assigning a type to the variable 'if_condition_240585' (line 125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 8), 'if_condition_240585', if_condition_240585)
    # SSA begins for if statement (line 125)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 127):
    
    # Assigning a Call to a Name (line 127):
    
    # Assigning a Call to a Name (line 127):
    
    # Call to sub(...): (line 127)
    # Processing the call arguments (line 127)
    # Getting the type of 'repl_escapetext' (line 127)
    repl_escapetext_240588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 34), 'repl_escapetext', False)
    # Getting the type of 's' (line 127)
    s_240589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 51), 's', False)
    # Processing the call keyword arguments (line 127)
    kwargs_240590 = {}
    # Getting the type of 're_escapetext' (line 127)
    re_escapetext_240586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 16), 're_escapetext', False)
    # Obtaining the member 'sub' of a type (line 127)
    sub_240587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 127, 16), re_escapetext_240586, 'sub')
    # Calling sub(args, kwargs) (line 127)
    sub_call_result_240591 = invoke(stypy.reporting.localization.Localization(__file__, 127, 16), sub_240587, *[repl_escapetext_240588, s_240589], **kwargs_240590)
    
    # Assigning a type to the variable 's' (line 127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 12), 's', sub_call_result_240591)
    # SSA branch for the else part of an if statement (line 125)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 130):
    
    # Assigning a BinOp to a Name (line 130):
    
    # Assigning a BinOp to a Name (line 130):
    unicode_240592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 16), 'unicode', u'\\(\\displaystyle %s\\)')
    # Getting the type of 's' (line 130)
    s_240593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 42), 's')
    # Applying the binary operator '%' (line 130)
    result_mod_240594 = python_operator(stypy.reporting.localization.Localization(__file__, 130, 16), '%', unicode_240592, s_240593)
    
    # Assigning a type to the variable 's' (line 130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 12), 's', result_mod_240594)
    # SSA join for if statement (line 125)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 131):
    
    # Assigning a Name to a Subscript (line 131):
    
    # Assigning a Name to a Subscript (line 131):
    # Getting the type of 's' (line 131)
    s_240595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 19), 's')
    # Getting the type of 'parts' (line 131)
    parts_240596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 8), 'parts')
    # Getting the type of 'i' (line 131)
    i_240597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 14), 'i')
    # Storing an element on a container (line 131)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 131, 8), parts_240596, (i_240597, s_240595))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to join(...): (line 133)
    # Processing the call arguments (line 133)
    # Getting the type of 'parts' (line 133)
    parts_240600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 19), 'parts', False)
    # Processing the call keyword arguments (line 133)
    kwargs_240601 = {}
    unicode_240598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 133, 11), 'unicode', u'')
    # Obtaining the member 'join' of a type (line 133)
    join_240599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 11), unicode_240598, 'join')
    # Calling join(args, kwargs) (line 133)
    join_call_result_240602 = invoke(stypy.reporting.localization.Localization(__file__, 133, 11), join_240599, *[parts_240600], **kwargs_240601)
    
    # Assigning a type to the variable 'stypy_return_type' (line 133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 4), 'stypy_return_type', join_call_result_240602)
    
    # ################# End of 'common_texification(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'common_texification' in the type store
    # Getting the type of 'stypy_return_type' (line 112)
    stypy_return_type_240603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_240603)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'common_texification'
    return stypy_return_type_240603

# Assigning a type to the variable 'common_texification' (line 112)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 0), 'common_texification', common_texification)

@norecursion
def writeln(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'writeln'
    module_type_store = module_type_store.open_function_context('writeln', 136, 0, False)
    
    # Passed parameters checking function
    writeln.stypy_localization = localization
    writeln.stypy_type_of_self = None
    writeln.stypy_type_store = module_type_store
    writeln.stypy_function_name = 'writeln'
    writeln.stypy_param_names_list = ['fh', 'line']
    writeln.stypy_varargs_param_name = None
    writeln.stypy_kwargs_param_name = None
    writeln.stypy_call_defaults = defaults
    writeln.stypy_call_varargs = varargs
    writeln.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'writeln', ['fh', 'line'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'writeln', localization, ['fh', 'line'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'writeln(...)' code ##################

    
    # Call to write(...): (line 139)
    # Processing the call arguments (line 139)
    # Getting the type of 'line' (line 139)
    line_240606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 13), 'line', False)
    # Processing the call keyword arguments (line 139)
    kwargs_240607 = {}
    # Getting the type of 'fh' (line 139)
    fh_240604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 4), 'fh', False)
    # Obtaining the member 'write' of a type (line 139)
    write_240605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 139, 4), fh_240604, 'write')
    # Calling write(args, kwargs) (line 139)
    write_call_result_240608 = invoke(stypy.reporting.localization.Localization(__file__, 139, 4), write_240605, *[line_240606], **kwargs_240607)
    
    
    # Call to write(...): (line 140)
    # Processing the call arguments (line 140)
    unicode_240611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 13), 'unicode', u'%\n')
    # Processing the call keyword arguments (line 140)
    kwargs_240612 = {}
    # Getting the type of 'fh' (line 140)
    fh_240609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 4), 'fh', False)
    # Obtaining the member 'write' of a type (line 140)
    write_240610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 140, 4), fh_240609, 'write')
    # Calling write(args, kwargs) (line 140)
    write_call_result_240613 = invoke(stypy.reporting.localization.Localization(__file__, 140, 4), write_240610, *[unicode_240611], **kwargs_240612)
    
    
    # ################# End of 'writeln(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'writeln' in the type store
    # Getting the type of 'stypy_return_type' (line 136)
    stypy_return_type_240614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_240614)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'writeln'
    return stypy_return_type_240614

# Assigning a type to the variable 'writeln' (line 136)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 0), 'writeln', writeln)

@norecursion
def _font_properties_str(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_font_properties_str'
    module_type_store = module_type_store.open_function_context('_font_properties_str', 143, 0, False)
    
    # Passed parameters checking function
    _font_properties_str.stypy_localization = localization
    _font_properties_str.stypy_type_of_self = None
    _font_properties_str.stypy_type_store = module_type_store
    _font_properties_str.stypy_function_name = '_font_properties_str'
    _font_properties_str.stypy_param_names_list = ['prop']
    _font_properties_str.stypy_varargs_param_name = None
    _font_properties_str.stypy_kwargs_param_name = None
    _font_properties_str.stypy_call_defaults = defaults
    _font_properties_str.stypy_call_varargs = varargs
    _font_properties_str.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_font_properties_str', ['prop'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_font_properties_str', localization, ['prop'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_font_properties_str(...)' code ##################

    
    # Assigning a List to a Name (line 145):
    
    # Assigning a List to a Name (line 145):
    
    # Assigning a List to a Name (line 145):
    
    # Obtaining an instance of the builtin type 'list' (line 145)
    list_240615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 145, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 145)
    
    # Assigning a type to the variable 'commands' (line 145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 145, 4), 'commands', list_240615)
    
    # Assigning a Dict to a Name (line 147):
    
    # Assigning a Dict to a Name (line 147):
    
    # Assigning a Dict to a Name (line 147):
    
    # Obtaining an instance of the builtin type 'dict' (line 147)
    dict_240616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 15), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 147)
    # Adding element type (key, value) (line 147)
    unicode_240617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 16), 'unicode', u'serif')
    unicode_240618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 25), 'unicode', u'\\rmfamily')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 15), dict_240616, (unicode_240617, unicode_240618))
    # Adding element type (key, value) (line 147)
    unicode_240619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 39), 'unicode', u'sans')
    unicode_240620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 47), 'unicode', u'\\sffamily')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 15), dict_240616, (unicode_240619, unicode_240620))
    # Adding element type (key, value) (line 147)
    unicode_240621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 16), 'unicode', u'sans-serif')
    unicode_240622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 30), 'unicode', u'\\sffamily')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 15), dict_240616, (unicode_240621, unicode_240622))
    # Adding element type (key, value) (line 147)
    unicode_240623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 44), 'unicode', u'monospace')
    unicode_240624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 57), 'unicode', u'\\ttfamily')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 15), dict_240616, (unicode_240623, unicode_240624))
    
    # Assigning a type to the variable 'families' (line 147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 4), 'families', dict_240616)
    
    # Assigning a Subscript to a Name (line 149):
    
    # Assigning a Subscript to a Name (line 149):
    
    # Assigning a Subscript to a Name (line 149):
    
    # Obtaining the type of the subscript
    int_240625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 149, 31), 'int')
    
    # Call to get_family(...): (line 149)
    # Processing the call keyword arguments (line 149)
    kwargs_240628 = {}
    # Getting the type of 'prop' (line 149)
    prop_240626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 13), 'prop', False)
    # Obtaining the member 'get_family' of a type (line 149)
    get_family_240627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 149, 13), prop_240626, 'get_family')
    # Calling get_family(args, kwargs) (line 149)
    get_family_call_result_240629 = invoke(stypy.reporting.localization.Localization(__file__, 149, 13), get_family_240627, *[], **kwargs_240628)
    
    # Obtaining the member '__getitem__' of a type (line 149)
    getitem___240630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 149, 13), get_family_call_result_240629, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 149)
    subscript_call_result_240631 = invoke(stypy.reporting.localization.Localization(__file__, 149, 13), getitem___240630, int_240625)
    
    # Assigning a type to the variable 'family' (line 149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 149, 4), 'family', subscript_call_result_240631)
    
    
    # Getting the type of 'family' (line 150)
    family_240632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 7), 'family')
    # Getting the type of 'families' (line 150)
    families_240633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 17), 'families')
    # Applying the binary operator 'in' (line 150)
    result_contains_240634 = python_operator(stypy.reporting.localization.Localization(__file__, 150, 7), 'in', family_240632, families_240633)
    
    # Testing the type of an if condition (line 150)
    if_condition_240635 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 150, 4), result_contains_240634)
    # Assigning a type to the variable 'if_condition_240635' (line 150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 4), 'if_condition_240635', if_condition_240635)
    # SSA begins for if statement (line 150)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 151)
    # Processing the call arguments (line 151)
    
    # Obtaining the type of the subscript
    # Getting the type of 'family' (line 151)
    family_240638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 33), 'family', False)
    # Getting the type of 'families' (line 151)
    families_240639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 24), 'families', False)
    # Obtaining the member '__getitem__' of a type (line 151)
    getitem___240640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 24), families_240639, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 151)
    subscript_call_result_240641 = invoke(stypy.reporting.localization.Localization(__file__, 151, 24), getitem___240640, family_240638)
    
    # Processing the call keyword arguments (line 151)
    kwargs_240642 = {}
    # Getting the type of 'commands' (line 151)
    commands_240636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 8), 'commands', False)
    # Obtaining the member 'append' of a type (line 151)
    append_240637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 8), commands_240636, 'append')
    # Calling append(args, kwargs) (line 151)
    append_call_result_240643 = invoke(stypy.reporting.localization.Localization(__file__, 151, 8), append_240637, *[subscript_call_result_240641], **kwargs_240642)
    
    # SSA branch for the else part of an if statement (line 150)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'family' (line 152)
    family_240644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 9), 'family')
    # Getting the type of 'system_fonts' (line 152)
    system_fonts_240645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 19), 'system_fonts')
    # Applying the binary operator 'in' (line 152)
    result_contains_240646 = python_operator(stypy.reporting.localization.Localization(__file__, 152, 9), 'in', family_240644, system_fonts_240645)
    
    
    
    # Call to get_texcommand(...): (line 152)
    # Processing the call keyword arguments (line 152)
    kwargs_240648 = {}
    # Getting the type of 'get_texcommand' (line 152)
    get_texcommand_240647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 36), 'get_texcommand', False)
    # Calling get_texcommand(args, kwargs) (line 152)
    get_texcommand_call_result_240649 = invoke(stypy.reporting.localization.Localization(__file__, 152, 36), get_texcommand_240647, *[], **kwargs_240648)
    
    unicode_240650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 152, 56), 'unicode', u'pdflatex')
    # Applying the binary operator '!=' (line 152)
    result_ne_240651 = python_operator(stypy.reporting.localization.Localization(__file__, 152, 36), '!=', get_texcommand_call_result_240649, unicode_240650)
    
    # Applying the binary operator 'and' (line 152)
    result_and_keyword_240652 = python_operator(stypy.reporting.localization.Localization(__file__, 152, 9), 'and', result_contains_240646, result_ne_240651)
    
    # Testing the type of an if condition (line 152)
    if_condition_240653 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 152, 9), result_and_keyword_240652)
    # Assigning a type to the variable 'if_condition_240653' (line 152)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 9), 'if_condition_240653', if_condition_240653)
    # SSA begins for if statement (line 152)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 153)
    # Processing the call arguments (line 153)
    unicode_240656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 153, 24), 'unicode', u'\\setmainfont{%s}\\rmfamily')
    # Getting the type of 'family' (line 153)
    family_240657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 55), 'family', False)
    # Applying the binary operator '%' (line 153)
    result_mod_240658 = python_operator(stypy.reporting.localization.Localization(__file__, 153, 24), '%', unicode_240656, family_240657)
    
    # Processing the call keyword arguments (line 153)
    kwargs_240659 = {}
    # Getting the type of 'commands' (line 153)
    commands_240654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 8), 'commands', False)
    # Obtaining the member 'append' of a type (line 153)
    append_240655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 8), commands_240654, 'append')
    # Calling append(args, kwargs) (line 153)
    append_call_result_240660 = invoke(stypy.reporting.localization.Localization(__file__, 153, 8), append_240655, *[result_mod_240658], **kwargs_240659)
    
    # SSA branch for the else part of an if statement (line 152)
    module_type_store.open_ssa_branch('else')
    pass
    # SSA join for if statement (line 152)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 150)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 157):
    
    # Assigning a Call to a Name (line 157):
    
    # Assigning a Call to a Name (line 157):
    
    # Call to get_size_in_points(...): (line 157)
    # Processing the call keyword arguments (line 157)
    kwargs_240663 = {}
    # Getting the type of 'prop' (line 157)
    prop_240661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 11), 'prop', False)
    # Obtaining the member 'get_size_in_points' of a type (line 157)
    get_size_in_points_240662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 11), prop_240661, 'get_size_in_points')
    # Calling get_size_in_points(args, kwargs) (line 157)
    get_size_in_points_call_result_240664 = invoke(stypy.reporting.localization.Localization(__file__, 157, 11), get_size_in_points_240662, *[], **kwargs_240663)
    
    # Assigning a type to the variable 'size' (line 157)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 4), 'size', get_size_in_points_call_result_240664)
    
    # Call to append(...): (line 158)
    # Processing the call arguments (line 158)
    unicode_240667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 158, 20), 'unicode', u'\\fontsize{%f}{%f}')
    
    # Obtaining an instance of the builtin type 'tuple' (line 158)
    tuple_240668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 158, 44), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 158)
    # Adding element type (line 158)
    # Getting the type of 'size' (line 158)
    size_240669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 44), 'size', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 158, 44), tuple_240668, size_240669)
    # Adding element type (line 158)
    # Getting the type of 'size' (line 158)
    size_240670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 50), 'size', False)
    float_240671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 158, 57), 'float')
    # Applying the binary operator '*' (line 158)
    result_mul_240672 = python_operator(stypy.reporting.localization.Localization(__file__, 158, 50), '*', size_240670, float_240671)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 158, 44), tuple_240668, result_mul_240672)
    
    # Applying the binary operator '%' (line 158)
    result_mod_240673 = python_operator(stypy.reporting.localization.Localization(__file__, 158, 20), '%', unicode_240667, tuple_240668)
    
    # Processing the call keyword arguments (line 158)
    kwargs_240674 = {}
    # Getting the type of 'commands' (line 158)
    commands_240665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 4), 'commands', False)
    # Obtaining the member 'append' of a type (line 158)
    append_240666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 4), commands_240665, 'append')
    # Calling append(args, kwargs) (line 158)
    append_call_result_240675 = invoke(stypy.reporting.localization.Localization(__file__, 158, 4), append_240666, *[result_mod_240673], **kwargs_240674)
    
    
    # Assigning a Dict to a Name (line 160):
    
    # Assigning a Dict to a Name (line 160):
    
    # Assigning a Dict to a Name (line 160):
    
    # Obtaining an instance of the builtin type 'dict' (line 160)
    dict_240676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 13), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 160)
    # Adding element type (key, value) (line 160)
    unicode_240677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 14), 'unicode', u'normal')
    unicode_240678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 24), 'unicode', u'')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 13), dict_240676, (unicode_240677, unicode_240678))
    # Adding element type (key, value) (line 160)
    unicode_240679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 29), 'unicode', u'italic')
    unicode_240680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 39), 'unicode', u'\\itshape')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 13), dict_240676, (unicode_240679, unicode_240680))
    # Adding element type (key, value) (line 160)
    unicode_240681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 52), 'unicode', u'oblique')
    unicode_240682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 63), 'unicode', u'\\slshape')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 13), dict_240676, (unicode_240681, unicode_240682))
    
    # Assigning a type to the variable 'styles' (line 160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 4), 'styles', dict_240676)
    
    # Call to append(...): (line 161)
    # Processing the call arguments (line 161)
    
    # Obtaining the type of the subscript
    
    # Call to get_style(...): (line 161)
    # Processing the call keyword arguments (line 161)
    kwargs_240687 = {}
    # Getting the type of 'prop' (line 161)
    prop_240685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 27), 'prop', False)
    # Obtaining the member 'get_style' of a type (line 161)
    get_style_240686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 27), prop_240685, 'get_style')
    # Calling get_style(args, kwargs) (line 161)
    get_style_call_result_240688 = invoke(stypy.reporting.localization.Localization(__file__, 161, 27), get_style_240686, *[], **kwargs_240687)
    
    # Getting the type of 'styles' (line 161)
    styles_240689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 20), 'styles', False)
    # Obtaining the member '__getitem__' of a type (line 161)
    getitem___240690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 20), styles_240689, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 161)
    subscript_call_result_240691 = invoke(stypy.reporting.localization.Localization(__file__, 161, 20), getitem___240690, get_style_call_result_240688)
    
    # Processing the call keyword arguments (line 161)
    kwargs_240692 = {}
    # Getting the type of 'commands' (line 161)
    commands_240683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 4), 'commands', False)
    # Obtaining the member 'append' of a type (line 161)
    append_240684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 4), commands_240683, 'append')
    # Calling append(args, kwargs) (line 161)
    append_call_result_240693 = invoke(stypy.reporting.localization.Localization(__file__, 161, 4), append_240684, *[subscript_call_result_240691], **kwargs_240692)
    
    
    # Assigning a List to a Name (line 163):
    
    # Assigning a List to a Name (line 163):
    
    # Assigning a List to a Name (line 163):
    
    # Obtaining an instance of the builtin type 'list' (line 163)
    list_240694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 163)
    # Adding element type (line 163)
    unicode_240695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 18), 'unicode', u'semibold')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 17), list_240694, unicode_240695)
    # Adding element type (line 163)
    unicode_240696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 30), 'unicode', u'demibold')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 17), list_240694, unicode_240696)
    # Adding element type (line 163)
    unicode_240697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 42), 'unicode', u'demi')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 17), list_240694, unicode_240697)
    # Adding element type (line 163)
    unicode_240698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 50), 'unicode', u'bold')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 17), list_240694, unicode_240698)
    # Adding element type (line 163)
    unicode_240699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 58), 'unicode', u'heavy')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 17), list_240694, unicode_240699)
    # Adding element type (line 163)
    unicode_240700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 18), 'unicode', u'extra bold')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 17), list_240694, unicode_240700)
    # Adding element type (line 163)
    unicode_240701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 32), 'unicode', u'black')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 17), list_240694, unicode_240701)
    
    # Assigning a type to the variable 'boldstyles' (line 163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 4), 'boldstyles', list_240694)
    
    
    
    # Call to get_weight(...): (line 165)
    # Processing the call keyword arguments (line 165)
    kwargs_240704 = {}
    # Getting the type of 'prop' (line 165)
    prop_240702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 7), 'prop', False)
    # Obtaining the member 'get_weight' of a type (line 165)
    get_weight_240703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 7), prop_240702, 'get_weight')
    # Calling get_weight(args, kwargs) (line 165)
    get_weight_call_result_240705 = invoke(stypy.reporting.localization.Localization(__file__, 165, 7), get_weight_240703, *[], **kwargs_240704)
    
    # Getting the type of 'boldstyles' (line 165)
    boldstyles_240706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 28), 'boldstyles')
    # Applying the binary operator 'in' (line 165)
    result_contains_240707 = python_operator(stypy.reporting.localization.Localization(__file__, 165, 7), 'in', get_weight_call_result_240705, boldstyles_240706)
    
    # Testing the type of an if condition (line 165)
    if_condition_240708 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 165, 4), result_contains_240707)
    # Assigning a type to the variable 'if_condition_240708' (line 165)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 4), 'if_condition_240708', if_condition_240708)
    # SSA begins for if statement (line 165)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 166)
    # Processing the call arguments (line 166)
    unicode_240711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 166, 24), 'unicode', u'\\bfseries')
    # Processing the call keyword arguments (line 166)
    kwargs_240712 = {}
    # Getting the type of 'commands' (line 166)
    commands_240709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 8), 'commands', False)
    # Obtaining the member 'append' of a type (line 166)
    append_240710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 8), commands_240709, 'append')
    # Calling append(args, kwargs) (line 166)
    append_call_result_240713 = invoke(stypy.reporting.localization.Localization(__file__, 166, 8), append_240710, *[unicode_240711], **kwargs_240712)
    
    # SSA join for if statement (line 165)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 168)
    # Processing the call arguments (line 168)
    unicode_240716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 168, 20), 'unicode', u'\\selectfont')
    # Processing the call keyword arguments (line 168)
    kwargs_240717 = {}
    # Getting the type of 'commands' (line 168)
    commands_240714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 4), 'commands', False)
    # Obtaining the member 'append' of a type (line 168)
    append_240715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 4), commands_240714, 'append')
    # Calling append(args, kwargs) (line 168)
    append_call_result_240718 = invoke(stypy.reporting.localization.Localization(__file__, 168, 4), append_240715, *[unicode_240716], **kwargs_240717)
    
    
    # Call to join(...): (line 169)
    # Processing the call arguments (line 169)
    # Getting the type of 'commands' (line 169)
    commands_240721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 19), 'commands', False)
    # Processing the call keyword arguments (line 169)
    kwargs_240722 = {}
    unicode_240719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 11), 'unicode', u'')
    # Obtaining the member 'join' of a type (line 169)
    join_240720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 11), unicode_240719, 'join')
    # Calling join(args, kwargs) (line 169)
    join_call_result_240723 = invoke(stypy.reporting.localization.Localization(__file__, 169, 11), join_240720, *[commands_240721], **kwargs_240722)
    
    # Assigning a type to the variable 'stypy_return_type' (line 169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 4), 'stypy_return_type', join_call_result_240723)
    
    # ################# End of '_font_properties_str(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_font_properties_str' in the type store
    # Getting the type of 'stypy_return_type' (line 143)
    stypy_return_type_240724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_240724)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_font_properties_str'
    return stypy_return_type_240724

# Assigning a type to the variable '_font_properties_str' (line 143)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 0), '_font_properties_str', _font_properties_str)

@norecursion
def make_pdf_to_png_converter(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'make_pdf_to_png_converter'
    module_type_store = module_type_store.open_function_context('make_pdf_to_png_converter', 172, 0, False)
    
    # Passed parameters checking function
    make_pdf_to_png_converter.stypy_localization = localization
    make_pdf_to_png_converter.stypy_type_of_self = None
    make_pdf_to_png_converter.stypy_type_store = module_type_store
    make_pdf_to_png_converter.stypy_function_name = 'make_pdf_to_png_converter'
    make_pdf_to_png_converter.stypy_param_names_list = []
    make_pdf_to_png_converter.stypy_varargs_param_name = None
    make_pdf_to_png_converter.stypy_kwargs_param_name = None
    make_pdf_to_png_converter.stypy_call_defaults = defaults
    make_pdf_to_png_converter.stypy_call_varargs = varargs
    make_pdf_to_png_converter.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'make_pdf_to_png_converter', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'make_pdf_to_png_converter', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'make_pdf_to_png_converter(...)' code ##################

    unicode_240725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, (-1)), 'unicode', u'\n    Returns a function that converts a pdf file to a png file.\n    ')
    
    # Assigning a List to a Name (line 177):
    
    # Assigning a List to a Name (line 177):
    
    # Assigning a List to a Name (line 177):
    
    # Obtaining an instance of the builtin type 'list' (line 177)
    list_240726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 177, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 177)
    
    # Assigning a type to the variable 'tools_available' (line 177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 4), 'tools_available', list_240726)
    
    
    # SSA begins for try-except statement (line 179)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to check_output(...): (line 180)
    # Processing the call arguments (line 180)
    
    # Obtaining an instance of the builtin type 'list' (line 180)
    list_240728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 180)
    # Adding element type (line 180)
    
    # Call to str(...): (line 180)
    # Processing the call arguments (line 180)
    unicode_240730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, 26), 'unicode', u'pdftocairo')
    # Processing the call keyword arguments (line 180)
    kwargs_240731 = {}
    # Getting the type of 'str' (line 180)
    str_240729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 22), 'str', False)
    # Calling str(args, kwargs) (line 180)
    str_call_result_240732 = invoke(stypy.reporting.localization.Localization(__file__, 180, 22), str_240729, *[unicode_240730], **kwargs_240731)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 180, 21), list_240728, str_call_result_240732)
    # Adding element type (line 180)
    unicode_240733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, 41), 'unicode', u'-v')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 180, 21), list_240728, unicode_240733)
    
    # Processing the call keyword arguments (line 180)
    # Getting the type of 'subprocess' (line 180)
    subprocess_240734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 55), 'subprocess', False)
    # Obtaining the member 'STDOUT' of a type (line 180)
    STDOUT_240735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 180, 55), subprocess_240734, 'STDOUT')
    keyword_240736 = STDOUT_240735
    kwargs_240737 = {'stderr': keyword_240736}
    # Getting the type of 'check_output' (line 180)
    check_output_240727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 8), 'check_output', False)
    # Calling check_output(args, kwargs) (line 180)
    check_output_call_result_240738 = invoke(stypy.reporting.localization.Localization(__file__, 180, 8), check_output_240727, *[list_240728], **kwargs_240737)
    
    
    # Call to append(...): (line 181)
    # Processing the call arguments (line 181)
    unicode_240741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 31), 'unicode', u'pdftocairo')
    # Processing the call keyword arguments (line 181)
    kwargs_240742 = {}
    # Getting the type of 'tools_available' (line 181)
    tools_available_240739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 8), 'tools_available', False)
    # Obtaining the member 'append' of a type (line 181)
    append_240740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 8), tools_available_240739, 'append')
    # Calling append(args, kwargs) (line 181)
    append_call_result_240743 = invoke(stypy.reporting.localization.Localization(__file__, 181, 8), append_240740, *[unicode_240741], **kwargs_240742)
    
    # SSA branch for the except part of a try statement (line 179)
    # SSA branch for the except '<any exception>' branch of a try statement (line 179)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 179)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 185):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to checkdep_ghostscript(...): (line 185)
    # Processing the call keyword arguments (line 185)
    kwargs_240746 = {}
    # Getting the type of 'mpl' (line 185)
    mpl_240744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 14), 'mpl', False)
    # Obtaining the member 'checkdep_ghostscript' of a type (line 185)
    checkdep_ghostscript_240745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 14), mpl_240744, 'checkdep_ghostscript')
    # Calling checkdep_ghostscript(args, kwargs) (line 185)
    checkdep_ghostscript_call_result_240747 = invoke(stypy.reporting.localization.Localization(__file__, 185, 14), checkdep_ghostscript_240745, *[], **kwargs_240746)
    
    # Assigning a type to the variable 'call_assignment_240230' (line 185)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 4), 'call_assignment_240230', checkdep_ghostscript_call_result_240747)
    
    # Assigning a Call to a Name (line 185):
    
    # Assigning a Call to a Name (line 185):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_240750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 4), 'int')
    # Processing the call keyword arguments
    kwargs_240751 = {}
    # Getting the type of 'call_assignment_240230' (line 185)
    call_assignment_240230_240748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 4), 'call_assignment_240230', False)
    # Obtaining the member '__getitem__' of a type (line 185)
    getitem___240749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 4), call_assignment_240230_240748, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_240752 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___240749, *[int_240750], **kwargs_240751)
    
    # Assigning a type to the variable 'call_assignment_240231' (line 185)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 4), 'call_assignment_240231', getitem___call_result_240752)
    
    # Assigning a Name to a Name (line 185):
    
    # Assigning a Name to a Name (line 185):
    # Getting the type of 'call_assignment_240231' (line 185)
    call_assignment_240231_240753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 4), 'call_assignment_240231')
    # Assigning a type to the variable 'gs' (line 185)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 4), 'gs', call_assignment_240231_240753)
    
    # Assigning a Call to a Name (line 185):
    
    # Assigning a Call to a Name (line 185):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_240756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 4), 'int')
    # Processing the call keyword arguments
    kwargs_240757 = {}
    # Getting the type of 'call_assignment_240230' (line 185)
    call_assignment_240230_240754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 4), 'call_assignment_240230', False)
    # Obtaining the member '__getitem__' of a type (line 185)
    getitem___240755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 4), call_assignment_240230_240754, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_240758 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___240755, *[int_240756], **kwargs_240757)
    
    # Assigning a type to the variable 'call_assignment_240232' (line 185)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 4), 'call_assignment_240232', getitem___call_result_240758)
    
    # Assigning a Name to a Name (line 185):
    
    # Assigning a Name to a Name (line 185):
    # Getting the type of 'call_assignment_240232' (line 185)
    call_assignment_240232_240759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 4), 'call_assignment_240232')
    # Assigning a type to the variable 'ver' (line 185)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 8), 'ver', call_assignment_240232_240759)
    
    # Getting the type of 'gs' (line 186)
    gs_240760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 7), 'gs')
    # Testing the type of an if condition (line 186)
    if_condition_240761 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 186, 4), gs_240760)
    # Assigning a type to the variable 'if_condition_240761' (line 186)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 4), 'if_condition_240761', if_condition_240761)
    # SSA begins for if statement (line 186)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 187)
    # Processing the call arguments (line 187)
    unicode_240764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, 31), 'unicode', u'gs')
    # Processing the call keyword arguments (line 187)
    kwargs_240765 = {}
    # Getting the type of 'tools_available' (line 187)
    tools_available_240762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 8), 'tools_available', False)
    # Obtaining the member 'append' of a type (line 187)
    append_240763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 8), tools_available_240762, 'append')
    # Calling append(args, kwargs) (line 187)
    append_call_result_240766 = invoke(stypy.reporting.localization.Localization(__file__, 187, 8), append_240763, *[unicode_240764], **kwargs_240765)
    
    # SSA join for if statement (line 186)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    unicode_240767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 7), 'unicode', u'pdftocairo')
    # Getting the type of 'tools_available' (line 190)
    tools_available_240768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 23), 'tools_available')
    # Applying the binary operator 'in' (line 190)
    result_contains_240769 = python_operator(stypy.reporting.localization.Localization(__file__, 190, 7), 'in', unicode_240767, tools_available_240768)
    
    # Testing the type of an if condition (line 190)
    if_condition_240770 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 190, 4), result_contains_240769)
    # Assigning a type to the variable 'if_condition_240770' (line 190)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 4), 'if_condition_240770', if_condition_240770)
    # SSA begins for if statement (line 190)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

    @norecursion
    def cairo_convert(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'cairo_convert'
        module_type_store = module_type_store.open_function_context('cairo_convert', 191, 8, False)
        
        # Passed parameters checking function
        cairo_convert.stypy_localization = localization
        cairo_convert.stypy_type_of_self = None
        cairo_convert.stypy_type_store = module_type_store
        cairo_convert.stypy_function_name = 'cairo_convert'
        cairo_convert.stypy_param_names_list = ['pdffile', 'pngfile', 'dpi']
        cairo_convert.stypy_varargs_param_name = None
        cairo_convert.stypy_kwargs_param_name = None
        cairo_convert.stypy_call_defaults = defaults
        cairo_convert.stypy_call_varargs = varargs
        cairo_convert.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'cairo_convert', ['pdffile', 'pngfile', 'dpi'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cairo_convert', localization, ['pdffile', 'pngfile', 'dpi'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cairo_convert(...)' code ##################

        
        # Assigning a List to a Name (line 192):
        
        # Assigning a List to a Name (line 192):
        
        # Assigning a List to a Name (line 192):
        
        # Obtaining an instance of the builtin type 'list' (line 192)
        list_240771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 192)
        # Adding element type (line 192)
        
        # Call to str(...): (line 192)
        # Processing the call arguments (line 192)
        unicode_240773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 23), 'unicode', u'pdftocairo')
        # Processing the call keyword arguments (line 192)
        kwargs_240774 = {}
        # Getting the type of 'str' (line 192)
        str_240772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 19), 'str', False)
        # Calling str(args, kwargs) (line 192)
        str_call_result_240775 = invoke(stypy.reporting.localization.Localization(__file__, 192, 19), str_240772, *[unicode_240773], **kwargs_240774)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 192, 18), list_240771, str_call_result_240775)
        # Adding element type (line 192)
        unicode_240776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 38), 'unicode', u'-singlefile')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 192, 18), list_240771, unicode_240776)
        # Adding element type (line 192)
        unicode_240777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 53), 'unicode', u'-png')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 192, 18), list_240771, unicode_240777)
        # Adding element type (line 192)
        unicode_240778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 61), 'unicode', u'-r')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 192, 18), list_240771, unicode_240778)
        # Adding element type (line 192)
        unicode_240779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 67), 'unicode', u'%d')
        # Getting the type of 'dpi' (line 192)
        dpi_240780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 74), 'dpi')
        # Applying the binary operator '%' (line 192)
        result_mod_240781 = python_operator(stypy.reporting.localization.Localization(__file__, 192, 67), '%', unicode_240779, dpi_240780)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 192, 18), list_240771, result_mod_240781)
        # Adding element type (line 192)
        # Getting the type of 'pdffile' (line 193)
        pdffile_240782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 19), 'pdffile')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 192, 18), list_240771, pdffile_240782)
        # Adding element type (line 192)
        
        # Obtaining the type of the subscript
        int_240783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 54), 'int')
        
        # Call to splitext(...): (line 193)
        # Processing the call arguments (line 193)
        # Getting the type of 'pngfile' (line 193)
        pngfile_240787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 45), 'pngfile', False)
        # Processing the call keyword arguments (line 193)
        kwargs_240788 = {}
        # Getting the type of 'os' (line 193)
        os_240784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 28), 'os', False)
        # Obtaining the member 'path' of a type (line 193)
        path_240785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 28), os_240784, 'path')
        # Obtaining the member 'splitext' of a type (line 193)
        splitext_240786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 28), path_240785, 'splitext')
        # Calling splitext(args, kwargs) (line 193)
        splitext_call_result_240789 = invoke(stypy.reporting.localization.Localization(__file__, 193, 28), splitext_240786, *[pngfile_240787], **kwargs_240788)
        
        # Obtaining the member '__getitem__' of a type (line 193)
        getitem___240790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 28), splitext_call_result_240789, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 193)
        subscript_call_result_240791 = invoke(stypy.reporting.localization.Localization(__file__, 193, 28), getitem___240790, int_240783)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 192, 18), list_240771, subscript_call_result_240791)
        
        # Assigning a type to the variable 'cmd' (line 192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 12), 'cmd', list_240771)
        
        # Call to check_output(...): (line 194)
        # Processing the call arguments (line 194)
        # Getting the type of 'cmd' (line 194)
        cmd_240793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 25), 'cmd', False)
        # Processing the call keyword arguments (line 194)
        # Getting the type of 'subprocess' (line 194)
        subprocess_240794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 37), 'subprocess', False)
        # Obtaining the member 'STDOUT' of a type (line 194)
        STDOUT_240795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 37), subprocess_240794, 'STDOUT')
        keyword_240796 = STDOUT_240795
        kwargs_240797 = {'stderr': keyword_240796}
        # Getting the type of 'check_output' (line 194)
        check_output_240792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 12), 'check_output', False)
        # Calling check_output(args, kwargs) (line 194)
        check_output_call_result_240798 = invoke(stypy.reporting.localization.Localization(__file__, 194, 12), check_output_240792, *[cmd_240793], **kwargs_240797)
        
        
        # ################# End of 'cairo_convert(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cairo_convert' in the type store
        # Getting the type of 'stypy_return_type' (line 191)
        stypy_return_type_240799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 8), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_240799)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cairo_convert'
        return stypy_return_type_240799

    # Assigning a type to the variable 'cairo_convert' (line 191)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 191, 8), 'cairo_convert', cairo_convert)
    # Getting the type of 'cairo_convert' (line 195)
    cairo_convert_240800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 15), 'cairo_convert')
    # Assigning a type to the variable 'stypy_return_type' (line 195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 8), 'stypy_return_type', cairo_convert_240800)
    # SSA branch for the else part of an if statement (line 190)
    module_type_store.open_ssa_branch('else')
    
    
    unicode_240801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 9), 'unicode', u'gs')
    # Getting the type of 'tools_available' (line 196)
    tools_available_240802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 17), 'tools_available')
    # Applying the binary operator 'in' (line 196)
    result_contains_240803 = python_operator(stypy.reporting.localization.Localization(__file__, 196, 9), 'in', unicode_240801, tools_available_240802)
    
    # Testing the type of an if condition (line 196)
    if_condition_240804 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 196, 9), result_contains_240803)
    # Assigning a type to the variable 'if_condition_240804' (line 196)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 196, 9), 'if_condition_240804', if_condition_240804)
    # SSA begins for if statement (line 196)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

    @norecursion
    def gs_convert(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'gs_convert'
        module_type_store = module_type_store.open_function_context('gs_convert', 197, 8, False)
        
        # Passed parameters checking function
        gs_convert.stypy_localization = localization
        gs_convert.stypy_type_of_self = None
        gs_convert.stypy_type_store = module_type_store
        gs_convert.stypy_function_name = 'gs_convert'
        gs_convert.stypy_param_names_list = ['pdffile', 'pngfile', 'dpi']
        gs_convert.stypy_varargs_param_name = None
        gs_convert.stypy_kwargs_param_name = None
        gs_convert.stypy_call_defaults = defaults
        gs_convert.stypy_call_varargs = varargs
        gs_convert.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'gs_convert', ['pdffile', 'pngfile', 'dpi'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'gs_convert', localization, ['pdffile', 'pngfile', 'dpi'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'gs_convert(...)' code ##################

        
        # Assigning a List to a Name (line 198):
        
        # Assigning a List to a Name (line 198):
        
        # Assigning a List to a Name (line 198):
        
        # Obtaining an instance of the builtin type 'list' (line 198)
        list_240805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 198)
        # Adding element type (line 198)
        
        # Call to str(...): (line 198)
        # Processing the call arguments (line 198)
        # Getting the type of 'gs' (line 198)
        gs_240807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 23), 'gs', False)
        # Processing the call keyword arguments (line 198)
        kwargs_240808 = {}
        # Getting the type of 'str' (line 198)
        str_240806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 19), 'str', False)
        # Calling str(args, kwargs) (line 198)
        str_call_result_240809 = invoke(stypy.reporting.localization.Localization(__file__, 198, 19), str_240806, *[gs_240807], **kwargs_240808)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 18), list_240805, str_call_result_240809)
        # Adding element type (line 198)
        unicode_240810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 28), 'unicode', u'-dQUIET')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 18), list_240805, unicode_240810)
        # Adding element type (line 198)
        unicode_240811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 39), 'unicode', u'-dSAFER')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 18), list_240805, unicode_240811)
        # Adding element type (line 198)
        unicode_240812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 50), 'unicode', u'-dBATCH')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 18), list_240805, unicode_240812)
        # Adding element type (line 198)
        unicode_240813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 61), 'unicode', u'-dNOPAUSE')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 18), list_240805, unicode_240813)
        # Adding element type (line 198)
        unicode_240814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 74), 'unicode', u'-dNOPROMPT')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 18), list_240805, unicode_240814)
        # Adding element type (line 198)
        unicode_240815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 199, 19), 'unicode', u'-sDEVICE=png16m')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 18), list_240805, unicode_240815)
        # Adding element type (line 198)
        unicode_240816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 199, 38), 'unicode', u'-dUseCIEColor')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 18), list_240805, unicode_240816)
        # Adding element type (line 198)
        unicode_240817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 199, 55), 'unicode', u'-dTextAlphaBits=4')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 18), list_240805, unicode_240817)
        # Adding element type (line 198)
        unicode_240818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 200, 19), 'unicode', u'-dGraphicsAlphaBits=4')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 18), list_240805, unicode_240818)
        # Adding element type (line 198)
        unicode_240819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 200, 44), 'unicode', u'-dDOINTERPOLATE')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 18), list_240805, unicode_240819)
        # Adding element type (line 198)
        unicode_240820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 200, 63), 'unicode', u'-sOutputFile=%s')
        # Getting the type of 'pngfile' (line 200)
        pngfile_240821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 83), 'pngfile')
        # Applying the binary operator '%' (line 200)
        result_mod_240822 = python_operator(stypy.reporting.localization.Localization(__file__, 200, 63), '%', unicode_240820, pngfile_240821)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 18), list_240805, result_mod_240822)
        # Adding element type (line 198)
        unicode_240823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 19), 'unicode', u'-r%d')
        # Getting the type of 'dpi' (line 201)
        dpi_240824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 28), 'dpi')
        # Applying the binary operator '%' (line 201)
        result_mod_240825 = python_operator(stypy.reporting.localization.Localization(__file__, 201, 19), '%', unicode_240823, dpi_240824)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 18), list_240805, result_mod_240825)
        # Adding element type (line 198)
        # Getting the type of 'pdffile' (line 201)
        pdffile_240826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 33), 'pdffile')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 18), list_240805, pdffile_240826)
        
        # Assigning a type to the variable 'cmd' (line 198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 12), 'cmd', list_240805)
        
        # Call to check_output(...): (line 202)
        # Processing the call arguments (line 202)
        # Getting the type of 'cmd' (line 202)
        cmd_240828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 25), 'cmd', False)
        # Processing the call keyword arguments (line 202)
        # Getting the type of 'subprocess' (line 202)
        subprocess_240829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 37), 'subprocess', False)
        # Obtaining the member 'STDOUT' of a type (line 202)
        STDOUT_240830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 37), subprocess_240829, 'STDOUT')
        keyword_240831 = STDOUT_240830
        kwargs_240832 = {'stderr': keyword_240831}
        # Getting the type of 'check_output' (line 202)
        check_output_240827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 12), 'check_output', False)
        # Calling check_output(args, kwargs) (line 202)
        check_output_call_result_240833 = invoke(stypy.reporting.localization.Localization(__file__, 202, 12), check_output_240827, *[cmd_240828], **kwargs_240832)
        
        
        # ################# End of 'gs_convert(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'gs_convert' in the type store
        # Getting the type of 'stypy_return_type' (line 197)
        stypy_return_type_240834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 8), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_240834)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'gs_convert'
        return stypy_return_type_240834

    # Assigning a type to the variable 'gs_convert' (line 197)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 8), 'gs_convert', gs_convert)
    # Getting the type of 'gs_convert' (line 203)
    gs_convert_240835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 15), 'gs_convert')
    # Assigning a type to the variable 'stypy_return_type' (line 203)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 203, 8), 'stypy_return_type', gs_convert_240835)
    # SSA branch for the else part of an if statement (line 196)
    module_type_store.open_ssa_branch('else')
    
    # Call to RuntimeError(...): (line 205)
    # Processing the call arguments (line 205)
    unicode_240837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 205, 27), 'unicode', u'No suitable pdf to png renderer found.')
    # Processing the call keyword arguments (line 205)
    kwargs_240838 = {}
    # Getting the type of 'RuntimeError' (line 205)
    RuntimeError_240836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 14), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 205)
    RuntimeError_call_result_240839 = invoke(stypy.reporting.localization.Localization(__file__, 205, 14), RuntimeError_240836, *[unicode_240837], **kwargs_240838)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 205, 8), RuntimeError_call_result_240839, 'raise parameter', BaseException)
    # SSA join for if statement (line 196)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 190)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'make_pdf_to_png_converter(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'make_pdf_to_png_converter' in the type store
    # Getting the type of 'stypy_return_type' (line 172)
    stypy_return_type_240840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_240840)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'make_pdf_to_png_converter'
    return stypy_return_type_240840

# Assigning a type to the variable 'make_pdf_to_png_converter' (line 172)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 0), 'make_pdf_to_png_converter', make_pdf_to_png_converter)
# Declaration of the 'LatexError' class
# Getting the type of 'Exception' (line 208)
Exception_240841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 17), 'Exception')

class LatexError(Exception_240841, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_240842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 209, 45), 'unicode', u'')
        defaults = [unicode_240842]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 209, 4, False)
        # Assigning a type to the variable 'self' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LatexError.__init__', ['message', 'latex_output'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['message', 'latex_output'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 210)
        # Processing the call arguments (line 210)
        # Getting the type of 'self' (line 210)
        self_240845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 27), 'self', False)
        # Getting the type of 'message' (line 210)
        message_240846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 33), 'message', False)
        # Processing the call keyword arguments (line 210)
        kwargs_240847 = {}
        # Getting the type of 'Exception' (line 210)
        Exception_240843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 8), 'Exception', False)
        # Obtaining the member '__init__' of a type (line 210)
        init___240844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 8), Exception_240843, '__init__')
        # Calling __init__(args, kwargs) (line 210)
        init___call_result_240848 = invoke(stypy.reporting.localization.Localization(__file__, 210, 8), init___240844, *[self_240845, message_240846], **kwargs_240847)
        
        
        # Assigning a Name to a Attribute (line 211):
        
        # Assigning a Name to a Attribute (line 211):
        
        # Assigning a Name to a Attribute (line 211):
        # Getting the type of 'latex_output' (line 211)
        latex_output_240849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 28), 'latex_output')
        # Getting the type of 'self' (line 211)
        self_240850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'self')
        # Setting the type of the member 'latex_output' of a type (line 211)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 8), self_240850, 'latex_output', latex_output_240849)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'LatexError' (line 208)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 0), 'LatexError', LatexError)
# Declaration of the 'LatexManagerFactory' class

class LatexManagerFactory(object, ):
    
    # Assigning a Name to a Name (line 215):
    
    # Assigning a Name to a Name (line 215):

    @staticmethod
    @norecursion
    def get_latex_manager(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_latex_manager'
        module_type_store = module_type_store.open_function_context('get_latex_manager', 217, 4, False)
        
        # Passed parameters checking function
        LatexManagerFactory.get_latex_manager.__dict__.__setitem__('stypy_localization', localization)
        LatexManagerFactory.get_latex_manager.__dict__.__setitem__('stypy_type_of_self', None)
        LatexManagerFactory.get_latex_manager.__dict__.__setitem__('stypy_type_store', module_type_store)
        LatexManagerFactory.get_latex_manager.__dict__.__setitem__('stypy_function_name', 'get_latex_manager')
        LatexManagerFactory.get_latex_manager.__dict__.__setitem__('stypy_param_names_list', [])
        LatexManagerFactory.get_latex_manager.__dict__.__setitem__('stypy_varargs_param_name', None)
        LatexManagerFactory.get_latex_manager.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LatexManagerFactory.get_latex_manager.__dict__.__setitem__('stypy_call_defaults', defaults)
        LatexManagerFactory.get_latex_manager.__dict__.__setitem__('stypy_call_varargs', varargs)
        LatexManagerFactory.get_latex_manager.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LatexManagerFactory.get_latex_manager.__dict__.__setitem__('stypy_declared_arg_number', 0)
        arguments = process_argument_values(localization, None, module_type_store, 'get_latex_manager', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_latex_manager', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_latex_manager(...)' code ##################

        
        # Assigning a Call to a Name (line 219):
        
        # Assigning a Call to a Name (line 219):
        
        # Assigning a Call to a Name (line 219):
        
        # Call to get_texcommand(...): (line 219)
        # Processing the call keyword arguments (line 219)
        kwargs_240852 = {}
        # Getting the type of 'get_texcommand' (line 219)
        get_texcommand_240851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 21), 'get_texcommand', False)
        # Calling get_texcommand(args, kwargs) (line 219)
        get_texcommand_call_result_240853 = invoke(stypy.reporting.localization.Localization(__file__, 219, 21), get_texcommand_240851, *[], **kwargs_240852)
        
        # Assigning a type to the variable 'texcommand' (line 219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 8), 'texcommand', get_texcommand_call_result_240853)
        
        # Assigning a Call to a Name (line 220):
        
        # Assigning a Call to a Name (line 220):
        
        # Assigning a Call to a Name (line 220):
        
        # Call to _build_latex_header(...): (line 220)
        # Processing the call keyword arguments (line 220)
        kwargs_240856 = {}
        # Getting the type of 'LatexManager' (line 220)
        LatexManager_240854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 23), 'LatexManager', False)
        # Obtaining the member '_build_latex_header' of a type (line 220)
        _build_latex_header_240855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 23), LatexManager_240854, '_build_latex_header')
        # Calling _build_latex_header(args, kwargs) (line 220)
        _build_latex_header_call_result_240857 = invoke(stypy.reporting.localization.Localization(__file__, 220, 23), _build_latex_header_240855, *[], **kwargs_240856)
        
        # Assigning a type to the variable 'latex_header' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 8), 'latex_header', _build_latex_header_call_result_240857)
        
        # Assigning a Attribute to a Name (line 221):
        
        # Assigning a Attribute to a Name (line 221):
        
        # Assigning a Attribute to a Name (line 221):
        # Getting the type of 'LatexManagerFactory' (line 221)
        LatexManagerFactory_240858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 15), 'LatexManagerFactory')
        # Obtaining the member 'previous_instance' of a type (line 221)
        previous_instance_240859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 15), LatexManagerFactory_240858, 'previous_instance')
        # Assigning a type to the variable 'prev' (line 221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'prev', previous_instance_240859)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'prev' (line 224)
        prev_240860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 12), 'prev')
        
        # Getting the type of 'prev' (line 224)
        prev_240861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 21), 'prev')
        # Obtaining the member 'latex_header' of a type (line 224)
        latex_header_240862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 21), prev_240861, 'latex_header')
        # Getting the type of 'latex_header' (line 224)
        latex_header_240863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 42), 'latex_header')
        # Applying the binary operator '==' (line 224)
        result_eq_240864 = python_operator(stypy.reporting.localization.Localization(__file__, 224, 21), '==', latex_header_240862, latex_header_240863)
        
        # Applying the binary operator 'and' (line 224)
        result_and_keyword_240865 = python_operator(stypy.reporting.localization.Localization(__file__, 224, 12), 'and', prev_240860, result_eq_240864)
        
        # Getting the type of 'prev' (line 225)
        prev_240866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 20), 'prev')
        # Obtaining the member 'texcommand' of a type (line 225)
        texcommand_240867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 20), prev_240866, 'texcommand')
        # Getting the type of 'texcommand' (line 225)
        texcommand_240868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 39), 'texcommand')
        # Applying the binary operator '==' (line 225)
        result_eq_240869 = python_operator(stypy.reporting.localization.Localization(__file__, 225, 20), '==', texcommand_240867, texcommand_240868)
        
        # Applying the binary operator 'and' (line 224)
        result_and_keyword_240870 = python_operator(stypy.reporting.localization.Localization(__file__, 224, 12), 'and', result_and_keyword_240865, result_eq_240869)
        
        # Testing the type of an if condition (line 224)
        if_condition_240871 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 224, 8), result_and_keyword_240870)
        # Assigning a type to the variable 'if_condition_240871' (line 224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 8), 'if_condition_240871', if_condition_240871)
        # SSA begins for if statement (line 224)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Obtaining the type of the subscript
        unicode_240872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 24), 'unicode', u'pgf.debug')
        # Getting the type of 'rcParams' (line 226)
        rcParams_240873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 15), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 226)
        getitem___240874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 15), rcParams_240873, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 226)
        subscript_call_result_240875 = invoke(stypy.reporting.localization.Localization(__file__, 226, 15), getitem___240874, unicode_240872)
        
        # Testing the type of an if condition (line 226)
        if_condition_240876 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 226, 12), subscript_call_result_240875)
        # Assigning a type to the variable 'if_condition_240876' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 12), 'if_condition_240876', if_condition_240876)
        # SSA begins for if statement (line 226)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to print(...): (line 227)
        # Processing the call arguments (line 227)
        unicode_240878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 22), 'unicode', u'reusing LatexManager')
        # Processing the call keyword arguments (line 227)
        kwargs_240879 = {}
        # Getting the type of 'print' (line 227)
        print_240877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 16), 'print', False)
        # Calling print(args, kwargs) (line 227)
        print_call_result_240880 = invoke(stypy.reporting.localization.Localization(__file__, 227, 16), print_240877, *[unicode_240878], **kwargs_240879)
        
        # SSA join for if statement (line 226)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'prev' (line 228)
        prev_240881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 19), 'prev')
        # Assigning a type to the variable 'stypy_return_type' (line 228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 12), 'stypy_return_type', prev_240881)
        # SSA branch for the else part of an if statement (line 224)
        module_type_store.open_ssa_branch('else')
        
        
        # Obtaining the type of the subscript
        unicode_240882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 230, 24), 'unicode', u'pgf.debug')
        # Getting the type of 'rcParams' (line 230)
        rcParams_240883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 15), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 230)
        getitem___240884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 15), rcParams_240883, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 230)
        subscript_call_result_240885 = invoke(stypy.reporting.localization.Localization(__file__, 230, 15), getitem___240884, unicode_240882)
        
        # Testing the type of an if condition (line 230)
        if_condition_240886 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 230, 12), subscript_call_result_240885)
        # Assigning a type to the variable 'if_condition_240886' (line 230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 12), 'if_condition_240886', if_condition_240886)
        # SSA begins for if statement (line 230)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to print(...): (line 231)
        # Processing the call arguments (line 231)
        unicode_240888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 22), 'unicode', u'creating LatexManager')
        # Processing the call keyword arguments (line 231)
        kwargs_240889 = {}
        # Getting the type of 'print' (line 231)
        print_240887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 16), 'print', False)
        # Calling print(args, kwargs) (line 231)
        print_call_result_240890 = invoke(stypy.reporting.localization.Localization(__file__, 231, 16), print_240887, *[unicode_240888], **kwargs_240889)
        
        # SSA join for if statement (line 230)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 232):
        
        # Assigning a Call to a Name (line 232):
        
        # Assigning a Call to a Name (line 232):
        
        # Call to LatexManager(...): (line 232)
        # Processing the call keyword arguments (line 232)
        kwargs_240892 = {}
        # Getting the type of 'LatexManager' (line 232)
        LatexManager_240891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 23), 'LatexManager', False)
        # Calling LatexManager(args, kwargs) (line 232)
        LatexManager_call_result_240893 = invoke(stypy.reporting.localization.Localization(__file__, 232, 23), LatexManager_240891, *[], **kwargs_240892)
        
        # Assigning a type to the variable 'new_inst' (line 232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 12), 'new_inst', LatexManager_call_result_240893)
        
        # Assigning a Name to a Attribute (line 233):
        
        # Assigning a Name to a Attribute (line 233):
        
        # Assigning a Name to a Attribute (line 233):
        # Getting the type of 'new_inst' (line 233)
        new_inst_240894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 52), 'new_inst')
        # Getting the type of 'LatexManagerFactory' (line 233)
        LatexManagerFactory_240895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 12), 'LatexManagerFactory')
        # Setting the type of the member 'previous_instance' of a type (line 233)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 12), LatexManagerFactory_240895, 'previous_instance', new_inst_240894)
        # Getting the type of 'new_inst' (line 234)
        new_inst_240896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 19), 'new_inst')
        # Assigning a type to the variable 'stypy_return_type' (line 234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 12), 'stypy_return_type', new_inst_240896)
        # SSA join for if statement (line 224)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_latex_manager(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_latex_manager' in the type store
        # Getting the type of 'stypy_return_type' (line 217)
        stypy_return_type_240897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_240897)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_latex_manager'
        return stypy_return_type_240897


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 214, 0, False)
        # Assigning a type to the variable 'self' (line 215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LatexManagerFactory.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'LatexManagerFactory' (line 214)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 0), 'LatexManagerFactory', LatexManagerFactory)

# Assigning a Name to a Name (line 215):
# Getting the type of 'None' (line 215)
None_240898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 24), 'None')
# Getting the type of 'LatexManagerFactory'
LatexManagerFactory_240899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LatexManagerFactory')
# Setting the type of the member 'previous_instance' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LatexManagerFactory_240899, 'previous_instance', None_240898)
# Declaration of the 'LatexManager' class

class LatexManager(object, ):
    unicode_240900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 242, (-1)), 'unicode', u'\n    The LatexManager opens an instance of the LaTeX application for\n    determining the metrics of text elements. The LaTeX environment can be\n    modified by setting fonts and/or a custem preamble in the rc parameters.\n    ')
    
    # Assigning a Call to a Name (line 243):
    
    # Assigning a Call to a Name (line 243):

    @staticmethod
    @norecursion
    def _build_latex_header(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_build_latex_header'
        module_type_store = module_type_store.open_function_context('_build_latex_header', 245, 4, False)
        
        # Passed parameters checking function
        LatexManager._build_latex_header.__dict__.__setitem__('stypy_localization', localization)
        LatexManager._build_latex_header.__dict__.__setitem__('stypy_type_of_self', None)
        LatexManager._build_latex_header.__dict__.__setitem__('stypy_type_store', module_type_store)
        LatexManager._build_latex_header.__dict__.__setitem__('stypy_function_name', '_build_latex_header')
        LatexManager._build_latex_header.__dict__.__setitem__('stypy_param_names_list', [])
        LatexManager._build_latex_header.__dict__.__setitem__('stypy_varargs_param_name', None)
        LatexManager._build_latex_header.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LatexManager._build_latex_header.__dict__.__setitem__('stypy_call_defaults', defaults)
        LatexManager._build_latex_header.__dict__.__setitem__('stypy_call_varargs', varargs)
        LatexManager._build_latex_header.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LatexManager._build_latex_header.__dict__.__setitem__('stypy_declared_arg_number', 0)
        arguments = process_argument_values(localization, None, module_type_store, '_build_latex_header', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_build_latex_header', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_build_latex_header(...)' code ##################

        
        # Assigning a Call to a Name (line 247):
        
        # Assigning a Call to a Name (line 247):
        
        # Assigning a Call to a Name (line 247):
        
        # Call to get_preamble(...): (line 247)
        # Processing the call keyword arguments (line 247)
        kwargs_240902 = {}
        # Getting the type of 'get_preamble' (line 247)
        get_preamble_240901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 25), 'get_preamble', False)
        # Calling get_preamble(args, kwargs) (line 247)
        get_preamble_call_result_240903 = invoke(stypy.reporting.localization.Localization(__file__, 247, 25), get_preamble_240901, *[], **kwargs_240902)
        
        # Assigning a type to the variable 'latex_preamble' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 8), 'latex_preamble', get_preamble_call_result_240903)
        
        # Assigning a Call to a Name (line 248):
        
        # Assigning a Call to a Name (line 248):
        
        # Assigning a Call to a Name (line 248):
        
        # Call to get_fontspec(...): (line 248)
        # Processing the call keyword arguments (line 248)
        kwargs_240905 = {}
        # Getting the type of 'get_fontspec' (line 248)
        get_fontspec_240904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 25), 'get_fontspec', False)
        # Calling get_fontspec(args, kwargs) (line 248)
        get_fontspec_call_result_240906 = invoke(stypy.reporting.localization.Localization(__file__, 248, 25), get_fontspec_240904, *[], **kwargs_240905)
        
        # Assigning a type to the variable 'latex_fontspec' (line 248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 8), 'latex_fontspec', get_fontspec_call_result_240906)
        
        # Assigning a List to a Name (line 252):
        
        # Assigning a List to a Name (line 252):
        
        # Assigning a List to a Name (line 252):
        
        # Obtaining an instance of the builtin type 'list' (line 252)
        list_240907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 252)
        # Adding element type (line 252)
        unicode_240908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 24), 'unicode', u'\\documentclass{minimal}')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 252, 23), list_240907, unicode_240908)
        # Adding element type (line 252)
        # Getting the type of 'latex_preamble' (line 253)
        latex_preamble_240909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 24), 'latex_preamble')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 252, 23), list_240907, latex_preamble_240909)
        # Adding element type (line 252)
        # Getting the type of 'latex_fontspec' (line 254)
        latex_fontspec_240910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 24), 'latex_fontspec')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 252, 23), list_240907, latex_fontspec_240910)
        # Adding element type (line 252)
        unicode_240911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 24), 'unicode', u'\\begin{document}')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 252, 23), list_240907, unicode_240911)
        # Adding element type (line 252)
        unicode_240912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 24), 'unicode', u'text $math \\mu$')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 252, 23), list_240907, unicode_240912)
        # Adding element type (line 252)
        unicode_240913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 24), 'unicode', u'\\typeout{pgf_backend_query_start}')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 252, 23), list_240907, unicode_240913)
        
        # Assigning a type to the variable 'latex_header' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 8), 'latex_header', list_240907)
        
        # Call to join(...): (line 258)
        # Processing the call arguments (line 258)
        # Getting the type of 'latex_header' (line 258)
        latex_header_240916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 25), 'latex_header', False)
        # Processing the call keyword arguments (line 258)
        kwargs_240917 = {}
        unicode_240914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 15), 'unicode', u'\n')
        # Obtaining the member 'join' of a type (line 258)
        join_240915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 15), unicode_240914, 'join')
        # Calling join(args, kwargs) (line 258)
        join_call_result_240918 = invoke(stypy.reporting.localization.Localization(__file__, 258, 15), join_240915, *[latex_header_240916], **kwargs_240917)
        
        # Assigning a type to the variable 'stypy_return_type' (line 258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'stypy_return_type', join_call_result_240918)
        
        # ################# End of '_build_latex_header(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_build_latex_header' in the type store
        # Getting the type of 'stypy_return_type' (line 245)
        stypy_return_type_240919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_240919)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_build_latex_header'
        return stypy_return_type_240919


    @staticmethod
    @norecursion
    def _cleanup_remaining_instances(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_cleanup_remaining_instances'
        module_type_store = module_type_store.open_function_context('_cleanup_remaining_instances', 260, 4, False)
        
        # Passed parameters checking function
        LatexManager._cleanup_remaining_instances.__dict__.__setitem__('stypy_localization', localization)
        LatexManager._cleanup_remaining_instances.__dict__.__setitem__('stypy_type_of_self', None)
        LatexManager._cleanup_remaining_instances.__dict__.__setitem__('stypy_type_store', module_type_store)
        LatexManager._cleanup_remaining_instances.__dict__.__setitem__('stypy_function_name', '_cleanup_remaining_instances')
        LatexManager._cleanup_remaining_instances.__dict__.__setitem__('stypy_param_names_list', [])
        LatexManager._cleanup_remaining_instances.__dict__.__setitem__('stypy_varargs_param_name', None)
        LatexManager._cleanup_remaining_instances.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LatexManager._cleanup_remaining_instances.__dict__.__setitem__('stypy_call_defaults', defaults)
        LatexManager._cleanup_remaining_instances.__dict__.__setitem__('stypy_call_varargs', varargs)
        LatexManager._cleanup_remaining_instances.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LatexManager._cleanup_remaining_instances.__dict__.__setitem__('stypy_declared_arg_number', 0)
        arguments = process_argument_values(localization, None, module_type_store, '_cleanup_remaining_instances', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_cleanup_remaining_instances', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_cleanup_remaining_instances(...)' code ##################

        
        # Assigning a Call to a Name (line 262):
        
        # Assigning a Call to a Name (line 262):
        
        # Assigning a Call to a Name (line 262):
        
        # Call to list(...): (line 262)
        # Processing the call arguments (line 262)
        # Getting the type of 'LatexManager' (line 262)
        LatexManager_240921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 33), 'LatexManager', False)
        # Obtaining the member '_unclean_instances' of a type (line 262)
        _unclean_instances_240922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 262, 33), LatexManager_240921, '_unclean_instances')
        # Processing the call keyword arguments (line 262)
        kwargs_240923 = {}
        # Getting the type of 'list' (line 262)
        list_240920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 28), 'list', False)
        # Calling list(args, kwargs) (line 262)
        list_call_result_240924 = invoke(stypy.reporting.localization.Localization(__file__, 262, 28), list_240920, *[_unclean_instances_240922], **kwargs_240923)
        
        # Assigning a type to the variable 'unclean_instances' (line 262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 262, 8), 'unclean_instances', list_call_result_240924)
        
        # Getting the type of 'unclean_instances' (line 263)
        unclean_instances_240925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 29), 'unclean_instances')
        # Testing the type of a for loop iterable (line 263)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 263, 8), unclean_instances_240925)
        # Getting the type of the for loop variable (line 263)
        for_loop_var_240926 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 263, 8), unclean_instances_240925)
        # Assigning a type to the variable 'latex_manager' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'latex_manager', for_loop_var_240926)
        # SSA begins for a for statement (line 263)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to _cleanup(...): (line 264)
        # Processing the call keyword arguments (line 264)
        kwargs_240929 = {}
        # Getting the type of 'latex_manager' (line 264)
        latex_manager_240927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 12), 'latex_manager', False)
        # Obtaining the member '_cleanup' of a type (line 264)
        _cleanup_240928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 264, 12), latex_manager_240927, '_cleanup')
        # Calling _cleanup(args, kwargs) (line 264)
        _cleanup_call_result_240930 = invoke(stypy.reporting.localization.Localization(__file__, 264, 12), _cleanup_240928, *[], **kwargs_240929)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_cleanup_remaining_instances(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_cleanup_remaining_instances' in the type store
        # Getting the type of 'stypy_return_type' (line 260)
        stypy_return_type_240931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_240931)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_cleanup_remaining_instances'
        return stypy_return_type_240931


    @norecursion
    def _stdin_writeln(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stdin_writeln'
        module_type_store = module_type_store.open_function_context('_stdin_writeln', 266, 4, False)
        # Assigning a type to the variable 'self' (line 267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LatexManager._stdin_writeln.__dict__.__setitem__('stypy_localization', localization)
        LatexManager._stdin_writeln.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LatexManager._stdin_writeln.__dict__.__setitem__('stypy_type_store', module_type_store)
        LatexManager._stdin_writeln.__dict__.__setitem__('stypy_function_name', 'LatexManager._stdin_writeln')
        LatexManager._stdin_writeln.__dict__.__setitem__('stypy_param_names_list', ['s'])
        LatexManager._stdin_writeln.__dict__.__setitem__('stypy_varargs_param_name', None)
        LatexManager._stdin_writeln.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LatexManager._stdin_writeln.__dict__.__setitem__('stypy_call_defaults', defaults)
        LatexManager._stdin_writeln.__dict__.__setitem__('stypy_call_varargs', varargs)
        LatexManager._stdin_writeln.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LatexManager._stdin_writeln.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LatexManager._stdin_writeln', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_stdin_writeln', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_stdin_writeln(...)' code ##################

        
        # Call to write(...): (line 267)
        # Processing the call arguments (line 267)
        # Getting the type of 's' (line 267)
        s_240935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 36), 's', False)
        # Processing the call keyword arguments (line 267)
        kwargs_240936 = {}
        # Getting the type of 'self' (line 267)
        self_240932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 8), 'self', False)
        # Obtaining the member 'latex_stdin_utf8' of a type (line 267)
        latex_stdin_utf8_240933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 8), self_240932, 'latex_stdin_utf8')
        # Obtaining the member 'write' of a type (line 267)
        write_240934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 8), latex_stdin_utf8_240933, 'write')
        # Calling write(args, kwargs) (line 267)
        write_call_result_240937 = invoke(stypy.reporting.localization.Localization(__file__, 267, 8), write_240934, *[s_240935], **kwargs_240936)
        
        
        # Call to write(...): (line 268)
        # Processing the call arguments (line 268)
        unicode_240941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 36), 'unicode', u'\n')
        # Processing the call keyword arguments (line 268)
        kwargs_240942 = {}
        # Getting the type of 'self' (line 268)
        self_240938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'self', False)
        # Obtaining the member 'latex_stdin_utf8' of a type (line 268)
        latex_stdin_utf8_240939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 8), self_240938, 'latex_stdin_utf8')
        # Obtaining the member 'write' of a type (line 268)
        write_240940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 8), latex_stdin_utf8_240939, 'write')
        # Calling write(args, kwargs) (line 268)
        write_call_result_240943 = invoke(stypy.reporting.localization.Localization(__file__, 268, 8), write_240940, *[unicode_240941], **kwargs_240942)
        
        
        # Call to flush(...): (line 269)
        # Processing the call keyword arguments (line 269)
        kwargs_240947 = {}
        # Getting the type of 'self' (line 269)
        self_240944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 8), 'self', False)
        # Obtaining the member 'latex_stdin_utf8' of a type (line 269)
        latex_stdin_utf8_240945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 269, 8), self_240944, 'latex_stdin_utf8')
        # Obtaining the member 'flush' of a type (line 269)
        flush_240946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 269, 8), latex_stdin_utf8_240945, 'flush')
        # Calling flush(args, kwargs) (line 269)
        flush_call_result_240948 = invoke(stypy.reporting.localization.Localization(__file__, 269, 8), flush_240946, *[], **kwargs_240947)
        
        
        # ################# End of '_stdin_writeln(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_stdin_writeln' in the type store
        # Getting the type of 'stypy_return_type' (line 266)
        stypy_return_type_240949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_240949)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stdin_writeln'
        return stypy_return_type_240949


    @norecursion
    def _expect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_expect'
        module_type_store = module_type_store.open_function_context('_expect', 271, 4, False)
        # Assigning a type to the variable 'self' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LatexManager._expect.__dict__.__setitem__('stypy_localization', localization)
        LatexManager._expect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LatexManager._expect.__dict__.__setitem__('stypy_type_store', module_type_store)
        LatexManager._expect.__dict__.__setitem__('stypy_function_name', 'LatexManager._expect')
        LatexManager._expect.__dict__.__setitem__('stypy_param_names_list', ['s'])
        LatexManager._expect.__dict__.__setitem__('stypy_varargs_param_name', None)
        LatexManager._expect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LatexManager._expect.__dict__.__setitem__('stypy_call_defaults', defaults)
        LatexManager._expect.__dict__.__setitem__('stypy_call_varargs', varargs)
        LatexManager._expect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LatexManager._expect.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LatexManager._expect', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_expect', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_expect(...)' code ##################

        
        # Assigning a Call to a Name (line 272):
        
        # Assigning a Call to a Name (line 272):
        
        # Assigning a Call to a Name (line 272):
        
        # Call to encode(...): (line 272)
        # Processing the call arguments (line 272)
        unicode_240952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 23), 'unicode', u'utf8')
        # Processing the call keyword arguments (line 272)
        kwargs_240953 = {}
        # Getting the type of 's' (line 272)
        s_240950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 14), 's', False)
        # Obtaining the member 'encode' of a type (line 272)
        encode_240951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 14), s_240950, 'encode')
        # Calling encode(args, kwargs) (line 272)
        encode_call_result_240954 = invoke(stypy.reporting.localization.Localization(__file__, 272, 14), encode_240951, *[unicode_240952], **kwargs_240953)
        
        # Assigning a type to the variable 'exp' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 8), 'exp', encode_call_result_240954)
        
        # Assigning a Call to a Name (line 273):
        
        # Assigning a Call to a Name (line 273):
        
        # Assigning a Call to a Name (line 273):
        
        # Call to bytearray(...): (line 273)
        # Processing the call keyword arguments (line 273)
        kwargs_240956 = {}
        # Getting the type of 'bytearray' (line 273)
        bytearray_240955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 14), 'bytearray', False)
        # Calling bytearray(args, kwargs) (line 273)
        bytearray_call_result_240957 = invoke(stypy.reporting.localization.Localization(__file__, 273, 14), bytearray_240955, *[], **kwargs_240956)
        
        # Assigning a type to the variable 'buf' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'buf', bytearray_call_result_240957)
        
        # Getting the type of 'True' (line 274)
        True_240958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 14), 'True')
        # Testing the type of an if condition (line 274)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 274, 8), True_240958)
        # SSA begins for while statement (line 274)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a Call to a Name (line 275):
        
        # Assigning a Call to a Name (line 275):
        
        # Assigning a Call to a Name (line 275):
        
        # Call to read(...): (line 275)
        # Processing the call arguments (line 275)
        int_240963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 39), 'int')
        # Processing the call keyword arguments (line 275)
        kwargs_240964 = {}
        # Getting the type of 'self' (line 275)
        self_240959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 16), 'self', False)
        # Obtaining the member 'latex' of a type (line 275)
        latex_240960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 16), self_240959, 'latex')
        # Obtaining the member 'stdout' of a type (line 275)
        stdout_240961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 16), latex_240960, 'stdout')
        # Obtaining the member 'read' of a type (line 275)
        read_240962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 16), stdout_240961, 'read')
        # Calling read(args, kwargs) (line 275)
        read_call_result_240965 = invoke(stypy.reporting.localization.Localization(__file__, 275, 16), read_240962, *[int_240963], **kwargs_240964)
        
        # Assigning a type to the variable 'b' (line 275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 12), 'b', read_call_result_240965)
        
        # Getting the type of 'buf' (line 276)
        buf_240966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 12), 'buf')
        # Getting the type of 'b' (line 276)
        b_240967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 19), 'b')
        # Applying the binary operator '+=' (line 276)
        result_iadd_240968 = python_operator(stypy.reporting.localization.Localization(__file__, 276, 12), '+=', buf_240966, b_240967)
        # Assigning a type to the variable 'buf' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 12), 'buf', result_iadd_240968)
        
        
        
        
        # Obtaining the type of the subscript
        
        
        # Call to len(...): (line 277)
        # Processing the call arguments (line 277)
        # Getting the type of 'exp' (line 277)
        exp_240970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 24), 'exp', False)
        # Processing the call keyword arguments (line 277)
        kwargs_240971 = {}
        # Getting the type of 'len' (line 277)
        len_240969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 20), 'len', False)
        # Calling len(args, kwargs) (line 277)
        len_call_result_240972 = invoke(stypy.reporting.localization.Localization(__file__, 277, 20), len_240969, *[exp_240970], **kwargs_240971)
        
        # Applying the 'usub' unary operator (line 277)
        result___neg___240973 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 19), 'usub', len_call_result_240972)
        
        slice_240974 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 277, 15), result___neg___240973, None, None)
        # Getting the type of 'buf' (line 277)
        buf_240975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 15), 'buf')
        # Obtaining the member '__getitem__' of a type (line 277)
        getitem___240976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 15), buf_240975, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 277)
        subscript_call_result_240977 = invoke(stypy.reporting.localization.Localization(__file__, 277, 15), getitem___240976, slice_240974)
        
        # Getting the type of 'exp' (line 277)
        exp_240978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 34), 'exp')
        # Applying the binary operator '==' (line 277)
        result_eq_240979 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 15), '==', subscript_call_result_240977, exp_240978)
        
        # Testing the type of an if condition (line 277)
        if_condition_240980 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 277, 12), result_eq_240979)
        # Assigning a type to the variable 'if_condition_240980' (line 277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'if_condition_240980', if_condition_240980)
        # SSA begins for if statement (line 277)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 277)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 279)
        # Processing the call arguments (line 279)
        # Getting the type of 'b' (line 279)
        b_240982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 23), 'b', False)
        # Processing the call keyword arguments (line 279)
        kwargs_240983 = {}
        # Getting the type of 'len' (line 279)
        len_240981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 19), 'len', False)
        # Calling len(args, kwargs) (line 279)
        len_call_result_240984 = invoke(stypy.reporting.localization.Localization(__file__, 279, 19), len_240981, *[b_240982], **kwargs_240983)
        
        # Applying the 'not' unary operator (line 279)
        result_not__240985 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 15), 'not', len_call_result_240984)
        
        # Testing the type of an if condition (line 279)
        if_condition_240986 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 279, 12), result_not__240985)
        # Assigning a type to the variable 'if_condition_240986' (line 279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 12), 'if_condition_240986', if_condition_240986)
        # SSA begins for if statement (line 279)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to LatexError(...): (line 280)
        # Processing the call arguments (line 280)
        unicode_240988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 33), 'unicode', u'LaTeX process halted')
        
        # Call to decode(...): (line 280)
        # Processing the call arguments (line 280)
        unicode_240991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 68), 'unicode', u'utf8')
        # Processing the call keyword arguments (line 280)
        kwargs_240992 = {}
        # Getting the type of 'buf' (line 280)
        buf_240989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 57), 'buf', False)
        # Obtaining the member 'decode' of a type (line 280)
        decode_240990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 57), buf_240989, 'decode')
        # Calling decode(args, kwargs) (line 280)
        decode_call_result_240993 = invoke(stypy.reporting.localization.Localization(__file__, 280, 57), decode_240990, *[unicode_240991], **kwargs_240992)
        
        # Processing the call keyword arguments (line 280)
        kwargs_240994 = {}
        # Getting the type of 'LatexError' (line 280)
        LatexError_240987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 22), 'LatexError', False)
        # Calling LatexError(args, kwargs) (line 280)
        LatexError_call_result_240995 = invoke(stypy.reporting.localization.Localization(__file__, 280, 22), LatexError_240987, *[unicode_240988, decode_call_result_240993], **kwargs_240994)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 280, 16), LatexError_call_result_240995, 'raise parameter', BaseException)
        # SSA join for if statement (line 279)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for while statement (line 274)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to decode(...): (line 281)
        # Processing the call arguments (line 281)
        unicode_240998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 26), 'unicode', u'utf8')
        # Processing the call keyword arguments (line 281)
        kwargs_240999 = {}
        # Getting the type of 'buf' (line 281)
        buf_240996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 15), 'buf', False)
        # Obtaining the member 'decode' of a type (line 281)
        decode_240997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 15), buf_240996, 'decode')
        # Calling decode(args, kwargs) (line 281)
        decode_call_result_241000 = invoke(stypy.reporting.localization.Localization(__file__, 281, 15), decode_240997, *[unicode_240998], **kwargs_240999)
        
        # Assigning a type to the variable 'stypy_return_type' (line 281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 8), 'stypy_return_type', decode_call_result_241000)
        
        # ################# End of '_expect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_expect' in the type store
        # Getting the type of 'stypy_return_type' (line 271)
        stypy_return_type_241001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_241001)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_expect'
        return stypy_return_type_241001


    @norecursion
    def _expect_prompt(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_expect_prompt'
        module_type_store = module_type_store.open_function_context('_expect_prompt', 283, 4, False)
        # Assigning a type to the variable 'self' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LatexManager._expect_prompt.__dict__.__setitem__('stypy_localization', localization)
        LatexManager._expect_prompt.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LatexManager._expect_prompt.__dict__.__setitem__('stypy_type_store', module_type_store)
        LatexManager._expect_prompt.__dict__.__setitem__('stypy_function_name', 'LatexManager._expect_prompt')
        LatexManager._expect_prompt.__dict__.__setitem__('stypy_param_names_list', [])
        LatexManager._expect_prompt.__dict__.__setitem__('stypy_varargs_param_name', None)
        LatexManager._expect_prompt.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LatexManager._expect_prompt.__dict__.__setitem__('stypy_call_defaults', defaults)
        LatexManager._expect_prompt.__dict__.__setitem__('stypy_call_varargs', varargs)
        LatexManager._expect_prompt.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LatexManager._expect_prompt.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LatexManager._expect_prompt', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_expect_prompt', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_expect_prompt(...)' code ##################

        
        # Call to _expect(...): (line 284)
        # Processing the call arguments (line 284)
        unicode_241004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 284, 28), 'unicode', u'\n*')
        # Processing the call keyword arguments (line 284)
        kwargs_241005 = {}
        # Getting the type of 'self' (line 284)
        self_241002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 15), 'self', False)
        # Obtaining the member '_expect' of a type (line 284)
        _expect_241003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 15), self_241002, '_expect')
        # Calling _expect(args, kwargs) (line 284)
        _expect_call_result_241006 = invoke(stypy.reporting.localization.Localization(__file__, 284, 15), _expect_241003, *[unicode_241004], **kwargs_241005)
        
        # Assigning a type to the variable 'stypy_return_type' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 8), 'stypy_return_type', _expect_call_result_241006)
        
        # ################# End of '_expect_prompt(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_expect_prompt' in the type store
        # Getting the type of 'stypy_return_type' (line 283)
        stypy_return_type_241007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_241007)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_expect_prompt'
        return stypy_return_type_241007


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 286, 4, False)
        # Assigning a type to the variable 'self' (line 287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LatexManager.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Attribute to a Attribute (line 288):
        
        # Assigning a Attribute to a Attribute (line 288):
        
        # Assigning a Attribute to a Attribute (line 288):
        # Getting the type of 'os' (line 288)
        os_241008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 24), 'os')
        # Obtaining the member 'path' of a type (line 288)
        path_241009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 24), os_241008, 'path')
        # Getting the type of 'self' (line 288)
        self_241010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 8), 'self')
        # Setting the type of the member '_os_path' of a type (line 288)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 8), self_241010, '_os_path', path_241009)
        
        # Assigning a Name to a Attribute (line 289):
        
        # Assigning a Name to a Attribute (line 289):
        
        # Assigning a Name to a Attribute (line 289):
        # Getting the type of 'shutil' (line 289)
        shutil_241011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 23), 'shutil')
        # Getting the type of 'self' (line 289)
        self_241012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 8), 'self')
        # Setting the type of the member '_shutil' of a type (line 289)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 8), self_241012, '_shutil', shutil_241011)
        
        # Assigning a Subscript to a Attribute (line 290):
        
        # Assigning a Subscript to a Attribute (line 290):
        
        # Assigning a Subscript to a Attribute (line 290):
        
        # Obtaining the type of the subscript
        unicode_241013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 31), 'unicode', u'pgf.debug')
        # Getting the type of 'rcParams' (line 290)
        rcParams_241014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 22), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 290)
        getitem___241015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 22), rcParams_241014, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 290)
        subscript_call_result_241016 = invoke(stypy.reporting.localization.Localization(__file__, 290, 22), getitem___241015, unicode_241013)
        
        # Getting the type of 'self' (line 290)
        self_241017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 8), 'self')
        # Setting the type of the member '_debug' of a type (line 290)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 8), self_241017, '_debug', subscript_call_result_241016)
        
        # Assigning a Call to a Attribute (line 293):
        
        # Assigning a Call to a Attribute (line 293):
        
        # Assigning a Call to a Attribute (line 293):
        
        # Call to mkdtemp(...): (line 293)
        # Processing the call keyword arguments (line 293)
        unicode_241020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 46), 'unicode', u'mpl_pgf_lm_')
        keyword_241021 = unicode_241020
        kwargs_241022 = {'prefix': keyword_241021}
        # Getting the type of 'tempfile' (line 293)
        tempfile_241018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 22), 'tempfile', False)
        # Obtaining the member 'mkdtemp' of a type (line 293)
        mkdtemp_241019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 22), tempfile_241018, 'mkdtemp')
        # Calling mkdtemp(args, kwargs) (line 293)
        mkdtemp_call_result_241023 = invoke(stypy.reporting.localization.Localization(__file__, 293, 22), mkdtemp_241019, *[], **kwargs_241022)
        
        # Getting the type of 'self' (line 293)
        self_241024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 8), 'self')
        # Setting the type of the member 'tmpdir' of a type (line 293)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 8), self_241024, 'tmpdir', mkdtemp_call_result_241023)
        
        # Call to add(...): (line 294)
        # Processing the call arguments (line 294)
        # Getting the type of 'self' (line 294)
        self_241028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 44), 'self', False)
        # Processing the call keyword arguments (line 294)
        kwargs_241029 = {}
        # Getting the type of 'LatexManager' (line 294)
        LatexManager_241025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 8), 'LatexManager', False)
        # Obtaining the member '_unclean_instances' of a type (line 294)
        _unclean_instances_241026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 294, 8), LatexManager_241025, '_unclean_instances')
        # Obtaining the member 'add' of a type (line 294)
        add_241027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 294, 8), _unclean_instances_241026, 'add')
        # Calling add(args, kwargs) (line 294)
        add_call_result_241030 = invoke(stypy.reporting.localization.Localization(__file__, 294, 8), add_241027, *[self_241028], **kwargs_241029)
        
        
        # Assigning a Call to a Attribute (line 297):
        
        # Assigning a Call to a Attribute (line 297):
        
        # Assigning a Call to a Attribute (line 297):
        
        # Call to get_texcommand(...): (line 297)
        # Processing the call keyword arguments (line 297)
        kwargs_241032 = {}
        # Getting the type of 'get_texcommand' (line 297)
        get_texcommand_241031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 26), 'get_texcommand', False)
        # Calling get_texcommand(args, kwargs) (line 297)
        get_texcommand_call_result_241033 = invoke(stypy.reporting.localization.Localization(__file__, 297, 26), get_texcommand_241031, *[], **kwargs_241032)
        
        # Getting the type of 'self' (line 297)
        self_241034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'self')
        # Setting the type of the member 'texcommand' of a type (line 297)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 8), self_241034, 'texcommand', get_texcommand_call_result_241033)
        
        # Assigning a Call to a Attribute (line 298):
        
        # Assigning a Call to a Attribute (line 298):
        
        # Assigning a Call to a Attribute (line 298):
        
        # Call to _build_latex_header(...): (line 298)
        # Processing the call keyword arguments (line 298)
        kwargs_241037 = {}
        # Getting the type of 'LatexManager' (line 298)
        LatexManager_241035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 28), 'LatexManager', False)
        # Obtaining the member '_build_latex_header' of a type (line 298)
        _build_latex_header_241036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 28), LatexManager_241035, '_build_latex_header')
        # Calling _build_latex_header(args, kwargs) (line 298)
        _build_latex_header_call_result_241038 = invoke(stypy.reporting.localization.Localization(__file__, 298, 28), _build_latex_header_241036, *[], **kwargs_241037)
        
        # Getting the type of 'self' (line 298)
        self_241039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 'self')
        # Setting the type of the member 'latex_header' of a type (line 298)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 8), self_241039, 'latex_header', _build_latex_header_call_result_241038)
        
        # Assigning a Str to a Name (line 299):
        
        # Assigning a Str to a Name (line 299):
        
        # Assigning a Str to a Name (line 299):
        unicode_241040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 20), 'unicode', u'\n\\makeatletter\n\\@@end\n')
        # Assigning a type to the variable 'latex_end' (line 299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 8), 'latex_end', unicode_241040)
        
        
        # SSA begins for try-except statement (line 300)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 301):
        
        # Assigning a Call to a Name (line 301):
        
        # Assigning a Call to a Name (line 301):
        
        # Call to Popen(...): (line 301)
        # Processing the call arguments (line 301)
        
        # Obtaining an instance of the builtin type 'list' (line 301)
        list_241043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 301)
        # Adding element type (line 301)
        
        # Call to str(...): (line 301)
        # Processing the call arguments (line 301)
        # Getting the type of 'self' (line 301)
        self_241045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 42), 'self', False)
        # Obtaining the member 'texcommand' of a type (line 301)
        texcommand_241046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 42), self_241045, 'texcommand')
        # Processing the call keyword arguments (line 301)
        kwargs_241047 = {}
        # Getting the type of 'str' (line 301)
        str_241044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 38), 'str', False)
        # Calling str(args, kwargs) (line 301)
        str_call_result_241048 = invoke(stypy.reporting.localization.Localization(__file__, 301, 38), str_241044, *[texcommand_241046], **kwargs_241047)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 301, 37), list_241043, str_call_result_241048)
        # Adding element type (line 301)
        unicode_241049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 301, 60), 'unicode', u'-halt-on-error')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 301, 37), list_241043, unicode_241049)
        
        # Processing the call keyword arguments (line 301)
        # Getting the type of 'subprocess' (line 302)
        subprocess_241050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 43), 'subprocess', False)
        # Obtaining the member 'PIPE' of a type (line 302)
        PIPE_241051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 43), subprocess_241050, 'PIPE')
        keyword_241052 = PIPE_241051
        # Getting the type of 'subprocess' (line 303)
        subprocess_241053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 44), 'subprocess', False)
        # Obtaining the member 'PIPE' of a type (line 303)
        PIPE_241054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 303, 44), subprocess_241053, 'PIPE')
        keyword_241055 = PIPE_241054
        # Getting the type of 'self' (line 304)
        self_241056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 41), 'self', False)
        # Obtaining the member 'tmpdir' of a type (line 304)
        tmpdir_241057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 41), self_241056, 'tmpdir')
        keyword_241058 = tmpdir_241057
        kwargs_241059 = {'stdin': keyword_241052, 'cwd': keyword_241058, 'stdout': keyword_241055}
        # Getting the type of 'subprocess' (line 301)
        subprocess_241041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 20), 'subprocess', False)
        # Obtaining the member 'Popen' of a type (line 301)
        Popen_241042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 20), subprocess_241041, 'Popen')
        # Calling Popen(args, kwargs) (line 301)
        Popen_call_result_241060 = invoke(stypy.reporting.localization.Localization(__file__, 301, 20), Popen_241042, *[list_241043], **kwargs_241059)
        
        # Assigning a type to the variable 'latex' (line 301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 12), 'latex', Popen_call_result_241060)
        # SSA branch for the except part of a try statement (line 300)
        # SSA branch for the except 'OSError' branch of a try statement (line 300)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'OSError' (line 305)
        OSError_241061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 15), 'OSError')
        # Assigning a type to the variable 'e' (line 305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 8), 'e', OSError_241061)
        
        
        # Getting the type of 'e' (line 306)
        e_241062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 15), 'e')
        # Obtaining the member 'errno' of a type (line 306)
        errno_241063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 15), e_241062, 'errno')
        # Getting the type of 'errno' (line 306)
        errno_241064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 26), 'errno')
        # Obtaining the member 'ENOENT' of a type (line 306)
        ENOENT_241065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 26), errno_241064, 'ENOENT')
        # Applying the binary operator '==' (line 306)
        result_eq_241066 = python_operator(stypy.reporting.localization.Localization(__file__, 306, 15), '==', errno_241063, ENOENT_241065)
        
        # Testing the type of an if condition (line 306)
        if_condition_241067 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 306, 12), result_eq_241066)
        # Assigning a type to the variable 'if_condition_241067' (line 306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 12), 'if_condition_241067', if_condition_241067)
        # SSA begins for if statement (line 306)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 307)
        # Processing the call arguments (line 307)
        unicode_241069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 307, 35), 'unicode', u"Latex command not found. Install '%s' or change pgf.texsystem to the desired command.")
        # Getting the type of 'self' (line 309)
        self_241070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 22), 'self', False)
        # Obtaining the member 'texcommand' of a type (line 309)
        texcommand_241071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 22), self_241070, 'texcommand')
        # Applying the binary operator '%' (line 307)
        result_mod_241072 = python_operator(stypy.reporting.localization.Localization(__file__, 307, 35), '%', unicode_241069, texcommand_241071)
        
        # Processing the call keyword arguments (line 307)
        kwargs_241073 = {}
        # Getting the type of 'RuntimeError' (line 307)
        RuntimeError_241068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 22), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 307)
        RuntimeError_call_result_241074 = invoke(stypy.reporting.localization.Localization(__file__, 307, 22), RuntimeError_241068, *[result_mod_241072], **kwargs_241073)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 307, 16), RuntimeError_call_result_241074, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 306)
        module_type_store.open_ssa_branch('else')
        
        # Call to RuntimeError(...): (line 312)
        # Processing the call arguments (line 312)
        unicode_241076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 35), 'unicode', u"Error starting process '%s'")
        # Getting the type of 'self' (line 312)
        self_241077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 67), 'self', False)
        # Obtaining the member 'texcommand' of a type (line 312)
        texcommand_241078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 312, 67), self_241077, 'texcommand')
        # Applying the binary operator '%' (line 312)
        result_mod_241079 = python_operator(stypy.reporting.localization.Localization(__file__, 312, 35), '%', unicode_241076, texcommand_241078)
        
        # Processing the call keyword arguments (line 312)
        kwargs_241080 = {}
        # Getting the type of 'RuntimeError' (line 312)
        RuntimeError_241075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 22), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 312)
        RuntimeError_call_result_241081 = invoke(stypy.reporting.localization.Localization(__file__, 312, 22), RuntimeError_241075, *[result_mod_241079], **kwargs_241080)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 312, 16), RuntimeError_call_result_241081, 'raise parameter', BaseException)
        # SSA join for if statement (line 306)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for try-except statement (line 300)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 313):
        
        # Assigning a BinOp to a Name (line 313):
        
        # Assigning a BinOp to a Name (line 313):
        # Getting the type of 'self' (line 313)
        self_241082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 21), 'self')
        # Obtaining the member 'latex_header' of a type (line 313)
        latex_header_241083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 313, 21), self_241082, 'latex_header')
        # Getting the type of 'latex_end' (line 313)
        latex_end_241084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 41), 'latex_end')
        # Applying the binary operator '+' (line 313)
        result_add_241085 = python_operator(stypy.reporting.localization.Localization(__file__, 313, 21), '+', latex_header_241083, latex_end_241084)
        
        # Assigning a type to the variable 'test_input' (line 313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 8), 'test_input', result_add_241085)
        
        # Assigning a Call to a Tuple (line 314):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to communicate(...): (line 314)
        # Processing the call arguments (line 314)
        
        # Call to encode(...): (line 314)
        # Processing the call arguments (line 314)
        unicode_241090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 61), 'unicode', u'utf-8')
        # Processing the call keyword arguments (line 314)
        kwargs_241091 = {}
        # Getting the type of 'test_input' (line 314)
        test_input_241088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 43), 'test_input', False)
        # Obtaining the member 'encode' of a type (line 314)
        encode_241089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 43), test_input_241088, 'encode')
        # Calling encode(args, kwargs) (line 314)
        encode_call_result_241092 = invoke(stypy.reporting.localization.Localization(__file__, 314, 43), encode_241089, *[unicode_241090], **kwargs_241091)
        
        # Processing the call keyword arguments (line 314)
        kwargs_241093 = {}
        # Getting the type of 'latex' (line 314)
        latex_241086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 25), 'latex', False)
        # Obtaining the member 'communicate' of a type (line 314)
        communicate_241087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 25), latex_241086, 'communicate')
        # Calling communicate(args, kwargs) (line 314)
        communicate_call_result_241094 = invoke(stypy.reporting.localization.Localization(__file__, 314, 25), communicate_241087, *[encode_call_result_241092], **kwargs_241093)
        
        # Assigning a type to the variable 'call_assignment_240233' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'call_assignment_240233', communicate_call_result_241094)
        
        # Assigning a Call to a Name (line 314):
        
        # Assigning a Call to a Name (line 314):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_241097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 8), 'int')
        # Processing the call keyword arguments
        kwargs_241098 = {}
        # Getting the type of 'call_assignment_240233' (line 314)
        call_assignment_240233_241095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'call_assignment_240233', False)
        # Obtaining the member '__getitem__' of a type (line 314)
        getitem___241096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 8), call_assignment_240233_241095, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_241099 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___241096, *[int_241097], **kwargs_241098)
        
        # Assigning a type to the variable 'call_assignment_240234' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'call_assignment_240234', getitem___call_result_241099)
        
        # Assigning a Name to a Name (line 314):
        
        # Assigning a Name to a Name (line 314):
        # Getting the type of 'call_assignment_240234' (line 314)
        call_assignment_240234_241100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'call_assignment_240234')
        # Assigning a type to the variable 'stdout' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'stdout', call_assignment_240234_241100)
        
        # Assigning a Call to a Name (line 314):
        
        # Assigning a Call to a Name (line 314):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_241103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 8), 'int')
        # Processing the call keyword arguments
        kwargs_241104 = {}
        # Getting the type of 'call_assignment_240233' (line 314)
        call_assignment_240233_241101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'call_assignment_240233', False)
        # Obtaining the member '__getitem__' of a type (line 314)
        getitem___241102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 8), call_assignment_240233_241101, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_241105 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___241102, *[int_241103], **kwargs_241104)
        
        # Assigning a type to the variable 'call_assignment_240235' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'call_assignment_240235', getitem___call_result_241105)
        
        # Assigning a Name to a Name (line 314):
        
        # Assigning a Name to a Name (line 314):
        # Getting the type of 'call_assignment_240235' (line 314)
        call_assignment_240235_241106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'call_assignment_240235')
        # Assigning a type to the variable 'stderr' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 16), 'stderr', call_assignment_240235_241106)
        
        
        # Getting the type of 'latex' (line 315)
        latex_241107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 11), 'latex')
        # Obtaining the member 'returncode' of a type (line 315)
        returncode_241108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 11), latex_241107, 'returncode')
        int_241109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 31), 'int')
        # Applying the binary operator '!=' (line 315)
        result_ne_241110 = python_operator(stypy.reporting.localization.Localization(__file__, 315, 11), '!=', returncode_241108, int_241109)
        
        # Testing the type of an if condition (line 315)
        if_condition_241111 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 315, 8), result_ne_241110)
        # Assigning a type to the variable 'if_condition_241111' (line 315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 315, 8), 'if_condition_241111', if_condition_241111)
        # SSA begins for if statement (line 315)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to LatexError(...): (line 316)
        # Processing the call arguments (line 316)
        unicode_241113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 29), 'unicode', u'LaTeX returned an error, probably missing font or error in preamble:\n%s')
        # Getting the type of 'stdout' (line 316)
        stdout_241114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 106), 'stdout', False)
        # Applying the binary operator '%' (line 316)
        result_mod_241115 = python_operator(stypy.reporting.localization.Localization(__file__, 316, 29), '%', unicode_241113, stdout_241114)
        
        # Processing the call keyword arguments (line 316)
        kwargs_241116 = {}
        # Getting the type of 'LatexError' (line 316)
        LatexError_241112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 18), 'LatexError', False)
        # Calling LatexError(args, kwargs) (line 316)
        LatexError_call_result_241117 = invoke(stypy.reporting.localization.Localization(__file__, 316, 18), LatexError_241112, *[result_mod_241115], **kwargs_241116)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 316, 12), LatexError_call_result_241117, 'raise parameter', BaseException)
        # SSA join for if statement (line 315)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 319):
        
        # Assigning a Call to a Name (line 319):
        
        # Assigning a Call to a Name (line 319):
        
        # Call to Popen(...): (line 319)
        # Processing the call arguments (line 319)
        
        # Obtaining an instance of the builtin type 'list' (line 319)
        list_241120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 319)
        # Adding element type (line 319)
        
        # Call to str(...): (line 319)
        # Processing the call arguments (line 319)
        # Getting the type of 'self' (line 319)
        self_241122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 38), 'self', False)
        # Obtaining the member 'texcommand' of a type (line 319)
        texcommand_241123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 38), self_241122, 'texcommand')
        # Processing the call keyword arguments (line 319)
        kwargs_241124 = {}
        # Getting the type of 'str' (line 319)
        str_241121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 34), 'str', False)
        # Calling str(args, kwargs) (line 319)
        str_call_result_241125 = invoke(stypy.reporting.localization.Localization(__file__, 319, 34), str_241121, *[texcommand_241123], **kwargs_241124)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 33), list_241120, str_call_result_241125)
        # Adding element type (line 319)
        unicode_241126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 56), 'unicode', u'-halt-on-error')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 33), list_241120, unicode_241126)
        
        # Processing the call keyword arguments (line 319)
        # Getting the type of 'subprocess' (line 320)
        subprocess_241127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 39), 'subprocess', False)
        # Obtaining the member 'PIPE' of a type (line 320)
        PIPE_241128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 39), subprocess_241127, 'PIPE')
        keyword_241129 = PIPE_241128
        # Getting the type of 'subprocess' (line 320)
        subprocess_241130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 63), 'subprocess', False)
        # Obtaining the member 'PIPE' of a type (line 320)
        PIPE_241131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 63), subprocess_241130, 'PIPE')
        keyword_241132 = PIPE_241131
        # Getting the type of 'self' (line 321)
        self_241133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 37), 'self', False)
        # Obtaining the member 'tmpdir' of a type (line 321)
        tmpdir_241134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 37), self_241133, 'tmpdir')
        keyword_241135 = tmpdir_241134
        kwargs_241136 = {'stdin': keyword_241129, 'cwd': keyword_241135, 'stdout': keyword_241132}
        # Getting the type of 'subprocess' (line 319)
        subprocess_241118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 16), 'subprocess', False)
        # Obtaining the member 'Popen' of a type (line 319)
        Popen_241119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 16), subprocess_241118, 'Popen')
        # Calling Popen(args, kwargs) (line 319)
        Popen_call_result_241137 = invoke(stypy.reporting.localization.Localization(__file__, 319, 16), Popen_241119, *[list_241120], **kwargs_241136)
        
        # Assigning a type to the variable 'latex' (line 319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 319, 8), 'latex', Popen_call_result_241137)
        
        # Assigning a Name to a Attribute (line 322):
        
        # Assigning a Name to a Attribute (line 322):
        
        # Assigning a Name to a Attribute (line 322):
        # Getting the type of 'latex' (line 322)
        latex_241138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 21), 'latex')
        # Getting the type of 'self' (line 322)
        self_241139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'self')
        # Setting the type of the member 'latex' of a type (line 322)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 8), self_241139, 'latex', latex_241138)
        
        # Assigning a Call to a Attribute (line 323):
        
        # Assigning a Call to a Attribute (line 323):
        
        # Assigning a Call to a Attribute (line 323):
        
        # Call to (...): (line 323)
        # Processing the call arguments (line 323)
        # Getting the type of 'self' (line 323)
        self_241145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 57), 'self', False)
        # Obtaining the member 'latex' of a type (line 323)
        latex_241146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 57), self_241145, 'latex')
        # Obtaining the member 'stdin' of a type (line 323)
        stdin_241147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 57), latex_241146, 'stdin')
        # Processing the call keyword arguments (line 323)
        kwargs_241148 = {}
        
        # Call to getwriter(...): (line 323)
        # Processing the call arguments (line 323)
        unicode_241142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 49), 'unicode', u'utf8')
        # Processing the call keyword arguments (line 323)
        kwargs_241143 = {}
        # Getting the type of 'codecs' (line 323)
        codecs_241140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 32), 'codecs', False)
        # Obtaining the member 'getwriter' of a type (line 323)
        getwriter_241141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 32), codecs_241140, 'getwriter')
        # Calling getwriter(args, kwargs) (line 323)
        getwriter_call_result_241144 = invoke(stypy.reporting.localization.Localization(__file__, 323, 32), getwriter_241141, *[unicode_241142], **kwargs_241143)
        
        # Calling (args, kwargs) (line 323)
        _call_result_241149 = invoke(stypy.reporting.localization.Localization(__file__, 323, 32), getwriter_call_result_241144, *[stdin_241147], **kwargs_241148)
        
        # Getting the type of 'self' (line 323)
        self_241150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 8), 'self')
        # Setting the type of the member 'latex_stdin_utf8' of a type (line 323)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 8), self_241150, 'latex_stdin_utf8', _call_result_241149)
        
        # Call to _stdin_writeln(...): (line 325)
        # Processing the call arguments (line 325)
        
        # Call to _build_latex_header(...): (line 325)
        # Processing the call keyword arguments (line 325)
        kwargs_241155 = {}
        # Getting the type of 'self' (line 325)
        self_241153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 28), 'self', False)
        # Obtaining the member '_build_latex_header' of a type (line 325)
        _build_latex_header_241154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 28), self_241153, '_build_latex_header')
        # Calling _build_latex_header(args, kwargs) (line 325)
        _build_latex_header_call_result_241156 = invoke(stypy.reporting.localization.Localization(__file__, 325, 28), _build_latex_header_241154, *[], **kwargs_241155)
        
        # Processing the call keyword arguments (line 325)
        kwargs_241157 = {}
        # Getting the type of 'self' (line 325)
        self_241151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 8), 'self', False)
        # Obtaining the member '_stdin_writeln' of a type (line 325)
        _stdin_writeln_241152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 8), self_241151, '_stdin_writeln')
        # Calling _stdin_writeln(args, kwargs) (line 325)
        _stdin_writeln_call_result_241158 = invoke(stypy.reporting.localization.Localization(__file__, 325, 8), _stdin_writeln_241152, *[_build_latex_header_call_result_241156], **kwargs_241157)
        
        
        # Call to _expect(...): (line 327)
        # Processing the call arguments (line 327)
        unicode_241161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 21), 'unicode', u'*pgf_backend_query_start')
        # Processing the call keyword arguments (line 327)
        kwargs_241162 = {}
        # Getting the type of 'self' (line 327)
        self_241159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'self', False)
        # Obtaining the member '_expect' of a type (line 327)
        _expect_241160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 8), self_241159, '_expect')
        # Calling _expect(args, kwargs) (line 327)
        _expect_call_result_241163 = invoke(stypy.reporting.localization.Localization(__file__, 327, 8), _expect_241160, *[unicode_241161], **kwargs_241162)
        
        
        # Call to _expect_prompt(...): (line 328)
        # Processing the call keyword arguments (line 328)
        kwargs_241166 = {}
        # Getting the type of 'self' (line 328)
        self_241164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 8), 'self', False)
        # Obtaining the member '_expect_prompt' of a type (line 328)
        _expect_prompt_241165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 328, 8), self_241164, '_expect_prompt')
        # Calling _expect_prompt(args, kwargs) (line 328)
        _expect_prompt_call_result_241167 = invoke(stypy.reporting.localization.Localization(__file__, 328, 8), _expect_prompt_241165, *[], **kwargs_241166)
        
        
        # Assigning a Dict to a Attribute (line 331):
        
        # Assigning a Dict to a Attribute (line 331):
        
        # Assigning a Dict to a Attribute (line 331):
        
        # Obtaining an instance of the builtin type 'dict' (line 331)
        dict_241168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, 25), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 331)
        
        # Getting the type of 'self' (line 331)
        self_241169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 8), 'self')
        # Setting the type of the member 'str_cache' of a type (line 331)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 8), self_241169, 'str_cache', dict_241168)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _cleanup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_cleanup'
        module_type_store = module_type_store.open_function_context('_cleanup', 333, 4, False)
        # Assigning a type to the variable 'self' (line 334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LatexManager._cleanup.__dict__.__setitem__('stypy_localization', localization)
        LatexManager._cleanup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LatexManager._cleanup.__dict__.__setitem__('stypy_type_store', module_type_store)
        LatexManager._cleanup.__dict__.__setitem__('stypy_function_name', 'LatexManager._cleanup')
        LatexManager._cleanup.__dict__.__setitem__('stypy_param_names_list', [])
        LatexManager._cleanup.__dict__.__setitem__('stypy_varargs_param_name', None)
        LatexManager._cleanup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LatexManager._cleanup.__dict__.__setitem__('stypy_call_defaults', defaults)
        LatexManager._cleanup.__dict__.__setitem__('stypy_call_varargs', varargs)
        LatexManager._cleanup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LatexManager._cleanup.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LatexManager._cleanup', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_cleanup', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_cleanup(...)' code ##################

        
        
        
        # Call to isdir(...): (line 334)
        # Processing the call arguments (line 334)
        # Getting the type of 'self' (line 334)
        self_241173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 35), 'self', False)
        # Obtaining the member 'tmpdir' of a type (line 334)
        tmpdir_241174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 35), self_241173, 'tmpdir')
        # Processing the call keyword arguments (line 334)
        kwargs_241175 = {}
        # Getting the type of 'self' (line 334)
        self_241170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 15), 'self', False)
        # Obtaining the member '_os_path' of a type (line 334)
        _os_path_241171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 15), self_241170, '_os_path')
        # Obtaining the member 'isdir' of a type (line 334)
        isdir_241172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 15), _os_path_241171, 'isdir')
        # Calling isdir(args, kwargs) (line 334)
        isdir_call_result_241176 = invoke(stypy.reporting.localization.Localization(__file__, 334, 15), isdir_241172, *[tmpdir_241174], **kwargs_241175)
        
        # Applying the 'not' unary operator (line 334)
        result_not__241177 = python_operator(stypy.reporting.localization.Localization(__file__, 334, 11), 'not', isdir_call_result_241176)
        
        # Testing the type of an if condition (line 334)
        if_condition_241178 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 334, 8), result_not__241177)
        # Assigning a type to the variable 'if_condition_241178' (line 334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 8), 'if_condition_241178', if_condition_241178)
        # SSA begins for if statement (line 334)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 334)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 336)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to communicate(...): (line 337)
        # Processing the call keyword arguments (line 337)
        kwargs_241182 = {}
        # Getting the type of 'self' (line 337)
        self_241179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 12), 'self', False)
        # Obtaining the member 'latex' of a type (line 337)
        latex_241180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 12), self_241179, 'latex')
        # Obtaining the member 'communicate' of a type (line 337)
        communicate_241181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 12), latex_241180, 'communicate')
        # Calling communicate(args, kwargs) (line 337)
        communicate_call_result_241183 = invoke(stypy.reporting.localization.Localization(__file__, 337, 12), communicate_241181, *[], **kwargs_241182)
        
        
        # Call to close(...): (line 338)
        # Processing the call keyword arguments (line 338)
        kwargs_241187 = {}
        # Getting the type of 'self' (line 338)
        self_241184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 12), 'self', False)
        # Obtaining the member 'latex_stdin_utf8' of a type (line 338)
        latex_stdin_utf8_241185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 12), self_241184, 'latex_stdin_utf8')
        # Obtaining the member 'close' of a type (line 338)
        close_241186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 12), latex_stdin_utf8_241185, 'close')
        # Calling close(args, kwargs) (line 338)
        close_call_result_241188 = invoke(stypy.reporting.localization.Localization(__file__, 338, 12), close_241186, *[], **kwargs_241187)
        
        
        # Call to close(...): (line 339)
        # Processing the call keyword arguments (line 339)
        kwargs_241193 = {}
        # Getting the type of 'self' (line 339)
        self_241189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 12), 'self', False)
        # Obtaining the member 'latex' of a type (line 339)
        latex_241190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 12), self_241189, 'latex')
        # Obtaining the member 'stdout' of a type (line 339)
        stdout_241191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 12), latex_241190, 'stdout')
        # Obtaining the member 'close' of a type (line 339)
        close_241192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 12), stdout_241191, 'close')
        # Calling close(args, kwargs) (line 339)
        close_call_result_241194 = invoke(stypy.reporting.localization.Localization(__file__, 339, 12), close_241192, *[], **kwargs_241193)
        
        # SSA branch for the except part of a try statement (line 336)
        # SSA branch for the except '<any exception>' branch of a try statement (line 336)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 336)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 342)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to rmtree(...): (line 343)
        # Processing the call arguments (line 343)
        # Getting the type of 'self' (line 343)
        self_241198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 32), 'self', False)
        # Obtaining the member 'tmpdir' of a type (line 343)
        tmpdir_241199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 32), self_241198, 'tmpdir')
        # Processing the call keyword arguments (line 343)
        kwargs_241200 = {}
        # Getting the type of 'self' (line 343)
        self_241195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 12), 'self', False)
        # Obtaining the member '_shutil' of a type (line 343)
        _shutil_241196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 12), self_241195, '_shutil')
        # Obtaining the member 'rmtree' of a type (line 343)
        rmtree_241197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 12), _shutil_241196, 'rmtree')
        # Calling rmtree(args, kwargs) (line 343)
        rmtree_call_result_241201 = invoke(stypy.reporting.localization.Localization(__file__, 343, 12), rmtree_241197, *[tmpdir_241199], **kwargs_241200)
        
        
        # Call to discard(...): (line 344)
        # Processing the call arguments (line 344)
        # Getting the type of 'self' (line 344)
        self_241205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 52), 'self', False)
        # Processing the call keyword arguments (line 344)
        kwargs_241206 = {}
        # Getting the type of 'LatexManager' (line 344)
        LatexManager_241202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 12), 'LatexManager', False)
        # Obtaining the member '_unclean_instances' of a type (line 344)
        _unclean_instances_241203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 344, 12), LatexManager_241202, '_unclean_instances')
        # Obtaining the member 'discard' of a type (line 344)
        discard_241204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 344, 12), _unclean_instances_241203, 'discard')
        # Calling discard(args, kwargs) (line 344)
        discard_call_result_241207 = invoke(stypy.reporting.localization.Localization(__file__, 344, 12), discard_241204, *[self_241205], **kwargs_241206)
        
        # SSA branch for the except part of a try statement (line 342)
        # SSA branch for the except '<any exception>' branch of a try statement (line 342)
        module_type_store.open_ssa_branch('except')
        
        # Call to write(...): (line 346)
        # Processing the call arguments (line 346)
        unicode_241211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 346, 29), 'unicode', u'error deleting tmp directory %s\n')
        # Getting the type of 'self' (line 346)
        self_241212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 67), 'self', False)
        # Obtaining the member 'tmpdir' of a type (line 346)
        tmpdir_241213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 67), self_241212, 'tmpdir')
        # Applying the binary operator '%' (line 346)
        result_mod_241214 = python_operator(stypy.reporting.localization.Localization(__file__, 346, 29), '%', unicode_241211, tmpdir_241213)
        
        # Processing the call keyword arguments (line 346)
        kwargs_241215 = {}
        # Getting the type of 'sys' (line 346)
        sys_241208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 12), 'sys', False)
        # Obtaining the member 'stderr' of a type (line 346)
        stderr_241209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 12), sys_241208, 'stderr')
        # Obtaining the member 'write' of a type (line 346)
        write_241210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 12), stderr_241209, 'write')
        # Calling write(args, kwargs) (line 346)
        write_call_result_241216 = invoke(stypy.reporting.localization.Localization(__file__, 346, 12), write_241210, *[result_mod_241214], **kwargs_241215)
        
        # SSA join for try-except statement (line 342)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_cleanup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_cleanup' in the type store
        # Getting the type of 'stypy_return_type' (line 333)
        stypy_return_type_241217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_241217)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_cleanup'
        return stypy_return_type_241217


    @norecursion
    def __del__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__del__'
        module_type_store = module_type_store.open_function_context('__del__', 348, 4, False)
        # Assigning a type to the variable 'self' (line 349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LatexManager.__del__.__dict__.__setitem__('stypy_localization', localization)
        LatexManager.__del__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LatexManager.__del__.__dict__.__setitem__('stypy_type_store', module_type_store)
        LatexManager.__del__.__dict__.__setitem__('stypy_function_name', 'LatexManager.__del__')
        LatexManager.__del__.__dict__.__setitem__('stypy_param_names_list', [])
        LatexManager.__del__.__dict__.__setitem__('stypy_varargs_param_name', None)
        LatexManager.__del__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LatexManager.__del__.__dict__.__setitem__('stypy_call_defaults', defaults)
        LatexManager.__del__.__dict__.__setitem__('stypy_call_varargs', varargs)
        LatexManager.__del__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LatexManager.__del__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LatexManager.__del__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__del__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__del__(...)' code ##################

        
        # Getting the type of 'self' (line 349)
        self_241218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 11), 'self')
        # Obtaining the member '_debug' of a type (line 349)
        _debug_241219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 11), self_241218, '_debug')
        # Testing the type of an if condition (line 349)
        if_condition_241220 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 349, 8), _debug_241219)
        # Assigning a type to the variable 'if_condition_241220' (line 349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'if_condition_241220', if_condition_241220)
        # SSA begins for if statement (line 349)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to print(...): (line 350)
        # Processing the call arguments (line 350)
        unicode_241222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 18), 'unicode', u'deleting LatexManager')
        # Processing the call keyword arguments (line 350)
        kwargs_241223 = {}
        # Getting the type of 'print' (line 350)
        print_241221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 12), 'print', False)
        # Calling print(args, kwargs) (line 350)
        print_call_result_241224 = invoke(stypy.reporting.localization.Localization(__file__, 350, 12), print_241221, *[unicode_241222], **kwargs_241223)
        
        # SSA join for if statement (line 349)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _cleanup(...): (line 351)
        # Processing the call keyword arguments (line 351)
        kwargs_241227 = {}
        # Getting the type of 'self' (line 351)
        self_241225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 8), 'self', False)
        # Obtaining the member '_cleanup' of a type (line 351)
        _cleanup_241226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 8), self_241225, '_cleanup')
        # Calling _cleanup(args, kwargs) (line 351)
        _cleanup_call_result_241228 = invoke(stypy.reporting.localization.Localization(__file__, 351, 8), _cleanup_241226, *[], **kwargs_241227)
        
        
        # ################# End of '__del__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__del__' in the type store
        # Getting the type of 'stypy_return_type' (line 348)
        stypy_return_type_241229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_241229)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__del__'
        return stypy_return_type_241229


    @norecursion
    def get_width_height_descent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_width_height_descent'
        module_type_store = module_type_store.open_function_context('get_width_height_descent', 353, 4, False)
        # Assigning a type to the variable 'self' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LatexManager.get_width_height_descent.__dict__.__setitem__('stypy_localization', localization)
        LatexManager.get_width_height_descent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LatexManager.get_width_height_descent.__dict__.__setitem__('stypy_type_store', module_type_store)
        LatexManager.get_width_height_descent.__dict__.__setitem__('stypy_function_name', 'LatexManager.get_width_height_descent')
        LatexManager.get_width_height_descent.__dict__.__setitem__('stypy_param_names_list', ['text', 'prop'])
        LatexManager.get_width_height_descent.__dict__.__setitem__('stypy_varargs_param_name', None)
        LatexManager.get_width_height_descent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LatexManager.get_width_height_descent.__dict__.__setitem__('stypy_call_defaults', defaults)
        LatexManager.get_width_height_descent.__dict__.__setitem__('stypy_call_varargs', varargs)
        LatexManager.get_width_height_descent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LatexManager.get_width_height_descent.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LatexManager.get_width_height_descent', ['text', 'prop'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_width_height_descent', localization, ['text', 'prop'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_width_height_descent(...)' code ##################

        unicode_241230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 357, (-1)), 'unicode', u'\n        Get the width, total height and descent for a text typesetted by the\n        current LaTeX environment.\n        ')
        
        # Assigning a Call to a Name (line 360):
        
        # Assigning a Call to a Name (line 360):
        
        # Assigning a Call to a Name (line 360):
        
        # Call to _font_properties_str(...): (line 360)
        # Processing the call arguments (line 360)
        # Getting the type of 'prop' (line 360)
        prop_241232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 41), 'prop', False)
        # Processing the call keyword arguments (line 360)
        kwargs_241233 = {}
        # Getting the type of '_font_properties_str' (line 360)
        _font_properties_str_241231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 20), '_font_properties_str', False)
        # Calling _font_properties_str(args, kwargs) (line 360)
        _font_properties_str_call_result_241234 = invoke(stypy.reporting.localization.Localization(__file__, 360, 20), _font_properties_str_241231, *[prop_241232], **kwargs_241233)
        
        # Assigning a type to the variable 'prop_cmds' (line 360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 8), 'prop_cmds', _font_properties_str_call_result_241234)
        
        # Assigning a BinOp to a Name (line 361):
        
        # Assigning a BinOp to a Name (line 361):
        
        # Assigning a BinOp to a Name (line 361):
        unicode_241235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 18), 'unicode', u'\\sbox0{%s %s}')
        
        # Obtaining an instance of the builtin type 'tuple' (line 361)
        tuple_241236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 361)
        # Adding element type (line 361)
        # Getting the type of 'prop_cmds' (line 361)
        prop_cmds_241237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 38), 'prop_cmds')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 361, 38), tuple_241236, prop_cmds_241237)
        # Adding element type (line 361)
        # Getting the type of 'text' (line 361)
        text_241238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 49), 'text')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 361, 38), tuple_241236, text_241238)
        
        # Applying the binary operator '%' (line 361)
        result_mod_241239 = python_operator(stypy.reporting.localization.Localization(__file__, 361, 18), '%', unicode_241235, tuple_241236)
        
        # Assigning a type to the variable 'textbox' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'textbox', result_mod_241239)
        
        
        # Getting the type of 'textbox' (line 364)
        textbox_241240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 11), 'textbox')
        # Getting the type of 'self' (line 364)
        self_241241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 22), 'self')
        # Obtaining the member 'str_cache' of a type (line 364)
        str_cache_241242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 22), self_241241, 'str_cache')
        # Applying the binary operator 'in' (line 364)
        result_contains_241243 = python_operator(stypy.reporting.localization.Localization(__file__, 364, 11), 'in', textbox_241240, str_cache_241242)
        
        # Testing the type of an if condition (line 364)
        if_condition_241244 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 364, 8), result_contains_241243)
        # Assigning a type to the variable 'if_condition_241244' (line 364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 8), 'if_condition_241244', if_condition_241244)
        # SSA begins for if statement (line 364)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        # Getting the type of 'textbox' (line 365)
        textbox_241245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 34), 'textbox')
        # Getting the type of 'self' (line 365)
        self_241246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 19), 'self')
        # Obtaining the member 'str_cache' of a type (line 365)
        str_cache_241247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 19), self_241246, 'str_cache')
        # Obtaining the member '__getitem__' of a type (line 365)
        getitem___241248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 19), str_cache_241247, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 365)
        subscript_call_result_241249 = invoke(stypy.reporting.localization.Localization(__file__, 365, 19), getitem___241248, textbox_241245)
        
        # Assigning a type to the variable 'stypy_return_type' (line 365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 12), 'stypy_return_type', subscript_call_result_241249)
        # SSA join for if statement (line 364)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _stdin_writeln(...): (line 368)
        # Processing the call arguments (line 368)
        # Getting the type of 'textbox' (line 368)
        textbox_241252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 28), 'textbox', False)
        # Processing the call keyword arguments (line 368)
        kwargs_241253 = {}
        # Getting the type of 'self' (line 368)
        self_241250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 8), 'self', False)
        # Obtaining the member '_stdin_writeln' of a type (line 368)
        _stdin_writeln_241251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 8), self_241250, '_stdin_writeln')
        # Calling _stdin_writeln(args, kwargs) (line 368)
        _stdin_writeln_call_result_241254 = invoke(stypy.reporting.localization.Localization(__file__, 368, 8), _stdin_writeln_241251, *[textbox_241252], **kwargs_241253)
        
        
        
        # SSA begins for try-except statement (line 369)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to _expect_prompt(...): (line 370)
        # Processing the call keyword arguments (line 370)
        kwargs_241257 = {}
        # Getting the type of 'self' (line 370)
        self_241255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 12), 'self', False)
        # Obtaining the member '_expect_prompt' of a type (line 370)
        _expect_prompt_241256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 12), self_241255, '_expect_prompt')
        # Calling _expect_prompt(args, kwargs) (line 370)
        _expect_prompt_call_result_241258 = invoke(stypy.reporting.localization.Localization(__file__, 370, 12), _expect_prompt_241256, *[], **kwargs_241257)
        
        # SSA branch for the except part of a try statement (line 369)
        # SSA branch for the except 'LatexError' branch of a try statement (line 369)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'LatexError' (line 371)
        LatexError_241259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 15), 'LatexError')
        # Assigning a type to the variable 'e' (line 371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 8), 'e', LatexError_241259)
        
        # Assigning a Str to a Name (line 372):
        
        # Assigning a Str to a Name (line 372):
        
        # Assigning a Str to a Name (line 372):
        unicode_241260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 372, 18), 'unicode', u"Error processing '%s'\nLaTeX Output:\n%s")
        # Assigning a type to the variable 'msg' (line 372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 12), 'msg', unicode_241260)
        
        # Call to ValueError(...): (line 373)
        # Processing the call arguments (line 373)
        # Getting the type of 'msg' (line 373)
        msg_241262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 29), 'msg', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 373)
        tuple_241263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 373)
        # Adding element type (line 373)
        # Getting the type of 'text' (line 373)
        text_241264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 36), 'text', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 373, 36), tuple_241263, text_241264)
        # Adding element type (line 373)
        # Getting the type of 'e' (line 373)
        e_241265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 42), 'e', False)
        # Obtaining the member 'latex_output' of a type (line 373)
        latex_output_241266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 42), e_241265, 'latex_output')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 373, 36), tuple_241263, latex_output_241266)
        
        # Applying the binary operator '%' (line 373)
        result_mod_241267 = python_operator(stypy.reporting.localization.Localization(__file__, 373, 29), '%', msg_241262, tuple_241263)
        
        # Processing the call keyword arguments (line 373)
        kwargs_241268 = {}
        # Getting the type of 'ValueError' (line 373)
        ValueError_241261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 373)
        ValueError_call_result_241269 = invoke(stypy.reporting.localization.Localization(__file__, 373, 18), ValueError_241261, *[result_mod_241267], **kwargs_241268)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 373, 12), ValueError_call_result_241269, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 369)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _stdin_writeln(...): (line 376)
        # Processing the call arguments (line 376)
        unicode_241272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 28), 'unicode', u'\\typeout{\\the\\wd0,\\the\\ht0,\\the\\dp0}')
        # Processing the call keyword arguments (line 376)
        kwargs_241273 = {}
        # Getting the type of 'self' (line 376)
        self_241270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 8), 'self', False)
        # Obtaining the member '_stdin_writeln' of a type (line 376)
        _stdin_writeln_241271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 8), self_241270, '_stdin_writeln')
        # Calling _stdin_writeln(args, kwargs) (line 376)
        _stdin_writeln_call_result_241274 = invoke(stypy.reporting.localization.Localization(__file__, 376, 8), _stdin_writeln_241271, *[unicode_241272], **kwargs_241273)
        
        
        
        # SSA begins for try-except statement (line 378)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 379):
        
        # Assigning a Call to a Name (line 379):
        
        # Assigning a Call to a Name (line 379):
        
        # Call to _expect_prompt(...): (line 379)
        # Processing the call keyword arguments (line 379)
        kwargs_241277 = {}
        # Getting the type of 'self' (line 379)
        self_241275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 21), 'self', False)
        # Obtaining the member '_expect_prompt' of a type (line 379)
        _expect_prompt_241276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 21), self_241275, '_expect_prompt')
        # Calling _expect_prompt(args, kwargs) (line 379)
        _expect_prompt_call_result_241278 = invoke(stypy.reporting.localization.Localization(__file__, 379, 21), _expect_prompt_241276, *[], **kwargs_241277)
        
        # Assigning a type to the variable 'answer' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 12), 'answer', _expect_prompt_call_result_241278)
        # SSA branch for the except part of a try statement (line 378)
        # SSA branch for the except 'LatexError' branch of a try statement (line 378)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'LatexError' (line 380)
        LatexError_241279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 15), 'LatexError')
        # Assigning a type to the variable 'e' (line 380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 8), 'e', LatexError_241279)
        
        # Assigning a Str to a Name (line 381):
        
        # Assigning a Str to a Name (line 381):
        
        # Assigning a Str to a Name (line 381):
        unicode_241280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 381, 18), 'unicode', u"Error processing '%s'\nLaTeX Output:\n%s")
        # Assigning a type to the variable 'msg' (line 381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 12), 'msg', unicode_241280)
        
        # Call to ValueError(...): (line 382)
        # Processing the call arguments (line 382)
        # Getting the type of 'msg' (line 382)
        msg_241282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 29), 'msg', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 382)
        tuple_241283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 382)
        # Adding element type (line 382)
        # Getting the type of 'text' (line 382)
        text_241284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 36), 'text', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 382, 36), tuple_241283, text_241284)
        # Adding element type (line 382)
        # Getting the type of 'e' (line 382)
        e_241285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 42), 'e', False)
        # Obtaining the member 'latex_output' of a type (line 382)
        latex_output_241286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 382, 42), e_241285, 'latex_output')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 382, 36), tuple_241283, latex_output_241286)
        
        # Applying the binary operator '%' (line 382)
        result_mod_241287 = python_operator(stypy.reporting.localization.Localization(__file__, 382, 29), '%', msg_241282, tuple_241283)
        
        # Processing the call keyword arguments (line 382)
        kwargs_241288 = {}
        # Getting the type of 'ValueError' (line 382)
        ValueError_241281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 382)
        ValueError_call_result_241289 = invoke(stypy.reporting.localization.Localization(__file__, 382, 18), ValueError_241281, *[result_mod_241287], **kwargs_241288)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 382, 12), ValueError_call_result_241289, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 378)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 385)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Tuple (line 386):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to split(...): (line 386)
        # Processing the call arguments (line 386)
        unicode_241298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 65), 'unicode', u',')
        # Processing the call keyword arguments (line 386)
        kwargs_241299 = {}
        
        # Obtaining the type of the subscript
        int_241290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 56), 'int')
        
        # Call to splitlines(...): (line 386)
        # Processing the call keyword arguments (line 386)
        kwargs_241293 = {}
        # Getting the type of 'answer' (line 386)
        answer_241291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 36), 'answer', False)
        # Obtaining the member 'splitlines' of a type (line 386)
        splitlines_241292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 36), answer_241291, 'splitlines')
        # Calling splitlines(args, kwargs) (line 386)
        splitlines_call_result_241294 = invoke(stypy.reporting.localization.Localization(__file__, 386, 36), splitlines_241292, *[], **kwargs_241293)
        
        # Obtaining the member '__getitem__' of a type (line 386)
        getitem___241295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 36), splitlines_call_result_241294, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 386)
        subscript_call_result_241296 = invoke(stypy.reporting.localization.Localization(__file__, 386, 36), getitem___241295, int_241290)
        
        # Obtaining the member 'split' of a type (line 386)
        split_241297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 36), subscript_call_result_241296, 'split')
        # Calling split(args, kwargs) (line 386)
        split_call_result_241300 = invoke(stypy.reporting.localization.Localization(__file__, 386, 36), split_241297, *[unicode_241298], **kwargs_241299)
        
        # Assigning a type to the variable 'call_assignment_240236' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'call_assignment_240236', split_call_result_241300)
        
        # Assigning a Call to a Name (line 386):
        
        # Assigning a Call to a Name (line 386):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_241303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 12), 'int')
        # Processing the call keyword arguments
        kwargs_241304 = {}
        # Getting the type of 'call_assignment_240236' (line 386)
        call_assignment_240236_241301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'call_assignment_240236', False)
        # Obtaining the member '__getitem__' of a type (line 386)
        getitem___241302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 12), call_assignment_240236_241301, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_241305 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___241302, *[int_241303], **kwargs_241304)
        
        # Assigning a type to the variable 'call_assignment_240237' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'call_assignment_240237', getitem___call_result_241305)
        
        # Assigning a Name to a Name (line 386):
        
        # Assigning a Name to a Name (line 386):
        # Getting the type of 'call_assignment_240237' (line 386)
        call_assignment_240237_241306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'call_assignment_240237')
        # Assigning a type to the variable 'width' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'width', call_assignment_240237_241306)
        
        # Assigning a Call to a Name (line 386):
        
        # Assigning a Call to a Name (line 386):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_241309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 12), 'int')
        # Processing the call keyword arguments
        kwargs_241310 = {}
        # Getting the type of 'call_assignment_240236' (line 386)
        call_assignment_240236_241307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'call_assignment_240236', False)
        # Obtaining the member '__getitem__' of a type (line 386)
        getitem___241308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 12), call_assignment_240236_241307, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_241311 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___241308, *[int_241309], **kwargs_241310)
        
        # Assigning a type to the variable 'call_assignment_240238' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'call_assignment_240238', getitem___call_result_241311)
        
        # Assigning a Name to a Name (line 386):
        
        # Assigning a Name to a Name (line 386):
        # Getting the type of 'call_assignment_240238' (line 386)
        call_assignment_240238_241312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'call_assignment_240238')
        # Assigning a type to the variable 'height' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 19), 'height', call_assignment_240238_241312)
        
        # Assigning a Call to a Name (line 386):
        
        # Assigning a Call to a Name (line 386):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_241315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 12), 'int')
        # Processing the call keyword arguments
        kwargs_241316 = {}
        # Getting the type of 'call_assignment_240236' (line 386)
        call_assignment_240236_241313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'call_assignment_240236', False)
        # Obtaining the member '__getitem__' of a type (line 386)
        getitem___241314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 12), call_assignment_240236_241313, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_241317 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___241314, *[int_241315], **kwargs_241316)
        
        # Assigning a type to the variable 'call_assignment_240239' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'call_assignment_240239', getitem___call_result_241317)
        
        # Assigning a Name to a Name (line 386):
        
        # Assigning a Name to a Name (line 386):
        # Getting the type of 'call_assignment_240239' (line 386)
        call_assignment_240239_241318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'call_assignment_240239')
        # Assigning a type to the variable 'offset' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 27), 'offset', call_assignment_240239_241318)
        # SSA branch for the except part of a try statement (line 385)
        # SSA branch for the except '<any exception>' branch of a try statement (line 385)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a BinOp to a Name (line 388):
        
        # Assigning a BinOp to a Name (line 388):
        
        # Assigning a BinOp to a Name (line 388):
        unicode_241319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 18), 'unicode', u"Error processing '%s'\nLaTeX Output:\n%s")
        
        # Obtaining an instance of the builtin type 'tuple' (line 388)
        tuple_241320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 64), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 388)
        # Adding element type (line 388)
        # Getting the type of 'text' (line 388)
        text_241321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 64), 'text')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 388, 64), tuple_241320, text_241321)
        # Adding element type (line 388)
        # Getting the type of 'answer' (line 388)
        answer_241322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 70), 'answer')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 388, 64), tuple_241320, answer_241322)
        
        # Applying the binary operator '%' (line 388)
        result_mod_241323 = python_operator(stypy.reporting.localization.Localization(__file__, 388, 18), '%', unicode_241319, tuple_241320)
        
        # Assigning a type to the variable 'msg' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 12), 'msg', result_mod_241323)
        
        # Call to ValueError(...): (line 389)
        # Processing the call arguments (line 389)
        # Getting the type of 'msg' (line 389)
        msg_241325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 29), 'msg', False)
        # Processing the call keyword arguments (line 389)
        kwargs_241326 = {}
        # Getting the type of 'ValueError' (line 389)
        ValueError_241324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 389)
        ValueError_call_result_241327 = invoke(stypy.reporting.localization.Localization(__file__, 389, 18), ValueError_241324, *[msg_241325], **kwargs_241326)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 389, 12), ValueError_call_result_241327, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 385)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 390):
        
        # Assigning a Call to a Name (line 390):
        
        # Assigning a Call to a Name (line 390):
        
        # Call to float(...): (line 390)
        # Processing the call arguments (line 390)
        
        # Obtaining the type of the subscript
        int_241329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 31), 'int')
        slice_241330 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 390, 24), None, int_241329, None)
        # Getting the type of 'width' (line 390)
        width_241331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 24), 'width', False)
        # Obtaining the member '__getitem__' of a type (line 390)
        getitem___241332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 24), width_241331, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 390)
        subscript_call_result_241333 = invoke(stypy.reporting.localization.Localization(__file__, 390, 24), getitem___241332, slice_241330)
        
        # Processing the call keyword arguments (line 390)
        kwargs_241334 = {}
        # Getting the type of 'float' (line 390)
        float_241328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 18), 'float', False)
        # Calling float(args, kwargs) (line 390)
        float_call_result_241335 = invoke(stypy.reporting.localization.Localization(__file__, 390, 18), float_241328, *[subscript_call_result_241333], **kwargs_241334)
        
        # Assigning a type to the variable 'tuple_assignment_240240' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'tuple_assignment_240240', float_call_result_241335)
        
        # Assigning a Call to a Name (line 390):
        
        # Assigning a Call to a Name (line 390):
        
        # Call to float(...): (line 390)
        # Processing the call arguments (line 390)
        
        # Obtaining the type of the subscript
        int_241337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 51), 'int')
        slice_241338 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 390, 43), None, int_241337, None)
        # Getting the type of 'height' (line 390)
        height_241339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 43), 'height', False)
        # Obtaining the member '__getitem__' of a type (line 390)
        getitem___241340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 43), height_241339, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 390)
        subscript_call_result_241341 = invoke(stypy.reporting.localization.Localization(__file__, 390, 43), getitem___241340, slice_241338)
        
        # Processing the call keyword arguments (line 390)
        kwargs_241342 = {}
        # Getting the type of 'float' (line 390)
        float_241336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 37), 'float', False)
        # Calling float(args, kwargs) (line 390)
        float_call_result_241343 = invoke(stypy.reporting.localization.Localization(__file__, 390, 37), float_241336, *[subscript_call_result_241341], **kwargs_241342)
        
        # Assigning a type to the variable 'tuple_assignment_240241' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'tuple_assignment_240241', float_call_result_241343)
        
        # Assigning a Call to a Name (line 390):
        
        # Assigning a Call to a Name (line 390):
        
        # Call to float(...): (line 390)
        # Processing the call arguments (line 390)
        
        # Obtaining the type of the subscript
        int_241345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 71), 'int')
        slice_241346 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 390, 63), None, int_241345, None)
        # Getting the type of 'offset' (line 390)
        offset_241347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 63), 'offset', False)
        # Obtaining the member '__getitem__' of a type (line 390)
        getitem___241348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 63), offset_241347, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 390)
        subscript_call_result_241349 = invoke(stypy.reporting.localization.Localization(__file__, 390, 63), getitem___241348, slice_241346)
        
        # Processing the call keyword arguments (line 390)
        kwargs_241350 = {}
        # Getting the type of 'float' (line 390)
        float_241344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 57), 'float', False)
        # Calling float(args, kwargs) (line 390)
        float_call_result_241351 = invoke(stypy.reporting.localization.Localization(__file__, 390, 57), float_241344, *[subscript_call_result_241349], **kwargs_241350)
        
        # Assigning a type to the variable 'tuple_assignment_240242' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'tuple_assignment_240242', float_call_result_241351)
        
        # Assigning a Name to a Name (line 390):
        
        # Assigning a Name to a Name (line 390):
        # Getting the type of 'tuple_assignment_240240' (line 390)
        tuple_assignment_240240_241352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'tuple_assignment_240240')
        # Assigning a type to the variable 'w' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'w', tuple_assignment_240240_241352)
        
        # Assigning a Name to a Name (line 390):
        
        # Assigning a Name to a Name (line 390):
        # Getting the type of 'tuple_assignment_240241' (line 390)
        tuple_assignment_240241_241353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'tuple_assignment_240241')
        # Assigning a type to the variable 'h' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 11), 'h', tuple_assignment_240241_241353)
        
        # Assigning a Name to a Name (line 390):
        
        # Assigning a Name to a Name (line 390):
        # Getting the type of 'tuple_assignment_240242' (line 390)
        tuple_assignment_240242_241354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'tuple_assignment_240242')
        # Assigning a type to the variable 'o' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 14), 'o', tuple_assignment_240242_241354)
        
        # Assigning a Tuple to a Subscript (line 394):
        
        # Assigning a Tuple to a Subscript (line 394):
        
        # Assigning a Tuple to a Subscript (line 394):
        
        # Obtaining an instance of the builtin type 'tuple' (line 394)
        tuple_241355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 394)
        # Adding element type (line 394)
        # Getting the type of 'w' (line 394)
        w_241356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 35), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 394, 35), tuple_241355, w_241356)
        # Adding element type (line 394)
        # Getting the type of 'h' (line 394)
        h_241357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 38), 'h')
        # Getting the type of 'o' (line 394)
        o_241358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 42), 'o')
        # Applying the binary operator '+' (line 394)
        result_add_241359 = python_operator(stypy.reporting.localization.Localization(__file__, 394, 38), '+', h_241357, o_241358)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 394, 35), tuple_241355, result_add_241359)
        # Adding element type (line 394)
        # Getting the type of 'o' (line 394)
        o_241360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 45), 'o')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 394, 35), tuple_241355, o_241360)
        
        # Getting the type of 'self' (line 394)
        self_241361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'self')
        # Obtaining the member 'str_cache' of a type (line 394)
        str_cache_241362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 8), self_241361, 'str_cache')
        # Getting the type of 'textbox' (line 394)
        textbox_241363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 23), 'textbox')
        # Storing an element on a container (line 394)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 394, 8), str_cache_241362, (textbox_241363, tuple_241355))
        
        # Obtaining an instance of the builtin type 'tuple' (line 395)
        tuple_241364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 395)
        # Adding element type (line 395)
        # Getting the type of 'w' (line 395)
        w_241365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 15), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 395, 15), tuple_241364, w_241365)
        # Adding element type (line 395)
        # Getting the type of 'h' (line 395)
        h_241366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 18), 'h')
        # Getting the type of 'o' (line 395)
        o_241367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 22), 'o')
        # Applying the binary operator '+' (line 395)
        result_add_241368 = python_operator(stypy.reporting.localization.Localization(__file__, 395, 18), '+', h_241366, o_241367)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 395, 15), tuple_241364, result_add_241368)
        # Adding element type (line 395)
        # Getting the type of 'o' (line 395)
        o_241369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 25), 'o')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 395, 15), tuple_241364, o_241369)
        
        # Assigning a type to the variable 'stypy_return_type' (line 395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 8), 'stypy_return_type', tuple_241364)
        
        # ################# End of 'get_width_height_descent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_width_height_descent' in the type store
        # Getting the type of 'stypy_return_type' (line 353)
        stypy_return_type_241370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_241370)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_width_height_descent'
        return stypy_return_type_241370


# Assigning a type to the variable 'LatexManager' (line 237)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 0), 'LatexManager', LatexManager)

# Assigning a Call to a Name (line 243):

# Call to WeakSet(...): (line 243)
# Processing the call keyword arguments (line 243)
kwargs_241373 = {}
# Getting the type of 'weakref' (line 243)
weakref_241371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 25), 'weakref', False)
# Obtaining the member 'WeakSet' of a type (line 243)
WeakSet_241372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 25), weakref_241371, 'WeakSet')
# Calling WeakSet(args, kwargs) (line 243)
WeakSet_call_result_241374 = invoke(stypy.reporting.localization.Localization(__file__, 243, 25), WeakSet_241372, *[], **kwargs_241373)

# Getting the type of 'LatexManager'
LatexManager_241375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LatexManager')
# Setting the type of the member '_unclean_instances' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LatexManager_241375, '_unclean_instances', WeakSet_call_result_241374)
# Declaration of the 'RendererPgf' class
# Getting the type of 'RendererBase' (line 398)
RendererBase_241376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 18), 'RendererBase')

class RendererPgf(RendererBase_241376, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 400)
        False_241377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 41), 'False')
        defaults = [False_241377]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 400, 4, False)
        # Assigning a type to the variable 'self' (line 401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 401, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf.__init__', ['figure', 'fh', 'dummy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['figure', 'fh', 'dummy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_241378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 412, (-1)), 'unicode', u'\n        Creates a new PGF renderer that translates any drawing instruction\n        into text commands to be interpreted in a latex pgfpicture environment.\n\n        Attributes\n        ----------\n        figure : `matplotlib.figure.Figure`\n            Matplotlib figure to initialize height, width and dpi from.\n        fh : file-like\n            File handle for the output of the drawing commands.\n\n        ')
        
        # Call to __init__(...): (line 413)
        # Processing the call arguments (line 413)
        # Getting the type of 'self' (line 413)
        self_241381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 30), 'self', False)
        # Processing the call keyword arguments (line 413)
        kwargs_241382 = {}
        # Getting the type of 'RendererBase' (line 413)
        RendererBase_241379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'RendererBase', False)
        # Obtaining the member '__init__' of a type (line 413)
        init___241380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 8), RendererBase_241379, '__init__')
        # Calling __init__(args, kwargs) (line 413)
        init___call_result_241383 = invoke(stypy.reporting.localization.Localization(__file__, 413, 8), init___241380, *[self_241381], **kwargs_241382)
        
        
        # Assigning a Attribute to a Attribute (line 414):
        
        # Assigning a Attribute to a Attribute (line 414):
        
        # Assigning a Attribute to a Attribute (line 414):
        # Getting the type of 'figure' (line 414)
        figure_241384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 19), 'figure')
        # Obtaining the member 'dpi' of a type (line 414)
        dpi_241385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 19), figure_241384, 'dpi')
        # Getting the type of 'self' (line 414)
        self_241386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 8), 'self')
        # Setting the type of the member 'dpi' of a type (line 414)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 8), self_241386, 'dpi', dpi_241385)
        
        # Assigning a Name to a Attribute (line 415):
        
        # Assigning a Name to a Attribute (line 415):
        
        # Assigning a Name to a Attribute (line 415):
        # Getting the type of 'fh' (line 415)
        fh_241387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 18), 'fh')
        # Getting the type of 'self' (line 415)
        self_241388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 8), 'self')
        # Setting the type of the member 'fh' of a type (line 415)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 415, 8), self_241388, 'fh', fh_241387)
        
        # Assigning a Name to a Attribute (line 416):
        
        # Assigning a Name to a Attribute (line 416):
        
        # Assigning a Name to a Attribute (line 416):
        # Getting the type of 'figure' (line 416)
        figure_241389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 22), 'figure')
        # Getting the type of 'self' (line 416)
        self_241390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 8), 'self')
        # Setting the type of the member 'figure' of a type (line 416)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 416, 8), self_241390, 'figure', figure_241389)
        
        # Assigning a Num to a Attribute (line 417):
        
        # Assigning a Num to a Attribute (line 417):
        
        # Assigning a Num to a Attribute (line 417):
        int_241391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 29), 'int')
        # Getting the type of 'self' (line 417)
        self_241392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 8), 'self')
        # Setting the type of the member 'image_counter' of a type (line 417)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 8), self_241392, 'image_counter', int_241391)
        
        # Assigning a Call to a Attribute (line 420):
        
        # Assigning a Call to a Attribute (line 420):
        
        # Assigning a Call to a Attribute (line 420):
        
        # Call to get_latex_manager(...): (line 420)
        # Processing the call keyword arguments (line 420)
        kwargs_241395 = {}
        # Getting the type of 'LatexManagerFactory' (line 420)
        LatexManagerFactory_241393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 28), 'LatexManagerFactory', False)
        # Obtaining the member 'get_latex_manager' of a type (line 420)
        get_latex_manager_241394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 28), LatexManagerFactory_241393, 'get_latex_manager')
        # Calling get_latex_manager(args, kwargs) (line 420)
        get_latex_manager_call_result_241396 = invoke(stypy.reporting.localization.Localization(__file__, 420, 28), get_latex_manager_241394, *[], **kwargs_241395)
        
        # Getting the type of 'self' (line 420)
        self_241397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 8), 'self')
        # Setting the type of the member 'latexManager' of a type (line 420)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 8), self_241397, 'latexManager', get_latex_manager_call_result_241396)
        
        # Getting the type of 'dummy' (line 422)
        dummy_241398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 11), 'dummy')
        # Testing the type of an if condition (line 422)
        if_condition_241399 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 422, 8), dummy_241398)
        # Assigning a type to the variable 'if_condition_241399' (line 422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 8), 'if_condition_241399', if_condition_241399)
        # SSA begins for if statement (line 422)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Lambda to a Name (line 424):
        
        # Assigning a Lambda to a Name (line 424):
        
        # Assigning a Lambda to a Name (line 424):

        @norecursion
        def _stypy_temp_lambda_104(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_104'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_104', 424, 18, True)
            # Passed parameters checking function
            _stypy_temp_lambda_104.stypy_localization = localization
            _stypy_temp_lambda_104.stypy_type_of_self = None
            _stypy_temp_lambda_104.stypy_type_store = module_type_store
            _stypy_temp_lambda_104.stypy_function_name = '_stypy_temp_lambda_104'
            _stypy_temp_lambda_104.stypy_param_names_list = []
            _stypy_temp_lambda_104.stypy_varargs_param_name = 'args'
            _stypy_temp_lambda_104.stypy_kwargs_param_name = 'kwargs'
            _stypy_temp_lambda_104.stypy_call_defaults = defaults
            _stypy_temp_lambda_104.stypy_call_varargs = varargs
            _stypy_temp_lambda_104.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_104', [], 'args', 'kwargs', defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_104', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'None' (line 424)
            None_241400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 42), 'None')
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 424)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 424, 18), 'stypy_return_type', None_241400)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_104' in the type store
            # Getting the type of 'stypy_return_type' (line 424)
            stypy_return_type_241401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 18), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_241401)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_104'
            return stypy_return_type_241401

        # Assigning a type to the variable '_stypy_temp_lambda_104' (line 424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 424, 18), '_stypy_temp_lambda_104', _stypy_temp_lambda_104)
        # Getting the type of '_stypy_temp_lambda_104' (line 424)
        _stypy_temp_lambda_104_241402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 18), '_stypy_temp_lambda_104')
        # Assigning a type to the variable 'nop' (line 424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 424, 12), 'nop', _stypy_temp_lambda_104_241402)
        
        # Getting the type of 'RendererPgf' (line 425)
        RendererPgf_241403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 21), 'RendererPgf')
        # Obtaining the member '__dict__' of a type (line 425)
        dict___241404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 21), RendererPgf_241403, '__dict__')
        # Testing the type of a for loop iterable (line 425)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 425, 12), dict___241404)
        # Getting the type of the for loop variable (line 425)
        for_loop_var_241405 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 425, 12), dict___241404)
        # Assigning a type to the variable 'm' (line 425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 12), 'm', for_loop_var_241405)
        # SSA begins for a for statement (line 425)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to startswith(...): (line 426)
        # Processing the call arguments (line 426)
        unicode_241408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 32), 'unicode', u'draw_')
        # Processing the call keyword arguments (line 426)
        kwargs_241409 = {}
        # Getting the type of 'm' (line 426)
        m_241406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 19), 'm', False)
        # Obtaining the member 'startswith' of a type (line 426)
        startswith_241407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 19), m_241406, 'startswith')
        # Calling startswith(args, kwargs) (line 426)
        startswith_call_result_241410 = invoke(stypy.reporting.localization.Localization(__file__, 426, 19), startswith_241407, *[unicode_241408], **kwargs_241409)
        
        # Testing the type of an if condition (line 426)
        if_condition_241411 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 426, 16), startswith_call_result_241410)
        # Assigning a type to the variable 'if_condition_241411' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 16), 'if_condition_241411', if_condition_241411)
        # SSA begins for if statement (line 426)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 427):
        
        # Assigning a Name to a Subscript (line 427):
        
        # Assigning a Name to a Subscript (line 427):
        # Getting the type of 'nop' (line 427)
        nop_241412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 39), 'nop')
        # Getting the type of 'self' (line 427)
        self_241413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 20), 'self')
        # Obtaining the member '__dict__' of a type (line 427)
        dict___241414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 20), self_241413, '__dict__')
        # Getting the type of 'm' (line 427)
        m_241415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 34), 'm')
        # Storing an element on a container (line 427)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 427, 20), dict___241414, (m_241415, nop_241412))
        # SSA join for if statement (line 426)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 422)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        
        # Call to hasattr(...): (line 430)
        # Processing the call arguments (line 430)
        # Getting the type of 'fh' (line 430)
        fh_241417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 27), 'fh', False)
        unicode_241418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 31), 'unicode', u'name')
        # Processing the call keyword arguments (line 430)
        kwargs_241419 = {}
        # Getting the type of 'hasattr' (line 430)
        hasattr_241416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 19), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 430)
        hasattr_call_result_241420 = invoke(stypy.reporting.localization.Localization(__file__, 430, 19), hasattr_241416, *[fh_241417, unicode_241418], **kwargs_241419)
        
        # Applying the 'not' unary operator (line 430)
        result_not__241421 = python_operator(stypy.reporting.localization.Localization(__file__, 430, 15), 'not', hasattr_call_result_241420)
        
        
        
        # Call to exists(...): (line 430)
        # Processing the call arguments (line 430)
        # Getting the type of 'fh' (line 430)
        fh_241425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 61), 'fh', False)
        # Obtaining the member 'name' of a type (line 430)
        name_241426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 61), fh_241425, 'name')
        # Processing the call keyword arguments (line 430)
        kwargs_241427 = {}
        # Getting the type of 'os' (line 430)
        os_241422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 46), 'os', False)
        # Obtaining the member 'path' of a type (line 430)
        path_241423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 46), os_241422, 'path')
        # Obtaining the member 'exists' of a type (line 430)
        exists_241424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 46), path_241423, 'exists')
        # Calling exists(args, kwargs) (line 430)
        exists_call_result_241428 = invoke(stypy.reporting.localization.Localization(__file__, 430, 46), exists_241424, *[name_241426], **kwargs_241427)
        
        # Applying the 'not' unary operator (line 430)
        result_not__241429 = python_operator(stypy.reporting.localization.Localization(__file__, 430, 42), 'not', exists_call_result_241428)
        
        # Applying the binary operator 'or' (line 430)
        result_or_keyword_241430 = python_operator(stypy.reporting.localization.Localization(__file__, 430, 15), 'or', result_not__241421, result_not__241429)
        
        # Testing the type of an if condition (line 430)
        if_condition_241431 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 430, 12), result_or_keyword_241430)
        # Assigning a type to the variable 'if_condition_241431' (line 430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 12), 'if_condition_241431', if_condition_241431)
        # SSA begins for if statement (line 430)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 431)
        # Processing the call arguments (line 431)
        unicode_241434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, 30), 'unicode', u'streamed pgf-code does not support raster graphics, consider using the pgf-to-pdf option')
        # Getting the type of 'UserWarning' (line 433)
        UserWarning_241435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 30), 'UserWarning', False)
        # Processing the call keyword arguments (line 431)
        kwargs_241436 = {}
        # Getting the type of 'warnings' (line 431)
        warnings_241432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 431)
        warn_241433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 16), warnings_241432, 'warn')
        # Calling warn(args, kwargs) (line 431)
        warn_call_result_241437 = invoke(stypy.reporting.localization.Localization(__file__, 431, 16), warn_241433, *[unicode_241434, UserWarning_241435], **kwargs_241436)
        
        
        # Assigning a Lambda to a Subscript (line 434):
        
        # Assigning a Lambda to a Subscript (line 434):
        
        # Assigning a Lambda to a Subscript (line 434):

        @norecursion
        def _stypy_temp_lambda_105(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_105'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_105', 434, 46, True)
            # Passed parameters checking function
            _stypy_temp_lambda_105.stypy_localization = localization
            _stypy_temp_lambda_105.stypy_type_of_self = None
            _stypy_temp_lambda_105.stypy_type_store = module_type_store
            _stypy_temp_lambda_105.stypy_function_name = '_stypy_temp_lambda_105'
            _stypy_temp_lambda_105.stypy_param_names_list = []
            _stypy_temp_lambda_105.stypy_varargs_param_name = 'args'
            _stypy_temp_lambda_105.stypy_kwargs_param_name = 'kwargs'
            _stypy_temp_lambda_105.stypy_call_defaults = defaults
            _stypy_temp_lambda_105.stypy_call_varargs = varargs
            _stypy_temp_lambda_105.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_105', [], 'args', 'kwargs', defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_105', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'None' (line 434)
            None_241438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 70), 'None')
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 434)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 46), 'stypy_return_type', None_241438)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_105' in the type store
            # Getting the type of 'stypy_return_type' (line 434)
            stypy_return_type_241439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 46), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_241439)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_105'
            return stypy_return_type_241439

        # Assigning a type to the variable '_stypy_temp_lambda_105' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 46), '_stypy_temp_lambda_105', _stypy_temp_lambda_105)
        # Getting the type of '_stypy_temp_lambda_105' (line 434)
        _stypy_temp_lambda_105_241440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 46), '_stypy_temp_lambda_105')
        # Getting the type of 'self' (line 434)
        self_241441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 16), 'self')
        # Obtaining the member '__dict__' of a type (line 434)
        dict___241442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 16), self_241441, '__dict__')
        unicode_241443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 30), 'unicode', u'draw_image')
        # Storing an element on a container (line 434)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 434, 16), dict___241442, (unicode_241443, _stypy_temp_lambda_105_241440))
        # SSA join for if statement (line 430)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 422)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def draw_markers(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 436)
        None_241444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 79), 'None')
        defaults = [None_241444]
        # Create a new context for function 'draw_markers'
        module_type_store = module_type_store.open_function_context('draw_markers', 436, 4, False)
        # Assigning a type to the variable 'self' (line 437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf.draw_markers.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf.draw_markers.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf.draw_markers.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf.draw_markers.__dict__.__setitem__('stypy_function_name', 'RendererPgf.draw_markers')
        RendererPgf.draw_markers.__dict__.__setitem__('stypy_param_names_list', ['gc', 'marker_path', 'marker_trans', 'path', 'trans', 'rgbFace'])
        RendererPgf.draw_markers.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf.draw_markers.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf.draw_markers.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf.draw_markers.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf.draw_markers.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf.draw_markers.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf.draw_markers', ['gc', 'marker_path', 'marker_trans', 'path', 'trans', 'rgbFace'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_markers', localization, ['gc', 'marker_path', 'marker_trans', 'path', 'trans', 'rgbFace'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_markers(...)' code ##################

        
        # Call to writeln(...): (line 437)
        # Processing the call arguments (line 437)
        # Getting the type of 'self' (line 437)
        self_241446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 437)
        fh_241447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 437, 16), self_241446, 'fh')
        unicode_241448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 437, 25), 'unicode', u'\\begin{pgfscope}')
        # Processing the call keyword arguments (line 437)
        kwargs_241449 = {}
        # Getting the type of 'writeln' (line 437)
        writeln_241445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 437)
        writeln_call_result_241450 = invoke(stypy.reporting.localization.Localization(__file__, 437, 8), writeln_241445, *[fh_241447, unicode_241448], **kwargs_241449)
        
        
        # Assigning a BinOp to a Name (line 440):
        
        # Assigning a BinOp to a Name (line 440):
        
        # Assigning a BinOp to a Name (line 440):
        float_241451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 440, 12), 'float')
        # Getting the type of 'self' (line 440)
        self_241452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 17), 'self')
        # Obtaining the member 'dpi' of a type (line 440)
        dpi_241453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 17), self_241452, 'dpi')
        # Applying the binary operator 'div' (line 440)
        result_div_241454 = python_operator(stypy.reporting.localization.Localization(__file__, 440, 12), 'div', float_241451, dpi_241453)
        
        # Assigning a type to the variable 'f' (line 440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 8), 'f', result_div_241454)
        
        # Call to _print_pgf_clip(...): (line 443)
        # Processing the call arguments (line 443)
        # Getting the type of 'gc' (line 443)
        gc_241457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 29), 'gc', False)
        # Processing the call keyword arguments (line 443)
        kwargs_241458 = {}
        # Getting the type of 'self' (line 443)
        self_241455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 8), 'self', False)
        # Obtaining the member '_print_pgf_clip' of a type (line 443)
        _print_pgf_clip_241456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 443, 8), self_241455, '_print_pgf_clip')
        # Calling _print_pgf_clip(args, kwargs) (line 443)
        _print_pgf_clip_call_result_241459 = invoke(stypy.reporting.localization.Localization(__file__, 443, 8), _print_pgf_clip_241456, *[gc_241457], **kwargs_241458)
        
        
        # Call to _print_pgf_path_styles(...): (line 444)
        # Processing the call arguments (line 444)
        # Getting the type of 'gc' (line 444)
        gc_241462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 36), 'gc', False)
        # Getting the type of 'rgbFace' (line 444)
        rgbFace_241463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 40), 'rgbFace', False)
        # Processing the call keyword arguments (line 444)
        kwargs_241464 = {}
        # Getting the type of 'self' (line 444)
        self_241460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'self', False)
        # Obtaining the member '_print_pgf_path_styles' of a type (line 444)
        _print_pgf_path_styles_241461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 8), self_241460, '_print_pgf_path_styles')
        # Calling _print_pgf_path_styles(args, kwargs) (line 444)
        _print_pgf_path_styles_call_result_241465 = invoke(stypy.reporting.localization.Localization(__file__, 444, 8), _print_pgf_path_styles_241461, *[gc_241462, rgbFace_241463], **kwargs_241464)
        
        
        # Assigning a Call to a Tuple (line 447):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_points(...): (line 447)
        # Processing the call keyword arguments (line 447)
        kwargs_241472 = {}
        
        # Call to get_extents(...): (line 447)
        # Processing the call arguments (line 447)
        # Getting the type of 'marker_trans' (line 447)
        marker_trans_241468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 41), 'marker_trans', False)
        # Processing the call keyword arguments (line 447)
        kwargs_241469 = {}
        # Getting the type of 'marker_path' (line 447)
        marker_path_241466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 17), 'marker_path', False)
        # Obtaining the member 'get_extents' of a type (line 447)
        get_extents_241467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 17), marker_path_241466, 'get_extents')
        # Calling get_extents(args, kwargs) (line 447)
        get_extents_call_result_241470 = invoke(stypy.reporting.localization.Localization(__file__, 447, 17), get_extents_241467, *[marker_trans_241468], **kwargs_241469)
        
        # Obtaining the member 'get_points' of a type (line 447)
        get_points_241471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 17), get_extents_call_result_241470, 'get_points')
        # Calling get_points(args, kwargs) (line 447)
        get_points_call_result_241473 = invoke(stypy.reporting.localization.Localization(__file__, 447, 17), get_points_241471, *[], **kwargs_241472)
        
        # Assigning a type to the variable 'call_assignment_240243' (line 447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'call_assignment_240243', get_points_call_result_241473)
        
        # Assigning a Call to a Name (line 447):
        
        # Assigning a Call to a Name (line 447):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_241476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 447, 8), 'int')
        # Processing the call keyword arguments
        kwargs_241477 = {}
        # Getting the type of 'call_assignment_240243' (line 447)
        call_assignment_240243_241474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'call_assignment_240243', False)
        # Obtaining the member '__getitem__' of a type (line 447)
        getitem___241475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 8), call_assignment_240243_241474, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_241478 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___241475, *[int_241476], **kwargs_241477)
        
        # Assigning a type to the variable 'call_assignment_240244' (line 447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'call_assignment_240244', getitem___call_result_241478)
        
        # Assigning a Name to a Name (line 447):
        
        # Assigning a Name to a Name (line 447):
        # Getting the type of 'call_assignment_240244' (line 447)
        call_assignment_240244_241479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'call_assignment_240244')
        # Assigning a type to the variable 'bl' (line 447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'bl', call_assignment_240244_241479)
        
        # Assigning a Call to a Name (line 447):
        
        # Assigning a Call to a Name (line 447):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_241482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 447, 8), 'int')
        # Processing the call keyword arguments
        kwargs_241483 = {}
        # Getting the type of 'call_assignment_240243' (line 447)
        call_assignment_240243_241480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'call_assignment_240243', False)
        # Obtaining the member '__getitem__' of a type (line 447)
        getitem___241481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 8), call_assignment_240243_241480, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_241484 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___241481, *[int_241482], **kwargs_241483)
        
        # Assigning a type to the variable 'call_assignment_240245' (line 447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'call_assignment_240245', getitem___call_result_241484)
        
        # Assigning a Name to a Name (line 447):
        
        # Assigning a Name to a Name (line 447):
        # Getting the type of 'call_assignment_240245' (line 447)
        call_assignment_240245_241485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'call_assignment_240245')
        # Assigning a type to the variable 'tr' (line 447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 12), 'tr', call_assignment_240245_241485)
        
        # Assigning a Tuple to a Name (line 448):
        
        # Assigning a Tuple to a Name (line 448):
        
        # Assigning a Tuple to a Name (line 448):
        
        # Obtaining an instance of the builtin type 'tuple' (line 448)
        tuple_241486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 448)
        # Adding element type (line 448)
        
        # Obtaining the type of the subscript
        int_241487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 20), 'int')
        # Getting the type of 'bl' (line 448)
        bl_241488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 17), 'bl')
        # Obtaining the member '__getitem__' of a type (line 448)
        getitem___241489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 17), bl_241488, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 448)
        subscript_call_result_241490 = invoke(stypy.reporting.localization.Localization(__file__, 448, 17), getitem___241489, int_241487)
        
        # Getting the type of 'f' (line 448)
        f_241491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 25), 'f')
        # Applying the binary operator '*' (line 448)
        result_mul_241492 = python_operator(stypy.reporting.localization.Localization(__file__, 448, 17), '*', subscript_call_result_241490, f_241491)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 448, 17), tuple_241486, result_mul_241492)
        # Adding element type (line 448)
        
        # Obtaining the type of the subscript
        int_241493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 31), 'int')
        # Getting the type of 'bl' (line 448)
        bl_241494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 28), 'bl')
        # Obtaining the member '__getitem__' of a type (line 448)
        getitem___241495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 28), bl_241494, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 448)
        subscript_call_result_241496 = invoke(stypy.reporting.localization.Localization(__file__, 448, 28), getitem___241495, int_241493)
        
        # Getting the type of 'f' (line 448)
        f_241497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 36), 'f')
        # Applying the binary operator '*' (line 448)
        result_mul_241498 = python_operator(stypy.reporting.localization.Localization(__file__, 448, 28), '*', subscript_call_result_241496, f_241497)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 448, 17), tuple_241486, result_mul_241498)
        # Adding element type (line 448)
        
        # Obtaining the type of the subscript
        int_241499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 42), 'int')
        # Getting the type of 'tr' (line 448)
        tr_241500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 39), 'tr')
        # Obtaining the member '__getitem__' of a type (line 448)
        getitem___241501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 39), tr_241500, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 448)
        subscript_call_result_241502 = invoke(stypy.reporting.localization.Localization(__file__, 448, 39), getitem___241501, int_241499)
        
        # Getting the type of 'f' (line 448)
        f_241503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 47), 'f')
        # Applying the binary operator '*' (line 448)
        result_mul_241504 = python_operator(stypy.reporting.localization.Localization(__file__, 448, 39), '*', subscript_call_result_241502, f_241503)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 448, 17), tuple_241486, result_mul_241504)
        # Adding element type (line 448)
        
        # Obtaining the type of the subscript
        int_241505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 53), 'int')
        # Getting the type of 'tr' (line 448)
        tr_241506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 50), 'tr')
        # Obtaining the member '__getitem__' of a type (line 448)
        getitem___241507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 50), tr_241506, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 448)
        subscript_call_result_241508 = invoke(stypy.reporting.localization.Localization(__file__, 448, 50), getitem___241507, int_241505)
        
        # Getting the type of 'f' (line 448)
        f_241509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 58), 'f')
        # Applying the binary operator '*' (line 448)
        result_mul_241510 = python_operator(stypy.reporting.localization.Localization(__file__, 448, 50), '*', subscript_call_result_241508, f_241509)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 448, 17), tuple_241486, result_mul_241510)
        
        # Assigning a type to the variable 'coords' (line 448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 8), 'coords', tuple_241486)
        
        # Call to writeln(...): (line 449)
        # Processing the call arguments (line 449)
        # Getting the type of 'self' (line 449)
        self_241512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 449)
        fh_241513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 16), self_241512, 'fh')
        unicode_241514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 449, 25), 'unicode', u'\\pgfsys@defobject{currentmarker}{\\pgfqpoint{%fin}{%fin}}{\\pgfqpoint{%fin}{%fin}}{')
        # Getting the type of 'coords' (line 449)
        coords_241515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 112), 'coords', False)
        # Applying the binary operator '%' (line 449)
        result_mod_241516 = python_operator(stypy.reporting.localization.Localization(__file__, 449, 25), '%', unicode_241514, coords_241515)
        
        # Processing the call keyword arguments (line 449)
        kwargs_241517 = {}
        # Getting the type of 'writeln' (line 449)
        writeln_241511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 449)
        writeln_call_result_241518 = invoke(stypy.reporting.localization.Localization(__file__, 449, 8), writeln_241511, *[fh_241513, result_mod_241516], **kwargs_241517)
        
        
        # Call to _print_pgf_path(...): (line 450)
        # Processing the call arguments (line 450)
        # Getting the type of 'None' (line 450)
        None_241521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 29), 'None', False)
        # Getting the type of 'marker_path' (line 450)
        marker_path_241522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 35), 'marker_path', False)
        # Getting the type of 'marker_trans' (line 450)
        marker_trans_241523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 48), 'marker_trans', False)
        # Processing the call keyword arguments (line 450)
        kwargs_241524 = {}
        # Getting the type of 'self' (line 450)
        self_241519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 8), 'self', False)
        # Obtaining the member '_print_pgf_path' of a type (line 450)
        _print_pgf_path_241520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 8), self_241519, '_print_pgf_path')
        # Calling _print_pgf_path(args, kwargs) (line 450)
        _print_pgf_path_call_result_241525 = invoke(stypy.reporting.localization.Localization(__file__, 450, 8), _print_pgf_path_241520, *[None_241521, marker_path_241522, marker_trans_241523], **kwargs_241524)
        
        
        # Call to _pgf_path_draw(...): (line 451)
        # Processing the call keyword arguments (line 451)
        
        
        # Call to get_linewidth(...): (line 451)
        # Processing the call keyword arguments (line 451)
        kwargs_241530 = {}
        # Getting the type of 'gc' (line 451)
        gc_241528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 35), 'gc', False)
        # Obtaining the member 'get_linewidth' of a type (line 451)
        get_linewidth_241529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 451, 35), gc_241528, 'get_linewidth')
        # Calling get_linewidth(args, kwargs) (line 451)
        get_linewidth_call_result_241531 = invoke(stypy.reporting.localization.Localization(__file__, 451, 35), get_linewidth_241529, *[], **kwargs_241530)
        
        float_241532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 451, 57), 'float')
        # Applying the binary operator '!=' (line 451)
        result_ne_241533 = python_operator(stypy.reporting.localization.Localization(__file__, 451, 35), '!=', get_linewidth_call_result_241531, float_241532)
        
        keyword_241534 = result_ne_241533
        
        # Getting the type of 'rgbFace' (line 452)
        rgbFace_241535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 33), 'rgbFace', False)
        # Getting the type of 'None' (line 452)
        None_241536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 48), 'None', False)
        # Applying the binary operator 'isnot' (line 452)
        result_is_not_241537 = python_operator(stypy.reporting.localization.Localization(__file__, 452, 33), 'isnot', rgbFace_241535, None_241536)
        
        keyword_241538 = result_is_not_241537
        kwargs_241539 = {'stroke': keyword_241534, 'fill': keyword_241538}
        # Getting the type of 'self' (line 451)
        self_241526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 8), 'self', False)
        # Obtaining the member '_pgf_path_draw' of a type (line 451)
        _pgf_path_draw_241527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 451, 8), self_241526, '_pgf_path_draw')
        # Calling _pgf_path_draw(args, kwargs) (line 451)
        _pgf_path_draw_call_result_241540 = invoke(stypy.reporting.localization.Localization(__file__, 451, 8), _pgf_path_draw_241527, *[], **kwargs_241539)
        
        
        # Call to writeln(...): (line 453)
        # Processing the call arguments (line 453)
        # Getting the type of 'self' (line 453)
        self_241542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 453)
        fh_241543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 16), self_241542, 'fh')
        unicode_241544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 453, 25), 'unicode', u'}')
        # Processing the call keyword arguments (line 453)
        kwargs_241545 = {}
        # Getting the type of 'writeln' (line 453)
        writeln_241541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 453)
        writeln_call_result_241546 = invoke(stypy.reporting.localization.Localization(__file__, 453, 8), writeln_241541, *[fh_241543, unicode_241544], **kwargs_241545)
        
        
        
        # Call to iter_segments(...): (line 456)
        # Processing the call arguments (line 456)
        # Getting the type of 'trans' (line 456)
        trans_241549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 46), 'trans', False)
        # Processing the call keyword arguments (line 456)
        # Getting the type of 'False' (line 456)
        False_241550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 62), 'False', False)
        keyword_241551 = False_241550
        kwargs_241552 = {'simplify': keyword_241551}
        # Getting the type of 'path' (line 456)
        path_241547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 27), 'path', False)
        # Obtaining the member 'iter_segments' of a type (line 456)
        iter_segments_241548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 27), path_241547, 'iter_segments')
        # Calling iter_segments(args, kwargs) (line 456)
        iter_segments_call_result_241553 = invoke(stypy.reporting.localization.Localization(__file__, 456, 27), iter_segments_241548, *[trans_241549], **kwargs_241552)
        
        # Testing the type of a for loop iterable (line 456)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 456, 8), iter_segments_call_result_241553)
        # Getting the type of the for loop variable (line 456)
        for_loop_var_241554 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 456, 8), iter_segments_call_result_241553)
        # Assigning a type to the variable 'point' (line 456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 8), 'point', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 456, 8), for_loop_var_241554))
        # Assigning a type to the variable 'code' (line 456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 8), 'code', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 456, 8), for_loop_var_241554))
        # SSA begins for a for statement (line 456)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Tuple to a Tuple (line 457):
        
        # Assigning a BinOp to a Name (line 457):
        
        # Assigning a BinOp to a Name (line 457):
        
        # Obtaining the type of the subscript
        int_241555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 457, 25), 'int')
        # Getting the type of 'point' (line 457)
        point_241556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 19), 'point')
        # Obtaining the member '__getitem__' of a type (line 457)
        getitem___241557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 19), point_241556, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 457)
        subscript_call_result_241558 = invoke(stypy.reporting.localization.Localization(__file__, 457, 19), getitem___241557, int_241555)
        
        # Getting the type of 'f' (line 457)
        f_241559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 30), 'f')
        # Applying the binary operator '*' (line 457)
        result_mul_241560 = python_operator(stypy.reporting.localization.Localization(__file__, 457, 19), '*', subscript_call_result_241558, f_241559)
        
        # Assigning a type to the variable 'tuple_assignment_240246' (line 457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 12), 'tuple_assignment_240246', result_mul_241560)
        
        # Assigning a BinOp to a Name (line 457):
        
        # Assigning a BinOp to a Name (line 457):
        
        # Obtaining the type of the subscript
        int_241561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 457, 39), 'int')
        # Getting the type of 'point' (line 457)
        point_241562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 33), 'point')
        # Obtaining the member '__getitem__' of a type (line 457)
        getitem___241563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 33), point_241562, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 457)
        subscript_call_result_241564 = invoke(stypy.reporting.localization.Localization(__file__, 457, 33), getitem___241563, int_241561)
        
        # Getting the type of 'f' (line 457)
        f_241565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 44), 'f')
        # Applying the binary operator '*' (line 457)
        result_mul_241566 = python_operator(stypy.reporting.localization.Localization(__file__, 457, 33), '*', subscript_call_result_241564, f_241565)
        
        # Assigning a type to the variable 'tuple_assignment_240247' (line 457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 12), 'tuple_assignment_240247', result_mul_241566)
        
        # Assigning a Name to a Name (line 457):
        
        # Assigning a Name to a Name (line 457):
        # Getting the type of 'tuple_assignment_240246' (line 457)
        tuple_assignment_240246_241567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 12), 'tuple_assignment_240246')
        # Assigning a type to the variable 'x' (line 457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 12), 'x', tuple_assignment_240246_241567)
        
        # Assigning a Name to a Name (line 457):
        
        # Assigning a Name to a Name (line 457):
        # Getting the type of 'tuple_assignment_240247' (line 457)
        tuple_assignment_240247_241568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 12), 'tuple_assignment_240247')
        # Assigning a type to the variable 'y' (line 457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 15), 'y', tuple_assignment_240247_241568)
        
        # Call to writeln(...): (line 458)
        # Processing the call arguments (line 458)
        # Getting the type of 'self' (line 458)
        self_241570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 458)
        fh_241571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 20), self_241570, 'fh')
        unicode_241572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 458, 29), 'unicode', u'\\begin{pgfscope}')
        # Processing the call keyword arguments (line 458)
        kwargs_241573 = {}
        # Getting the type of 'writeln' (line 458)
        writeln_241569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 458)
        writeln_call_result_241574 = invoke(stypy.reporting.localization.Localization(__file__, 458, 12), writeln_241569, *[fh_241571, unicode_241572], **kwargs_241573)
        
        
        # Call to writeln(...): (line 459)
        # Processing the call arguments (line 459)
        # Getting the type of 'self' (line 459)
        self_241576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 459)
        fh_241577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 20), self_241576, 'fh')
        unicode_241578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, 29), 'unicode', u'\\pgfsys@transformshift{%fin}{%fin}')
        
        # Obtaining an instance of the builtin type 'tuple' (line 459)
        tuple_241579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, 70), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 459)
        # Adding element type (line 459)
        # Getting the type of 'x' (line 459)
        x_241580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 70), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 459, 70), tuple_241579, x_241580)
        # Adding element type (line 459)
        # Getting the type of 'y' (line 459)
        y_241581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 73), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 459, 70), tuple_241579, y_241581)
        
        # Applying the binary operator '%' (line 459)
        result_mod_241582 = python_operator(stypy.reporting.localization.Localization(__file__, 459, 29), '%', unicode_241578, tuple_241579)
        
        # Processing the call keyword arguments (line 459)
        kwargs_241583 = {}
        # Getting the type of 'writeln' (line 459)
        writeln_241575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 459)
        writeln_call_result_241584 = invoke(stypy.reporting.localization.Localization(__file__, 459, 12), writeln_241575, *[fh_241577, result_mod_241582], **kwargs_241583)
        
        
        # Call to writeln(...): (line 460)
        # Processing the call arguments (line 460)
        # Getting the type of 'self' (line 460)
        self_241586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 460)
        fh_241587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 20), self_241586, 'fh')
        unicode_241588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 460, 29), 'unicode', u'\\pgfsys@useobject{currentmarker}{}')
        # Processing the call keyword arguments (line 460)
        kwargs_241589 = {}
        # Getting the type of 'writeln' (line 460)
        writeln_241585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 460)
        writeln_call_result_241590 = invoke(stypy.reporting.localization.Localization(__file__, 460, 12), writeln_241585, *[fh_241587, unicode_241588], **kwargs_241589)
        
        
        # Call to writeln(...): (line 461)
        # Processing the call arguments (line 461)
        # Getting the type of 'self' (line 461)
        self_241592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 461)
        fh_241593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 20), self_241592, 'fh')
        unicode_241594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, 29), 'unicode', u'\\end{pgfscope}')
        # Processing the call keyword arguments (line 461)
        kwargs_241595 = {}
        # Getting the type of 'writeln' (line 461)
        writeln_241591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 461)
        writeln_call_result_241596 = invoke(stypy.reporting.localization.Localization(__file__, 461, 12), writeln_241591, *[fh_241593, unicode_241594], **kwargs_241595)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to writeln(...): (line 463)
        # Processing the call arguments (line 463)
        # Getting the type of 'self' (line 463)
        self_241598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 463)
        fh_241599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 463, 16), self_241598, 'fh')
        unicode_241600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 463, 25), 'unicode', u'\\end{pgfscope}')
        # Processing the call keyword arguments (line 463)
        kwargs_241601 = {}
        # Getting the type of 'writeln' (line 463)
        writeln_241597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 463)
        writeln_call_result_241602 = invoke(stypy.reporting.localization.Localization(__file__, 463, 8), writeln_241597, *[fh_241599, unicode_241600], **kwargs_241601)
        
        
        # ################# End of 'draw_markers(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_markers' in the type store
        # Getting the type of 'stypy_return_type' (line 436)
        stypy_return_type_241603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_241603)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_markers'
        return stypy_return_type_241603


    @norecursion
    def draw_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 465)
        None_241604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 53), 'None')
        defaults = [None_241604]
        # Create a new context for function 'draw_path'
        module_type_store = module_type_store.open_function_context('draw_path', 465, 4, False)
        # Assigning a type to the variable 'self' (line 466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf.draw_path.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf.draw_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf.draw_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf.draw_path.__dict__.__setitem__('stypy_function_name', 'RendererPgf.draw_path')
        RendererPgf.draw_path.__dict__.__setitem__('stypy_param_names_list', ['gc', 'path', 'transform', 'rgbFace'])
        RendererPgf.draw_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf.draw_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf.draw_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf.draw_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf.draw_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf.draw_path.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf.draw_path', ['gc', 'path', 'transform', 'rgbFace'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_path', localization, ['gc', 'path', 'transform', 'rgbFace'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_path(...)' code ##################

        
        # Call to writeln(...): (line 466)
        # Processing the call arguments (line 466)
        # Getting the type of 'self' (line 466)
        self_241606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 466)
        fh_241607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 16), self_241606, 'fh')
        unicode_241608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, 25), 'unicode', u'\\begin{pgfscope}')
        # Processing the call keyword arguments (line 466)
        kwargs_241609 = {}
        # Getting the type of 'writeln' (line 466)
        writeln_241605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 466)
        writeln_call_result_241610 = invoke(stypy.reporting.localization.Localization(__file__, 466, 8), writeln_241605, *[fh_241607, unicode_241608], **kwargs_241609)
        
        
        # Call to _print_pgf_clip(...): (line 468)
        # Processing the call arguments (line 468)
        # Getting the type of 'gc' (line 468)
        gc_241613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 29), 'gc', False)
        # Processing the call keyword arguments (line 468)
        kwargs_241614 = {}
        # Getting the type of 'self' (line 468)
        self_241611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 8), 'self', False)
        # Obtaining the member '_print_pgf_clip' of a type (line 468)
        _print_pgf_clip_241612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 8), self_241611, '_print_pgf_clip')
        # Calling _print_pgf_clip(args, kwargs) (line 468)
        _print_pgf_clip_call_result_241615 = invoke(stypy.reporting.localization.Localization(__file__, 468, 8), _print_pgf_clip_241612, *[gc_241613], **kwargs_241614)
        
        
        # Call to _print_pgf_path_styles(...): (line 469)
        # Processing the call arguments (line 469)
        # Getting the type of 'gc' (line 469)
        gc_241618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 36), 'gc', False)
        # Getting the type of 'rgbFace' (line 469)
        rgbFace_241619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 40), 'rgbFace', False)
        # Processing the call keyword arguments (line 469)
        kwargs_241620 = {}
        # Getting the type of 'self' (line 469)
        self_241616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'self', False)
        # Obtaining the member '_print_pgf_path_styles' of a type (line 469)
        _print_pgf_path_styles_241617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 8), self_241616, '_print_pgf_path_styles')
        # Calling _print_pgf_path_styles(args, kwargs) (line 469)
        _print_pgf_path_styles_call_result_241621 = invoke(stypy.reporting.localization.Localization(__file__, 469, 8), _print_pgf_path_styles_241617, *[gc_241618, rgbFace_241619], **kwargs_241620)
        
        
        # Call to _print_pgf_path(...): (line 470)
        # Processing the call arguments (line 470)
        # Getting the type of 'gc' (line 470)
        gc_241624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 29), 'gc', False)
        # Getting the type of 'path' (line 470)
        path_241625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 33), 'path', False)
        # Getting the type of 'transform' (line 470)
        transform_241626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 39), 'transform', False)
        # Getting the type of 'rgbFace' (line 470)
        rgbFace_241627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 50), 'rgbFace', False)
        # Processing the call keyword arguments (line 470)
        kwargs_241628 = {}
        # Getting the type of 'self' (line 470)
        self_241622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 8), 'self', False)
        # Obtaining the member '_print_pgf_path' of a type (line 470)
        _print_pgf_path_241623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 8), self_241622, '_print_pgf_path')
        # Calling _print_pgf_path(args, kwargs) (line 470)
        _print_pgf_path_call_result_241629 = invoke(stypy.reporting.localization.Localization(__file__, 470, 8), _print_pgf_path_241623, *[gc_241624, path_241625, transform_241626, rgbFace_241627], **kwargs_241628)
        
        
        # Call to _pgf_path_draw(...): (line 471)
        # Processing the call keyword arguments (line 471)
        
        
        # Call to get_linewidth(...): (line 471)
        # Processing the call keyword arguments (line 471)
        kwargs_241634 = {}
        # Getting the type of 'gc' (line 471)
        gc_241632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 35), 'gc', False)
        # Obtaining the member 'get_linewidth' of a type (line 471)
        get_linewidth_241633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 35), gc_241632, 'get_linewidth')
        # Calling get_linewidth(args, kwargs) (line 471)
        get_linewidth_call_result_241635 = invoke(stypy.reporting.localization.Localization(__file__, 471, 35), get_linewidth_241633, *[], **kwargs_241634)
        
        float_241636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 57), 'float')
        # Applying the binary operator '!=' (line 471)
        result_ne_241637 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 35), '!=', get_linewidth_call_result_241635, float_241636)
        
        keyword_241638 = result_ne_241637
        
        # Getting the type of 'rgbFace' (line 472)
        rgbFace_241639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 33), 'rgbFace', False)
        # Getting the type of 'None' (line 472)
        None_241640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 48), 'None', False)
        # Applying the binary operator 'isnot' (line 472)
        result_is_not_241641 = python_operator(stypy.reporting.localization.Localization(__file__, 472, 33), 'isnot', rgbFace_241639, None_241640)
        
        keyword_241642 = result_is_not_241641
        kwargs_241643 = {'stroke': keyword_241638, 'fill': keyword_241642}
        # Getting the type of 'self' (line 471)
        self_241630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 8), 'self', False)
        # Obtaining the member '_pgf_path_draw' of a type (line 471)
        _pgf_path_draw_241631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 8), self_241630, '_pgf_path_draw')
        # Calling _pgf_path_draw(args, kwargs) (line 471)
        _pgf_path_draw_call_result_241644 = invoke(stypy.reporting.localization.Localization(__file__, 471, 8), _pgf_path_draw_241631, *[], **kwargs_241643)
        
        
        # Call to writeln(...): (line 473)
        # Processing the call arguments (line 473)
        # Getting the type of 'self' (line 473)
        self_241646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 473)
        fh_241647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 16), self_241646, 'fh')
        unicode_241648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 25), 'unicode', u'\\end{pgfscope}')
        # Processing the call keyword arguments (line 473)
        kwargs_241649 = {}
        # Getting the type of 'writeln' (line 473)
        writeln_241645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 473)
        writeln_call_result_241650 = invoke(stypy.reporting.localization.Localization(__file__, 473, 8), writeln_241645, *[fh_241647, unicode_241648], **kwargs_241649)
        
        
        
        # Call to get_hatch(...): (line 476)
        # Processing the call keyword arguments (line 476)
        kwargs_241653 = {}
        # Getting the type of 'gc' (line 476)
        gc_241651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 11), 'gc', False)
        # Obtaining the member 'get_hatch' of a type (line 476)
        get_hatch_241652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 11), gc_241651, 'get_hatch')
        # Calling get_hatch(args, kwargs) (line 476)
        get_hatch_call_result_241654 = invoke(stypy.reporting.localization.Localization(__file__, 476, 11), get_hatch_241652, *[], **kwargs_241653)
        
        # Testing the type of an if condition (line 476)
        if_condition_241655 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 476, 8), get_hatch_call_result_241654)
        # Assigning a type to the variable 'if_condition_241655' (line 476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 8), 'if_condition_241655', if_condition_241655)
        # SSA begins for if statement (line 476)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to writeln(...): (line 477)
        # Processing the call arguments (line 477)
        # Getting the type of 'self' (line 477)
        self_241657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 477)
        fh_241658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 20), self_241657, 'fh')
        unicode_241659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 29), 'unicode', u'\\begin{pgfscope}')
        # Processing the call keyword arguments (line 477)
        kwargs_241660 = {}
        # Getting the type of 'writeln' (line 477)
        writeln_241656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 477)
        writeln_call_result_241661 = invoke(stypy.reporting.localization.Localization(__file__, 477, 12), writeln_241656, *[fh_241658, unicode_241659], **kwargs_241660)
        
        
        # Call to _print_pgf_path_styles(...): (line 478)
        # Processing the call arguments (line 478)
        # Getting the type of 'gc' (line 478)
        gc_241664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 40), 'gc', False)
        # Getting the type of 'rgbFace' (line 478)
        rgbFace_241665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 44), 'rgbFace', False)
        # Processing the call keyword arguments (line 478)
        kwargs_241666 = {}
        # Getting the type of 'self' (line 478)
        self_241662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 12), 'self', False)
        # Obtaining the member '_print_pgf_path_styles' of a type (line 478)
        _print_pgf_path_styles_241663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 12), self_241662, '_print_pgf_path_styles')
        # Calling _print_pgf_path_styles(args, kwargs) (line 478)
        _print_pgf_path_styles_call_result_241667 = invoke(stypy.reporting.localization.Localization(__file__, 478, 12), _print_pgf_path_styles_241663, *[gc_241664, rgbFace_241665], **kwargs_241666)
        
        
        # Call to _print_pgf_clip(...): (line 481)
        # Processing the call arguments (line 481)
        # Getting the type of 'gc' (line 481)
        gc_241670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 33), 'gc', False)
        # Processing the call keyword arguments (line 481)
        kwargs_241671 = {}
        # Getting the type of 'self' (line 481)
        self_241668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 12), 'self', False)
        # Obtaining the member '_print_pgf_clip' of a type (line 481)
        _print_pgf_clip_241669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 481, 12), self_241668, '_print_pgf_clip')
        # Calling _print_pgf_clip(args, kwargs) (line 481)
        _print_pgf_clip_call_result_241672 = invoke(stypy.reporting.localization.Localization(__file__, 481, 12), _print_pgf_clip_241669, *[gc_241670], **kwargs_241671)
        
        
        # Call to _print_pgf_path(...): (line 482)
        # Processing the call arguments (line 482)
        # Getting the type of 'gc' (line 482)
        gc_241675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 33), 'gc', False)
        # Getting the type of 'path' (line 482)
        path_241676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 37), 'path', False)
        # Getting the type of 'transform' (line 482)
        transform_241677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 43), 'transform', False)
        # Getting the type of 'rgbFace' (line 482)
        rgbFace_241678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 54), 'rgbFace', False)
        # Processing the call keyword arguments (line 482)
        kwargs_241679 = {}
        # Getting the type of 'self' (line 482)
        self_241673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'self', False)
        # Obtaining the member '_print_pgf_path' of a type (line 482)
        _print_pgf_path_241674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 12), self_241673, '_print_pgf_path')
        # Calling _print_pgf_path(args, kwargs) (line 482)
        _print_pgf_path_call_result_241680 = invoke(stypy.reporting.localization.Localization(__file__, 482, 12), _print_pgf_path_241674, *[gc_241675, path_241676, transform_241677, rgbFace_241678], **kwargs_241679)
        
        
        # Call to writeln(...): (line 483)
        # Processing the call arguments (line 483)
        # Getting the type of 'self' (line 483)
        self_241682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 483)
        fh_241683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 20), self_241682, 'fh')
        unicode_241684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 29), 'unicode', u'\\pgfusepath{clip}')
        # Processing the call keyword arguments (line 483)
        kwargs_241685 = {}
        # Getting the type of 'writeln' (line 483)
        writeln_241681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 483)
        writeln_call_result_241686 = invoke(stypy.reporting.localization.Localization(__file__, 483, 12), writeln_241681, *[fh_241683, unicode_241684], **kwargs_241685)
        
        
        # Call to writeln(...): (line 486)
        # Processing the call arguments (line 486)
        # Getting the type of 'self' (line 486)
        self_241688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 486)
        fh_241689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 20), self_241688, 'fh')
        unicode_241690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 29), 'unicode', u'\\pgfsys@defobject{currentpattern}{\\pgfqpoint{0in}{0in}}{\\pgfqpoint{1in}{1in}}{')
        # Processing the call keyword arguments (line 486)
        kwargs_241691 = {}
        # Getting the type of 'writeln' (line 486)
        writeln_241687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 486)
        writeln_call_result_241692 = invoke(stypy.reporting.localization.Localization(__file__, 486, 12), writeln_241687, *[fh_241689, unicode_241690], **kwargs_241691)
        
        
        # Call to writeln(...): (line 487)
        # Processing the call arguments (line 487)
        # Getting the type of 'self' (line 487)
        self_241694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 487)
        fh_241695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 20), self_241694, 'fh')
        unicode_241696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 29), 'unicode', u'\\begin{pgfscope}')
        # Processing the call keyword arguments (line 487)
        kwargs_241697 = {}
        # Getting the type of 'writeln' (line 487)
        writeln_241693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 487)
        writeln_call_result_241698 = invoke(stypy.reporting.localization.Localization(__file__, 487, 12), writeln_241693, *[fh_241695, unicode_241696], **kwargs_241697)
        
        
        # Call to writeln(...): (line 488)
        # Processing the call arguments (line 488)
        # Getting the type of 'self' (line 488)
        self_241700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 488)
        fh_241701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 20), self_241700, 'fh')
        unicode_241702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, 29), 'unicode', u'\\pgfpathrectangle{\\pgfqpoint{0in}{0in}}{\\pgfqpoint{1in}{1in}}')
        # Processing the call keyword arguments (line 488)
        kwargs_241703 = {}
        # Getting the type of 'writeln' (line 488)
        writeln_241699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 488)
        writeln_call_result_241704 = invoke(stypy.reporting.localization.Localization(__file__, 488, 12), writeln_241699, *[fh_241701, unicode_241702], **kwargs_241703)
        
        
        # Call to writeln(...): (line 489)
        # Processing the call arguments (line 489)
        # Getting the type of 'self' (line 489)
        self_241706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 489)
        fh_241707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 20), self_241706, 'fh')
        unicode_241708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 29), 'unicode', u'\\pgfusepath{clip}')
        # Processing the call keyword arguments (line 489)
        kwargs_241709 = {}
        # Getting the type of 'writeln' (line 489)
        writeln_241705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 489)
        writeln_call_result_241710 = invoke(stypy.reporting.localization.Localization(__file__, 489, 12), writeln_241705, *[fh_241707, unicode_241708], **kwargs_241709)
        
        
        # Assigning a Call to a Name (line 490):
        
        # Assigning a Call to a Name (line 490):
        
        # Assigning a Call to a Name (line 490):
        
        # Call to scale(...): (line 490)
        # Processing the call arguments (line 490)
        # Getting the type of 'self' (line 490)
        self_241717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 52), 'self', False)
        # Obtaining the member 'dpi' of a type (line 490)
        dpi_241718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 52), self_241717, 'dpi')
        # Processing the call keyword arguments (line 490)
        kwargs_241719 = {}
        
        # Call to Affine2D(...): (line 490)
        # Processing the call keyword arguments (line 490)
        kwargs_241714 = {}
        # Getting the type of 'mpl' (line 490)
        mpl_241711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 20), 'mpl', False)
        # Obtaining the member 'transforms' of a type (line 490)
        transforms_241712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 20), mpl_241711, 'transforms')
        # Obtaining the member 'Affine2D' of a type (line 490)
        Affine2D_241713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 20), transforms_241712, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 490)
        Affine2D_call_result_241715 = invoke(stypy.reporting.localization.Localization(__file__, 490, 20), Affine2D_241713, *[], **kwargs_241714)
        
        # Obtaining the member 'scale' of a type (line 490)
        scale_241716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 20), Affine2D_call_result_241715, 'scale')
        # Calling scale(args, kwargs) (line 490)
        scale_call_result_241720 = invoke(stypy.reporting.localization.Localization(__file__, 490, 20), scale_241716, *[dpi_241718], **kwargs_241719)
        
        # Assigning a type to the variable 'scale' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 12), 'scale', scale_call_result_241720)
        
        # Call to _print_pgf_path(...): (line 491)
        # Processing the call arguments (line 491)
        # Getting the type of 'None' (line 491)
        None_241723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 33), 'None', False)
        
        # Call to get_hatch_path(...): (line 491)
        # Processing the call keyword arguments (line 491)
        kwargs_241726 = {}
        # Getting the type of 'gc' (line 491)
        gc_241724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 39), 'gc', False)
        # Obtaining the member 'get_hatch_path' of a type (line 491)
        get_hatch_path_241725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 39), gc_241724, 'get_hatch_path')
        # Calling get_hatch_path(args, kwargs) (line 491)
        get_hatch_path_call_result_241727 = invoke(stypy.reporting.localization.Localization(__file__, 491, 39), get_hatch_path_241725, *[], **kwargs_241726)
        
        # Getting the type of 'scale' (line 491)
        scale_241728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 60), 'scale', False)
        # Processing the call keyword arguments (line 491)
        kwargs_241729 = {}
        # Getting the type of 'self' (line 491)
        self_241721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 12), 'self', False)
        # Obtaining the member '_print_pgf_path' of a type (line 491)
        _print_pgf_path_241722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 12), self_241721, '_print_pgf_path')
        # Calling _print_pgf_path(args, kwargs) (line 491)
        _print_pgf_path_call_result_241730 = invoke(stypy.reporting.localization.Localization(__file__, 491, 12), _print_pgf_path_241722, *[None_241723, get_hatch_path_call_result_241727, scale_241728], **kwargs_241729)
        
        
        # Call to _pgf_path_draw(...): (line 492)
        # Processing the call keyword arguments (line 492)
        # Getting the type of 'True' (line 492)
        True_241733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 39), 'True', False)
        keyword_241734 = True_241733
        kwargs_241735 = {'stroke': keyword_241734}
        # Getting the type of 'self' (line 492)
        self_241731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 12), 'self', False)
        # Obtaining the member '_pgf_path_draw' of a type (line 492)
        _pgf_path_draw_241732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 12), self_241731, '_pgf_path_draw')
        # Calling _pgf_path_draw(args, kwargs) (line 492)
        _pgf_path_draw_call_result_241736 = invoke(stypy.reporting.localization.Localization(__file__, 492, 12), _pgf_path_draw_241732, *[], **kwargs_241735)
        
        
        # Call to writeln(...): (line 493)
        # Processing the call arguments (line 493)
        # Getting the type of 'self' (line 493)
        self_241738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 493)
        fh_241739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 20), self_241738, 'fh')
        unicode_241740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 29), 'unicode', u'\\end{pgfscope}')
        # Processing the call keyword arguments (line 493)
        kwargs_241741 = {}
        # Getting the type of 'writeln' (line 493)
        writeln_241737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 493)
        writeln_call_result_241742 = invoke(stypy.reporting.localization.Localization(__file__, 493, 12), writeln_241737, *[fh_241739, unicode_241740], **kwargs_241741)
        
        
        # Call to writeln(...): (line 494)
        # Processing the call arguments (line 494)
        # Getting the type of 'self' (line 494)
        self_241744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 494)
        fh_241745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 20), self_241744, 'fh')
        unicode_241746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 29), 'unicode', u'}')
        # Processing the call keyword arguments (line 494)
        kwargs_241747 = {}
        # Getting the type of 'writeln' (line 494)
        writeln_241743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 494)
        writeln_call_result_241748 = invoke(stypy.reporting.localization.Localization(__file__, 494, 12), writeln_241743, *[fh_241745, unicode_241746], **kwargs_241747)
        
        
        # Assigning a BinOp to a Name (line 496):
        
        # Assigning a BinOp to a Name (line 496):
        
        # Assigning a BinOp to a Name (line 496):
        float_241749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 496, 16), 'float')
        # Getting the type of 'self' (line 496)
        self_241750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 21), 'self')
        # Obtaining the member 'dpi' of a type (line 496)
        dpi_241751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 21), self_241750, 'dpi')
        # Applying the binary operator 'div' (line 496)
        result_div_241752 = python_operator(stypy.reporting.localization.Localization(__file__, 496, 16), 'div', float_241749, dpi_241751)
        
        # Assigning a type to the variable 'f' (line 496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 12), 'f', result_div_241752)
        
        # Assigning a Call to a Tuple (line 497):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_points(...): (line 497)
        # Processing the call keyword arguments (line 497)
        kwargs_241759 = {}
        
        # Call to get_extents(...): (line 497)
        # Processing the call arguments (line 497)
        # Getting the type of 'transform' (line 497)
        transform_241755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 58), 'transform', False)
        # Processing the call keyword arguments (line 497)
        kwargs_241756 = {}
        # Getting the type of 'path' (line 497)
        path_241753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 41), 'path', False)
        # Obtaining the member 'get_extents' of a type (line 497)
        get_extents_241754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 41), path_241753, 'get_extents')
        # Calling get_extents(args, kwargs) (line 497)
        get_extents_call_result_241757 = invoke(stypy.reporting.localization.Localization(__file__, 497, 41), get_extents_241754, *[transform_241755], **kwargs_241756)
        
        # Obtaining the member 'get_points' of a type (line 497)
        get_points_241758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 41), get_extents_call_result_241757, 'get_points')
        # Calling get_points(args, kwargs) (line 497)
        get_points_call_result_241760 = invoke(stypy.reporting.localization.Localization(__file__, 497, 41), get_points_241758, *[], **kwargs_241759)
        
        # Assigning a type to the variable 'call_assignment_240248' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'call_assignment_240248', get_points_call_result_241760)
        
        # Assigning a Call to a Name (line 497):
        
        # Assigning a Call to a Name (line 497):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_241763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, 12), 'int')
        # Processing the call keyword arguments
        kwargs_241764 = {}
        # Getting the type of 'call_assignment_240248' (line 497)
        call_assignment_240248_241761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'call_assignment_240248', False)
        # Obtaining the member '__getitem__' of a type (line 497)
        getitem___241762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 12), call_assignment_240248_241761, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_241765 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___241762, *[int_241763], **kwargs_241764)
        
        # Assigning a type to the variable 'call_assignment_240249' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'call_assignment_240249', getitem___call_result_241765)
        
        # Assigning a Name to a Tuple (line 497):
        
        # Assigning a Subscript to a Name (line 497):
        
        # Obtaining the type of the subscript
        int_241766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, 12), 'int')
        # Getting the type of 'call_assignment_240249' (line 497)
        call_assignment_240249_241767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'call_assignment_240249')
        # Obtaining the member '__getitem__' of a type (line 497)
        getitem___241768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 12), call_assignment_240249_241767, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 497)
        subscript_call_result_241769 = invoke(stypy.reporting.localization.Localization(__file__, 497, 12), getitem___241768, int_241766)
        
        # Assigning a type to the variable 'tuple_var_assignment_240311' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'tuple_var_assignment_240311', subscript_call_result_241769)
        
        # Assigning a Subscript to a Name (line 497):
        
        # Obtaining the type of the subscript
        int_241770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, 12), 'int')
        # Getting the type of 'call_assignment_240249' (line 497)
        call_assignment_240249_241771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'call_assignment_240249')
        # Obtaining the member '__getitem__' of a type (line 497)
        getitem___241772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 12), call_assignment_240249_241771, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 497)
        subscript_call_result_241773 = invoke(stypy.reporting.localization.Localization(__file__, 497, 12), getitem___241772, int_241770)
        
        # Assigning a type to the variable 'tuple_var_assignment_240312' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'tuple_var_assignment_240312', subscript_call_result_241773)
        
        # Assigning a Name to a Name (line 497):
        # Getting the type of 'tuple_var_assignment_240311' (line 497)
        tuple_var_assignment_240311_241774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'tuple_var_assignment_240311')
        # Assigning a type to the variable 'xmin' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 13), 'xmin', tuple_var_assignment_240311_241774)
        
        # Assigning a Name to a Name (line 497):
        # Getting the type of 'tuple_var_assignment_240312' (line 497)
        tuple_var_assignment_240312_241775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'tuple_var_assignment_240312')
        # Assigning a type to the variable 'ymin' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 19), 'ymin', tuple_var_assignment_240312_241775)
        
        # Assigning a Call to a Name (line 497):
        
        # Assigning a Call to a Name (line 497):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_241778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, 12), 'int')
        # Processing the call keyword arguments
        kwargs_241779 = {}
        # Getting the type of 'call_assignment_240248' (line 497)
        call_assignment_240248_241776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'call_assignment_240248', False)
        # Obtaining the member '__getitem__' of a type (line 497)
        getitem___241777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 12), call_assignment_240248_241776, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_241780 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___241777, *[int_241778], **kwargs_241779)
        
        # Assigning a type to the variable 'call_assignment_240250' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'call_assignment_240250', getitem___call_result_241780)
        
        # Assigning a Name to a Tuple (line 497):
        
        # Assigning a Subscript to a Name (line 497):
        
        # Obtaining the type of the subscript
        int_241781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, 12), 'int')
        # Getting the type of 'call_assignment_240250' (line 497)
        call_assignment_240250_241782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'call_assignment_240250')
        # Obtaining the member '__getitem__' of a type (line 497)
        getitem___241783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 12), call_assignment_240250_241782, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 497)
        subscript_call_result_241784 = invoke(stypy.reporting.localization.Localization(__file__, 497, 12), getitem___241783, int_241781)
        
        # Assigning a type to the variable 'tuple_var_assignment_240313' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'tuple_var_assignment_240313', subscript_call_result_241784)
        
        # Assigning a Subscript to a Name (line 497):
        
        # Obtaining the type of the subscript
        int_241785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, 12), 'int')
        # Getting the type of 'call_assignment_240250' (line 497)
        call_assignment_240250_241786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'call_assignment_240250')
        # Obtaining the member '__getitem__' of a type (line 497)
        getitem___241787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 12), call_assignment_240250_241786, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 497)
        subscript_call_result_241788 = invoke(stypy.reporting.localization.Localization(__file__, 497, 12), getitem___241787, int_241785)
        
        # Assigning a type to the variable 'tuple_var_assignment_240314' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'tuple_var_assignment_240314', subscript_call_result_241788)
        
        # Assigning a Name to a Name (line 497):
        # Getting the type of 'tuple_var_assignment_240313' (line 497)
        tuple_var_assignment_240313_241789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'tuple_var_assignment_240313')
        # Assigning a type to the variable 'xmax' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 27), 'xmax', tuple_var_assignment_240313_241789)
        
        # Assigning a Name to a Name (line 497):
        # Getting the type of 'tuple_var_assignment_240314' (line 497)
        tuple_var_assignment_240314_241790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'tuple_var_assignment_240314')
        # Assigning a type to the variable 'ymax' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 33), 'ymax', tuple_var_assignment_240314_241790)
        
        # Assigning a Tuple to a Tuple (line 498):
        
        # Assigning a BinOp to a Name (line 498):
        
        # Assigning a BinOp to a Name (line 498):
        # Getting the type of 'f' (line 498)
        f_241791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 25), 'f')
        # Getting the type of 'xmin' (line 498)
        xmin_241792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 29), 'xmin')
        # Applying the binary operator '*' (line 498)
        result_mul_241793 = python_operator(stypy.reporting.localization.Localization(__file__, 498, 25), '*', f_241791, xmin_241792)
        
        # Assigning a type to the variable 'tuple_assignment_240251' (line 498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 12), 'tuple_assignment_240251', result_mul_241793)
        
        # Assigning a BinOp to a Name (line 498):
        
        # Assigning a BinOp to a Name (line 498):
        # Getting the type of 'f' (line 498)
        f_241794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 35), 'f')
        # Getting the type of 'xmax' (line 498)
        xmax_241795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 39), 'xmax')
        # Applying the binary operator '*' (line 498)
        result_mul_241796 = python_operator(stypy.reporting.localization.Localization(__file__, 498, 35), '*', f_241794, xmax_241795)
        
        # Assigning a type to the variable 'tuple_assignment_240252' (line 498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 12), 'tuple_assignment_240252', result_mul_241796)
        
        # Assigning a Name to a Name (line 498):
        
        # Assigning a Name to a Name (line 498):
        # Getting the type of 'tuple_assignment_240251' (line 498)
        tuple_assignment_240251_241797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 12), 'tuple_assignment_240251')
        # Assigning a type to the variable 'xmin' (line 498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 12), 'xmin', tuple_assignment_240251_241797)
        
        # Assigning a Name to a Name (line 498):
        
        # Assigning a Name to a Name (line 498):
        # Getting the type of 'tuple_assignment_240252' (line 498)
        tuple_assignment_240252_241798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 12), 'tuple_assignment_240252')
        # Assigning a type to the variable 'xmax' (line 498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 18), 'xmax', tuple_assignment_240252_241798)
        
        # Assigning a Tuple to a Tuple (line 499):
        
        # Assigning a BinOp to a Name (line 499):
        
        # Assigning a BinOp to a Name (line 499):
        # Getting the type of 'f' (line 499)
        f_241799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 25), 'f')
        # Getting the type of 'ymin' (line 499)
        ymin_241800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 29), 'ymin')
        # Applying the binary operator '*' (line 499)
        result_mul_241801 = python_operator(stypy.reporting.localization.Localization(__file__, 499, 25), '*', f_241799, ymin_241800)
        
        # Assigning a type to the variable 'tuple_assignment_240253' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 12), 'tuple_assignment_240253', result_mul_241801)
        
        # Assigning a BinOp to a Name (line 499):
        
        # Assigning a BinOp to a Name (line 499):
        # Getting the type of 'f' (line 499)
        f_241802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 35), 'f')
        # Getting the type of 'ymax' (line 499)
        ymax_241803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 39), 'ymax')
        # Applying the binary operator '*' (line 499)
        result_mul_241804 = python_operator(stypy.reporting.localization.Localization(__file__, 499, 35), '*', f_241802, ymax_241803)
        
        # Assigning a type to the variable 'tuple_assignment_240254' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 12), 'tuple_assignment_240254', result_mul_241804)
        
        # Assigning a Name to a Name (line 499):
        
        # Assigning a Name to a Name (line 499):
        # Getting the type of 'tuple_assignment_240253' (line 499)
        tuple_assignment_240253_241805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 12), 'tuple_assignment_240253')
        # Assigning a type to the variable 'ymin' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 12), 'ymin', tuple_assignment_240253_241805)
        
        # Assigning a Name to a Name (line 499):
        
        # Assigning a Name to a Name (line 499):
        # Getting the type of 'tuple_assignment_240254' (line 499)
        tuple_assignment_240254_241806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 12), 'tuple_assignment_240254')
        # Assigning a type to the variable 'ymax' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 18), 'ymax', tuple_assignment_240254_241806)
        
        # Assigning a Tuple to a Tuple (line 500):
        
        # Assigning a Call to a Name (line 500):
        
        # Assigning a Call to a Name (line 500):
        
        # Call to int(...): (line 500)
        # Processing the call arguments (line 500)
        
        # Call to ceil(...): (line 500)
        # Processing the call arguments (line 500)
        # Getting the type of 'xmax' (line 500)
        xmax_241810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 39), 'xmax', False)
        # Getting the type of 'xmin' (line 500)
        xmin_241811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 44), 'xmin', False)
        # Applying the binary operator '-' (line 500)
        result_sub_241812 = python_operator(stypy.reporting.localization.Localization(__file__, 500, 39), '-', xmax_241810, xmin_241811)
        
        # Processing the call keyword arguments (line 500)
        kwargs_241813 = {}
        # Getting the type of 'math' (line 500)
        math_241808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 29), 'math', False)
        # Obtaining the member 'ceil' of a type (line 500)
        ceil_241809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 29), math_241808, 'ceil')
        # Calling ceil(args, kwargs) (line 500)
        ceil_call_result_241814 = invoke(stypy.reporting.localization.Localization(__file__, 500, 29), ceil_241809, *[result_sub_241812], **kwargs_241813)
        
        # Processing the call keyword arguments (line 500)
        kwargs_241815 = {}
        # Getting the type of 'int' (line 500)
        int_241807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 25), 'int', False)
        # Calling int(args, kwargs) (line 500)
        int_call_result_241816 = invoke(stypy.reporting.localization.Localization(__file__, 500, 25), int_241807, *[ceil_call_result_241814], **kwargs_241815)
        
        # Assigning a type to the variable 'tuple_assignment_240255' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 12), 'tuple_assignment_240255', int_call_result_241816)
        
        # Assigning a Call to a Name (line 500):
        
        # Assigning a Call to a Name (line 500):
        
        # Call to int(...): (line 500)
        # Processing the call arguments (line 500)
        
        # Call to ceil(...): (line 500)
        # Processing the call arguments (line 500)
        # Getting the type of 'ymax' (line 500)
        ymax_241820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 66), 'ymax', False)
        # Getting the type of 'ymin' (line 500)
        ymin_241821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 71), 'ymin', False)
        # Applying the binary operator '-' (line 500)
        result_sub_241822 = python_operator(stypy.reporting.localization.Localization(__file__, 500, 66), '-', ymax_241820, ymin_241821)
        
        # Processing the call keyword arguments (line 500)
        kwargs_241823 = {}
        # Getting the type of 'math' (line 500)
        math_241818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 56), 'math', False)
        # Obtaining the member 'ceil' of a type (line 500)
        ceil_241819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 56), math_241818, 'ceil')
        # Calling ceil(args, kwargs) (line 500)
        ceil_call_result_241824 = invoke(stypy.reporting.localization.Localization(__file__, 500, 56), ceil_241819, *[result_sub_241822], **kwargs_241823)
        
        # Processing the call keyword arguments (line 500)
        kwargs_241825 = {}
        # Getting the type of 'int' (line 500)
        int_241817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 52), 'int', False)
        # Calling int(args, kwargs) (line 500)
        int_call_result_241826 = invoke(stypy.reporting.localization.Localization(__file__, 500, 52), int_241817, *[ceil_call_result_241824], **kwargs_241825)
        
        # Assigning a type to the variable 'tuple_assignment_240256' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 12), 'tuple_assignment_240256', int_call_result_241826)
        
        # Assigning a Name to a Name (line 500):
        
        # Assigning a Name to a Name (line 500):
        # Getting the type of 'tuple_assignment_240255' (line 500)
        tuple_assignment_240255_241827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 12), 'tuple_assignment_240255')
        # Assigning a type to the variable 'repx' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 12), 'repx', tuple_assignment_240255_241827)
        
        # Assigning a Name to a Name (line 500):
        
        # Assigning a Name to a Name (line 500):
        # Getting the type of 'tuple_assignment_240256' (line 500)
        tuple_assignment_240256_241828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 12), 'tuple_assignment_240256')
        # Assigning a type to the variable 'repy' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 18), 'repy', tuple_assignment_240256_241828)
        
        # Call to writeln(...): (line 501)
        # Processing the call arguments (line 501)
        # Getting the type of 'self' (line 501)
        self_241830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 501)
        fh_241831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 501, 20), self_241830, 'fh')
        unicode_241832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 501, 29), 'unicode', u'\\pgfsys@transformshift{%fin}{%fin}')
        
        # Obtaining an instance of the builtin type 'tuple' (line 501)
        tuple_241833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 501, 70), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 501)
        # Adding element type (line 501)
        # Getting the type of 'xmin' (line 501)
        xmin_241834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 70), 'xmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 501, 70), tuple_241833, xmin_241834)
        # Adding element type (line 501)
        # Getting the type of 'ymin' (line 501)
        ymin_241835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 76), 'ymin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 501, 70), tuple_241833, ymin_241835)
        
        # Applying the binary operator '%' (line 501)
        result_mod_241836 = python_operator(stypy.reporting.localization.Localization(__file__, 501, 29), '%', unicode_241832, tuple_241833)
        
        # Processing the call keyword arguments (line 501)
        kwargs_241837 = {}
        # Getting the type of 'writeln' (line 501)
        writeln_241829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 501)
        writeln_call_result_241838 = invoke(stypy.reporting.localization.Localization(__file__, 501, 12), writeln_241829, *[fh_241831, result_mod_241836], **kwargs_241837)
        
        
        
        # Call to range(...): (line 502)
        # Processing the call arguments (line 502)
        # Getting the type of 'repy' (line 502)
        repy_241840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 28), 'repy', False)
        # Processing the call keyword arguments (line 502)
        kwargs_241841 = {}
        # Getting the type of 'range' (line 502)
        range_241839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 22), 'range', False)
        # Calling range(args, kwargs) (line 502)
        range_call_result_241842 = invoke(stypy.reporting.localization.Localization(__file__, 502, 22), range_241839, *[repy_241840], **kwargs_241841)
        
        # Testing the type of a for loop iterable (line 502)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 502, 12), range_call_result_241842)
        # Getting the type of the for loop variable (line 502)
        for_loop_var_241843 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 502, 12), range_call_result_241842)
        # Assigning a type to the variable 'iy' (line 502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 12), 'iy', for_loop_var_241843)
        # SSA begins for a for statement (line 502)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to range(...): (line 503)
        # Processing the call arguments (line 503)
        # Getting the type of 'repx' (line 503)
        repx_241845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 32), 'repx', False)
        # Processing the call keyword arguments (line 503)
        kwargs_241846 = {}
        # Getting the type of 'range' (line 503)
        range_241844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 26), 'range', False)
        # Calling range(args, kwargs) (line 503)
        range_call_result_241847 = invoke(stypy.reporting.localization.Localization(__file__, 503, 26), range_241844, *[repx_241845], **kwargs_241846)
        
        # Testing the type of a for loop iterable (line 503)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 503, 16), range_call_result_241847)
        # Getting the type of the for loop variable (line 503)
        for_loop_var_241848 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 503, 16), range_call_result_241847)
        # Assigning a type to the variable 'ix' (line 503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 16), 'ix', for_loop_var_241848)
        # SSA begins for a for statement (line 503)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to writeln(...): (line 504)
        # Processing the call arguments (line 504)
        # Getting the type of 'self' (line 504)
        self_241850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 28), 'self', False)
        # Obtaining the member 'fh' of a type (line 504)
        fh_241851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 28), self_241850, 'fh')
        unicode_241852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 37), 'unicode', u'\\pgfsys@useobject{currentpattern}{}')
        # Processing the call keyword arguments (line 504)
        kwargs_241853 = {}
        # Getting the type of 'writeln' (line 504)
        writeln_241849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 20), 'writeln', False)
        # Calling writeln(args, kwargs) (line 504)
        writeln_call_result_241854 = invoke(stypy.reporting.localization.Localization(__file__, 504, 20), writeln_241849, *[fh_241851, unicode_241852], **kwargs_241853)
        
        
        # Call to writeln(...): (line 505)
        # Processing the call arguments (line 505)
        # Getting the type of 'self' (line 505)
        self_241856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 28), 'self', False)
        # Obtaining the member 'fh' of a type (line 505)
        fh_241857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 505, 28), self_241856, 'fh')
        unicode_241858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 37), 'unicode', u'\\pgfsys@transformshift{1in}{0in}')
        # Processing the call keyword arguments (line 505)
        kwargs_241859 = {}
        # Getting the type of 'writeln' (line 505)
        writeln_241855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 20), 'writeln', False)
        # Calling writeln(args, kwargs) (line 505)
        writeln_call_result_241860 = invoke(stypy.reporting.localization.Localization(__file__, 505, 20), writeln_241855, *[fh_241857, unicode_241858], **kwargs_241859)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to writeln(...): (line 506)
        # Processing the call arguments (line 506)
        # Getting the type of 'self' (line 506)
        self_241862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 24), 'self', False)
        # Obtaining the member 'fh' of a type (line 506)
        fh_241863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 24), self_241862, 'fh')
        unicode_241864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 506, 33), 'unicode', u'\\pgfsys@transformshift{-%din}{0in}')
        # Getting the type of 'repx' (line 506)
        repx_241865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 73), 'repx', False)
        # Applying the binary operator '%' (line 506)
        result_mod_241866 = python_operator(stypy.reporting.localization.Localization(__file__, 506, 33), '%', unicode_241864, repx_241865)
        
        # Processing the call keyword arguments (line 506)
        kwargs_241867 = {}
        # Getting the type of 'writeln' (line 506)
        writeln_241861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 16), 'writeln', False)
        # Calling writeln(args, kwargs) (line 506)
        writeln_call_result_241868 = invoke(stypy.reporting.localization.Localization(__file__, 506, 16), writeln_241861, *[fh_241863, result_mod_241866], **kwargs_241867)
        
        
        # Call to writeln(...): (line 507)
        # Processing the call arguments (line 507)
        # Getting the type of 'self' (line 507)
        self_241870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 24), 'self', False)
        # Obtaining the member 'fh' of a type (line 507)
        fh_241871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 507, 24), self_241870, 'fh')
        unicode_241872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 507, 33), 'unicode', u'\\pgfsys@transformshift{0in}{1in}')
        # Processing the call keyword arguments (line 507)
        kwargs_241873 = {}
        # Getting the type of 'writeln' (line 507)
        writeln_241869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 16), 'writeln', False)
        # Calling writeln(args, kwargs) (line 507)
        writeln_call_result_241874 = invoke(stypy.reporting.localization.Localization(__file__, 507, 16), writeln_241869, *[fh_241871, unicode_241872], **kwargs_241873)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to writeln(...): (line 509)
        # Processing the call arguments (line 509)
        # Getting the type of 'self' (line 509)
        self_241876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 509)
        fh_241877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 509, 20), self_241876, 'fh')
        unicode_241878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 29), 'unicode', u'\\end{pgfscope}')
        # Processing the call keyword arguments (line 509)
        kwargs_241879 = {}
        # Getting the type of 'writeln' (line 509)
        writeln_241875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 509)
        writeln_call_result_241880 = invoke(stypy.reporting.localization.Localization(__file__, 509, 12), writeln_241875, *[fh_241877, unicode_241878], **kwargs_241879)
        
        # SSA join for if statement (line 476)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'draw_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_path' in the type store
        # Getting the type of 'stypy_return_type' (line 465)
        stypy_return_type_241881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_241881)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_path'
        return stypy_return_type_241881


    @norecursion
    def _print_pgf_clip(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_print_pgf_clip'
        module_type_store = module_type_store.open_function_context('_print_pgf_clip', 511, 4, False)
        # Assigning a type to the variable 'self' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf._print_pgf_clip.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf._print_pgf_clip.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf._print_pgf_clip.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf._print_pgf_clip.__dict__.__setitem__('stypy_function_name', 'RendererPgf._print_pgf_clip')
        RendererPgf._print_pgf_clip.__dict__.__setitem__('stypy_param_names_list', ['gc'])
        RendererPgf._print_pgf_clip.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf._print_pgf_clip.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf._print_pgf_clip.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf._print_pgf_clip.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf._print_pgf_clip.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf._print_pgf_clip.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf._print_pgf_clip', ['gc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_print_pgf_clip', localization, ['gc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_print_pgf_clip(...)' code ##################

        
        # Assigning a BinOp to a Name (line 512):
        
        # Assigning a BinOp to a Name (line 512):
        
        # Assigning a BinOp to a Name (line 512):
        float_241882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 12), 'float')
        # Getting the type of 'self' (line 512)
        self_241883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 17), 'self')
        # Obtaining the member 'dpi' of a type (line 512)
        dpi_241884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 17), self_241883, 'dpi')
        # Applying the binary operator 'div' (line 512)
        result_div_241885 = python_operator(stypy.reporting.localization.Localization(__file__, 512, 12), 'div', float_241882, dpi_241884)
        
        # Assigning a type to the variable 'f' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 8), 'f', result_div_241885)
        
        # Assigning a Call to a Name (line 514):
        
        # Assigning a Call to a Name (line 514):
        
        # Assigning a Call to a Name (line 514):
        
        # Call to get_clip_rectangle(...): (line 514)
        # Processing the call keyword arguments (line 514)
        kwargs_241888 = {}
        # Getting the type of 'gc' (line 514)
        gc_241886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 15), 'gc', False)
        # Obtaining the member 'get_clip_rectangle' of a type (line 514)
        get_clip_rectangle_241887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 15), gc_241886, 'get_clip_rectangle')
        # Calling get_clip_rectangle(args, kwargs) (line 514)
        get_clip_rectangle_call_result_241889 = invoke(stypy.reporting.localization.Localization(__file__, 514, 15), get_clip_rectangle_241887, *[], **kwargs_241888)
        
        # Assigning a type to the variable 'bbox' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 8), 'bbox', get_clip_rectangle_call_result_241889)
        
        # Getting the type of 'bbox' (line 515)
        bbox_241890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 11), 'bbox')
        # Testing the type of an if condition (line 515)
        if_condition_241891 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 515, 8), bbox_241890)
        # Assigning a type to the variable 'if_condition_241891' (line 515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 8), 'if_condition_241891', if_condition_241891)
        # SSA begins for if statement (line 515)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 516):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_points(...): (line 516)
        # Processing the call keyword arguments (line 516)
        kwargs_241894 = {}
        # Getting the type of 'bbox' (line 516)
        bbox_241892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 21), 'bbox', False)
        # Obtaining the member 'get_points' of a type (line 516)
        get_points_241893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 21), bbox_241892, 'get_points')
        # Calling get_points(args, kwargs) (line 516)
        get_points_call_result_241895 = invoke(stypy.reporting.localization.Localization(__file__, 516, 21), get_points_241893, *[], **kwargs_241894)
        
        # Assigning a type to the variable 'call_assignment_240257' (line 516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 12), 'call_assignment_240257', get_points_call_result_241895)
        
        # Assigning a Call to a Name (line 516):
        
        # Assigning a Call to a Name (line 516):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_241898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 516, 12), 'int')
        # Processing the call keyword arguments
        kwargs_241899 = {}
        # Getting the type of 'call_assignment_240257' (line 516)
        call_assignment_240257_241896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 12), 'call_assignment_240257', False)
        # Obtaining the member '__getitem__' of a type (line 516)
        getitem___241897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 12), call_assignment_240257_241896, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_241900 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___241897, *[int_241898], **kwargs_241899)
        
        # Assigning a type to the variable 'call_assignment_240258' (line 516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 12), 'call_assignment_240258', getitem___call_result_241900)
        
        # Assigning a Name to a Name (line 516):
        
        # Assigning a Name to a Name (line 516):
        # Getting the type of 'call_assignment_240258' (line 516)
        call_assignment_240258_241901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 12), 'call_assignment_240258')
        # Assigning a type to the variable 'p1' (line 516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 12), 'p1', call_assignment_240258_241901)
        
        # Assigning a Call to a Name (line 516):
        
        # Assigning a Call to a Name (line 516):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_241904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 516, 12), 'int')
        # Processing the call keyword arguments
        kwargs_241905 = {}
        # Getting the type of 'call_assignment_240257' (line 516)
        call_assignment_240257_241902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 12), 'call_assignment_240257', False)
        # Obtaining the member '__getitem__' of a type (line 516)
        getitem___241903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 12), call_assignment_240257_241902, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_241906 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___241903, *[int_241904], **kwargs_241905)
        
        # Assigning a type to the variable 'call_assignment_240259' (line 516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 12), 'call_assignment_240259', getitem___call_result_241906)
        
        # Assigning a Name to a Name (line 516):
        
        # Assigning a Name to a Name (line 516):
        # Getting the type of 'call_assignment_240259' (line 516)
        call_assignment_240259_241907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 12), 'call_assignment_240259')
        # Assigning a type to the variable 'p2' (line 516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 16), 'p2', call_assignment_240259_241907)
        
        # Assigning a BinOp to a Tuple (line 517):
        
        # Assigning a Subscript to a Name (line 517):
        
        # Assigning a Subscript to a Name (line 517):
        
        # Obtaining the type of the subscript
        int_241908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 12), 'int')
        # Getting the type of 'p2' (line 517)
        p2_241909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 19), 'p2')
        # Getting the type of 'p1' (line 517)
        p1_241910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 24), 'p1')
        # Applying the binary operator '-' (line 517)
        result_sub_241911 = python_operator(stypy.reporting.localization.Localization(__file__, 517, 19), '-', p2_241909, p1_241910)
        
        # Obtaining the member '__getitem__' of a type (line 517)
        getitem___241912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 12), result_sub_241911, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 517)
        subscript_call_result_241913 = invoke(stypy.reporting.localization.Localization(__file__, 517, 12), getitem___241912, int_241908)
        
        # Assigning a type to the variable 'tuple_var_assignment_240260' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'tuple_var_assignment_240260', subscript_call_result_241913)
        
        # Assigning a Subscript to a Name (line 517):
        
        # Assigning a Subscript to a Name (line 517):
        
        # Obtaining the type of the subscript
        int_241914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 12), 'int')
        # Getting the type of 'p2' (line 517)
        p2_241915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 19), 'p2')
        # Getting the type of 'p1' (line 517)
        p1_241916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 24), 'p1')
        # Applying the binary operator '-' (line 517)
        result_sub_241917 = python_operator(stypy.reporting.localization.Localization(__file__, 517, 19), '-', p2_241915, p1_241916)
        
        # Obtaining the member '__getitem__' of a type (line 517)
        getitem___241918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 12), result_sub_241917, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 517)
        subscript_call_result_241919 = invoke(stypy.reporting.localization.Localization(__file__, 517, 12), getitem___241918, int_241914)
        
        # Assigning a type to the variable 'tuple_var_assignment_240261' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'tuple_var_assignment_240261', subscript_call_result_241919)
        
        # Assigning a Name to a Name (line 517):
        
        # Assigning a Name to a Name (line 517):
        # Getting the type of 'tuple_var_assignment_240260' (line 517)
        tuple_var_assignment_240260_241920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'tuple_var_assignment_240260')
        # Assigning a type to the variable 'w' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'w', tuple_var_assignment_240260_241920)
        
        # Assigning a Name to a Name (line 517):
        
        # Assigning a Name to a Name (line 517):
        # Getting the type of 'tuple_var_assignment_240261' (line 517)
        tuple_var_assignment_240261_241921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'tuple_var_assignment_240261')
        # Assigning a type to the variable 'h' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 15), 'h', tuple_var_assignment_240261_241921)
        
        # Assigning a Tuple to a Name (line 518):
        
        # Assigning a Tuple to a Name (line 518):
        
        # Assigning a Tuple to a Name (line 518):
        
        # Obtaining an instance of the builtin type 'tuple' (line 518)
        tuple_241922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 518)
        # Adding element type (line 518)
        
        # Obtaining the type of the subscript
        int_241923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, 24), 'int')
        # Getting the type of 'p1' (line 518)
        p1_241924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 21), 'p1')
        # Obtaining the member '__getitem__' of a type (line 518)
        getitem___241925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 21), p1_241924, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 518)
        subscript_call_result_241926 = invoke(stypy.reporting.localization.Localization(__file__, 518, 21), getitem___241925, int_241923)
        
        # Getting the type of 'f' (line 518)
        f_241927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 29), 'f')
        # Applying the binary operator '*' (line 518)
        result_mul_241928 = python_operator(stypy.reporting.localization.Localization(__file__, 518, 21), '*', subscript_call_result_241926, f_241927)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 518, 21), tuple_241922, result_mul_241928)
        # Adding element type (line 518)
        
        # Obtaining the type of the subscript
        int_241929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, 35), 'int')
        # Getting the type of 'p1' (line 518)
        p1_241930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 32), 'p1')
        # Obtaining the member '__getitem__' of a type (line 518)
        getitem___241931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 32), p1_241930, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 518)
        subscript_call_result_241932 = invoke(stypy.reporting.localization.Localization(__file__, 518, 32), getitem___241931, int_241929)
        
        # Getting the type of 'f' (line 518)
        f_241933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 40), 'f')
        # Applying the binary operator '*' (line 518)
        result_mul_241934 = python_operator(stypy.reporting.localization.Localization(__file__, 518, 32), '*', subscript_call_result_241932, f_241933)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 518, 21), tuple_241922, result_mul_241934)
        # Adding element type (line 518)
        # Getting the type of 'w' (line 518)
        w_241935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 43), 'w')
        # Getting the type of 'f' (line 518)
        f_241936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 47), 'f')
        # Applying the binary operator '*' (line 518)
        result_mul_241937 = python_operator(stypy.reporting.localization.Localization(__file__, 518, 43), '*', w_241935, f_241936)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 518, 21), tuple_241922, result_mul_241937)
        # Adding element type (line 518)
        # Getting the type of 'h' (line 518)
        h_241938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 50), 'h')
        # Getting the type of 'f' (line 518)
        f_241939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 54), 'f')
        # Applying the binary operator '*' (line 518)
        result_mul_241940 = python_operator(stypy.reporting.localization.Localization(__file__, 518, 50), '*', h_241938, f_241939)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 518, 21), tuple_241922, result_mul_241940)
        
        # Assigning a type to the variable 'coords' (line 518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 12), 'coords', tuple_241922)
        
        # Call to writeln(...): (line 519)
        # Processing the call arguments (line 519)
        # Getting the type of 'self' (line 519)
        self_241942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 519)
        fh_241943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 20), self_241942, 'fh')
        unicode_241944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 29), 'unicode', u'\\pgfpathrectangle{\\pgfqpoint{%fin}{%fin}}{\\pgfqpoint{%fin}{%fin}} ')
        # Getting the type of 'coords' (line 519)
        coords_241945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 101), 'coords', False)
        # Applying the binary operator '%' (line 519)
        result_mod_241946 = python_operator(stypy.reporting.localization.Localization(__file__, 519, 29), '%', unicode_241944, coords_241945)
        
        # Processing the call keyword arguments (line 519)
        kwargs_241947 = {}
        # Getting the type of 'writeln' (line 519)
        writeln_241941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 519)
        writeln_call_result_241948 = invoke(stypy.reporting.localization.Localization(__file__, 519, 12), writeln_241941, *[fh_241943, result_mod_241946], **kwargs_241947)
        
        
        # Call to writeln(...): (line 520)
        # Processing the call arguments (line 520)
        # Getting the type of 'self' (line 520)
        self_241950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 520)
        fh_241951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 20), self_241950, 'fh')
        unicode_241952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 29), 'unicode', u'\\pgfusepath{clip}')
        # Processing the call keyword arguments (line 520)
        kwargs_241953 = {}
        # Getting the type of 'writeln' (line 520)
        writeln_241949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 520)
        writeln_call_result_241954 = invoke(stypy.reporting.localization.Localization(__file__, 520, 12), writeln_241949, *[fh_241951, unicode_241952], **kwargs_241953)
        
        # SSA join for if statement (line 515)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 523):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_clip_path(...): (line 523)
        # Processing the call keyword arguments (line 523)
        kwargs_241957 = {}
        # Getting the type of 'gc' (line 523)
        gc_241955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 35), 'gc', False)
        # Obtaining the member 'get_clip_path' of a type (line 523)
        get_clip_path_241956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 35), gc_241955, 'get_clip_path')
        # Calling get_clip_path(args, kwargs) (line 523)
        get_clip_path_call_result_241958 = invoke(stypy.reporting.localization.Localization(__file__, 523, 35), get_clip_path_241956, *[], **kwargs_241957)
        
        # Assigning a type to the variable 'call_assignment_240262' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'call_assignment_240262', get_clip_path_call_result_241958)
        
        # Assigning a Call to a Name (line 523):
        
        # Assigning a Call to a Name (line 523):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_241961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 8), 'int')
        # Processing the call keyword arguments
        kwargs_241962 = {}
        # Getting the type of 'call_assignment_240262' (line 523)
        call_assignment_240262_241959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'call_assignment_240262', False)
        # Obtaining the member '__getitem__' of a type (line 523)
        getitem___241960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 8), call_assignment_240262_241959, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_241963 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___241960, *[int_241961], **kwargs_241962)
        
        # Assigning a type to the variable 'call_assignment_240263' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'call_assignment_240263', getitem___call_result_241963)
        
        # Assigning a Name to a Name (line 523):
        
        # Assigning a Name to a Name (line 523):
        # Getting the type of 'call_assignment_240263' (line 523)
        call_assignment_240263_241964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'call_assignment_240263')
        # Assigning a type to the variable 'clippath' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'clippath', call_assignment_240263_241964)
        
        # Assigning a Call to a Name (line 523):
        
        # Assigning a Call to a Name (line 523):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_241967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 8), 'int')
        # Processing the call keyword arguments
        kwargs_241968 = {}
        # Getting the type of 'call_assignment_240262' (line 523)
        call_assignment_240262_241965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'call_assignment_240262', False)
        # Obtaining the member '__getitem__' of a type (line 523)
        getitem___241966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 8), call_assignment_240262_241965, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_241969 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___241966, *[int_241967], **kwargs_241968)
        
        # Assigning a type to the variable 'call_assignment_240264' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'call_assignment_240264', getitem___call_result_241969)
        
        # Assigning a Name to a Name (line 523):
        
        # Assigning a Name to a Name (line 523):
        # Getting the type of 'call_assignment_240264' (line 523)
        call_assignment_240264_241970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'call_assignment_240264')
        # Assigning a type to the variable 'clippath_trans' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 18), 'clippath_trans', call_assignment_240264_241970)
        
        # Type idiom detected: calculating its left and rigth part (line 524)
        # Getting the type of 'clippath' (line 524)
        clippath_241971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 8), 'clippath')
        # Getting the type of 'None' (line 524)
        None_241972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 27), 'None')
        
        (may_be_241973, more_types_in_union_241974) = may_not_be_none(clippath_241971, None_241972)

        if may_be_241973:

            if more_types_in_union_241974:
                # Runtime conditional SSA (line 524)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to _print_pgf_path(...): (line 525)
            # Processing the call arguments (line 525)
            # Getting the type of 'gc' (line 525)
            gc_241977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 33), 'gc', False)
            # Getting the type of 'clippath' (line 525)
            clippath_241978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 37), 'clippath', False)
            # Getting the type of 'clippath_trans' (line 525)
            clippath_trans_241979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 47), 'clippath_trans', False)
            # Processing the call keyword arguments (line 525)
            kwargs_241980 = {}
            # Getting the type of 'self' (line 525)
            self_241975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 12), 'self', False)
            # Obtaining the member '_print_pgf_path' of a type (line 525)
            _print_pgf_path_241976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 525, 12), self_241975, '_print_pgf_path')
            # Calling _print_pgf_path(args, kwargs) (line 525)
            _print_pgf_path_call_result_241981 = invoke(stypy.reporting.localization.Localization(__file__, 525, 12), _print_pgf_path_241976, *[gc_241977, clippath_241978, clippath_trans_241979], **kwargs_241980)
            
            
            # Call to writeln(...): (line 526)
            # Processing the call arguments (line 526)
            # Getting the type of 'self' (line 526)
            self_241983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 20), 'self', False)
            # Obtaining the member 'fh' of a type (line 526)
            fh_241984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 20), self_241983, 'fh')
            unicode_241985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 29), 'unicode', u'\\pgfusepath{clip}')
            # Processing the call keyword arguments (line 526)
            kwargs_241986 = {}
            # Getting the type of 'writeln' (line 526)
            writeln_241982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 12), 'writeln', False)
            # Calling writeln(args, kwargs) (line 526)
            writeln_call_result_241987 = invoke(stypy.reporting.localization.Localization(__file__, 526, 12), writeln_241982, *[fh_241984, unicode_241985], **kwargs_241986)
            

            if more_types_in_union_241974:
                # SSA join for if statement (line 524)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '_print_pgf_clip(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_print_pgf_clip' in the type store
        # Getting the type of 'stypy_return_type' (line 511)
        stypy_return_type_241988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_241988)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_print_pgf_clip'
        return stypy_return_type_241988


    @norecursion
    def _print_pgf_path_styles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_print_pgf_path_styles'
        module_type_store = module_type_store.open_function_context('_print_pgf_path_styles', 528, 4, False)
        # Assigning a type to the variable 'self' (line 529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf._print_pgf_path_styles.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf._print_pgf_path_styles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf._print_pgf_path_styles.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf._print_pgf_path_styles.__dict__.__setitem__('stypy_function_name', 'RendererPgf._print_pgf_path_styles')
        RendererPgf._print_pgf_path_styles.__dict__.__setitem__('stypy_param_names_list', ['gc', 'rgbFace'])
        RendererPgf._print_pgf_path_styles.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf._print_pgf_path_styles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf._print_pgf_path_styles.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf._print_pgf_path_styles.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf._print_pgf_path_styles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf._print_pgf_path_styles.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf._print_pgf_path_styles', ['gc', 'rgbFace'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_print_pgf_path_styles', localization, ['gc', 'rgbFace'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_print_pgf_path_styles(...)' code ##################

        
        # Assigning a Dict to a Name (line 530):
        
        # Assigning a Dict to a Name (line 530):
        
        # Assigning a Dict to a Name (line 530):
        
        # Obtaining an instance of the builtin type 'dict' (line 530)
        dict_241989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 20), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 530)
        # Adding element type (key, value) (line 530)
        unicode_241990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 21), 'unicode', u'butt')
        unicode_241991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 29), 'unicode', u'\\pgfsetbuttcap')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 530, 20), dict_241989, (unicode_241990, unicode_241991))
        # Adding element type (key, value) (line 530)
        unicode_241992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 21), 'unicode', u'round')
        unicode_241993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 30), 'unicode', u'\\pgfsetroundcap')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 530, 20), dict_241989, (unicode_241992, unicode_241993))
        # Adding element type (key, value) (line 530)
        unicode_241994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 21), 'unicode', u'projecting')
        unicode_241995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 35), 'unicode', u'\\pgfsetrectcap')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 530, 20), dict_241989, (unicode_241994, unicode_241995))
        
        # Assigning a type to the variable 'capstyles' (line 530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 8), 'capstyles', dict_241989)
        
        # Call to writeln(...): (line 533)
        # Processing the call arguments (line 533)
        # Getting the type of 'self' (line 533)
        self_241997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 533)
        fh_241998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 16), self_241997, 'fh')
        
        # Obtaining the type of the subscript
        
        # Call to get_capstyle(...): (line 533)
        # Processing the call keyword arguments (line 533)
        kwargs_242001 = {}
        # Getting the type of 'gc' (line 533)
        gc_241999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 35), 'gc', False)
        # Obtaining the member 'get_capstyle' of a type (line 533)
        get_capstyle_242000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 35), gc_241999, 'get_capstyle')
        # Calling get_capstyle(args, kwargs) (line 533)
        get_capstyle_call_result_242002 = invoke(stypy.reporting.localization.Localization(__file__, 533, 35), get_capstyle_242000, *[], **kwargs_242001)
        
        # Getting the type of 'capstyles' (line 533)
        capstyles_242003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 25), 'capstyles', False)
        # Obtaining the member '__getitem__' of a type (line 533)
        getitem___242004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 25), capstyles_242003, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 533)
        subscript_call_result_242005 = invoke(stypy.reporting.localization.Localization(__file__, 533, 25), getitem___242004, get_capstyle_call_result_242002)
        
        # Processing the call keyword arguments (line 533)
        kwargs_242006 = {}
        # Getting the type of 'writeln' (line 533)
        writeln_241996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 533)
        writeln_call_result_242007 = invoke(stypy.reporting.localization.Localization(__file__, 533, 8), writeln_241996, *[fh_241998, subscript_call_result_242005], **kwargs_242006)
        
        
        # Assigning a Dict to a Name (line 536):
        
        # Assigning a Dict to a Name (line 536):
        
        # Assigning a Dict to a Name (line 536):
        
        # Obtaining an instance of the builtin type 'dict' (line 536)
        dict_242008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 536, 21), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 536)
        # Adding element type (key, value) (line 536)
        unicode_242009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 536, 22), 'unicode', u'miter')
        unicode_242010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 536, 31), 'unicode', u'\\pgfsetmiterjoin')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 536, 21), dict_242008, (unicode_242009, unicode_242010))
        # Adding element type (key, value) (line 536)
        unicode_242011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 537, 22), 'unicode', u'round')
        unicode_242012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 537, 31), 'unicode', u'\\pgfsetroundjoin')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 536, 21), dict_242008, (unicode_242011, unicode_242012))
        # Adding element type (key, value) (line 536)
        unicode_242013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 22), 'unicode', u'bevel')
        unicode_242014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 31), 'unicode', u'\\pgfsetbeveljoin')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 536, 21), dict_242008, (unicode_242013, unicode_242014))
        
        # Assigning a type to the variable 'joinstyles' (line 536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 536, 8), 'joinstyles', dict_242008)
        
        # Call to writeln(...): (line 539)
        # Processing the call arguments (line 539)
        # Getting the type of 'self' (line 539)
        self_242016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 539)
        fh_242017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 16), self_242016, 'fh')
        
        # Obtaining the type of the subscript
        
        # Call to get_joinstyle(...): (line 539)
        # Processing the call keyword arguments (line 539)
        kwargs_242020 = {}
        # Getting the type of 'gc' (line 539)
        gc_242018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 36), 'gc', False)
        # Obtaining the member 'get_joinstyle' of a type (line 539)
        get_joinstyle_242019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 36), gc_242018, 'get_joinstyle')
        # Calling get_joinstyle(args, kwargs) (line 539)
        get_joinstyle_call_result_242021 = invoke(stypy.reporting.localization.Localization(__file__, 539, 36), get_joinstyle_242019, *[], **kwargs_242020)
        
        # Getting the type of 'joinstyles' (line 539)
        joinstyles_242022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 25), 'joinstyles', False)
        # Obtaining the member '__getitem__' of a type (line 539)
        getitem___242023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 25), joinstyles_242022, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 539)
        subscript_call_result_242024 = invoke(stypy.reporting.localization.Localization(__file__, 539, 25), getitem___242023, get_joinstyle_call_result_242021)
        
        # Processing the call keyword arguments (line 539)
        kwargs_242025 = {}
        # Getting the type of 'writeln' (line 539)
        writeln_242015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 539)
        writeln_call_result_242026 = invoke(stypy.reporting.localization.Localization(__file__, 539, 8), writeln_242015, *[fh_242017, subscript_call_result_242024], **kwargs_242025)
        
        
        # Assigning a Compare to a Name (line 542):
        
        # Assigning a Compare to a Name (line 542):
        
        # Assigning a Compare to a Name (line 542):
        
        # Getting the type of 'rgbFace' (line 542)
        rgbFace_242027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 19), 'rgbFace')
        # Getting the type of 'None' (line 542)
        None_242028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 34), 'None')
        # Applying the binary operator 'isnot' (line 542)
        result_is_not_242029 = python_operator(stypy.reporting.localization.Localization(__file__, 542, 19), 'isnot', rgbFace_242027, None_242028)
        
        # Assigning a type to the variable 'has_fill' (line 542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 8), 'has_fill', result_is_not_242029)
        
        
        # Call to get_forced_alpha(...): (line 544)
        # Processing the call keyword arguments (line 544)
        kwargs_242032 = {}
        # Getting the type of 'gc' (line 544)
        gc_242030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 11), 'gc', False)
        # Obtaining the member 'get_forced_alpha' of a type (line 544)
        get_forced_alpha_242031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 11), gc_242030, 'get_forced_alpha')
        # Calling get_forced_alpha(args, kwargs) (line 544)
        get_forced_alpha_call_result_242033 = invoke(stypy.reporting.localization.Localization(__file__, 544, 11), get_forced_alpha_242031, *[], **kwargs_242032)
        
        # Testing the type of an if condition (line 544)
        if_condition_242034 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 544, 8), get_forced_alpha_call_result_242033)
        # Assigning a type to the variable 'if_condition_242034' (line 544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 8), 'if_condition_242034', if_condition_242034)
        # SSA begins for if statement (line 544)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Call to a Name (line 545):
        
        # Assigning a Call to a Name (line 545):
        
        # Call to get_alpha(...): (line 545)
        # Processing the call keyword arguments (line 545)
        kwargs_242037 = {}
        # Getting the type of 'gc' (line 545)
        gc_242035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 42), 'gc', False)
        # Obtaining the member 'get_alpha' of a type (line 545)
        get_alpha_242036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 42), gc_242035, 'get_alpha')
        # Calling get_alpha(args, kwargs) (line 545)
        get_alpha_call_result_242038 = invoke(stypy.reporting.localization.Localization(__file__, 545, 42), get_alpha_242036, *[], **kwargs_242037)
        
        # Assigning a type to the variable 'strokeopacity' (line 545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 545, 26), 'strokeopacity', get_alpha_call_result_242038)
        
        # Assigning a Name to a Name (line 545):
        
        # Assigning a Name to a Name (line 545):
        # Getting the type of 'strokeopacity' (line 545)
        strokeopacity_242039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 26), 'strokeopacity')
        # Assigning a type to the variable 'fillopacity' (line 545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 545, 12), 'fillopacity', strokeopacity_242039)
        # SSA branch for the else part of an if statement (line 544)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Name (line 547):
        
        # Assigning a Subscript to a Name (line 547):
        
        # Assigning a Subscript to a Name (line 547):
        
        # Obtaining the type of the subscript
        int_242040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 41), 'int')
        
        # Call to get_rgb(...): (line 547)
        # Processing the call keyword arguments (line 547)
        kwargs_242043 = {}
        # Getting the type of 'gc' (line 547)
        gc_242041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 28), 'gc', False)
        # Obtaining the member 'get_rgb' of a type (line 547)
        get_rgb_242042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 28), gc_242041, 'get_rgb')
        # Calling get_rgb(args, kwargs) (line 547)
        get_rgb_call_result_242044 = invoke(stypy.reporting.localization.Localization(__file__, 547, 28), get_rgb_242042, *[], **kwargs_242043)
        
        # Obtaining the member '__getitem__' of a type (line 547)
        getitem___242045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 28), get_rgb_call_result_242044, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 547)
        subscript_call_result_242046 = invoke(stypy.reporting.localization.Localization(__file__, 547, 28), getitem___242045, int_242040)
        
        # Assigning a type to the variable 'strokeopacity' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'strokeopacity', subscript_call_result_242046)
        
        # Assigning a IfExp to a Name (line 548):
        
        # Assigning a IfExp to a Name (line 548):
        
        # Assigning a IfExp to a Name (line 548):
        
        
        # Evaluating a boolean operation
        # Getting the type of 'has_fill' (line 548)
        has_fill_242047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 40), 'has_fill')
        
        
        # Call to len(...): (line 548)
        # Processing the call arguments (line 548)
        # Getting the type of 'rgbFace' (line 548)
        rgbFace_242049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 57), 'rgbFace', False)
        # Processing the call keyword arguments (line 548)
        kwargs_242050 = {}
        # Getting the type of 'len' (line 548)
        len_242048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 53), 'len', False)
        # Calling len(args, kwargs) (line 548)
        len_call_result_242051 = invoke(stypy.reporting.localization.Localization(__file__, 548, 53), len_242048, *[rgbFace_242049], **kwargs_242050)
        
        int_242052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 68), 'int')
        # Applying the binary operator '>' (line 548)
        result_gt_242053 = python_operator(stypy.reporting.localization.Localization(__file__, 548, 53), '>', len_call_result_242051, int_242052)
        
        # Applying the binary operator 'and' (line 548)
        result_and_keyword_242054 = python_operator(stypy.reporting.localization.Localization(__file__, 548, 40), 'and', has_fill_242047, result_gt_242053)
        
        # Testing the type of an if expression (line 548)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 548, 26), result_and_keyword_242054)
        # SSA begins for if expression (line 548)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Obtaining the type of the subscript
        int_242055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 34), 'int')
        # Getting the type of 'rgbFace' (line 548)
        rgbFace_242056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 26), 'rgbFace')
        # Obtaining the member '__getitem__' of a type (line 548)
        getitem___242057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 26), rgbFace_242056, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 548)
        subscript_call_result_242058 = invoke(stypy.reporting.localization.Localization(__file__, 548, 26), getitem___242057, int_242055)
        
        # SSA branch for the else part of an if expression (line 548)
        module_type_store.open_ssa_branch('if expression else')
        float_242059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 75), 'float')
        # SSA join for if expression (line 548)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_242060 = union_type.UnionType.add(subscript_call_result_242058, float_242059)
        
        # Assigning a type to the variable 'fillopacity' (line 548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 12), 'fillopacity', if_exp_242060)
        # SSA join for if statement (line 544)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'has_fill' (line 550)
        has_fill_242061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 11), 'has_fill')
        # Testing the type of an if condition (line 550)
        if_condition_242062 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 550, 8), has_fill_242061)
        # Assigning a type to the variable 'if_condition_242062' (line 550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 8), 'if_condition_242062', if_condition_242062)
        # SSA begins for if statement (line 550)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to writeln(...): (line 551)
        # Processing the call arguments (line 551)
        # Getting the type of 'self' (line 551)
        self_242064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 551)
        fh_242065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 20), self_242064, 'fh')
        unicode_242066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 29), 'unicode', u'\\definecolor{currentfill}{rgb}{%f,%f,%f}')
        
        # Call to tuple(...): (line 551)
        # Processing the call arguments (line 551)
        
        # Obtaining the type of the subscript
        int_242068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 90), 'int')
        slice_242069 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 551, 81), None, int_242068, None)
        # Getting the type of 'rgbFace' (line 551)
        rgbFace_242070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 81), 'rgbFace', False)
        # Obtaining the member '__getitem__' of a type (line 551)
        getitem___242071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 81), rgbFace_242070, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 551)
        subscript_call_result_242072 = invoke(stypy.reporting.localization.Localization(__file__, 551, 81), getitem___242071, slice_242069)
        
        # Processing the call keyword arguments (line 551)
        kwargs_242073 = {}
        # Getting the type of 'tuple' (line 551)
        tuple_242067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 75), 'tuple', False)
        # Calling tuple(args, kwargs) (line 551)
        tuple_call_result_242074 = invoke(stypy.reporting.localization.Localization(__file__, 551, 75), tuple_242067, *[subscript_call_result_242072], **kwargs_242073)
        
        # Applying the binary operator '%' (line 551)
        result_mod_242075 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 29), '%', unicode_242066, tuple_call_result_242074)
        
        # Processing the call keyword arguments (line 551)
        kwargs_242076 = {}
        # Getting the type of 'writeln' (line 551)
        writeln_242063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 551)
        writeln_call_result_242077 = invoke(stypy.reporting.localization.Localization(__file__, 551, 12), writeln_242063, *[fh_242065, result_mod_242075], **kwargs_242076)
        
        
        # Call to writeln(...): (line 552)
        # Processing the call arguments (line 552)
        # Getting the type of 'self' (line 552)
        self_242079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 552)
        fh_242080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 20), self_242079, 'fh')
        unicode_242081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 29), 'unicode', u'\\pgfsetfillcolor{currentfill}')
        # Processing the call keyword arguments (line 552)
        kwargs_242082 = {}
        # Getting the type of 'writeln' (line 552)
        writeln_242078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 552)
        writeln_call_result_242083 = invoke(stypy.reporting.localization.Localization(__file__, 552, 12), writeln_242078, *[fh_242080, unicode_242081], **kwargs_242082)
        
        # SSA join for if statement (line 550)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'has_fill' (line 553)
        has_fill_242084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 11), 'has_fill')
        
        # Getting the type of 'fillopacity' (line 553)
        fillopacity_242085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 24), 'fillopacity')
        float_242086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 39), 'float')
        # Applying the binary operator '!=' (line 553)
        result_ne_242087 = python_operator(stypy.reporting.localization.Localization(__file__, 553, 24), '!=', fillopacity_242085, float_242086)
        
        # Applying the binary operator 'and' (line 553)
        result_and_keyword_242088 = python_operator(stypy.reporting.localization.Localization(__file__, 553, 11), 'and', has_fill_242084, result_ne_242087)
        
        # Testing the type of an if condition (line 553)
        if_condition_242089 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 553, 8), result_and_keyword_242088)
        # Assigning a type to the variable 'if_condition_242089' (line 553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 8), 'if_condition_242089', if_condition_242089)
        # SSA begins for if statement (line 553)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to writeln(...): (line 554)
        # Processing the call arguments (line 554)
        # Getting the type of 'self' (line 554)
        self_242091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 554)
        fh_242092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 20), self_242091, 'fh')
        unicode_242093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, 29), 'unicode', u'\\pgfsetfillopacity{%f}')
        # Getting the type of 'fillopacity' (line 554)
        fillopacity_242094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 57), 'fillopacity', False)
        # Applying the binary operator '%' (line 554)
        result_mod_242095 = python_operator(stypy.reporting.localization.Localization(__file__, 554, 29), '%', unicode_242093, fillopacity_242094)
        
        # Processing the call keyword arguments (line 554)
        kwargs_242096 = {}
        # Getting the type of 'writeln' (line 554)
        writeln_242090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 554)
        writeln_call_result_242097 = invoke(stypy.reporting.localization.Localization(__file__, 554, 12), writeln_242090, *[fh_242092, result_mod_242095], **kwargs_242096)
        
        # SSA join for if statement (line 553)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 557):
        
        # Assigning a BinOp to a Name (line 557):
        
        # Assigning a BinOp to a Name (line 557):
        
        # Call to get_linewidth(...): (line 557)
        # Processing the call keyword arguments (line 557)
        kwargs_242100 = {}
        # Getting the type of 'gc' (line 557)
        gc_242098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 13), 'gc', False)
        # Obtaining the member 'get_linewidth' of a type (line 557)
        get_linewidth_242099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 13), gc_242098, 'get_linewidth')
        # Calling get_linewidth(args, kwargs) (line 557)
        get_linewidth_call_result_242101 = invoke(stypy.reporting.localization.Localization(__file__, 557, 13), get_linewidth_242099, *[], **kwargs_242100)
        
        # Getting the type of 'mpl_pt_to_in' (line 557)
        mpl_pt_to_in_242102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 34), 'mpl_pt_to_in')
        # Applying the binary operator '*' (line 557)
        result_mul_242103 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 13), '*', get_linewidth_call_result_242101, mpl_pt_to_in_242102)
        
        # Getting the type of 'latex_in_to_pt' (line 557)
        latex_in_to_pt_242104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 49), 'latex_in_to_pt')
        # Applying the binary operator '*' (line 557)
        result_mul_242105 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 47), '*', result_mul_242103, latex_in_to_pt_242104)
        
        # Assigning a type to the variable 'lw' (line 557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 8), 'lw', result_mul_242105)
        
        # Assigning a Call to a Name (line 558):
        
        # Assigning a Call to a Name (line 558):
        
        # Assigning a Call to a Name (line 558):
        
        # Call to get_rgb(...): (line 558)
        # Processing the call keyword arguments (line 558)
        kwargs_242108 = {}
        # Getting the type of 'gc' (line 558)
        gc_242106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 22), 'gc', False)
        # Obtaining the member 'get_rgb' of a type (line 558)
        get_rgb_242107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 558, 22), gc_242106, 'get_rgb')
        # Calling get_rgb(args, kwargs) (line 558)
        get_rgb_call_result_242109 = invoke(stypy.reporting.localization.Localization(__file__, 558, 22), get_rgb_242107, *[], **kwargs_242108)
        
        # Assigning a type to the variable 'stroke_rgba' (line 558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 558, 8), 'stroke_rgba', get_rgb_call_result_242109)
        
        # Call to writeln(...): (line 559)
        # Processing the call arguments (line 559)
        # Getting the type of 'self' (line 559)
        self_242111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 559)
        fh_242112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 16), self_242111, 'fh')
        unicode_242113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 25), 'unicode', u'\\pgfsetlinewidth{%fpt}')
        # Getting the type of 'lw' (line 559)
        lw_242114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 53), 'lw', False)
        # Applying the binary operator '%' (line 559)
        result_mod_242115 = python_operator(stypy.reporting.localization.Localization(__file__, 559, 25), '%', unicode_242113, lw_242114)
        
        # Processing the call keyword arguments (line 559)
        kwargs_242116 = {}
        # Getting the type of 'writeln' (line 559)
        writeln_242110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 559)
        writeln_call_result_242117 = invoke(stypy.reporting.localization.Localization(__file__, 559, 8), writeln_242110, *[fh_242112, result_mod_242115], **kwargs_242116)
        
        
        # Call to writeln(...): (line 560)
        # Processing the call arguments (line 560)
        # Getting the type of 'self' (line 560)
        self_242119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 560)
        fh_242120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 16), self_242119, 'fh')
        unicode_242121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 25), 'unicode', u'\\definecolor{currentstroke}{rgb}{%f,%f,%f}')
        
        # Obtaining the type of the subscript
        int_242122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 86), 'int')
        slice_242123 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 560, 73), None, int_242122, None)
        # Getting the type of 'stroke_rgba' (line 560)
        stroke_rgba_242124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 73), 'stroke_rgba', False)
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___242125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 73), stroke_rgba_242124, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 560)
        subscript_call_result_242126 = invoke(stypy.reporting.localization.Localization(__file__, 560, 73), getitem___242125, slice_242123)
        
        # Applying the binary operator '%' (line 560)
        result_mod_242127 = python_operator(stypy.reporting.localization.Localization(__file__, 560, 25), '%', unicode_242121, subscript_call_result_242126)
        
        # Processing the call keyword arguments (line 560)
        kwargs_242128 = {}
        # Getting the type of 'writeln' (line 560)
        writeln_242118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 560)
        writeln_call_result_242129 = invoke(stypy.reporting.localization.Localization(__file__, 560, 8), writeln_242118, *[fh_242120, result_mod_242127], **kwargs_242128)
        
        
        # Call to writeln(...): (line 561)
        # Processing the call arguments (line 561)
        # Getting the type of 'self' (line 561)
        self_242131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 561)
        fh_242132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 16), self_242131, 'fh')
        unicode_242133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 25), 'unicode', u'\\pgfsetstrokecolor{currentstroke}')
        # Processing the call keyword arguments (line 561)
        kwargs_242134 = {}
        # Getting the type of 'writeln' (line 561)
        writeln_242130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 561)
        writeln_call_result_242135 = invoke(stypy.reporting.localization.Localization(__file__, 561, 8), writeln_242130, *[fh_242132, unicode_242133], **kwargs_242134)
        
        
        
        # Getting the type of 'strokeopacity' (line 562)
        strokeopacity_242136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 11), 'strokeopacity')
        float_242137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 28), 'float')
        # Applying the binary operator '!=' (line 562)
        result_ne_242138 = python_operator(stypy.reporting.localization.Localization(__file__, 562, 11), '!=', strokeopacity_242136, float_242137)
        
        # Testing the type of an if condition (line 562)
        if_condition_242139 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 562, 8), result_ne_242138)
        # Assigning a type to the variable 'if_condition_242139' (line 562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 8), 'if_condition_242139', if_condition_242139)
        # SSA begins for if statement (line 562)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to writeln(...): (line 563)
        # Processing the call arguments (line 563)
        # Getting the type of 'self' (line 563)
        self_242141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 563)
        fh_242142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 20), self_242141, 'fh')
        unicode_242143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 29), 'unicode', u'\\pgfsetstrokeopacity{%f}')
        # Getting the type of 'strokeopacity' (line 563)
        strokeopacity_242144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 59), 'strokeopacity', False)
        # Applying the binary operator '%' (line 563)
        result_mod_242145 = python_operator(stypy.reporting.localization.Localization(__file__, 563, 29), '%', unicode_242143, strokeopacity_242144)
        
        # Processing the call keyword arguments (line 563)
        kwargs_242146 = {}
        # Getting the type of 'writeln' (line 563)
        writeln_242140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 563)
        writeln_call_result_242147 = invoke(stypy.reporting.localization.Localization(__file__, 563, 12), writeln_242140, *[fh_242142, result_mod_242145], **kwargs_242146)
        
        # SSA join for if statement (line 562)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 566):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_dashes(...): (line 566)
        # Processing the call keyword arguments (line 566)
        kwargs_242150 = {}
        # Getting the type of 'gc' (line 566)
        gc_242148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 33), 'gc', False)
        # Obtaining the member 'get_dashes' of a type (line 566)
        get_dashes_242149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 33), gc_242148, 'get_dashes')
        # Calling get_dashes(args, kwargs) (line 566)
        get_dashes_call_result_242151 = invoke(stypy.reporting.localization.Localization(__file__, 566, 33), get_dashes_242149, *[], **kwargs_242150)
        
        # Assigning a type to the variable 'call_assignment_240265' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 8), 'call_assignment_240265', get_dashes_call_result_242151)
        
        # Assigning a Call to a Name (line 566):
        
        # Assigning a Call to a Name (line 566):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 566, 8), 'int')
        # Processing the call keyword arguments
        kwargs_242155 = {}
        # Getting the type of 'call_assignment_240265' (line 566)
        call_assignment_240265_242152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 8), 'call_assignment_240265', False)
        # Obtaining the member '__getitem__' of a type (line 566)
        getitem___242153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 8), call_assignment_240265_242152, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242156 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242153, *[int_242154], **kwargs_242155)
        
        # Assigning a type to the variable 'call_assignment_240266' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 8), 'call_assignment_240266', getitem___call_result_242156)
        
        # Assigning a Name to a Name (line 566):
        
        # Assigning a Name to a Name (line 566):
        # Getting the type of 'call_assignment_240266' (line 566)
        call_assignment_240266_242157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 8), 'call_assignment_240266')
        # Assigning a type to the variable 'dash_offset' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 8), 'dash_offset', call_assignment_240266_242157)
        
        # Assigning a Call to a Name (line 566):
        
        # Assigning a Call to a Name (line 566):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 566, 8), 'int')
        # Processing the call keyword arguments
        kwargs_242161 = {}
        # Getting the type of 'call_assignment_240265' (line 566)
        call_assignment_240265_242158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 8), 'call_assignment_240265', False)
        # Obtaining the member '__getitem__' of a type (line 566)
        getitem___242159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 8), call_assignment_240265_242158, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242162 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242159, *[int_242160], **kwargs_242161)
        
        # Assigning a type to the variable 'call_assignment_240267' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 8), 'call_assignment_240267', getitem___call_result_242162)
        
        # Assigning a Name to a Name (line 566):
        
        # Assigning a Name to a Name (line 566):
        # Getting the type of 'call_assignment_240267' (line 566)
        call_assignment_240267_242163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 8), 'call_assignment_240267')
        # Assigning a type to the variable 'dash_list' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 21), 'dash_list', call_assignment_240267_242163)
        
        # Type idiom detected: calculating its left and rigth part (line 567)
        # Getting the type of 'dash_list' (line 567)
        dash_list_242164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 11), 'dash_list')
        # Getting the type of 'None' (line 567)
        None_242165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 24), 'None')
        
        (may_be_242166, more_types_in_union_242167) = may_be_none(dash_list_242164, None_242165)

        if may_be_242166:

            if more_types_in_union_242167:
                # Runtime conditional SSA (line 567)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to writeln(...): (line 568)
            # Processing the call arguments (line 568)
            # Getting the type of 'self' (line 568)
            self_242169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 20), 'self', False)
            # Obtaining the member 'fh' of a type (line 568)
            fh_242170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 20), self_242169, 'fh')
            unicode_242171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 29), 'unicode', u'\\pgfsetdash{}{0pt}')
            # Processing the call keyword arguments (line 568)
            kwargs_242172 = {}
            # Getting the type of 'writeln' (line 568)
            writeln_242168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 12), 'writeln', False)
            # Calling writeln(args, kwargs) (line 568)
            writeln_call_result_242173 = invoke(stypy.reporting.localization.Localization(__file__, 568, 12), writeln_242168, *[fh_242170, unicode_242171], **kwargs_242172)
            

            if more_types_in_union_242167:
                # Runtime conditional SSA for else branch (line 567)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_242166) or more_types_in_union_242167):
            
            # Assigning a Str to a Name (line 570):
            
            # Assigning a Str to a Name (line 570):
            
            # Assigning a Str to a Name (line 570):
            unicode_242174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 23), 'unicode', u'\\pgfsetdash{')
            # Assigning a type to the variable 'dash_str' (line 570)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 12), 'dash_str', unicode_242174)
            
            # Getting the type of 'dash_list' (line 571)
            dash_list_242175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 24), 'dash_list')
            # Testing the type of a for loop iterable (line 571)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 571, 12), dash_list_242175)
            # Getting the type of the for loop variable (line 571)
            for_loop_var_242176 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 571, 12), dash_list_242175)
            # Assigning a type to the variable 'dash' (line 571)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 12), 'dash', for_loop_var_242176)
            # SSA begins for a for statement (line 571)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Getting the type of 'dash_str' (line 572)
            dash_str_242177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 16), 'dash_str')
            unicode_242178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 28), 'unicode', u'{%fpt}')
            # Getting the type of 'dash' (line 572)
            dash_242179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 40), 'dash')
            # Applying the binary operator '%' (line 572)
            result_mod_242180 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 28), '%', unicode_242178, dash_242179)
            
            # Applying the binary operator '+=' (line 572)
            result_iadd_242181 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 16), '+=', dash_str_242177, result_mod_242180)
            # Assigning a type to the variable 'dash_str' (line 572)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 16), 'dash_str', result_iadd_242181)
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'dash_str' (line 573)
            dash_str_242182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 12), 'dash_str')
            unicode_242183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 24), 'unicode', u'}{%fpt}')
            # Getting the type of 'dash_offset' (line 573)
            dash_offset_242184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 37), 'dash_offset')
            # Applying the binary operator '%' (line 573)
            result_mod_242185 = python_operator(stypy.reporting.localization.Localization(__file__, 573, 24), '%', unicode_242183, dash_offset_242184)
            
            # Applying the binary operator '+=' (line 573)
            result_iadd_242186 = python_operator(stypy.reporting.localization.Localization(__file__, 573, 12), '+=', dash_str_242182, result_mod_242185)
            # Assigning a type to the variable 'dash_str' (line 573)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 12), 'dash_str', result_iadd_242186)
            
            
            # Call to writeln(...): (line 574)
            # Processing the call arguments (line 574)
            # Getting the type of 'self' (line 574)
            self_242188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 20), 'self', False)
            # Obtaining the member 'fh' of a type (line 574)
            fh_242189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 20), self_242188, 'fh')
            # Getting the type of 'dash_str' (line 574)
            dash_str_242190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 29), 'dash_str', False)
            # Processing the call keyword arguments (line 574)
            kwargs_242191 = {}
            # Getting the type of 'writeln' (line 574)
            writeln_242187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 12), 'writeln', False)
            # Calling writeln(args, kwargs) (line 574)
            writeln_call_result_242192 = invoke(stypy.reporting.localization.Localization(__file__, 574, 12), writeln_242187, *[fh_242189, dash_str_242190], **kwargs_242191)
            

            if (may_be_242166 and more_types_in_union_242167):
                # SSA join for if statement (line 567)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '_print_pgf_path_styles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_print_pgf_path_styles' in the type store
        # Getting the type of 'stypy_return_type' (line 528)
        stypy_return_type_242193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_242193)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_print_pgf_path_styles'
        return stypy_return_type_242193


    @norecursion
    def _print_pgf_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 576)
        None_242194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 59), 'None')
        defaults = [None_242194]
        # Create a new context for function '_print_pgf_path'
        module_type_store = module_type_store.open_function_context('_print_pgf_path', 576, 4, False)
        # Assigning a type to the variable 'self' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf._print_pgf_path.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf._print_pgf_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf._print_pgf_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf._print_pgf_path.__dict__.__setitem__('stypy_function_name', 'RendererPgf._print_pgf_path')
        RendererPgf._print_pgf_path.__dict__.__setitem__('stypy_param_names_list', ['gc', 'path', 'transform', 'rgbFace'])
        RendererPgf._print_pgf_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf._print_pgf_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf._print_pgf_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf._print_pgf_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf._print_pgf_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf._print_pgf_path.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf._print_pgf_path', ['gc', 'path', 'transform', 'rgbFace'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_print_pgf_path', localization, ['gc', 'path', 'transform', 'rgbFace'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_print_pgf_path(...)' code ##################

        
        # Assigning a BinOp to a Name (line 577):
        
        # Assigning a BinOp to a Name (line 577):
        
        # Assigning a BinOp to a Name (line 577):
        float_242195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 12), 'float')
        # Getting the type of 'self' (line 577)
        self_242196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 17), 'self')
        # Obtaining the member 'dpi' of a type (line 577)
        dpi_242197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 17), self_242196, 'dpi')
        # Applying the binary operator 'div' (line 577)
        result_div_242198 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 12), 'div', float_242195, dpi_242197)
        
        # Assigning a type to the variable 'f' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'f', result_div_242198)
        
        # Assigning a IfExp to a Name (line 579):
        
        # Assigning a IfExp to a Name (line 579):
        
        # Assigning a IfExp to a Name (line 579):
        
        # Getting the type of 'gc' (line 579)
        gc_242199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 42), 'gc')
        # Testing the type of an if expression (line 579)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 579, 15), gc_242199)
        # SSA begins for if expression (line 579)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Call to get_clip_rectangle(...): (line 579)
        # Processing the call keyword arguments (line 579)
        kwargs_242202 = {}
        # Getting the type of 'gc' (line 579)
        gc_242200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 15), 'gc', False)
        # Obtaining the member 'get_clip_rectangle' of a type (line 579)
        get_clip_rectangle_242201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 579, 15), gc_242200, 'get_clip_rectangle')
        # Calling get_clip_rectangle(args, kwargs) (line 579)
        get_clip_rectangle_call_result_242203 = invoke(stypy.reporting.localization.Localization(__file__, 579, 15), get_clip_rectangle_242201, *[], **kwargs_242202)
        
        # SSA branch for the else part of an if expression (line 579)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'None' (line 579)
        None_242204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 50), 'None')
        # SSA join for if expression (line 579)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_242205 = union_type.UnionType.add(get_clip_rectangle_call_result_242203, None_242204)
        
        # Assigning a type to the variable 'bbox' (line 579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 579, 8), 'bbox', if_exp_242205)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'bbox' (line 580)
        bbox_242206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 11), 'bbox')
        
        # Getting the type of 'rgbFace' (line 580)
        rgbFace_242207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 21), 'rgbFace')
        # Getting the type of 'None' (line 580)
        None_242208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 32), 'None')
        # Applying the binary operator 'is' (line 580)
        result_is__242209 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 21), 'is', rgbFace_242207, None_242208)
        
        # Applying the binary operator 'and' (line 580)
        result_and_keyword_242210 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 11), 'and', bbox_242206, result_is__242209)
        
        # Testing the type of an if condition (line 580)
        if_condition_242211 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 580, 8), result_and_keyword_242210)
        # Assigning a type to the variable 'if_condition_242211' (line 580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 580, 8), 'if_condition_242211', if_condition_242211)
        # SSA begins for if statement (line 580)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 581):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_points(...): (line 581)
        # Processing the call keyword arguments (line 581)
        kwargs_242214 = {}
        # Getting the type of 'bbox' (line 581)
        bbox_242212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 21), 'bbox', False)
        # Obtaining the member 'get_points' of a type (line 581)
        get_points_242213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 21), bbox_242212, 'get_points')
        # Calling get_points(args, kwargs) (line 581)
        get_points_call_result_242215 = invoke(stypy.reporting.localization.Localization(__file__, 581, 21), get_points_242213, *[], **kwargs_242214)
        
        # Assigning a type to the variable 'call_assignment_240268' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 12), 'call_assignment_240268', get_points_call_result_242215)
        
        # Assigning a Call to a Name (line 581):
        
        # Assigning a Call to a Name (line 581):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 12), 'int')
        # Processing the call keyword arguments
        kwargs_242219 = {}
        # Getting the type of 'call_assignment_240268' (line 581)
        call_assignment_240268_242216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 12), 'call_assignment_240268', False)
        # Obtaining the member '__getitem__' of a type (line 581)
        getitem___242217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 12), call_assignment_240268_242216, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242220 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242217, *[int_242218], **kwargs_242219)
        
        # Assigning a type to the variable 'call_assignment_240269' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 12), 'call_assignment_240269', getitem___call_result_242220)
        
        # Assigning a Name to a Name (line 581):
        
        # Assigning a Name to a Name (line 581):
        # Getting the type of 'call_assignment_240269' (line 581)
        call_assignment_240269_242221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 12), 'call_assignment_240269')
        # Assigning a type to the variable 'p1' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 12), 'p1', call_assignment_240269_242221)
        
        # Assigning a Call to a Name (line 581):
        
        # Assigning a Call to a Name (line 581):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 12), 'int')
        # Processing the call keyword arguments
        kwargs_242225 = {}
        # Getting the type of 'call_assignment_240268' (line 581)
        call_assignment_240268_242222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 12), 'call_assignment_240268', False)
        # Obtaining the member '__getitem__' of a type (line 581)
        getitem___242223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 12), call_assignment_240268_242222, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242226 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242223, *[int_242224], **kwargs_242225)
        
        # Assigning a type to the variable 'call_assignment_240270' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 12), 'call_assignment_240270', getitem___call_result_242226)
        
        # Assigning a Name to a Name (line 581):
        
        # Assigning a Name to a Name (line 581):
        # Getting the type of 'call_assignment_240270' (line 581)
        call_assignment_240270_242227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 12), 'call_assignment_240270')
        # Assigning a type to the variable 'p2' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 16), 'p2', call_assignment_240270_242227)
        
        # Assigning a Tuple to a Name (line 582):
        
        # Assigning a Tuple to a Name (line 582):
        
        # Assigning a Tuple to a Name (line 582):
        
        # Obtaining an instance of the builtin type 'tuple' (line 582)
        tuple_242228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 582)
        # Adding element type (line 582)
        
        # Obtaining the type of the subscript
        int_242229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 23), 'int')
        # Getting the type of 'p1' (line 582)
        p1_242230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 20), 'p1')
        # Obtaining the member '__getitem__' of a type (line 582)
        getitem___242231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 20), p1_242230, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 582)
        subscript_call_result_242232 = invoke(stypy.reporting.localization.Localization(__file__, 582, 20), getitem___242231, int_242229)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 582, 20), tuple_242228, subscript_call_result_242232)
        # Adding element type (line 582)
        
        # Obtaining the type of the subscript
        int_242233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 30), 'int')
        # Getting the type of 'p1' (line 582)
        p1_242234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 27), 'p1')
        # Obtaining the member '__getitem__' of a type (line 582)
        getitem___242235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 27), p1_242234, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 582)
        subscript_call_result_242236 = invoke(stypy.reporting.localization.Localization(__file__, 582, 27), getitem___242235, int_242233)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 582, 20), tuple_242228, subscript_call_result_242236)
        # Adding element type (line 582)
        
        # Obtaining the type of the subscript
        int_242237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 37), 'int')
        # Getting the type of 'p2' (line 582)
        p2_242238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 34), 'p2')
        # Obtaining the member '__getitem__' of a type (line 582)
        getitem___242239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 34), p2_242238, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 582)
        subscript_call_result_242240 = invoke(stypy.reporting.localization.Localization(__file__, 582, 34), getitem___242239, int_242237)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 582, 20), tuple_242228, subscript_call_result_242240)
        # Adding element type (line 582)
        
        # Obtaining the type of the subscript
        int_242241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 44), 'int')
        # Getting the type of 'p2' (line 582)
        p2_242242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 41), 'p2')
        # Obtaining the member '__getitem__' of a type (line 582)
        getitem___242243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 41), p2_242242, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 582)
        subscript_call_result_242244 = invoke(stypy.reporting.localization.Localization(__file__, 582, 41), getitem___242243, int_242241)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 582, 20), tuple_242228, subscript_call_result_242244)
        
        # Assigning a type to the variable 'clip' (line 582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 12), 'clip', tuple_242228)
        # SSA branch for the else part of an if statement (line 580)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 584):
        
        # Assigning a Name to a Name (line 584):
        
        # Assigning a Name to a Name (line 584):
        # Getting the type of 'None' (line 584)
        None_242245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 19), 'None')
        # Assigning a type to the variable 'clip' (line 584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 12), 'clip', None_242245)
        # SSA join for if statement (line 580)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to iter_segments(...): (line 586)
        # Processing the call arguments (line 586)
        # Getting the type of 'transform' (line 586)
        transform_242248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 47), 'transform', False)
        # Processing the call keyword arguments (line 586)
        # Getting the type of 'clip' (line 586)
        clip_242249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 63), 'clip', False)
        keyword_242250 = clip_242249
        kwargs_242251 = {'clip': keyword_242250}
        # Getting the type of 'path' (line 586)
        path_242246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 28), 'path', False)
        # Obtaining the member 'iter_segments' of a type (line 586)
        iter_segments_242247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 586, 28), path_242246, 'iter_segments')
        # Calling iter_segments(args, kwargs) (line 586)
        iter_segments_call_result_242252 = invoke(stypy.reporting.localization.Localization(__file__, 586, 28), iter_segments_242247, *[transform_242248], **kwargs_242251)
        
        # Testing the type of a for loop iterable (line 586)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 586, 8), iter_segments_call_result_242252)
        # Getting the type of the for loop variable (line 586)
        for_loop_var_242253 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 586, 8), iter_segments_call_result_242252)
        # Assigning a type to the variable 'points' (line 586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 8), 'points', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 586, 8), for_loop_var_242253))
        # Assigning a type to the variable 'code' (line 586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 8), 'code', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 586, 8), for_loop_var_242253))
        # SSA begins for a for statement (line 586)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'code' (line 587)
        code_242254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 15), 'code')
        # Getting the type of 'Path' (line 587)
        Path_242255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 23), 'Path')
        # Obtaining the member 'MOVETO' of a type (line 587)
        MOVETO_242256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 23), Path_242255, 'MOVETO')
        # Applying the binary operator '==' (line 587)
        result_eq_242257 = python_operator(stypy.reporting.localization.Localization(__file__, 587, 15), '==', code_242254, MOVETO_242256)
        
        # Testing the type of an if condition (line 587)
        if_condition_242258 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 587, 12), result_eq_242257)
        # Assigning a type to the variable 'if_condition_242258' (line 587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 12), 'if_condition_242258', if_condition_242258)
        # SSA begins for if statement (line 587)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 588):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to tuple(...): (line 588)
        # Processing the call arguments (line 588)
        # Getting the type of 'points' (line 588)
        points_242260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 29), 'points', False)
        # Processing the call keyword arguments (line 588)
        kwargs_242261 = {}
        # Getting the type of 'tuple' (line 588)
        tuple_242259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 23), 'tuple', False)
        # Calling tuple(args, kwargs) (line 588)
        tuple_call_result_242262 = invoke(stypy.reporting.localization.Localization(__file__, 588, 23), tuple_242259, *[points_242260], **kwargs_242261)
        
        # Assigning a type to the variable 'call_assignment_240271' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 16), 'call_assignment_240271', tuple_call_result_242262)
        
        # Assigning a Call to a Name (line 588):
        
        # Assigning a Call to a Name (line 588):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, 16), 'int')
        # Processing the call keyword arguments
        kwargs_242266 = {}
        # Getting the type of 'call_assignment_240271' (line 588)
        call_assignment_240271_242263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 16), 'call_assignment_240271', False)
        # Obtaining the member '__getitem__' of a type (line 588)
        getitem___242264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 16), call_assignment_240271_242263, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242267 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242264, *[int_242265], **kwargs_242266)
        
        # Assigning a type to the variable 'call_assignment_240272' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 16), 'call_assignment_240272', getitem___call_result_242267)
        
        # Assigning a Name to a Name (line 588):
        
        # Assigning a Name to a Name (line 588):
        # Getting the type of 'call_assignment_240272' (line 588)
        call_assignment_240272_242268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 16), 'call_assignment_240272')
        # Assigning a type to the variable 'x' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 16), 'x', call_assignment_240272_242268)
        
        # Assigning a Call to a Name (line 588):
        
        # Assigning a Call to a Name (line 588):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, 16), 'int')
        # Processing the call keyword arguments
        kwargs_242272 = {}
        # Getting the type of 'call_assignment_240271' (line 588)
        call_assignment_240271_242269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 16), 'call_assignment_240271', False)
        # Obtaining the member '__getitem__' of a type (line 588)
        getitem___242270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 16), call_assignment_240271_242269, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242273 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242270, *[int_242271], **kwargs_242272)
        
        # Assigning a type to the variable 'call_assignment_240273' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 16), 'call_assignment_240273', getitem___call_result_242273)
        
        # Assigning a Name to a Name (line 588):
        
        # Assigning a Name to a Name (line 588):
        # Getting the type of 'call_assignment_240273' (line 588)
        call_assignment_240273_242274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 16), 'call_assignment_240273')
        # Assigning a type to the variable 'y' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 19), 'y', call_assignment_240273_242274)
        
        # Call to writeln(...): (line 589)
        # Processing the call arguments (line 589)
        # Getting the type of 'self' (line 589)
        self_242276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 24), 'self', False)
        # Obtaining the member 'fh' of a type (line 589)
        fh_242277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 24), self_242276, 'fh')
        unicode_242278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 589, 33), 'unicode', u'\\pgfpathmoveto{\\pgfqpoint{%fin}{%fin}}')
        
        # Obtaining an instance of the builtin type 'tuple' (line 590)
        tuple_242279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 590)
        # Adding element type (line 590)
        # Getting the type of 'f' (line 590)
        f_242280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 25), 'f', False)
        # Getting the type of 'x' (line 590)
        x_242281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 29), 'x', False)
        # Applying the binary operator '*' (line 590)
        result_mul_242282 = python_operator(stypy.reporting.localization.Localization(__file__, 590, 25), '*', f_242280, x_242281)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 25), tuple_242279, result_mul_242282)
        # Adding element type (line 590)
        # Getting the type of 'f' (line 590)
        f_242283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 32), 'f', False)
        # Getting the type of 'y' (line 590)
        y_242284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 36), 'y', False)
        # Applying the binary operator '*' (line 590)
        result_mul_242285 = python_operator(stypy.reporting.localization.Localization(__file__, 590, 32), '*', f_242283, y_242284)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 25), tuple_242279, result_mul_242285)
        
        # Applying the binary operator '%' (line 589)
        result_mod_242286 = python_operator(stypy.reporting.localization.Localization(__file__, 589, 33), '%', unicode_242278, tuple_242279)
        
        # Processing the call keyword arguments (line 589)
        kwargs_242287 = {}
        # Getting the type of 'writeln' (line 589)
        writeln_242275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 16), 'writeln', False)
        # Calling writeln(args, kwargs) (line 589)
        writeln_call_result_242288 = invoke(stypy.reporting.localization.Localization(__file__, 589, 16), writeln_242275, *[fh_242277, result_mod_242286], **kwargs_242287)
        
        # SSA branch for the else part of an if statement (line 587)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'code' (line 591)
        code_242289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 17), 'code')
        # Getting the type of 'Path' (line 591)
        Path_242290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 25), 'Path')
        # Obtaining the member 'CLOSEPOLY' of a type (line 591)
        CLOSEPOLY_242291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 25), Path_242290, 'CLOSEPOLY')
        # Applying the binary operator '==' (line 591)
        result_eq_242292 = python_operator(stypy.reporting.localization.Localization(__file__, 591, 17), '==', code_242289, CLOSEPOLY_242291)
        
        # Testing the type of an if condition (line 591)
        if_condition_242293 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 591, 17), result_eq_242292)
        # Assigning a type to the variable 'if_condition_242293' (line 591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 17), 'if_condition_242293', if_condition_242293)
        # SSA begins for if statement (line 591)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to writeln(...): (line 592)
        # Processing the call arguments (line 592)
        # Getting the type of 'self' (line 592)
        self_242295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 24), 'self', False)
        # Obtaining the member 'fh' of a type (line 592)
        fh_242296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 24), self_242295, 'fh')
        unicode_242297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 33), 'unicode', u'\\pgfpathclose')
        # Processing the call keyword arguments (line 592)
        kwargs_242298 = {}
        # Getting the type of 'writeln' (line 592)
        writeln_242294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 16), 'writeln', False)
        # Calling writeln(args, kwargs) (line 592)
        writeln_call_result_242299 = invoke(stypy.reporting.localization.Localization(__file__, 592, 16), writeln_242294, *[fh_242296, unicode_242297], **kwargs_242298)
        
        # SSA branch for the else part of an if statement (line 591)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'code' (line 593)
        code_242300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 17), 'code')
        # Getting the type of 'Path' (line 593)
        Path_242301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 25), 'Path')
        # Obtaining the member 'LINETO' of a type (line 593)
        LINETO_242302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 25), Path_242301, 'LINETO')
        # Applying the binary operator '==' (line 593)
        result_eq_242303 = python_operator(stypy.reporting.localization.Localization(__file__, 593, 17), '==', code_242300, LINETO_242302)
        
        # Testing the type of an if condition (line 593)
        if_condition_242304 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 593, 17), result_eq_242303)
        # Assigning a type to the variable 'if_condition_242304' (line 593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 17), 'if_condition_242304', if_condition_242304)
        # SSA begins for if statement (line 593)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 594):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to tuple(...): (line 594)
        # Processing the call arguments (line 594)
        # Getting the type of 'points' (line 594)
        points_242306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 29), 'points', False)
        # Processing the call keyword arguments (line 594)
        kwargs_242307 = {}
        # Getting the type of 'tuple' (line 594)
        tuple_242305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 23), 'tuple', False)
        # Calling tuple(args, kwargs) (line 594)
        tuple_call_result_242308 = invoke(stypy.reporting.localization.Localization(__file__, 594, 23), tuple_242305, *[points_242306], **kwargs_242307)
        
        # Assigning a type to the variable 'call_assignment_240274' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 16), 'call_assignment_240274', tuple_call_result_242308)
        
        # Assigning a Call to a Name (line 594):
        
        # Assigning a Call to a Name (line 594):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 16), 'int')
        # Processing the call keyword arguments
        kwargs_242312 = {}
        # Getting the type of 'call_assignment_240274' (line 594)
        call_assignment_240274_242309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 16), 'call_assignment_240274', False)
        # Obtaining the member '__getitem__' of a type (line 594)
        getitem___242310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 16), call_assignment_240274_242309, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242313 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242310, *[int_242311], **kwargs_242312)
        
        # Assigning a type to the variable 'call_assignment_240275' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 16), 'call_assignment_240275', getitem___call_result_242313)
        
        # Assigning a Name to a Name (line 594):
        
        # Assigning a Name to a Name (line 594):
        # Getting the type of 'call_assignment_240275' (line 594)
        call_assignment_240275_242314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 16), 'call_assignment_240275')
        # Assigning a type to the variable 'x' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 16), 'x', call_assignment_240275_242314)
        
        # Assigning a Call to a Name (line 594):
        
        # Assigning a Call to a Name (line 594):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 16), 'int')
        # Processing the call keyword arguments
        kwargs_242318 = {}
        # Getting the type of 'call_assignment_240274' (line 594)
        call_assignment_240274_242315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 16), 'call_assignment_240274', False)
        # Obtaining the member '__getitem__' of a type (line 594)
        getitem___242316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 16), call_assignment_240274_242315, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242319 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242316, *[int_242317], **kwargs_242318)
        
        # Assigning a type to the variable 'call_assignment_240276' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 16), 'call_assignment_240276', getitem___call_result_242319)
        
        # Assigning a Name to a Name (line 594):
        
        # Assigning a Name to a Name (line 594):
        # Getting the type of 'call_assignment_240276' (line 594)
        call_assignment_240276_242320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 16), 'call_assignment_240276')
        # Assigning a type to the variable 'y' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 19), 'y', call_assignment_240276_242320)
        
        # Call to writeln(...): (line 595)
        # Processing the call arguments (line 595)
        # Getting the type of 'self' (line 595)
        self_242322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 24), 'self', False)
        # Obtaining the member 'fh' of a type (line 595)
        fh_242323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 24), self_242322, 'fh')
        unicode_242324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 33), 'unicode', u'\\pgfpathlineto{\\pgfqpoint{%fin}{%fin}}')
        
        # Obtaining an instance of the builtin type 'tuple' (line 596)
        tuple_242325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 596)
        # Adding element type (line 596)
        # Getting the type of 'f' (line 596)
        f_242326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 25), 'f', False)
        # Getting the type of 'x' (line 596)
        x_242327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 29), 'x', False)
        # Applying the binary operator '*' (line 596)
        result_mul_242328 = python_operator(stypy.reporting.localization.Localization(__file__, 596, 25), '*', f_242326, x_242327)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 596, 25), tuple_242325, result_mul_242328)
        # Adding element type (line 596)
        # Getting the type of 'f' (line 596)
        f_242329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 32), 'f', False)
        # Getting the type of 'y' (line 596)
        y_242330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 36), 'y', False)
        # Applying the binary operator '*' (line 596)
        result_mul_242331 = python_operator(stypy.reporting.localization.Localization(__file__, 596, 32), '*', f_242329, y_242330)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 596, 25), tuple_242325, result_mul_242331)
        
        # Applying the binary operator '%' (line 595)
        result_mod_242332 = python_operator(stypy.reporting.localization.Localization(__file__, 595, 33), '%', unicode_242324, tuple_242325)
        
        # Processing the call keyword arguments (line 595)
        kwargs_242333 = {}
        # Getting the type of 'writeln' (line 595)
        writeln_242321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 16), 'writeln', False)
        # Calling writeln(args, kwargs) (line 595)
        writeln_call_result_242334 = invoke(stypy.reporting.localization.Localization(__file__, 595, 16), writeln_242321, *[fh_242323, result_mod_242332], **kwargs_242333)
        
        # SSA branch for the else part of an if statement (line 593)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'code' (line 597)
        code_242335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 17), 'code')
        # Getting the type of 'Path' (line 597)
        Path_242336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 25), 'Path')
        # Obtaining the member 'CURVE3' of a type (line 597)
        CURVE3_242337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 25), Path_242336, 'CURVE3')
        # Applying the binary operator '==' (line 597)
        result_eq_242338 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 17), '==', code_242335, CURVE3_242337)
        
        # Testing the type of an if condition (line 597)
        if_condition_242339 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 597, 17), result_eq_242338)
        # Assigning a type to the variable 'if_condition_242339' (line 597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 17), 'if_condition_242339', if_condition_242339)
        # SSA begins for if statement (line 597)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 598):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to tuple(...): (line 598)
        # Processing the call arguments (line 598)
        # Getting the type of 'points' (line 598)
        points_242341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 39), 'points', False)
        # Processing the call keyword arguments (line 598)
        kwargs_242342 = {}
        # Getting the type of 'tuple' (line 598)
        tuple_242340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 33), 'tuple', False)
        # Calling tuple(args, kwargs) (line 598)
        tuple_call_result_242343 = invoke(stypy.reporting.localization.Localization(__file__, 598, 33), tuple_242340, *[points_242341], **kwargs_242342)
        
        # Assigning a type to the variable 'call_assignment_240277' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'call_assignment_240277', tuple_call_result_242343)
        
        # Assigning a Call to a Name (line 598):
        
        # Assigning a Call to a Name (line 598):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 16), 'int')
        # Processing the call keyword arguments
        kwargs_242347 = {}
        # Getting the type of 'call_assignment_240277' (line 598)
        call_assignment_240277_242344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'call_assignment_240277', False)
        # Obtaining the member '__getitem__' of a type (line 598)
        getitem___242345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 16), call_assignment_240277_242344, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242348 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242345, *[int_242346], **kwargs_242347)
        
        # Assigning a type to the variable 'call_assignment_240278' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'call_assignment_240278', getitem___call_result_242348)
        
        # Assigning a Name to a Name (line 598):
        
        # Assigning a Name to a Name (line 598):
        # Getting the type of 'call_assignment_240278' (line 598)
        call_assignment_240278_242349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'call_assignment_240278')
        # Assigning a type to the variable 'cx' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'cx', call_assignment_240278_242349)
        
        # Assigning a Call to a Name (line 598):
        
        # Assigning a Call to a Name (line 598):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 16), 'int')
        # Processing the call keyword arguments
        kwargs_242353 = {}
        # Getting the type of 'call_assignment_240277' (line 598)
        call_assignment_240277_242350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'call_assignment_240277', False)
        # Obtaining the member '__getitem__' of a type (line 598)
        getitem___242351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 16), call_assignment_240277_242350, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242354 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242351, *[int_242352], **kwargs_242353)
        
        # Assigning a type to the variable 'call_assignment_240279' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'call_assignment_240279', getitem___call_result_242354)
        
        # Assigning a Name to a Name (line 598):
        
        # Assigning a Name to a Name (line 598):
        # Getting the type of 'call_assignment_240279' (line 598)
        call_assignment_240279_242355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'call_assignment_240279')
        # Assigning a type to the variable 'cy' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 20), 'cy', call_assignment_240279_242355)
        
        # Assigning a Call to a Name (line 598):
        
        # Assigning a Call to a Name (line 598):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 16), 'int')
        # Processing the call keyword arguments
        kwargs_242359 = {}
        # Getting the type of 'call_assignment_240277' (line 598)
        call_assignment_240277_242356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'call_assignment_240277', False)
        # Obtaining the member '__getitem__' of a type (line 598)
        getitem___242357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 16), call_assignment_240277_242356, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242360 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242357, *[int_242358], **kwargs_242359)
        
        # Assigning a type to the variable 'call_assignment_240280' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'call_assignment_240280', getitem___call_result_242360)
        
        # Assigning a Name to a Name (line 598):
        
        # Assigning a Name to a Name (line 598):
        # Getting the type of 'call_assignment_240280' (line 598)
        call_assignment_240280_242361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'call_assignment_240280')
        # Assigning a type to the variable 'px' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 24), 'px', call_assignment_240280_242361)
        
        # Assigning a Call to a Name (line 598):
        
        # Assigning a Call to a Name (line 598):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 16), 'int')
        # Processing the call keyword arguments
        kwargs_242365 = {}
        # Getting the type of 'call_assignment_240277' (line 598)
        call_assignment_240277_242362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'call_assignment_240277', False)
        # Obtaining the member '__getitem__' of a type (line 598)
        getitem___242363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 16), call_assignment_240277_242362, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242366 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242363, *[int_242364], **kwargs_242365)
        
        # Assigning a type to the variable 'call_assignment_240281' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'call_assignment_240281', getitem___call_result_242366)
        
        # Assigning a Name to a Name (line 598):
        
        # Assigning a Name to a Name (line 598):
        # Getting the type of 'call_assignment_240281' (line 598)
        call_assignment_240281_242367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'call_assignment_240281')
        # Assigning a type to the variable 'py' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 28), 'py', call_assignment_240281_242367)
        
        # Assigning a Tuple to a Name (line 599):
        
        # Assigning a Tuple to a Name (line 599):
        
        # Assigning a Tuple to a Name (line 599):
        
        # Obtaining an instance of the builtin type 'tuple' (line 599)
        tuple_242368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 599)
        # Adding element type (line 599)
        # Getting the type of 'cx' (line 599)
        cx_242369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 25), 'cx')
        # Getting the type of 'f' (line 599)
        f_242370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 30), 'f')
        # Applying the binary operator '*' (line 599)
        result_mul_242371 = python_operator(stypy.reporting.localization.Localization(__file__, 599, 25), '*', cx_242369, f_242370)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 599, 25), tuple_242368, result_mul_242371)
        # Adding element type (line 599)
        # Getting the type of 'cy' (line 599)
        cy_242372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 33), 'cy')
        # Getting the type of 'f' (line 599)
        f_242373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 38), 'f')
        # Applying the binary operator '*' (line 599)
        result_mul_242374 = python_operator(stypy.reporting.localization.Localization(__file__, 599, 33), '*', cy_242372, f_242373)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 599, 25), tuple_242368, result_mul_242374)
        # Adding element type (line 599)
        # Getting the type of 'px' (line 599)
        px_242375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 41), 'px')
        # Getting the type of 'f' (line 599)
        f_242376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 46), 'f')
        # Applying the binary operator '*' (line 599)
        result_mul_242377 = python_operator(stypy.reporting.localization.Localization(__file__, 599, 41), '*', px_242375, f_242376)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 599, 25), tuple_242368, result_mul_242377)
        # Adding element type (line 599)
        # Getting the type of 'py' (line 599)
        py_242378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 49), 'py')
        # Getting the type of 'f' (line 599)
        f_242379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 54), 'f')
        # Applying the binary operator '*' (line 599)
        result_mul_242380 = python_operator(stypy.reporting.localization.Localization(__file__, 599, 49), '*', py_242378, f_242379)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 599, 25), tuple_242368, result_mul_242380)
        
        # Assigning a type to the variable 'coords' (line 599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 599, 16), 'coords', tuple_242368)
        
        # Call to writeln(...): (line 600)
        # Processing the call arguments (line 600)
        # Getting the type of 'self' (line 600)
        self_242382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 24), 'self', False)
        # Obtaining the member 'fh' of a type (line 600)
        fh_242383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 24), self_242382, 'fh')
        unicode_242384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 600, 33), 'unicode', u'\\pgfpathquadraticcurveto{\\pgfqpoint{%fin}{%fin}}{\\pgfqpoint{%fin}{%fin}}')
        # Getting the type of 'coords' (line 600)
        coords_242385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 111), 'coords', False)
        # Applying the binary operator '%' (line 600)
        result_mod_242386 = python_operator(stypy.reporting.localization.Localization(__file__, 600, 33), '%', unicode_242384, coords_242385)
        
        # Processing the call keyword arguments (line 600)
        kwargs_242387 = {}
        # Getting the type of 'writeln' (line 600)
        writeln_242381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 16), 'writeln', False)
        # Calling writeln(args, kwargs) (line 600)
        writeln_call_result_242388 = invoke(stypy.reporting.localization.Localization(__file__, 600, 16), writeln_242381, *[fh_242383, result_mod_242386], **kwargs_242387)
        
        # SSA branch for the else part of an if statement (line 597)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'code' (line 601)
        code_242389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 17), 'code')
        # Getting the type of 'Path' (line 601)
        Path_242390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 25), 'Path')
        # Obtaining the member 'CURVE4' of a type (line 601)
        CURVE4_242391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 25), Path_242390, 'CURVE4')
        # Applying the binary operator '==' (line 601)
        result_eq_242392 = python_operator(stypy.reporting.localization.Localization(__file__, 601, 17), '==', code_242389, CURVE4_242391)
        
        # Testing the type of an if condition (line 601)
        if_condition_242393 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 601, 17), result_eq_242392)
        # Assigning a type to the variable 'if_condition_242393' (line 601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 601, 17), 'if_condition_242393', if_condition_242393)
        # SSA begins for if statement (line 601)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 602):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to tuple(...): (line 602)
        # Processing the call arguments (line 602)
        # Getting the type of 'points' (line 602)
        points_242395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 51), 'points', False)
        # Processing the call keyword arguments (line 602)
        kwargs_242396 = {}
        # Getting the type of 'tuple' (line 602)
        tuple_242394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 45), 'tuple', False)
        # Calling tuple(args, kwargs) (line 602)
        tuple_call_result_242397 = invoke(stypy.reporting.localization.Localization(__file__, 602, 45), tuple_242394, *[points_242395], **kwargs_242396)
        
        # Assigning a type to the variable 'call_assignment_240282' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240282', tuple_call_result_242397)
        
        # Assigning a Call to a Name (line 602):
        
        # Assigning a Call to a Name (line 602):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 16), 'int')
        # Processing the call keyword arguments
        kwargs_242401 = {}
        # Getting the type of 'call_assignment_240282' (line 602)
        call_assignment_240282_242398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240282', False)
        # Obtaining the member '__getitem__' of a type (line 602)
        getitem___242399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 16), call_assignment_240282_242398, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242402 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242399, *[int_242400], **kwargs_242401)
        
        # Assigning a type to the variable 'call_assignment_240283' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240283', getitem___call_result_242402)
        
        # Assigning a Name to a Name (line 602):
        
        # Assigning a Name to a Name (line 602):
        # Getting the type of 'call_assignment_240283' (line 602)
        call_assignment_240283_242403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240283')
        # Assigning a type to the variable 'c1x' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'c1x', call_assignment_240283_242403)
        
        # Assigning a Call to a Name (line 602):
        
        # Assigning a Call to a Name (line 602):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 16), 'int')
        # Processing the call keyword arguments
        kwargs_242407 = {}
        # Getting the type of 'call_assignment_240282' (line 602)
        call_assignment_240282_242404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240282', False)
        # Obtaining the member '__getitem__' of a type (line 602)
        getitem___242405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 16), call_assignment_240282_242404, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242408 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242405, *[int_242406], **kwargs_242407)
        
        # Assigning a type to the variable 'call_assignment_240284' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240284', getitem___call_result_242408)
        
        # Assigning a Name to a Name (line 602):
        
        # Assigning a Name to a Name (line 602):
        # Getting the type of 'call_assignment_240284' (line 602)
        call_assignment_240284_242409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240284')
        # Assigning a type to the variable 'c1y' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 21), 'c1y', call_assignment_240284_242409)
        
        # Assigning a Call to a Name (line 602):
        
        # Assigning a Call to a Name (line 602):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 16), 'int')
        # Processing the call keyword arguments
        kwargs_242413 = {}
        # Getting the type of 'call_assignment_240282' (line 602)
        call_assignment_240282_242410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240282', False)
        # Obtaining the member '__getitem__' of a type (line 602)
        getitem___242411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 16), call_assignment_240282_242410, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242414 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242411, *[int_242412], **kwargs_242413)
        
        # Assigning a type to the variable 'call_assignment_240285' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240285', getitem___call_result_242414)
        
        # Assigning a Name to a Name (line 602):
        
        # Assigning a Name to a Name (line 602):
        # Getting the type of 'call_assignment_240285' (line 602)
        call_assignment_240285_242415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240285')
        # Assigning a type to the variable 'c2x' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 26), 'c2x', call_assignment_240285_242415)
        
        # Assigning a Call to a Name (line 602):
        
        # Assigning a Call to a Name (line 602):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 16), 'int')
        # Processing the call keyword arguments
        kwargs_242419 = {}
        # Getting the type of 'call_assignment_240282' (line 602)
        call_assignment_240282_242416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240282', False)
        # Obtaining the member '__getitem__' of a type (line 602)
        getitem___242417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 16), call_assignment_240282_242416, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242420 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242417, *[int_242418], **kwargs_242419)
        
        # Assigning a type to the variable 'call_assignment_240286' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240286', getitem___call_result_242420)
        
        # Assigning a Name to a Name (line 602):
        
        # Assigning a Name to a Name (line 602):
        # Getting the type of 'call_assignment_240286' (line 602)
        call_assignment_240286_242421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240286')
        # Assigning a type to the variable 'c2y' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 31), 'c2y', call_assignment_240286_242421)
        
        # Assigning a Call to a Name (line 602):
        
        # Assigning a Call to a Name (line 602):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 16), 'int')
        # Processing the call keyword arguments
        kwargs_242425 = {}
        # Getting the type of 'call_assignment_240282' (line 602)
        call_assignment_240282_242422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240282', False)
        # Obtaining the member '__getitem__' of a type (line 602)
        getitem___242423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 16), call_assignment_240282_242422, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242426 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242423, *[int_242424], **kwargs_242425)
        
        # Assigning a type to the variable 'call_assignment_240287' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240287', getitem___call_result_242426)
        
        # Assigning a Name to a Name (line 602):
        
        # Assigning a Name to a Name (line 602):
        # Getting the type of 'call_assignment_240287' (line 602)
        call_assignment_240287_242427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240287')
        # Assigning a type to the variable 'px' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 36), 'px', call_assignment_240287_242427)
        
        # Assigning a Call to a Name (line 602):
        
        # Assigning a Call to a Name (line 602):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 16), 'int')
        # Processing the call keyword arguments
        kwargs_242431 = {}
        # Getting the type of 'call_assignment_240282' (line 602)
        call_assignment_240282_242428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240282', False)
        # Obtaining the member '__getitem__' of a type (line 602)
        getitem___242429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 16), call_assignment_240282_242428, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242432 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242429, *[int_242430], **kwargs_242431)
        
        # Assigning a type to the variable 'call_assignment_240288' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240288', getitem___call_result_242432)
        
        # Assigning a Name to a Name (line 602):
        
        # Assigning a Name to a Name (line 602):
        # Getting the type of 'call_assignment_240288' (line 602)
        call_assignment_240288_242433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'call_assignment_240288')
        # Assigning a type to the variable 'py' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 40), 'py', call_assignment_240288_242433)
        
        # Assigning a Tuple to a Name (line 603):
        
        # Assigning a Tuple to a Name (line 603):
        
        # Assigning a Tuple to a Name (line 603):
        
        # Obtaining an instance of the builtin type 'tuple' (line 603)
        tuple_242434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 603)
        # Adding element type (line 603)
        # Getting the type of 'c1x' (line 603)
        c1x_242435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 25), 'c1x')
        # Getting the type of 'f' (line 603)
        f_242436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 31), 'f')
        # Applying the binary operator '*' (line 603)
        result_mul_242437 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 25), '*', c1x_242435, f_242436)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 25), tuple_242434, result_mul_242437)
        # Adding element type (line 603)
        # Getting the type of 'c1y' (line 603)
        c1y_242438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 34), 'c1y')
        # Getting the type of 'f' (line 603)
        f_242439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 40), 'f')
        # Applying the binary operator '*' (line 603)
        result_mul_242440 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 34), '*', c1y_242438, f_242439)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 25), tuple_242434, result_mul_242440)
        # Adding element type (line 603)
        # Getting the type of 'c2x' (line 603)
        c2x_242441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 43), 'c2x')
        # Getting the type of 'f' (line 603)
        f_242442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 49), 'f')
        # Applying the binary operator '*' (line 603)
        result_mul_242443 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 43), '*', c2x_242441, f_242442)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 25), tuple_242434, result_mul_242443)
        # Adding element type (line 603)
        # Getting the type of 'c2y' (line 603)
        c2y_242444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 52), 'c2y')
        # Getting the type of 'f' (line 603)
        f_242445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 58), 'f')
        # Applying the binary operator '*' (line 603)
        result_mul_242446 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 52), '*', c2y_242444, f_242445)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 25), tuple_242434, result_mul_242446)
        # Adding element type (line 603)
        # Getting the type of 'px' (line 603)
        px_242447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 61), 'px')
        # Getting the type of 'f' (line 603)
        f_242448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 66), 'f')
        # Applying the binary operator '*' (line 603)
        result_mul_242449 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 61), '*', px_242447, f_242448)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 25), tuple_242434, result_mul_242449)
        # Adding element type (line 603)
        # Getting the type of 'py' (line 603)
        py_242450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 69), 'py')
        # Getting the type of 'f' (line 603)
        f_242451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 74), 'f')
        # Applying the binary operator '*' (line 603)
        result_mul_242452 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 69), '*', py_242450, f_242451)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 25), tuple_242434, result_mul_242452)
        
        # Assigning a type to the variable 'coords' (line 603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 16), 'coords', tuple_242434)
        
        # Call to writeln(...): (line 604)
        # Processing the call arguments (line 604)
        # Getting the type of 'self' (line 604)
        self_242454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 24), 'self', False)
        # Obtaining the member 'fh' of a type (line 604)
        fh_242455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 24), self_242454, 'fh')
        unicode_242456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, 33), 'unicode', u'\\pgfpathcurveto{\\pgfqpoint{%fin}{%fin}}{\\pgfqpoint{%fin}{%fin}}{\\pgfqpoint{%fin}{%fin}}')
        # Getting the type of 'coords' (line 604)
        coords_242457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 126), 'coords', False)
        # Applying the binary operator '%' (line 604)
        result_mod_242458 = python_operator(stypy.reporting.localization.Localization(__file__, 604, 33), '%', unicode_242456, coords_242457)
        
        # Processing the call keyword arguments (line 604)
        kwargs_242459 = {}
        # Getting the type of 'writeln' (line 604)
        writeln_242453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 16), 'writeln', False)
        # Calling writeln(args, kwargs) (line 604)
        writeln_call_result_242460 = invoke(stypy.reporting.localization.Localization(__file__, 604, 16), writeln_242453, *[fh_242455, result_mod_242458], **kwargs_242459)
        
        # SSA join for if statement (line 601)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 597)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 593)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 591)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 587)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_print_pgf_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_print_pgf_path' in the type store
        # Getting the type of 'stypy_return_type' (line 576)
        stypy_return_type_242461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_242461)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_print_pgf_path'
        return stypy_return_type_242461


    @norecursion
    def _pgf_path_draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 606)
        True_242462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 36), 'True')
        # Getting the type of 'False' (line 606)
        False_242463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 47), 'False')
        defaults = [True_242462, False_242463]
        # Create a new context for function '_pgf_path_draw'
        module_type_store = module_type_store.open_function_context('_pgf_path_draw', 606, 4, False)
        # Assigning a type to the variable 'self' (line 607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf._pgf_path_draw.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf._pgf_path_draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf._pgf_path_draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf._pgf_path_draw.__dict__.__setitem__('stypy_function_name', 'RendererPgf._pgf_path_draw')
        RendererPgf._pgf_path_draw.__dict__.__setitem__('stypy_param_names_list', ['stroke', 'fill'])
        RendererPgf._pgf_path_draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf._pgf_path_draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf._pgf_path_draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf._pgf_path_draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf._pgf_path_draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf._pgf_path_draw.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf._pgf_path_draw', ['stroke', 'fill'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_pgf_path_draw', localization, ['stroke', 'fill'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_pgf_path_draw(...)' code ##################

        
        # Assigning a List to a Name (line 607):
        
        # Assigning a List to a Name (line 607):
        
        # Assigning a List to a Name (line 607):
        
        # Obtaining an instance of the builtin type 'list' (line 607)
        list_242464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 607)
        
        # Assigning a type to the variable 'actions' (line 607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 8), 'actions', list_242464)
        
        # Getting the type of 'stroke' (line 608)
        stroke_242465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 11), 'stroke')
        # Testing the type of an if condition (line 608)
        if_condition_242466 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 608, 8), stroke_242465)
        # Assigning a type to the variable 'if_condition_242466' (line 608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 608, 8), 'if_condition_242466', if_condition_242466)
        # SSA begins for if statement (line 608)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 609)
        # Processing the call arguments (line 609)
        unicode_242469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 27), 'unicode', u'stroke')
        # Processing the call keyword arguments (line 609)
        kwargs_242470 = {}
        # Getting the type of 'actions' (line 609)
        actions_242467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 12), 'actions', False)
        # Obtaining the member 'append' of a type (line 609)
        append_242468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 12), actions_242467, 'append')
        # Calling append(args, kwargs) (line 609)
        append_call_result_242471 = invoke(stypy.reporting.localization.Localization(__file__, 609, 12), append_242468, *[unicode_242469], **kwargs_242470)
        
        # SSA join for if statement (line 608)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'fill' (line 610)
        fill_242472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 11), 'fill')
        # Testing the type of an if condition (line 610)
        if_condition_242473 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 610, 8), fill_242472)
        # Assigning a type to the variable 'if_condition_242473' (line 610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 8), 'if_condition_242473', if_condition_242473)
        # SSA begins for if statement (line 610)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 611)
        # Processing the call arguments (line 611)
        unicode_242476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 27), 'unicode', u'fill')
        # Processing the call keyword arguments (line 611)
        kwargs_242477 = {}
        # Getting the type of 'actions' (line 611)
        actions_242474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 12), 'actions', False)
        # Obtaining the member 'append' of a type (line 611)
        append_242475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 12), actions_242474, 'append')
        # Calling append(args, kwargs) (line 611)
        append_call_result_242478 = invoke(stypy.reporting.localization.Localization(__file__, 611, 12), append_242475, *[unicode_242476], **kwargs_242477)
        
        # SSA join for if statement (line 610)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to writeln(...): (line 612)
        # Processing the call arguments (line 612)
        # Getting the type of 'self' (line 612)
        self_242480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 612)
        fh_242481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 16), self_242480, 'fh')
        unicode_242482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 25), 'unicode', u'\\pgfusepath{%s}')
        
        # Call to join(...): (line 612)
        # Processing the call arguments (line 612)
        # Getting the type of 'actions' (line 612)
        actions_242485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 55), 'actions', False)
        # Processing the call keyword arguments (line 612)
        kwargs_242486 = {}
        unicode_242483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 46), 'unicode', u',')
        # Obtaining the member 'join' of a type (line 612)
        join_242484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 46), unicode_242483, 'join')
        # Calling join(args, kwargs) (line 612)
        join_call_result_242487 = invoke(stypy.reporting.localization.Localization(__file__, 612, 46), join_242484, *[actions_242485], **kwargs_242486)
        
        # Applying the binary operator '%' (line 612)
        result_mod_242488 = python_operator(stypy.reporting.localization.Localization(__file__, 612, 25), '%', unicode_242482, join_call_result_242487)
        
        # Processing the call keyword arguments (line 612)
        kwargs_242489 = {}
        # Getting the type of 'writeln' (line 612)
        writeln_242479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 612)
        writeln_call_result_242490 = invoke(stypy.reporting.localization.Localization(__file__, 612, 8), writeln_242479, *[fh_242481, result_mod_242488], **kwargs_242489)
        
        
        # ################# End of '_pgf_path_draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_pgf_path_draw' in the type store
        # Getting the type of 'stypy_return_type' (line 606)
        stypy_return_type_242491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_242491)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_pgf_path_draw'
        return stypy_return_type_242491


    @norecursion
    def option_scale_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'option_scale_image'
        module_type_store = module_type_store.open_function_context('option_scale_image', 614, 4, False)
        # Assigning a type to the variable 'self' (line 615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf.option_scale_image.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf.option_scale_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf.option_scale_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf.option_scale_image.__dict__.__setitem__('stypy_function_name', 'RendererPgf.option_scale_image')
        RendererPgf.option_scale_image.__dict__.__setitem__('stypy_param_names_list', [])
        RendererPgf.option_scale_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf.option_scale_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf.option_scale_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf.option_scale_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf.option_scale_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf.option_scale_image.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf.option_scale_image', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'option_scale_image', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'option_scale_image(...)' code ##################

        unicode_242492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, (-1)), 'unicode', u'\n        pgf backend supports affine transform of image.\n        ')
        # Getting the type of 'True' (line 618)
        True_242493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'stypy_return_type', True_242493)
        
        # ################# End of 'option_scale_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'option_scale_image' in the type store
        # Getting the type of 'stypy_return_type' (line 614)
        stypy_return_type_242494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_242494)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'option_scale_image'
        return stypy_return_type_242494


    @norecursion
    def option_image_nocomposite(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'option_image_nocomposite'
        module_type_store = module_type_store.open_function_context('option_image_nocomposite', 620, 4, False)
        # Assigning a type to the variable 'self' (line 621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf.option_image_nocomposite.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf.option_image_nocomposite.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf.option_image_nocomposite.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf.option_image_nocomposite.__dict__.__setitem__('stypy_function_name', 'RendererPgf.option_image_nocomposite')
        RendererPgf.option_image_nocomposite.__dict__.__setitem__('stypy_param_names_list', [])
        RendererPgf.option_image_nocomposite.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf.option_image_nocomposite.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf.option_image_nocomposite.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf.option_image_nocomposite.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf.option_image_nocomposite.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf.option_image_nocomposite.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf.option_image_nocomposite', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'option_image_nocomposite', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'option_image_nocomposite(...)' code ##################

        unicode_242495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, (-1)), 'unicode', u'\n        return whether to generate a composite image from multiple images on\n        a set of axes\n        ')
        
        
        # Obtaining the type of the subscript
        unicode_242496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 28), 'unicode', u'image.composite_image')
        # Getting the type of 'rcParams' (line 625)
        rcParams_242497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 19), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 625)
        getitem___242498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 19), rcParams_242497, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 625)
        subscript_call_result_242499 = invoke(stypy.reporting.localization.Localization(__file__, 625, 19), getitem___242498, unicode_242496)
        
        # Applying the 'not' unary operator (line 625)
        result_not__242500 = python_operator(stypy.reporting.localization.Localization(__file__, 625, 15), 'not', subscript_call_result_242499)
        
        # Assigning a type to the variable 'stypy_return_type' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'stypy_return_type', result_not__242500)
        
        # ################# End of 'option_image_nocomposite(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'option_image_nocomposite' in the type store
        # Getting the type of 'stypy_return_type' (line 620)
        stypy_return_type_242501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_242501)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'option_image_nocomposite'
        return stypy_return_type_242501


    @norecursion
    def draw_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 627)
        None_242502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 49), 'None')
        defaults = [None_242502]
        # Create a new context for function 'draw_image'
        module_type_store = module_type_store.open_function_context('draw_image', 627, 4, False)
        # Assigning a type to the variable 'self' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf.draw_image.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf.draw_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf.draw_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf.draw_image.__dict__.__setitem__('stypy_function_name', 'RendererPgf.draw_image')
        RendererPgf.draw_image.__dict__.__setitem__('stypy_param_names_list', ['gc', 'x', 'y', 'im', 'transform'])
        RendererPgf.draw_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf.draw_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf.draw_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf.draw_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf.draw_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf.draw_image.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf.draw_image', ['gc', 'x', 'y', 'im', 'transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_image', localization, ['gc', 'x', 'y', 'im', 'transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_image(...)' code ##################

        
        # Assigning a Subscript to a Tuple (line 628):
        
        # Assigning a Subscript to a Name (line 628):
        
        # Assigning a Subscript to a Name (line 628):
        
        # Obtaining the type of the subscript
        int_242503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 8), 'int')
        
        # Obtaining the type of the subscript
        int_242504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 25), 'int')
        slice_242505 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 628, 15), None, int_242504, None)
        # Getting the type of 'im' (line 628)
        im_242506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 15), 'im')
        # Obtaining the member 'shape' of a type (line 628)
        shape_242507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 15), im_242506, 'shape')
        # Obtaining the member '__getitem__' of a type (line 628)
        getitem___242508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 15), shape_242507, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 628)
        subscript_call_result_242509 = invoke(stypy.reporting.localization.Localization(__file__, 628, 15), getitem___242508, slice_242505)
        
        # Obtaining the member '__getitem__' of a type (line 628)
        getitem___242510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 8), subscript_call_result_242509, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 628)
        subscript_call_result_242511 = invoke(stypy.reporting.localization.Localization(__file__, 628, 8), getitem___242510, int_242503)
        
        # Assigning a type to the variable 'tuple_var_assignment_240289' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 8), 'tuple_var_assignment_240289', subscript_call_result_242511)
        
        # Assigning a Subscript to a Name (line 628):
        
        # Assigning a Subscript to a Name (line 628):
        
        # Obtaining the type of the subscript
        int_242512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 8), 'int')
        
        # Obtaining the type of the subscript
        int_242513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 25), 'int')
        slice_242514 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 628, 15), None, int_242513, None)
        # Getting the type of 'im' (line 628)
        im_242515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 15), 'im')
        # Obtaining the member 'shape' of a type (line 628)
        shape_242516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 15), im_242515, 'shape')
        # Obtaining the member '__getitem__' of a type (line 628)
        getitem___242517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 15), shape_242516, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 628)
        subscript_call_result_242518 = invoke(stypy.reporting.localization.Localization(__file__, 628, 15), getitem___242517, slice_242514)
        
        # Obtaining the member '__getitem__' of a type (line 628)
        getitem___242519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 8), subscript_call_result_242518, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 628)
        subscript_call_result_242520 = invoke(stypy.reporting.localization.Localization(__file__, 628, 8), getitem___242519, int_242512)
        
        # Assigning a type to the variable 'tuple_var_assignment_240290' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 8), 'tuple_var_assignment_240290', subscript_call_result_242520)
        
        # Assigning a Name to a Name (line 628):
        
        # Assigning a Name to a Name (line 628):
        # Getting the type of 'tuple_var_assignment_240289' (line 628)
        tuple_var_assignment_240289_242521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 8), 'tuple_var_assignment_240289')
        # Assigning a type to the variable 'h' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 8), 'h', tuple_var_assignment_240289_242521)
        
        # Assigning a Name to a Name (line 628):
        
        # Assigning a Name to a Name (line 628):
        # Getting the type of 'tuple_var_assignment_240290' (line 628)
        tuple_var_assignment_240290_242522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 8), 'tuple_var_assignment_240290')
        # Assigning a type to the variable 'w' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 11), 'w', tuple_var_assignment_240290_242522)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'w' (line 629)
        w_242523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 11), 'w')
        int_242524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 16), 'int')
        # Applying the binary operator '==' (line 629)
        result_eq_242525 = python_operator(stypy.reporting.localization.Localization(__file__, 629, 11), '==', w_242523, int_242524)
        
        
        # Getting the type of 'h' (line 629)
        h_242526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 21), 'h')
        int_242527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 26), 'int')
        # Applying the binary operator '==' (line 629)
        result_eq_242528 = python_operator(stypy.reporting.localization.Localization(__file__, 629, 21), '==', h_242526, int_242527)
        
        # Applying the binary operator 'or' (line 629)
        result_or_keyword_242529 = python_operator(stypy.reporting.localization.Localization(__file__, 629, 11), 'or', result_eq_242525, result_eq_242528)
        
        # Testing the type of an if condition (line 629)
        if_condition_242530 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 629, 8), result_or_keyword_242529)
        # Assigning a type to the variable 'if_condition_242530' (line 629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 8), 'if_condition_242530', if_condition_242530)
        # SSA begins for if statement (line 629)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 629)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 633):
        
        # Assigning a Call to a Name (line 633):
        
        # Assigning a Call to a Name (line 633):
        
        # Call to dirname(...): (line 633)
        # Processing the call arguments (line 633)
        # Getting the type of 'self' (line 633)
        self_242534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 31), 'self', False)
        # Obtaining the member 'fh' of a type (line 633)
        fh_242535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 31), self_242534, 'fh')
        # Obtaining the member 'name' of a type (line 633)
        name_242536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 31), fh_242535, 'name')
        # Processing the call keyword arguments (line 633)
        kwargs_242537 = {}
        # Getting the type of 'os' (line 633)
        os_242531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 633)
        path_242532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 15), os_242531, 'path')
        # Obtaining the member 'dirname' of a type (line 633)
        dirname_242533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 15), path_242532, 'dirname')
        # Calling dirname(args, kwargs) (line 633)
        dirname_call_result_242538 = invoke(stypy.reporting.localization.Localization(__file__, 633, 15), dirname_242533, *[name_242536], **kwargs_242537)
        
        # Assigning a type to the variable 'path' (line 633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 8), 'path', dirname_call_result_242538)
        
        # Assigning a Subscript to a Name (line 634):
        
        # Assigning a Subscript to a Name (line 634):
        
        # Assigning a Subscript to a Name (line 634):
        
        # Obtaining the type of the subscript
        int_242539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 65), 'int')
        
        # Call to splitext(...): (line 634)
        # Processing the call arguments (line 634)
        
        # Call to basename(...): (line 634)
        # Processing the call arguments (line 634)
        # Getting the type of 'self' (line 634)
        self_242546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 50), 'self', False)
        # Obtaining the member 'fh' of a type (line 634)
        fh_242547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 50), self_242546, 'fh')
        # Obtaining the member 'name' of a type (line 634)
        name_242548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 50), fh_242547, 'name')
        # Processing the call keyword arguments (line 634)
        kwargs_242549 = {}
        # Getting the type of 'os' (line 634)
        os_242543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 33), 'os', False)
        # Obtaining the member 'path' of a type (line 634)
        path_242544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 33), os_242543, 'path')
        # Obtaining the member 'basename' of a type (line 634)
        basename_242545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 33), path_242544, 'basename')
        # Calling basename(args, kwargs) (line 634)
        basename_call_result_242550 = invoke(stypy.reporting.localization.Localization(__file__, 634, 33), basename_242545, *[name_242548], **kwargs_242549)
        
        # Processing the call keyword arguments (line 634)
        kwargs_242551 = {}
        # Getting the type of 'os' (line 634)
        os_242540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 16), 'os', False)
        # Obtaining the member 'path' of a type (line 634)
        path_242541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 16), os_242540, 'path')
        # Obtaining the member 'splitext' of a type (line 634)
        splitext_242542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 16), path_242541, 'splitext')
        # Calling splitext(args, kwargs) (line 634)
        splitext_call_result_242552 = invoke(stypy.reporting.localization.Localization(__file__, 634, 16), splitext_242542, *[basename_call_result_242550], **kwargs_242551)
        
        # Obtaining the member '__getitem__' of a type (line 634)
        getitem___242553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 16), splitext_call_result_242552, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 634)
        subscript_call_result_242554 = invoke(stypy.reporting.localization.Localization(__file__, 634, 16), getitem___242553, int_242539)
        
        # Assigning a type to the variable 'fname' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'fname', subscript_call_result_242554)
        
        # Assigning a BinOp to a Name (line 635):
        
        # Assigning a BinOp to a Name (line 635):
        
        # Assigning a BinOp to a Name (line 635):
        unicode_242555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 635, 20), 'unicode', u'%s-img%d.png')
        
        # Obtaining an instance of the builtin type 'tuple' (line 635)
        tuple_242556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 635, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 635)
        # Adding element type (line 635)
        # Getting the type of 'fname' (line 635)
        fname_242557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 38), 'fname')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 635, 38), tuple_242556, fname_242557)
        # Adding element type (line 635)
        # Getting the type of 'self' (line 635)
        self_242558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 45), 'self')
        # Obtaining the member 'image_counter' of a type (line 635)
        image_counter_242559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 45), self_242558, 'image_counter')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 635, 38), tuple_242556, image_counter_242559)
        
        # Applying the binary operator '%' (line 635)
        result_mod_242560 = python_operator(stypy.reporting.localization.Localization(__file__, 635, 20), '%', unicode_242555, tuple_242556)
        
        # Assigning a type to the variable 'fname_img' (line 635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 8), 'fname_img', result_mod_242560)
        
        # Getting the type of 'self' (line 636)
        self_242561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 8), 'self')
        # Obtaining the member 'image_counter' of a type (line 636)
        image_counter_242562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 8), self_242561, 'image_counter')
        int_242563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 30), 'int')
        # Applying the binary operator '+=' (line 636)
        result_iadd_242564 = python_operator(stypy.reporting.localization.Localization(__file__, 636, 8), '+=', image_counter_242562, int_242563)
        # Getting the type of 'self' (line 636)
        self_242565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 8), 'self')
        # Setting the type of the member 'image_counter' of a type (line 636)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 8), self_242565, 'image_counter', result_iadd_242564)
        
        
        # Call to write_png(...): (line 637)
        # Processing the call arguments (line 637)
        
        # Obtaining the type of the subscript
        int_242568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 28), 'int')
        slice_242569 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 637, 23), None, None, int_242568)
        # Getting the type of 'im' (line 637)
        im_242570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 23), 'im', False)
        # Obtaining the member '__getitem__' of a type (line 637)
        getitem___242571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 23), im_242570, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 637)
        subscript_call_result_242572 = invoke(stypy.reporting.localization.Localization(__file__, 637, 23), getitem___242571, slice_242569)
        
        
        # Call to join(...): (line 637)
        # Processing the call arguments (line 637)
        # Getting the type of 'path' (line 637)
        path_242576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 46), 'path', False)
        # Getting the type of 'fname_img' (line 637)
        fname_img_242577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 52), 'fname_img', False)
        # Processing the call keyword arguments (line 637)
        kwargs_242578 = {}
        # Getting the type of 'os' (line 637)
        os_242573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 33), 'os', False)
        # Obtaining the member 'path' of a type (line 637)
        path_242574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 33), os_242573, 'path')
        # Obtaining the member 'join' of a type (line 637)
        join_242575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 33), path_242574, 'join')
        # Calling join(args, kwargs) (line 637)
        join_call_result_242579 = invoke(stypy.reporting.localization.Localization(__file__, 637, 33), join_242575, *[path_242576, fname_img_242577], **kwargs_242578)
        
        # Processing the call keyword arguments (line 637)
        kwargs_242580 = {}
        # Getting the type of '_png' (line 637)
        _png_242566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 8), '_png', False)
        # Obtaining the member 'write_png' of a type (line 637)
        write_png_242567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 8), _png_242566, 'write_png')
        # Calling write_png(args, kwargs) (line 637)
        write_png_call_result_242581 = invoke(stypy.reporting.localization.Localization(__file__, 637, 8), write_png_242567, *[subscript_call_result_242572, join_call_result_242579], **kwargs_242580)
        
        
        # Call to writeln(...): (line 640)
        # Processing the call arguments (line 640)
        # Getting the type of 'self' (line 640)
        self_242583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 640)
        fh_242584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 16), self_242583, 'fh')
        unicode_242585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 25), 'unicode', u'\\begin{pgfscope}')
        # Processing the call keyword arguments (line 640)
        kwargs_242586 = {}
        # Getting the type of 'writeln' (line 640)
        writeln_242582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 640)
        writeln_call_result_242587 = invoke(stypy.reporting.localization.Localization(__file__, 640, 8), writeln_242582, *[fh_242584, unicode_242585], **kwargs_242586)
        
        
        # Call to _print_pgf_clip(...): (line 641)
        # Processing the call arguments (line 641)
        # Getting the type of 'gc' (line 641)
        gc_242590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 29), 'gc', False)
        # Processing the call keyword arguments (line 641)
        kwargs_242591 = {}
        # Getting the type of 'self' (line 641)
        self_242588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 8), 'self', False)
        # Obtaining the member '_print_pgf_clip' of a type (line 641)
        _print_pgf_clip_242589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 8), self_242588, '_print_pgf_clip')
        # Calling _print_pgf_clip(args, kwargs) (line 641)
        _print_pgf_clip_call_result_242592 = invoke(stypy.reporting.localization.Localization(__file__, 641, 8), _print_pgf_clip_242589, *[gc_242590], **kwargs_242591)
        
        
        # Assigning a BinOp to a Name (line 642):
        
        # Assigning a BinOp to a Name (line 642):
        
        # Assigning a BinOp to a Name (line 642):
        float_242593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 12), 'float')
        # Getting the type of 'self' (line 642)
        self_242594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 17), 'self')
        # Obtaining the member 'dpi' of a type (line 642)
        dpi_242595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 642, 17), self_242594, 'dpi')
        # Applying the binary operator 'div' (line 642)
        result_div_242596 = python_operator(stypy.reporting.localization.Localization(__file__, 642, 12), 'div', float_242593, dpi_242595)
        
        # Assigning a type to the variable 'f' (line 642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 8), 'f', result_div_242596)
        
        # Type idiom detected: calculating its left and rigth part (line 643)
        # Getting the type of 'transform' (line 643)
        transform_242597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 11), 'transform')
        # Getting the type of 'None' (line 643)
        None_242598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 24), 'None')
        
        (may_be_242599, more_types_in_union_242600) = may_be_none(transform_242597, None_242598)

        if may_be_242599:

            if more_types_in_union_242600:
                # Runtime conditional SSA (line 643)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to writeln(...): (line 644)
            # Processing the call arguments (line 644)
            # Getting the type of 'self' (line 644)
            self_242602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 20), 'self', False)
            # Obtaining the member 'fh' of a type (line 644)
            fh_242603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 20), self_242602, 'fh')
            unicode_242604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, 20), 'unicode', u'\\pgfsys@transformshift{%fin}{%fin}')
            
            # Obtaining an instance of the builtin type 'tuple' (line 645)
            tuple_242605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, 61), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 645)
            # Adding element type (line 645)
            # Getting the type of 'x' (line 645)
            x_242606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 61), 'x', False)
            # Getting the type of 'f' (line 645)
            f_242607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 65), 'f', False)
            # Applying the binary operator '*' (line 645)
            result_mul_242608 = python_operator(stypy.reporting.localization.Localization(__file__, 645, 61), '*', x_242606, f_242607)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 645, 61), tuple_242605, result_mul_242608)
            # Adding element type (line 645)
            # Getting the type of 'y' (line 645)
            y_242609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 68), 'y', False)
            # Getting the type of 'f' (line 645)
            f_242610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 72), 'f', False)
            # Applying the binary operator '*' (line 645)
            result_mul_242611 = python_operator(stypy.reporting.localization.Localization(__file__, 645, 68), '*', y_242609, f_242610)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 645, 61), tuple_242605, result_mul_242611)
            
            # Applying the binary operator '%' (line 645)
            result_mod_242612 = python_operator(stypy.reporting.localization.Localization(__file__, 645, 20), '%', unicode_242604, tuple_242605)
            
            # Processing the call keyword arguments (line 644)
            kwargs_242613 = {}
            # Getting the type of 'writeln' (line 644)
            writeln_242601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 12), 'writeln', False)
            # Calling writeln(args, kwargs) (line 644)
            writeln_call_result_242614 = invoke(stypy.reporting.localization.Localization(__file__, 644, 12), writeln_242601, *[fh_242603, result_mod_242612], **kwargs_242613)
            
            
            # Assigning a Tuple to a Tuple (line 646):
            
            # Assigning a BinOp to a Name (line 646):
            
            # Assigning a BinOp to a Name (line 646):
            # Getting the type of 'w' (line 646)
            w_242615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 19), 'w')
            # Getting the type of 'f' (line 646)
            f_242616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 23), 'f')
            # Applying the binary operator '*' (line 646)
            result_mul_242617 = python_operator(stypy.reporting.localization.Localization(__file__, 646, 19), '*', w_242615, f_242616)
            
            # Assigning a type to the variable 'tuple_assignment_240291' (line 646)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 12), 'tuple_assignment_240291', result_mul_242617)
            
            # Assigning a BinOp to a Name (line 646):
            
            # Assigning a BinOp to a Name (line 646):
            # Getting the type of 'h' (line 646)
            h_242618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 26), 'h')
            # Getting the type of 'f' (line 646)
            f_242619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 30), 'f')
            # Applying the binary operator '*' (line 646)
            result_mul_242620 = python_operator(stypy.reporting.localization.Localization(__file__, 646, 26), '*', h_242618, f_242619)
            
            # Assigning a type to the variable 'tuple_assignment_240292' (line 646)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 12), 'tuple_assignment_240292', result_mul_242620)
            
            # Assigning a Name to a Name (line 646):
            
            # Assigning a Name to a Name (line 646):
            # Getting the type of 'tuple_assignment_240291' (line 646)
            tuple_assignment_240291_242621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 12), 'tuple_assignment_240291')
            # Assigning a type to the variable 'w' (line 646)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 12), 'w', tuple_assignment_240291_242621)
            
            # Assigning a Name to a Name (line 646):
            
            # Assigning a Name to a Name (line 646):
            # Getting the type of 'tuple_assignment_240292' (line 646)
            tuple_assignment_240292_242622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 12), 'tuple_assignment_240292')
            # Assigning a type to the variable 'h' (line 646)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 15), 'h', tuple_assignment_240292_242622)

            if more_types_in_union_242600:
                # Runtime conditional SSA for else branch (line 643)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_242599) or more_types_in_union_242600):
            
            # Assigning a Call to a Tuple (line 648):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to to_values(...): (line 648)
            # Processing the call keyword arguments (line 648)
            kwargs_242628 = {}
            
            # Call to frozen(...): (line 648)
            # Processing the call keyword arguments (line 648)
            kwargs_242625 = {}
            # Getting the type of 'transform' (line 648)
            transform_242623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 43), 'transform', False)
            # Obtaining the member 'frozen' of a type (line 648)
            frozen_242624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 43), transform_242623, 'frozen')
            # Calling frozen(args, kwargs) (line 648)
            frozen_call_result_242626 = invoke(stypy.reporting.localization.Localization(__file__, 648, 43), frozen_242624, *[], **kwargs_242625)
            
            # Obtaining the member 'to_values' of a type (line 648)
            to_values_242627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 43), frozen_call_result_242626, 'to_values')
            # Calling to_values(args, kwargs) (line 648)
            to_values_call_result_242629 = invoke(stypy.reporting.localization.Localization(__file__, 648, 43), to_values_242627, *[], **kwargs_242628)
            
            # Assigning a type to the variable 'call_assignment_240293' (line 648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240293', to_values_call_result_242629)
            
            # Assigning a Call to a Name (line 648):
            
            # Assigning a Call to a Name (line 648):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_242632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 12), 'int')
            # Processing the call keyword arguments
            kwargs_242633 = {}
            # Getting the type of 'call_assignment_240293' (line 648)
            call_assignment_240293_242630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240293', False)
            # Obtaining the member '__getitem__' of a type (line 648)
            getitem___242631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 12), call_assignment_240293_242630, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_242634 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242631, *[int_242632], **kwargs_242633)
            
            # Assigning a type to the variable 'call_assignment_240294' (line 648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240294', getitem___call_result_242634)
            
            # Assigning a Name to a Name (line 648):
            
            # Assigning a Name to a Name (line 648):
            # Getting the type of 'call_assignment_240294' (line 648)
            call_assignment_240294_242635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240294')
            # Assigning a type to the variable 'tr1' (line 648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'tr1', call_assignment_240294_242635)
            
            # Assigning a Call to a Name (line 648):
            
            # Assigning a Call to a Name (line 648):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_242638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 12), 'int')
            # Processing the call keyword arguments
            kwargs_242639 = {}
            # Getting the type of 'call_assignment_240293' (line 648)
            call_assignment_240293_242636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240293', False)
            # Obtaining the member '__getitem__' of a type (line 648)
            getitem___242637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 12), call_assignment_240293_242636, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_242640 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242637, *[int_242638], **kwargs_242639)
            
            # Assigning a type to the variable 'call_assignment_240295' (line 648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240295', getitem___call_result_242640)
            
            # Assigning a Name to a Name (line 648):
            
            # Assigning a Name to a Name (line 648):
            # Getting the type of 'call_assignment_240295' (line 648)
            call_assignment_240295_242641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240295')
            # Assigning a type to the variable 'tr2' (line 648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 17), 'tr2', call_assignment_240295_242641)
            
            # Assigning a Call to a Name (line 648):
            
            # Assigning a Call to a Name (line 648):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_242644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 12), 'int')
            # Processing the call keyword arguments
            kwargs_242645 = {}
            # Getting the type of 'call_assignment_240293' (line 648)
            call_assignment_240293_242642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240293', False)
            # Obtaining the member '__getitem__' of a type (line 648)
            getitem___242643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 12), call_assignment_240293_242642, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_242646 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242643, *[int_242644], **kwargs_242645)
            
            # Assigning a type to the variable 'call_assignment_240296' (line 648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240296', getitem___call_result_242646)
            
            # Assigning a Name to a Name (line 648):
            
            # Assigning a Name to a Name (line 648):
            # Getting the type of 'call_assignment_240296' (line 648)
            call_assignment_240296_242647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240296')
            # Assigning a type to the variable 'tr3' (line 648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 22), 'tr3', call_assignment_240296_242647)
            
            # Assigning a Call to a Name (line 648):
            
            # Assigning a Call to a Name (line 648):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_242650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 12), 'int')
            # Processing the call keyword arguments
            kwargs_242651 = {}
            # Getting the type of 'call_assignment_240293' (line 648)
            call_assignment_240293_242648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240293', False)
            # Obtaining the member '__getitem__' of a type (line 648)
            getitem___242649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 12), call_assignment_240293_242648, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_242652 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242649, *[int_242650], **kwargs_242651)
            
            # Assigning a type to the variable 'call_assignment_240297' (line 648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240297', getitem___call_result_242652)
            
            # Assigning a Name to a Name (line 648):
            
            # Assigning a Name to a Name (line 648):
            # Getting the type of 'call_assignment_240297' (line 648)
            call_assignment_240297_242653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240297')
            # Assigning a type to the variable 'tr4' (line 648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 27), 'tr4', call_assignment_240297_242653)
            
            # Assigning a Call to a Name (line 648):
            
            # Assigning a Call to a Name (line 648):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_242656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 12), 'int')
            # Processing the call keyword arguments
            kwargs_242657 = {}
            # Getting the type of 'call_assignment_240293' (line 648)
            call_assignment_240293_242654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240293', False)
            # Obtaining the member '__getitem__' of a type (line 648)
            getitem___242655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 12), call_assignment_240293_242654, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_242658 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242655, *[int_242656], **kwargs_242657)
            
            # Assigning a type to the variable 'call_assignment_240298' (line 648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240298', getitem___call_result_242658)
            
            # Assigning a Name to a Name (line 648):
            
            # Assigning a Name to a Name (line 648):
            # Getting the type of 'call_assignment_240298' (line 648)
            call_assignment_240298_242659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240298')
            # Assigning a type to the variable 'tr5' (line 648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 32), 'tr5', call_assignment_240298_242659)
            
            # Assigning a Call to a Name (line 648):
            
            # Assigning a Call to a Name (line 648):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_242662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 12), 'int')
            # Processing the call keyword arguments
            kwargs_242663 = {}
            # Getting the type of 'call_assignment_240293' (line 648)
            call_assignment_240293_242660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240293', False)
            # Obtaining the member '__getitem__' of a type (line 648)
            getitem___242661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 12), call_assignment_240293_242660, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_242664 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242661, *[int_242662], **kwargs_242663)
            
            # Assigning a type to the variable 'call_assignment_240299' (line 648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240299', getitem___call_result_242664)
            
            # Assigning a Name to a Name (line 648):
            
            # Assigning a Name to a Name (line 648):
            # Getting the type of 'call_assignment_240299' (line 648)
            call_assignment_240299_242665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 'call_assignment_240299')
            # Assigning a type to the variable 'tr6' (line 648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 37), 'tr6', call_assignment_240299_242665)
            
            # Call to writeln(...): (line 649)
            # Processing the call arguments (line 649)
            # Getting the type of 'self' (line 649)
            self_242667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 20), 'self', False)
            # Obtaining the member 'fh' of a type (line 649)
            fh_242668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 20), self_242667, 'fh')
            unicode_242669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 20), 'unicode', u'\\pgfsys@transformcm{%f}{%f}{%f}{%f}{%fin}{%fin}')
            
            # Obtaining an instance of the builtin type 'tuple' (line 651)
            tuple_242670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 21), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 651)
            # Adding element type (line 651)
            # Getting the type of 'tr1' (line 651)
            tr1_242671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 21), 'tr1', False)
            # Getting the type of 'f' (line 651)
            f_242672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 27), 'f', False)
            # Applying the binary operator '*' (line 651)
            result_mul_242673 = python_operator(stypy.reporting.localization.Localization(__file__, 651, 21), '*', tr1_242671, f_242672)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 651, 21), tuple_242670, result_mul_242673)
            # Adding element type (line 651)
            # Getting the type of 'tr2' (line 651)
            tr2_242674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 30), 'tr2', False)
            # Getting the type of 'f' (line 651)
            f_242675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 36), 'f', False)
            # Applying the binary operator '*' (line 651)
            result_mul_242676 = python_operator(stypy.reporting.localization.Localization(__file__, 651, 30), '*', tr2_242674, f_242675)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 651, 21), tuple_242670, result_mul_242676)
            # Adding element type (line 651)
            # Getting the type of 'tr3' (line 651)
            tr3_242677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 39), 'tr3', False)
            # Getting the type of 'f' (line 651)
            f_242678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 45), 'f', False)
            # Applying the binary operator '*' (line 651)
            result_mul_242679 = python_operator(stypy.reporting.localization.Localization(__file__, 651, 39), '*', tr3_242677, f_242678)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 651, 21), tuple_242670, result_mul_242679)
            # Adding element type (line 651)
            # Getting the type of 'tr4' (line 651)
            tr4_242680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 48), 'tr4', False)
            # Getting the type of 'f' (line 651)
            f_242681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 54), 'f', False)
            # Applying the binary operator '*' (line 651)
            result_mul_242682 = python_operator(stypy.reporting.localization.Localization(__file__, 651, 48), '*', tr4_242680, f_242681)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 651, 21), tuple_242670, result_mul_242682)
            # Adding element type (line 651)
            # Getting the type of 'tr5' (line 652)
            tr5_242683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 22), 'tr5', False)
            # Getting the type of 'x' (line 652)
            x_242684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 28), 'x', False)
            # Applying the binary operator '+' (line 652)
            result_add_242685 = python_operator(stypy.reporting.localization.Localization(__file__, 652, 22), '+', tr5_242683, x_242684)
            
            # Getting the type of 'f' (line 652)
            f_242686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 33), 'f', False)
            # Applying the binary operator '*' (line 652)
            result_mul_242687 = python_operator(stypy.reporting.localization.Localization(__file__, 652, 21), '*', result_add_242685, f_242686)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 651, 21), tuple_242670, result_mul_242687)
            # Adding element type (line 651)
            # Getting the type of 'tr6' (line 652)
            tr6_242688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 37), 'tr6', False)
            # Getting the type of 'y' (line 652)
            y_242689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 43), 'y', False)
            # Applying the binary operator '+' (line 652)
            result_add_242690 = python_operator(stypy.reporting.localization.Localization(__file__, 652, 37), '+', tr6_242688, y_242689)
            
            # Getting the type of 'f' (line 652)
            f_242691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 48), 'f', False)
            # Applying the binary operator '*' (line 652)
            result_mul_242692 = python_operator(stypy.reporting.localization.Localization(__file__, 652, 36), '*', result_add_242690, f_242691)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 651, 21), tuple_242670, result_mul_242692)
            
            # Applying the binary operator '%' (line 650)
            result_mod_242693 = python_operator(stypy.reporting.localization.Localization(__file__, 650, 20), '%', unicode_242669, tuple_242670)
            
            # Processing the call keyword arguments (line 649)
            kwargs_242694 = {}
            # Getting the type of 'writeln' (line 649)
            writeln_242666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 12), 'writeln', False)
            # Calling writeln(args, kwargs) (line 649)
            writeln_call_result_242695 = invoke(stypy.reporting.localization.Localization(__file__, 649, 12), writeln_242666, *[fh_242668, result_mod_242693], **kwargs_242694)
            
            
            # Multiple assignment of 2 elements.
            
            # Assigning a Num to a Name (line 653):
            
            # Assigning a Num to a Name (line 653):
            int_242696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 653, 20), 'int')
            # Assigning a type to the variable 'h' (line 653)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 653, 16), 'h', int_242696)
            
            # Assigning a Name to a Name (line 653):
            
            # Assigning a Name to a Name (line 653):
            # Getting the type of 'h' (line 653)
            h_242697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 16), 'h')
            # Assigning a type to the variable 'w' (line 653)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 653, 12), 'w', h_242697)

            if (may_be_242599 and more_types_in_union_242600):
                # SSA join for if statement (line 643)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 654):
        
        # Assigning a Call to a Name (line 654):
        
        # Assigning a Call to a Name (line 654):
        
        # Call to lower(...): (line 654)
        # Processing the call keyword arguments (line 654)
        kwargs_242705 = {}
        
        # Call to str(...): (line 654)
        # Processing the call arguments (line 654)
        
        # Getting the type of 'transform' (line 654)
        transform_242699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 21), 'transform', False)
        # Getting the type of 'None' (line 654)
        None_242700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 34), 'None', False)
        # Applying the binary operator 'is' (line 654)
        result_is__242701 = python_operator(stypy.reporting.localization.Localization(__file__, 654, 21), 'is', transform_242699, None_242700)
        
        # Processing the call keyword arguments (line 654)
        kwargs_242702 = {}
        # Getting the type of 'str' (line 654)
        str_242698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 17), 'str', False)
        # Calling str(args, kwargs) (line 654)
        str_call_result_242703 = invoke(stypy.reporting.localization.Localization(__file__, 654, 17), str_242698, *[result_is__242701], **kwargs_242702)
        
        # Obtaining the member 'lower' of a type (line 654)
        lower_242704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 17), str_call_result_242703, 'lower')
        # Calling lower(args, kwargs) (line 654)
        lower_call_result_242706 = invoke(stypy.reporting.localization.Localization(__file__, 654, 17), lower_242704, *[], **kwargs_242705)
        
        # Assigning a type to the variable 'interp' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 8), 'interp', lower_call_result_242706)
        
        # Call to writeln(...): (line 655)
        # Processing the call arguments (line 655)
        # Getting the type of 'self' (line 655)
        self_242708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 655)
        fh_242709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 16), self_242708, 'fh')
        unicode_242710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 16), 'unicode', u'\\pgftext[left,bottom]{\\pgfimage[interpolate=%s,width=%fin,height=%fin]{%s}}')
        
        # Obtaining an instance of the builtin type 'tuple' (line 658)
        tuple_242711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 658)
        # Adding element type (line 658)
        # Getting the type of 'interp' (line 658)
        interp_242712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 17), 'interp', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 658, 17), tuple_242711, interp_242712)
        # Adding element type (line 658)
        # Getting the type of 'w' (line 658)
        w_242713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 25), 'w', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 658, 17), tuple_242711, w_242713)
        # Adding element type (line 658)
        # Getting the type of 'h' (line 658)
        h_242714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 28), 'h', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 658, 17), tuple_242711, h_242714)
        # Adding element type (line 658)
        # Getting the type of 'fname_img' (line 658)
        fname_img_242715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 31), 'fname_img', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 658, 17), tuple_242711, fname_img_242715)
        
        # Applying the binary operator '%' (line 656)
        result_mod_242716 = python_operator(stypy.reporting.localization.Localization(__file__, 656, 16), '%', unicode_242710, tuple_242711)
        
        # Processing the call keyword arguments (line 655)
        kwargs_242717 = {}
        # Getting the type of 'writeln' (line 655)
        writeln_242707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 655)
        writeln_call_result_242718 = invoke(stypy.reporting.localization.Localization(__file__, 655, 8), writeln_242707, *[fh_242709, result_mod_242716], **kwargs_242717)
        
        
        # Call to writeln(...): (line 659)
        # Processing the call arguments (line 659)
        # Getting the type of 'self' (line 659)
        self_242720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 659)
        fh_242721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 16), self_242720, 'fh')
        unicode_242722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 659, 25), 'unicode', u'\\end{pgfscope}')
        # Processing the call keyword arguments (line 659)
        kwargs_242723 = {}
        # Getting the type of 'writeln' (line 659)
        writeln_242719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 659)
        writeln_call_result_242724 = invoke(stypy.reporting.localization.Localization(__file__, 659, 8), writeln_242719, *[fh_242721, unicode_242722], **kwargs_242723)
        
        
        # ################# End of 'draw_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_image' in the type store
        # Getting the type of 'stypy_return_type' (line 627)
        stypy_return_type_242725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_242725)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_image'
        return stypy_return_type_242725


    @norecursion
    def draw_tex(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_242726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 661, 56), 'unicode', u'TeX!')
        # Getting the type of 'None' (line 661)
        None_242727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 70), 'None')
        defaults = [unicode_242726, None_242727]
        # Create a new context for function 'draw_tex'
        module_type_store = module_type_store.open_function_context('draw_tex', 661, 4, False)
        # Assigning a type to the variable 'self' (line 662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf.draw_tex.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf.draw_tex.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf.draw_tex.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf.draw_tex.__dict__.__setitem__('stypy_function_name', 'RendererPgf.draw_tex')
        RendererPgf.draw_tex.__dict__.__setitem__('stypy_param_names_list', ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'])
        RendererPgf.draw_tex.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf.draw_tex.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf.draw_tex.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf.draw_tex.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf.draw_tex.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf.draw_tex.__dict__.__setitem__('stypy_declared_arg_number', 9)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf.draw_tex', ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_tex', localization, ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_tex(...)' code ##################

        
        # Call to draw_text(...): (line 662)
        # Processing the call arguments (line 662)
        # Getting the type of 'gc' (line 662)
        gc_242730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 23), 'gc', False)
        # Getting the type of 'x' (line 662)
        x_242731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 27), 'x', False)
        # Getting the type of 'y' (line 662)
        y_242732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 30), 'y', False)
        # Getting the type of 's' (line 662)
        s_242733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 33), 's', False)
        # Getting the type of 'prop' (line 662)
        prop_242734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 36), 'prop', False)
        # Getting the type of 'angle' (line 662)
        angle_242735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 42), 'angle', False)
        # Getting the type of 'ismath' (line 662)
        ismath_242736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 49), 'ismath', False)
        # Getting the type of 'mtext' (line 662)
        mtext_242737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 57), 'mtext', False)
        # Processing the call keyword arguments (line 662)
        kwargs_242738 = {}
        # Getting the type of 'self' (line 662)
        self_242728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'self', False)
        # Obtaining the member 'draw_text' of a type (line 662)
        draw_text_242729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 8), self_242728, 'draw_text')
        # Calling draw_text(args, kwargs) (line 662)
        draw_text_call_result_242739 = invoke(stypy.reporting.localization.Localization(__file__, 662, 8), draw_text_242729, *[gc_242730, x_242731, y_242732, s_242733, prop_242734, angle_242735, ismath_242736, mtext_242737], **kwargs_242738)
        
        
        # ################# End of 'draw_tex(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_tex' in the type store
        # Getting the type of 'stypy_return_type' (line 661)
        stypy_return_type_242740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_242740)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_tex'
        return stypy_return_type_242740


    @norecursion
    def draw_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 664)
        False_242741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 57), 'False')
        # Getting the type of 'None' (line 664)
        None_242742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 70), 'None')
        defaults = [False_242741, None_242742]
        # Create a new context for function 'draw_text'
        module_type_store = module_type_store.open_function_context('draw_text', 664, 4, False)
        # Assigning a type to the variable 'self' (line 665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf.draw_text.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf.draw_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf.draw_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf.draw_text.__dict__.__setitem__('stypy_function_name', 'RendererPgf.draw_text')
        RendererPgf.draw_text.__dict__.__setitem__('stypy_param_names_list', ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'])
        RendererPgf.draw_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf.draw_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf.draw_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf.draw_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf.draw_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf.draw_text.__dict__.__setitem__('stypy_declared_arg_number', 9)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf.draw_text', ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_text', localization, ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_text(...)' code ##################

        
        # Assigning a Call to a Name (line 666):
        
        # Assigning a Call to a Name (line 666):
        
        # Assigning a Call to a Name (line 666):
        
        # Call to common_texification(...): (line 666)
        # Processing the call arguments (line 666)
        # Getting the type of 's' (line 666)
        s_242744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 32), 's', False)
        # Processing the call keyword arguments (line 666)
        kwargs_242745 = {}
        # Getting the type of 'common_texification' (line 666)
        common_texification_242743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 12), 'common_texification', False)
        # Calling common_texification(args, kwargs) (line 666)
        common_texification_call_result_242746 = invoke(stypy.reporting.localization.Localization(__file__, 666, 12), common_texification_242743, *[s_242744], **kwargs_242745)
        
        # Assigning a type to the variable 's' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 8), 's', common_texification_call_result_242746)
        
        # Assigning a Call to a Name (line 667):
        
        # Assigning a Call to a Name (line 667):
        
        # Assigning a Call to a Name (line 667):
        
        # Call to _font_properties_str(...): (line 667)
        # Processing the call arguments (line 667)
        # Getting the type of 'prop' (line 667)
        prop_242748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 41), 'prop', False)
        # Processing the call keyword arguments (line 667)
        kwargs_242749 = {}
        # Getting the type of '_font_properties_str' (line 667)
        _font_properties_str_242747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 20), '_font_properties_str', False)
        # Calling _font_properties_str(args, kwargs) (line 667)
        _font_properties_str_call_result_242750 = invoke(stypy.reporting.localization.Localization(__file__, 667, 20), _font_properties_str_242747, *[prop_242748], **kwargs_242749)
        
        # Assigning a type to the variable 'prop_cmds' (line 667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 8), 'prop_cmds', _font_properties_str_call_result_242750)
        
        # Assigning a BinOp to a Name (line 668):
        
        # Assigning a BinOp to a Name (line 668):
        
        # Assigning a BinOp to a Name (line 668):
        unicode_242751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, 12), 'unicode', u'%s %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 668)
        tuple_242752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 668)
        # Adding element type (line 668)
        # Getting the type of 'prop_cmds' (line 668)
        prop_cmds_242753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 24), 'prop_cmds')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 668, 24), tuple_242752, prop_cmds_242753)
        # Adding element type (line 668)
        # Getting the type of 's' (line 668)
        s_242754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 35), 's')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 668, 24), tuple_242752, s_242754)
        
        # Applying the binary operator '%' (line 668)
        result_mod_242755 = python_operator(stypy.reporting.localization.Localization(__file__, 668, 12), '%', unicode_242751, tuple_242752)
        
        # Assigning a type to the variable 's' (line 668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 668, 8), 's', result_mod_242755)
        
        # Call to writeln(...): (line 671)
        # Processing the call arguments (line 671)
        # Getting the type of 'self' (line 671)
        self_242757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 671)
        fh_242758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 16), self_242757, 'fh')
        unicode_242759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 671, 25), 'unicode', u'\\begin{pgfscope}')
        # Processing the call keyword arguments (line 671)
        kwargs_242760 = {}
        # Getting the type of 'writeln' (line 671)
        writeln_242756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 671)
        writeln_call_result_242761 = invoke(stypy.reporting.localization.Localization(__file__, 671, 8), writeln_242756, *[fh_242758, unicode_242759], **kwargs_242760)
        
        
        # Assigning a Call to a Name (line 673):
        
        # Assigning a Call to a Name (line 673):
        
        # Assigning a Call to a Name (line 673):
        
        # Call to get_alpha(...): (line 673)
        # Processing the call keyword arguments (line 673)
        kwargs_242764 = {}
        # Getting the type of 'gc' (line 673)
        gc_242762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 16), 'gc', False)
        # Obtaining the member 'get_alpha' of a type (line 673)
        get_alpha_242763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 16), gc_242762, 'get_alpha')
        # Calling get_alpha(args, kwargs) (line 673)
        get_alpha_call_result_242765 = invoke(stypy.reporting.localization.Localization(__file__, 673, 16), get_alpha_242763, *[], **kwargs_242764)
        
        # Assigning a type to the variable 'alpha' (line 673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), 'alpha', get_alpha_call_result_242765)
        
        
        # Getting the type of 'alpha' (line 674)
        alpha_242766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 11), 'alpha')
        float_242767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, 20), 'float')
        # Applying the binary operator '!=' (line 674)
        result_ne_242768 = python_operator(stypy.reporting.localization.Localization(__file__, 674, 11), '!=', alpha_242766, float_242767)
        
        # Testing the type of an if condition (line 674)
        if_condition_242769 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 674, 8), result_ne_242768)
        # Assigning a type to the variable 'if_condition_242769' (line 674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 8), 'if_condition_242769', if_condition_242769)
        # SSA begins for if statement (line 674)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to writeln(...): (line 675)
        # Processing the call arguments (line 675)
        # Getting the type of 'self' (line 675)
        self_242771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 675)
        fh_242772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 20), self_242771, 'fh')
        unicode_242773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 29), 'unicode', u'\\pgfsetfillopacity{%f}')
        # Getting the type of 'alpha' (line 675)
        alpha_242774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 57), 'alpha', False)
        # Applying the binary operator '%' (line 675)
        result_mod_242775 = python_operator(stypy.reporting.localization.Localization(__file__, 675, 29), '%', unicode_242773, alpha_242774)
        
        # Processing the call keyword arguments (line 675)
        kwargs_242776 = {}
        # Getting the type of 'writeln' (line 675)
        writeln_242770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 675)
        writeln_call_result_242777 = invoke(stypy.reporting.localization.Localization(__file__, 675, 12), writeln_242770, *[fh_242772, result_mod_242775], **kwargs_242776)
        
        
        # Call to writeln(...): (line 676)
        # Processing the call arguments (line 676)
        # Getting the type of 'self' (line 676)
        self_242779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 676)
        fh_242780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 20), self_242779, 'fh')
        unicode_242781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 29), 'unicode', u'\\pgfsetstrokeopacity{%f}')
        # Getting the type of 'alpha' (line 676)
        alpha_242782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 59), 'alpha', False)
        # Applying the binary operator '%' (line 676)
        result_mod_242783 = python_operator(stypy.reporting.localization.Localization(__file__, 676, 29), '%', unicode_242781, alpha_242782)
        
        # Processing the call keyword arguments (line 676)
        kwargs_242784 = {}
        # Getting the type of 'writeln' (line 676)
        writeln_242778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 676)
        writeln_call_result_242785 = invoke(stypy.reporting.localization.Localization(__file__, 676, 12), writeln_242778, *[fh_242780, result_mod_242783], **kwargs_242784)
        
        # SSA join for if statement (line 674)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 677):
        
        # Assigning a Subscript to a Name (line 677):
        
        # Assigning a Subscript to a Name (line 677):
        
        # Obtaining the type of the subscript
        int_242786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 677, 35), 'int')
        slice_242787 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 677, 14), None, int_242786, None)
        
        # Call to tuple(...): (line 677)
        # Processing the call arguments (line 677)
        
        # Call to get_rgb(...): (line 677)
        # Processing the call keyword arguments (line 677)
        kwargs_242791 = {}
        # Getting the type of 'gc' (line 677)
        gc_242789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 20), 'gc', False)
        # Obtaining the member 'get_rgb' of a type (line 677)
        get_rgb_242790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 677, 20), gc_242789, 'get_rgb')
        # Calling get_rgb(args, kwargs) (line 677)
        get_rgb_call_result_242792 = invoke(stypy.reporting.localization.Localization(__file__, 677, 20), get_rgb_242790, *[], **kwargs_242791)
        
        # Processing the call keyword arguments (line 677)
        kwargs_242793 = {}
        # Getting the type of 'tuple' (line 677)
        tuple_242788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 14), 'tuple', False)
        # Calling tuple(args, kwargs) (line 677)
        tuple_call_result_242794 = invoke(stypy.reporting.localization.Localization(__file__, 677, 14), tuple_242788, *[get_rgb_call_result_242792], **kwargs_242793)
        
        # Obtaining the member '__getitem__' of a type (line 677)
        getitem___242795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 677, 14), tuple_call_result_242794, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 677)
        subscript_call_result_242796 = invoke(stypy.reporting.localization.Localization(__file__, 677, 14), getitem___242795, slice_242787)
        
        # Assigning a type to the variable 'rgb' (line 677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 8), 'rgb', subscript_call_result_242796)
        
        
        # Getting the type of 'rgb' (line 678)
        rgb_242797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 11), 'rgb')
        
        # Obtaining an instance of the builtin type 'tuple' (line 678)
        tuple_242798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 678)
        # Adding element type (line 678)
        int_242799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 678, 19), tuple_242798, int_242799)
        # Adding element type (line 678)
        int_242800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 678, 19), tuple_242798, int_242800)
        # Adding element type (line 678)
        int_242801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 678, 19), tuple_242798, int_242801)
        
        # Applying the binary operator '!=' (line 678)
        result_ne_242802 = python_operator(stypy.reporting.localization.Localization(__file__, 678, 11), '!=', rgb_242797, tuple_242798)
        
        # Testing the type of an if condition (line 678)
        if_condition_242803 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 678, 8), result_ne_242802)
        # Assigning a type to the variable 'if_condition_242803' (line 678)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 678, 8), 'if_condition_242803', if_condition_242803)
        # SSA begins for if statement (line 678)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to writeln(...): (line 679)
        # Processing the call arguments (line 679)
        # Getting the type of 'self' (line 679)
        self_242805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 679)
        fh_242806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 20), self_242805, 'fh')
        unicode_242807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 29), 'unicode', u'\\definecolor{textcolor}{rgb}{%f,%f,%f}')
        # Getting the type of 'rgb' (line 679)
        rgb_242808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 73), 'rgb', False)
        # Applying the binary operator '%' (line 679)
        result_mod_242809 = python_operator(stypy.reporting.localization.Localization(__file__, 679, 29), '%', unicode_242807, rgb_242808)
        
        # Processing the call keyword arguments (line 679)
        kwargs_242810 = {}
        # Getting the type of 'writeln' (line 679)
        writeln_242804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 679)
        writeln_call_result_242811 = invoke(stypy.reporting.localization.Localization(__file__, 679, 12), writeln_242804, *[fh_242806, result_mod_242809], **kwargs_242810)
        
        
        # Call to writeln(...): (line 680)
        # Processing the call arguments (line 680)
        # Getting the type of 'self' (line 680)
        self_242813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 680)
        fh_242814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 20), self_242813, 'fh')
        unicode_242815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 680, 29), 'unicode', u'\\pgfsetstrokecolor{textcolor}')
        # Processing the call keyword arguments (line 680)
        kwargs_242816 = {}
        # Getting the type of 'writeln' (line 680)
        writeln_242812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 680)
        writeln_call_result_242817 = invoke(stypy.reporting.localization.Localization(__file__, 680, 12), writeln_242812, *[fh_242814, unicode_242815], **kwargs_242816)
        
        
        # Call to writeln(...): (line 681)
        # Processing the call arguments (line 681)
        # Getting the type of 'self' (line 681)
        self_242819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 20), 'self', False)
        # Obtaining the member 'fh' of a type (line 681)
        fh_242820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 20), self_242819, 'fh')
        unicode_242821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 681, 29), 'unicode', u'\\pgfsetfillcolor{textcolor}')
        # Processing the call keyword arguments (line 681)
        kwargs_242822 = {}
        # Getting the type of 'writeln' (line 681)
        writeln_242818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 12), 'writeln', False)
        # Calling writeln(args, kwargs) (line 681)
        writeln_call_result_242823 = invoke(stypy.reporting.localization.Localization(__file__, 681, 12), writeln_242818, *[fh_242820, unicode_242821], **kwargs_242822)
        
        
        # Assigning a BinOp to a Name (line 682):
        
        # Assigning a BinOp to a Name (line 682):
        
        # Assigning a BinOp to a Name (line 682):
        unicode_242824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 16), 'unicode', u'\\color{textcolor}')
        # Getting the type of 's' (line 682)
        s_242825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 39), 's')
        # Applying the binary operator '+' (line 682)
        result_add_242826 = python_operator(stypy.reporting.localization.Localization(__file__, 682, 16), '+', unicode_242824, s_242825)
        
        # Assigning a type to the variable 's' (line 682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 12), 's', result_add_242826)
        # SSA join for if statement (line 678)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 684):
        
        # Assigning a BinOp to a Name (line 684):
        
        # Assigning a BinOp to a Name (line 684):
        float_242827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 684, 12), 'float')
        # Getting the type of 'self' (line 684)
        self_242828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 18), 'self')
        # Obtaining the member 'figure' of a type (line 684)
        figure_242829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 18), self_242828, 'figure')
        # Obtaining the member 'dpi' of a type (line 684)
        dpi_242830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 18), figure_242829, 'dpi')
        # Applying the binary operator 'div' (line 684)
        result_div_242831 = python_operator(stypy.reporting.localization.Localization(__file__, 684, 12), 'div', float_242827, dpi_242830)
        
        # Assigning a type to the variable 'f' (line 684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 684, 8), 'f', result_div_242831)
        
        # Assigning a List to a Name (line 685):
        
        # Assigning a List to a Name (line 685):
        
        # Assigning a List to a Name (line 685):
        
        # Obtaining an instance of the builtin type 'list' (line 685)
        list_242832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 685)
        
        # Assigning a type to the variable 'text_args' (line 685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 8), 'text_args', list_242832)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'mtext' (line 686)
        mtext_242833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 11), 'mtext')
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        # Getting the type of 'angle' (line 687)
        angle_242834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 17), 'angle')
        int_242835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 26), 'int')
        # Applying the binary operator '==' (line 687)
        result_eq_242836 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 17), '==', angle_242834, int_242835)
        
        
        
        # Call to get_rotation_mode(...): (line 688)
        # Processing the call keyword arguments (line 688)
        kwargs_242839 = {}
        # Getting the type of 'mtext' (line 688)
        mtext_242837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 17), 'mtext', False)
        # Obtaining the member 'get_rotation_mode' of a type (line 688)
        get_rotation_mode_242838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 17), mtext_242837, 'get_rotation_mode')
        # Calling get_rotation_mode(args, kwargs) (line 688)
        get_rotation_mode_call_result_242840 = invoke(stypy.reporting.localization.Localization(__file__, 688, 17), get_rotation_mode_242838, *[], **kwargs_242839)
        
        unicode_242841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 46), 'unicode', u'anchor')
        # Applying the binary operator '==' (line 688)
        result_eq_242842 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 17), '==', get_rotation_mode_call_result_242840, unicode_242841)
        
        # Applying the binary operator 'or' (line 687)
        result_or_keyword_242843 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 17), 'or', result_eq_242836, result_eq_242842)
        
        
        
        # Call to get_va(...): (line 689)
        # Processing the call keyword arguments (line 689)
        kwargs_242846 = {}
        # Getting the type of 'mtext' (line 689)
        mtext_242844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 16), 'mtext', False)
        # Obtaining the member 'get_va' of a type (line 689)
        get_va_242845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 16), mtext_242844, 'get_va')
        # Calling get_va(args, kwargs) (line 689)
        get_va_call_result_242847 = invoke(stypy.reporting.localization.Localization(__file__, 689, 16), get_va_242845, *[], **kwargs_242846)
        
        unicode_242848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, 34), 'unicode', u'center_baseline')
        # Applying the binary operator '!=' (line 689)
        result_ne_242849 = python_operator(stypy.reporting.localization.Localization(__file__, 689, 16), '!=', get_va_call_result_242847, unicode_242848)
        
        # Applying the binary operator 'and' (line 687)
        result_and_keyword_242850 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 16), 'and', result_or_keyword_242843, result_ne_242849)
        
        # Applying the binary operator 'and' (line 686)
        result_and_keyword_242851 = python_operator(stypy.reporting.localization.Localization(__file__, 686, 11), 'and', mtext_242833, result_and_keyword_242850)
        
        # Testing the type of an if condition (line 686)
        if_condition_242852 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 686, 8), result_and_keyword_242851)
        # Assigning a type to the variable 'if_condition_242852' (line 686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 686, 8), 'if_condition_242852', if_condition_242852)
        # SSA begins for if statement (line 686)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 692):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 692)
        # Processing the call arguments (line 692)
        
        # Call to get_position(...): (line 692)
        # Processing the call keyword arguments (line 692)
        kwargs_242860 = {}
        # Getting the type of 'mtext' (line 692)
        mtext_242858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 57), 'mtext', False)
        # Obtaining the member 'get_position' of a type (line 692)
        get_position_242859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 57), mtext_242858, 'get_position')
        # Calling get_position(args, kwargs) (line 692)
        get_position_call_result_242861 = invoke(stypy.reporting.localization.Localization(__file__, 692, 57), get_position_242859, *[], **kwargs_242860)
        
        # Processing the call keyword arguments (line 692)
        kwargs_242862 = {}
        
        # Call to get_transform(...): (line 692)
        # Processing the call keyword arguments (line 692)
        kwargs_242855 = {}
        # Getting the type of 'mtext' (line 692)
        mtext_242853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 19), 'mtext', False)
        # Obtaining the member 'get_transform' of a type (line 692)
        get_transform_242854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 19), mtext_242853, 'get_transform')
        # Calling get_transform(args, kwargs) (line 692)
        get_transform_call_result_242856 = invoke(stypy.reporting.localization.Localization(__file__, 692, 19), get_transform_242854, *[], **kwargs_242855)
        
        # Obtaining the member 'transform_point' of a type (line 692)
        transform_point_242857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 19), get_transform_call_result_242856, 'transform_point')
        # Calling transform_point(args, kwargs) (line 692)
        transform_point_call_result_242863 = invoke(stypy.reporting.localization.Localization(__file__, 692, 19), transform_point_242857, *[get_position_call_result_242861], **kwargs_242862)
        
        # Assigning a type to the variable 'call_assignment_240300' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'call_assignment_240300', transform_point_call_result_242863)
        
        # Assigning a Call to a Name (line 692):
        
        # Assigning a Call to a Name (line 692):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 12), 'int')
        # Processing the call keyword arguments
        kwargs_242867 = {}
        # Getting the type of 'call_assignment_240300' (line 692)
        call_assignment_240300_242864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'call_assignment_240300', False)
        # Obtaining the member '__getitem__' of a type (line 692)
        getitem___242865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 12), call_assignment_240300_242864, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242868 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242865, *[int_242866], **kwargs_242867)
        
        # Assigning a type to the variable 'call_assignment_240301' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'call_assignment_240301', getitem___call_result_242868)
        
        # Assigning a Name to a Name (line 692):
        
        # Assigning a Name to a Name (line 692):
        # Getting the type of 'call_assignment_240301' (line 692)
        call_assignment_240301_242869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'call_assignment_240301')
        # Assigning a type to the variable 'x' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'x', call_assignment_240301_242869)
        
        # Assigning a Call to a Name (line 692):
        
        # Assigning a Call to a Name (line 692):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_242872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 12), 'int')
        # Processing the call keyword arguments
        kwargs_242873 = {}
        # Getting the type of 'call_assignment_240300' (line 692)
        call_assignment_240300_242870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'call_assignment_240300', False)
        # Obtaining the member '__getitem__' of a type (line 692)
        getitem___242871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 12), call_assignment_240300_242870, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_242874 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___242871, *[int_242872], **kwargs_242873)
        
        # Assigning a type to the variable 'call_assignment_240302' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'call_assignment_240302', getitem___call_result_242874)
        
        # Assigning a Name to a Name (line 692):
        
        # Assigning a Name to a Name (line 692):
        # Getting the type of 'call_assignment_240302' (line 692)
        call_assignment_240302_242875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'call_assignment_240302')
        # Assigning a type to the variable 'y' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 15), 'y', call_assignment_240302_242875)
        
        # Call to append(...): (line 693)
        # Processing the call arguments (line 693)
        unicode_242878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 29), 'unicode', u'x=%fin')
        # Getting the type of 'x' (line 693)
        x_242879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 41), 'x', False)
        # Getting the type of 'f' (line 693)
        f_242880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 45), 'f', False)
        # Applying the binary operator '*' (line 693)
        result_mul_242881 = python_operator(stypy.reporting.localization.Localization(__file__, 693, 41), '*', x_242879, f_242880)
        
        # Applying the binary operator '%' (line 693)
        result_mod_242882 = python_operator(stypy.reporting.localization.Localization(__file__, 693, 29), '%', unicode_242878, result_mul_242881)
        
        # Processing the call keyword arguments (line 693)
        kwargs_242883 = {}
        # Getting the type of 'text_args' (line 693)
        text_args_242876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 12), 'text_args', False)
        # Obtaining the member 'append' of a type (line 693)
        append_242877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 693, 12), text_args_242876, 'append')
        # Calling append(args, kwargs) (line 693)
        append_call_result_242884 = invoke(stypy.reporting.localization.Localization(__file__, 693, 12), append_242877, *[result_mod_242882], **kwargs_242883)
        
        
        # Call to append(...): (line 694)
        # Processing the call arguments (line 694)
        unicode_242887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 694, 29), 'unicode', u'y=%fin')
        # Getting the type of 'y' (line 694)
        y_242888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 41), 'y', False)
        # Getting the type of 'f' (line 694)
        f_242889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 45), 'f', False)
        # Applying the binary operator '*' (line 694)
        result_mul_242890 = python_operator(stypy.reporting.localization.Localization(__file__, 694, 41), '*', y_242888, f_242889)
        
        # Applying the binary operator '%' (line 694)
        result_mod_242891 = python_operator(stypy.reporting.localization.Localization(__file__, 694, 29), '%', unicode_242887, result_mul_242890)
        
        # Processing the call keyword arguments (line 694)
        kwargs_242892 = {}
        # Getting the type of 'text_args' (line 694)
        text_args_242885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 12), 'text_args', False)
        # Obtaining the member 'append' of a type (line 694)
        append_242886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 12), text_args_242885, 'append')
        # Calling append(args, kwargs) (line 694)
        append_call_result_242893 = invoke(stypy.reporting.localization.Localization(__file__, 694, 12), append_242886, *[result_mod_242891], **kwargs_242892)
        
        
        # Assigning a Dict to a Name (line 696):
        
        # Assigning a Dict to a Name (line 696):
        
        # Assigning a Dict to a Name (line 696):
        
        # Obtaining an instance of the builtin type 'dict' (line 696)
        dict_242894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 21), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 696)
        # Adding element type (key, value) (line 696)
        unicode_242895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 22), 'unicode', u'left')
        unicode_242896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 30), 'unicode', u'left')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 696, 21), dict_242894, (unicode_242895, unicode_242896))
        # Adding element type (key, value) (line 696)
        unicode_242897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 38), 'unicode', u'right')
        unicode_242898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 47), 'unicode', u'right')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 696, 21), dict_242894, (unicode_242897, unicode_242898))
        # Adding element type (key, value) (line 696)
        unicode_242899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 56), 'unicode', u'center')
        unicode_242900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 66), 'unicode', u'')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 696, 21), dict_242894, (unicode_242899, unicode_242900))
        
        # Assigning a type to the variable 'halign' (line 696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 12), 'halign', dict_242894)
        
        # Assigning a Dict to a Name (line 697):
        
        # Assigning a Dict to a Name (line 697):
        
        # Assigning a Dict to a Name (line 697):
        
        # Obtaining an instance of the builtin type 'dict' (line 697)
        dict_242901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 21), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 697)
        # Adding element type (key, value) (line 697)
        unicode_242902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 22), 'unicode', u'top')
        unicode_242903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 29), 'unicode', u'top')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 697, 21), dict_242901, (unicode_242902, unicode_242903))
        # Adding element type (key, value) (line 697)
        unicode_242904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 36), 'unicode', u'bottom')
        unicode_242905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 46), 'unicode', u'bottom')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 697, 21), dict_242901, (unicode_242904, unicode_242905))
        # Adding element type (key, value) (line 697)
        unicode_242906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 22), 'unicode', u'baseline')
        unicode_242907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 34), 'unicode', u'base')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 697, 21), dict_242901, (unicode_242906, unicode_242907))
        # Adding element type (key, value) (line 697)
        unicode_242908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 42), 'unicode', u'center')
        unicode_242909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 52), 'unicode', u'')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 697, 21), dict_242901, (unicode_242908, unicode_242909))
        
        # Assigning a type to the variable 'valign' (line 697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 12), 'valign', dict_242901)
        
        # Call to append(...): (line 699)
        # Processing the call arguments (line 699)
        
        # Obtaining the type of the subscript
        
        # Call to get_ha(...): (line 699)
        # Processing the call keyword arguments (line 699)
        kwargs_242914 = {}
        # Getting the type of 'mtext' (line 699)
        mtext_242912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 36), 'mtext', False)
        # Obtaining the member 'get_ha' of a type (line 699)
        get_ha_242913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 36), mtext_242912, 'get_ha')
        # Calling get_ha(args, kwargs) (line 699)
        get_ha_call_result_242915 = invoke(stypy.reporting.localization.Localization(__file__, 699, 36), get_ha_242913, *[], **kwargs_242914)
        
        # Getting the type of 'halign' (line 699)
        halign_242916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 29), 'halign', False)
        # Obtaining the member '__getitem__' of a type (line 699)
        getitem___242917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 29), halign_242916, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 699)
        subscript_call_result_242918 = invoke(stypy.reporting.localization.Localization(__file__, 699, 29), getitem___242917, get_ha_call_result_242915)
        
        # Processing the call keyword arguments (line 699)
        kwargs_242919 = {}
        # Getting the type of 'text_args' (line 699)
        text_args_242910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 12), 'text_args', False)
        # Obtaining the member 'append' of a type (line 699)
        append_242911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 12), text_args_242910, 'append')
        # Calling append(args, kwargs) (line 699)
        append_call_result_242920 = invoke(stypy.reporting.localization.Localization(__file__, 699, 12), append_242911, *[subscript_call_result_242918], **kwargs_242919)
        
        
        # Call to append(...): (line 700)
        # Processing the call arguments (line 700)
        
        # Obtaining the type of the subscript
        
        # Call to get_va(...): (line 700)
        # Processing the call keyword arguments (line 700)
        kwargs_242925 = {}
        # Getting the type of 'mtext' (line 700)
        mtext_242923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 36), 'mtext', False)
        # Obtaining the member 'get_va' of a type (line 700)
        get_va_242924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 36), mtext_242923, 'get_va')
        # Calling get_va(args, kwargs) (line 700)
        get_va_call_result_242926 = invoke(stypy.reporting.localization.Localization(__file__, 700, 36), get_va_242924, *[], **kwargs_242925)
        
        # Getting the type of 'valign' (line 700)
        valign_242927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 29), 'valign', False)
        # Obtaining the member '__getitem__' of a type (line 700)
        getitem___242928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 29), valign_242927, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 700)
        subscript_call_result_242929 = invoke(stypy.reporting.localization.Localization(__file__, 700, 29), getitem___242928, get_va_call_result_242926)
        
        # Processing the call keyword arguments (line 700)
        kwargs_242930 = {}
        # Getting the type of 'text_args' (line 700)
        text_args_242921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 12), 'text_args', False)
        # Obtaining the member 'append' of a type (line 700)
        append_242922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 12), text_args_242921, 'append')
        # Calling append(args, kwargs) (line 700)
        append_call_result_242931 = invoke(stypy.reporting.localization.Localization(__file__, 700, 12), append_242922, *[subscript_call_result_242929], **kwargs_242930)
        
        # SSA branch for the else part of an if statement (line 686)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 703)
        # Processing the call arguments (line 703)
        unicode_242934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 29), 'unicode', u'x=%fin')
        # Getting the type of 'x' (line 703)
        x_242935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 41), 'x', False)
        # Getting the type of 'f' (line 703)
        f_242936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 45), 'f', False)
        # Applying the binary operator '*' (line 703)
        result_mul_242937 = python_operator(stypy.reporting.localization.Localization(__file__, 703, 41), '*', x_242935, f_242936)
        
        # Applying the binary operator '%' (line 703)
        result_mod_242938 = python_operator(stypy.reporting.localization.Localization(__file__, 703, 29), '%', unicode_242934, result_mul_242937)
        
        # Processing the call keyword arguments (line 703)
        kwargs_242939 = {}
        # Getting the type of 'text_args' (line 703)
        text_args_242932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 12), 'text_args', False)
        # Obtaining the member 'append' of a type (line 703)
        append_242933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 12), text_args_242932, 'append')
        # Calling append(args, kwargs) (line 703)
        append_call_result_242940 = invoke(stypy.reporting.localization.Localization(__file__, 703, 12), append_242933, *[result_mod_242938], **kwargs_242939)
        
        
        # Call to append(...): (line 704)
        # Processing the call arguments (line 704)
        unicode_242943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 29), 'unicode', u'y=%fin')
        # Getting the type of 'y' (line 704)
        y_242944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 41), 'y', False)
        # Getting the type of 'f' (line 704)
        f_242945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 45), 'f', False)
        # Applying the binary operator '*' (line 704)
        result_mul_242946 = python_operator(stypy.reporting.localization.Localization(__file__, 704, 41), '*', y_242944, f_242945)
        
        # Applying the binary operator '%' (line 704)
        result_mod_242947 = python_operator(stypy.reporting.localization.Localization(__file__, 704, 29), '%', unicode_242943, result_mul_242946)
        
        # Processing the call keyword arguments (line 704)
        kwargs_242948 = {}
        # Getting the type of 'text_args' (line 704)
        text_args_242941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'text_args', False)
        # Obtaining the member 'append' of a type (line 704)
        append_242942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 12), text_args_242941, 'append')
        # Calling append(args, kwargs) (line 704)
        append_call_result_242949 = invoke(stypy.reporting.localization.Localization(__file__, 704, 12), append_242942, *[result_mod_242947], **kwargs_242948)
        
        
        # Call to append(...): (line 705)
        # Processing the call arguments (line 705)
        unicode_242952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 29), 'unicode', u'left')
        # Processing the call keyword arguments (line 705)
        kwargs_242953 = {}
        # Getting the type of 'text_args' (line 705)
        text_args_242950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 12), 'text_args', False)
        # Obtaining the member 'append' of a type (line 705)
        append_242951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 12), text_args_242950, 'append')
        # Calling append(args, kwargs) (line 705)
        append_call_result_242954 = invoke(stypy.reporting.localization.Localization(__file__, 705, 12), append_242951, *[unicode_242952], **kwargs_242953)
        
        
        # Call to append(...): (line 706)
        # Processing the call arguments (line 706)
        unicode_242957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 706, 29), 'unicode', u'base')
        # Processing the call keyword arguments (line 706)
        kwargs_242958 = {}
        # Getting the type of 'text_args' (line 706)
        text_args_242955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 12), 'text_args', False)
        # Obtaining the member 'append' of a type (line 706)
        append_242956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 12), text_args_242955, 'append')
        # Calling append(args, kwargs) (line 706)
        append_call_result_242959 = invoke(stypy.reporting.localization.Localization(__file__, 706, 12), append_242956, *[unicode_242957], **kwargs_242958)
        
        # SSA join for if statement (line 686)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'angle' (line 708)
        angle_242960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 11), 'angle')
        int_242961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 20), 'int')
        # Applying the binary operator '!=' (line 708)
        result_ne_242962 = python_operator(stypy.reporting.localization.Localization(__file__, 708, 11), '!=', angle_242960, int_242961)
        
        # Testing the type of an if condition (line 708)
        if_condition_242963 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 708, 8), result_ne_242962)
        # Assigning a type to the variable 'if_condition_242963' (line 708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 8), 'if_condition_242963', if_condition_242963)
        # SSA begins for if statement (line 708)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 709)
        # Processing the call arguments (line 709)
        unicode_242966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 709, 29), 'unicode', u'rotate=%f')
        # Getting the type of 'angle' (line 709)
        angle_242967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 43), 'angle', False)
        # Applying the binary operator '%' (line 709)
        result_mod_242968 = python_operator(stypy.reporting.localization.Localization(__file__, 709, 29), '%', unicode_242966, angle_242967)
        
        # Processing the call keyword arguments (line 709)
        kwargs_242969 = {}
        # Getting the type of 'text_args' (line 709)
        text_args_242964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 12), 'text_args', False)
        # Obtaining the member 'append' of a type (line 709)
        append_242965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 12), text_args_242964, 'append')
        # Calling append(args, kwargs) (line 709)
        append_call_result_242970 = invoke(stypy.reporting.localization.Localization(__file__, 709, 12), append_242965, *[result_mod_242968], **kwargs_242969)
        
        # SSA join for if statement (line 708)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to writeln(...): (line 711)
        # Processing the call arguments (line 711)
        # Getting the type of 'self' (line 711)
        self_242972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 711)
        fh_242973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 16), self_242972, 'fh')
        unicode_242974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 25), 'unicode', u'\\pgftext[%s]{%s}')
        
        # Obtaining an instance of the builtin type 'tuple' (line 711)
        tuple_242975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 48), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 711)
        # Adding element type (line 711)
        
        # Call to join(...): (line 711)
        # Processing the call arguments (line 711)
        # Getting the type of 'text_args' (line 711)
        text_args_242978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 57), 'text_args', False)
        # Processing the call keyword arguments (line 711)
        kwargs_242979 = {}
        unicode_242976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 48), 'unicode', u',')
        # Obtaining the member 'join' of a type (line 711)
        join_242977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 48), unicode_242976, 'join')
        # Calling join(args, kwargs) (line 711)
        join_call_result_242980 = invoke(stypy.reporting.localization.Localization(__file__, 711, 48), join_242977, *[text_args_242978], **kwargs_242979)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 48), tuple_242975, join_call_result_242980)
        # Adding element type (line 711)
        # Getting the type of 's' (line 711)
        s_242981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 69), 's', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 48), tuple_242975, s_242981)
        
        # Applying the binary operator '%' (line 711)
        result_mod_242982 = python_operator(stypy.reporting.localization.Localization(__file__, 711, 25), '%', unicode_242974, tuple_242975)
        
        # Processing the call keyword arguments (line 711)
        kwargs_242983 = {}
        # Getting the type of 'writeln' (line 711)
        writeln_242971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 711)
        writeln_call_result_242984 = invoke(stypy.reporting.localization.Localization(__file__, 711, 8), writeln_242971, *[fh_242973, result_mod_242982], **kwargs_242983)
        
        
        # Call to writeln(...): (line 712)
        # Processing the call arguments (line 712)
        # Getting the type of 'self' (line 712)
        self_242986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 16), 'self', False)
        # Obtaining the member 'fh' of a type (line 712)
        fh_242987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 16), self_242986, 'fh')
        unicode_242988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 25), 'unicode', u'\\end{pgfscope}')
        # Processing the call keyword arguments (line 712)
        kwargs_242989 = {}
        # Getting the type of 'writeln' (line 712)
        writeln_242985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 712)
        writeln_call_result_242990 = invoke(stypy.reporting.localization.Localization(__file__, 712, 8), writeln_242985, *[fh_242987, unicode_242988], **kwargs_242989)
        
        
        # ################# End of 'draw_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_text' in the type store
        # Getting the type of 'stypy_return_type' (line 664)
        stypy_return_type_242991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_242991)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_text'
        return stypy_return_type_242991


    @norecursion
    def get_text_width_height_descent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_text_width_height_descent'
        module_type_store = module_type_store.open_function_context('get_text_width_height_descent', 714, 4, False)
        # Assigning a type to the variable 'self' (line 715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf.get_text_width_height_descent.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf.get_text_width_height_descent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf.get_text_width_height_descent.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf.get_text_width_height_descent.__dict__.__setitem__('stypy_function_name', 'RendererPgf.get_text_width_height_descent')
        RendererPgf.get_text_width_height_descent.__dict__.__setitem__('stypy_param_names_list', ['s', 'prop', 'ismath'])
        RendererPgf.get_text_width_height_descent.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf.get_text_width_height_descent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf.get_text_width_height_descent.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf.get_text_width_height_descent.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf.get_text_width_height_descent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf.get_text_width_height_descent.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf.get_text_width_height_descent', ['s', 'prop', 'ismath'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_text_width_height_descent', localization, ['s', 'prop', 'ismath'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_text_width_height_descent(...)' code ##################

        
        # Assigning a Call to a Name (line 716):
        
        # Assigning a Call to a Name (line 716):
        
        # Assigning a Call to a Name (line 716):
        
        # Call to common_texification(...): (line 716)
        # Processing the call arguments (line 716)
        # Getting the type of 's' (line 716)
        s_242993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 32), 's', False)
        # Processing the call keyword arguments (line 716)
        kwargs_242994 = {}
        # Getting the type of 'common_texification' (line 716)
        common_texification_242992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 12), 'common_texification', False)
        # Calling common_texification(args, kwargs) (line 716)
        common_texification_call_result_242995 = invoke(stypy.reporting.localization.Localization(__file__, 716, 12), common_texification_242992, *[s_242993], **kwargs_242994)
        
        # Assigning a type to the variable 's' (line 716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 8), 's', common_texification_call_result_242995)
        
        # Assigning a Call to a Tuple (line 719):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_width_height_descent(...): (line 719)
        # Processing the call arguments (line 719)
        # Getting the type of 's' (line 719)
        s_242999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 61), 's', False)
        # Getting the type of 'prop' (line 719)
        prop_243000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 64), 'prop', False)
        # Processing the call keyword arguments (line 719)
        kwargs_243001 = {}
        # Getting the type of 'self' (line 719)
        self_242996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 18), 'self', False)
        # Obtaining the member 'latexManager' of a type (line 719)
        latexManager_242997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 18), self_242996, 'latexManager')
        # Obtaining the member 'get_width_height_descent' of a type (line 719)
        get_width_height_descent_242998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 18), latexManager_242997, 'get_width_height_descent')
        # Calling get_width_height_descent(args, kwargs) (line 719)
        get_width_height_descent_call_result_243002 = invoke(stypy.reporting.localization.Localization(__file__, 719, 18), get_width_height_descent_242998, *[s_242999, prop_243000], **kwargs_243001)
        
        # Assigning a type to the variable 'call_assignment_240303' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'call_assignment_240303', get_width_height_descent_call_result_243002)
        
        # Assigning a Call to a Name (line 719):
        
        # Assigning a Call to a Name (line 719):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_243005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 8), 'int')
        # Processing the call keyword arguments
        kwargs_243006 = {}
        # Getting the type of 'call_assignment_240303' (line 719)
        call_assignment_240303_243003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'call_assignment_240303', False)
        # Obtaining the member '__getitem__' of a type (line 719)
        getitem___243004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 8), call_assignment_240303_243003, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_243007 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___243004, *[int_243005], **kwargs_243006)
        
        # Assigning a type to the variable 'call_assignment_240304' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'call_assignment_240304', getitem___call_result_243007)
        
        # Assigning a Name to a Name (line 719):
        
        # Assigning a Name to a Name (line 719):
        # Getting the type of 'call_assignment_240304' (line 719)
        call_assignment_240304_243008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'call_assignment_240304')
        # Assigning a type to the variable 'w' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'w', call_assignment_240304_243008)
        
        # Assigning a Call to a Name (line 719):
        
        # Assigning a Call to a Name (line 719):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_243011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 8), 'int')
        # Processing the call keyword arguments
        kwargs_243012 = {}
        # Getting the type of 'call_assignment_240303' (line 719)
        call_assignment_240303_243009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'call_assignment_240303', False)
        # Obtaining the member '__getitem__' of a type (line 719)
        getitem___243010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 8), call_assignment_240303_243009, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_243013 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___243010, *[int_243011], **kwargs_243012)
        
        # Assigning a type to the variable 'call_assignment_240305' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'call_assignment_240305', getitem___call_result_243013)
        
        # Assigning a Name to a Name (line 719):
        
        # Assigning a Name to a Name (line 719):
        # Getting the type of 'call_assignment_240305' (line 719)
        call_assignment_240305_243014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'call_assignment_240305')
        # Assigning a type to the variable 'h' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 11), 'h', call_assignment_240305_243014)
        
        # Assigning a Call to a Name (line 719):
        
        # Assigning a Call to a Name (line 719):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_243017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 8), 'int')
        # Processing the call keyword arguments
        kwargs_243018 = {}
        # Getting the type of 'call_assignment_240303' (line 719)
        call_assignment_240303_243015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'call_assignment_240303', False)
        # Obtaining the member '__getitem__' of a type (line 719)
        getitem___243016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 8), call_assignment_240303_243015, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_243019 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___243016, *[int_243017], **kwargs_243018)
        
        # Assigning a type to the variable 'call_assignment_240306' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'call_assignment_240306', getitem___call_result_243019)
        
        # Assigning a Name to a Name (line 719):
        
        # Assigning a Name to a Name (line 719):
        # Getting the type of 'call_assignment_240306' (line 719)
        call_assignment_240306_243020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'call_assignment_240306')
        # Assigning a type to the variable 'd' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 14), 'd', call_assignment_240306_243020)
        
        # Assigning a BinOp to a Name (line 723):
        
        # Assigning a BinOp to a Name (line 723):
        
        # Assigning a BinOp to a Name (line 723):
        # Getting the type of 'mpl_pt_to_in' (line 723)
        mpl_pt_to_in_243021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 12), 'mpl_pt_to_in')
        # Getting the type of 'self' (line 723)
        self_243022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 27), 'self')
        # Obtaining the member 'dpi' of a type (line 723)
        dpi_243023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 27), self_243022, 'dpi')
        # Applying the binary operator '*' (line 723)
        result_mul_243024 = python_operator(stypy.reporting.localization.Localization(__file__, 723, 12), '*', mpl_pt_to_in_243021, dpi_243023)
        
        # Assigning a type to the variable 'f' (line 723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 8), 'f', result_mul_243024)
        
        # Obtaining an instance of the builtin type 'tuple' (line 724)
        tuple_243025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 724, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 724)
        # Adding element type (line 724)
        # Getting the type of 'w' (line 724)
        w_243026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 15), 'w')
        # Getting the type of 'f' (line 724)
        f_243027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 19), 'f')
        # Applying the binary operator '*' (line 724)
        result_mul_243028 = python_operator(stypy.reporting.localization.Localization(__file__, 724, 15), '*', w_243026, f_243027)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 724, 15), tuple_243025, result_mul_243028)
        # Adding element type (line 724)
        # Getting the type of 'h' (line 724)
        h_243029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 22), 'h')
        # Getting the type of 'f' (line 724)
        f_243030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 26), 'f')
        # Applying the binary operator '*' (line 724)
        result_mul_243031 = python_operator(stypy.reporting.localization.Localization(__file__, 724, 22), '*', h_243029, f_243030)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 724, 15), tuple_243025, result_mul_243031)
        # Adding element type (line 724)
        # Getting the type of 'd' (line 724)
        d_243032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 29), 'd')
        # Getting the type of 'f' (line 724)
        f_243033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 33), 'f')
        # Applying the binary operator '*' (line 724)
        result_mul_243034 = python_operator(stypy.reporting.localization.Localization(__file__, 724, 29), '*', d_243032, f_243033)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 724, 15), tuple_243025, result_mul_243034)
        
        # Assigning a type to the variable 'stypy_return_type' (line 724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 724, 8), 'stypy_return_type', tuple_243025)
        
        # ################# End of 'get_text_width_height_descent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_text_width_height_descent' in the type store
        # Getting the type of 'stypy_return_type' (line 714)
        stypy_return_type_243035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243035)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_text_width_height_descent'
        return stypy_return_type_243035


    @norecursion
    def flipy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'flipy'
        module_type_store = module_type_store.open_function_context('flipy', 726, 4, False)
        # Assigning a type to the variable 'self' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf.flipy.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf.flipy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf.flipy.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf.flipy.__dict__.__setitem__('stypy_function_name', 'RendererPgf.flipy')
        RendererPgf.flipy.__dict__.__setitem__('stypy_param_names_list', [])
        RendererPgf.flipy.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf.flipy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf.flipy.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf.flipy.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf.flipy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf.flipy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf.flipy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'flipy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'flipy(...)' code ##################

        # Getting the type of 'False' (line 727)
        False_243036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'stypy_return_type', False_243036)
        
        # ################# End of 'flipy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'flipy' in the type store
        # Getting the type of 'stypy_return_type' (line 726)
        stypy_return_type_243037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243037)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'flipy'
        return stypy_return_type_243037


    @norecursion
    def get_canvas_width_height(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_canvas_width_height'
        module_type_store = module_type_store.open_function_context('get_canvas_width_height', 729, 4, False)
        # Assigning a type to the variable 'self' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf.get_canvas_width_height.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf.get_canvas_width_height.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf.get_canvas_width_height.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf.get_canvas_width_height.__dict__.__setitem__('stypy_function_name', 'RendererPgf.get_canvas_width_height')
        RendererPgf.get_canvas_width_height.__dict__.__setitem__('stypy_param_names_list', [])
        RendererPgf.get_canvas_width_height.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf.get_canvas_width_height.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf.get_canvas_width_height.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf.get_canvas_width_height.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf.get_canvas_width_height.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf.get_canvas_width_height.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf.get_canvas_width_height', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_canvas_width_height', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_canvas_width_height(...)' code ##################

        
        # Obtaining an instance of the builtin type 'tuple' (line 730)
        tuple_243038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 730, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 730)
        # Adding element type (line 730)
        
        # Call to get_figwidth(...): (line 730)
        # Processing the call keyword arguments (line 730)
        kwargs_243042 = {}
        # Getting the type of 'self' (line 730)
        self_243039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 15), 'self', False)
        # Obtaining the member 'figure' of a type (line 730)
        figure_243040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 15), self_243039, 'figure')
        # Obtaining the member 'get_figwidth' of a type (line 730)
        get_figwidth_243041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 15), figure_243040, 'get_figwidth')
        # Calling get_figwidth(args, kwargs) (line 730)
        get_figwidth_call_result_243043 = invoke(stypy.reporting.localization.Localization(__file__, 730, 15), get_figwidth_243041, *[], **kwargs_243042)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 730, 15), tuple_243038, get_figwidth_call_result_243043)
        # Adding element type (line 730)
        
        # Call to get_figheight(...): (line 730)
        # Processing the call keyword arguments (line 730)
        kwargs_243047 = {}
        # Getting the type of 'self' (line 730)
        self_243044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 43), 'self', False)
        # Obtaining the member 'figure' of a type (line 730)
        figure_243045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 43), self_243044, 'figure')
        # Obtaining the member 'get_figheight' of a type (line 730)
        get_figheight_243046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 43), figure_243045, 'get_figheight')
        # Calling get_figheight(args, kwargs) (line 730)
        get_figheight_call_result_243048 = invoke(stypy.reporting.localization.Localization(__file__, 730, 43), get_figheight_243046, *[], **kwargs_243047)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 730, 15), tuple_243038, get_figheight_call_result_243048)
        
        # Assigning a type to the variable 'stypy_return_type' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 8), 'stypy_return_type', tuple_243038)
        
        # ################# End of 'get_canvas_width_height(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_canvas_width_height' in the type store
        # Getting the type of 'stypy_return_type' (line 729)
        stypy_return_type_243049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243049)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_canvas_width_height'
        return stypy_return_type_243049


    @norecursion
    def points_to_pixels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'points_to_pixels'
        module_type_store = module_type_store.open_function_context('points_to_pixels', 732, 4, False)
        # Assigning a type to the variable 'self' (line 733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf.points_to_pixels.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf.points_to_pixels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf.points_to_pixels.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf.points_to_pixels.__dict__.__setitem__('stypy_function_name', 'RendererPgf.points_to_pixels')
        RendererPgf.points_to_pixels.__dict__.__setitem__('stypy_param_names_list', ['points'])
        RendererPgf.points_to_pixels.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf.points_to_pixels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf.points_to_pixels.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf.points_to_pixels.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf.points_to_pixels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf.points_to_pixels.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf.points_to_pixels', ['points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'points_to_pixels', localization, ['points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'points_to_pixels(...)' code ##################

        # Getting the type of 'points' (line 733)
        points_243050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 15), 'points')
        # Getting the type of 'mpl_pt_to_in' (line 733)
        mpl_pt_to_in_243051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 24), 'mpl_pt_to_in')
        # Applying the binary operator '*' (line 733)
        result_mul_243052 = python_operator(stypy.reporting.localization.Localization(__file__, 733, 15), '*', points_243050, mpl_pt_to_in_243051)
        
        # Getting the type of 'self' (line 733)
        self_243053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 39), 'self')
        # Obtaining the member 'dpi' of a type (line 733)
        dpi_243054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 39), self_243053, 'dpi')
        # Applying the binary operator '*' (line 733)
        result_mul_243055 = python_operator(stypy.reporting.localization.Localization(__file__, 733, 37), '*', result_mul_243052, dpi_243054)
        
        # Assigning a type to the variable 'stypy_return_type' (line 733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 8), 'stypy_return_type', result_mul_243055)
        
        # ################# End of 'points_to_pixels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'points_to_pixels' in the type store
        # Getting the type of 'stypy_return_type' (line 732)
        stypy_return_type_243056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243056)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'points_to_pixels'
        return stypy_return_type_243056


    @norecursion
    def new_gc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_gc'
        module_type_store = module_type_store.open_function_context('new_gc', 735, 4, False)
        # Assigning a type to the variable 'self' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererPgf.new_gc.__dict__.__setitem__('stypy_localization', localization)
        RendererPgf.new_gc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererPgf.new_gc.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererPgf.new_gc.__dict__.__setitem__('stypy_function_name', 'RendererPgf.new_gc')
        RendererPgf.new_gc.__dict__.__setitem__('stypy_param_names_list', [])
        RendererPgf.new_gc.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererPgf.new_gc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererPgf.new_gc.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererPgf.new_gc.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererPgf.new_gc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererPgf.new_gc.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererPgf.new_gc', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_gc', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_gc(...)' code ##################

        
        # Call to GraphicsContextPgf(...): (line 736)
        # Processing the call keyword arguments (line 736)
        kwargs_243058 = {}
        # Getting the type of 'GraphicsContextPgf' (line 736)
        GraphicsContextPgf_243057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 15), 'GraphicsContextPgf', False)
        # Calling GraphicsContextPgf(args, kwargs) (line 736)
        GraphicsContextPgf_call_result_243059 = invoke(stypy.reporting.localization.Localization(__file__, 736, 15), GraphicsContextPgf_243057, *[], **kwargs_243058)
        
        # Assigning a type to the variable 'stypy_return_type' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 8), 'stypy_return_type', GraphicsContextPgf_call_result_243059)
        
        # ################# End of 'new_gc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_gc' in the type store
        # Getting the type of 'stypy_return_type' (line 735)
        stypy_return_type_243060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243060)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_gc'
        return stypy_return_type_243060


# Assigning a type to the variable 'RendererPgf' (line 398)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 0), 'RendererPgf', RendererPgf)
# Declaration of the 'GraphicsContextPgf' class
# Getting the type of 'GraphicsContextBase' (line 739)
GraphicsContextBase_243061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 25), 'GraphicsContextBase')

class GraphicsContextPgf(GraphicsContextBase_243061, ):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 739, 0, False)
        # Assigning a type to the variable 'self' (line 740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 740, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextPgf.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'GraphicsContextPgf' (line 739)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 0), 'GraphicsContextPgf', GraphicsContextPgf)
# Declaration of the 'TmpDirCleaner' class

class TmpDirCleaner(object, ):
    
    # Assigning a Call to a Name (line 746):
    
    # Assigning a Call to a Name (line 746):

    @staticmethod
    @norecursion
    def add(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add'
        module_type_store = module_type_store.open_function_context('add', 748, 4, False)
        
        # Passed parameters checking function
        TmpDirCleaner.add.__dict__.__setitem__('stypy_localization', localization)
        TmpDirCleaner.add.__dict__.__setitem__('stypy_type_of_self', None)
        TmpDirCleaner.add.__dict__.__setitem__('stypy_type_store', module_type_store)
        TmpDirCleaner.add.__dict__.__setitem__('stypy_function_name', 'add')
        TmpDirCleaner.add.__dict__.__setitem__('stypy_param_names_list', ['tmpdir'])
        TmpDirCleaner.add.__dict__.__setitem__('stypy_varargs_param_name', None)
        TmpDirCleaner.add.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TmpDirCleaner.add.__dict__.__setitem__('stypy_call_defaults', defaults)
        TmpDirCleaner.add.__dict__.__setitem__('stypy_call_varargs', varargs)
        TmpDirCleaner.add.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TmpDirCleaner.add.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, 'add', ['tmpdir'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add(...)' code ##################

        
        # Call to add(...): (line 750)
        # Processing the call arguments (line 750)
        # Getting the type of 'tmpdir' (line 750)
        tmpdir_243065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 44), 'tmpdir', False)
        # Processing the call keyword arguments (line 750)
        kwargs_243066 = {}
        # Getting the type of 'TmpDirCleaner' (line 750)
        TmpDirCleaner_243062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 8), 'TmpDirCleaner', False)
        # Obtaining the member 'remaining_tmpdirs' of a type (line 750)
        remaining_tmpdirs_243063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 8), TmpDirCleaner_243062, 'remaining_tmpdirs')
        # Obtaining the member 'add' of a type (line 750)
        add_243064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 8), remaining_tmpdirs_243063, 'add')
        # Calling add(args, kwargs) (line 750)
        add_call_result_243067 = invoke(stypy.reporting.localization.Localization(__file__, 750, 8), add_243064, *[tmpdir_243065], **kwargs_243066)
        
        
        # ################# End of 'add(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add' in the type store
        # Getting the type of 'stypy_return_type' (line 748)
        stypy_return_type_243068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243068)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add'
        return stypy_return_type_243068


    @staticmethod
    @norecursion
    def cleanup_remaining_tmpdirs(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'cleanup_remaining_tmpdirs'
        module_type_store = module_type_store.open_function_context('cleanup_remaining_tmpdirs', 752, 4, False)
        
        # Passed parameters checking function
        TmpDirCleaner.cleanup_remaining_tmpdirs.__dict__.__setitem__('stypy_localization', localization)
        TmpDirCleaner.cleanup_remaining_tmpdirs.__dict__.__setitem__('stypy_type_of_self', None)
        TmpDirCleaner.cleanup_remaining_tmpdirs.__dict__.__setitem__('stypy_type_store', module_type_store)
        TmpDirCleaner.cleanup_remaining_tmpdirs.__dict__.__setitem__('stypy_function_name', 'cleanup_remaining_tmpdirs')
        TmpDirCleaner.cleanup_remaining_tmpdirs.__dict__.__setitem__('stypy_param_names_list', [])
        TmpDirCleaner.cleanup_remaining_tmpdirs.__dict__.__setitem__('stypy_varargs_param_name', None)
        TmpDirCleaner.cleanup_remaining_tmpdirs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TmpDirCleaner.cleanup_remaining_tmpdirs.__dict__.__setitem__('stypy_call_defaults', defaults)
        TmpDirCleaner.cleanup_remaining_tmpdirs.__dict__.__setitem__('stypy_call_varargs', varargs)
        TmpDirCleaner.cleanup_remaining_tmpdirs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TmpDirCleaner.cleanup_remaining_tmpdirs.__dict__.__setitem__('stypy_declared_arg_number', 0)
        arguments = process_argument_values(localization, None, module_type_store, 'cleanup_remaining_tmpdirs', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cleanup_remaining_tmpdirs', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cleanup_remaining_tmpdirs(...)' code ##################

        
        # Getting the type of 'TmpDirCleaner' (line 754)
        TmpDirCleaner_243069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 22), 'TmpDirCleaner')
        # Obtaining the member 'remaining_tmpdirs' of a type (line 754)
        remaining_tmpdirs_243070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 22), TmpDirCleaner_243069, 'remaining_tmpdirs')
        # Testing the type of a for loop iterable (line 754)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 754, 8), remaining_tmpdirs_243070)
        # Getting the type of the for loop variable (line 754)
        for_loop_var_243071 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 754, 8), remaining_tmpdirs_243070)
        # Assigning a type to the variable 'tmpdir' (line 754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 8), 'tmpdir', for_loop_var_243071)
        # SSA begins for a for statement (line 754)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # SSA begins for try-except statement (line 755)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to rmtree(...): (line 756)
        # Processing the call arguments (line 756)
        # Getting the type of 'tmpdir' (line 756)
        tmpdir_243074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 30), 'tmpdir', False)
        # Processing the call keyword arguments (line 756)
        kwargs_243075 = {}
        # Getting the type of 'shutil' (line 756)
        shutil_243072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 16), 'shutil', False)
        # Obtaining the member 'rmtree' of a type (line 756)
        rmtree_243073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 16), shutil_243072, 'rmtree')
        # Calling rmtree(args, kwargs) (line 756)
        rmtree_call_result_243076 = invoke(stypy.reporting.localization.Localization(__file__, 756, 16), rmtree_243073, *[tmpdir_243074], **kwargs_243075)
        
        # SSA branch for the except part of a try statement (line 755)
        # SSA branch for the except '<any exception>' branch of a try statement (line 755)
        module_type_store.open_ssa_branch('except')
        
        # Call to write(...): (line 758)
        # Processing the call arguments (line 758)
        unicode_243080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 33), 'unicode', u'error deleting tmp directory %s\n')
        # Getting the type of 'tmpdir' (line 758)
        tmpdir_243081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 71), 'tmpdir', False)
        # Applying the binary operator '%' (line 758)
        result_mod_243082 = python_operator(stypy.reporting.localization.Localization(__file__, 758, 33), '%', unicode_243080, tmpdir_243081)
        
        # Processing the call keyword arguments (line 758)
        kwargs_243083 = {}
        # Getting the type of 'sys' (line 758)
        sys_243077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 16), 'sys', False)
        # Obtaining the member 'stderr' of a type (line 758)
        stderr_243078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 16), sys_243077, 'stderr')
        # Obtaining the member 'write' of a type (line 758)
        write_243079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 16), stderr_243078, 'write')
        # Calling write(args, kwargs) (line 758)
        write_call_result_243084 = invoke(stypy.reporting.localization.Localization(__file__, 758, 16), write_243079, *[result_mod_243082], **kwargs_243083)
        
        # SSA join for try-except statement (line 755)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'cleanup_remaining_tmpdirs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cleanup_remaining_tmpdirs' in the type store
        # Getting the type of 'stypy_return_type' (line 752)
        stypy_return_type_243085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243085)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cleanup_remaining_tmpdirs'
        return stypy_return_type_243085


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 745, 0, False)
        # Assigning a type to the variable 'self' (line 746)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TmpDirCleaner.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'TmpDirCleaner' (line 745)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 745, 0), 'TmpDirCleaner', TmpDirCleaner)

# Assigning a Call to a Name (line 746):

# Call to set(...): (line 746)
# Processing the call keyword arguments (line 746)
kwargs_243087 = {}
# Getting the type of 'set' (line 746)
set_243086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 24), 'set', False)
# Calling set(args, kwargs) (line 746)
set_call_result_243088 = invoke(stypy.reporting.localization.Localization(__file__, 746, 24), set_243086, *[], **kwargs_243087)

# Getting the type of 'TmpDirCleaner'
TmpDirCleaner_243089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TmpDirCleaner')
# Setting the type of the member 'remaining_tmpdirs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TmpDirCleaner_243089, 'remaining_tmpdirs', set_call_result_243088)
# Declaration of the 'FigureCanvasPgf' class
# Getting the type of 'FigureCanvasBase' (line 761)
FigureCanvasBase_243090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 22), 'FigureCanvasBase')

class FigureCanvasPgf(FigureCanvasBase_243090, ):
    
    # Assigning a Dict to a Name (line 762):
    
    # Assigning a Dict to a Name (line 762):

    @norecursion
    def get_default_filetype(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_default_filetype'
        module_type_store = module_type_store.open_function_context('get_default_filetype', 766, 4, False)
        # Assigning a type to the variable 'self' (line 767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasPgf.get_default_filetype.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasPgf.get_default_filetype.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasPgf.get_default_filetype.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasPgf.get_default_filetype.__dict__.__setitem__('stypy_function_name', 'FigureCanvasPgf.get_default_filetype')
        FigureCanvasPgf.get_default_filetype.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasPgf.get_default_filetype.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasPgf.get_default_filetype.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasPgf.get_default_filetype.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasPgf.get_default_filetype.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasPgf.get_default_filetype.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasPgf.get_default_filetype.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasPgf.get_default_filetype', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_default_filetype', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_default_filetype(...)' code ##################

        unicode_243091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 15), 'unicode', u'pdf')
        # Assigning a type to the variable 'stypy_return_type' (line 767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 8), 'stypy_return_type', unicode_243091)
        
        # ################# End of 'get_default_filetype(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_default_filetype' in the type store
        # Getting the type of 'stypy_return_type' (line 766)
        stypy_return_type_243092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243092)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_default_filetype'
        return stypy_return_type_243092


    @norecursion
    def _print_pgf_to_fh(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_print_pgf_to_fh'
        module_type_store = module_type_store.open_function_context('_print_pgf_to_fh', 769, 4, False)
        # Assigning a type to the variable 'self' (line 770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasPgf._print_pgf_to_fh.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasPgf._print_pgf_to_fh.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasPgf._print_pgf_to_fh.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasPgf._print_pgf_to_fh.__dict__.__setitem__('stypy_function_name', 'FigureCanvasPgf._print_pgf_to_fh')
        FigureCanvasPgf._print_pgf_to_fh.__dict__.__setitem__('stypy_param_names_list', ['fh'])
        FigureCanvasPgf._print_pgf_to_fh.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasPgf._print_pgf_to_fh.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasPgf._print_pgf_to_fh.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasPgf._print_pgf_to_fh.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasPgf._print_pgf_to_fh.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasPgf._print_pgf_to_fh.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasPgf._print_pgf_to_fh', ['fh'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_print_pgf_to_fh', localization, ['fh'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_print_pgf_to_fh(...)' code ##################

        
        
        # Call to get(...): (line 770)
        # Processing the call arguments (line 770)
        unicode_243095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 22), 'unicode', u'dryrun')
        # Getting the type of 'False' (line 770)
        False_243096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 32), 'False', False)
        # Processing the call keyword arguments (line 770)
        kwargs_243097 = {}
        # Getting the type of 'kwargs' (line 770)
        kwargs_243093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 11), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 770)
        get_243094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 11), kwargs_243093, 'get')
        # Calling get(args, kwargs) (line 770)
        get_call_result_243098 = invoke(stypy.reporting.localization.Localization(__file__, 770, 11), get_243094, *[unicode_243095, False_243096], **kwargs_243097)
        
        # Testing the type of an if condition (line 770)
        if_condition_243099 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 770, 8), get_call_result_243098)
        # Assigning a type to the variable 'if_condition_243099' (line 770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 8), 'if_condition_243099', if_condition_243099)
        # SSA begins for if statement (line 770)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 771):
        
        # Assigning a Call to a Name (line 771):
        
        # Assigning a Call to a Name (line 771):
        
        # Call to RendererPgf(...): (line 771)
        # Processing the call arguments (line 771)
        # Getting the type of 'self' (line 771)
        self_243101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 35), 'self', False)
        # Obtaining the member 'figure' of a type (line 771)
        figure_243102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 35), self_243101, 'figure')
        # Getting the type of 'None' (line 771)
        None_243103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 48), 'None', False)
        # Processing the call keyword arguments (line 771)
        # Getting the type of 'True' (line 771)
        True_243104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 60), 'True', False)
        keyword_243105 = True_243104
        kwargs_243106 = {'dummy': keyword_243105}
        # Getting the type of 'RendererPgf' (line 771)
        RendererPgf_243100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 23), 'RendererPgf', False)
        # Calling RendererPgf(args, kwargs) (line 771)
        RendererPgf_call_result_243107 = invoke(stypy.reporting.localization.Localization(__file__, 771, 23), RendererPgf_243100, *[figure_243102, None_243103], **kwargs_243106)
        
        # Assigning a type to the variable 'renderer' (line 771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 12), 'renderer', RendererPgf_call_result_243107)
        
        # Call to draw(...): (line 772)
        # Processing the call arguments (line 772)
        # Getting the type of 'renderer' (line 772)
        renderer_243111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 29), 'renderer', False)
        # Processing the call keyword arguments (line 772)
        kwargs_243112 = {}
        # Getting the type of 'self' (line 772)
        self_243108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 12), 'self', False)
        # Obtaining the member 'figure' of a type (line 772)
        figure_243109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 12), self_243108, 'figure')
        # Obtaining the member 'draw' of a type (line 772)
        draw_243110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 12), figure_243109, 'draw')
        # Calling draw(args, kwargs) (line 772)
        draw_call_result_243113 = invoke(stypy.reporting.localization.Localization(__file__, 772, 12), draw_243110, *[renderer_243111], **kwargs_243112)
        
        # Assigning a type to the variable 'stypy_return_type' (line 773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 773, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 770)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Str to a Name (line 775):
        
        # Assigning a Str to a Name (line 775):
        
        # Assigning a Str to a Name (line 775):
        unicode_243114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 790, (-1)), 'unicode', u'%% Creator: Matplotlib, PGF backend\n%%\n%% To include the figure in your LaTeX document, write\n%%   \\input{<filename>.pgf}\n%%\n%% Make sure the required packages are loaded in your preamble\n%%   \\usepackage{pgf}\n%%\n%% Figures using additional raster images can only be included by \\input if\n%% they are in the same directory as the main LaTeX file. For loading figures\n%% from other directories you can use the `import` package\n%%   \\usepackage{import}\n%% and then include the figures with\n%%   \\import{<path to file>}{<filename>.pgf}\n%%\n')
        # Assigning a type to the variable 'header_text' (line 775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 775, 8), 'header_text', unicode_243114)
        
        # Assigning a List to a Name (line 793):
        
        # Assigning a List to a Name (line 793):
        
        # Assigning a List to a Name (line 793):
        
        # Obtaining an instance of the builtin type 'list' (line 793)
        list_243115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 793)
        # Adding element type (line 793)
        unicode_243116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 32), 'unicode', u'%% Matplotlib used the following preamble')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 793, 31), list_243115, unicode_243116)
        
        # Assigning a type to the variable 'header_info_preamble' (line 793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 8), 'header_info_preamble', list_243115)
        
        
        # Call to splitlines(...): (line 794)
        # Processing the call keyword arguments (line 794)
        kwargs_243121 = {}
        
        # Call to get_preamble(...): (line 794)
        # Processing the call keyword arguments (line 794)
        kwargs_243118 = {}
        # Getting the type of 'get_preamble' (line 794)
        get_preamble_243117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 20), 'get_preamble', False)
        # Calling get_preamble(args, kwargs) (line 794)
        get_preamble_call_result_243119 = invoke(stypy.reporting.localization.Localization(__file__, 794, 20), get_preamble_243117, *[], **kwargs_243118)
        
        # Obtaining the member 'splitlines' of a type (line 794)
        splitlines_243120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 20), get_preamble_call_result_243119, 'splitlines')
        # Calling splitlines(args, kwargs) (line 794)
        splitlines_call_result_243122 = invoke(stypy.reporting.localization.Localization(__file__, 794, 20), splitlines_243120, *[], **kwargs_243121)
        
        # Testing the type of a for loop iterable (line 794)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 794, 8), splitlines_call_result_243122)
        # Getting the type of the for loop variable (line 794)
        for_loop_var_243123 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 794, 8), splitlines_call_result_243122)
        # Assigning a type to the variable 'line' (line 794)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 8), 'line', for_loop_var_243123)
        # SSA begins for a for statement (line 794)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 795)
        # Processing the call arguments (line 795)
        unicode_243126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, 40), 'unicode', u'%%   ')
        # Getting the type of 'line' (line 795)
        line_243127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 50), 'line', False)
        # Applying the binary operator '+' (line 795)
        result_add_243128 = python_operator(stypy.reporting.localization.Localization(__file__, 795, 40), '+', unicode_243126, line_243127)
        
        # Processing the call keyword arguments (line 795)
        kwargs_243129 = {}
        # Getting the type of 'header_info_preamble' (line 795)
        header_info_preamble_243124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 12), 'header_info_preamble', False)
        # Obtaining the member 'append' of a type (line 795)
        append_243125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 12), header_info_preamble_243124, 'append')
        # Calling append(args, kwargs) (line 795)
        append_call_result_243130 = invoke(stypy.reporting.localization.Localization(__file__, 795, 12), append_243125, *[result_add_243128], **kwargs_243129)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to splitlines(...): (line 796)
        # Processing the call keyword arguments (line 796)
        kwargs_243135 = {}
        
        # Call to get_fontspec(...): (line 796)
        # Processing the call keyword arguments (line 796)
        kwargs_243132 = {}
        # Getting the type of 'get_fontspec' (line 796)
        get_fontspec_243131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 20), 'get_fontspec', False)
        # Calling get_fontspec(args, kwargs) (line 796)
        get_fontspec_call_result_243133 = invoke(stypy.reporting.localization.Localization(__file__, 796, 20), get_fontspec_243131, *[], **kwargs_243132)
        
        # Obtaining the member 'splitlines' of a type (line 796)
        splitlines_243134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 20), get_fontspec_call_result_243133, 'splitlines')
        # Calling splitlines(args, kwargs) (line 796)
        splitlines_call_result_243136 = invoke(stypy.reporting.localization.Localization(__file__, 796, 20), splitlines_243134, *[], **kwargs_243135)
        
        # Testing the type of a for loop iterable (line 796)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 796, 8), splitlines_call_result_243136)
        # Getting the type of the for loop variable (line 796)
        for_loop_var_243137 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 796, 8), splitlines_call_result_243136)
        # Assigning a type to the variable 'line' (line 796)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 8), 'line', for_loop_var_243137)
        # SSA begins for a for statement (line 796)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 797)
        # Processing the call arguments (line 797)
        unicode_243140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 40), 'unicode', u'%%   ')
        # Getting the type of 'line' (line 797)
        line_243141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 50), 'line', False)
        # Applying the binary operator '+' (line 797)
        result_add_243142 = python_operator(stypy.reporting.localization.Localization(__file__, 797, 40), '+', unicode_243140, line_243141)
        
        # Processing the call keyword arguments (line 797)
        kwargs_243143 = {}
        # Getting the type of 'header_info_preamble' (line 797)
        header_info_preamble_243138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'header_info_preamble', False)
        # Obtaining the member 'append' of a type (line 797)
        append_243139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 12), header_info_preamble_243138, 'append')
        # Calling append(args, kwargs) (line 797)
        append_call_result_243144 = invoke(stypy.reporting.localization.Localization(__file__, 797, 12), append_243139, *[result_add_243142], **kwargs_243143)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 798)
        # Processing the call arguments (line 798)
        unicode_243147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 36), 'unicode', u'%%')
        # Processing the call keyword arguments (line 798)
        kwargs_243148 = {}
        # Getting the type of 'header_info_preamble' (line 798)
        header_info_preamble_243145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 8), 'header_info_preamble', False)
        # Obtaining the member 'append' of a type (line 798)
        append_243146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 8), header_info_preamble_243145, 'append')
        # Calling append(args, kwargs) (line 798)
        append_call_result_243149 = invoke(stypy.reporting.localization.Localization(__file__, 798, 8), append_243146, *[unicode_243147], **kwargs_243148)
        
        
        # Assigning a Call to a Name (line 799):
        
        # Assigning a Call to a Name (line 799):
        
        # Assigning a Call to a Name (line 799):
        
        # Call to join(...): (line 799)
        # Processing the call arguments (line 799)
        # Getting the type of 'header_info_preamble' (line 799)
        header_info_preamble_243152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 41), 'header_info_preamble', False)
        # Processing the call keyword arguments (line 799)
        kwargs_243153 = {}
        unicode_243150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 31), 'unicode', u'\n')
        # Obtaining the member 'join' of a type (line 799)
        join_243151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 31), unicode_243150, 'join')
        # Calling join(args, kwargs) (line 799)
        join_call_result_243154 = invoke(stypy.reporting.localization.Localization(__file__, 799, 31), join_243151, *[header_info_preamble_243152], **kwargs_243153)
        
        # Assigning a type to the variable 'header_info_preamble' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 8), 'header_info_preamble', join_call_result_243154)
        
        # Assigning a Tuple to a Tuple (line 802):
        
        # Assigning a Call to a Name (line 802):
        
        # Assigning a Call to a Name (line 802):
        
        # Call to get_figwidth(...): (line 802)
        # Processing the call keyword arguments (line 802)
        kwargs_243158 = {}
        # Getting the type of 'self' (line 802)
        self_243155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 15), 'self', False)
        # Obtaining the member 'figure' of a type (line 802)
        figure_243156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 15), self_243155, 'figure')
        # Obtaining the member 'get_figwidth' of a type (line 802)
        get_figwidth_243157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 15), figure_243156, 'get_figwidth')
        # Calling get_figwidth(args, kwargs) (line 802)
        get_figwidth_call_result_243159 = invoke(stypy.reporting.localization.Localization(__file__, 802, 15), get_figwidth_243157, *[], **kwargs_243158)
        
        # Assigning a type to the variable 'tuple_assignment_240307' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'tuple_assignment_240307', get_figwidth_call_result_243159)
        
        # Assigning a Call to a Name (line 802):
        
        # Assigning a Call to a Name (line 802):
        
        # Call to get_figheight(...): (line 802)
        # Processing the call keyword arguments (line 802)
        kwargs_243163 = {}
        # Getting the type of 'self' (line 802)
        self_243160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 43), 'self', False)
        # Obtaining the member 'figure' of a type (line 802)
        figure_243161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 43), self_243160, 'figure')
        # Obtaining the member 'get_figheight' of a type (line 802)
        get_figheight_243162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 43), figure_243161, 'get_figheight')
        # Calling get_figheight(args, kwargs) (line 802)
        get_figheight_call_result_243164 = invoke(stypy.reporting.localization.Localization(__file__, 802, 43), get_figheight_243162, *[], **kwargs_243163)
        
        # Assigning a type to the variable 'tuple_assignment_240308' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'tuple_assignment_240308', get_figheight_call_result_243164)
        
        # Assigning a Name to a Name (line 802):
        
        # Assigning a Name to a Name (line 802):
        # Getting the type of 'tuple_assignment_240307' (line 802)
        tuple_assignment_240307_243165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'tuple_assignment_240307')
        # Assigning a type to the variable 'w' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'w', tuple_assignment_240307_243165)
        
        # Assigning a Name to a Name (line 802):
        
        # Assigning a Name to a Name (line 802):
        # Getting the type of 'tuple_assignment_240308' (line 802)
        tuple_assignment_240308_243166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'tuple_assignment_240308')
        # Assigning a type to the variable 'h' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 11), 'h', tuple_assignment_240308_243166)
        
        # Assigning a Call to a Name (line 803):
        
        # Assigning a Call to a Name (line 803):
        
        # Assigning a Call to a Name (line 803):
        
        # Call to get_dpi(...): (line 803)
        # Processing the call keyword arguments (line 803)
        kwargs_243170 = {}
        # Getting the type of 'self' (line 803)
        self_243167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 14), 'self', False)
        # Obtaining the member 'figure' of a type (line 803)
        figure_243168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 14), self_243167, 'figure')
        # Obtaining the member 'get_dpi' of a type (line 803)
        get_dpi_243169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 14), figure_243168, 'get_dpi')
        # Calling get_dpi(args, kwargs) (line 803)
        get_dpi_call_result_243171 = invoke(stypy.reporting.localization.Localization(__file__, 803, 14), get_dpi_243169, *[], **kwargs_243170)
        
        # Assigning a type to the variable 'dpi' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'dpi', get_dpi_call_result_243171)
        
        # Call to write(...): (line 806)
        # Processing the call arguments (line 806)
        # Getting the type of 'header_text' (line 806)
        header_text_243174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 17), 'header_text', False)
        # Processing the call keyword arguments (line 806)
        kwargs_243175 = {}
        # Getting the type of 'fh' (line 806)
        fh_243172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 8), 'fh', False)
        # Obtaining the member 'write' of a type (line 806)
        write_243173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 8), fh_243172, 'write')
        # Calling write(args, kwargs) (line 806)
        write_call_result_243176 = invoke(stypy.reporting.localization.Localization(__file__, 806, 8), write_243173, *[header_text_243174], **kwargs_243175)
        
        
        # Call to write(...): (line 807)
        # Processing the call arguments (line 807)
        # Getting the type of 'header_info_preamble' (line 807)
        header_info_preamble_243179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 17), 'header_info_preamble', False)
        # Processing the call keyword arguments (line 807)
        kwargs_243180 = {}
        # Getting the type of 'fh' (line 807)
        fh_243177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 8), 'fh', False)
        # Obtaining the member 'write' of a type (line 807)
        write_243178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 8), fh_243177, 'write')
        # Calling write(args, kwargs) (line 807)
        write_call_result_243181 = invoke(stypy.reporting.localization.Localization(__file__, 807, 8), write_243178, *[header_info_preamble_243179], **kwargs_243180)
        
        
        # Call to write(...): (line 808)
        # Processing the call arguments (line 808)
        unicode_243184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 17), 'unicode', u'\n')
        # Processing the call keyword arguments (line 808)
        kwargs_243185 = {}
        # Getting the type of 'fh' (line 808)
        fh_243182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 8), 'fh', False)
        # Obtaining the member 'write' of a type (line 808)
        write_243183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 8), fh_243182, 'write')
        # Calling write(args, kwargs) (line 808)
        write_call_result_243186 = invoke(stypy.reporting.localization.Localization(__file__, 808, 8), write_243183, *[unicode_243184], **kwargs_243185)
        
        
        # Call to writeln(...): (line 809)
        # Processing the call arguments (line 809)
        # Getting the type of 'fh' (line 809)
        fh_243188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 16), 'fh', False)
        unicode_243189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 20), 'unicode', u'\\begingroup')
        # Processing the call keyword arguments (line 809)
        kwargs_243190 = {}
        # Getting the type of 'writeln' (line 809)
        writeln_243187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 809)
        writeln_call_result_243191 = invoke(stypy.reporting.localization.Localization(__file__, 809, 8), writeln_243187, *[fh_243188, unicode_243189], **kwargs_243190)
        
        
        # Call to writeln(...): (line 810)
        # Processing the call arguments (line 810)
        # Getting the type of 'fh' (line 810)
        fh_243193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 16), 'fh', False)
        unicode_243194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 810, 20), 'unicode', u'\\makeatletter')
        # Processing the call keyword arguments (line 810)
        kwargs_243195 = {}
        # Getting the type of 'writeln' (line 810)
        writeln_243192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 810)
        writeln_call_result_243196 = invoke(stypy.reporting.localization.Localization(__file__, 810, 8), writeln_243192, *[fh_243193, unicode_243194], **kwargs_243195)
        
        
        # Call to writeln(...): (line 811)
        # Processing the call arguments (line 811)
        # Getting the type of 'fh' (line 811)
        fh_243198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 16), 'fh', False)
        unicode_243199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 20), 'unicode', u'\\begin{pgfpicture}')
        # Processing the call keyword arguments (line 811)
        kwargs_243200 = {}
        # Getting the type of 'writeln' (line 811)
        writeln_243197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 811)
        writeln_call_result_243201 = invoke(stypy.reporting.localization.Localization(__file__, 811, 8), writeln_243197, *[fh_243198, unicode_243199], **kwargs_243200)
        
        
        # Call to writeln(...): (line 812)
        # Processing the call arguments (line 812)
        # Getting the type of 'fh' (line 812)
        fh_243203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 16), 'fh', False)
        unicode_243204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 20), 'unicode', u'\\pgfpathrectangle{\\pgfpointorigin}{\\pgfqpoint{%fin}{%fin}}')
        
        # Obtaining an instance of the builtin type 'tuple' (line 812)
        tuple_243205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 85), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 812)
        # Adding element type (line 812)
        # Getting the type of 'w' (line 812)
        w_243206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 85), 'w', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 812, 85), tuple_243205, w_243206)
        # Adding element type (line 812)
        # Getting the type of 'h' (line 812)
        h_243207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 88), 'h', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 812, 85), tuple_243205, h_243207)
        
        # Applying the binary operator '%' (line 812)
        result_mod_243208 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 20), '%', unicode_243204, tuple_243205)
        
        # Processing the call keyword arguments (line 812)
        kwargs_243209 = {}
        # Getting the type of 'writeln' (line 812)
        writeln_243202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 812)
        writeln_call_result_243210 = invoke(stypy.reporting.localization.Localization(__file__, 812, 8), writeln_243202, *[fh_243203, result_mod_243208], **kwargs_243209)
        
        
        # Call to writeln(...): (line 813)
        # Processing the call arguments (line 813)
        # Getting the type of 'fh' (line 813)
        fh_243212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 16), 'fh', False)
        unicode_243213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 20), 'unicode', u'\\pgfusepath{use as bounding box, clip}')
        # Processing the call keyword arguments (line 813)
        kwargs_243214 = {}
        # Getting the type of 'writeln' (line 813)
        writeln_243211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 813)
        writeln_call_result_243215 = invoke(stypy.reporting.localization.Localization(__file__, 813, 8), writeln_243211, *[fh_243212, unicode_243213], **kwargs_243214)
        
        
        # Assigning a Call to a Name (line 814):
        
        # Assigning a Call to a Name (line 814):
        
        # Assigning a Call to a Name (line 814):
        
        # Call to pop(...): (line 814)
        # Processing the call arguments (line 814)
        unicode_243218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 42), 'unicode', u'bbox_inches_restore')
        # Getting the type of 'None' (line 814)
        None_243219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 65), 'None', False)
        # Processing the call keyword arguments (line 814)
        kwargs_243220 = {}
        # Getting the type of 'kwargs' (line 814)
        kwargs_243216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 31), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 814)
        pop_243217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 31), kwargs_243216, 'pop')
        # Calling pop(args, kwargs) (line 814)
        pop_call_result_243221 = invoke(stypy.reporting.localization.Localization(__file__, 814, 31), pop_243217, *[unicode_243218, None_243219], **kwargs_243220)
        
        # Assigning a type to the variable '_bbox_inches_restore' (line 814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 8), '_bbox_inches_restore', pop_call_result_243221)
        
        # Assigning a Call to a Name (line 815):
        
        # Assigning a Call to a Name (line 815):
        
        # Assigning a Call to a Name (line 815):
        
        # Call to MixedModeRenderer(...): (line 815)
        # Processing the call arguments (line 815)
        # Getting the type of 'self' (line 815)
        self_243223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 37), 'self', False)
        # Obtaining the member 'figure' of a type (line 815)
        figure_243224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 37), self_243223, 'figure')
        # Getting the type of 'w' (line 815)
        w_243225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 50), 'w', False)
        # Getting the type of 'h' (line 815)
        h_243226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 53), 'h', False)
        # Getting the type of 'dpi' (line 815)
        dpi_243227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 56), 'dpi', False)
        
        # Call to RendererPgf(...): (line 816)
        # Processing the call arguments (line 816)
        # Getting the type of 'self' (line 816)
        self_243229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 49), 'self', False)
        # Obtaining the member 'figure' of a type (line 816)
        figure_243230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 816, 49), self_243229, 'figure')
        # Getting the type of 'fh' (line 816)
        fh_243231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 62), 'fh', False)
        # Processing the call keyword arguments (line 816)
        kwargs_243232 = {}
        # Getting the type of 'RendererPgf' (line 816)
        RendererPgf_243228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 37), 'RendererPgf', False)
        # Calling RendererPgf(args, kwargs) (line 816)
        RendererPgf_call_result_243233 = invoke(stypy.reporting.localization.Localization(__file__, 816, 37), RendererPgf_243228, *[figure_243230, fh_243231], **kwargs_243232)
        
        # Processing the call keyword arguments (line 815)
        # Getting the type of '_bbox_inches_restore' (line 817)
        _bbox_inches_restore_243234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 57), '_bbox_inches_restore', False)
        keyword_243235 = _bbox_inches_restore_243234
        kwargs_243236 = {'bbox_inches_restore': keyword_243235}
        # Getting the type of 'MixedModeRenderer' (line 815)
        MixedModeRenderer_243222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 19), 'MixedModeRenderer', False)
        # Calling MixedModeRenderer(args, kwargs) (line 815)
        MixedModeRenderer_call_result_243237 = invoke(stypy.reporting.localization.Localization(__file__, 815, 19), MixedModeRenderer_243222, *[figure_243224, w_243225, h_243226, dpi_243227, RendererPgf_call_result_243233], **kwargs_243236)
        
        # Assigning a type to the variable 'renderer' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 8), 'renderer', MixedModeRenderer_call_result_243237)
        
        # Call to draw(...): (line 818)
        # Processing the call arguments (line 818)
        # Getting the type of 'renderer' (line 818)
        renderer_243241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 25), 'renderer', False)
        # Processing the call keyword arguments (line 818)
        kwargs_243242 = {}
        # Getting the type of 'self' (line 818)
        self_243238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'self', False)
        # Obtaining the member 'figure' of a type (line 818)
        figure_243239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 8), self_243238, 'figure')
        # Obtaining the member 'draw' of a type (line 818)
        draw_243240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 8), figure_243239, 'draw')
        # Calling draw(args, kwargs) (line 818)
        draw_call_result_243243 = invoke(stypy.reporting.localization.Localization(__file__, 818, 8), draw_243240, *[renderer_243241], **kwargs_243242)
        
        
        # Call to writeln(...): (line 821)
        # Processing the call arguments (line 821)
        # Getting the type of 'fh' (line 821)
        fh_243245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 16), 'fh', False)
        unicode_243246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 20), 'unicode', u'\\end{pgfpicture}')
        # Processing the call keyword arguments (line 821)
        kwargs_243247 = {}
        # Getting the type of 'writeln' (line 821)
        writeln_243244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 821)
        writeln_call_result_243248 = invoke(stypy.reporting.localization.Localization(__file__, 821, 8), writeln_243244, *[fh_243245, unicode_243246], **kwargs_243247)
        
        
        # Call to writeln(...): (line 822)
        # Processing the call arguments (line 822)
        # Getting the type of 'fh' (line 822)
        fh_243250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 16), 'fh', False)
        unicode_243251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 20), 'unicode', u'\\makeatother')
        # Processing the call keyword arguments (line 822)
        kwargs_243252 = {}
        # Getting the type of 'writeln' (line 822)
        writeln_243249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 822)
        writeln_call_result_243253 = invoke(stypy.reporting.localization.Localization(__file__, 822, 8), writeln_243249, *[fh_243250, unicode_243251], **kwargs_243252)
        
        
        # Call to writeln(...): (line 823)
        # Processing the call arguments (line 823)
        # Getting the type of 'fh' (line 823)
        fh_243255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 16), 'fh', False)
        unicode_243256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 20), 'unicode', u'\\endgroup')
        # Processing the call keyword arguments (line 823)
        kwargs_243257 = {}
        # Getting the type of 'writeln' (line 823)
        writeln_243254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 8), 'writeln', False)
        # Calling writeln(args, kwargs) (line 823)
        writeln_call_result_243258 = invoke(stypy.reporting.localization.Localization(__file__, 823, 8), writeln_243254, *[fh_243255, unicode_243256], **kwargs_243257)
        
        
        # ################# End of '_print_pgf_to_fh(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_print_pgf_to_fh' in the type store
        # Getting the type of 'stypy_return_type' (line 769)
        stypy_return_type_243259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243259)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_print_pgf_to_fh'
        return stypy_return_type_243259


    @norecursion
    def print_pgf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'print_pgf'
        module_type_store = module_type_store.open_function_context('print_pgf', 825, 4, False)
        # Assigning a type to the variable 'self' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasPgf.print_pgf.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasPgf.print_pgf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasPgf.print_pgf.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasPgf.print_pgf.__dict__.__setitem__('stypy_function_name', 'FigureCanvasPgf.print_pgf')
        FigureCanvasPgf.print_pgf.__dict__.__setitem__('stypy_param_names_list', ['fname_or_fh'])
        FigureCanvasPgf.print_pgf.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasPgf.print_pgf.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasPgf.print_pgf.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasPgf.print_pgf.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasPgf.print_pgf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasPgf.print_pgf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasPgf.print_pgf', ['fname_or_fh'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'print_pgf', localization, ['fname_or_fh'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'print_pgf(...)' code ##################

        unicode_243260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, (-1)), 'unicode', u'\n        Output pgf commands for drawing the figure so it can be included and\n        rendered in latex documents.\n        ')
        
        
        # Call to get(...): (line 830)
        # Processing the call arguments (line 830)
        unicode_243263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 22), 'unicode', u'dryrun')
        # Getting the type of 'False' (line 830)
        False_243264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 32), 'False', False)
        # Processing the call keyword arguments (line 830)
        kwargs_243265 = {}
        # Getting the type of 'kwargs' (line 830)
        kwargs_243261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 11), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 830)
        get_243262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 11), kwargs_243261, 'get')
        # Calling get(args, kwargs) (line 830)
        get_call_result_243266 = invoke(stypy.reporting.localization.Localization(__file__, 830, 11), get_243262, *[unicode_243263, False_243264], **kwargs_243265)
        
        # Testing the type of an if condition (line 830)
        if_condition_243267 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 830, 8), get_call_result_243266)
        # Assigning a type to the variable 'if_condition_243267' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 8), 'if_condition_243267', if_condition_243267)
        # SSA begins for if statement (line 830)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _print_pgf_to_fh(...): (line 831)
        # Processing the call arguments (line 831)
        # Getting the type of 'None' (line 831)
        None_243270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 34), 'None', False)
        # Getting the type of 'args' (line 831)
        args_243271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 41), 'args', False)
        # Processing the call keyword arguments (line 831)
        # Getting the type of 'kwargs' (line 831)
        kwargs_243272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 49), 'kwargs', False)
        kwargs_243273 = {'kwargs_243272': kwargs_243272}
        # Getting the type of 'self' (line 831)
        self_243268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 12), 'self', False)
        # Obtaining the member '_print_pgf_to_fh' of a type (line 831)
        _print_pgf_to_fh_243269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 12), self_243268, '_print_pgf_to_fh')
        # Calling _print_pgf_to_fh(args, kwargs) (line 831)
        _print_pgf_to_fh_call_result_243274 = invoke(stypy.reporting.localization.Localization(__file__, 831, 12), _print_pgf_to_fh_243269, *[None_243270, args_243271], **kwargs_243273)
        
        # Assigning a type to the variable 'stypy_return_type' (line 832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 830)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isinstance(...): (line 835)
        # Processing the call arguments (line 835)
        # Getting the type of 'fname_or_fh' (line 835)
        fname_or_fh_243276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 22), 'fname_or_fh', False)
        # Getting the type of 'six' (line 835)
        six_243277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 35), 'six', False)
        # Obtaining the member 'string_types' of a type (line 835)
        string_types_243278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 35), six_243277, 'string_types')
        # Processing the call keyword arguments (line 835)
        kwargs_243279 = {}
        # Getting the type of 'isinstance' (line 835)
        isinstance_243275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 835)
        isinstance_call_result_243280 = invoke(stypy.reporting.localization.Localization(__file__, 835, 11), isinstance_243275, *[fname_or_fh_243276, string_types_243278], **kwargs_243279)
        
        # Testing the type of an if condition (line 835)
        if_condition_243281 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 835, 8), isinstance_call_result_243280)
        # Assigning a type to the variable 'if_condition_243281' (line 835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 835, 8), 'if_condition_243281', if_condition_243281)
        # SSA begins for if statement (line 835)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to open(...): (line 836)
        # Processing the call arguments (line 836)
        # Getting the type of 'fname_or_fh' (line 836)
        fname_or_fh_243284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 29), 'fname_or_fh', False)
        unicode_243285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 42), 'unicode', u'w')
        # Processing the call keyword arguments (line 836)
        unicode_243286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 56), 'unicode', u'utf-8')
        keyword_243287 = unicode_243286
        kwargs_243288 = {'encoding': keyword_243287}
        # Getting the type of 'codecs' (line 836)
        codecs_243282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 17), 'codecs', False)
        # Obtaining the member 'open' of a type (line 836)
        open_243283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 17), codecs_243282, 'open')
        # Calling open(args, kwargs) (line 836)
        open_call_result_243289 = invoke(stypy.reporting.localization.Localization(__file__, 836, 17), open_243283, *[fname_or_fh_243284, unicode_243285], **kwargs_243288)
        
        with_243290 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 836, 17), open_call_result_243289, 'with parameter', '__enter__', '__exit__')

        if with_243290:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 836)
            enter___243291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 17), open_call_result_243289, '__enter__')
            with_enter_243292 = invoke(stypy.reporting.localization.Localization(__file__, 836, 17), enter___243291)
            # Assigning a type to the variable 'fh' (line 836)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 17), 'fh', with_enter_243292)
            
            # Call to _print_pgf_to_fh(...): (line 837)
            # Processing the call arguments (line 837)
            # Getting the type of 'fh' (line 837)
            fh_243295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 38), 'fh', False)
            # Getting the type of 'args' (line 837)
            args_243296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 43), 'args', False)
            # Processing the call keyword arguments (line 837)
            # Getting the type of 'kwargs' (line 837)
            kwargs_243297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 51), 'kwargs', False)
            kwargs_243298 = {'kwargs_243297': kwargs_243297}
            # Getting the type of 'self' (line 837)
            self_243293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 16), 'self', False)
            # Obtaining the member '_print_pgf_to_fh' of a type (line 837)
            _print_pgf_to_fh_243294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 16), self_243293, '_print_pgf_to_fh')
            # Calling _print_pgf_to_fh(args, kwargs) (line 837)
            _print_pgf_to_fh_call_result_243299 = invoke(stypy.reporting.localization.Localization(__file__, 837, 16), _print_pgf_to_fh_243294, *[fh_243295, args_243296], **kwargs_243298)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 836)
            exit___243300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 17), open_call_result_243289, '__exit__')
            with_exit_243301 = invoke(stypy.reporting.localization.Localization(__file__, 836, 17), exit___243300, None, None, None)

        # SSA branch for the else part of an if statement (line 835)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to is_writable_file_like(...): (line 838)
        # Processing the call arguments (line 838)
        # Getting the type of 'fname_or_fh' (line 838)
        fname_or_fh_243303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 35), 'fname_or_fh', False)
        # Processing the call keyword arguments (line 838)
        kwargs_243304 = {}
        # Getting the type of 'is_writable_file_like' (line 838)
        is_writable_file_like_243302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 13), 'is_writable_file_like', False)
        # Calling is_writable_file_like(args, kwargs) (line 838)
        is_writable_file_like_call_result_243305 = invoke(stypy.reporting.localization.Localization(__file__, 838, 13), is_writable_file_like_243302, *[fname_or_fh_243303], **kwargs_243304)
        
        # Testing the type of an if condition (line 838)
        if_condition_243306 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 838, 13), is_writable_file_like_call_result_243305)
        # Assigning a type to the variable 'if_condition_243306' (line 838)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 838, 13), 'if_condition_243306', if_condition_243306)
        # SSA begins for if statement (line 838)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 839):
        
        # Assigning a Call to a Name (line 839):
        
        # Assigning a Call to a Name (line 839):
        
        # Call to (...): (line 839)
        # Processing the call arguments (line 839)
        # Getting the type of 'fname_or_fh' (line 839)
        fname_or_fh_243312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 43), 'fname_or_fh', False)
        # Processing the call keyword arguments (line 839)
        kwargs_243313 = {}
        
        # Call to getwriter(...): (line 839)
        # Processing the call arguments (line 839)
        unicode_243309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, 34), 'unicode', u'utf-8')
        # Processing the call keyword arguments (line 839)
        kwargs_243310 = {}
        # Getting the type of 'codecs' (line 839)
        codecs_243307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 17), 'codecs', False)
        # Obtaining the member 'getwriter' of a type (line 839)
        getwriter_243308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 17), codecs_243307, 'getwriter')
        # Calling getwriter(args, kwargs) (line 839)
        getwriter_call_result_243311 = invoke(stypy.reporting.localization.Localization(__file__, 839, 17), getwriter_243308, *[unicode_243309], **kwargs_243310)
        
        # Calling (args, kwargs) (line 839)
        _call_result_243314 = invoke(stypy.reporting.localization.Localization(__file__, 839, 17), getwriter_call_result_243311, *[fname_or_fh_243312], **kwargs_243313)
        
        # Assigning a type to the variable 'fh' (line 839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 12), 'fh', _call_result_243314)
        
        # Call to _print_pgf_to_fh(...): (line 840)
        # Processing the call arguments (line 840)
        # Getting the type of 'fh' (line 840)
        fh_243317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 34), 'fh', False)
        # Getting the type of 'args' (line 840)
        args_243318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 39), 'args', False)
        # Processing the call keyword arguments (line 840)
        # Getting the type of 'kwargs' (line 840)
        kwargs_243319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 47), 'kwargs', False)
        kwargs_243320 = {'kwargs_243319': kwargs_243319}
        # Getting the type of 'self' (line 840)
        self_243315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 12), 'self', False)
        # Obtaining the member '_print_pgf_to_fh' of a type (line 840)
        _print_pgf_to_fh_243316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 12), self_243315, '_print_pgf_to_fh')
        # Calling _print_pgf_to_fh(args, kwargs) (line 840)
        _print_pgf_to_fh_call_result_243321 = invoke(stypy.reporting.localization.Localization(__file__, 840, 12), _print_pgf_to_fh_243316, *[fh_243317, args_243318], **kwargs_243320)
        
        # SSA branch for the else part of an if statement (line 838)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 842)
        # Processing the call arguments (line 842)
        unicode_243323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, 29), 'unicode', u'filename must be a path')
        # Processing the call keyword arguments (line 842)
        kwargs_243324 = {}
        # Getting the type of 'ValueError' (line 842)
        ValueError_243322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 842)
        ValueError_call_result_243325 = invoke(stypy.reporting.localization.Localization(__file__, 842, 18), ValueError_243322, *[unicode_243323], **kwargs_243324)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 842, 12), ValueError_call_result_243325, 'raise parameter', BaseException)
        # SSA join for if statement (line 838)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 835)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'print_pgf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'print_pgf' in the type store
        # Getting the type of 'stypy_return_type' (line 825)
        stypy_return_type_243326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243326)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'print_pgf'
        return stypy_return_type_243326


    @norecursion
    def _print_pdf_to_fh(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_print_pdf_to_fh'
        module_type_store = module_type_store.open_function_context('_print_pdf_to_fh', 844, 4, False)
        # Assigning a type to the variable 'self' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasPgf._print_pdf_to_fh.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasPgf._print_pdf_to_fh.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasPgf._print_pdf_to_fh.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasPgf._print_pdf_to_fh.__dict__.__setitem__('stypy_function_name', 'FigureCanvasPgf._print_pdf_to_fh')
        FigureCanvasPgf._print_pdf_to_fh.__dict__.__setitem__('stypy_param_names_list', ['fh'])
        FigureCanvasPgf._print_pdf_to_fh.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasPgf._print_pdf_to_fh.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasPgf._print_pdf_to_fh.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasPgf._print_pdf_to_fh.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasPgf._print_pdf_to_fh.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasPgf._print_pdf_to_fh.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasPgf._print_pdf_to_fh', ['fh'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_print_pdf_to_fh', localization, ['fh'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_print_pdf_to_fh(...)' code ##################

        
        # Assigning a Tuple to a Tuple (line 845):
        
        # Assigning a Call to a Name (line 845):
        
        # Assigning a Call to a Name (line 845):
        
        # Call to get_figwidth(...): (line 845)
        # Processing the call keyword arguments (line 845)
        kwargs_243330 = {}
        # Getting the type of 'self' (line 845)
        self_243327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 15), 'self', False)
        # Obtaining the member 'figure' of a type (line 845)
        figure_243328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 15), self_243327, 'figure')
        # Obtaining the member 'get_figwidth' of a type (line 845)
        get_figwidth_243329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 15), figure_243328, 'get_figwidth')
        # Calling get_figwidth(args, kwargs) (line 845)
        get_figwidth_call_result_243331 = invoke(stypy.reporting.localization.Localization(__file__, 845, 15), get_figwidth_243329, *[], **kwargs_243330)
        
        # Assigning a type to the variable 'tuple_assignment_240309' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 8), 'tuple_assignment_240309', get_figwidth_call_result_243331)
        
        # Assigning a Call to a Name (line 845):
        
        # Assigning a Call to a Name (line 845):
        
        # Call to get_figheight(...): (line 845)
        # Processing the call keyword arguments (line 845)
        kwargs_243335 = {}
        # Getting the type of 'self' (line 845)
        self_243332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 43), 'self', False)
        # Obtaining the member 'figure' of a type (line 845)
        figure_243333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 43), self_243332, 'figure')
        # Obtaining the member 'get_figheight' of a type (line 845)
        get_figheight_243334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 43), figure_243333, 'get_figheight')
        # Calling get_figheight(args, kwargs) (line 845)
        get_figheight_call_result_243336 = invoke(stypy.reporting.localization.Localization(__file__, 845, 43), get_figheight_243334, *[], **kwargs_243335)
        
        # Assigning a type to the variable 'tuple_assignment_240310' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 8), 'tuple_assignment_240310', get_figheight_call_result_243336)
        
        # Assigning a Name to a Name (line 845):
        
        # Assigning a Name to a Name (line 845):
        # Getting the type of 'tuple_assignment_240309' (line 845)
        tuple_assignment_240309_243337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 8), 'tuple_assignment_240309')
        # Assigning a type to the variable 'w' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 8), 'w', tuple_assignment_240309_243337)
        
        # Assigning a Name to a Name (line 845):
        
        # Assigning a Name to a Name (line 845):
        # Getting the type of 'tuple_assignment_240310' (line 845)
        tuple_assignment_240310_243338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 8), 'tuple_assignment_240310')
        # Assigning a type to the variable 'h' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 11), 'h', tuple_assignment_240310_243338)
        
        # Try-finally block (line 847)
        
        # Assigning a Call to a Name (line 849):
        
        # Assigning a Call to a Name (line 849):
        
        # Assigning a Call to a Name (line 849):
        
        # Call to mkdtemp(...): (line 849)
        # Processing the call keyword arguments (line 849)
        unicode_243341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 849, 45), 'unicode', u'mpl_pgf_')
        keyword_243342 = unicode_243341
        kwargs_243343 = {'prefix': keyword_243342}
        # Getting the type of 'tempfile' (line 849)
        tempfile_243339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 21), 'tempfile', False)
        # Obtaining the member 'mkdtemp' of a type (line 849)
        mkdtemp_243340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 849, 21), tempfile_243339, 'mkdtemp')
        # Calling mkdtemp(args, kwargs) (line 849)
        mkdtemp_call_result_243344 = invoke(stypy.reporting.localization.Localization(__file__, 849, 21), mkdtemp_243340, *[], **kwargs_243343)
        
        # Assigning a type to the variable 'tmpdir' (line 849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 12), 'tmpdir', mkdtemp_call_result_243344)
        
        # Assigning a Call to a Name (line 850):
        
        # Assigning a Call to a Name (line 850):
        
        # Assigning a Call to a Name (line 850):
        
        # Call to join(...): (line 850)
        # Processing the call arguments (line 850)
        # Getting the type of 'tmpdir' (line 850)
        tmpdir_243348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 37), 'tmpdir', False)
        unicode_243349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 850, 45), 'unicode', u'figure.pgf')
        # Processing the call keyword arguments (line 850)
        kwargs_243350 = {}
        # Getting the type of 'os' (line 850)
        os_243345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 24), 'os', False)
        # Obtaining the member 'path' of a type (line 850)
        path_243346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 850, 24), os_243345, 'path')
        # Obtaining the member 'join' of a type (line 850)
        join_243347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 850, 24), path_243346, 'join')
        # Calling join(args, kwargs) (line 850)
        join_call_result_243351 = invoke(stypy.reporting.localization.Localization(__file__, 850, 24), join_243347, *[tmpdir_243348, unicode_243349], **kwargs_243350)
        
        # Assigning a type to the variable 'fname_pgf' (line 850)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 850, 12), 'fname_pgf', join_call_result_243351)
        
        # Assigning a Call to a Name (line 851):
        
        # Assigning a Call to a Name (line 851):
        
        # Assigning a Call to a Name (line 851):
        
        # Call to join(...): (line 851)
        # Processing the call arguments (line 851)
        # Getting the type of 'tmpdir' (line 851)
        tmpdir_243355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 37), 'tmpdir', False)
        unicode_243356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 851, 45), 'unicode', u'figure.tex')
        # Processing the call keyword arguments (line 851)
        kwargs_243357 = {}
        # Getting the type of 'os' (line 851)
        os_243352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 24), 'os', False)
        # Obtaining the member 'path' of a type (line 851)
        path_243353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 24), os_243352, 'path')
        # Obtaining the member 'join' of a type (line 851)
        join_243354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 24), path_243353, 'join')
        # Calling join(args, kwargs) (line 851)
        join_call_result_243358 = invoke(stypy.reporting.localization.Localization(__file__, 851, 24), join_243354, *[tmpdir_243355, unicode_243356], **kwargs_243357)
        
        # Assigning a type to the variable 'fname_tex' (line 851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 851, 12), 'fname_tex', join_call_result_243358)
        
        # Assigning a Call to a Name (line 852):
        
        # Assigning a Call to a Name (line 852):
        
        # Assigning a Call to a Name (line 852):
        
        # Call to join(...): (line 852)
        # Processing the call arguments (line 852)
        # Getting the type of 'tmpdir' (line 852)
        tmpdir_243362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 37), 'tmpdir', False)
        unicode_243363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 852, 45), 'unicode', u'figure.pdf')
        # Processing the call keyword arguments (line 852)
        kwargs_243364 = {}
        # Getting the type of 'os' (line 852)
        os_243359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 24), 'os', False)
        # Obtaining the member 'path' of a type (line 852)
        path_243360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 24), os_243359, 'path')
        # Obtaining the member 'join' of a type (line 852)
        join_243361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 24), path_243360, 'join')
        # Calling join(args, kwargs) (line 852)
        join_call_result_243365 = invoke(stypy.reporting.localization.Localization(__file__, 852, 24), join_243361, *[tmpdir_243362, unicode_243363], **kwargs_243364)
        
        # Assigning a type to the variable 'fname_pdf' (line 852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 12), 'fname_pdf', join_call_result_243365)
        
        # Call to print_pgf(...): (line 855)
        # Processing the call arguments (line 855)
        # Getting the type of 'fname_pgf' (line 855)
        fname_pgf_243368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 27), 'fname_pgf', False)
        # Getting the type of 'args' (line 855)
        args_243369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 39), 'args', False)
        # Processing the call keyword arguments (line 855)
        # Getting the type of 'kwargs' (line 855)
        kwargs_243370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 47), 'kwargs', False)
        kwargs_243371 = {'kwargs_243370': kwargs_243370}
        # Getting the type of 'self' (line 855)
        self_243366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 12), 'self', False)
        # Obtaining the member 'print_pgf' of a type (line 855)
        print_pgf_243367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 855, 12), self_243366, 'print_pgf')
        # Calling print_pgf(args, kwargs) (line 855)
        print_pgf_call_result_243372 = invoke(stypy.reporting.localization.Localization(__file__, 855, 12), print_pgf_243367, *[fname_pgf_243368, args_243369], **kwargs_243371)
        
        
        # Assigning a Call to a Name (line 857):
        
        # Assigning a Call to a Name (line 857):
        
        # Assigning a Call to a Name (line 857):
        
        # Call to get_preamble(...): (line 857)
        # Processing the call keyword arguments (line 857)
        kwargs_243374 = {}
        # Getting the type of 'get_preamble' (line 857)
        get_preamble_243373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 29), 'get_preamble', False)
        # Calling get_preamble(args, kwargs) (line 857)
        get_preamble_call_result_243375 = invoke(stypy.reporting.localization.Localization(__file__, 857, 29), get_preamble_243373, *[], **kwargs_243374)
        
        # Assigning a type to the variable 'latex_preamble' (line 857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 857, 12), 'latex_preamble', get_preamble_call_result_243375)
        
        # Assigning a Call to a Name (line 858):
        
        # Assigning a Call to a Name (line 858):
        
        # Assigning a Call to a Name (line 858):
        
        # Call to get_fontspec(...): (line 858)
        # Processing the call keyword arguments (line 858)
        kwargs_243377 = {}
        # Getting the type of 'get_fontspec' (line 858)
        get_fontspec_243376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 29), 'get_fontspec', False)
        # Calling get_fontspec(args, kwargs) (line 858)
        get_fontspec_call_result_243378 = invoke(stypy.reporting.localization.Localization(__file__, 858, 29), get_fontspec_243376, *[], **kwargs_243377)
        
        # Assigning a type to the variable 'latex_fontspec' (line 858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 858, 12), 'latex_fontspec', get_fontspec_call_result_243378)
        
        # Assigning a BinOp to a Name (line 859):
        
        # Assigning a BinOp to a Name (line 859):
        
        # Assigning a BinOp to a Name (line 859):
        unicode_243379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 869, (-1)), 'unicode', u'\n\\documentclass[12pt]{minimal}\n\\usepackage[paperwidth=%fin, paperheight=%fin, margin=0in]{geometry}\n%s\n%s\n\\usepackage{pgf}\n\n\\begin{document}\n\\centering\n\\input{figure.pgf}\n\\end{document}')
        
        # Obtaining an instance of the builtin type 'tuple' (line 869)
        tuple_243380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 869, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 869)
        # Adding element type (line 869)
        # Getting the type of 'w' (line 869)
        w_243381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 22), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 869, 22), tuple_243380, w_243381)
        # Adding element type (line 869)
        # Getting the type of 'h' (line 869)
        h_243382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 25), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 869, 22), tuple_243380, h_243382)
        # Adding element type (line 869)
        # Getting the type of 'latex_preamble' (line 869)
        latex_preamble_243383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 28), 'latex_preamble')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 869, 22), tuple_243380, latex_preamble_243383)
        # Adding element type (line 869)
        # Getting the type of 'latex_fontspec' (line 869)
        latex_fontspec_243384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 44), 'latex_fontspec')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 869, 22), tuple_243380, latex_fontspec_243384)
        
        # Applying the binary operator '%' (line 869)
        result_mod_243385 = python_operator(stypy.reporting.localization.Localization(__file__, 869, (-1)), '%', unicode_243379, tuple_243380)
        
        # Assigning a type to the variable 'latexcode' (line 859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 12), 'latexcode', result_mod_243385)
        
        # Call to open(...): (line 870)
        # Processing the call arguments (line 870)
        # Getting the type of 'fname_tex' (line 870)
        fname_tex_243388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 29), 'fname_tex', False)
        unicode_243389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 40), 'unicode', u'w')
        unicode_243390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 45), 'unicode', u'utf-8')
        # Processing the call keyword arguments (line 870)
        kwargs_243391 = {}
        # Getting the type of 'codecs' (line 870)
        codecs_243386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 17), 'codecs', False)
        # Obtaining the member 'open' of a type (line 870)
        open_243387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 17), codecs_243386, 'open')
        # Calling open(args, kwargs) (line 870)
        open_call_result_243392 = invoke(stypy.reporting.localization.Localization(__file__, 870, 17), open_243387, *[fname_tex_243388, unicode_243389, unicode_243390], **kwargs_243391)
        
        with_243393 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 870, 17), open_call_result_243392, 'with parameter', '__enter__', '__exit__')

        if with_243393:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 870)
            enter___243394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 17), open_call_result_243392, '__enter__')
            with_enter_243395 = invoke(stypy.reporting.localization.Localization(__file__, 870, 17), enter___243394)
            # Assigning a type to the variable 'fh_tex' (line 870)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 17), 'fh_tex', with_enter_243395)
            
            # Call to write(...): (line 871)
            # Processing the call arguments (line 871)
            # Getting the type of 'latexcode' (line 871)
            latexcode_243398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 29), 'latexcode', False)
            # Processing the call keyword arguments (line 871)
            kwargs_243399 = {}
            # Getting the type of 'fh_tex' (line 871)
            fh_tex_243396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 16), 'fh_tex', False)
            # Obtaining the member 'write' of a type (line 871)
            write_243397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 16), fh_tex_243396, 'write')
            # Calling write(args, kwargs) (line 871)
            write_call_result_243400 = invoke(stypy.reporting.localization.Localization(__file__, 871, 16), write_243397, *[latexcode_243398], **kwargs_243399)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 870)
            exit___243401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 17), open_call_result_243392, '__exit__')
            with_exit_243402 = invoke(stypy.reporting.localization.Localization(__file__, 870, 17), exit___243401, None, None, None)

        
        # Assigning a Call to a Name (line 873):
        
        # Assigning a Call to a Name (line 873):
        
        # Assigning a Call to a Name (line 873):
        
        # Call to get_texcommand(...): (line 873)
        # Processing the call keyword arguments (line 873)
        kwargs_243404 = {}
        # Getting the type of 'get_texcommand' (line 873)
        get_texcommand_243403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 25), 'get_texcommand', False)
        # Calling get_texcommand(args, kwargs) (line 873)
        get_texcommand_call_result_243405 = invoke(stypy.reporting.localization.Localization(__file__, 873, 25), get_texcommand_243403, *[], **kwargs_243404)
        
        # Assigning a type to the variable 'texcommand' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 12), 'texcommand', get_texcommand_call_result_243405)
        
        # Assigning a List to a Name (line 874):
        
        # Assigning a List to a Name (line 874):
        
        # Assigning a List to a Name (line 874):
        
        # Obtaining an instance of the builtin type 'list' (line 874)
        list_243406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 874, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 874)
        # Adding element type (line 874)
        
        # Call to str(...): (line 874)
        # Processing the call arguments (line 874)
        # Getting the type of 'texcommand' (line 874)
        texcommand_243408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 27), 'texcommand', False)
        # Processing the call keyword arguments (line 874)
        kwargs_243409 = {}
        # Getting the type of 'str' (line 874)
        str_243407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 23), 'str', False)
        # Calling str(args, kwargs) (line 874)
        str_call_result_243410 = invoke(stypy.reporting.localization.Localization(__file__, 874, 23), str_243407, *[texcommand_243408], **kwargs_243409)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 874, 22), list_243406, str_call_result_243410)
        # Adding element type (line 874)
        unicode_243411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 874, 40), 'unicode', u'-interaction=nonstopmode')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 874, 22), list_243406, unicode_243411)
        # Adding element type (line 874)
        unicode_243412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 875, 23), 'unicode', u'-halt-on-error')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 874, 22), list_243406, unicode_243412)
        # Adding element type (line 874)
        unicode_243413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 875, 41), 'unicode', u'figure.tex')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 874, 22), list_243406, unicode_243413)
        
        # Assigning a type to the variable 'cmdargs' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 12), 'cmdargs', list_243406)
        
        
        # SSA begins for try-except statement (line 876)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to check_output(...): (line 877)
        # Processing the call arguments (line 877)
        # Getting the type of 'cmdargs' (line 877)
        cmdargs_243415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 29), 'cmdargs', False)
        # Processing the call keyword arguments (line 877)
        # Getting the type of 'subprocess' (line 877)
        subprocess_243416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 45), 'subprocess', False)
        # Obtaining the member 'STDOUT' of a type (line 877)
        STDOUT_243417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 45), subprocess_243416, 'STDOUT')
        keyword_243418 = STDOUT_243417
        # Getting the type of 'tmpdir' (line 877)
        tmpdir_243419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 68), 'tmpdir', False)
        keyword_243420 = tmpdir_243419
        kwargs_243421 = {'cwd': keyword_243420, 'stderr': keyword_243418}
        # Getting the type of 'check_output' (line 877)
        check_output_243414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 16), 'check_output', False)
        # Calling check_output(args, kwargs) (line 877)
        check_output_call_result_243422 = invoke(stypy.reporting.localization.Localization(__file__, 877, 16), check_output_243414, *[cmdargs_243415], **kwargs_243421)
        
        # SSA branch for the except part of a try statement (line 876)
        # SSA branch for the except 'Attribute' branch of a try statement (line 876)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'subprocess' (line 878)
        subprocess_243423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 19), 'subprocess')
        # Obtaining the member 'CalledProcessError' of a type (line 878)
        CalledProcessError_243424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 19), subprocess_243423, 'CalledProcessError')
        # Assigning a type to the variable 'e' (line 878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 878, 12), 'e', CalledProcessError_243424)
        
        # Call to RuntimeError(...): (line 879)
        # Processing the call arguments (line 879)
        unicode_243426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 879, 35), 'unicode', u'%s was not able to process your file.\n\nFull log:\n%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 879)
        tuple_243427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 879, 95), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 879)
        # Adding element type (line 879)
        # Getting the type of 'texcommand' (line 879)
        texcommand_243428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 95), 'texcommand', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 879, 95), tuple_243427, texcommand_243428)
        # Adding element type (line 879)
        # Getting the type of 'e' (line 879)
        e_243429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 107), 'e', False)
        # Obtaining the member 'output' of a type (line 879)
        output_243430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 107), e_243429, 'output')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 879, 95), tuple_243427, output_243430)
        
        # Applying the binary operator '%' (line 879)
        result_mod_243431 = python_operator(stypy.reporting.localization.Localization(__file__, 879, 35), '%', unicode_243426, tuple_243427)
        
        # Processing the call keyword arguments (line 879)
        kwargs_243432 = {}
        # Getting the type of 'RuntimeError' (line 879)
        RuntimeError_243425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 22), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 879)
        RuntimeError_call_result_243433 = invoke(stypy.reporting.localization.Localization(__file__, 879, 22), RuntimeError_243425, *[result_mod_243431], **kwargs_243432)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 879, 16), RuntimeError_call_result_243433, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 876)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to open(...): (line 882)
        # Processing the call arguments (line 882)
        # Getting the type of 'fname_pdf' (line 882)
        fname_pdf_243435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 22), 'fname_pdf', False)
        unicode_243436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 33), 'unicode', u'rb')
        # Processing the call keyword arguments (line 882)
        kwargs_243437 = {}
        # Getting the type of 'open' (line 882)
        open_243434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 17), 'open', False)
        # Calling open(args, kwargs) (line 882)
        open_call_result_243438 = invoke(stypy.reporting.localization.Localization(__file__, 882, 17), open_243434, *[fname_pdf_243435, unicode_243436], **kwargs_243437)
        
        with_243439 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 882, 17), open_call_result_243438, 'with parameter', '__enter__', '__exit__')

        if with_243439:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 882)
            enter___243440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 17), open_call_result_243438, '__enter__')
            with_enter_243441 = invoke(stypy.reporting.localization.Localization(__file__, 882, 17), enter___243440)
            # Assigning a type to the variable 'fh_src' (line 882)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 17), 'fh_src', with_enter_243441)
            
            # Call to copyfileobj(...): (line 883)
            # Processing the call arguments (line 883)
            # Getting the type of 'fh_src' (line 883)
            fh_src_243444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 35), 'fh_src', False)
            # Getting the type of 'fh' (line 883)
            fh_243445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 43), 'fh', False)
            # Processing the call keyword arguments (line 883)
            kwargs_243446 = {}
            # Getting the type of 'shutil' (line 883)
            shutil_243442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 16), 'shutil', False)
            # Obtaining the member 'copyfileobj' of a type (line 883)
            copyfileobj_243443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 16), shutil_243442, 'copyfileobj')
            # Calling copyfileobj(args, kwargs) (line 883)
            copyfileobj_call_result_243447 = invoke(stypy.reporting.localization.Localization(__file__, 883, 16), copyfileobj_243443, *[fh_src_243444, fh_243445], **kwargs_243446)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 882)
            exit___243448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 17), open_call_result_243438, '__exit__')
            with_exit_243449 = invoke(stypy.reporting.localization.Localization(__file__, 882, 17), exit___243448, None, None, None)

        
        # finally branch of the try-finally block (line 847)
        
        
        # SSA begins for try-except statement (line 885)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to rmtree(...): (line 886)
        # Processing the call arguments (line 886)
        # Getting the type of 'tmpdir' (line 886)
        tmpdir_243452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 30), 'tmpdir', False)
        # Processing the call keyword arguments (line 886)
        kwargs_243453 = {}
        # Getting the type of 'shutil' (line 886)
        shutil_243450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 16), 'shutil', False)
        # Obtaining the member 'rmtree' of a type (line 886)
        rmtree_243451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 16), shutil_243450, 'rmtree')
        # Calling rmtree(args, kwargs) (line 886)
        rmtree_call_result_243454 = invoke(stypy.reporting.localization.Localization(__file__, 886, 16), rmtree_243451, *[tmpdir_243452], **kwargs_243453)
        
        # SSA branch for the except part of a try statement (line 885)
        # SSA branch for the except '<any exception>' branch of a try statement (line 885)
        module_type_store.open_ssa_branch('except')
        
        # Call to add(...): (line 888)
        # Processing the call arguments (line 888)
        # Getting the type of 'tmpdir' (line 888)
        tmpdir_243457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 34), 'tmpdir', False)
        # Processing the call keyword arguments (line 888)
        kwargs_243458 = {}
        # Getting the type of 'TmpDirCleaner' (line 888)
        TmpDirCleaner_243455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 16), 'TmpDirCleaner', False)
        # Obtaining the member 'add' of a type (line 888)
        add_243456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 16), TmpDirCleaner_243455, 'add')
        # Calling add(args, kwargs) (line 888)
        add_call_result_243459 = invoke(stypy.reporting.localization.Localization(__file__, 888, 16), add_243456, *[tmpdir_243457], **kwargs_243458)
        
        # SSA join for try-except statement (line 885)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # ################# End of '_print_pdf_to_fh(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_print_pdf_to_fh' in the type store
        # Getting the type of 'stypy_return_type' (line 844)
        stypy_return_type_243460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243460)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_print_pdf_to_fh'
        return stypy_return_type_243460


    @norecursion
    def print_pdf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'print_pdf'
        module_type_store = module_type_store.open_function_context('print_pdf', 890, 4, False)
        # Assigning a type to the variable 'self' (line 891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasPgf.print_pdf.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasPgf.print_pdf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasPgf.print_pdf.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasPgf.print_pdf.__dict__.__setitem__('stypy_function_name', 'FigureCanvasPgf.print_pdf')
        FigureCanvasPgf.print_pdf.__dict__.__setitem__('stypy_param_names_list', ['fname_or_fh'])
        FigureCanvasPgf.print_pdf.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasPgf.print_pdf.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasPgf.print_pdf.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasPgf.print_pdf.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasPgf.print_pdf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasPgf.print_pdf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasPgf.print_pdf', ['fname_or_fh'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'print_pdf', localization, ['fname_or_fh'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'print_pdf(...)' code ##################

        unicode_243461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 893, (-1)), 'unicode', u'\n        Use LaTeX to compile a Pgf generated figure to PDF.\n        ')
        
        
        # Call to get(...): (line 894)
        # Processing the call arguments (line 894)
        unicode_243464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 894, 22), 'unicode', u'dryrun')
        # Getting the type of 'False' (line 894)
        False_243465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 32), 'False', False)
        # Processing the call keyword arguments (line 894)
        kwargs_243466 = {}
        # Getting the type of 'kwargs' (line 894)
        kwargs_243462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 11), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 894)
        get_243463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 11), kwargs_243462, 'get')
        # Calling get(args, kwargs) (line 894)
        get_call_result_243467 = invoke(stypy.reporting.localization.Localization(__file__, 894, 11), get_243463, *[unicode_243464, False_243465], **kwargs_243466)
        
        # Testing the type of an if condition (line 894)
        if_condition_243468 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 894, 8), get_call_result_243467)
        # Assigning a type to the variable 'if_condition_243468' (line 894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 894, 8), 'if_condition_243468', if_condition_243468)
        # SSA begins for if statement (line 894)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _print_pgf_to_fh(...): (line 895)
        # Processing the call arguments (line 895)
        # Getting the type of 'None' (line 895)
        None_243471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 34), 'None', False)
        # Getting the type of 'args' (line 895)
        args_243472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 41), 'args', False)
        # Processing the call keyword arguments (line 895)
        # Getting the type of 'kwargs' (line 895)
        kwargs_243473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 49), 'kwargs', False)
        kwargs_243474 = {'kwargs_243473': kwargs_243473}
        # Getting the type of 'self' (line 895)
        self_243469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 12), 'self', False)
        # Obtaining the member '_print_pgf_to_fh' of a type (line 895)
        _print_pgf_to_fh_243470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 12), self_243469, '_print_pgf_to_fh')
        # Calling _print_pgf_to_fh(args, kwargs) (line 895)
        _print_pgf_to_fh_call_result_243475 = invoke(stypy.reporting.localization.Localization(__file__, 895, 12), _print_pgf_to_fh_243470, *[None_243471, args_243472], **kwargs_243474)
        
        # Assigning a type to the variable 'stypy_return_type' (line 896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 894)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isinstance(...): (line 899)
        # Processing the call arguments (line 899)
        # Getting the type of 'fname_or_fh' (line 899)
        fname_or_fh_243477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 22), 'fname_or_fh', False)
        # Getting the type of 'six' (line 899)
        six_243478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 35), 'six', False)
        # Obtaining the member 'string_types' of a type (line 899)
        string_types_243479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 35), six_243478, 'string_types')
        # Processing the call keyword arguments (line 899)
        kwargs_243480 = {}
        # Getting the type of 'isinstance' (line 899)
        isinstance_243476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 899)
        isinstance_call_result_243481 = invoke(stypy.reporting.localization.Localization(__file__, 899, 11), isinstance_243476, *[fname_or_fh_243477, string_types_243479], **kwargs_243480)
        
        # Testing the type of an if condition (line 899)
        if_condition_243482 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 899, 8), isinstance_call_result_243481)
        # Assigning a type to the variable 'if_condition_243482' (line 899)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 8), 'if_condition_243482', if_condition_243482)
        # SSA begins for if statement (line 899)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to open(...): (line 900)
        # Processing the call arguments (line 900)
        # Getting the type of 'fname_or_fh' (line 900)
        fname_or_fh_243484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 22), 'fname_or_fh', False)
        unicode_243485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 900, 35), 'unicode', u'wb')
        # Processing the call keyword arguments (line 900)
        kwargs_243486 = {}
        # Getting the type of 'open' (line 900)
        open_243483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 17), 'open', False)
        # Calling open(args, kwargs) (line 900)
        open_call_result_243487 = invoke(stypy.reporting.localization.Localization(__file__, 900, 17), open_243483, *[fname_or_fh_243484, unicode_243485], **kwargs_243486)
        
        with_243488 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 900, 17), open_call_result_243487, 'with parameter', '__enter__', '__exit__')

        if with_243488:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 900)
            enter___243489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 17), open_call_result_243487, '__enter__')
            with_enter_243490 = invoke(stypy.reporting.localization.Localization(__file__, 900, 17), enter___243489)
            # Assigning a type to the variable 'fh' (line 900)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 17), 'fh', with_enter_243490)
            
            # Call to _print_pdf_to_fh(...): (line 901)
            # Processing the call arguments (line 901)
            # Getting the type of 'fh' (line 901)
            fh_243493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 38), 'fh', False)
            # Getting the type of 'args' (line 901)
            args_243494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 43), 'args', False)
            # Processing the call keyword arguments (line 901)
            # Getting the type of 'kwargs' (line 901)
            kwargs_243495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 51), 'kwargs', False)
            kwargs_243496 = {'kwargs_243495': kwargs_243495}
            # Getting the type of 'self' (line 901)
            self_243491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 16), 'self', False)
            # Obtaining the member '_print_pdf_to_fh' of a type (line 901)
            _print_pdf_to_fh_243492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 901, 16), self_243491, '_print_pdf_to_fh')
            # Calling _print_pdf_to_fh(args, kwargs) (line 901)
            _print_pdf_to_fh_call_result_243497 = invoke(stypy.reporting.localization.Localization(__file__, 901, 16), _print_pdf_to_fh_243492, *[fh_243493, args_243494], **kwargs_243496)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 900)
            exit___243498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 17), open_call_result_243487, '__exit__')
            with_exit_243499 = invoke(stypy.reporting.localization.Localization(__file__, 900, 17), exit___243498, None, None, None)

        # SSA branch for the else part of an if statement (line 899)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to is_writable_file_like(...): (line 902)
        # Processing the call arguments (line 902)
        # Getting the type of 'fname_or_fh' (line 902)
        fname_or_fh_243501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 35), 'fname_or_fh', False)
        # Processing the call keyword arguments (line 902)
        kwargs_243502 = {}
        # Getting the type of 'is_writable_file_like' (line 902)
        is_writable_file_like_243500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 13), 'is_writable_file_like', False)
        # Calling is_writable_file_like(args, kwargs) (line 902)
        is_writable_file_like_call_result_243503 = invoke(stypy.reporting.localization.Localization(__file__, 902, 13), is_writable_file_like_243500, *[fname_or_fh_243501], **kwargs_243502)
        
        # Testing the type of an if condition (line 902)
        if_condition_243504 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 902, 13), is_writable_file_like_call_result_243503)
        # Assigning a type to the variable 'if_condition_243504' (line 902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 13), 'if_condition_243504', if_condition_243504)
        # SSA begins for if statement (line 902)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _print_pdf_to_fh(...): (line 903)
        # Processing the call arguments (line 903)
        # Getting the type of 'fname_or_fh' (line 903)
        fname_or_fh_243507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 34), 'fname_or_fh', False)
        # Getting the type of 'args' (line 903)
        args_243508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 48), 'args', False)
        # Processing the call keyword arguments (line 903)
        # Getting the type of 'kwargs' (line 903)
        kwargs_243509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 56), 'kwargs', False)
        kwargs_243510 = {'kwargs_243509': kwargs_243509}
        # Getting the type of 'self' (line 903)
        self_243505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 12), 'self', False)
        # Obtaining the member '_print_pdf_to_fh' of a type (line 903)
        _print_pdf_to_fh_243506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 12), self_243505, '_print_pdf_to_fh')
        # Calling _print_pdf_to_fh(args, kwargs) (line 903)
        _print_pdf_to_fh_call_result_243511 = invoke(stypy.reporting.localization.Localization(__file__, 903, 12), _print_pdf_to_fh_243506, *[fname_or_fh_243507, args_243508], **kwargs_243510)
        
        # SSA branch for the else part of an if statement (line 902)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 905)
        # Processing the call arguments (line 905)
        unicode_243513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 29), 'unicode', u'filename must be a path or a file-like object')
        # Processing the call keyword arguments (line 905)
        kwargs_243514 = {}
        # Getting the type of 'ValueError' (line 905)
        ValueError_243512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 905)
        ValueError_call_result_243515 = invoke(stypy.reporting.localization.Localization(__file__, 905, 18), ValueError_243512, *[unicode_243513], **kwargs_243514)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 905, 12), ValueError_call_result_243515, 'raise parameter', BaseException)
        # SSA join for if statement (line 902)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 899)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'print_pdf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'print_pdf' in the type store
        # Getting the type of 'stypy_return_type' (line 890)
        stypy_return_type_243516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243516)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'print_pdf'
        return stypy_return_type_243516


    @norecursion
    def _print_png_to_fh(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_print_png_to_fh'
        module_type_store = module_type_store.open_function_context('_print_png_to_fh', 907, 4, False)
        # Assigning a type to the variable 'self' (line 908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasPgf._print_png_to_fh.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasPgf._print_png_to_fh.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasPgf._print_png_to_fh.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasPgf._print_png_to_fh.__dict__.__setitem__('stypy_function_name', 'FigureCanvasPgf._print_png_to_fh')
        FigureCanvasPgf._print_png_to_fh.__dict__.__setitem__('stypy_param_names_list', ['fh'])
        FigureCanvasPgf._print_png_to_fh.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasPgf._print_png_to_fh.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasPgf._print_png_to_fh.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasPgf._print_png_to_fh.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasPgf._print_png_to_fh.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasPgf._print_png_to_fh.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasPgf._print_png_to_fh', ['fh'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_print_png_to_fh', localization, ['fh'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_print_png_to_fh(...)' code ##################

        
        # Assigning a Call to a Name (line 908):
        
        # Assigning a Call to a Name (line 908):
        
        # Assigning a Call to a Name (line 908):
        
        # Call to make_pdf_to_png_converter(...): (line 908)
        # Processing the call keyword arguments (line 908)
        kwargs_243518 = {}
        # Getting the type of 'make_pdf_to_png_converter' (line 908)
        make_pdf_to_png_converter_243517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 20), 'make_pdf_to_png_converter', False)
        # Calling make_pdf_to_png_converter(args, kwargs) (line 908)
        make_pdf_to_png_converter_call_result_243519 = invoke(stypy.reporting.localization.Localization(__file__, 908, 20), make_pdf_to_png_converter_243517, *[], **kwargs_243518)
        
        # Assigning a type to the variable 'converter' (line 908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 8), 'converter', make_pdf_to_png_converter_call_result_243519)
        
        # Try-finally block (line 910)
        
        # Assigning a Call to a Name (line 912):
        
        # Assigning a Call to a Name (line 912):
        
        # Assigning a Call to a Name (line 912):
        
        # Call to mkdtemp(...): (line 912)
        # Processing the call keyword arguments (line 912)
        unicode_243522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 912, 45), 'unicode', u'mpl_pgf_')
        keyword_243523 = unicode_243522
        kwargs_243524 = {'prefix': keyword_243523}
        # Getting the type of 'tempfile' (line 912)
        tempfile_243520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 21), 'tempfile', False)
        # Obtaining the member 'mkdtemp' of a type (line 912)
        mkdtemp_243521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 21), tempfile_243520, 'mkdtemp')
        # Calling mkdtemp(args, kwargs) (line 912)
        mkdtemp_call_result_243525 = invoke(stypy.reporting.localization.Localization(__file__, 912, 21), mkdtemp_243521, *[], **kwargs_243524)
        
        # Assigning a type to the variable 'tmpdir' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 12), 'tmpdir', mkdtemp_call_result_243525)
        
        # Assigning a Call to a Name (line 913):
        
        # Assigning a Call to a Name (line 913):
        
        # Assigning a Call to a Name (line 913):
        
        # Call to join(...): (line 913)
        # Processing the call arguments (line 913)
        # Getting the type of 'tmpdir' (line 913)
        tmpdir_243529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 37), 'tmpdir', False)
        unicode_243530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 45), 'unicode', u'figure.pdf')
        # Processing the call keyword arguments (line 913)
        kwargs_243531 = {}
        # Getting the type of 'os' (line 913)
        os_243526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 24), 'os', False)
        # Obtaining the member 'path' of a type (line 913)
        path_243527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 24), os_243526, 'path')
        # Obtaining the member 'join' of a type (line 913)
        join_243528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 24), path_243527, 'join')
        # Calling join(args, kwargs) (line 913)
        join_call_result_243532 = invoke(stypy.reporting.localization.Localization(__file__, 913, 24), join_243528, *[tmpdir_243529, unicode_243530], **kwargs_243531)
        
        # Assigning a type to the variable 'fname_pdf' (line 913)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 913, 12), 'fname_pdf', join_call_result_243532)
        
        # Assigning a Call to a Name (line 914):
        
        # Assigning a Call to a Name (line 914):
        
        # Assigning a Call to a Name (line 914):
        
        # Call to join(...): (line 914)
        # Processing the call arguments (line 914)
        # Getting the type of 'tmpdir' (line 914)
        tmpdir_243536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 37), 'tmpdir', False)
        unicode_243537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 45), 'unicode', u'figure.png')
        # Processing the call keyword arguments (line 914)
        kwargs_243538 = {}
        # Getting the type of 'os' (line 914)
        os_243533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 24), 'os', False)
        # Obtaining the member 'path' of a type (line 914)
        path_243534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 24), os_243533, 'path')
        # Obtaining the member 'join' of a type (line 914)
        join_243535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 24), path_243534, 'join')
        # Calling join(args, kwargs) (line 914)
        join_call_result_243539 = invoke(stypy.reporting.localization.Localization(__file__, 914, 24), join_243535, *[tmpdir_243536, unicode_243537], **kwargs_243538)
        
        # Assigning a type to the variable 'fname_png' (line 914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 12), 'fname_png', join_call_result_243539)
        
        # Call to print_pdf(...): (line 916)
        # Processing the call arguments (line 916)
        # Getting the type of 'fname_pdf' (line 916)
        fname_pdf_243542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 27), 'fname_pdf', False)
        # Getting the type of 'args' (line 916)
        args_243543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 39), 'args', False)
        # Processing the call keyword arguments (line 916)
        # Getting the type of 'kwargs' (line 916)
        kwargs_243544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 47), 'kwargs', False)
        kwargs_243545 = {'kwargs_243544': kwargs_243544}
        # Getting the type of 'self' (line 916)
        self_243540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 12), 'self', False)
        # Obtaining the member 'print_pdf' of a type (line 916)
        print_pdf_243541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 12), self_243540, 'print_pdf')
        # Calling print_pdf(args, kwargs) (line 916)
        print_pdf_call_result_243546 = invoke(stypy.reporting.localization.Localization(__file__, 916, 12), print_pdf_243541, *[fname_pdf_243542, args_243543], **kwargs_243545)
        
        
        # Call to converter(...): (line 917)
        # Processing the call arguments (line 917)
        # Getting the type of 'fname_pdf' (line 917)
        fname_pdf_243548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 22), 'fname_pdf', False)
        # Getting the type of 'fname_png' (line 917)
        fname_png_243549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 33), 'fname_png', False)
        # Processing the call keyword arguments (line 917)
        # Getting the type of 'self' (line 917)
        self_243550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 48), 'self', False)
        # Obtaining the member 'figure' of a type (line 917)
        figure_243551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 48), self_243550, 'figure')
        # Obtaining the member 'dpi' of a type (line 917)
        dpi_243552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 48), figure_243551, 'dpi')
        keyword_243553 = dpi_243552
        kwargs_243554 = {'dpi': keyword_243553}
        # Getting the type of 'converter' (line 917)
        converter_243547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 12), 'converter', False)
        # Calling converter(args, kwargs) (line 917)
        converter_call_result_243555 = invoke(stypy.reporting.localization.Localization(__file__, 917, 12), converter_243547, *[fname_pdf_243548, fname_png_243549], **kwargs_243554)
        
        
        # Call to open(...): (line 919)
        # Processing the call arguments (line 919)
        # Getting the type of 'fname_png' (line 919)
        fname_png_243557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 22), 'fname_png', False)
        unicode_243558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 919, 33), 'unicode', u'rb')
        # Processing the call keyword arguments (line 919)
        kwargs_243559 = {}
        # Getting the type of 'open' (line 919)
        open_243556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 17), 'open', False)
        # Calling open(args, kwargs) (line 919)
        open_call_result_243560 = invoke(stypy.reporting.localization.Localization(__file__, 919, 17), open_243556, *[fname_png_243557, unicode_243558], **kwargs_243559)
        
        with_243561 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 919, 17), open_call_result_243560, 'with parameter', '__enter__', '__exit__')

        if with_243561:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 919)
            enter___243562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 919, 17), open_call_result_243560, '__enter__')
            with_enter_243563 = invoke(stypy.reporting.localization.Localization(__file__, 919, 17), enter___243562)
            # Assigning a type to the variable 'fh_src' (line 919)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 17), 'fh_src', with_enter_243563)
            
            # Call to copyfileobj(...): (line 920)
            # Processing the call arguments (line 920)
            # Getting the type of 'fh_src' (line 920)
            fh_src_243566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 35), 'fh_src', False)
            # Getting the type of 'fh' (line 920)
            fh_243567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 43), 'fh', False)
            # Processing the call keyword arguments (line 920)
            kwargs_243568 = {}
            # Getting the type of 'shutil' (line 920)
            shutil_243564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 16), 'shutil', False)
            # Obtaining the member 'copyfileobj' of a type (line 920)
            copyfileobj_243565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 16), shutil_243564, 'copyfileobj')
            # Calling copyfileobj(args, kwargs) (line 920)
            copyfileobj_call_result_243569 = invoke(stypy.reporting.localization.Localization(__file__, 920, 16), copyfileobj_243565, *[fh_src_243566, fh_243567], **kwargs_243568)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 919)
            exit___243570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 919, 17), open_call_result_243560, '__exit__')
            with_exit_243571 = invoke(stypy.reporting.localization.Localization(__file__, 919, 17), exit___243570, None, None, None)

        
        # finally branch of the try-finally block (line 910)
        
        
        # SSA begins for try-except statement (line 922)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to rmtree(...): (line 923)
        # Processing the call arguments (line 923)
        # Getting the type of 'tmpdir' (line 923)
        tmpdir_243574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 30), 'tmpdir', False)
        # Processing the call keyword arguments (line 923)
        kwargs_243575 = {}
        # Getting the type of 'shutil' (line 923)
        shutil_243572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 16), 'shutil', False)
        # Obtaining the member 'rmtree' of a type (line 923)
        rmtree_243573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 16), shutil_243572, 'rmtree')
        # Calling rmtree(args, kwargs) (line 923)
        rmtree_call_result_243576 = invoke(stypy.reporting.localization.Localization(__file__, 923, 16), rmtree_243573, *[tmpdir_243574], **kwargs_243575)
        
        # SSA branch for the except part of a try statement (line 922)
        # SSA branch for the except '<any exception>' branch of a try statement (line 922)
        module_type_store.open_ssa_branch('except')
        
        # Call to add(...): (line 925)
        # Processing the call arguments (line 925)
        # Getting the type of 'tmpdir' (line 925)
        tmpdir_243579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 34), 'tmpdir', False)
        # Processing the call keyword arguments (line 925)
        kwargs_243580 = {}
        # Getting the type of 'TmpDirCleaner' (line 925)
        TmpDirCleaner_243577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 16), 'TmpDirCleaner', False)
        # Obtaining the member 'add' of a type (line 925)
        add_243578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 16), TmpDirCleaner_243577, 'add')
        # Calling add(args, kwargs) (line 925)
        add_call_result_243581 = invoke(stypy.reporting.localization.Localization(__file__, 925, 16), add_243578, *[tmpdir_243579], **kwargs_243580)
        
        # SSA join for try-except statement (line 922)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # ################# End of '_print_png_to_fh(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_print_png_to_fh' in the type store
        # Getting the type of 'stypy_return_type' (line 907)
        stypy_return_type_243582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243582)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_print_png_to_fh'
        return stypy_return_type_243582


    @norecursion
    def print_png(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'print_png'
        module_type_store = module_type_store.open_function_context('print_png', 927, 4, False)
        # Assigning a type to the variable 'self' (line 928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasPgf.print_png.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasPgf.print_png.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasPgf.print_png.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasPgf.print_png.__dict__.__setitem__('stypy_function_name', 'FigureCanvasPgf.print_png')
        FigureCanvasPgf.print_png.__dict__.__setitem__('stypy_param_names_list', ['fname_or_fh'])
        FigureCanvasPgf.print_png.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasPgf.print_png.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasPgf.print_png.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasPgf.print_png.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasPgf.print_png.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasPgf.print_png.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasPgf.print_png', ['fname_or_fh'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'print_png', localization, ['fname_or_fh'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'print_png(...)' code ##################

        unicode_243583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 930, (-1)), 'unicode', u'\n        Use LaTeX to compile a pgf figure to pdf and convert it to png.\n        ')
        
        
        # Call to get(...): (line 931)
        # Processing the call arguments (line 931)
        unicode_243586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 22), 'unicode', u'dryrun')
        # Getting the type of 'False' (line 931)
        False_243587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 32), 'False', False)
        # Processing the call keyword arguments (line 931)
        kwargs_243588 = {}
        # Getting the type of 'kwargs' (line 931)
        kwargs_243584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 11), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 931)
        get_243585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 11), kwargs_243584, 'get')
        # Calling get(args, kwargs) (line 931)
        get_call_result_243589 = invoke(stypy.reporting.localization.Localization(__file__, 931, 11), get_243585, *[unicode_243586, False_243587], **kwargs_243588)
        
        # Testing the type of an if condition (line 931)
        if_condition_243590 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 931, 8), get_call_result_243589)
        # Assigning a type to the variable 'if_condition_243590' (line 931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 8), 'if_condition_243590', if_condition_243590)
        # SSA begins for if statement (line 931)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _print_pgf_to_fh(...): (line 932)
        # Processing the call arguments (line 932)
        # Getting the type of 'None' (line 932)
        None_243593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 34), 'None', False)
        # Getting the type of 'args' (line 932)
        args_243594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 41), 'args', False)
        # Processing the call keyword arguments (line 932)
        # Getting the type of 'kwargs' (line 932)
        kwargs_243595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 49), 'kwargs', False)
        kwargs_243596 = {'kwargs_243595': kwargs_243595}
        # Getting the type of 'self' (line 932)
        self_243591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 12), 'self', False)
        # Obtaining the member '_print_pgf_to_fh' of a type (line 932)
        _print_pgf_to_fh_243592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 12), self_243591, '_print_pgf_to_fh')
        # Calling _print_pgf_to_fh(args, kwargs) (line 932)
        _print_pgf_to_fh_call_result_243597 = invoke(stypy.reporting.localization.Localization(__file__, 932, 12), _print_pgf_to_fh_243592, *[None_243593, args_243594], **kwargs_243596)
        
        # Assigning a type to the variable 'stypy_return_type' (line 933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 931)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isinstance(...): (line 935)
        # Processing the call arguments (line 935)
        # Getting the type of 'fname_or_fh' (line 935)
        fname_or_fh_243599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 22), 'fname_or_fh', False)
        # Getting the type of 'six' (line 935)
        six_243600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 35), 'six', False)
        # Obtaining the member 'string_types' of a type (line 935)
        string_types_243601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 35), six_243600, 'string_types')
        # Processing the call keyword arguments (line 935)
        kwargs_243602 = {}
        # Getting the type of 'isinstance' (line 935)
        isinstance_243598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 935)
        isinstance_call_result_243603 = invoke(stypy.reporting.localization.Localization(__file__, 935, 11), isinstance_243598, *[fname_or_fh_243599, string_types_243601], **kwargs_243602)
        
        # Testing the type of an if condition (line 935)
        if_condition_243604 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 935, 8), isinstance_call_result_243603)
        # Assigning a type to the variable 'if_condition_243604' (line 935)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 8), 'if_condition_243604', if_condition_243604)
        # SSA begins for if statement (line 935)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to open(...): (line 936)
        # Processing the call arguments (line 936)
        # Getting the type of 'fname_or_fh' (line 936)
        fname_or_fh_243606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 22), 'fname_or_fh', False)
        unicode_243607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 35), 'unicode', u'wb')
        # Processing the call keyword arguments (line 936)
        kwargs_243608 = {}
        # Getting the type of 'open' (line 936)
        open_243605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 17), 'open', False)
        # Calling open(args, kwargs) (line 936)
        open_call_result_243609 = invoke(stypy.reporting.localization.Localization(__file__, 936, 17), open_243605, *[fname_or_fh_243606, unicode_243607], **kwargs_243608)
        
        with_243610 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 936, 17), open_call_result_243609, 'with parameter', '__enter__', '__exit__')

        if with_243610:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 936)
            enter___243611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 17), open_call_result_243609, '__enter__')
            with_enter_243612 = invoke(stypy.reporting.localization.Localization(__file__, 936, 17), enter___243611)
            # Assigning a type to the variable 'fh' (line 936)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 17), 'fh', with_enter_243612)
            
            # Call to _print_png_to_fh(...): (line 937)
            # Processing the call arguments (line 937)
            # Getting the type of 'fh' (line 937)
            fh_243615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 38), 'fh', False)
            # Getting the type of 'args' (line 937)
            args_243616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 43), 'args', False)
            # Processing the call keyword arguments (line 937)
            # Getting the type of 'kwargs' (line 937)
            kwargs_243617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 51), 'kwargs', False)
            kwargs_243618 = {'kwargs_243617': kwargs_243617}
            # Getting the type of 'self' (line 937)
            self_243613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 16), 'self', False)
            # Obtaining the member '_print_png_to_fh' of a type (line 937)
            _print_png_to_fh_243614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 937, 16), self_243613, '_print_png_to_fh')
            # Calling _print_png_to_fh(args, kwargs) (line 937)
            _print_png_to_fh_call_result_243619 = invoke(stypy.reporting.localization.Localization(__file__, 937, 16), _print_png_to_fh_243614, *[fh_243615, args_243616], **kwargs_243618)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 936)
            exit___243620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 17), open_call_result_243609, '__exit__')
            with_exit_243621 = invoke(stypy.reporting.localization.Localization(__file__, 936, 17), exit___243620, None, None, None)

        # SSA branch for the else part of an if statement (line 935)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to is_writable_file_like(...): (line 938)
        # Processing the call arguments (line 938)
        # Getting the type of 'fname_or_fh' (line 938)
        fname_or_fh_243623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 35), 'fname_or_fh', False)
        # Processing the call keyword arguments (line 938)
        kwargs_243624 = {}
        # Getting the type of 'is_writable_file_like' (line 938)
        is_writable_file_like_243622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 13), 'is_writable_file_like', False)
        # Calling is_writable_file_like(args, kwargs) (line 938)
        is_writable_file_like_call_result_243625 = invoke(stypy.reporting.localization.Localization(__file__, 938, 13), is_writable_file_like_243622, *[fname_or_fh_243623], **kwargs_243624)
        
        # Testing the type of an if condition (line 938)
        if_condition_243626 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 938, 13), is_writable_file_like_call_result_243625)
        # Assigning a type to the variable 'if_condition_243626' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 13), 'if_condition_243626', if_condition_243626)
        # SSA begins for if statement (line 938)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _print_png_to_fh(...): (line 939)
        # Processing the call arguments (line 939)
        # Getting the type of 'fname_or_fh' (line 939)
        fname_or_fh_243629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 34), 'fname_or_fh', False)
        # Getting the type of 'args' (line 939)
        args_243630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 48), 'args', False)
        # Processing the call keyword arguments (line 939)
        # Getting the type of 'kwargs' (line 939)
        kwargs_243631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 56), 'kwargs', False)
        kwargs_243632 = {'kwargs_243631': kwargs_243631}
        # Getting the type of 'self' (line 939)
        self_243627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 12), 'self', False)
        # Obtaining the member '_print_png_to_fh' of a type (line 939)
        _print_png_to_fh_243628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 939, 12), self_243627, '_print_png_to_fh')
        # Calling _print_png_to_fh(args, kwargs) (line 939)
        _print_png_to_fh_call_result_243633 = invoke(stypy.reporting.localization.Localization(__file__, 939, 12), _print_png_to_fh_243628, *[fname_or_fh_243629, args_243630], **kwargs_243632)
        
        # SSA branch for the else part of an if statement (line 938)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 941)
        # Processing the call arguments (line 941)
        unicode_243635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 29), 'unicode', u'filename must be a path or a file-like object')
        # Processing the call keyword arguments (line 941)
        kwargs_243636 = {}
        # Getting the type of 'ValueError' (line 941)
        ValueError_243634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 941)
        ValueError_call_result_243637 = invoke(stypy.reporting.localization.Localization(__file__, 941, 18), ValueError_243634, *[unicode_243635], **kwargs_243636)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 941, 12), ValueError_call_result_243637, 'raise parameter', BaseException)
        # SSA join for if statement (line 938)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 935)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'print_png(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'print_png' in the type store
        # Getting the type of 'stypy_return_type' (line 927)
        stypy_return_type_243638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243638)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'print_png'
        return stypy_return_type_243638


    @norecursion
    def get_renderer(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_renderer'
        module_type_store = module_type_store.open_function_context('get_renderer', 943, 4, False)
        # Assigning a type to the variable 'self' (line 944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasPgf.get_renderer.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasPgf.get_renderer.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasPgf.get_renderer.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasPgf.get_renderer.__dict__.__setitem__('stypy_function_name', 'FigureCanvasPgf.get_renderer')
        FigureCanvasPgf.get_renderer.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasPgf.get_renderer.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasPgf.get_renderer.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasPgf.get_renderer.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasPgf.get_renderer.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasPgf.get_renderer.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasPgf.get_renderer.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasPgf.get_renderer', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_renderer', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_renderer(...)' code ##################

        
        # Call to RendererPgf(...): (line 944)
        # Processing the call arguments (line 944)
        # Getting the type of 'self' (line 944)
        self_243640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 27), 'self', False)
        # Obtaining the member 'figure' of a type (line 944)
        figure_243641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 27), self_243640, 'figure')
        # Getting the type of 'None' (line 944)
        None_243642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 40), 'None', False)
        # Processing the call keyword arguments (line 944)
        # Getting the type of 'True' (line 944)
        True_243643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 52), 'True', False)
        keyword_243644 = True_243643
        kwargs_243645 = {'dummy': keyword_243644}
        # Getting the type of 'RendererPgf' (line 944)
        RendererPgf_243639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 15), 'RendererPgf', False)
        # Calling RendererPgf(args, kwargs) (line 944)
        RendererPgf_call_result_243646 = invoke(stypy.reporting.localization.Localization(__file__, 944, 15), RendererPgf_243639, *[figure_243641, None_243642], **kwargs_243645)
        
        # Assigning a type to the variable 'stypy_return_type' (line 944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'stypy_return_type', RendererPgf_call_result_243646)
        
        # ################# End of 'get_renderer(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_renderer' in the type store
        # Getting the type of 'stypy_return_type' (line 943)
        stypy_return_type_243647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_243647)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_renderer'
        return stypy_return_type_243647


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 761, 0, False)
        # Assigning a type to the variable 'self' (line 762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasPgf.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'FigureCanvasPgf' (line 761)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 0), 'FigureCanvasPgf', FigureCanvasPgf)

# Assigning a Dict to a Name (line 762):

# Obtaining an instance of the builtin type 'dict' (line 762)
dict_243648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 762, 16), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 762)
# Adding element type (key, value) (line 762)
unicode_243649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 762, 17), 'unicode', u'pgf')
unicode_243650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 762, 24), 'unicode', u'LaTeX PGF picture')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 762, 16), dict_243648, (unicode_243649, unicode_243650))
# Adding element type (key, value) (line 762)
unicode_243651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 17), 'unicode', u'pdf')
unicode_243652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 24), 'unicode', u'LaTeX compiled PGF picture')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 762, 16), dict_243648, (unicode_243651, unicode_243652))
# Adding element type (key, value) (line 762)
unicode_243653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 17), 'unicode', u'png')
unicode_243654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 24), 'unicode', u'Portable Network Graphics')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 762, 16), dict_243648, (unicode_243653, unicode_243654))

# Getting the type of 'FigureCanvasPgf'
FigureCanvasPgf_243655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasPgf')
# Setting the type of the member 'filetypes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasPgf_243655, 'filetypes', dict_243648)
# Declaration of the 'FigureManagerPgf' class
# Getting the type of 'FigureManagerBase' (line 947)
FigureManagerBase_243656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 23), 'FigureManagerBase')

class FigureManagerPgf(FigureManagerBase_243656, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 948, 4, False)
        # Assigning a type to the variable 'self' (line 949)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerPgf.__init__', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 949)
        # Processing the call arguments (line 949)
        # Getting the type of 'self' (line 949)
        self_243659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 35), 'self', False)
        # Getting the type of 'args' (line 949)
        args_243660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 42), 'args', False)
        # Processing the call keyword arguments (line 949)
        kwargs_243661 = {}
        # Getting the type of 'FigureManagerBase' (line 949)
        FigureManagerBase_243657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 8), 'FigureManagerBase', False)
        # Obtaining the member '__init__' of a type (line 949)
        init___243658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 8), FigureManagerBase_243657, '__init__')
        # Calling __init__(args, kwargs) (line 949)
        init___call_result_243662 = invoke(stypy.reporting.localization.Localization(__file__, 949, 8), init___243658, *[self_243659, args_243660], **kwargs_243661)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'FigureManagerPgf' (line 947)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 0), 'FigureManagerPgf', FigureManagerPgf)
# Declaration of the '_BackendPgf' class
# Getting the type of '_Backend' (line 953)
_Backend_243663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 18), '_Backend')

class _BackendPgf(_Backend_243663, ):
    
    # Assigning a Name to a Name (line 954):
    
    # Assigning a Name to a Name (line 954):
    
    # Assigning a Name to a Name (line 955):
    
    # Assigning a Name to a Name (line 955):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 952, 0, False)
        # Assigning a type to the variable 'self' (line 953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_BackendPgf.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_BackendPgf' (line 952)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 0), '_BackendPgf', _BackendPgf)

# Assigning a Name to a Name (line 954):
# Getting the type of 'FigureCanvasPgf' (line 954)
FigureCanvasPgf_243664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 19), 'FigureCanvasPgf')
# Getting the type of '_BackendPgf'
_BackendPgf_243665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_BackendPgf')
# Setting the type of the member 'FigureCanvas' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _BackendPgf_243665, 'FigureCanvas', FigureCanvasPgf_243664)

# Assigning a Name to a Name (line 955):
# Getting the type of 'FigureManagerPgf' (line 955)
FigureManagerPgf_243666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 20), 'FigureManagerPgf')
# Getting the type of '_BackendPgf'
_BackendPgf_243667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_BackendPgf')
# Setting the type of the member 'FigureManager' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _BackendPgf_243667, 'FigureManager', FigureManagerPgf_243666)

@norecursion
def _cleanup_all(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_cleanup_all'
    module_type_store = module_type_store.open_function_context('_cleanup_all', 958, 0, False)
    
    # Passed parameters checking function
    _cleanup_all.stypy_localization = localization
    _cleanup_all.stypy_type_of_self = None
    _cleanup_all.stypy_type_store = module_type_store
    _cleanup_all.stypy_function_name = '_cleanup_all'
    _cleanup_all.stypy_param_names_list = []
    _cleanup_all.stypy_varargs_param_name = None
    _cleanup_all.stypy_kwargs_param_name = None
    _cleanup_all.stypy_call_defaults = defaults
    _cleanup_all.stypy_call_varargs = varargs
    _cleanup_all.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_cleanup_all', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_cleanup_all', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_cleanup_all(...)' code ##################

    
    # Call to _cleanup_remaining_instances(...): (line 959)
    # Processing the call keyword arguments (line 959)
    kwargs_243670 = {}
    # Getting the type of 'LatexManager' (line 959)
    LatexManager_243668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 4), 'LatexManager', False)
    # Obtaining the member '_cleanup_remaining_instances' of a type (line 959)
    _cleanup_remaining_instances_243669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 4), LatexManager_243668, '_cleanup_remaining_instances')
    # Calling _cleanup_remaining_instances(args, kwargs) (line 959)
    _cleanup_remaining_instances_call_result_243671 = invoke(stypy.reporting.localization.Localization(__file__, 959, 4), _cleanup_remaining_instances_243669, *[], **kwargs_243670)
    
    
    # Call to cleanup_remaining_tmpdirs(...): (line 960)
    # Processing the call keyword arguments (line 960)
    kwargs_243674 = {}
    # Getting the type of 'TmpDirCleaner' (line 960)
    TmpDirCleaner_243672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 4), 'TmpDirCleaner', False)
    # Obtaining the member 'cleanup_remaining_tmpdirs' of a type (line 960)
    cleanup_remaining_tmpdirs_243673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 4), TmpDirCleaner_243672, 'cleanup_remaining_tmpdirs')
    # Calling cleanup_remaining_tmpdirs(args, kwargs) (line 960)
    cleanup_remaining_tmpdirs_call_result_243675 = invoke(stypy.reporting.localization.Localization(__file__, 960, 4), cleanup_remaining_tmpdirs_243673, *[], **kwargs_243674)
    
    
    # ################# End of '_cleanup_all(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_cleanup_all' in the type store
    # Getting the type of 'stypy_return_type' (line 958)
    stypy_return_type_243676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_243676)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_cleanup_all'
    return stypy_return_type_243676

# Assigning a type to the variable '_cleanup_all' (line 958)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 0), '_cleanup_all', _cleanup_all)

# Call to register(...): (line 962)
# Processing the call arguments (line 962)
# Getting the type of '_cleanup_all' (line 962)
_cleanup_all_243679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 16), '_cleanup_all', False)
# Processing the call keyword arguments (line 962)
kwargs_243680 = {}
# Getting the type of 'atexit' (line 962)
atexit_243677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 0), 'atexit', False)
# Obtaining the member 'register' of a type (line 962)
register_243678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 0), atexit_243677, 'register')
# Calling register(args, kwargs) (line 962)
register_call_result_243681 = invoke(stypy.reporting.localization.Localization(__file__, 962, 0), register_243678, *[_cleanup_all_243679], **kwargs_243680)


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
