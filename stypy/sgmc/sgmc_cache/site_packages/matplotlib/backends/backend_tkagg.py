
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: # Todd Miller   jmiller@stsci.edu
2: from __future__ import (absolute_import, division, print_function,
3:                         unicode_literals)
4: 
5: import six
6: from six.moves import tkinter as Tk
7: from six.moves import tkinter_filedialog as FileDialog
8: 
9: import os, sys, math
10: import os.path
11: 
12: # Paint image to Tk photo blitter extension
13: import matplotlib.backends.tkagg as tkagg
14: 
15: from matplotlib.backends.backend_agg import FigureCanvasAgg
16: import matplotlib.backends.windowing as windowing
17: 
18: import matplotlib
19: from matplotlib.backend_bases import (
20:     _Backend, FigureCanvasBase, FigureManagerBase, GraphicsContextBase,
21:     NavigationToolbar2, RendererBase, StatusbarBase, TimerBase,
22:     ToolContainerBase, cursors)
23: from matplotlib.backend_managers import ToolManager
24: from matplotlib import backend_tools
25: from matplotlib._pylab_helpers import Gcf
26: 
27: from matplotlib.figure import Figure
28: 
29: from matplotlib.widgets import SubplotTool
30: 
31: import matplotlib.cbook as cbook
32: 
33: rcParams = matplotlib.rcParams
34: verbose = matplotlib.verbose
35: 
36: 
37: backend_version = Tk.TkVersion
38: 
39: # the true dots per inch on the screen; should be display dependent
40: # see http://groups.google.com/groups?q=screen+dpi+x11&hl=en&lr=&ie=UTF-8&oe=UTF-8&safe=off&selm=7077.26e81ad5%40swift.cs.tcd.ie&rnum=5 for some info about screen dpi
41: PIXELS_PER_INCH = 75
42: 
43: cursord = {
44:     cursors.MOVE: "fleur",
45:     cursors.HAND: "hand2",
46:     cursors.POINTER: "arrow",
47:     cursors.SELECT_REGION: "tcross",
48:     cursors.WAIT: "watch",
49:     }
50: 
51: 
52: def raise_msg_to_str(msg):
53:     '''msg is a return arg from a raise.  Join with new lines'''
54:     if not isinstance(msg, six.string_types):
55:         msg = '\n'.join(map(str, msg))
56:     return msg
57: 
58: def error_msg_tkpaint(msg, parent=None):
59:     from six.moves import tkinter_messagebox as tkMessageBox
60:     tkMessageBox.showerror("matplotlib", msg)
61: 
62: 
63: class TimerTk(TimerBase):
64:     '''
65:     Subclass of :class:`backend_bases.TimerBase` that uses Tk's timer events.
66: 
67:     Attributes
68:     ----------
69:     interval : int
70:         The time between timer events in milliseconds. Default is 1000 ms.
71:     single_shot : bool
72:         Boolean flag indicating whether this timer should operate as single
73:         shot (run once and then stop). Defaults to False.
74:     callbacks : list
75:         Stores list of (func, args) tuples that will be called upon timer
76:         events. This list can be manipulated directly, or the functions
77:         `add_callback` and `remove_callback` can be used.
78: 
79:     '''
80:     def __init__(self, parent, *args, **kwargs):
81:         TimerBase.__init__(self, *args, **kwargs)
82:         self.parent = parent
83:         self._timer = None
84: 
85:     def _timer_start(self):
86:         self._timer_stop()
87:         self._timer = self.parent.after(self._interval, self._on_timer)
88: 
89:     def _timer_stop(self):
90:         if self._timer is not None:
91:             self.parent.after_cancel(self._timer)
92:         self._timer = None
93: 
94:     def _on_timer(self):
95:         TimerBase._on_timer(self)
96: 
97:         # Tk after() is only a single shot, so we need to add code here to
98:         # reset the timer if we're not operating in single shot mode.  However,
99:         # if _timer is None, this means that _timer_stop has been called; so
100:         # don't recreate the timer in that case.
101:         if not self._single and self._timer:
102:             self._timer = self.parent.after(self._interval, self._on_timer)
103:         else:
104:             self._timer = None
105: 
106: 
107: class FigureCanvasTkAgg(FigureCanvasAgg):
108:     keyvald = {65507 : 'control',
109:                65505 : 'shift',
110:                65513 : 'alt',
111:                65515 : 'super',
112:                65508 : 'control',
113:                65506 : 'shift',
114:                65514 : 'alt',
115:                65361 : 'left',
116:                65362 : 'up',
117:                65363 : 'right',
118:                65364 : 'down',
119:                65307 : 'escape',
120:                65470 : 'f1',
121:                65471 : 'f2',
122:                65472 : 'f3',
123:                65473 : 'f4',
124:                65474 : 'f5',
125:                65475 : 'f6',
126:                65476 : 'f7',
127:                65477 : 'f8',
128:                65478 : 'f9',
129:                65479 : 'f10',
130:                65480 : 'f11',
131:                65481 : 'f12',
132:                65300 : 'scroll_lock',
133:                65299 : 'break',
134:                65288 : 'backspace',
135:                65293 : 'enter',
136:                65379 : 'insert',
137:                65535 : 'delete',
138:                65360 : 'home',
139:                65367 : 'end',
140:                65365 : 'pageup',
141:                65366 : 'pagedown',
142:                65438 : '0',
143:                65436 : '1',
144:                65433 : '2',
145:                65435 : '3',
146:                65430 : '4',
147:                65437 : '5',
148:                65432 : '6',
149:                65429 : '7',
150:                65431 : '8',
151:                65434 : '9',
152:                65451 : '+',
153:                65453 : '-',
154:                65450 : '*',
155:                65455 : '/',
156:                65439 : 'dec',
157:                65421 : 'enter',
158:                }
159: 
160:     _keycode_lookup = {
161:                        262145: 'control',
162:                        524320: 'alt',
163:                        524352: 'alt',
164:                        1048584: 'super',
165:                        1048592: 'super',
166:                        131074: 'shift',
167:                        131076: 'shift',
168:                        }
169:     '''_keycode_lookup is used for badly mapped (i.e. no event.key_sym set)
170:        keys on apple keyboards.'''
171: 
172:     def __init__(self, figure, master=None, resize_callback=None):
173:         FigureCanvasAgg.__init__(self, figure)
174:         self._idle = True
175:         self._idle_callback = None
176:         t1,t2,w,h = self.figure.bbox.bounds
177:         w, h = int(w), int(h)
178:         self._tkcanvas = Tk.Canvas(
179:             master=master, width=w, height=h, borderwidth=0,
180:             highlightthickness=0)
181:         self._tkphoto = Tk.PhotoImage(
182:             master=self._tkcanvas, width=w, height=h)
183:         self._tkcanvas.create_image(w//2, h//2, image=self._tkphoto)
184:         self._resize_callback = resize_callback
185:         self._tkcanvas.bind("<Configure>", self.resize)
186:         self._tkcanvas.bind("<Key>", self.key_press)
187:         self._tkcanvas.bind("<Motion>", self.motion_notify_event)
188:         self._tkcanvas.bind("<KeyRelease>", self.key_release)
189:         for name in "<Button-1>", "<Button-2>", "<Button-3>":
190:             self._tkcanvas.bind(name, self.button_press_event)
191:         for name in "<Double-Button-1>", "<Double-Button-2>", "<Double-Button-3>":
192:             self._tkcanvas.bind(name, self.button_dblclick_event)
193:         for name in "<ButtonRelease-1>", "<ButtonRelease-2>", "<ButtonRelease-3>":
194:             self._tkcanvas.bind(name, self.button_release_event)
195: 
196:         # Mouse wheel on Linux generates button 4/5 events
197:         for name in "<Button-4>", "<Button-5>":
198:             self._tkcanvas.bind(name, self.scroll_event)
199:         # Mouse wheel for windows goes to the window with the focus.
200:         # Since the canvas won't usually have the focus, bind the
201:         # event to the window containing the canvas instead.
202:         # See http://wiki.tcl.tk/3893 (mousewheel) for details
203:         root = self._tkcanvas.winfo_toplevel()
204:         root.bind("<MouseWheel>", self.scroll_event_windows, "+")
205: 
206:         # Can't get destroy events by binding to _tkcanvas. Therefore, bind
207:         # to the window and filter.
208:         def filter_destroy(evt):
209:             if evt.widget is self._tkcanvas:
210:                 self.close_event()
211:         root.bind("<Destroy>", filter_destroy, "+")
212: 
213:         self._master = master
214:         self._tkcanvas.focus_set()
215: 
216:     def resize(self, event):
217:         width, height = event.width, event.height
218:         if self._resize_callback is not None:
219:             self._resize_callback(event)
220: 
221:         # compute desired figure size in inches
222:         dpival = self.figure.dpi
223:         winch = width/dpival
224:         hinch = height/dpival
225:         self.figure.set_size_inches(winch, hinch, forward=False)
226: 
227: 
228:         self._tkcanvas.delete(self._tkphoto)
229:         self._tkphoto = Tk.PhotoImage(
230:             master=self._tkcanvas, width=int(width), height=int(height))
231:         self._tkcanvas.create_image(int(width/2),int(height/2),image=self._tkphoto)
232:         self.resize_event()
233:         self.show()
234: 
235:         # a resizing will in general move the pointer position
236:         # relative to the canvas, so process it as a motion notify
237:         # event.  An intended side effect of this call is to allow
238:         # window raises (which trigger a resize) to get the cursor
239:         # position to the mpl event framework so key presses which are
240:         # over the axes will work w/o clicks or explicit motion
241:         self._update_pointer_position(event)
242: 
243:     def _update_pointer_position(self, guiEvent=None):
244:         '''
245:         Figure out if we are inside the canvas or not and update the
246:         canvas enter/leave events
247:         '''
248:         # if the pointer if over the canvas, set the lastx and lasty
249:         # attrs of the canvas so it can process event w/o mouse click
250:         # or move
251: 
252:         # the window's upper, left coords in screen coords
253:         xw = self._tkcanvas.winfo_rootx()
254:         yw = self._tkcanvas.winfo_rooty()
255:         # the pointer's location in screen coords
256:         xp, yp = self._tkcanvas.winfo_pointerxy()
257: 
258:         # not figure out the canvas coordinates of the pointer
259:         xc = xp - xw
260:         yc = yp - yw
261: 
262:         # flip top/bottom
263:         yc = self.figure.bbox.height - yc
264: 
265:         # JDH: this method was written originally to get the pointer
266:         # location to the backend lastx and lasty attrs so that events
267:         # like KeyEvent can be handled without mouse events.  e.g., if
268:         # the cursor is already above the axes, then key presses like
269:         # 'g' should toggle the grid.  In order for this to work in
270:         # backend_bases, the canvas needs to know _lastx and _lasty.
271:         # There are three ways to get this info the canvas:
272:         #
273:         # 1) set it explicitly
274:         #
275:         # 2) call enter/leave events explicitly.  The downside of this
276:         #    in the impl below is that enter could be repeatedly
277:         #    triggered if thes  mouse is over the axes and one is
278:         #    resizing with the keyboard.  This is not entirely bad,
279:         #    because the mouse position relative to the canvas is
280:         #    changing, but it may be surprising to get repeated entries
281:         #    without leaves
282:         #
283:         # 3) process it as a motion notify event.  This also has pros
284:         #    and cons.  The mouse is moving relative to the window, but
285:         #    this may surpise an event handler writer who is getting
286:         #   motion_notify_events even if the mouse has not moved
287: 
288:         # here are the three scenarios
289:         if 1:
290:             # just manually set it
291:             self._lastx, self._lasty = xc, yc
292:         elif 0:
293:             # alternate implementation: process it as a motion
294:             FigureCanvasBase.motion_notify_event(self, xc, yc, guiEvent)
295:         elif 0:
296:             # alternate implementation -- process enter/leave events
297:             # instead of motion/notify
298:             if self.figure.bbox.contains(xc, yc):
299:                 self.enter_notify_event(guiEvent, xy=(xc,yc))
300:             else:
301:                 self.leave_notify_event(guiEvent)
302: 
303:     def draw(self):
304:         FigureCanvasAgg.draw(self)
305:         tkagg.blit(self._tkphoto, self.renderer._renderer, colormode=2)
306:         self._master.update_idletasks()
307: 
308:     def blit(self, bbox=None):
309:         tkagg.blit(self._tkphoto, self.renderer._renderer, bbox=bbox, colormode=2)
310:         self._master.update_idletasks()
311: 
312:     show = draw
313: 
314:     def draw_idle(self):
315:         'update drawing area only if idle'
316:         if self._idle is False:
317:             return
318: 
319:         self._idle = False
320: 
321:         def idle_draw(*args):
322:             try:
323:                 self.draw()
324:             finally:
325:                 self._idle = True
326: 
327:         self._idle_callback = self._tkcanvas.after_idle(idle_draw)
328: 
329:     def get_tk_widget(self):
330:         '''returns the Tk widget used to implement FigureCanvasTkAgg.
331:         Although the initial implementation uses a Tk canvas,  this routine
332:         is intended to hide that fact.
333:         '''
334:         return self._tkcanvas
335: 
336:     def motion_notify_event(self, event):
337:         x = event.x
338:         # flipy so y=0 is bottom of canvas
339:         y = self.figure.bbox.height - event.y
340:         FigureCanvasBase.motion_notify_event(self, x, y, guiEvent=event)
341: 
342: 
343:     def button_press_event(self, event, dblclick=False):
344:         x = event.x
345:         # flipy so y=0 is bottom of canvas
346:         y = self.figure.bbox.height - event.y
347:         num = getattr(event, 'num', None)
348: 
349:         if sys.platform=='darwin':
350:             # 2 and 3 were reversed on the OSX platform I
351:             # tested under tkagg
352:             if   num==2: num=3
353:             elif num==3: num=2
354: 
355:         FigureCanvasBase.button_press_event(self, x, y, num, dblclick=dblclick, guiEvent=event)
356: 
357:     def button_dblclick_event(self,event):
358:         self.button_press_event(event,dblclick=True)
359: 
360:     def button_release_event(self, event):
361:         x = event.x
362:         # flipy so y=0 is bottom of canvas
363:         y = self.figure.bbox.height - event.y
364: 
365:         num = getattr(event, 'num', None)
366: 
367:         if sys.platform=='darwin':
368:             # 2 and 3 were reversed on the OSX platform I
369:             # tested under tkagg
370:             if   num==2: num=3
371:             elif num==3: num=2
372: 
373:         FigureCanvasBase.button_release_event(self, x, y, num, guiEvent=event)
374: 
375:     def scroll_event(self, event):
376:         x = event.x
377:         y = self.figure.bbox.height - event.y
378:         num = getattr(event, 'num', None)
379:         if   num==4: step = +1
380:         elif num==5: step = -1
381:         else:        step =  0
382: 
383:         FigureCanvasBase.scroll_event(self, x, y, step, guiEvent=event)
384: 
385:     def scroll_event_windows(self, event):
386:         '''MouseWheel event processor'''
387:         # need to find the window that contains the mouse
388:         w = event.widget.winfo_containing(event.x_root, event.y_root)
389:         if w == self._tkcanvas:
390:             x = event.x_root - w.winfo_rootx()
391:             y = event.y_root - w.winfo_rooty()
392:             y = self.figure.bbox.height - y
393:             step = event.delta/120.
394:             FigureCanvasBase.scroll_event(self, x, y, step, guiEvent=event)
395: 
396:     def _get_key(self, event):
397:         val = event.keysym_num
398:         if val in self.keyvald:
399:             key = self.keyvald[val]
400:         elif val == 0 and sys.platform == 'darwin' and \
401:                                         event.keycode in self._keycode_lookup:
402:             key = self._keycode_lookup[event.keycode]
403:         elif val < 256:
404:             key = chr(val)
405:         else:
406:             key = None
407: 
408:         # add modifier keys to the key string. Bit details originate from
409:         # http://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
410:         # BIT_SHIFT = 0x001; BIT_CAPSLOCK = 0x002; BIT_CONTROL = 0x004;
411:         # BIT_LEFT_ALT = 0x008; BIT_NUMLOCK = 0x010; BIT_RIGHT_ALT = 0x080;
412:         # BIT_MB_1 = 0x100; BIT_MB_2 = 0x200; BIT_MB_3 = 0x400;
413:         # In general, the modifier key is excluded from the modifier flag,
414:         # however this is not the case on "darwin", so double check that
415:         # we aren't adding repeat modifier flags to a modifier key.
416:         if sys.platform == 'win32':
417:             modifiers = [(17, 'alt', 'alt'),
418:                          (2, 'ctrl', 'control'),
419:                          ]
420:         elif sys.platform == 'darwin':
421:             modifiers = [(3, 'super', 'super'),
422:                          (4, 'alt', 'alt'),
423:                          (2, 'ctrl', 'control'),
424:                          ]
425:         else:
426:             modifiers = [(6, 'super', 'super'),
427:                          (3, 'alt', 'alt'),
428:                          (2, 'ctrl', 'control'),
429:                          ]
430: 
431:         if key is not None:
432:             # note, shift is not added to the keys as this is already accounted for
433:             for bitmask, prefix, key_name in modifiers:
434:                 if event.state & (1 << bitmask) and key_name not in key:
435:                     key = '{0}+{1}'.format(prefix, key)
436: 
437:         return key
438: 
439:     def key_press(self, event):
440:         key = self._get_key(event)
441:         FigureCanvasBase.key_press_event(self, key, guiEvent=event)
442: 
443:     def key_release(self, event):
444:         key = self._get_key(event)
445:         FigureCanvasBase.key_release_event(self, key, guiEvent=event)
446: 
447:     def new_timer(self, *args, **kwargs):
448:         '''
449:         Creates a new backend-specific subclass of :class:`backend_bases.Timer`.
450:         This is useful for getting periodic events through the backend's native
451:         event loop. Implemented only for backends with GUIs.
452: 
453:         Other Parameters
454:         ----------------
455:         interval : scalar
456:             Timer interval in milliseconds
457:         callbacks : list
458:             Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``
459:             will be executed by the timer every *interval*.
460: 
461:         '''
462:         return TimerTk(self._tkcanvas, *args, **kwargs)
463: 
464:     def flush_events(self):
465:         self._master.update()
466: 
467: 
468: class FigureManagerTkAgg(FigureManagerBase):
469:     '''
470:     Attributes
471:     ----------
472:     canvas : `FigureCanvas`
473:         The FigureCanvas instance
474:     num : int or str
475:         The Figure number
476:     toolbar : tk.Toolbar
477:         The tk.Toolbar
478:     window : tk.Window
479:         The tk.Window
480: 
481:     '''
482:     def __init__(self, canvas, num, window):
483:         FigureManagerBase.__init__(self, canvas, num)
484:         self.window = window
485:         self.window.withdraw()
486:         self.set_window_title("Figure %d" % num)
487:         self.canvas = canvas
488:         self.canvas._tkcanvas.pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)
489:         self._num = num
490: 
491:         self.toolmanager = self._get_toolmanager()
492:         self.toolbar = self._get_toolbar()
493:         self.statusbar = None
494: 
495:         if self.toolmanager:
496:             backend_tools.add_tools_to_manager(self.toolmanager)
497:             if self.toolbar:
498:                 backend_tools.add_tools_to_container(self.toolbar)
499:                 self.statusbar = StatusbarTk(self.window, self.toolmanager)
500: 
501:         self._shown = False
502: 
503:         def notify_axes_change(fig):
504:             'this will be called whenever the current axes is changed'
505:             if self.toolmanager is not None:
506:                 pass
507:             elif self.toolbar is not None:
508:                 self.toolbar.update()
509:         self.canvas.figure.add_axobserver(notify_axes_change)
510: 
511:     def _get_toolbar(self):
512:         if matplotlib.rcParams['toolbar'] == 'toolbar2':
513:             toolbar = NavigationToolbar2TkAgg(self.canvas, self.window)
514:         elif matplotlib.rcParams['toolbar'] == 'toolmanager':
515:             toolbar = ToolbarTk(self.toolmanager, self.window)
516:         else:
517:             toolbar = None
518:         return toolbar
519: 
520:     def _get_toolmanager(self):
521:         if rcParams['toolbar'] == 'toolmanager':
522:             toolmanager = ToolManager(self.canvas.figure)
523:         else:
524:             toolmanager = None
525:         return toolmanager
526: 
527:     def resize(self, width, height=None):
528:         # before 09-12-22, the resize method takes a single *event*
529:         # parameter. On the other hand, the resize method of other
530:         # FigureManager class takes *width* and *height* parameter,
531:         # which is used to change the size of the window. For the
532:         # Figure.set_size_inches with forward=True work with Tk
533:         # backend, I changed the function signature but tried to keep
534:         # it backward compatible. -JJL
535: 
536:         # when a single parameter is given, consider it as a event
537:         if height is None:
538:             width = width.width
539:         else:
540:             self.canvas._tkcanvas.master.geometry("%dx%d" % (width, height))
541: 
542:         if self.toolbar is not None:
543:             self.toolbar.configure(width=width)
544: 
545:     def show(self):
546:         '''
547:         this function doesn't segfault but causes the
548:         PyEval_RestoreThread: NULL state bug on win32
549:         '''
550:         _focus = windowing.FocusManager()
551:         if not self._shown:
552:             def destroy(*args):
553:                 self.window = None
554:                 Gcf.destroy(self._num)
555:             self.canvas._tkcanvas.bind("<Destroy>", destroy)
556:             self.window.deiconify()
557:             # anim.py requires this
558:             self.window.update()
559:         else:
560:             self.canvas.draw_idle()
561:         # Raise the new window.
562:         self.canvas.manager.window.attributes('-topmost', 1)
563:         self.canvas.manager.window.attributes('-topmost', 0)
564:         self._shown = True
565: 
566:     def destroy(self, *args):
567:         if self.window is not None:
568:             #self.toolbar.destroy()
569:             if self.canvas._idle_callback:
570:                 self.canvas._tkcanvas.after_cancel(self.canvas._idle_callback)
571:             self.window.destroy()
572:         if Gcf.get_num_fig_managers()==0:
573:             if self.window is not None:
574:                 self.window.quit()
575:         self.window = None
576: 
577:     def get_window_title(self):
578:         return self.window.wm_title()
579: 
580:     def set_window_title(self, title):
581:         self.window.wm_title(title)
582: 
583:     def full_screen_toggle(self):
584:         is_fullscreen = bool(self.window.attributes('-fullscreen'))
585:         self.window.attributes('-fullscreen', not is_fullscreen)
586: 
587: 
588: class AxisMenu(object):
589:     def __init__(self, master, naxes):
590:         self._master = master
591:         self._naxes = naxes
592:         self._mbar = Tk.Frame(master=master, relief=Tk.RAISED, borderwidth=2)
593:         self._mbar.pack(side=Tk.LEFT)
594:         self._mbutton = Tk.Menubutton(
595:             master=self._mbar, text="Axes", underline=0)
596:         self._mbutton.pack(side=Tk.LEFT, padx="2m")
597:         self._mbutton.menu = Tk.Menu(self._mbutton)
598:         self._mbutton.menu.add_command(
599:             label="Select All", command=self.select_all)
600:         self._mbutton.menu.add_command(
601:             label="Invert All", command=self.invert_all)
602:         self._axis_var = []
603:         self._checkbutton = []
604:         for i in range(naxes):
605:             self._axis_var.append(Tk.IntVar())
606:             self._axis_var[i].set(1)
607:             self._checkbutton.append(self._mbutton.menu.add_checkbutton(
608:                 label = "Axis %d" % (i+1),
609:                 variable=self._axis_var[i],
610:                 command=self.set_active))
611:             self._mbutton.menu.invoke(self._mbutton.menu.index("Select All"))
612:         self._mbutton['menu'] = self._mbutton.menu
613:         self._mbar.tk_menuBar(self._mbutton)
614:         self.set_active()
615: 
616:     def adjust(self, naxes):
617:         if self._naxes < naxes:
618:             for i in range(self._naxes, naxes):
619:                 self._axis_var.append(Tk.IntVar())
620:                 self._axis_var[i].set(1)
621:                 self._checkbutton.append( self._mbutton.menu.add_checkbutton(
622:                     label = "Axis %d" % (i+1),
623:                     variable=self._axis_var[i],
624:                     command=self.set_active))
625:         elif self._naxes > naxes:
626:             for i in range(self._naxes-1, naxes-1, -1):
627:                 del self._axis_var[i]
628:                 self._mbutton.menu.forget(self._checkbutton[i])
629:                 del self._checkbutton[i]
630:         self._naxes = naxes
631:         self.set_active()
632: 
633:     def get_indices(self):
634:         a = [i for i in range(len(self._axis_var)) if self._axis_var[i].get()]
635:         return a
636: 
637:     def set_active(self):
638:         self._master.set_active(self.get_indices())
639: 
640:     def invert_all(self):
641:         for a in self._axis_var:
642:             a.set(not a.get())
643:         self.set_active()
644: 
645:     def select_all(self):
646:         for a in self._axis_var:
647:             a.set(1)
648:         self.set_active()
649: 
650: 
651: class NavigationToolbar2TkAgg(NavigationToolbar2, Tk.Frame):
652:     '''
653:     Attributes
654:     ----------
655:     canvas : `FigureCanvas`
656:         the figure canvas on which to operate
657:     win : tk.Window
658:         the tk.Window which owns this toolbar
659: 
660:     '''
661:     def __init__(self, canvas, window):
662:         self.canvas = canvas
663:         self.window = window
664:         self._idle = True
665:         NavigationToolbar2.__init__(self, canvas)
666: 
667:     def destroy(self, *args):
668:         del self.message
669:         Tk.Frame.destroy(self, *args)
670: 
671:     def set_message(self, s):
672:         self.message.set(s)
673: 
674:     def draw_rubberband(self, event, x0, y0, x1, y1):
675:         height = self.canvas.figure.bbox.height
676:         y0 = height - y0
677:         y1 = height - y1
678:         if hasattr(self, "lastrect"):
679:             self.canvas._tkcanvas.delete(self.lastrect)
680:         self.lastrect = self.canvas._tkcanvas.create_rectangle(x0, y0, x1, y1)
681: 
682:         #self.canvas.draw()
683: 
684:     def release(self, event):
685:         try: self.lastrect
686:         except AttributeError: pass
687:         else:
688:             self.canvas._tkcanvas.delete(self.lastrect)
689:             del self.lastrect
690: 
691:     def set_cursor(self, cursor):
692:         self.window.configure(cursor=cursord[cursor])
693:         self.window.update_idletasks()
694: 
695:     def _Button(self, text, file, command, extension='.gif'):
696:         img_file = os.path.join(
697:             rcParams['datapath'], 'images', file + extension)
698:         im = Tk.PhotoImage(master=self, file=img_file)
699:         b = Tk.Button(
700:             master=self, text=text, padx=2, pady=2, image=im, command=command)
701:         b._ntimage = im
702:         b.pack(side=Tk.LEFT)
703:         return b
704: 
705:     def _Spacer(self):
706:         # Buttons are 30px high, so make this 26px tall with padding to center it
707:         s = Tk.Frame(
708:             master=self, height=26, relief=Tk.RIDGE, pady=2, bg="DarkGray")
709:         s.pack(side=Tk.LEFT, padx=5)
710:         return s
711: 
712:     def _init_toolbar(self):
713:         xmin, xmax = self.canvas.figure.bbox.intervalx
714:         height, width = 50, xmax-xmin
715:         Tk.Frame.__init__(self, master=self.window,
716:                           width=int(width), height=int(height),
717:                           borderwidth=2)
718: 
719:         self.update()  # Make axes menu
720: 
721:         for text, tooltip_text, image_file, callback in self.toolitems:
722:             if text is None:
723:                 # Add a spacer; return value is unused.
724:                 self._Spacer()
725:             else:
726:                 button = self._Button(text=text, file=image_file,
727:                                       command=getattr(self, callback))
728:                 if tooltip_text is not None:
729:                     ToolTip.createToolTip(button, tooltip_text)
730: 
731:         self.message = Tk.StringVar(master=self)
732:         self._message_label = Tk.Label(master=self, textvariable=self.message)
733:         self._message_label.pack(side=Tk.RIGHT)
734:         self.pack(side=Tk.BOTTOM, fill=Tk.X)
735: 
736:     def configure_subplots(self):
737:         toolfig = Figure(figsize=(6,3))
738:         window = Tk.Tk()
739:         canvas = FigureCanvasTkAgg(toolfig, master=window)
740:         toolfig.subplots_adjust(top=0.9)
741:         tool =  SubplotTool(self.canvas.figure, toolfig)
742:         canvas.show()
743:         canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)
744: 
745:     def save_figure(self, *args):
746:         from six.moves import tkinter_tkfiledialog, tkinter_messagebox
747:         filetypes = self.canvas.get_supported_filetypes().copy()
748:         default_filetype = self.canvas.get_default_filetype()
749: 
750:         # Tk doesn't provide a way to choose a default filetype,
751:         # so we just have to put it first
752:         default_filetype_name = filetypes.pop(default_filetype)
753:         sorted_filetypes = ([(default_filetype, default_filetype_name)]
754:                             + sorted(six.iteritems(filetypes)))
755:         tk_filetypes = [(name, '*.%s' % ext) for ext, name in sorted_filetypes]
756: 
757:         # adding a default extension seems to break the
758:         # asksaveasfilename dialog when you choose various save types
759:         # from the dropdown.  Passing in the empty string seems to
760:         # work - JDH!
761:         #defaultextension = self.canvas.get_default_filetype()
762:         defaultextension = ''
763:         initialdir = os.path.expanduser(rcParams['savefig.directory'])
764:         initialfile = self.canvas.get_default_filename()
765:         fname = tkinter_tkfiledialog.asksaveasfilename(
766:             master=self.window,
767:             title='Save the figure',
768:             filetypes=tk_filetypes,
769:             defaultextension=defaultextension,
770:             initialdir=initialdir,
771:             initialfile=initialfile,
772:             )
773: 
774:         if fname in ["", ()]:
775:             return
776:         # Save dir for next time, unless empty str (i.e., use cwd).
777:         if initialdir != "":
778:             rcParams['savefig.directory'] = (
779:                 os.path.dirname(six.text_type(fname)))
780:         try:
781:             # This method will handle the delegation to the correct type
782:             self.canvas.figure.savefig(fname)
783:         except Exception as e:
784:             tkinter_messagebox.showerror("Error saving file", str(e))
785: 
786:     def set_active(self, ind):
787:         self._ind = ind
788:         self._active = [self._axes[i] for i in self._ind]
789: 
790:     def update(self):
791:         _focus = windowing.FocusManager()
792:         self._axes = self.canvas.figure.axes
793:         NavigationToolbar2.update(self)
794: 
795: 
796: class ToolTip(object):
797:     '''
798:     Tooltip recipe from
799:     http://www.voidspace.org.uk/python/weblog/arch_d7_2006_07_01.shtml#e387
800:     '''
801:     @staticmethod
802:     def createToolTip(widget, text):
803:         toolTip = ToolTip(widget)
804:         def enter(event):
805:             toolTip.showtip(text)
806:         def leave(event):
807:             toolTip.hidetip()
808:         widget.bind('<Enter>', enter)
809:         widget.bind('<Leave>', leave)
810: 
811:     def __init__(self, widget):
812:         self.widget = widget
813:         self.tipwindow = None
814:         self.id = None
815:         self.x = self.y = 0
816: 
817:     def showtip(self, text):
818:         "Display text in tooltip window"
819:         self.text = text
820:         if self.tipwindow or not self.text:
821:             return
822:         x, y, _, _ = self.widget.bbox("insert")
823:         x = x + self.widget.winfo_rootx() + 27
824:         y = y + self.widget.winfo_rooty()
825:         self.tipwindow = tw = Tk.Toplevel(self.widget)
826:         tw.wm_overrideredirect(1)
827:         tw.wm_geometry("+%d+%d" % (x, y))
828:         try:
829:             # For Mac OS
830:             tw.tk.call("::tk::unsupported::MacWindowStyle",
831:                        "style", tw._w,
832:                        "help", "noActivates")
833:         except Tk.TclError:
834:             pass
835:         label = Tk.Label(tw, text=self.text, justify=Tk.LEFT,
836:                          background="#ffffe0", relief=Tk.SOLID, borderwidth=1)
837:         label.pack(ipadx=1)
838: 
839:     def hidetip(self):
840:         tw = self.tipwindow
841:         self.tipwindow = None
842:         if tw:
843:             tw.destroy()
844: 
845: 
846: class RubberbandTk(backend_tools.RubberbandBase):
847:     def __init__(self, *args, **kwargs):
848:         backend_tools.RubberbandBase.__init__(self, *args, **kwargs)
849: 
850:     def draw_rubberband(self, x0, y0, x1, y1):
851:         height = self.figure.canvas.figure.bbox.height
852:         y0 = height - y0
853:         y1 = height - y1
854:         if hasattr(self, "lastrect"):
855:             self.figure.canvas._tkcanvas.delete(self.lastrect)
856:         self.lastrect = self.figure.canvas._tkcanvas.create_rectangle(
857:             x0, y0, x1, y1)
858: 
859:     def remove_rubberband(self):
860:         if hasattr(self, "lastrect"):
861:             self.figure.canvas._tkcanvas.delete(self.lastrect)
862:             del self.lastrect
863: 
864: 
865: class SetCursorTk(backend_tools.SetCursorBase):
866:     def set_cursor(self, cursor):
867:         self.figure.canvas.manager.window.configure(cursor=cursord[cursor])
868: 
869: 
870: class ToolbarTk(ToolContainerBase, Tk.Frame):
871:     def __init__(self, toolmanager, window):
872:         ToolContainerBase.__init__(self, toolmanager)
873:         xmin, xmax = self.toolmanager.canvas.figure.bbox.intervalx
874:         height, width = 50, xmax - xmin
875:         Tk.Frame.__init__(self, master=window,
876:                           width=int(width), height=int(height),
877:                           borderwidth=2)
878:         self._toolitems = {}
879:         self.pack(side=Tk.TOP, fill=Tk.X)
880:         self._groups = {}
881: 
882:     def add_toolitem(
883:             self, name, group, position, image_file, description, toggle):
884:         frame = self._get_groupframe(group)
885:         button = self._Button(name, image_file, toggle, frame)
886:         if description is not None:
887:             ToolTip.createToolTip(button, description)
888:         self._toolitems.setdefault(name, [])
889:         self._toolitems[name].append(button)
890: 
891:     def _get_groupframe(self, group):
892:         if group not in self._groups:
893:             if self._groups:
894:                 self._add_separator()
895:             frame = Tk.Frame(master=self, borderwidth=0)
896:             frame.pack(side=Tk.LEFT, fill=Tk.Y)
897:             self._groups[group] = frame
898:         return self._groups[group]
899: 
900:     def _add_separator(self):
901:         separator = Tk.Frame(master=self, bd=5, width=1, bg='black')
902:         separator.pack(side=Tk.LEFT, fill=Tk.Y, padx=2)
903: 
904:     def _Button(self, text, image_file, toggle, frame):
905:         if image_file is not None:
906:             im = Tk.PhotoImage(master=self, file=image_file)
907:         else:
908:             im = None
909: 
910:         if not toggle:
911:             b = Tk.Button(master=frame, text=text, padx=2, pady=2, image=im,
912:                           command=lambda: self._button_click(text))
913:         else:
914:             b = Tk.Checkbutton(master=frame, text=text, padx=2, pady=2,
915:                                image=im, indicatoron=False,
916:                                command=lambda: self._button_click(text))
917:         b._ntimage = im
918:         b.pack(side=Tk.LEFT)
919:         return b
920: 
921:     def _button_click(self, name):
922:         self.trigger_tool(name)
923: 
924:     def toggle_toolitem(self, name, toggled):
925:         if name not in self._toolitems:
926:             return
927:         for toolitem in self._toolitems[name]:
928:             if toggled:
929:                 toolitem.select()
930:             else:
931:                 toolitem.deselect()
932: 
933:     def remove_toolitem(self, name):
934:         for toolitem in self._toolitems[name]:
935:             toolitem.pack_forget()
936:         del self._toolitems[name]
937: 
938: 
939: class StatusbarTk(StatusbarBase, Tk.Frame):
940:     def __init__(self, window, *args, **kwargs):
941:         StatusbarBase.__init__(self, *args, **kwargs)
942:         xmin, xmax = self.toolmanager.canvas.figure.bbox.intervalx
943:         height, width = 50, xmax - xmin
944:         Tk.Frame.__init__(self, master=window,
945:                           width=int(width), height=int(height),
946:                           borderwidth=2)
947:         self._message = Tk.StringVar(master=self)
948:         self._message_label = Tk.Label(master=self, textvariable=self._message)
949:         self._message_label.pack(side=Tk.RIGHT)
950:         self.pack(side=Tk.TOP, fill=Tk.X)
951: 
952:     def set_message(self, s):
953:         self._message.set(s)
954: 
955: 
956: class SaveFigureTk(backend_tools.SaveFigureBase):
957:     def trigger(self, *args):
958:         from six.moves import tkinter_tkfiledialog, tkinter_messagebox
959:         filetypes = self.figure.canvas.get_supported_filetypes().copy()
960:         default_filetype = self.figure.canvas.get_default_filetype()
961: 
962:         # Tk doesn't provide a way to choose a default filetype,
963:         # so we just have to put it first
964:         default_filetype_name = filetypes.pop(default_filetype)
965:         sorted_filetypes = ([(default_filetype, default_filetype_name)]
966:                             + sorted(six.iteritems(filetypes)))
967:         tk_filetypes = [(name, '*.%s' % ext) for ext, name in sorted_filetypes]
968: 
969:         # adding a default extension seems to break the
970:         # asksaveasfilename dialog when you choose various save types
971:         # from the dropdown.  Passing in the empty string seems to
972:         # work - JDH!
973:         # defaultextension = self.figure.canvas.get_default_filetype()
974:         defaultextension = ''
975:         initialdir = os.path.expanduser(rcParams['savefig.directory'])
976:         initialfile = self.figure.canvas.get_default_filename()
977:         fname = tkinter_tkfiledialog.asksaveasfilename(
978:             master=self.figure.canvas.manager.window,
979:             title='Save the figure',
980:             filetypes=tk_filetypes,
981:             defaultextension=defaultextension,
982:             initialdir=initialdir,
983:             initialfile=initialfile,
984:             )
985: 
986:         if fname == "" or fname == ():
987:             return
988:         else:
989:             if initialdir == '':
990:                 # explicitly missing key or empty str signals to use cwd
991:                 rcParams['savefig.directory'] = initialdir
992:             else:
993:                 # save dir for next time
994:                 rcParams['savefig.directory'] = os.path.dirname(
995:                     six.text_type(fname))
996:             try:
997:                 # This method will handle the delegation to the correct type
998:                 self.figure.savefig(fname)
999:             except Exception as e:
1000:                 tkinter_messagebox.showerror("Error saving file", str(e))
1001: 
1002: 
1003: class ConfigureSubplotsTk(backend_tools.ConfigureSubplotsBase):
1004:     def __init__(self, *args, **kwargs):
1005:         backend_tools.ConfigureSubplotsBase.__init__(self, *args, **kwargs)
1006:         self.window = None
1007: 
1008:     def trigger(self, *args):
1009:         self.init_window()
1010:         self.window.lift()
1011: 
1012:     def init_window(self):
1013:         if self.window:
1014:             return
1015: 
1016:         toolfig = Figure(figsize=(6, 3))
1017:         self.window = Tk.Tk()
1018: 
1019:         canvas = FigureCanvasTkAgg(toolfig, master=self.window)
1020:         toolfig.subplots_adjust(top=0.9)
1021:         _tool = SubplotTool(self.figure, toolfig)
1022:         canvas.show()
1023:         canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)
1024:         self.window.protocol("WM_DELETE_WINDOW", self.destroy)
1025: 
1026:     def destroy(self, *args, **kwargs):
1027:         self.window.destroy()
1028:         self.window = None
1029: 
1030: 
1031: backend_tools.ToolSaveFigure = SaveFigureTk
1032: backend_tools.ToolConfigureSubplots = ConfigureSubplotsTk
1033: backend_tools.ToolSetCursor = SetCursorTk
1034: backend_tools.ToolRubberband = RubberbandTk
1035: Toolbar = ToolbarTk
1036: 
1037: 
1038: @_Backend.export
1039: class _BackendTkAgg(_Backend):
1040:     FigureCanvas = FigureCanvasTkAgg
1041:     FigureManager = FigureManagerTkAgg
1042: 
1043:     @staticmethod
1044:     def new_figure_manager_given_figure(num, figure):
1045:         '''
1046:         Create a new figure manager instance for the given figure.
1047:         '''
1048:         _focus = windowing.FocusManager()
1049:         window = Tk.Tk(className="matplotlib")
1050:         window.withdraw()
1051: 
1052:         # Put a mpl icon on the window rather than the default tk icon.
1053:         # Tkinter doesn't allow colour icons on linux systems, but tk>=8.5 has
1054:         # a iconphoto command which we call directly. Source:
1055:         # http://mail.python.org/pipermail/tkinter-discuss/2006-November/000954.html
1056:         icon_fname = os.path.join(
1057:             rcParams['datapath'], 'images', 'matplotlib.ppm')
1058:         icon_img = Tk.PhotoImage(file=icon_fname)
1059:         try:
1060:             window.tk.call('wm', 'foobar', window._w, icon_img)
1061:         except Exception as exc:
1062:             # log the failure (due e.g. to Tk version), but carry on
1063:             verbose.report('Could not load matplotlib icon: %s' % exc)
1064: 
1065:         canvas = FigureCanvasTkAgg(figure, master=window)
1066:         manager = FigureManagerTkAgg(canvas, num, window)
1067:         if matplotlib.is_interactive():
1068:             manager.show()
1069:             canvas.draw_idle()
1070:         return manager
1071: 
1072:     @staticmethod
1073:     def trigger_manager_draw(manager):
1074:         manager.show()
1075: 
1076:     @staticmethod
1077:     def mainloop():
1078:         Tk.mainloop()
1079: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 5, 0))

# 'import six' statement (line 5)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257472 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 5, 0), 'six')

if (type(import_257472) is not StypyTypeError):

    if (import_257472 != 'pyd_module'):
        __import__(import_257472)
        sys_modules_257473 = sys.modules[import_257472]
        import_module(stypy.reporting.localization.Localization(__file__, 5, 0), 'six', sys_modules_257473.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 5, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 5)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5, 0), 'six', import_257472)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 6, 0))

# 'from six.moves import Tk' statement (line 6)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257474 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'six.moves')

if (type(import_257474) is not StypyTypeError):

    if (import_257474 != 'pyd_module'):
        __import__(import_257474)
        sys_modules_257475 = sys.modules[import_257474]
        import_from_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'six.moves', sys_modules_257475.module_type_store, module_type_store, ['tkinter'])
        nest_module(stypy.reporting.localization.Localization(__file__, 6, 0), __file__, sys_modules_257475, sys_modules_257475.module_type_store, module_type_store)
    else:
        from six.moves import tkinter as Tk

        import_from_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'six.moves', None, module_type_store, ['tkinter'], [Tk])

else:
    # Assigning a type to the variable 'six.moves' (line 6)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6, 0), 'six.moves', import_257474)

# Adding an alias
module_type_store.add_alias('Tk', 'tkinter')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'from six.moves import FileDialog' statement (line 7)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257476 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six.moves')

if (type(import_257476) is not StypyTypeError):

    if (import_257476 != 'pyd_module'):
        __import__(import_257476)
        sys_modules_257477 = sys.modules[import_257476]
        import_from_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six.moves', sys_modules_257477.module_type_store, module_type_store, ['tkinter_filedialog'])
        nest_module(stypy.reporting.localization.Localization(__file__, 7, 0), __file__, sys_modules_257477, sys_modules_257477.module_type_store, module_type_store)
    else:
        from six.moves import tkinter_filedialog as FileDialog

        import_from_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six.moves', None, module_type_store, ['tkinter_filedialog'], [FileDialog])

else:
    # Assigning a type to the variable 'six.moves' (line 7)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7, 0), 'six.moves', import_257476)

# Adding an alias
module_type_store.add_alias('FileDialog', 'tkinter_filedialog')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# Multiple import statement. import os (1/3) (line 9)
import os

import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'os', os, module_type_store)
# Multiple import statement. import sys (2/3) (line 9)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'sys', sys, module_type_store)
# Multiple import statement. import math (3/3) (line 9)
import math

import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'math', math, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import os.path' statement (line 10)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257478 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'os.path')

if (type(import_257478) is not StypyTypeError):

    if (import_257478 != 'pyd_module'):
        __import__(import_257478)
        sys_modules_257479 = sys.modules[import_257478]
        import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'os.path', sys_modules_257479.module_type_store, module_type_store)
    else:
        import os.path

        import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'os.path', os.path, module_type_store)

else:
    # Assigning a type to the variable 'os.path' (line 10)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 10, 0), 'os.path', import_257478)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'import matplotlib.backends.tkagg' statement (line 13)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257480 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'matplotlib.backends.tkagg')

if (type(import_257480) is not StypyTypeError):

    if (import_257480 != 'pyd_module'):
        __import__(import_257480)
        sys_modules_257481 = sys.modules[import_257480]
        import_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'tkagg', sys_modules_257481.module_type_store, module_type_store)
    else:
        import matplotlib.backends.tkagg as tkagg

        import_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'tkagg', matplotlib.backends.tkagg, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.backends.tkagg' (line 13)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), 'matplotlib.backends.tkagg', import_257480)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'from matplotlib.backends.backend_agg import FigureCanvasAgg' statement (line 15)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257482 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'matplotlib.backends.backend_agg')

if (type(import_257482) is not StypyTypeError):

    if (import_257482 != 'pyd_module'):
        __import__(import_257482)
        sys_modules_257483 = sys.modules[import_257482]
        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'matplotlib.backends.backend_agg', sys_modules_257483.module_type_store, module_type_store, ['FigureCanvasAgg'])
        nest_module(stypy.reporting.localization.Localization(__file__, 15, 0), __file__, sys_modules_257483, sys_modules_257483.module_type_store, module_type_store)
    else:
        from matplotlib.backends.backend_agg import FigureCanvasAgg

        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'matplotlib.backends.backend_agg', None, module_type_store, ['FigureCanvasAgg'], [FigureCanvasAgg])

else:
    # Assigning a type to the variable 'matplotlib.backends.backend_agg' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'matplotlib.backends.backend_agg', import_257482)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'import matplotlib.backends.windowing' statement (line 16)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257484 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib.backends.windowing')

if (type(import_257484) is not StypyTypeError):

    if (import_257484 != 'pyd_module'):
        __import__(import_257484)
        sys_modules_257485 = sys.modules[import_257484]
        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'windowing', sys_modules_257485.module_type_store, module_type_store)
    else:
        import matplotlib.backends.windowing as windowing

        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'windowing', matplotlib.backends.windowing, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.backends.windowing' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib.backends.windowing', import_257484)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'import matplotlib' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257486 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib')

if (type(import_257486) is not StypyTypeError):

    if (import_257486 != 'pyd_module'):
        __import__(import_257486)
        sys_modules_257487 = sys.modules[import_257486]
        import_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', sys_modules_257487.module_type_store, module_type_store)
    else:
        import matplotlib

        import_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', matplotlib, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib', import_257486)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'from matplotlib.backend_bases import _Backend, FigureCanvasBase, FigureManagerBase, GraphicsContextBase, NavigationToolbar2, RendererBase, StatusbarBase, TimerBase, ToolContainerBase, cursors' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257488 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.backend_bases')

if (type(import_257488) is not StypyTypeError):

    if (import_257488 != 'pyd_module'):
        __import__(import_257488)
        sys_modules_257489 = sys.modules[import_257488]
        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.backend_bases', sys_modules_257489.module_type_store, module_type_store, ['_Backend', 'FigureCanvasBase', 'FigureManagerBase', 'GraphicsContextBase', 'NavigationToolbar2', 'RendererBase', 'StatusbarBase', 'TimerBase', 'ToolContainerBase', 'cursors'])
        nest_module(stypy.reporting.localization.Localization(__file__, 19, 0), __file__, sys_modules_257489, sys_modules_257489.module_type_store, module_type_store)
    else:
        from matplotlib.backend_bases import _Backend, FigureCanvasBase, FigureManagerBase, GraphicsContextBase, NavigationToolbar2, RendererBase, StatusbarBase, TimerBase, ToolContainerBase, cursors

        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.backend_bases', None, module_type_store, ['_Backend', 'FigureCanvasBase', 'FigureManagerBase', 'GraphicsContextBase', 'NavigationToolbar2', 'RendererBase', 'StatusbarBase', 'TimerBase', 'ToolContainerBase', 'cursors'], [_Backend, FigureCanvasBase, FigureManagerBase, GraphicsContextBase, NavigationToolbar2, RendererBase, StatusbarBase, TimerBase, ToolContainerBase, cursors])

else:
    # Assigning a type to the variable 'matplotlib.backend_bases' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.backend_bases', import_257488)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'from matplotlib.backend_managers import ToolManager' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257490 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.backend_managers')

if (type(import_257490) is not StypyTypeError):

    if (import_257490 != 'pyd_module'):
        __import__(import_257490)
        sys_modules_257491 = sys.modules[import_257490]
        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.backend_managers', sys_modules_257491.module_type_store, module_type_store, ['ToolManager'])
        nest_module(stypy.reporting.localization.Localization(__file__, 23, 0), __file__, sys_modules_257491, sys_modules_257491.module_type_store, module_type_store)
    else:
        from matplotlib.backend_managers import ToolManager

        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.backend_managers', None, module_type_store, ['ToolManager'], [ToolManager])

else:
    # Assigning a type to the variable 'matplotlib.backend_managers' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.backend_managers', import_257490)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'from matplotlib import backend_tools' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257492 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib')

if (type(import_257492) is not StypyTypeError):

    if (import_257492 != 'pyd_module'):
        __import__(import_257492)
        sys_modules_257493 = sys.modules[import_257492]
        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib', sys_modules_257493.module_type_store, module_type_store, ['backend_tools'])
        nest_module(stypy.reporting.localization.Localization(__file__, 24, 0), __file__, sys_modules_257493, sys_modules_257493.module_type_store, module_type_store)
    else:
        from matplotlib import backend_tools

        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib', None, module_type_store, ['backend_tools'], [backend_tools])

else:
    # Assigning a type to the variable 'matplotlib' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib', import_257492)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'from matplotlib._pylab_helpers import Gcf' statement (line 25)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257494 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib._pylab_helpers')

if (type(import_257494) is not StypyTypeError):

    if (import_257494 != 'pyd_module'):
        __import__(import_257494)
        sys_modules_257495 = sys.modules[import_257494]
        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib._pylab_helpers', sys_modules_257495.module_type_store, module_type_store, ['Gcf'])
        nest_module(stypy.reporting.localization.Localization(__file__, 25, 0), __file__, sys_modules_257495, sys_modules_257495.module_type_store, module_type_store)
    else:
        from matplotlib._pylab_helpers import Gcf

        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib._pylab_helpers', None, module_type_store, ['Gcf'], [Gcf])

else:
    # Assigning a type to the variable 'matplotlib._pylab_helpers' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib._pylab_helpers', import_257494)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'from matplotlib.figure import Figure' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257496 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.figure')

if (type(import_257496) is not StypyTypeError):

    if (import_257496 != 'pyd_module'):
        __import__(import_257496)
        sys_modules_257497 = sys.modules[import_257496]
        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.figure', sys_modules_257497.module_type_store, module_type_store, ['Figure'])
        nest_module(stypy.reporting.localization.Localization(__file__, 27, 0), __file__, sys_modules_257497, sys_modules_257497.module_type_store, module_type_store)
    else:
        from matplotlib.figure import Figure

        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.figure', None, module_type_store, ['Figure'], [Figure])

else:
    # Assigning a type to the variable 'matplotlib.figure' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.figure', import_257496)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'from matplotlib.widgets import SubplotTool' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257498 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.widgets')

if (type(import_257498) is not StypyTypeError):

    if (import_257498 != 'pyd_module'):
        __import__(import_257498)
        sys_modules_257499 = sys.modules[import_257498]
        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.widgets', sys_modules_257499.module_type_store, module_type_store, ['SubplotTool'])
        nest_module(stypy.reporting.localization.Localization(__file__, 29, 0), __file__, sys_modules_257499, sys_modules_257499.module_type_store, module_type_store)
    else:
        from matplotlib.widgets import SubplotTool

        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.widgets', None, module_type_store, ['SubplotTool'], [SubplotTool])

else:
    # Assigning a type to the variable 'matplotlib.widgets' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.widgets', import_257498)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'import matplotlib.cbook' statement (line 31)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_257500 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.cbook')

if (type(import_257500) is not StypyTypeError):

    if (import_257500 != 'pyd_module'):
        __import__(import_257500)
        sys_modules_257501 = sys.modules[import_257500]
        import_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'cbook', sys_modules_257501.module_type_store, module_type_store)
    else:
        import matplotlib.cbook as cbook

        import_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'cbook', matplotlib.cbook, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 31)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.cbook', import_257500)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')


# Assigning a Attribute to a Name (line 33):

# Assigning a Attribute to a Name (line 33):
# Getting the type of 'matplotlib' (line 33)
matplotlib_257502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 33, 11), 'matplotlib')
# Obtaining the member 'rcParams' of a type (line 33)
rcParams_257503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 33, 11), matplotlib_257502, 'rcParams')
# Assigning a type to the variable 'rcParams' (line 33)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'rcParams', rcParams_257503)

# Assigning a Attribute to a Name (line 34):

# Assigning a Attribute to a Name (line 34):
# Getting the type of 'matplotlib' (line 34)
matplotlib_257504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 10), 'matplotlib')
# Obtaining the member 'verbose' of a type (line 34)
verbose_257505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 34, 10), matplotlib_257504, 'verbose')
# Assigning a type to the variable 'verbose' (line 34)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'verbose', verbose_257505)

# Assigning a Attribute to a Name (line 37):

# Assigning a Attribute to a Name (line 37):
# Getting the type of 'Tk' (line 37)
Tk_257506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 18), 'Tk')
# Obtaining the member 'TkVersion' of a type (line 37)
TkVersion_257507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 37, 18), Tk_257506, 'TkVersion')
# Assigning a type to the variable 'backend_version' (line 37)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), 'backend_version', TkVersion_257507)

# Assigning a Num to a Name (line 41):

# Assigning a Num to a Name (line 41):
int_257508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 18), 'int')
# Assigning a type to the variable 'PIXELS_PER_INCH' (line 41)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'PIXELS_PER_INCH', int_257508)

# Assigning a Dict to a Name (line 43):

# Assigning a Dict to a Name (line 43):

# Obtaining an instance of the builtin type 'dict' (line 43)
dict_257509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 10), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 43)
# Adding element type (key, value) (line 43)
# Getting the type of 'cursors' (line 44)
cursors_257510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 44, 4), 'cursors')
# Obtaining the member 'MOVE' of a type (line 44)
MOVE_257511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 44, 4), cursors_257510, 'MOVE')
unicode_257512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 18), 'unicode', u'fleur')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), dict_257509, (MOVE_257511, unicode_257512))
# Adding element type (key, value) (line 43)
# Getting the type of 'cursors' (line 45)
cursors_257513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 4), 'cursors')
# Obtaining the member 'HAND' of a type (line 45)
HAND_257514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 45, 4), cursors_257513, 'HAND')
unicode_257515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 18), 'unicode', u'hand2')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), dict_257509, (HAND_257514, unicode_257515))
# Adding element type (key, value) (line 43)
# Getting the type of 'cursors' (line 46)
cursors_257516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 4), 'cursors')
# Obtaining the member 'POINTER' of a type (line 46)
POINTER_257517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 46, 4), cursors_257516, 'POINTER')
unicode_257518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 21), 'unicode', u'arrow')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), dict_257509, (POINTER_257517, unicode_257518))
# Adding element type (key, value) (line 43)
# Getting the type of 'cursors' (line 47)
cursors_257519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 4), 'cursors')
# Obtaining the member 'SELECT_REGION' of a type (line 47)
SELECT_REGION_257520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 47, 4), cursors_257519, 'SELECT_REGION')
unicode_257521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 27), 'unicode', u'tcross')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), dict_257509, (SELECT_REGION_257520, unicode_257521))
# Adding element type (key, value) (line 43)
# Getting the type of 'cursors' (line 48)
cursors_257522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 4), 'cursors')
# Obtaining the member 'WAIT' of a type (line 48)
WAIT_257523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 48, 4), cursors_257522, 'WAIT')
unicode_257524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 18), 'unicode', u'watch')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 10), dict_257509, (WAIT_257523, unicode_257524))

# Assigning a type to the variable 'cursord' (line 43)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'cursord', dict_257509)

@norecursion
def raise_msg_to_str(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'raise_msg_to_str'
    module_type_store = module_type_store.open_function_context('raise_msg_to_str', 52, 0, False)
    
    # Passed parameters checking function
    raise_msg_to_str.stypy_localization = localization
    raise_msg_to_str.stypy_type_of_self = None
    raise_msg_to_str.stypy_type_store = module_type_store
    raise_msg_to_str.stypy_function_name = 'raise_msg_to_str'
    raise_msg_to_str.stypy_param_names_list = ['msg']
    raise_msg_to_str.stypy_varargs_param_name = None
    raise_msg_to_str.stypy_kwargs_param_name = None
    raise_msg_to_str.stypy_call_defaults = defaults
    raise_msg_to_str.stypy_call_varargs = varargs
    raise_msg_to_str.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'raise_msg_to_str', ['msg'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'raise_msg_to_str', localization, ['msg'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'raise_msg_to_str(...)' code ##################

    unicode_257525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 4), 'unicode', u'msg is a return arg from a raise.  Join with new lines')
    
    
    
    # Call to isinstance(...): (line 54)
    # Processing the call arguments (line 54)
    # Getting the type of 'msg' (line 54)
    msg_257527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 22), 'msg', False)
    # Getting the type of 'six' (line 54)
    six_257528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 27), 'six', False)
    # Obtaining the member 'string_types' of a type (line 54)
    string_types_257529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 54, 27), six_257528, 'string_types')
    # Processing the call keyword arguments (line 54)
    kwargs_257530 = {}
    # Getting the type of 'isinstance' (line 54)
    isinstance_257526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 54)
    isinstance_call_result_257531 = invoke(stypy.reporting.localization.Localization(__file__, 54, 11), isinstance_257526, *[msg_257527, string_types_257529], **kwargs_257530)
    
    # Applying the 'not' unary operator (line 54)
    result_not__257532 = python_operator(stypy.reporting.localization.Localization(__file__, 54, 7), 'not', isinstance_call_result_257531)
    
    # Testing the type of an if condition (line 54)
    if_condition_257533 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 54, 4), result_not__257532)
    # Assigning a type to the variable 'if_condition_257533' (line 54)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 54, 4), 'if_condition_257533', if_condition_257533)
    # SSA begins for if statement (line 54)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 55):
    
    # Assigning a Call to a Name (line 55):
    
    # Call to join(...): (line 55)
    # Processing the call arguments (line 55)
    
    # Call to map(...): (line 55)
    # Processing the call arguments (line 55)
    # Getting the type of 'str' (line 55)
    str_257537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 28), 'str', False)
    # Getting the type of 'msg' (line 55)
    msg_257538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 33), 'msg', False)
    # Processing the call keyword arguments (line 55)
    kwargs_257539 = {}
    # Getting the type of 'map' (line 55)
    map_257536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 24), 'map', False)
    # Calling map(args, kwargs) (line 55)
    map_call_result_257540 = invoke(stypy.reporting.localization.Localization(__file__, 55, 24), map_257536, *[str_257537, msg_257538], **kwargs_257539)
    
    # Processing the call keyword arguments (line 55)
    kwargs_257541 = {}
    unicode_257534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 14), 'unicode', u'\n')
    # Obtaining the member 'join' of a type (line 55)
    join_257535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 55, 14), unicode_257534, 'join')
    # Calling join(args, kwargs) (line 55)
    join_call_result_257542 = invoke(stypy.reporting.localization.Localization(__file__, 55, 14), join_257535, *[map_call_result_257540], **kwargs_257541)
    
    # Assigning a type to the variable 'msg' (line 55)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 55, 8), 'msg', join_call_result_257542)
    # SSA join for if statement (line 54)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'msg' (line 56)
    msg_257543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 11), 'msg')
    # Assigning a type to the variable 'stypy_return_type' (line 56)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 4), 'stypy_return_type', msg_257543)
    
    # ################# End of 'raise_msg_to_str(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'raise_msg_to_str' in the type store
    # Getting the type of 'stypy_return_type' (line 52)
    stypy_return_type_257544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_257544)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'raise_msg_to_str'
    return stypy_return_type_257544

# Assigning a type to the variable 'raise_msg_to_str' (line 52)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 0), 'raise_msg_to_str', raise_msg_to_str)

@norecursion
def error_msg_tkpaint(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 58)
    None_257545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 34), 'None')
    defaults = [None_257545]
    # Create a new context for function 'error_msg_tkpaint'
    module_type_store = module_type_store.open_function_context('error_msg_tkpaint', 58, 0, False)
    
    # Passed parameters checking function
    error_msg_tkpaint.stypy_localization = localization
    error_msg_tkpaint.stypy_type_of_self = None
    error_msg_tkpaint.stypy_type_store = module_type_store
    error_msg_tkpaint.stypy_function_name = 'error_msg_tkpaint'
    error_msg_tkpaint.stypy_param_names_list = ['msg', 'parent']
    error_msg_tkpaint.stypy_varargs_param_name = None
    error_msg_tkpaint.stypy_kwargs_param_name = None
    error_msg_tkpaint.stypy_call_defaults = defaults
    error_msg_tkpaint.stypy_call_varargs = varargs
    error_msg_tkpaint.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'error_msg_tkpaint', ['msg', 'parent'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'error_msg_tkpaint', localization, ['msg', 'parent'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'error_msg_tkpaint(...)' code ##################

    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 59, 4))
    
    # 'from six.moves import tkMessageBox' statement (line 59)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
    import_257546 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 59, 4), 'six.moves')

    if (type(import_257546) is not StypyTypeError):

        if (import_257546 != 'pyd_module'):
            __import__(import_257546)
            sys_modules_257547 = sys.modules[import_257546]
            import_from_module(stypy.reporting.localization.Localization(__file__, 59, 4), 'six.moves', sys_modules_257547.module_type_store, module_type_store, ['tkinter_messagebox'])
            nest_module(stypy.reporting.localization.Localization(__file__, 59, 4), __file__, sys_modules_257547, sys_modules_257547.module_type_store, module_type_store)
        else:
            from six.moves import tkinter_messagebox as tkMessageBox

            import_from_module(stypy.reporting.localization.Localization(__file__, 59, 4), 'six.moves', None, module_type_store, ['tkinter_messagebox'], [tkMessageBox])

    else:
        # Assigning a type to the variable 'six.moves' (line 59)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 59, 4), 'six.moves', import_257546)

    # Adding an alias
    module_type_store.add_alias('tkMessageBox', 'tkinter_messagebox')
    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')
    
    
    # Call to showerror(...): (line 60)
    # Processing the call arguments (line 60)
    unicode_257550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 27), 'unicode', u'matplotlib')
    # Getting the type of 'msg' (line 60)
    msg_257551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 41), 'msg', False)
    # Processing the call keyword arguments (line 60)
    kwargs_257552 = {}
    # Getting the type of 'tkMessageBox' (line 60)
    tkMessageBox_257548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 4), 'tkMessageBox', False)
    # Obtaining the member 'showerror' of a type (line 60)
    showerror_257549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 60, 4), tkMessageBox_257548, 'showerror')
    # Calling showerror(args, kwargs) (line 60)
    showerror_call_result_257553 = invoke(stypy.reporting.localization.Localization(__file__, 60, 4), showerror_257549, *[unicode_257550, msg_257551], **kwargs_257552)
    
    
    # ################# End of 'error_msg_tkpaint(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'error_msg_tkpaint' in the type store
    # Getting the type of 'stypy_return_type' (line 58)
    stypy_return_type_257554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_257554)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'error_msg_tkpaint'
    return stypy_return_type_257554

# Assigning a type to the variable 'error_msg_tkpaint' (line 58)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 58, 0), 'error_msg_tkpaint', error_msg_tkpaint)
# Declaration of the 'TimerTk' class
# Getting the type of 'TimerBase' (line 63)
TimerBase_257555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 14), 'TimerBase')

class TimerTk(TimerBase_257555, ):
    unicode_257556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, (-1)), 'unicode', u"\n    Subclass of :class:`backend_bases.TimerBase` that uses Tk's timer events.\n\n    Attributes\n    ----------\n    interval : int\n        The time between timer events in milliseconds. Default is 1000 ms.\n    single_shot : bool\n        Boolean flag indicating whether this timer should operate as single\n        shot (run once and then stop). Defaults to False.\n    callbacks : list\n        Stores list of (func, args) tuples that will be called upon timer\n        events. This list can be manipulated directly, or the functions\n        `add_callback` and `remove_callback` can be used.\n\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 80, 4, False)
        # Assigning a type to the variable 'self' (line 81)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 81, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerTk.__init__', ['parent'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['parent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 81)
        # Processing the call arguments (line 81)
        # Getting the type of 'self' (line 81)
        self_257559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 27), 'self', False)
        # Getting the type of 'args' (line 81)
        args_257560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 34), 'args', False)
        # Processing the call keyword arguments (line 81)
        # Getting the type of 'kwargs' (line 81)
        kwargs_257561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 42), 'kwargs', False)
        kwargs_257562 = {'kwargs_257561': kwargs_257561}
        # Getting the type of 'TimerBase' (line 81)
        TimerBase_257557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 8), 'TimerBase', False)
        # Obtaining the member '__init__' of a type (line 81)
        init___257558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 81, 8), TimerBase_257557, '__init__')
        # Calling __init__(args, kwargs) (line 81)
        init___call_result_257563 = invoke(stypy.reporting.localization.Localization(__file__, 81, 8), init___257558, *[self_257559, args_257560], **kwargs_257562)
        
        
        # Assigning a Name to a Attribute (line 82):
        
        # Assigning a Name to a Attribute (line 82):
        # Getting the type of 'parent' (line 82)
        parent_257564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 22), 'parent')
        # Getting the type of 'self' (line 82)
        self_257565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 8), 'self')
        # Setting the type of the member 'parent' of a type (line 82)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 8), self_257565, 'parent', parent_257564)
        
        # Assigning a Name to a Attribute (line 83):
        
        # Assigning a Name to a Attribute (line 83):
        # Getting the type of 'None' (line 83)
        None_257566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 22), 'None')
        # Getting the type of 'self' (line 83)
        self_257567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 8), 'self')
        # Setting the type of the member '_timer' of a type (line 83)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 83, 8), self_257567, '_timer', None_257566)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _timer_start(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_timer_start'
        module_type_store = module_type_store.open_function_context('_timer_start', 85, 4, False)
        # Assigning a type to the variable 'self' (line 86)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerTk._timer_start.__dict__.__setitem__('stypy_localization', localization)
        TimerTk._timer_start.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerTk._timer_start.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerTk._timer_start.__dict__.__setitem__('stypy_function_name', 'TimerTk._timer_start')
        TimerTk._timer_start.__dict__.__setitem__('stypy_param_names_list', [])
        TimerTk._timer_start.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerTk._timer_start.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerTk._timer_start.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerTk._timer_start.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerTk._timer_start.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerTk._timer_start.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerTk._timer_start', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_timer_start', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_timer_start(...)' code ##################

        
        # Call to _timer_stop(...): (line 86)
        # Processing the call keyword arguments (line 86)
        kwargs_257570 = {}
        # Getting the type of 'self' (line 86)
        self_257568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 8), 'self', False)
        # Obtaining the member '_timer_stop' of a type (line 86)
        _timer_stop_257569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 86, 8), self_257568, '_timer_stop')
        # Calling _timer_stop(args, kwargs) (line 86)
        _timer_stop_call_result_257571 = invoke(stypy.reporting.localization.Localization(__file__, 86, 8), _timer_stop_257569, *[], **kwargs_257570)
        
        
        # Assigning a Call to a Attribute (line 87):
        
        # Assigning a Call to a Attribute (line 87):
        
        # Call to after(...): (line 87)
        # Processing the call arguments (line 87)
        # Getting the type of 'self' (line 87)
        self_257575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 40), 'self', False)
        # Obtaining the member '_interval' of a type (line 87)
        _interval_257576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 87, 40), self_257575, '_interval')
        # Getting the type of 'self' (line 87)
        self_257577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 56), 'self', False)
        # Obtaining the member '_on_timer' of a type (line 87)
        _on_timer_257578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 87, 56), self_257577, '_on_timer')
        # Processing the call keyword arguments (line 87)
        kwargs_257579 = {}
        # Getting the type of 'self' (line 87)
        self_257572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 22), 'self', False)
        # Obtaining the member 'parent' of a type (line 87)
        parent_257573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 87, 22), self_257572, 'parent')
        # Obtaining the member 'after' of a type (line 87)
        after_257574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 87, 22), parent_257573, 'after')
        # Calling after(args, kwargs) (line 87)
        after_call_result_257580 = invoke(stypy.reporting.localization.Localization(__file__, 87, 22), after_257574, *[_interval_257576, _on_timer_257578], **kwargs_257579)
        
        # Getting the type of 'self' (line 87)
        self_257581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 8), 'self')
        # Setting the type of the member '_timer' of a type (line 87)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 87, 8), self_257581, '_timer', after_call_result_257580)
        
        # ################# End of '_timer_start(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_timer_start' in the type store
        # Getting the type of 'stypy_return_type' (line 85)
        stypy_return_type_257582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_257582)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_timer_start'
        return stypy_return_type_257582


    @norecursion
    def _timer_stop(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_timer_stop'
        module_type_store = module_type_store.open_function_context('_timer_stop', 89, 4, False)
        # Assigning a type to the variable 'self' (line 90)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 90, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerTk._timer_stop.__dict__.__setitem__('stypy_localization', localization)
        TimerTk._timer_stop.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerTk._timer_stop.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerTk._timer_stop.__dict__.__setitem__('stypy_function_name', 'TimerTk._timer_stop')
        TimerTk._timer_stop.__dict__.__setitem__('stypy_param_names_list', [])
        TimerTk._timer_stop.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerTk._timer_stop.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerTk._timer_stop.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerTk._timer_stop.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerTk._timer_stop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerTk._timer_stop.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerTk._timer_stop', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_timer_stop', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_timer_stop(...)' code ##################

        
        
        # Getting the type of 'self' (line 90)
        self_257583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 11), 'self')
        # Obtaining the member '_timer' of a type (line 90)
        _timer_257584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 90, 11), self_257583, '_timer')
        # Getting the type of 'None' (line 90)
        None_257585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 30), 'None')
        # Applying the binary operator 'isnot' (line 90)
        result_is_not_257586 = python_operator(stypy.reporting.localization.Localization(__file__, 90, 11), 'isnot', _timer_257584, None_257585)
        
        # Testing the type of an if condition (line 90)
        if_condition_257587 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 90, 8), result_is_not_257586)
        # Assigning a type to the variable 'if_condition_257587' (line 90)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 90, 8), 'if_condition_257587', if_condition_257587)
        # SSA begins for if statement (line 90)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to after_cancel(...): (line 91)
        # Processing the call arguments (line 91)
        # Getting the type of 'self' (line 91)
        self_257591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 37), 'self', False)
        # Obtaining the member '_timer' of a type (line 91)
        _timer_257592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 37), self_257591, '_timer')
        # Processing the call keyword arguments (line 91)
        kwargs_257593 = {}
        # Getting the type of 'self' (line 91)
        self_257588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 12), 'self', False)
        # Obtaining the member 'parent' of a type (line 91)
        parent_257589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 12), self_257588, 'parent')
        # Obtaining the member 'after_cancel' of a type (line 91)
        after_cancel_257590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 12), parent_257589, 'after_cancel')
        # Calling after_cancel(args, kwargs) (line 91)
        after_cancel_call_result_257594 = invoke(stypy.reporting.localization.Localization(__file__, 91, 12), after_cancel_257590, *[_timer_257592], **kwargs_257593)
        
        # SSA join for if statement (line 90)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 92):
        
        # Assigning a Name to a Attribute (line 92):
        # Getting the type of 'None' (line 92)
        None_257595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 22), 'None')
        # Getting the type of 'self' (line 92)
        self_257596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 8), 'self')
        # Setting the type of the member '_timer' of a type (line 92)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 8), self_257596, '_timer', None_257595)
        
        # ################# End of '_timer_stop(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_timer_stop' in the type store
        # Getting the type of 'stypy_return_type' (line 89)
        stypy_return_type_257597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_257597)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_timer_stop'
        return stypy_return_type_257597


    @norecursion
    def _on_timer(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_on_timer'
        module_type_store = module_type_store.open_function_context('_on_timer', 94, 4, False)
        # Assigning a type to the variable 'self' (line 95)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerTk._on_timer.__dict__.__setitem__('stypy_localization', localization)
        TimerTk._on_timer.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerTk._on_timer.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerTk._on_timer.__dict__.__setitem__('stypy_function_name', 'TimerTk._on_timer')
        TimerTk._on_timer.__dict__.__setitem__('stypy_param_names_list', [])
        TimerTk._on_timer.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerTk._on_timer.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerTk._on_timer.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerTk._on_timer.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerTk._on_timer.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerTk._on_timer.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerTk._on_timer', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_on_timer', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_on_timer(...)' code ##################

        
        # Call to _on_timer(...): (line 95)
        # Processing the call arguments (line 95)
        # Getting the type of 'self' (line 95)
        self_257600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 28), 'self', False)
        # Processing the call keyword arguments (line 95)
        kwargs_257601 = {}
        # Getting the type of 'TimerBase' (line 95)
        TimerBase_257598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 8), 'TimerBase', False)
        # Obtaining the member '_on_timer' of a type (line 95)
        _on_timer_257599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 8), TimerBase_257598, '_on_timer')
        # Calling _on_timer(args, kwargs) (line 95)
        _on_timer_call_result_257602 = invoke(stypy.reporting.localization.Localization(__file__, 95, 8), _on_timer_257599, *[self_257600], **kwargs_257601)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 101)
        self_257603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 15), 'self')
        # Obtaining the member '_single' of a type (line 101)
        _single_257604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 101, 15), self_257603, '_single')
        # Applying the 'not' unary operator (line 101)
        result_not__257605 = python_operator(stypy.reporting.localization.Localization(__file__, 101, 11), 'not', _single_257604)
        
        # Getting the type of 'self' (line 101)
        self_257606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 32), 'self')
        # Obtaining the member '_timer' of a type (line 101)
        _timer_257607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 101, 32), self_257606, '_timer')
        # Applying the binary operator 'and' (line 101)
        result_and_keyword_257608 = python_operator(stypy.reporting.localization.Localization(__file__, 101, 11), 'and', result_not__257605, _timer_257607)
        
        # Testing the type of an if condition (line 101)
        if_condition_257609 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 101, 8), result_and_keyword_257608)
        # Assigning a type to the variable 'if_condition_257609' (line 101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 8), 'if_condition_257609', if_condition_257609)
        # SSA begins for if statement (line 101)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 102):
        
        # Assigning a Call to a Attribute (line 102):
        
        # Call to after(...): (line 102)
        # Processing the call arguments (line 102)
        # Getting the type of 'self' (line 102)
        self_257613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 44), 'self', False)
        # Obtaining the member '_interval' of a type (line 102)
        _interval_257614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 44), self_257613, '_interval')
        # Getting the type of 'self' (line 102)
        self_257615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 60), 'self', False)
        # Obtaining the member '_on_timer' of a type (line 102)
        _on_timer_257616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 60), self_257615, '_on_timer')
        # Processing the call keyword arguments (line 102)
        kwargs_257617 = {}
        # Getting the type of 'self' (line 102)
        self_257610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 26), 'self', False)
        # Obtaining the member 'parent' of a type (line 102)
        parent_257611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 26), self_257610, 'parent')
        # Obtaining the member 'after' of a type (line 102)
        after_257612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 26), parent_257611, 'after')
        # Calling after(args, kwargs) (line 102)
        after_call_result_257618 = invoke(stypy.reporting.localization.Localization(__file__, 102, 26), after_257612, *[_interval_257614, _on_timer_257616], **kwargs_257617)
        
        # Getting the type of 'self' (line 102)
        self_257619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 12), 'self')
        # Setting the type of the member '_timer' of a type (line 102)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 12), self_257619, '_timer', after_call_result_257618)
        # SSA branch for the else part of an if statement (line 101)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 104):
        
        # Assigning a Name to a Attribute (line 104):
        # Getting the type of 'None' (line 104)
        None_257620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 26), 'None')
        # Getting the type of 'self' (line 104)
        self_257621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 12), 'self')
        # Setting the type of the member '_timer' of a type (line 104)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 12), self_257621, '_timer', None_257620)
        # SSA join for if statement (line 101)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_on_timer(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_on_timer' in the type store
        # Getting the type of 'stypy_return_type' (line 94)
        stypy_return_type_257622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_257622)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_on_timer'
        return stypy_return_type_257622


# Assigning a type to the variable 'TimerTk' (line 63)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 63, 0), 'TimerTk', TimerTk)
# Declaration of the 'FigureCanvasTkAgg' class
# Getting the type of 'FigureCanvasAgg' (line 107)
FigureCanvasAgg_257623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 24), 'FigureCanvasAgg')

class FigureCanvasTkAgg(FigureCanvasAgg_257623, ):
    
    # Assigning a Dict to a Name (line 108):
    
    # Assigning a Dict to a Name (line 160):
    unicode_257624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 170, (-1)), 'unicode', u'_keycode_lookup is used for badly mapped (i.e. no event.key_sym set)\n       keys on apple keyboards.')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 172)
        None_257625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 38), 'None')
        # Getting the type of 'None' (line 172)
        None_257626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 60), 'None')
        defaults = [None_257625, None_257626]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 172, 4, False)
        # Assigning a type to the variable 'self' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.__init__', ['figure', 'master', 'resize_callback'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['figure', 'master', 'resize_callback'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 173)
        # Processing the call arguments (line 173)
        # Getting the type of 'self' (line 173)
        self_257629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 33), 'self', False)
        # Getting the type of 'figure' (line 173)
        figure_257630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 39), 'figure', False)
        # Processing the call keyword arguments (line 173)
        kwargs_257631 = {}
        # Getting the type of 'FigureCanvasAgg' (line 173)
        FigureCanvasAgg_257627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 8), 'FigureCanvasAgg', False)
        # Obtaining the member '__init__' of a type (line 173)
        init___257628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 8), FigureCanvasAgg_257627, '__init__')
        # Calling __init__(args, kwargs) (line 173)
        init___call_result_257632 = invoke(stypy.reporting.localization.Localization(__file__, 173, 8), init___257628, *[self_257629, figure_257630], **kwargs_257631)
        
        
        # Assigning a Name to a Attribute (line 174):
        
        # Assigning a Name to a Attribute (line 174):
        # Getting the type of 'True' (line 174)
        True_257633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 21), 'True')
        # Getting the type of 'self' (line 174)
        self_257634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 8), 'self')
        # Setting the type of the member '_idle' of a type (line 174)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 174, 8), self_257634, '_idle', True_257633)
        
        # Assigning a Name to a Attribute (line 175):
        
        # Assigning a Name to a Attribute (line 175):
        # Getting the type of 'None' (line 175)
        None_257635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 30), 'None')
        # Getting the type of 'self' (line 175)
        self_257636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 8), 'self')
        # Setting the type of the member '_idle_callback' of a type (line 175)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 8), self_257636, '_idle_callback', None_257635)
        
        # Assigning a Attribute to a Tuple (line 176):
        
        # Assigning a Subscript to a Name (line 176):
        
        # Obtaining the type of the subscript
        int_257637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 176, 8), 'int')
        # Getting the type of 'self' (line 176)
        self_257638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 20), 'self')
        # Obtaining the member 'figure' of a type (line 176)
        figure_257639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 20), self_257638, 'figure')
        # Obtaining the member 'bbox' of a type (line 176)
        bbox_257640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 20), figure_257639, 'bbox')
        # Obtaining the member 'bounds' of a type (line 176)
        bounds_257641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 20), bbox_257640, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 176)
        getitem___257642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 8), bounds_257641, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 176)
        subscript_call_result_257643 = invoke(stypy.reporting.localization.Localization(__file__, 176, 8), getitem___257642, int_257637)
        
        # Assigning a type to the variable 'tuple_var_assignment_257442' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), 'tuple_var_assignment_257442', subscript_call_result_257643)
        
        # Assigning a Subscript to a Name (line 176):
        
        # Obtaining the type of the subscript
        int_257644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 176, 8), 'int')
        # Getting the type of 'self' (line 176)
        self_257645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 20), 'self')
        # Obtaining the member 'figure' of a type (line 176)
        figure_257646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 20), self_257645, 'figure')
        # Obtaining the member 'bbox' of a type (line 176)
        bbox_257647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 20), figure_257646, 'bbox')
        # Obtaining the member 'bounds' of a type (line 176)
        bounds_257648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 20), bbox_257647, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 176)
        getitem___257649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 8), bounds_257648, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 176)
        subscript_call_result_257650 = invoke(stypy.reporting.localization.Localization(__file__, 176, 8), getitem___257649, int_257644)
        
        # Assigning a type to the variable 'tuple_var_assignment_257443' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), 'tuple_var_assignment_257443', subscript_call_result_257650)
        
        # Assigning a Subscript to a Name (line 176):
        
        # Obtaining the type of the subscript
        int_257651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 176, 8), 'int')
        # Getting the type of 'self' (line 176)
        self_257652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 20), 'self')
        # Obtaining the member 'figure' of a type (line 176)
        figure_257653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 20), self_257652, 'figure')
        # Obtaining the member 'bbox' of a type (line 176)
        bbox_257654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 20), figure_257653, 'bbox')
        # Obtaining the member 'bounds' of a type (line 176)
        bounds_257655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 20), bbox_257654, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 176)
        getitem___257656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 8), bounds_257655, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 176)
        subscript_call_result_257657 = invoke(stypy.reporting.localization.Localization(__file__, 176, 8), getitem___257656, int_257651)
        
        # Assigning a type to the variable 'tuple_var_assignment_257444' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), 'tuple_var_assignment_257444', subscript_call_result_257657)
        
        # Assigning a Subscript to a Name (line 176):
        
        # Obtaining the type of the subscript
        int_257658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 176, 8), 'int')
        # Getting the type of 'self' (line 176)
        self_257659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 20), 'self')
        # Obtaining the member 'figure' of a type (line 176)
        figure_257660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 20), self_257659, 'figure')
        # Obtaining the member 'bbox' of a type (line 176)
        bbox_257661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 20), figure_257660, 'bbox')
        # Obtaining the member 'bounds' of a type (line 176)
        bounds_257662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 20), bbox_257661, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 176)
        getitem___257663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 8), bounds_257662, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 176)
        subscript_call_result_257664 = invoke(stypy.reporting.localization.Localization(__file__, 176, 8), getitem___257663, int_257658)
        
        # Assigning a type to the variable 'tuple_var_assignment_257445' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), 'tuple_var_assignment_257445', subscript_call_result_257664)
        
        # Assigning a Name to a Name (line 176):
        # Getting the type of 'tuple_var_assignment_257442' (line 176)
        tuple_var_assignment_257442_257665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), 'tuple_var_assignment_257442')
        # Assigning a type to the variable 't1' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), 't1', tuple_var_assignment_257442_257665)
        
        # Assigning a Name to a Name (line 176):
        # Getting the type of 'tuple_var_assignment_257443' (line 176)
        tuple_var_assignment_257443_257666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), 'tuple_var_assignment_257443')
        # Assigning a type to the variable 't2' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 11), 't2', tuple_var_assignment_257443_257666)
        
        # Assigning a Name to a Name (line 176):
        # Getting the type of 'tuple_var_assignment_257444' (line 176)
        tuple_var_assignment_257444_257667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), 'tuple_var_assignment_257444')
        # Assigning a type to the variable 'w' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 14), 'w', tuple_var_assignment_257444_257667)
        
        # Assigning a Name to a Name (line 176):
        # Getting the type of 'tuple_var_assignment_257445' (line 176)
        tuple_var_assignment_257445_257668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), 'tuple_var_assignment_257445')
        # Assigning a type to the variable 'h' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 16), 'h', tuple_var_assignment_257445_257668)
        
        # Assigning a Tuple to a Tuple (line 177):
        
        # Assigning a Call to a Name (line 177):
        
        # Call to int(...): (line 177)
        # Processing the call arguments (line 177)
        # Getting the type of 'w' (line 177)
        w_257670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 19), 'w', False)
        # Processing the call keyword arguments (line 177)
        kwargs_257671 = {}
        # Getting the type of 'int' (line 177)
        int_257669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 15), 'int', False)
        # Calling int(args, kwargs) (line 177)
        int_call_result_257672 = invoke(stypy.reporting.localization.Localization(__file__, 177, 15), int_257669, *[w_257670], **kwargs_257671)
        
        # Assigning a type to the variable 'tuple_assignment_257446' (line 177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 8), 'tuple_assignment_257446', int_call_result_257672)
        
        # Assigning a Call to a Name (line 177):
        
        # Call to int(...): (line 177)
        # Processing the call arguments (line 177)
        # Getting the type of 'h' (line 177)
        h_257674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 27), 'h', False)
        # Processing the call keyword arguments (line 177)
        kwargs_257675 = {}
        # Getting the type of 'int' (line 177)
        int_257673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 23), 'int', False)
        # Calling int(args, kwargs) (line 177)
        int_call_result_257676 = invoke(stypy.reporting.localization.Localization(__file__, 177, 23), int_257673, *[h_257674], **kwargs_257675)
        
        # Assigning a type to the variable 'tuple_assignment_257447' (line 177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 8), 'tuple_assignment_257447', int_call_result_257676)
        
        # Assigning a Name to a Name (line 177):
        # Getting the type of 'tuple_assignment_257446' (line 177)
        tuple_assignment_257446_257677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 8), 'tuple_assignment_257446')
        # Assigning a type to the variable 'w' (line 177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 8), 'w', tuple_assignment_257446_257677)
        
        # Assigning a Name to a Name (line 177):
        # Getting the type of 'tuple_assignment_257447' (line 177)
        tuple_assignment_257447_257678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 8), 'tuple_assignment_257447')
        # Assigning a type to the variable 'h' (line 177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 11), 'h', tuple_assignment_257447_257678)
        
        # Assigning a Call to a Attribute (line 178):
        
        # Assigning a Call to a Attribute (line 178):
        
        # Call to Canvas(...): (line 178)
        # Processing the call keyword arguments (line 178)
        # Getting the type of 'master' (line 179)
        master_257681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 19), 'master', False)
        keyword_257682 = master_257681
        # Getting the type of 'w' (line 179)
        w_257683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 33), 'w', False)
        keyword_257684 = w_257683
        # Getting the type of 'h' (line 179)
        h_257685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 43), 'h', False)
        keyword_257686 = h_257685
        int_257687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 58), 'int')
        keyword_257688 = int_257687
        int_257689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, 31), 'int')
        keyword_257690 = int_257689
        kwargs_257691 = {'width': keyword_257684, 'master': keyword_257682, 'borderwidth': keyword_257688, 'highlightthickness': keyword_257690, 'height': keyword_257686}
        # Getting the type of 'Tk' (line 178)
        Tk_257679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 25), 'Tk', False)
        # Obtaining the member 'Canvas' of a type (line 178)
        Canvas_257680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 25), Tk_257679, 'Canvas')
        # Calling Canvas(args, kwargs) (line 178)
        Canvas_call_result_257692 = invoke(stypy.reporting.localization.Localization(__file__, 178, 25), Canvas_257680, *[], **kwargs_257691)
        
        # Getting the type of 'self' (line 178)
        self_257693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 8), 'self')
        # Setting the type of the member '_tkcanvas' of a type (line 178)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 8), self_257693, '_tkcanvas', Canvas_call_result_257692)
        
        # Assigning a Call to a Attribute (line 181):
        
        # Assigning a Call to a Attribute (line 181):
        
        # Call to PhotoImage(...): (line 181)
        # Processing the call keyword arguments (line 181)
        # Getting the type of 'self' (line 182)
        self_257696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 19), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 182)
        _tkcanvas_257697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 182, 19), self_257696, '_tkcanvas')
        keyword_257698 = _tkcanvas_257697
        # Getting the type of 'w' (line 182)
        w_257699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 41), 'w', False)
        keyword_257700 = w_257699
        # Getting the type of 'h' (line 182)
        h_257701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 51), 'h', False)
        keyword_257702 = h_257701
        kwargs_257703 = {'width': keyword_257700, 'master': keyword_257698, 'height': keyword_257702}
        # Getting the type of 'Tk' (line 181)
        Tk_257694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 24), 'Tk', False)
        # Obtaining the member 'PhotoImage' of a type (line 181)
        PhotoImage_257695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 24), Tk_257694, 'PhotoImage')
        # Calling PhotoImage(args, kwargs) (line 181)
        PhotoImage_call_result_257704 = invoke(stypy.reporting.localization.Localization(__file__, 181, 24), PhotoImage_257695, *[], **kwargs_257703)
        
        # Getting the type of 'self' (line 181)
        self_257705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 8), 'self')
        # Setting the type of the member '_tkphoto' of a type (line 181)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 8), self_257705, '_tkphoto', PhotoImage_call_result_257704)
        
        # Call to create_image(...): (line 183)
        # Processing the call arguments (line 183)
        # Getting the type of 'w' (line 183)
        w_257709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 36), 'w', False)
        int_257710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 183, 39), 'int')
        # Applying the binary operator '//' (line 183)
        result_floordiv_257711 = python_operator(stypy.reporting.localization.Localization(__file__, 183, 36), '//', w_257709, int_257710)
        
        # Getting the type of 'h' (line 183)
        h_257712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 42), 'h', False)
        int_257713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 183, 45), 'int')
        # Applying the binary operator '//' (line 183)
        result_floordiv_257714 = python_operator(stypy.reporting.localization.Localization(__file__, 183, 42), '//', h_257712, int_257713)
        
        # Processing the call keyword arguments (line 183)
        # Getting the type of 'self' (line 183)
        self_257715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 54), 'self', False)
        # Obtaining the member '_tkphoto' of a type (line 183)
        _tkphoto_257716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 54), self_257715, '_tkphoto')
        keyword_257717 = _tkphoto_257716
        kwargs_257718 = {'image': keyword_257717}
        # Getting the type of 'self' (line 183)
        self_257706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 8), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 183)
        _tkcanvas_257707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 8), self_257706, '_tkcanvas')
        # Obtaining the member 'create_image' of a type (line 183)
        create_image_257708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 8), _tkcanvas_257707, 'create_image')
        # Calling create_image(args, kwargs) (line 183)
        create_image_call_result_257719 = invoke(stypy.reporting.localization.Localization(__file__, 183, 8), create_image_257708, *[result_floordiv_257711, result_floordiv_257714], **kwargs_257718)
        
        
        # Assigning a Name to a Attribute (line 184):
        
        # Assigning a Name to a Attribute (line 184):
        # Getting the type of 'resize_callback' (line 184)
        resize_callback_257720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 32), 'resize_callback')
        # Getting the type of 'self' (line 184)
        self_257721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 8), 'self')
        # Setting the type of the member '_resize_callback' of a type (line 184)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 8), self_257721, '_resize_callback', resize_callback_257720)
        
        # Call to bind(...): (line 185)
        # Processing the call arguments (line 185)
        unicode_257725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 28), 'unicode', u'<Configure>')
        # Getting the type of 'self' (line 185)
        self_257726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 43), 'self', False)
        # Obtaining the member 'resize' of a type (line 185)
        resize_257727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 43), self_257726, 'resize')
        # Processing the call keyword arguments (line 185)
        kwargs_257728 = {}
        # Getting the type of 'self' (line 185)
        self_257722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 8), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 185)
        _tkcanvas_257723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 8), self_257722, '_tkcanvas')
        # Obtaining the member 'bind' of a type (line 185)
        bind_257724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 8), _tkcanvas_257723, 'bind')
        # Calling bind(args, kwargs) (line 185)
        bind_call_result_257729 = invoke(stypy.reporting.localization.Localization(__file__, 185, 8), bind_257724, *[unicode_257725, resize_257727], **kwargs_257728)
        
        
        # Call to bind(...): (line 186)
        # Processing the call arguments (line 186)
        unicode_257733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 28), 'unicode', u'<Key>')
        # Getting the type of 'self' (line 186)
        self_257734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 37), 'self', False)
        # Obtaining the member 'key_press' of a type (line 186)
        key_press_257735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 37), self_257734, 'key_press')
        # Processing the call keyword arguments (line 186)
        kwargs_257736 = {}
        # Getting the type of 'self' (line 186)
        self_257730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 8), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 186)
        _tkcanvas_257731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 8), self_257730, '_tkcanvas')
        # Obtaining the member 'bind' of a type (line 186)
        bind_257732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 8), _tkcanvas_257731, 'bind')
        # Calling bind(args, kwargs) (line 186)
        bind_call_result_257737 = invoke(stypy.reporting.localization.Localization(__file__, 186, 8), bind_257732, *[unicode_257733, key_press_257735], **kwargs_257736)
        
        
        # Call to bind(...): (line 187)
        # Processing the call arguments (line 187)
        unicode_257741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, 28), 'unicode', u'<Motion>')
        # Getting the type of 'self' (line 187)
        self_257742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 40), 'self', False)
        # Obtaining the member 'motion_notify_event' of a type (line 187)
        motion_notify_event_257743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 40), self_257742, 'motion_notify_event')
        # Processing the call keyword arguments (line 187)
        kwargs_257744 = {}
        # Getting the type of 'self' (line 187)
        self_257738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 8), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 187)
        _tkcanvas_257739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 8), self_257738, '_tkcanvas')
        # Obtaining the member 'bind' of a type (line 187)
        bind_257740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 8), _tkcanvas_257739, 'bind')
        # Calling bind(args, kwargs) (line 187)
        bind_call_result_257745 = invoke(stypy.reporting.localization.Localization(__file__, 187, 8), bind_257740, *[unicode_257741, motion_notify_event_257743], **kwargs_257744)
        
        
        # Call to bind(...): (line 188)
        # Processing the call arguments (line 188)
        unicode_257749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 28), 'unicode', u'<KeyRelease>')
        # Getting the type of 'self' (line 188)
        self_257750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 44), 'self', False)
        # Obtaining the member 'key_release' of a type (line 188)
        key_release_257751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 44), self_257750, 'key_release')
        # Processing the call keyword arguments (line 188)
        kwargs_257752 = {}
        # Getting the type of 'self' (line 188)
        self_257746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 8), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 188)
        _tkcanvas_257747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 8), self_257746, '_tkcanvas')
        # Obtaining the member 'bind' of a type (line 188)
        bind_257748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 8), _tkcanvas_257747, 'bind')
        # Calling bind(args, kwargs) (line 188)
        bind_call_result_257753 = invoke(stypy.reporting.localization.Localization(__file__, 188, 8), bind_257748, *[unicode_257749, key_release_257751], **kwargs_257752)
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 189)
        tuple_257754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 189)
        # Adding element type (line 189)
        unicode_257755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 20), 'unicode', u'<Button-1>')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 20), tuple_257754, unicode_257755)
        # Adding element type (line 189)
        unicode_257756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 34), 'unicode', u'<Button-2>')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 20), tuple_257754, unicode_257756)
        # Adding element type (line 189)
        unicode_257757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 48), 'unicode', u'<Button-3>')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 20), tuple_257754, unicode_257757)
        
        # Testing the type of a for loop iterable (line 189)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 189, 8), tuple_257754)
        # Getting the type of the for loop variable (line 189)
        for_loop_var_257758 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 189, 8), tuple_257754)
        # Assigning a type to the variable 'name' (line 189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 8), 'name', for_loop_var_257758)
        # SSA begins for a for statement (line 189)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to bind(...): (line 190)
        # Processing the call arguments (line 190)
        # Getting the type of 'name' (line 190)
        name_257762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 32), 'name', False)
        # Getting the type of 'self' (line 190)
        self_257763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 38), 'self', False)
        # Obtaining the member 'button_press_event' of a type (line 190)
        button_press_event_257764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 38), self_257763, 'button_press_event')
        # Processing the call keyword arguments (line 190)
        kwargs_257765 = {}
        # Getting the type of 'self' (line 190)
        self_257759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 12), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 190)
        _tkcanvas_257760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 12), self_257759, '_tkcanvas')
        # Obtaining the member 'bind' of a type (line 190)
        bind_257761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 12), _tkcanvas_257760, 'bind')
        # Calling bind(args, kwargs) (line 190)
        bind_call_result_257766 = invoke(stypy.reporting.localization.Localization(__file__, 190, 12), bind_257761, *[name_257762, button_press_event_257764], **kwargs_257765)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 191)
        tuple_257767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 191)
        # Adding element type (line 191)
        unicode_257768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 20), 'unicode', u'<Double-Button-1>')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 191, 20), tuple_257767, unicode_257768)
        # Adding element type (line 191)
        unicode_257769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 41), 'unicode', u'<Double-Button-2>')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 191, 20), tuple_257767, unicode_257769)
        # Adding element type (line 191)
        unicode_257770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 62), 'unicode', u'<Double-Button-3>')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 191, 20), tuple_257767, unicode_257770)
        
        # Testing the type of a for loop iterable (line 191)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 191, 8), tuple_257767)
        # Getting the type of the for loop variable (line 191)
        for_loop_var_257771 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 191, 8), tuple_257767)
        # Assigning a type to the variable 'name' (line 191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 191, 8), 'name', for_loop_var_257771)
        # SSA begins for a for statement (line 191)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to bind(...): (line 192)
        # Processing the call arguments (line 192)
        # Getting the type of 'name' (line 192)
        name_257775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 32), 'name', False)
        # Getting the type of 'self' (line 192)
        self_257776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 38), 'self', False)
        # Obtaining the member 'button_dblclick_event' of a type (line 192)
        button_dblclick_event_257777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 38), self_257776, 'button_dblclick_event')
        # Processing the call keyword arguments (line 192)
        kwargs_257778 = {}
        # Getting the type of 'self' (line 192)
        self_257772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 12), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 192)
        _tkcanvas_257773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 12), self_257772, '_tkcanvas')
        # Obtaining the member 'bind' of a type (line 192)
        bind_257774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 12), _tkcanvas_257773, 'bind')
        # Calling bind(args, kwargs) (line 192)
        bind_call_result_257779 = invoke(stypy.reporting.localization.Localization(__file__, 192, 12), bind_257774, *[name_257775, button_dblclick_event_257777], **kwargs_257778)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 193)
        tuple_257780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 193)
        # Adding element type (line 193)
        unicode_257781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 20), 'unicode', u'<ButtonRelease-1>')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 193, 20), tuple_257780, unicode_257781)
        # Adding element type (line 193)
        unicode_257782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 41), 'unicode', u'<ButtonRelease-2>')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 193, 20), tuple_257780, unicode_257782)
        # Adding element type (line 193)
        unicode_257783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 62), 'unicode', u'<ButtonRelease-3>')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 193, 20), tuple_257780, unicode_257783)
        
        # Testing the type of a for loop iterable (line 193)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 193, 8), tuple_257780)
        # Getting the type of the for loop variable (line 193)
        for_loop_var_257784 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 193, 8), tuple_257780)
        # Assigning a type to the variable 'name' (line 193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 8), 'name', for_loop_var_257784)
        # SSA begins for a for statement (line 193)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to bind(...): (line 194)
        # Processing the call arguments (line 194)
        # Getting the type of 'name' (line 194)
        name_257788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 32), 'name', False)
        # Getting the type of 'self' (line 194)
        self_257789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 38), 'self', False)
        # Obtaining the member 'button_release_event' of a type (line 194)
        button_release_event_257790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 38), self_257789, 'button_release_event')
        # Processing the call keyword arguments (line 194)
        kwargs_257791 = {}
        # Getting the type of 'self' (line 194)
        self_257785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 12), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 194)
        _tkcanvas_257786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 12), self_257785, '_tkcanvas')
        # Obtaining the member 'bind' of a type (line 194)
        bind_257787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 12), _tkcanvas_257786, 'bind')
        # Calling bind(args, kwargs) (line 194)
        bind_call_result_257792 = invoke(stypy.reporting.localization.Localization(__file__, 194, 12), bind_257787, *[name_257788, button_release_event_257790], **kwargs_257791)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 197)
        tuple_257793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 197, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 197)
        # Adding element type (line 197)
        unicode_257794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 197, 20), 'unicode', u'<Button-4>')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 197, 20), tuple_257793, unicode_257794)
        # Adding element type (line 197)
        unicode_257795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 197, 34), 'unicode', u'<Button-5>')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 197, 20), tuple_257793, unicode_257795)
        
        # Testing the type of a for loop iterable (line 197)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 197, 8), tuple_257793)
        # Getting the type of the for loop variable (line 197)
        for_loop_var_257796 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 197, 8), tuple_257793)
        # Assigning a type to the variable 'name' (line 197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 8), 'name', for_loop_var_257796)
        # SSA begins for a for statement (line 197)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to bind(...): (line 198)
        # Processing the call arguments (line 198)
        # Getting the type of 'name' (line 198)
        name_257800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 32), 'name', False)
        # Getting the type of 'self' (line 198)
        self_257801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 38), 'self', False)
        # Obtaining the member 'scroll_event' of a type (line 198)
        scroll_event_257802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 38), self_257801, 'scroll_event')
        # Processing the call keyword arguments (line 198)
        kwargs_257803 = {}
        # Getting the type of 'self' (line 198)
        self_257797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 12), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 198)
        _tkcanvas_257798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 12), self_257797, '_tkcanvas')
        # Obtaining the member 'bind' of a type (line 198)
        bind_257799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 12), _tkcanvas_257798, 'bind')
        # Calling bind(args, kwargs) (line 198)
        bind_call_result_257804 = invoke(stypy.reporting.localization.Localization(__file__, 198, 12), bind_257799, *[name_257800, scroll_event_257802], **kwargs_257803)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 203):
        
        # Assigning a Call to a Name (line 203):
        
        # Call to winfo_toplevel(...): (line 203)
        # Processing the call keyword arguments (line 203)
        kwargs_257808 = {}
        # Getting the type of 'self' (line 203)
        self_257805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 15), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 203)
        _tkcanvas_257806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 15), self_257805, '_tkcanvas')
        # Obtaining the member 'winfo_toplevel' of a type (line 203)
        winfo_toplevel_257807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 15), _tkcanvas_257806, 'winfo_toplevel')
        # Calling winfo_toplevel(args, kwargs) (line 203)
        winfo_toplevel_call_result_257809 = invoke(stypy.reporting.localization.Localization(__file__, 203, 15), winfo_toplevel_257807, *[], **kwargs_257808)
        
        # Assigning a type to the variable 'root' (line 203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 203, 8), 'root', winfo_toplevel_call_result_257809)
        
        # Call to bind(...): (line 204)
        # Processing the call arguments (line 204)
        unicode_257812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 18), 'unicode', u'<MouseWheel>')
        # Getting the type of 'self' (line 204)
        self_257813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 34), 'self', False)
        # Obtaining the member 'scroll_event_windows' of a type (line 204)
        scroll_event_windows_257814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 34), self_257813, 'scroll_event_windows')
        unicode_257815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 61), 'unicode', u'+')
        # Processing the call keyword arguments (line 204)
        kwargs_257816 = {}
        # Getting the type of 'root' (line 204)
        root_257810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 8), 'root', False)
        # Obtaining the member 'bind' of a type (line 204)
        bind_257811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 8), root_257810, 'bind')
        # Calling bind(args, kwargs) (line 204)
        bind_call_result_257817 = invoke(stypy.reporting.localization.Localization(__file__, 204, 8), bind_257811, *[unicode_257812, scroll_event_windows_257814, unicode_257815], **kwargs_257816)
        

        @norecursion
        def filter_destroy(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'filter_destroy'
            module_type_store = module_type_store.open_function_context('filter_destroy', 208, 8, False)
            
            # Passed parameters checking function
            filter_destroy.stypy_localization = localization
            filter_destroy.stypy_type_of_self = None
            filter_destroy.stypy_type_store = module_type_store
            filter_destroy.stypy_function_name = 'filter_destroy'
            filter_destroy.stypy_param_names_list = ['evt']
            filter_destroy.stypy_varargs_param_name = None
            filter_destroy.stypy_kwargs_param_name = None
            filter_destroy.stypy_call_defaults = defaults
            filter_destroy.stypy_call_varargs = varargs
            filter_destroy.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'filter_destroy', ['evt'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'filter_destroy', localization, ['evt'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'filter_destroy(...)' code ##################

            
            
            # Getting the type of 'evt' (line 209)
            evt_257818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 15), 'evt')
            # Obtaining the member 'widget' of a type (line 209)
            widget_257819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 15), evt_257818, 'widget')
            # Getting the type of 'self' (line 209)
            self_257820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 29), 'self')
            # Obtaining the member '_tkcanvas' of a type (line 209)
            _tkcanvas_257821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 29), self_257820, '_tkcanvas')
            # Applying the binary operator 'is' (line 209)
            result_is__257822 = python_operator(stypy.reporting.localization.Localization(__file__, 209, 15), 'is', widget_257819, _tkcanvas_257821)
            
            # Testing the type of an if condition (line 209)
            if_condition_257823 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 209, 12), result_is__257822)
            # Assigning a type to the variable 'if_condition_257823' (line 209)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 209, 12), 'if_condition_257823', if_condition_257823)
            # SSA begins for if statement (line 209)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to close_event(...): (line 210)
            # Processing the call keyword arguments (line 210)
            kwargs_257826 = {}
            # Getting the type of 'self' (line 210)
            self_257824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 16), 'self', False)
            # Obtaining the member 'close_event' of a type (line 210)
            close_event_257825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 16), self_257824, 'close_event')
            # Calling close_event(args, kwargs) (line 210)
            close_event_call_result_257827 = invoke(stypy.reporting.localization.Localization(__file__, 210, 16), close_event_257825, *[], **kwargs_257826)
            
            # SSA join for if statement (line 209)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of 'filter_destroy(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'filter_destroy' in the type store
            # Getting the type of 'stypy_return_type' (line 208)
            stypy_return_type_257828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_257828)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'filter_destroy'
            return stypy_return_type_257828

        # Assigning a type to the variable 'filter_destroy' (line 208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 8), 'filter_destroy', filter_destroy)
        
        # Call to bind(...): (line 211)
        # Processing the call arguments (line 211)
        unicode_257831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 18), 'unicode', u'<Destroy>')
        # Getting the type of 'filter_destroy' (line 211)
        filter_destroy_257832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 31), 'filter_destroy', False)
        unicode_257833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 47), 'unicode', u'+')
        # Processing the call keyword arguments (line 211)
        kwargs_257834 = {}
        # Getting the type of 'root' (line 211)
        root_257829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'root', False)
        # Obtaining the member 'bind' of a type (line 211)
        bind_257830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 8), root_257829, 'bind')
        # Calling bind(args, kwargs) (line 211)
        bind_call_result_257835 = invoke(stypy.reporting.localization.Localization(__file__, 211, 8), bind_257830, *[unicode_257831, filter_destroy_257832, unicode_257833], **kwargs_257834)
        
        
        # Assigning a Name to a Attribute (line 213):
        
        # Assigning a Name to a Attribute (line 213):
        # Getting the type of 'master' (line 213)
        master_257836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 23), 'master')
        # Getting the type of 'self' (line 213)
        self_257837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 8), 'self')
        # Setting the type of the member '_master' of a type (line 213)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 8), self_257837, '_master', master_257836)
        
        # Call to focus_set(...): (line 214)
        # Processing the call keyword arguments (line 214)
        kwargs_257841 = {}
        # Getting the type of 'self' (line 214)
        self_257838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 8), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 214)
        _tkcanvas_257839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 8), self_257838, '_tkcanvas')
        # Obtaining the member 'focus_set' of a type (line 214)
        focus_set_257840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 8), _tkcanvas_257839, 'focus_set')
        # Calling focus_set(args, kwargs) (line 214)
        focus_set_call_result_257842 = invoke(stypy.reporting.localization.Localization(__file__, 214, 8), focus_set_257840, *[], **kwargs_257841)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def resize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'resize'
        module_type_store = module_type_store.open_function_context('resize', 216, 4, False)
        # Assigning a type to the variable 'self' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.resize.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.resize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.resize.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.resize.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.resize')
        FigureCanvasTkAgg.resize.__dict__.__setitem__('stypy_param_names_list', ['event'])
        FigureCanvasTkAgg.resize.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg.resize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg.resize.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.resize.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.resize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.resize.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.resize', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'resize', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'resize(...)' code ##################

        
        # Assigning a Tuple to a Tuple (line 217):
        
        # Assigning a Attribute to a Name (line 217):
        # Getting the type of 'event' (line 217)
        event_257843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 24), 'event')
        # Obtaining the member 'width' of a type (line 217)
        width_257844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 24), event_257843, 'width')
        # Assigning a type to the variable 'tuple_assignment_257448' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 8), 'tuple_assignment_257448', width_257844)
        
        # Assigning a Attribute to a Name (line 217):
        # Getting the type of 'event' (line 217)
        event_257845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 37), 'event')
        # Obtaining the member 'height' of a type (line 217)
        height_257846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 37), event_257845, 'height')
        # Assigning a type to the variable 'tuple_assignment_257449' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 8), 'tuple_assignment_257449', height_257846)
        
        # Assigning a Name to a Name (line 217):
        # Getting the type of 'tuple_assignment_257448' (line 217)
        tuple_assignment_257448_257847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 8), 'tuple_assignment_257448')
        # Assigning a type to the variable 'width' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 8), 'width', tuple_assignment_257448_257847)
        
        # Assigning a Name to a Name (line 217):
        # Getting the type of 'tuple_assignment_257449' (line 217)
        tuple_assignment_257449_257848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 8), 'tuple_assignment_257449')
        # Assigning a type to the variable 'height' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 15), 'height', tuple_assignment_257449_257848)
        
        
        # Getting the type of 'self' (line 218)
        self_257849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 11), 'self')
        # Obtaining the member '_resize_callback' of a type (line 218)
        _resize_callback_257850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 218, 11), self_257849, '_resize_callback')
        # Getting the type of 'None' (line 218)
        None_257851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 40), 'None')
        # Applying the binary operator 'isnot' (line 218)
        result_is_not_257852 = python_operator(stypy.reporting.localization.Localization(__file__, 218, 11), 'isnot', _resize_callback_257850, None_257851)
        
        # Testing the type of an if condition (line 218)
        if_condition_257853 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 218, 8), result_is_not_257852)
        # Assigning a type to the variable 'if_condition_257853' (line 218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 8), 'if_condition_257853', if_condition_257853)
        # SSA begins for if statement (line 218)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _resize_callback(...): (line 219)
        # Processing the call arguments (line 219)
        # Getting the type of 'event' (line 219)
        event_257856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 34), 'event', False)
        # Processing the call keyword arguments (line 219)
        kwargs_257857 = {}
        # Getting the type of 'self' (line 219)
        self_257854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 12), 'self', False)
        # Obtaining the member '_resize_callback' of a type (line 219)
        _resize_callback_257855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 12), self_257854, '_resize_callback')
        # Calling _resize_callback(args, kwargs) (line 219)
        _resize_callback_call_result_257858 = invoke(stypy.reporting.localization.Localization(__file__, 219, 12), _resize_callback_257855, *[event_257856], **kwargs_257857)
        
        # SSA join for if statement (line 218)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 222):
        
        # Assigning a Attribute to a Name (line 222):
        # Getting the type of 'self' (line 222)
        self_257859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 17), 'self')
        # Obtaining the member 'figure' of a type (line 222)
        figure_257860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 17), self_257859, 'figure')
        # Obtaining the member 'dpi' of a type (line 222)
        dpi_257861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 17), figure_257860, 'dpi')
        # Assigning a type to the variable 'dpival' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 8), 'dpival', dpi_257861)
        
        # Assigning a BinOp to a Name (line 223):
        
        # Assigning a BinOp to a Name (line 223):
        # Getting the type of 'width' (line 223)
        width_257862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 16), 'width')
        # Getting the type of 'dpival' (line 223)
        dpival_257863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 22), 'dpival')
        # Applying the binary operator 'div' (line 223)
        result_div_257864 = python_operator(stypy.reporting.localization.Localization(__file__, 223, 16), 'div', width_257862, dpival_257863)
        
        # Assigning a type to the variable 'winch' (line 223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 223, 8), 'winch', result_div_257864)
        
        # Assigning a BinOp to a Name (line 224):
        
        # Assigning a BinOp to a Name (line 224):
        # Getting the type of 'height' (line 224)
        height_257865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 16), 'height')
        # Getting the type of 'dpival' (line 224)
        dpival_257866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 23), 'dpival')
        # Applying the binary operator 'div' (line 224)
        result_div_257867 = python_operator(stypy.reporting.localization.Localization(__file__, 224, 16), 'div', height_257865, dpival_257866)
        
        # Assigning a type to the variable 'hinch' (line 224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 8), 'hinch', result_div_257867)
        
        # Call to set_size_inches(...): (line 225)
        # Processing the call arguments (line 225)
        # Getting the type of 'winch' (line 225)
        winch_257871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 36), 'winch', False)
        # Getting the type of 'hinch' (line 225)
        hinch_257872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 43), 'hinch', False)
        # Processing the call keyword arguments (line 225)
        # Getting the type of 'False' (line 225)
        False_257873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 58), 'False', False)
        keyword_257874 = False_257873
        kwargs_257875 = {'forward': keyword_257874}
        # Getting the type of 'self' (line 225)
        self_257868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 8), 'self', False)
        # Obtaining the member 'figure' of a type (line 225)
        figure_257869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 8), self_257868, 'figure')
        # Obtaining the member 'set_size_inches' of a type (line 225)
        set_size_inches_257870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 8), figure_257869, 'set_size_inches')
        # Calling set_size_inches(args, kwargs) (line 225)
        set_size_inches_call_result_257876 = invoke(stypy.reporting.localization.Localization(__file__, 225, 8), set_size_inches_257870, *[winch_257871, hinch_257872], **kwargs_257875)
        
        
        # Call to delete(...): (line 228)
        # Processing the call arguments (line 228)
        # Getting the type of 'self' (line 228)
        self_257880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 30), 'self', False)
        # Obtaining the member '_tkphoto' of a type (line 228)
        _tkphoto_257881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 30), self_257880, '_tkphoto')
        # Processing the call keyword arguments (line 228)
        kwargs_257882 = {}
        # Getting the type of 'self' (line 228)
        self_257877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 8), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 228)
        _tkcanvas_257878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 8), self_257877, '_tkcanvas')
        # Obtaining the member 'delete' of a type (line 228)
        delete_257879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 8), _tkcanvas_257878, 'delete')
        # Calling delete(args, kwargs) (line 228)
        delete_call_result_257883 = invoke(stypy.reporting.localization.Localization(__file__, 228, 8), delete_257879, *[_tkphoto_257881], **kwargs_257882)
        
        
        # Assigning a Call to a Attribute (line 229):
        
        # Assigning a Call to a Attribute (line 229):
        
        # Call to PhotoImage(...): (line 229)
        # Processing the call keyword arguments (line 229)
        # Getting the type of 'self' (line 230)
        self_257886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 19), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 230)
        _tkcanvas_257887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 19), self_257886, '_tkcanvas')
        keyword_257888 = _tkcanvas_257887
        
        # Call to int(...): (line 230)
        # Processing the call arguments (line 230)
        # Getting the type of 'width' (line 230)
        width_257890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 45), 'width', False)
        # Processing the call keyword arguments (line 230)
        kwargs_257891 = {}
        # Getting the type of 'int' (line 230)
        int_257889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 41), 'int', False)
        # Calling int(args, kwargs) (line 230)
        int_call_result_257892 = invoke(stypy.reporting.localization.Localization(__file__, 230, 41), int_257889, *[width_257890], **kwargs_257891)
        
        keyword_257893 = int_call_result_257892
        
        # Call to int(...): (line 230)
        # Processing the call arguments (line 230)
        # Getting the type of 'height' (line 230)
        height_257895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 64), 'height', False)
        # Processing the call keyword arguments (line 230)
        kwargs_257896 = {}
        # Getting the type of 'int' (line 230)
        int_257894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 60), 'int', False)
        # Calling int(args, kwargs) (line 230)
        int_call_result_257897 = invoke(stypy.reporting.localization.Localization(__file__, 230, 60), int_257894, *[height_257895], **kwargs_257896)
        
        keyword_257898 = int_call_result_257897
        kwargs_257899 = {'width': keyword_257893, 'master': keyword_257888, 'height': keyword_257898}
        # Getting the type of 'Tk' (line 229)
        Tk_257884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 24), 'Tk', False)
        # Obtaining the member 'PhotoImage' of a type (line 229)
        PhotoImage_257885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 24), Tk_257884, 'PhotoImage')
        # Calling PhotoImage(args, kwargs) (line 229)
        PhotoImage_call_result_257900 = invoke(stypy.reporting.localization.Localization(__file__, 229, 24), PhotoImage_257885, *[], **kwargs_257899)
        
        # Getting the type of 'self' (line 229)
        self_257901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 8), 'self')
        # Setting the type of the member '_tkphoto' of a type (line 229)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 8), self_257901, '_tkphoto', PhotoImage_call_result_257900)
        
        # Call to create_image(...): (line 231)
        # Processing the call arguments (line 231)
        
        # Call to int(...): (line 231)
        # Processing the call arguments (line 231)
        # Getting the type of 'width' (line 231)
        width_257906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 40), 'width', False)
        int_257907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 46), 'int')
        # Applying the binary operator 'div' (line 231)
        result_div_257908 = python_operator(stypy.reporting.localization.Localization(__file__, 231, 40), 'div', width_257906, int_257907)
        
        # Processing the call keyword arguments (line 231)
        kwargs_257909 = {}
        # Getting the type of 'int' (line 231)
        int_257905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 36), 'int', False)
        # Calling int(args, kwargs) (line 231)
        int_call_result_257910 = invoke(stypy.reporting.localization.Localization(__file__, 231, 36), int_257905, *[result_div_257908], **kwargs_257909)
        
        
        # Call to int(...): (line 231)
        # Processing the call arguments (line 231)
        # Getting the type of 'height' (line 231)
        height_257912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 53), 'height', False)
        int_257913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 60), 'int')
        # Applying the binary operator 'div' (line 231)
        result_div_257914 = python_operator(stypy.reporting.localization.Localization(__file__, 231, 53), 'div', height_257912, int_257913)
        
        # Processing the call keyword arguments (line 231)
        kwargs_257915 = {}
        # Getting the type of 'int' (line 231)
        int_257911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 49), 'int', False)
        # Calling int(args, kwargs) (line 231)
        int_call_result_257916 = invoke(stypy.reporting.localization.Localization(__file__, 231, 49), int_257911, *[result_div_257914], **kwargs_257915)
        
        # Processing the call keyword arguments (line 231)
        # Getting the type of 'self' (line 231)
        self_257917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 69), 'self', False)
        # Obtaining the member '_tkphoto' of a type (line 231)
        _tkphoto_257918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 69), self_257917, '_tkphoto')
        keyword_257919 = _tkphoto_257918
        kwargs_257920 = {'image': keyword_257919}
        # Getting the type of 'self' (line 231)
        self_257902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 231)
        _tkcanvas_257903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 8), self_257902, '_tkcanvas')
        # Obtaining the member 'create_image' of a type (line 231)
        create_image_257904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 8), _tkcanvas_257903, 'create_image')
        # Calling create_image(args, kwargs) (line 231)
        create_image_call_result_257921 = invoke(stypy.reporting.localization.Localization(__file__, 231, 8), create_image_257904, *[int_call_result_257910, int_call_result_257916], **kwargs_257920)
        
        
        # Call to resize_event(...): (line 232)
        # Processing the call keyword arguments (line 232)
        kwargs_257924 = {}
        # Getting the type of 'self' (line 232)
        self_257922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 8), 'self', False)
        # Obtaining the member 'resize_event' of a type (line 232)
        resize_event_257923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 8), self_257922, 'resize_event')
        # Calling resize_event(args, kwargs) (line 232)
        resize_event_call_result_257925 = invoke(stypy.reporting.localization.Localization(__file__, 232, 8), resize_event_257923, *[], **kwargs_257924)
        
        
        # Call to show(...): (line 233)
        # Processing the call keyword arguments (line 233)
        kwargs_257928 = {}
        # Getting the type of 'self' (line 233)
        self_257926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'self', False)
        # Obtaining the member 'show' of a type (line 233)
        show_257927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 8), self_257926, 'show')
        # Calling show(args, kwargs) (line 233)
        show_call_result_257929 = invoke(stypy.reporting.localization.Localization(__file__, 233, 8), show_257927, *[], **kwargs_257928)
        
        
        # Call to _update_pointer_position(...): (line 241)
        # Processing the call arguments (line 241)
        # Getting the type of 'event' (line 241)
        event_257932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 38), 'event', False)
        # Processing the call keyword arguments (line 241)
        kwargs_257933 = {}
        # Getting the type of 'self' (line 241)
        self_257930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 8), 'self', False)
        # Obtaining the member '_update_pointer_position' of a type (line 241)
        _update_pointer_position_257931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 8), self_257930, '_update_pointer_position')
        # Calling _update_pointer_position(args, kwargs) (line 241)
        _update_pointer_position_call_result_257934 = invoke(stypy.reporting.localization.Localization(__file__, 241, 8), _update_pointer_position_257931, *[event_257932], **kwargs_257933)
        
        
        # ################# End of 'resize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'resize' in the type store
        # Getting the type of 'stypy_return_type' (line 216)
        stypy_return_type_257935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_257935)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'resize'
        return stypy_return_type_257935


    @norecursion
    def _update_pointer_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 243)
        None_257936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 48), 'None')
        defaults = [None_257936]
        # Create a new context for function '_update_pointer_position'
        module_type_store = module_type_store.open_function_context('_update_pointer_position', 243, 4, False)
        # Assigning a type to the variable 'self' (line 244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg._update_pointer_position.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg._update_pointer_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg._update_pointer_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg._update_pointer_position.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg._update_pointer_position')
        FigureCanvasTkAgg._update_pointer_position.__dict__.__setitem__('stypy_param_names_list', ['guiEvent'])
        FigureCanvasTkAgg._update_pointer_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg._update_pointer_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg._update_pointer_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg._update_pointer_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg._update_pointer_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg._update_pointer_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg._update_pointer_position', ['guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_pointer_position', localization, ['guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_pointer_position(...)' code ##################

        unicode_257937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, (-1)), 'unicode', u'\n        Figure out if we are inside the canvas or not and update the\n        canvas enter/leave events\n        ')
        
        # Assigning a Call to a Name (line 253):
        
        # Assigning a Call to a Name (line 253):
        
        # Call to winfo_rootx(...): (line 253)
        # Processing the call keyword arguments (line 253)
        kwargs_257941 = {}
        # Getting the type of 'self' (line 253)
        self_257938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 13), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 253)
        _tkcanvas_257939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 13), self_257938, '_tkcanvas')
        # Obtaining the member 'winfo_rootx' of a type (line 253)
        winfo_rootx_257940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 13), _tkcanvas_257939, 'winfo_rootx')
        # Calling winfo_rootx(args, kwargs) (line 253)
        winfo_rootx_call_result_257942 = invoke(stypy.reporting.localization.Localization(__file__, 253, 13), winfo_rootx_257940, *[], **kwargs_257941)
        
        # Assigning a type to the variable 'xw' (line 253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 8), 'xw', winfo_rootx_call_result_257942)
        
        # Assigning a Call to a Name (line 254):
        
        # Assigning a Call to a Name (line 254):
        
        # Call to winfo_rooty(...): (line 254)
        # Processing the call keyword arguments (line 254)
        kwargs_257946 = {}
        # Getting the type of 'self' (line 254)
        self_257943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 13), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 254)
        _tkcanvas_257944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 13), self_257943, '_tkcanvas')
        # Obtaining the member 'winfo_rooty' of a type (line 254)
        winfo_rooty_257945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 13), _tkcanvas_257944, 'winfo_rooty')
        # Calling winfo_rooty(args, kwargs) (line 254)
        winfo_rooty_call_result_257947 = invoke(stypy.reporting.localization.Localization(__file__, 254, 13), winfo_rooty_257945, *[], **kwargs_257946)
        
        # Assigning a type to the variable 'yw' (line 254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 254, 8), 'yw', winfo_rooty_call_result_257947)
        
        # Assigning a Call to a Tuple (line 256):
        
        # Assigning a Call to a Name:
        
        # Call to winfo_pointerxy(...): (line 256)
        # Processing the call keyword arguments (line 256)
        kwargs_257951 = {}
        # Getting the type of 'self' (line 256)
        self_257948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 17), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 256)
        _tkcanvas_257949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 17), self_257948, '_tkcanvas')
        # Obtaining the member 'winfo_pointerxy' of a type (line 256)
        winfo_pointerxy_257950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 17), _tkcanvas_257949, 'winfo_pointerxy')
        # Calling winfo_pointerxy(args, kwargs) (line 256)
        winfo_pointerxy_call_result_257952 = invoke(stypy.reporting.localization.Localization(__file__, 256, 17), winfo_pointerxy_257950, *[], **kwargs_257951)
        
        # Assigning a type to the variable 'call_assignment_257450' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_257450', winfo_pointerxy_call_result_257952)
        
        # Assigning a Call to a Name (line 256):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_257955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 8), 'int')
        # Processing the call keyword arguments
        kwargs_257956 = {}
        # Getting the type of 'call_assignment_257450' (line 256)
        call_assignment_257450_257953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_257450', False)
        # Obtaining the member '__getitem__' of a type (line 256)
        getitem___257954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 8), call_assignment_257450_257953, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_257957 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___257954, *[int_257955], **kwargs_257956)
        
        # Assigning a type to the variable 'call_assignment_257451' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_257451', getitem___call_result_257957)
        
        # Assigning a Name to a Name (line 256):
        # Getting the type of 'call_assignment_257451' (line 256)
        call_assignment_257451_257958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_257451')
        # Assigning a type to the variable 'xp' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'xp', call_assignment_257451_257958)
        
        # Assigning a Call to a Name (line 256):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_257961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 8), 'int')
        # Processing the call keyword arguments
        kwargs_257962 = {}
        # Getting the type of 'call_assignment_257450' (line 256)
        call_assignment_257450_257959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_257450', False)
        # Obtaining the member '__getitem__' of a type (line 256)
        getitem___257960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 8), call_assignment_257450_257959, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_257963 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___257960, *[int_257961], **kwargs_257962)
        
        # Assigning a type to the variable 'call_assignment_257452' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_257452', getitem___call_result_257963)
        
        # Assigning a Name to a Name (line 256):
        # Getting the type of 'call_assignment_257452' (line 256)
        call_assignment_257452_257964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_257452')
        # Assigning a type to the variable 'yp' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 12), 'yp', call_assignment_257452_257964)
        
        # Assigning a BinOp to a Name (line 259):
        
        # Assigning a BinOp to a Name (line 259):
        # Getting the type of 'xp' (line 259)
        xp_257965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 13), 'xp')
        # Getting the type of 'xw' (line 259)
        xw_257966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 18), 'xw')
        # Applying the binary operator '-' (line 259)
        result_sub_257967 = python_operator(stypy.reporting.localization.Localization(__file__, 259, 13), '-', xp_257965, xw_257966)
        
        # Assigning a type to the variable 'xc' (line 259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 8), 'xc', result_sub_257967)
        
        # Assigning a BinOp to a Name (line 260):
        
        # Assigning a BinOp to a Name (line 260):
        # Getting the type of 'yp' (line 260)
        yp_257968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 13), 'yp')
        # Getting the type of 'yw' (line 260)
        yw_257969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 18), 'yw')
        # Applying the binary operator '-' (line 260)
        result_sub_257970 = python_operator(stypy.reporting.localization.Localization(__file__, 260, 13), '-', yp_257968, yw_257969)
        
        # Assigning a type to the variable 'yc' (line 260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 260, 8), 'yc', result_sub_257970)
        
        # Assigning a BinOp to a Name (line 263):
        
        # Assigning a BinOp to a Name (line 263):
        # Getting the type of 'self' (line 263)
        self_257971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 13), 'self')
        # Obtaining the member 'figure' of a type (line 263)
        figure_257972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 13), self_257971, 'figure')
        # Obtaining the member 'bbox' of a type (line 263)
        bbox_257973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 13), figure_257972, 'bbox')
        # Obtaining the member 'height' of a type (line 263)
        height_257974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 13), bbox_257973, 'height')
        # Getting the type of 'yc' (line 263)
        yc_257975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 39), 'yc')
        # Applying the binary operator '-' (line 263)
        result_sub_257976 = python_operator(stypy.reporting.localization.Localization(__file__, 263, 13), '-', height_257974, yc_257975)
        
        # Assigning a type to the variable 'yc' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'yc', result_sub_257976)
        
        int_257977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 11), 'int')
        # Testing the type of an if condition (line 289)
        if_condition_257978 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 289, 8), int_257977)
        # Assigning a type to the variable 'if_condition_257978' (line 289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 289, 8), 'if_condition_257978', if_condition_257978)
        # SSA begins for if statement (line 289)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 291):
        
        # Assigning a Name to a Name (line 291):
        # Getting the type of 'xc' (line 291)
        xc_257979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 39), 'xc')
        # Assigning a type to the variable 'tuple_assignment_257453' (line 291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 12), 'tuple_assignment_257453', xc_257979)
        
        # Assigning a Name to a Name (line 291):
        # Getting the type of 'yc' (line 291)
        yc_257980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 43), 'yc')
        # Assigning a type to the variable 'tuple_assignment_257454' (line 291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 12), 'tuple_assignment_257454', yc_257980)
        
        # Assigning a Name to a Attribute (line 291):
        # Getting the type of 'tuple_assignment_257453' (line 291)
        tuple_assignment_257453_257981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 12), 'tuple_assignment_257453')
        # Getting the type of 'self' (line 291)
        self_257982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 12), 'self')
        # Setting the type of the member '_lastx' of a type (line 291)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 291, 12), self_257982, '_lastx', tuple_assignment_257453_257981)
        
        # Assigning a Name to a Attribute (line 291):
        # Getting the type of 'tuple_assignment_257454' (line 291)
        tuple_assignment_257454_257983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 12), 'tuple_assignment_257454')
        # Getting the type of 'self' (line 291)
        self_257984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 25), 'self')
        # Setting the type of the member '_lasty' of a type (line 291)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 291, 25), self_257984, '_lasty', tuple_assignment_257454_257983)
        # SSA branch for the else part of an if statement (line 289)
        module_type_store.open_ssa_branch('else')
        
        int_257985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 13), 'int')
        # Testing the type of an if condition (line 292)
        if_condition_257986 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 292, 13), int_257985)
        # Assigning a type to the variable 'if_condition_257986' (line 292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 13), 'if_condition_257986', if_condition_257986)
        # SSA begins for if statement (line 292)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to motion_notify_event(...): (line 294)
        # Processing the call arguments (line 294)
        # Getting the type of 'self' (line 294)
        self_257989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 49), 'self', False)
        # Getting the type of 'xc' (line 294)
        xc_257990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 55), 'xc', False)
        # Getting the type of 'yc' (line 294)
        yc_257991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 59), 'yc', False)
        # Getting the type of 'guiEvent' (line 294)
        guiEvent_257992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 63), 'guiEvent', False)
        # Processing the call keyword arguments (line 294)
        kwargs_257993 = {}
        # Getting the type of 'FigureCanvasBase' (line 294)
        FigureCanvasBase_257987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 12), 'FigureCanvasBase', False)
        # Obtaining the member 'motion_notify_event' of a type (line 294)
        motion_notify_event_257988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 294, 12), FigureCanvasBase_257987, 'motion_notify_event')
        # Calling motion_notify_event(args, kwargs) (line 294)
        motion_notify_event_call_result_257994 = invoke(stypy.reporting.localization.Localization(__file__, 294, 12), motion_notify_event_257988, *[self_257989, xc_257990, yc_257991, guiEvent_257992], **kwargs_257993)
        
        # SSA branch for the else part of an if statement (line 292)
        module_type_store.open_ssa_branch('else')
        
        int_257995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 13), 'int')
        # Testing the type of an if condition (line 295)
        if_condition_257996 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 295, 13), int_257995)
        # Assigning a type to the variable 'if_condition_257996' (line 295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 295, 13), 'if_condition_257996', if_condition_257996)
        # SSA begins for if statement (line 295)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to contains(...): (line 298)
        # Processing the call arguments (line 298)
        # Getting the type of 'xc' (line 298)
        xc_258001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 41), 'xc', False)
        # Getting the type of 'yc' (line 298)
        yc_258002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 45), 'yc', False)
        # Processing the call keyword arguments (line 298)
        kwargs_258003 = {}
        # Getting the type of 'self' (line 298)
        self_257997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 15), 'self', False)
        # Obtaining the member 'figure' of a type (line 298)
        figure_257998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 15), self_257997, 'figure')
        # Obtaining the member 'bbox' of a type (line 298)
        bbox_257999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 15), figure_257998, 'bbox')
        # Obtaining the member 'contains' of a type (line 298)
        contains_258000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 15), bbox_257999, 'contains')
        # Calling contains(args, kwargs) (line 298)
        contains_call_result_258004 = invoke(stypy.reporting.localization.Localization(__file__, 298, 15), contains_258000, *[xc_258001, yc_258002], **kwargs_258003)
        
        # Testing the type of an if condition (line 298)
        if_condition_258005 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 298, 12), contains_call_result_258004)
        # Assigning a type to the variable 'if_condition_258005' (line 298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 12), 'if_condition_258005', if_condition_258005)
        # SSA begins for if statement (line 298)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to enter_notify_event(...): (line 299)
        # Processing the call arguments (line 299)
        # Getting the type of 'guiEvent' (line 299)
        guiEvent_258008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 40), 'guiEvent', False)
        # Processing the call keyword arguments (line 299)
        
        # Obtaining an instance of the builtin type 'tuple' (line 299)
        tuple_258009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 54), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 299)
        # Adding element type (line 299)
        # Getting the type of 'xc' (line 299)
        xc_258010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 54), 'xc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 299, 54), tuple_258009, xc_258010)
        # Adding element type (line 299)
        # Getting the type of 'yc' (line 299)
        yc_258011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 57), 'yc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 299, 54), tuple_258009, yc_258011)
        
        keyword_258012 = tuple_258009
        kwargs_258013 = {'xy': keyword_258012}
        # Getting the type of 'self' (line 299)
        self_258006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 16), 'self', False)
        # Obtaining the member 'enter_notify_event' of a type (line 299)
        enter_notify_event_258007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 16), self_258006, 'enter_notify_event')
        # Calling enter_notify_event(args, kwargs) (line 299)
        enter_notify_event_call_result_258014 = invoke(stypy.reporting.localization.Localization(__file__, 299, 16), enter_notify_event_258007, *[guiEvent_258008], **kwargs_258013)
        
        # SSA branch for the else part of an if statement (line 298)
        module_type_store.open_ssa_branch('else')
        
        # Call to leave_notify_event(...): (line 301)
        # Processing the call arguments (line 301)
        # Getting the type of 'guiEvent' (line 301)
        guiEvent_258017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 40), 'guiEvent', False)
        # Processing the call keyword arguments (line 301)
        kwargs_258018 = {}
        # Getting the type of 'self' (line 301)
        self_258015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 16), 'self', False)
        # Obtaining the member 'leave_notify_event' of a type (line 301)
        leave_notify_event_258016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 16), self_258015, 'leave_notify_event')
        # Calling leave_notify_event(args, kwargs) (line 301)
        leave_notify_event_call_result_258019 = invoke(stypy.reporting.localization.Localization(__file__, 301, 16), leave_notify_event_258016, *[guiEvent_258017], **kwargs_258018)
        
        # SSA join for if statement (line 298)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 295)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 292)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 289)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_update_pointer_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_pointer_position' in the type store
        # Getting the type of 'stypy_return_type' (line 243)
        stypy_return_type_258020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258020)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_pointer_position'
        return stypy_return_type_258020


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 303, 4, False)
        # Assigning a type to the variable 'self' (line 304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 304, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.draw.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.draw.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.draw')
        FigureCanvasTkAgg.draw.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasTkAgg.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.draw.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.draw', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        
        # Call to draw(...): (line 304)
        # Processing the call arguments (line 304)
        # Getting the type of 'self' (line 304)
        self_258023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 29), 'self', False)
        # Processing the call keyword arguments (line 304)
        kwargs_258024 = {}
        # Getting the type of 'FigureCanvasAgg' (line 304)
        FigureCanvasAgg_258021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 8), 'FigureCanvasAgg', False)
        # Obtaining the member 'draw' of a type (line 304)
        draw_258022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 8), FigureCanvasAgg_258021, 'draw')
        # Calling draw(args, kwargs) (line 304)
        draw_call_result_258025 = invoke(stypy.reporting.localization.Localization(__file__, 304, 8), draw_258022, *[self_258023], **kwargs_258024)
        
        
        # Call to blit(...): (line 305)
        # Processing the call arguments (line 305)
        # Getting the type of 'self' (line 305)
        self_258028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 19), 'self', False)
        # Obtaining the member '_tkphoto' of a type (line 305)
        _tkphoto_258029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 19), self_258028, '_tkphoto')
        # Getting the type of 'self' (line 305)
        self_258030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 34), 'self', False)
        # Obtaining the member 'renderer' of a type (line 305)
        renderer_258031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 34), self_258030, 'renderer')
        # Obtaining the member '_renderer' of a type (line 305)
        _renderer_258032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 34), renderer_258031, '_renderer')
        # Processing the call keyword arguments (line 305)
        int_258033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 305, 69), 'int')
        keyword_258034 = int_258033
        kwargs_258035 = {'colormode': keyword_258034}
        # Getting the type of 'tkagg' (line 305)
        tkagg_258026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 8), 'tkagg', False)
        # Obtaining the member 'blit' of a type (line 305)
        blit_258027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 8), tkagg_258026, 'blit')
        # Calling blit(args, kwargs) (line 305)
        blit_call_result_258036 = invoke(stypy.reporting.localization.Localization(__file__, 305, 8), blit_258027, *[_tkphoto_258029, _renderer_258032], **kwargs_258035)
        
        
        # Call to update_idletasks(...): (line 306)
        # Processing the call keyword arguments (line 306)
        kwargs_258040 = {}
        # Getting the type of 'self' (line 306)
        self_258037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 8), 'self', False)
        # Obtaining the member '_master' of a type (line 306)
        _master_258038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 8), self_258037, '_master')
        # Obtaining the member 'update_idletasks' of a type (line 306)
        update_idletasks_258039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 8), _master_258038, 'update_idletasks')
        # Calling update_idletasks(args, kwargs) (line 306)
        update_idletasks_call_result_258041 = invoke(stypy.reporting.localization.Localization(__file__, 306, 8), update_idletasks_258039, *[], **kwargs_258040)
        
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 303)
        stypy_return_type_258042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258042)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_258042


    @norecursion
    def blit(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 308)
        None_258043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 24), 'None')
        defaults = [None_258043]
        # Create a new context for function 'blit'
        module_type_store = module_type_store.open_function_context('blit', 308, 4, False)
        # Assigning a type to the variable 'self' (line 309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.blit.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.blit.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.blit.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.blit.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.blit')
        FigureCanvasTkAgg.blit.__dict__.__setitem__('stypy_param_names_list', ['bbox'])
        FigureCanvasTkAgg.blit.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg.blit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg.blit.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.blit.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.blit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.blit.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.blit', ['bbox'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'blit', localization, ['bbox'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'blit(...)' code ##################

        
        # Call to blit(...): (line 309)
        # Processing the call arguments (line 309)
        # Getting the type of 'self' (line 309)
        self_258046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 19), 'self', False)
        # Obtaining the member '_tkphoto' of a type (line 309)
        _tkphoto_258047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 19), self_258046, '_tkphoto')
        # Getting the type of 'self' (line 309)
        self_258048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 34), 'self', False)
        # Obtaining the member 'renderer' of a type (line 309)
        renderer_258049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 34), self_258048, 'renderer')
        # Obtaining the member '_renderer' of a type (line 309)
        _renderer_258050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 34), renderer_258049, '_renderer')
        # Processing the call keyword arguments (line 309)
        # Getting the type of 'bbox' (line 309)
        bbox_258051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 64), 'bbox', False)
        keyword_258052 = bbox_258051
        int_258053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 309, 80), 'int')
        keyword_258054 = int_258053
        kwargs_258055 = {'colormode': keyword_258054, 'bbox': keyword_258052}
        # Getting the type of 'tkagg' (line 309)
        tkagg_258044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 8), 'tkagg', False)
        # Obtaining the member 'blit' of a type (line 309)
        blit_258045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 8), tkagg_258044, 'blit')
        # Calling blit(args, kwargs) (line 309)
        blit_call_result_258056 = invoke(stypy.reporting.localization.Localization(__file__, 309, 8), blit_258045, *[_tkphoto_258047, _renderer_258050], **kwargs_258055)
        
        
        # Call to update_idletasks(...): (line 310)
        # Processing the call keyword arguments (line 310)
        kwargs_258060 = {}
        # Getting the type of 'self' (line 310)
        self_258057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 8), 'self', False)
        # Obtaining the member '_master' of a type (line 310)
        _master_258058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 8), self_258057, '_master')
        # Obtaining the member 'update_idletasks' of a type (line 310)
        update_idletasks_258059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 8), _master_258058, 'update_idletasks')
        # Calling update_idletasks(args, kwargs) (line 310)
        update_idletasks_call_result_258061 = invoke(stypy.reporting.localization.Localization(__file__, 310, 8), update_idletasks_258059, *[], **kwargs_258060)
        
        
        # ################# End of 'blit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'blit' in the type store
        # Getting the type of 'stypy_return_type' (line 308)
        stypy_return_type_258062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258062)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'blit'
        return stypy_return_type_258062

    
    # Assigning a Name to a Name (line 312):

    @norecursion
    def draw_idle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_idle'
        module_type_store = module_type_store.open_function_context('draw_idle', 314, 4, False)
        # Assigning a type to the variable 'self' (line 315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 315, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.draw_idle.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.draw_idle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.draw_idle.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.draw_idle.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.draw_idle')
        FigureCanvasTkAgg.draw_idle.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasTkAgg.draw_idle.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg.draw_idle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg.draw_idle.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.draw_idle.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.draw_idle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.draw_idle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.draw_idle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_idle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_idle(...)' code ##################

        unicode_258063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 8), 'unicode', u'update drawing area only if idle')
        
        
        # Getting the type of 'self' (line 316)
        self_258064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 11), 'self')
        # Obtaining the member '_idle' of a type (line 316)
        _idle_258065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 316, 11), self_258064, '_idle')
        # Getting the type of 'False' (line 316)
        False_258066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 25), 'False')
        # Applying the binary operator 'is' (line 316)
        result_is__258067 = python_operator(stypy.reporting.localization.Localization(__file__, 316, 11), 'is', _idle_258065, False_258066)
        
        # Testing the type of an if condition (line 316)
        if_condition_258068 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 316, 8), result_is__258067)
        # Assigning a type to the variable 'if_condition_258068' (line 316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'if_condition_258068', if_condition_258068)
        # SSA begins for if statement (line 316)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 316)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 319):
        
        # Assigning a Name to a Attribute (line 319):
        # Getting the type of 'False' (line 319)
        False_258069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 21), 'False')
        # Getting the type of 'self' (line 319)
        self_258070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 8), 'self')
        # Setting the type of the member '_idle' of a type (line 319)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 8), self_258070, '_idle', False_258069)

        @norecursion
        def idle_draw(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'idle_draw'
            module_type_store = module_type_store.open_function_context('idle_draw', 321, 8, False)
            
            # Passed parameters checking function
            idle_draw.stypy_localization = localization
            idle_draw.stypy_type_of_self = None
            idle_draw.stypy_type_store = module_type_store
            idle_draw.stypy_function_name = 'idle_draw'
            idle_draw.stypy_param_names_list = []
            idle_draw.stypy_varargs_param_name = 'args'
            idle_draw.stypy_kwargs_param_name = None
            idle_draw.stypy_call_defaults = defaults
            idle_draw.stypy_call_varargs = varargs
            idle_draw.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'idle_draw', [], 'args', None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'idle_draw', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'idle_draw(...)' code ##################

            
            # Try-finally block (line 322)
            
            # Call to draw(...): (line 323)
            # Processing the call keyword arguments (line 323)
            kwargs_258073 = {}
            # Getting the type of 'self' (line 323)
            self_258071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 16), 'self', False)
            # Obtaining the member 'draw' of a type (line 323)
            draw_258072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 16), self_258071, 'draw')
            # Calling draw(args, kwargs) (line 323)
            draw_call_result_258074 = invoke(stypy.reporting.localization.Localization(__file__, 323, 16), draw_258072, *[], **kwargs_258073)
            
            
            # finally branch of the try-finally block (line 322)
            
            # Assigning a Name to a Attribute (line 325):
            
            # Assigning a Name to a Attribute (line 325):
            # Getting the type of 'True' (line 325)
            True_258075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 29), 'True')
            # Getting the type of 'self' (line 325)
            self_258076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 16), 'self')
            # Setting the type of the member '_idle' of a type (line 325)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 16), self_258076, '_idle', True_258075)
            
            
            # ################# End of 'idle_draw(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'idle_draw' in the type store
            # Getting the type of 'stypy_return_type' (line 321)
            stypy_return_type_258077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_258077)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'idle_draw'
            return stypy_return_type_258077

        # Assigning a type to the variable 'idle_draw' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 8), 'idle_draw', idle_draw)
        
        # Assigning a Call to a Attribute (line 327):
        
        # Assigning a Call to a Attribute (line 327):
        
        # Call to after_idle(...): (line 327)
        # Processing the call arguments (line 327)
        # Getting the type of 'idle_draw' (line 327)
        idle_draw_258081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 56), 'idle_draw', False)
        # Processing the call keyword arguments (line 327)
        kwargs_258082 = {}
        # Getting the type of 'self' (line 327)
        self_258078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 30), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 327)
        _tkcanvas_258079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 30), self_258078, '_tkcanvas')
        # Obtaining the member 'after_idle' of a type (line 327)
        after_idle_258080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 30), _tkcanvas_258079, 'after_idle')
        # Calling after_idle(args, kwargs) (line 327)
        after_idle_call_result_258083 = invoke(stypy.reporting.localization.Localization(__file__, 327, 30), after_idle_258080, *[idle_draw_258081], **kwargs_258082)
        
        # Getting the type of 'self' (line 327)
        self_258084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'self')
        # Setting the type of the member '_idle_callback' of a type (line 327)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 8), self_258084, '_idle_callback', after_idle_call_result_258083)
        
        # ################# End of 'draw_idle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_idle' in the type store
        # Getting the type of 'stypy_return_type' (line 314)
        stypy_return_type_258085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258085)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_idle'
        return stypy_return_type_258085


    @norecursion
    def get_tk_widget(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_tk_widget'
        module_type_store = module_type_store.open_function_context('get_tk_widget', 329, 4, False)
        # Assigning a type to the variable 'self' (line 330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.get_tk_widget.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.get_tk_widget.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.get_tk_widget.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.get_tk_widget.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.get_tk_widget')
        FigureCanvasTkAgg.get_tk_widget.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasTkAgg.get_tk_widget.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg.get_tk_widget.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg.get_tk_widget.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.get_tk_widget.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.get_tk_widget.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.get_tk_widget.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.get_tk_widget', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_tk_widget', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_tk_widget(...)' code ##################

        unicode_258086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, (-1)), 'unicode', u'returns the Tk widget used to implement FigureCanvasTkAgg.\n        Although the initial implementation uses a Tk canvas,  this routine\n        is intended to hide that fact.\n        ')
        # Getting the type of 'self' (line 334)
        self_258087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 15), 'self')
        # Obtaining the member '_tkcanvas' of a type (line 334)
        _tkcanvas_258088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 15), self_258087, '_tkcanvas')
        # Assigning a type to the variable 'stypy_return_type' (line 334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 8), 'stypy_return_type', _tkcanvas_258088)
        
        # ################# End of 'get_tk_widget(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_tk_widget' in the type store
        # Getting the type of 'stypy_return_type' (line 329)
        stypy_return_type_258089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258089)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_tk_widget'
        return stypy_return_type_258089


    @norecursion
    def motion_notify_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'motion_notify_event'
        module_type_store = module_type_store.open_function_context('motion_notify_event', 336, 4, False)
        # Assigning a type to the variable 'self' (line 337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.motion_notify_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.motion_notify_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.motion_notify_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.motion_notify_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.motion_notify_event')
        FigureCanvasTkAgg.motion_notify_event.__dict__.__setitem__('stypy_param_names_list', ['event'])
        FigureCanvasTkAgg.motion_notify_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg.motion_notify_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg.motion_notify_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.motion_notify_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.motion_notify_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.motion_notify_event.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.motion_notify_event', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'motion_notify_event', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'motion_notify_event(...)' code ##################

        
        # Assigning a Attribute to a Name (line 337):
        
        # Assigning a Attribute to a Name (line 337):
        # Getting the type of 'event' (line 337)
        event_258090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 12), 'event')
        # Obtaining the member 'x' of a type (line 337)
        x_258091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 12), event_258090, 'x')
        # Assigning a type to the variable 'x' (line 337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 8), 'x', x_258091)
        
        # Assigning a BinOp to a Name (line 339):
        
        # Assigning a BinOp to a Name (line 339):
        # Getting the type of 'self' (line 339)
        self_258092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 12), 'self')
        # Obtaining the member 'figure' of a type (line 339)
        figure_258093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 12), self_258092, 'figure')
        # Obtaining the member 'bbox' of a type (line 339)
        bbox_258094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 12), figure_258093, 'bbox')
        # Obtaining the member 'height' of a type (line 339)
        height_258095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 12), bbox_258094, 'height')
        # Getting the type of 'event' (line 339)
        event_258096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 38), 'event')
        # Obtaining the member 'y' of a type (line 339)
        y_258097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 38), event_258096, 'y')
        # Applying the binary operator '-' (line 339)
        result_sub_258098 = python_operator(stypy.reporting.localization.Localization(__file__, 339, 12), '-', height_258095, y_258097)
        
        # Assigning a type to the variable 'y' (line 339)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 339, 8), 'y', result_sub_258098)
        
        # Call to motion_notify_event(...): (line 340)
        # Processing the call arguments (line 340)
        # Getting the type of 'self' (line 340)
        self_258101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 45), 'self', False)
        # Getting the type of 'x' (line 340)
        x_258102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 51), 'x', False)
        # Getting the type of 'y' (line 340)
        y_258103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 54), 'y', False)
        # Processing the call keyword arguments (line 340)
        # Getting the type of 'event' (line 340)
        event_258104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 66), 'event', False)
        keyword_258105 = event_258104
        kwargs_258106 = {'guiEvent': keyword_258105}
        # Getting the type of 'FigureCanvasBase' (line 340)
        FigureCanvasBase_258099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'motion_notify_event' of a type (line 340)
        motion_notify_event_258100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 8), FigureCanvasBase_258099, 'motion_notify_event')
        # Calling motion_notify_event(args, kwargs) (line 340)
        motion_notify_event_call_result_258107 = invoke(stypy.reporting.localization.Localization(__file__, 340, 8), motion_notify_event_258100, *[self_258101, x_258102, y_258103], **kwargs_258106)
        
        
        # ################# End of 'motion_notify_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'motion_notify_event' in the type store
        # Getting the type of 'stypy_return_type' (line 336)
        stypy_return_type_258108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258108)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'motion_notify_event'
        return stypy_return_type_258108


    @norecursion
    def button_press_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 343)
        False_258109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 49), 'False')
        defaults = [False_258109]
        # Create a new context for function 'button_press_event'
        module_type_store = module_type_store.open_function_context('button_press_event', 343, 4, False)
        # Assigning a type to the variable 'self' (line 344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.button_press_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.button_press_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.button_press_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.button_press_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.button_press_event')
        FigureCanvasTkAgg.button_press_event.__dict__.__setitem__('stypy_param_names_list', ['event', 'dblclick'])
        FigureCanvasTkAgg.button_press_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg.button_press_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg.button_press_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.button_press_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.button_press_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.button_press_event.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.button_press_event', ['event', 'dblclick'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'button_press_event', localization, ['event', 'dblclick'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'button_press_event(...)' code ##################

        
        # Assigning a Attribute to a Name (line 344):
        
        # Assigning a Attribute to a Name (line 344):
        # Getting the type of 'event' (line 344)
        event_258110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 12), 'event')
        # Obtaining the member 'x' of a type (line 344)
        x_258111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 344, 12), event_258110, 'x')
        # Assigning a type to the variable 'x' (line 344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 8), 'x', x_258111)
        
        # Assigning a BinOp to a Name (line 346):
        
        # Assigning a BinOp to a Name (line 346):
        # Getting the type of 'self' (line 346)
        self_258112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 12), 'self')
        # Obtaining the member 'figure' of a type (line 346)
        figure_258113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 12), self_258112, 'figure')
        # Obtaining the member 'bbox' of a type (line 346)
        bbox_258114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 12), figure_258113, 'bbox')
        # Obtaining the member 'height' of a type (line 346)
        height_258115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 12), bbox_258114, 'height')
        # Getting the type of 'event' (line 346)
        event_258116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 38), 'event')
        # Obtaining the member 'y' of a type (line 346)
        y_258117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 38), event_258116, 'y')
        # Applying the binary operator '-' (line 346)
        result_sub_258118 = python_operator(stypy.reporting.localization.Localization(__file__, 346, 12), '-', height_258115, y_258117)
        
        # Assigning a type to the variable 'y' (line 346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 8), 'y', result_sub_258118)
        
        # Assigning a Call to a Name (line 347):
        
        # Assigning a Call to a Name (line 347):
        
        # Call to getattr(...): (line 347)
        # Processing the call arguments (line 347)
        # Getting the type of 'event' (line 347)
        event_258120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 22), 'event', False)
        unicode_258121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 347, 29), 'unicode', u'num')
        # Getting the type of 'None' (line 347)
        None_258122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 36), 'None', False)
        # Processing the call keyword arguments (line 347)
        kwargs_258123 = {}
        # Getting the type of 'getattr' (line 347)
        getattr_258119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 14), 'getattr', False)
        # Calling getattr(args, kwargs) (line 347)
        getattr_call_result_258124 = invoke(stypy.reporting.localization.Localization(__file__, 347, 14), getattr_258119, *[event_258120, unicode_258121, None_258122], **kwargs_258123)
        
        # Assigning a type to the variable 'num' (line 347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 347, 8), 'num', getattr_call_result_258124)
        
        
        # Getting the type of 'sys' (line 349)
        sys_258125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 349)
        platform_258126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 11), sys_258125, 'platform')
        unicode_258127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 349, 25), 'unicode', u'darwin')
        # Applying the binary operator '==' (line 349)
        result_eq_258128 = python_operator(stypy.reporting.localization.Localization(__file__, 349, 11), '==', platform_258126, unicode_258127)
        
        # Testing the type of an if condition (line 349)
        if_condition_258129 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 349, 8), result_eq_258128)
        # Assigning a type to the variable 'if_condition_258129' (line 349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'if_condition_258129', if_condition_258129)
        # SSA begins for if statement (line 349)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'num' (line 352)
        num_258130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 17), 'num')
        int_258131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 22), 'int')
        # Applying the binary operator '==' (line 352)
        result_eq_258132 = python_operator(stypy.reporting.localization.Localization(__file__, 352, 17), '==', num_258130, int_258131)
        
        # Testing the type of an if condition (line 352)
        if_condition_258133 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 352, 12), result_eq_258132)
        # Assigning a type to the variable 'if_condition_258133' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 12), 'if_condition_258133', if_condition_258133)
        # SSA begins for if statement (line 352)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 352):
        
        # Assigning a Num to a Name (line 352):
        int_258134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 29), 'int')
        # Assigning a type to the variable 'num' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 25), 'num', int_258134)
        # SSA branch for the else part of an if statement (line 352)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'num' (line 353)
        num_258135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 17), 'num')
        int_258136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 353, 22), 'int')
        # Applying the binary operator '==' (line 353)
        result_eq_258137 = python_operator(stypy.reporting.localization.Localization(__file__, 353, 17), '==', num_258135, int_258136)
        
        # Testing the type of an if condition (line 353)
        if_condition_258138 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 353, 17), result_eq_258137)
        # Assigning a type to the variable 'if_condition_258138' (line 353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 353, 17), 'if_condition_258138', if_condition_258138)
        # SSA begins for if statement (line 353)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 353):
        
        # Assigning a Num to a Name (line 353):
        int_258139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 353, 29), 'int')
        # Assigning a type to the variable 'num' (line 353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 353, 25), 'num', int_258139)
        # SSA join for if statement (line 353)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 352)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 349)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to button_press_event(...): (line 355)
        # Processing the call arguments (line 355)
        # Getting the type of 'self' (line 355)
        self_258142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 44), 'self', False)
        # Getting the type of 'x' (line 355)
        x_258143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 50), 'x', False)
        # Getting the type of 'y' (line 355)
        y_258144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 53), 'y', False)
        # Getting the type of 'num' (line 355)
        num_258145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 56), 'num', False)
        # Processing the call keyword arguments (line 355)
        # Getting the type of 'dblclick' (line 355)
        dblclick_258146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 70), 'dblclick', False)
        keyword_258147 = dblclick_258146
        # Getting the type of 'event' (line 355)
        event_258148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 89), 'event', False)
        keyword_258149 = event_258148
        kwargs_258150 = {'guiEvent': keyword_258149, 'dblclick': keyword_258147}
        # Getting the type of 'FigureCanvasBase' (line 355)
        FigureCanvasBase_258140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'button_press_event' of a type (line 355)
        button_press_event_258141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 8), FigureCanvasBase_258140, 'button_press_event')
        # Calling button_press_event(args, kwargs) (line 355)
        button_press_event_call_result_258151 = invoke(stypy.reporting.localization.Localization(__file__, 355, 8), button_press_event_258141, *[self_258142, x_258143, y_258144, num_258145], **kwargs_258150)
        
        
        # ################# End of 'button_press_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'button_press_event' in the type store
        # Getting the type of 'stypy_return_type' (line 343)
        stypy_return_type_258152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258152)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'button_press_event'
        return stypy_return_type_258152


    @norecursion
    def button_dblclick_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'button_dblclick_event'
        module_type_store = module_type_store.open_function_context('button_dblclick_event', 357, 4, False)
        # Assigning a type to the variable 'self' (line 358)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 358, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.button_dblclick_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.button_dblclick_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.button_dblclick_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.button_dblclick_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.button_dblclick_event')
        FigureCanvasTkAgg.button_dblclick_event.__dict__.__setitem__('stypy_param_names_list', ['event'])
        FigureCanvasTkAgg.button_dblclick_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg.button_dblclick_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg.button_dblclick_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.button_dblclick_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.button_dblclick_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.button_dblclick_event.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.button_dblclick_event', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'button_dblclick_event', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'button_dblclick_event(...)' code ##################

        
        # Call to button_press_event(...): (line 358)
        # Processing the call arguments (line 358)
        # Getting the type of 'event' (line 358)
        event_258155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 32), 'event', False)
        # Processing the call keyword arguments (line 358)
        # Getting the type of 'True' (line 358)
        True_258156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 47), 'True', False)
        keyword_258157 = True_258156
        kwargs_258158 = {'dblclick': keyword_258157}
        # Getting the type of 'self' (line 358)
        self_258153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 8), 'self', False)
        # Obtaining the member 'button_press_event' of a type (line 358)
        button_press_event_258154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 358, 8), self_258153, 'button_press_event')
        # Calling button_press_event(args, kwargs) (line 358)
        button_press_event_call_result_258159 = invoke(stypy.reporting.localization.Localization(__file__, 358, 8), button_press_event_258154, *[event_258155], **kwargs_258158)
        
        
        # ################# End of 'button_dblclick_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'button_dblclick_event' in the type store
        # Getting the type of 'stypy_return_type' (line 357)
        stypy_return_type_258160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258160)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'button_dblclick_event'
        return stypy_return_type_258160


    @norecursion
    def button_release_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'button_release_event'
        module_type_store = module_type_store.open_function_context('button_release_event', 360, 4, False)
        # Assigning a type to the variable 'self' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.button_release_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.button_release_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.button_release_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.button_release_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.button_release_event')
        FigureCanvasTkAgg.button_release_event.__dict__.__setitem__('stypy_param_names_list', ['event'])
        FigureCanvasTkAgg.button_release_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg.button_release_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg.button_release_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.button_release_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.button_release_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.button_release_event.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.button_release_event', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'button_release_event', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'button_release_event(...)' code ##################

        
        # Assigning a Attribute to a Name (line 361):
        
        # Assigning a Attribute to a Name (line 361):
        # Getting the type of 'event' (line 361)
        event_258161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'event')
        # Obtaining the member 'x' of a type (line 361)
        x_258162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 12), event_258161, 'x')
        # Assigning a type to the variable 'x' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'x', x_258162)
        
        # Assigning a BinOp to a Name (line 363):
        
        # Assigning a BinOp to a Name (line 363):
        # Getting the type of 'self' (line 363)
        self_258163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 12), 'self')
        # Obtaining the member 'figure' of a type (line 363)
        figure_258164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 12), self_258163, 'figure')
        # Obtaining the member 'bbox' of a type (line 363)
        bbox_258165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 12), figure_258164, 'bbox')
        # Obtaining the member 'height' of a type (line 363)
        height_258166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 12), bbox_258165, 'height')
        # Getting the type of 'event' (line 363)
        event_258167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 38), 'event')
        # Obtaining the member 'y' of a type (line 363)
        y_258168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 38), event_258167, 'y')
        # Applying the binary operator '-' (line 363)
        result_sub_258169 = python_operator(stypy.reporting.localization.Localization(__file__, 363, 12), '-', height_258166, y_258168)
        
        # Assigning a type to the variable 'y' (line 363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 8), 'y', result_sub_258169)
        
        # Assigning a Call to a Name (line 365):
        
        # Assigning a Call to a Name (line 365):
        
        # Call to getattr(...): (line 365)
        # Processing the call arguments (line 365)
        # Getting the type of 'event' (line 365)
        event_258171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 22), 'event', False)
        unicode_258172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 29), 'unicode', u'num')
        # Getting the type of 'None' (line 365)
        None_258173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 36), 'None', False)
        # Processing the call keyword arguments (line 365)
        kwargs_258174 = {}
        # Getting the type of 'getattr' (line 365)
        getattr_258170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 14), 'getattr', False)
        # Calling getattr(args, kwargs) (line 365)
        getattr_call_result_258175 = invoke(stypy.reporting.localization.Localization(__file__, 365, 14), getattr_258170, *[event_258171, unicode_258172, None_258173], **kwargs_258174)
        
        # Assigning a type to the variable 'num' (line 365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 8), 'num', getattr_call_result_258175)
        
        
        # Getting the type of 'sys' (line 367)
        sys_258176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 367)
        platform_258177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 11), sys_258176, 'platform')
        unicode_258178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 25), 'unicode', u'darwin')
        # Applying the binary operator '==' (line 367)
        result_eq_258179 = python_operator(stypy.reporting.localization.Localization(__file__, 367, 11), '==', platform_258177, unicode_258178)
        
        # Testing the type of an if condition (line 367)
        if_condition_258180 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 367, 8), result_eq_258179)
        # Assigning a type to the variable 'if_condition_258180' (line 367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 8), 'if_condition_258180', if_condition_258180)
        # SSA begins for if statement (line 367)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'num' (line 370)
        num_258181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 17), 'num')
        int_258182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 22), 'int')
        # Applying the binary operator '==' (line 370)
        result_eq_258183 = python_operator(stypy.reporting.localization.Localization(__file__, 370, 17), '==', num_258181, int_258182)
        
        # Testing the type of an if condition (line 370)
        if_condition_258184 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 370, 12), result_eq_258183)
        # Assigning a type to the variable 'if_condition_258184' (line 370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 12), 'if_condition_258184', if_condition_258184)
        # SSA begins for if statement (line 370)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 370):
        
        # Assigning a Num to a Name (line 370):
        int_258185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 29), 'int')
        # Assigning a type to the variable 'num' (line 370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 25), 'num', int_258185)
        # SSA branch for the else part of an if statement (line 370)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'num' (line 371)
        num_258186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 17), 'num')
        int_258187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 371, 22), 'int')
        # Applying the binary operator '==' (line 371)
        result_eq_258188 = python_operator(stypy.reporting.localization.Localization(__file__, 371, 17), '==', num_258186, int_258187)
        
        # Testing the type of an if condition (line 371)
        if_condition_258189 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 371, 17), result_eq_258188)
        # Assigning a type to the variable 'if_condition_258189' (line 371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 17), 'if_condition_258189', if_condition_258189)
        # SSA begins for if statement (line 371)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 371):
        
        # Assigning a Num to a Name (line 371):
        int_258190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 371, 29), 'int')
        # Assigning a type to the variable 'num' (line 371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 25), 'num', int_258190)
        # SSA join for if statement (line 371)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 370)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 367)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to button_release_event(...): (line 373)
        # Processing the call arguments (line 373)
        # Getting the type of 'self' (line 373)
        self_258193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 46), 'self', False)
        # Getting the type of 'x' (line 373)
        x_258194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 52), 'x', False)
        # Getting the type of 'y' (line 373)
        y_258195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 55), 'y', False)
        # Getting the type of 'num' (line 373)
        num_258196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 58), 'num', False)
        # Processing the call keyword arguments (line 373)
        # Getting the type of 'event' (line 373)
        event_258197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 72), 'event', False)
        keyword_258198 = event_258197
        kwargs_258199 = {'guiEvent': keyword_258198}
        # Getting the type of 'FigureCanvasBase' (line 373)
        FigureCanvasBase_258191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'button_release_event' of a type (line 373)
        button_release_event_258192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 8), FigureCanvasBase_258191, 'button_release_event')
        # Calling button_release_event(args, kwargs) (line 373)
        button_release_event_call_result_258200 = invoke(stypy.reporting.localization.Localization(__file__, 373, 8), button_release_event_258192, *[self_258193, x_258194, y_258195, num_258196], **kwargs_258199)
        
        
        # ################# End of 'button_release_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'button_release_event' in the type store
        # Getting the type of 'stypy_return_type' (line 360)
        stypy_return_type_258201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258201)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'button_release_event'
        return stypy_return_type_258201


    @norecursion
    def scroll_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'scroll_event'
        module_type_store = module_type_store.open_function_context('scroll_event', 375, 4, False)
        # Assigning a type to the variable 'self' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.scroll_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.scroll_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.scroll_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.scroll_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.scroll_event')
        FigureCanvasTkAgg.scroll_event.__dict__.__setitem__('stypy_param_names_list', ['event'])
        FigureCanvasTkAgg.scroll_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg.scroll_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg.scroll_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.scroll_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.scroll_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.scroll_event.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.scroll_event', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'scroll_event', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'scroll_event(...)' code ##################

        
        # Assigning a Attribute to a Name (line 376):
        
        # Assigning a Attribute to a Name (line 376):
        # Getting the type of 'event' (line 376)
        event_258202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 12), 'event')
        # Obtaining the member 'x' of a type (line 376)
        x_258203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 12), event_258202, 'x')
        # Assigning a type to the variable 'x' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 8), 'x', x_258203)
        
        # Assigning a BinOp to a Name (line 377):
        
        # Assigning a BinOp to a Name (line 377):
        # Getting the type of 'self' (line 377)
        self_258204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 12), 'self')
        # Obtaining the member 'figure' of a type (line 377)
        figure_258205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 12), self_258204, 'figure')
        # Obtaining the member 'bbox' of a type (line 377)
        bbox_258206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 12), figure_258205, 'bbox')
        # Obtaining the member 'height' of a type (line 377)
        height_258207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 12), bbox_258206, 'height')
        # Getting the type of 'event' (line 377)
        event_258208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 38), 'event')
        # Obtaining the member 'y' of a type (line 377)
        y_258209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 38), event_258208, 'y')
        # Applying the binary operator '-' (line 377)
        result_sub_258210 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 12), '-', height_258207, y_258209)
        
        # Assigning a type to the variable 'y' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'y', result_sub_258210)
        
        # Assigning a Call to a Name (line 378):
        
        # Assigning a Call to a Name (line 378):
        
        # Call to getattr(...): (line 378)
        # Processing the call arguments (line 378)
        # Getting the type of 'event' (line 378)
        event_258212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 22), 'event', False)
        unicode_258213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 378, 29), 'unicode', u'num')
        # Getting the type of 'None' (line 378)
        None_258214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 36), 'None', False)
        # Processing the call keyword arguments (line 378)
        kwargs_258215 = {}
        # Getting the type of 'getattr' (line 378)
        getattr_258211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 14), 'getattr', False)
        # Calling getattr(args, kwargs) (line 378)
        getattr_call_result_258216 = invoke(stypy.reporting.localization.Localization(__file__, 378, 14), getattr_258211, *[event_258212, unicode_258213, None_258214], **kwargs_258215)
        
        # Assigning a type to the variable 'num' (line 378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 8), 'num', getattr_call_result_258216)
        
        
        # Getting the type of 'num' (line 379)
        num_258217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 13), 'num')
        int_258218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 18), 'int')
        # Applying the binary operator '==' (line 379)
        result_eq_258219 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 13), '==', num_258217, int_258218)
        
        # Testing the type of an if condition (line 379)
        if_condition_258220 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 379, 8), result_eq_258219)
        # Assigning a type to the variable 'if_condition_258220' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 8), 'if_condition_258220', if_condition_258220)
        # SSA begins for if statement (line 379)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a UnaryOp to a Name (line 379):
        
        # Assigning a UnaryOp to a Name (line 379):
        
        int_258221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 29), 'int')
        # Applying the 'uadd' unary operator (line 379)
        result___pos___258222 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 28), 'uadd', int_258221)
        
        # Assigning a type to the variable 'step' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 21), 'step', result___pos___258222)
        # SSA branch for the else part of an if statement (line 379)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'num' (line 380)
        num_258223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 13), 'num')
        int_258224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 380, 18), 'int')
        # Applying the binary operator '==' (line 380)
        result_eq_258225 = python_operator(stypy.reporting.localization.Localization(__file__, 380, 13), '==', num_258223, int_258224)
        
        # Testing the type of an if condition (line 380)
        if_condition_258226 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 380, 13), result_eq_258225)
        # Assigning a type to the variable 'if_condition_258226' (line 380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 13), 'if_condition_258226', if_condition_258226)
        # SSA begins for if statement (line 380)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 380):
        
        # Assigning a Num to a Name (line 380):
        int_258227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 380, 28), 'int')
        # Assigning a type to the variable 'step' (line 380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 21), 'step', int_258227)
        # SSA branch for the else part of an if statement (line 380)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 381):
        
        # Assigning a Num to a Name (line 381):
        int_258228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 381, 29), 'int')
        # Assigning a type to the variable 'step' (line 381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 21), 'step', int_258228)
        # SSA join for if statement (line 380)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 379)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to scroll_event(...): (line 383)
        # Processing the call arguments (line 383)
        # Getting the type of 'self' (line 383)
        self_258231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 38), 'self', False)
        # Getting the type of 'x' (line 383)
        x_258232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 44), 'x', False)
        # Getting the type of 'y' (line 383)
        y_258233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 47), 'y', False)
        # Getting the type of 'step' (line 383)
        step_258234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 50), 'step', False)
        # Processing the call keyword arguments (line 383)
        # Getting the type of 'event' (line 383)
        event_258235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 65), 'event', False)
        keyword_258236 = event_258235
        kwargs_258237 = {'guiEvent': keyword_258236}
        # Getting the type of 'FigureCanvasBase' (line 383)
        FigureCanvasBase_258229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'scroll_event' of a type (line 383)
        scroll_event_258230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 8), FigureCanvasBase_258229, 'scroll_event')
        # Calling scroll_event(args, kwargs) (line 383)
        scroll_event_call_result_258238 = invoke(stypy.reporting.localization.Localization(__file__, 383, 8), scroll_event_258230, *[self_258231, x_258232, y_258233, step_258234], **kwargs_258237)
        
        
        # ################# End of 'scroll_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'scroll_event' in the type store
        # Getting the type of 'stypy_return_type' (line 375)
        stypy_return_type_258239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258239)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'scroll_event'
        return stypy_return_type_258239


    @norecursion
    def scroll_event_windows(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'scroll_event_windows'
        module_type_store = module_type_store.open_function_context('scroll_event_windows', 385, 4, False)
        # Assigning a type to the variable 'self' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.scroll_event_windows.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.scroll_event_windows.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.scroll_event_windows.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.scroll_event_windows.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.scroll_event_windows')
        FigureCanvasTkAgg.scroll_event_windows.__dict__.__setitem__('stypy_param_names_list', ['event'])
        FigureCanvasTkAgg.scroll_event_windows.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg.scroll_event_windows.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg.scroll_event_windows.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.scroll_event_windows.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.scroll_event_windows.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.scroll_event_windows.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.scroll_event_windows', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'scroll_event_windows', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'scroll_event_windows(...)' code ##################

        unicode_258240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 8), 'unicode', u'MouseWheel event processor')
        
        # Assigning a Call to a Name (line 388):
        
        # Assigning a Call to a Name (line 388):
        
        # Call to winfo_containing(...): (line 388)
        # Processing the call arguments (line 388)
        # Getting the type of 'event' (line 388)
        event_258244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 42), 'event', False)
        # Obtaining the member 'x_root' of a type (line 388)
        x_root_258245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 42), event_258244, 'x_root')
        # Getting the type of 'event' (line 388)
        event_258246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 56), 'event', False)
        # Obtaining the member 'y_root' of a type (line 388)
        y_root_258247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 56), event_258246, 'y_root')
        # Processing the call keyword arguments (line 388)
        kwargs_258248 = {}
        # Getting the type of 'event' (line 388)
        event_258241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 12), 'event', False)
        # Obtaining the member 'widget' of a type (line 388)
        widget_258242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 12), event_258241, 'widget')
        # Obtaining the member 'winfo_containing' of a type (line 388)
        winfo_containing_258243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 12), widget_258242, 'winfo_containing')
        # Calling winfo_containing(args, kwargs) (line 388)
        winfo_containing_call_result_258249 = invoke(stypy.reporting.localization.Localization(__file__, 388, 12), winfo_containing_258243, *[x_root_258245, y_root_258247], **kwargs_258248)
        
        # Assigning a type to the variable 'w' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 8), 'w', winfo_containing_call_result_258249)
        
        
        # Getting the type of 'w' (line 389)
        w_258250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 11), 'w')
        # Getting the type of 'self' (line 389)
        self_258251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 16), 'self')
        # Obtaining the member '_tkcanvas' of a type (line 389)
        _tkcanvas_258252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 16), self_258251, '_tkcanvas')
        # Applying the binary operator '==' (line 389)
        result_eq_258253 = python_operator(stypy.reporting.localization.Localization(__file__, 389, 11), '==', w_258250, _tkcanvas_258252)
        
        # Testing the type of an if condition (line 389)
        if_condition_258254 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 389, 8), result_eq_258253)
        # Assigning a type to the variable 'if_condition_258254' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'if_condition_258254', if_condition_258254)
        # SSA begins for if statement (line 389)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 390):
        
        # Assigning a BinOp to a Name (line 390):
        # Getting the type of 'event' (line 390)
        event_258255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 16), 'event')
        # Obtaining the member 'x_root' of a type (line 390)
        x_root_258256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 16), event_258255, 'x_root')
        
        # Call to winfo_rootx(...): (line 390)
        # Processing the call keyword arguments (line 390)
        kwargs_258259 = {}
        # Getting the type of 'w' (line 390)
        w_258257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 31), 'w', False)
        # Obtaining the member 'winfo_rootx' of a type (line 390)
        winfo_rootx_258258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 31), w_258257, 'winfo_rootx')
        # Calling winfo_rootx(args, kwargs) (line 390)
        winfo_rootx_call_result_258260 = invoke(stypy.reporting.localization.Localization(__file__, 390, 31), winfo_rootx_258258, *[], **kwargs_258259)
        
        # Applying the binary operator '-' (line 390)
        result_sub_258261 = python_operator(stypy.reporting.localization.Localization(__file__, 390, 16), '-', x_root_258256, winfo_rootx_call_result_258260)
        
        # Assigning a type to the variable 'x' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 12), 'x', result_sub_258261)
        
        # Assigning a BinOp to a Name (line 391):
        
        # Assigning a BinOp to a Name (line 391):
        # Getting the type of 'event' (line 391)
        event_258262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 16), 'event')
        # Obtaining the member 'y_root' of a type (line 391)
        y_root_258263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 16), event_258262, 'y_root')
        
        # Call to winfo_rooty(...): (line 391)
        # Processing the call keyword arguments (line 391)
        kwargs_258266 = {}
        # Getting the type of 'w' (line 391)
        w_258264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 31), 'w', False)
        # Obtaining the member 'winfo_rooty' of a type (line 391)
        winfo_rooty_258265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 31), w_258264, 'winfo_rooty')
        # Calling winfo_rooty(args, kwargs) (line 391)
        winfo_rooty_call_result_258267 = invoke(stypy.reporting.localization.Localization(__file__, 391, 31), winfo_rooty_258265, *[], **kwargs_258266)
        
        # Applying the binary operator '-' (line 391)
        result_sub_258268 = python_operator(stypy.reporting.localization.Localization(__file__, 391, 16), '-', y_root_258263, winfo_rooty_call_result_258267)
        
        # Assigning a type to the variable 'y' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 12), 'y', result_sub_258268)
        
        # Assigning a BinOp to a Name (line 392):
        
        # Assigning a BinOp to a Name (line 392):
        # Getting the type of 'self' (line 392)
        self_258269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 16), 'self')
        # Obtaining the member 'figure' of a type (line 392)
        figure_258270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 16), self_258269, 'figure')
        # Obtaining the member 'bbox' of a type (line 392)
        bbox_258271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 16), figure_258270, 'bbox')
        # Obtaining the member 'height' of a type (line 392)
        height_258272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 16), bbox_258271, 'height')
        # Getting the type of 'y' (line 392)
        y_258273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 42), 'y')
        # Applying the binary operator '-' (line 392)
        result_sub_258274 = python_operator(stypy.reporting.localization.Localization(__file__, 392, 16), '-', height_258272, y_258273)
        
        # Assigning a type to the variable 'y' (line 392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 12), 'y', result_sub_258274)
        
        # Assigning a BinOp to a Name (line 393):
        
        # Assigning a BinOp to a Name (line 393):
        # Getting the type of 'event' (line 393)
        event_258275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 19), 'event')
        # Obtaining the member 'delta' of a type (line 393)
        delta_258276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 19), event_258275, 'delta')
        float_258277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 31), 'float')
        # Applying the binary operator 'div' (line 393)
        result_div_258278 = python_operator(stypy.reporting.localization.Localization(__file__, 393, 19), 'div', delta_258276, float_258277)
        
        # Assigning a type to the variable 'step' (line 393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 12), 'step', result_div_258278)
        
        # Call to scroll_event(...): (line 394)
        # Processing the call arguments (line 394)
        # Getting the type of 'self' (line 394)
        self_258281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 42), 'self', False)
        # Getting the type of 'x' (line 394)
        x_258282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 48), 'x', False)
        # Getting the type of 'y' (line 394)
        y_258283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 51), 'y', False)
        # Getting the type of 'step' (line 394)
        step_258284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 54), 'step', False)
        # Processing the call keyword arguments (line 394)
        # Getting the type of 'event' (line 394)
        event_258285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 69), 'event', False)
        keyword_258286 = event_258285
        kwargs_258287 = {'guiEvent': keyword_258286}
        # Getting the type of 'FigureCanvasBase' (line 394)
        FigureCanvasBase_258279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 12), 'FigureCanvasBase', False)
        # Obtaining the member 'scroll_event' of a type (line 394)
        scroll_event_258280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 12), FigureCanvasBase_258279, 'scroll_event')
        # Calling scroll_event(args, kwargs) (line 394)
        scroll_event_call_result_258288 = invoke(stypy.reporting.localization.Localization(__file__, 394, 12), scroll_event_258280, *[self_258281, x_258282, y_258283, step_258284], **kwargs_258287)
        
        # SSA join for if statement (line 389)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'scroll_event_windows(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'scroll_event_windows' in the type store
        # Getting the type of 'stypy_return_type' (line 385)
        stypy_return_type_258289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258289)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'scroll_event_windows'
        return stypy_return_type_258289


    @norecursion
    def _get_key(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_key'
        module_type_store = module_type_store.open_function_context('_get_key', 396, 4, False)
        # Assigning a type to the variable 'self' (line 397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg._get_key.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg._get_key.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg._get_key.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg._get_key.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg._get_key')
        FigureCanvasTkAgg._get_key.__dict__.__setitem__('stypy_param_names_list', ['event'])
        FigureCanvasTkAgg._get_key.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg._get_key.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg._get_key.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg._get_key.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg._get_key.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg._get_key.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg._get_key', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_key', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_key(...)' code ##################

        
        # Assigning a Attribute to a Name (line 397):
        
        # Assigning a Attribute to a Name (line 397):
        # Getting the type of 'event' (line 397)
        event_258290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 14), 'event')
        # Obtaining the member 'keysym_num' of a type (line 397)
        keysym_num_258291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 14), event_258290, 'keysym_num')
        # Assigning a type to the variable 'val' (line 397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 8), 'val', keysym_num_258291)
        
        
        # Getting the type of 'val' (line 398)
        val_258292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 11), 'val')
        # Getting the type of 'self' (line 398)
        self_258293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 18), 'self')
        # Obtaining the member 'keyvald' of a type (line 398)
        keyvald_258294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 398, 18), self_258293, 'keyvald')
        # Applying the binary operator 'in' (line 398)
        result_contains_258295 = python_operator(stypy.reporting.localization.Localization(__file__, 398, 11), 'in', val_258292, keyvald_258294)
        
        # Testing the type of an if condition (line 398)
        if_condition_258296 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 398, 8), result_contains_258295)
        # Assigning a type to the variable 'if_condition_258296' (line 398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 8), 'if_condition_258296', if_condition_258296)
        # SSA begins for if statement (line 398)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 399):
        
        # Assigning a Subscript to a Name (line 399):
        
        # Obtaining the type of the subscript
        # Getting the type of 'val' (line 399)
        val_258297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 31), 'val')
        # Getting the type of 'self' (line 399)
        self_258298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 18), 'self')
        # Obtaining the member 'keyvald' of a type (line 399)
        keyvald_258299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 18), self_258298, 'keyvald')
        # Obtaining the member '__getitem__' of a type (line 399)
        getitem___258300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 18), keyvald_258299, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 399)
        subscript_call_result_258301 = invoke(stypy.reporting.localization.Localization(__file__, 399, 18), getitem___258300, val_258297)
        
        # Assigning a type to the variable 'key' (line 399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 12), 'key', subscript_call_result_258301)
        # SSA branch for the else part of an if statement (line 398)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'val' (line 400)
        val_258302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 13), 'val')
        int_258303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 20), 'int')
        # Applying the binary operator '==' (line 400)
        result_eq_258304 = python_operator(stypy.reporting.localization.Localization(__file__, 400, 13), '==', val_258302, int_258303)
        
        
        # Getting the type of 'sys' (line 400)
        sys_258305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 26), 'sys')
        # Obtaining the member 'platform' of a type (line 400)
        platform_258306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 26), sys_258305, 'platform')
        unicode_258307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 42), 'unicode', u'darwin')
        # Applying the binary operator '==' (line 400)
        result_eq_258308 = python_operator(stypy.reporting.localization.Localization(__file__, 400, 26), '==', platform_258306, unicode_258307)
        
        # Applying the binary operator 'and' (line 400)
        result_and_keyword_258309 = python_operator(stypy.reporting.localization.Localization(__file__, 400, 13), 'and', result_eq_258304, result_eq_258308)
        
        # Getting the type of 'event' (line 401)
        event_258310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 40), 'event')
        # Obtaining the member 'keycode' of a type (line 401)
        keycode_258311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 40), event_258310, 'keycode')
        # Getting the type of 'self' (line 401)
        self_258312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 57), 'self')
        # Obtaining the member '_keycode_lookup' of a type (line 401)
        _keycode_lookup_258313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 57), self_258312, '_keycode_lookup')
        # Applying the binary operator 'in' (line 401)
        result_contains_258314 = python_operator(stypy.reporting.localization.Localization(__file__, 401, 40), 'in', keycode_258311, _keycode_lookup_258313)
        
        # Applying the binary operator 'and' (line 400)
        result_and_keyword_258315 = python_operator(stypy.reporting.localization.Localization(__file__, 400, 13), 'and', result_and_keyword_258309, result_contains_258314)
        
        # Testing the type of an if condition (line 400)
        if_condition_258316 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 400, 13), result_and_keyword_258315)
        # Assigning a type to the variable 'if_condition_258316' (line 400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 13), 'if_condition_258316', if_condition_258316)
        # SSA begins for if statement (line 400)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 402):
        
        # Assigning a Subscript to a Name (line 402):
        
        # Obtaining the type of the subscript
        # Getting the type of 'event' (line 402)
        event_258317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 39), 'event')
        # Obtaining the member 'keycode' of a type (line 402)
        keycode_258318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 39), event_258317, 'keycode')
        # Getting the type of 'self' (line 402)
        self_258319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 18), 'self')
        # Obtaining the member '_keycode_lookup' of a type (line 402)
        _keycode_lookup_258320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 18), self_258319, '_keycode_lookup')
        # Obtaining the member '__getitem__' of a type (line 402)
        getitem___258321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 18), _keycode_lookup_258320, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 402)
        subscript_call_result_258322 = invoke(stypy.reporting.localization.Localization(__file__, 402, 18), getitem___258321, keycode_258318)
        
        # Assigning a type to the variable 'key' (line 402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 12), 'key', subscript_call_result_258322)
        # SSA branch for the else part of an if statement (line 400)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'val' (line 403)
        val_258323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 13), 'val')
        int_258324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 19), 'int')
        # Applying the binary operator '<' (line 403)
        result_lt_258325 = python_operator(stypy.reporting.localization.Localization(__file__, 403, 13), '<', val_258323, int_258324)
        
        # Testing the type of an if condition (line 403)
        if_condition_258326 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 403, 13), result_lt_258325)
        # Assigning a type to the variable 'if_condition_258326' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 13), 'if_condition_258326', if_condition_258326)
        # SSA begins for if statement (line 403)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 404):
        
        # Assigning a Call to a Name (line 404):
        
        # Call to chr(...): (line 404)
        # Processing the call arguments (line 404)
        # Getting the type of 'val' (line 404)
        val_258328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 22), 'val', False)
        # Processing the call keyword arguments (line 404)
        kwargs_258329 = {}
        # Getting the type of 'chr' (line 404)
        chr_258327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 18), 'chr', False)
        # Calling chr(args, kwargs) (line 404)
        chr_call_result_258330 = invoke(stypy.reporting.localization.Localization(__file__, 404, 18), chr_258327, *[val_258328], **kwargs_258329)
        
        # Assigning a type to the variable 'key' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 12), 'key', chr_call_result_258330)
        # SSA branch for the else part of an if statement (line 403)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 406):
        
        # Assigning a Name to a Name (line 406):
        # Getting the type of 'None' (line 406)
        None_258331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 18), 'None')
        # Assigning a type to the variable 'key' (line 406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 12), 'key', None_258331)
        # SSA join for if statement (line 403)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 400)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 398)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'sys' (line 416)
        sys_258332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 416)
        platform_258333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 416, 11), sys_258332, 'platform')
        unicode_258334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 27), 'unicode', u'win32')
        # Applying the binary operator '==' (line 416)
        result_eq_258335 = python_operator(stypy.reporting.localization.Localization(__file__, 416, 11), '==', platform_258333, unicode_258334)
        
        # Testing the type of an if condition (line 416)
        if_condition_258336 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 416, 8), result_eq_258335)
        # Assigning a type to the variable 'if_condition_258336' (line 416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 8), 'if_condition_258336', if_condition_258336)
        # SSA begins for if statement (line 416)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 417):
        
        # Assigning a List to a Name (line 417):
        
        # Obtaining an instance of the builtin type 'list' (line 417)
        list_258337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 417)
        # Adding element type (line 417)
        
        # Obtaining an instance of the builtin type 'tuple' (line 417)
        tuple_258338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 417)
        # Adding element type (line 417)
        int_258339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 417, 26), tuple_258338, int_258339)
        # Adding element type (line 417)
        unicode_258340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 30), 'unicode', u'alt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 417, 26), tuple_258338, unicode_258340)
        # Adding element type (line 417)
        unicode_258341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 37), 'unicode', u'alt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 417, 26), tuple_258338, unicode_258341)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 417, 24), list_258337, tuple_258338)
        # Adding element type (line 417)
        
        # Obtaining an instance of the builtin type 'tuple' (line 418)
        tuple_258342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 418)
        # Adding element type (line 418)
        int_258343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 418, 26), tuple_258342, int_258343)
        # Adding element type (line 418)
        unicode_258344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 29), 'unicode', u'ctrl')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 418, 26), tuple_258342, unicode_258344)
        # Adding element type (line 418)
        unicode_258345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 37), 'unicode', u'control')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 418, 26), tuple_258342, unicode_258345)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 417, 24), list_258337, tuple_258342)
        
        # Assigning a type to the variable 'modifiers' (line 417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 12), 'modifiers', list_258337)
        # SSA branch for the else part of an if statement (line 416)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'sys' (line 420)
        sys_258346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 13), 'sys')
        # Obtaining the member 'platform' of a type (line 420)
        platform_258347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 13), sys_258346, 'platform')
        unicode_258348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 420, 29), 'unicode', u'darwin')
        # Applying the binary operator '==' (line 420)
        result_eq_258349 = python_operator(stypy.reporting.localization.Localization(__file__, 420, 13), '==', platform_258347, unicode_258348)
        
        # Testing the type of an if condition (line 420)
        if_condition_258350 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 420, 13), result_eq_258349)
        # Assigning a type to the variable 'if_condition_258350' (line 420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 13), 'if_condition_258350', if_condition_258350)
        # SSA begins for if statement (line 420)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 421):
        
        # Assigning a List to a Name (line 421):
        
        # Obtaining an instance of the builtin type 'list' (line 421)
        list_258351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 421, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 421)
        # Adding element type (line 421)
        
        # Obtaining an instance of the builtin type 'tuple' (line 421)
        tuple_258352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 421, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 421)
        # Adding element type (line 421)
        int_258353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 421, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 421, 26), tuple_258352, int_258353)
        # Adding element type (line 421)
        unicode_258354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 421, 29), 'unicode', u'super')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 421, 26), tuple_258352, unicode_258354)
        # Adding element type (line 421)
        unicode_258355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 421, 38), 'unicode', u'super')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 421, 26), tuple_258352, unicode_258355)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 421, 24), list_258351, tuple_258352)
        # Adding element type (line 421)
        
        # Obtaining an instance of the builtin type 'tuple' (line 422)
        tuple_258356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 422, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 422)
        # Adding element type (line 422)
        int_258357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 422, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 422, 26), tuple_258356, int_258357)
        # Adding element type (line 422)
        unicode_258358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 422, 29), 'unicode', u'alt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 422, 26), tuple_258356, unicode_258358)
        # Adding element type (line 422)
        unicode_258359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 422, 36), 'unicode', u'alt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 422, 26), tuple_258356, unicode_258359)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 421, 24), list_258351, tuple_258356)
        # Adding element type (line 421)
        
        # Obtaining an instance of the builtin type 'tuple' (line 423)
        tuple_258360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 423, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 423)
        # Adding element type (line 423)
        int_258361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 423, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 423, 26), tuple_258360, int_258361)
        # Adding element type (line 423)
        unicode_258362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 423, 29), 'unicode', u'ctrl')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 423, 26), tuple_258360, unicode_258362)
        # Adding element type (line 423)
        unicode_258363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 423, 37), 'unicode', u'control')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 423, 26), tuple_258360, unicode_258363)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 421, 24), list_258351, tuple_258360)
        
        # Assigning a type to the variable 'modifiers' (line 421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 421, 12), 'modifiers', list_258351)
        # SSA branch for the else part of an if statement (line 420)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Name (line 426):
        
        # Assigning a List to a Name (line 426):
        
        # Obtaining an instance of the builtin type 'list' (line 426)
        list_258364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 426)
        # Adding element type (line 426)
        
        # Obtaining an instance of the builtin type 'tuple' (line 426)
        tuple_258365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 426)
        # Adding element type (line 426)
        int_258366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 426, 26), tuple_258365, int_258366)
        # Adding element type (line 426)
        unicode_258367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 29), 'unicode', u'super')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 426, 26), tuple_258365, unicode_258367)
        # Adding element type (line 426)
        unicode_258368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 38), 'unicode', u'super')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 426, 26), tuple_258365, unicode_258368)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 426, 24), list_258364, tuple_258365)
        # Adding element type (line 426)
        
        # Obtaining an instance of the builtin type 'tuple' (line 427)
        tuple_258369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 427)
        # Adding element type (line 427)
        int_258370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 427, 26), tuple_258369, int_258370)
        # Adding element type (line 427)
        unicode_258371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 29), 'unicode', u'alt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 427, 26), tuple_258369, unicode_258371)
        # Adding element type (line 427)
        unicode_258372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 36), 'unicode', u'alt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 427, 26), tuple_258369, unicode_258372)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 426, 24), list_258364, tuple_258369)
        # Adding element type (line 426)
        
        # Obtaining an instance of the builtin type 'tuple' (line 428)
        tuple_258373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 428)
        # Adding element type (line 428)
        int_258374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 428, 26), tuple_258373, int_258374)
        # Adding element type (line 428)
        unicode_258375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 29), 'unicode', u'ctrl')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 428, 26), tuple_258373, unicode_258375)
        # Adding element type (line 428)
        unicode_258376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 37), 'unicode', u'control')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 428, 26), tuple_258373, unicode_258376)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 426, 24), list_258364, tuple_258373)
        
        # Assigning a type to the variable 'modifiers' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 12), 'modifiers', list_258364)
        # SSA join for if statement (line 420)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 416)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 431)
        # Getting the type of 'key' (line 431)
        key_258377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 8), 'key')
        # Getting the type of 'None' (line 431)
        None_258378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 22), 'None')
        
        (may_be_258379, more_types_in_union_258380) = may_not_be_none(key_258377, None_258378)

        if may_be_258379:

            if more_types_in_union_258380:
                # Runtime conditional SSA (line 431)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'modifiers' (line 433)
            modifiers_258381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 45), 'modifiers')
            # Testing the type of a for loop iterable (line 433)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 433, 12), modifiers_258381)
            # Getting the type of the for loop variable (line 433)
            for_loop_var_258382 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 433, 12), modifiers_258381)
            # Assigning a type to the variable 'bitmask' (line 433)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 12), 'bitmask', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 433, 12), for_loop_var_258382))
            # Assigning a type to the variable 'prefix' (line 433)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 12), 'prefix', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 433, 12), for_loop_var_258382))
            # Assigning a type to the variable 'key_name' (line 433)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 12), 'key_name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 433, 12), for_loop_var_258382))
            # SSA begins for a for statement (line 433)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # Evaluating a boolean operation
            # Getting the type of 'event' (line 434)
            event_258383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 19), 'event')
            # Obtaining the member 'state' of a type (line 434)
            state_258384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 19), event_258383, 'state')
            int_258385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 34), 'int')
            # Getting the type of 'bitmask' (line 434)
            bitmask_258386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 39), 'bitmask')
            # Applying the binary operator '<<' (line 434)
            result_lshift_258387 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 34), '<<', int_258385, bitmask_258386)
            
            # Applying the binary operator '&' (line 434)
            result_and__258388 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 19), '&', state_258384, result_lshift_258387)
            
            
            # Getting the type of 'key_name' (line 434)
            key_name_258389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 52), 'key_name')
            # Getting the type of 'key' (line 434)
            key_258390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 68), 'key')
            # Applying the binary operator 'notin' (line 434)
            result_contains_258391 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 52), 'notin', key_name_258389, key_258390)
            
            # Applying the binary operator 'and' (line 434)
            result_and_keyword_258392 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 19), 'and', result_and__258388, result_contains_258391)
            
            # Testing the type of an if condition (line 434)
            if_condition_258393 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 434, 16), result_and_keyword_258392)
            # Assigning a type to the variable 'if_condition_258393' (line 434)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 16), 'if_condition_258393', if_condition_258393)
            # SSA begins for if statement (line 434)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 435):
            
            # Assigning a Call to a Name (line 435):
            
            # Call to format(...): (line 435)
            # Processing the call arguments (line 435)
            # Getting the type of 'prefix' (line 435)
            prefix_258396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 43), 'prefix', False)
            # Getting the type of 'key' (line 435)
            key_258397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 51), 'key', False)
            # Processing the call keyword arguments (line 435)
            kwargs_258398 = {}
            unicode_258394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 26), 'unicode', u'{0}+{1}')
            # Obtaining the member 'format' of a type (line 435)
            format_258395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 26), unicode_258394, 'format')
            # Calling format(args, kwargs) (line 435)
            format_call_result_258399 = invoke(stypy.reporting.localization.Localization(__file__, 435, 26), format_258395, *[prefix_258396, key_258397], **kwargs_258398)
            
            # Assigning a type to the variable 'key' (line 435)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 20), 'key', format_call_result_258399)
            # SSA join for if statement (line 434)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_258380:
                # SSA join for if statement (line 431)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'key' (line 437)
        key_258400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 15), 'key')
        # Assigning a type to the variable 'stypy_return_type' (line 437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 8), 'stypy_return_type', key_258400)
        
        # ################# End of '_get_key(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_key' in the type store
        # Getting the type of 'stypy_return_type' (line 396)
        stypy_return_type_258401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258401)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_key'
        return stypy_return_type_258401


    @norecursion
    def key_press(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'key_press'
        module_type_store = module_type_store.open_function_context('key_press', 439, 4, False)
        # Assigning a type to the variable 'self' (line 440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.key_press.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.key_press.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.key_press.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.key_press.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.key_press')
        FigureCanvasTkAgg.key_press.__dict__.__setitem__('stypy_param_names_list', ['event'])
        FigureCanvasTkAgg.key_press.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg.key_press.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg.key_press.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.key_press.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.key_press.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.key_press.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.key_press', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'key_press', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'key_press(...)' code ##################

        
        # Assigning a Call to a Name (line 440):
        
        # Assigning a Call to a Name (line 440):
        
        # Call to _get_key(...): (line 440)
        # Processing the call arguments (line 440)
        # Getting the type of 'event' (line 440)
        event_258404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 28), 'event', False)
        # Processing the call keyword arguments (line 440)
        kwargs_258405 = {}
        # Getting the type of 'self' (line 440)
        self_258402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 14), 'self', False)
        # Obtaining the member '_get_key' of a type (line 440)
        _get_key_258403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 14), self_258402, '_get_key')
        # Calling _get_key(args, kwargs) (line 440)
        _get_key_call_result_258406 = invoke(stypy.reporting.localization.Localization(__file__, 440, 14), _get_key_258403, *[event_258404], **kwargs_258405)
        
        # Assigning a type to the variable 'key' (line 440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 8), 'key', _get_key_call_result_258406)
        
        # Call to key_press_event(...): (line 441)
        # Processing the call arguments (line 441)
        # Getting the type of 'self' (line 441)
        self_258409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 41), 'self', False)
        # Getting the type of 'key' (line 441)
        key_258410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 47), 'key', False)
        # Processing the call keyword arguments (line 441)
        # Getting the type of 'event' (line 441)
        event_258411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 61), 'event', False)
        keyword_258412 = event_258411
        kwargs_258413 = {'guiEvent': keyword_258412}
        # Getting the type of 'FigureCanvasBase' (line 441)
        FigureCanvasBase_258407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'key_press_event' of a type (line 441)
        key_press_event_258408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 8), FigureCanvasBase_258407, 'key_press_event')
        # Calling key_press_event(args, kwargs) (line 441)
        key_press_event_call_result_258414 = invoke(stypy.reporting.localization.Localization(__file__, 441, 8), key_press_event_258408, *[self_258409, key_258410], **kwargs_258413)
        
        
        # ################# End of 'key_press(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'key_press' in the type store
        # Getting the type of 'stypy_return_type' (line 439)
        stypy_return_type_258415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258415)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'key_press'
        return stypy_return_type_258415


    @norecursion
    def key_release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'key_release'
        module_type_store = module_type_store.open_function_context('key_release', 443, 4, False)
        # Assigning a type to the variable 'self' (line 444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.key_release.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.key_release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.key_release.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.key_release.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.key_release')
        FigureCanvasTkAgg.key_release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        FigureCanvasTkAgg.key_release.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg.key_release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg.key_release.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.key_release.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.key_release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.key_release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.key_release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'key_release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'key_release(...)' code ##################

        
        # Assigning a Call to a Name (line 444):
        
        # Assigning a Call to a Name (line 444):
        
        # Call to _get_key(...): (line 444)
        # Processing the call arguments (line 444)
        # Getting the type of 'event' (line 444)
        event_258418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 28), 'event', False)
        # Processing the call keyword arguments (line 444)
        kwargs_258419 = {}
        # Getting the type of 'self' (line 444)
        self_258416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 14), 'self', False)
        # Obtaining the member '_get_key' of a type (line 444)
        _get_key_258417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 14), self_258416, '_get_key')
        # Calling _get_key(args, kwargs) (line 444)
        _get_key_call_result_258420 = invoke(stypy.reporting.localization.Localization(__file__, 444, 14), _get_key_258417, *[event_258418], **kwargs_258419)
        
        # Assigning a type to the variable 'key' (line 444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'key', _get_key_call_result_258420)
        
        # Call to key_release_event(...): (line 445)
        # Processing the call arguments (line 445)
        # Getting the type of 'self' (line 445)
        self_258423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 43), 'self', False)
        # Getting the type of 'key' (line 445)
        key_258424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 49), 'key', False)
        # Processing the call keyword arguments (line 445)
        # Getting the type of 'event' (line 445)
        event_258425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 63), 'event', False)
        keyword_258426 = event_258425
        kwargs_258427 = {'guiEvent': keyword_258426}
        # Getting the type of 'FigureCanvasBase' (line 445)
        FigureCanvasBase_258421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'key_release_event' of a type (line 445)
        key_release_event_258422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 8), FigureCanvasBase_258421, 'key_release_event')
        # Calling key_release_event(args, kwargs) (line 445)
        key_release_event_call_result_258428 = invoke(stypy.reporting.localization.Localization(__file__, 445, 8), key_release_event_258422, *[self_258423, key_258424], **kwargs_258427)
        
        
        # ################# End of 'key_release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'key_release' in the type store
        # Getting the type of 'stypy_return_type' (line 443)
        stypy_return_type_258429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258429)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'key_release'
        return stypy_return_type_258429


    @norecursion
    def new_timer(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_timer'
        module_type_store = module_type_store.open_function_context('new_timer', 447, 4, False)
        # Assigning a type to the variable 'self' (line 448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.new_timer.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.new_timer.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.new_timer.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.new_timer.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.new_timer')
        FigureCanvasTkAgg.new_timer.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasTkAgg.new_timer.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasTkAgg.new_timer.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasTkAgg.new_timer.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.new_timer.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.new_timer.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.new_timer.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.new_timer', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_timer', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_timer(...)' code ##################

        unicode_258430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, (-1)), 'unicode', u"\n        Creates a new backend-specific subclass of :class:`backend_bases.Timer`.\n        This is useful for getting periodic events through the backend's native\n        event loop. Implemented only for backends with GUIs.\n\n        Other Parameters\n        ----------------\n        interval : scalar\n            Timer interval in milliseconds\n        callbacks : list\n            Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``\n            will be executed by the timer every *interval*.\n\n        ")
        
        # Call to TimerTk(...): (line 462)
        # Processing the call arguments (line 462)
        # Getting the type of 'self' (line 462)
        self_258432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 23), 'self', False)
        # Obtaining the member '_tkcanvas' of a type (line 462)
        _tkcanvas_258433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 462, 23), self_258432, '_tkcanvas')
        # Getting the type of 'args' (line 462)
        args_258434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 40), 'args', False)
        # Processing the call keyword arguments (line 462)
        # Getting the type of 'kwargs' (line 462)
        kwargs_258435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 48), 'kwargs', False)
        kwargs_258436 = {'kwargs_258435': kwargs_258435}
        # Getting the type of 'TimerTk' (line 462)
        TimerTk_258431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 15), 'TimerTk', False)
        # Calling TimerTk(args, kwargs) (line 462)
        TimerTk_call_result_258437 = invoke(stypy.reporting.localization.Localization(__file__, 462, 15), TimerTk_258431, *[_tkcanvas_258433, args_258434], **kwargs_258436)
        
        # Assigning a type to the variable 'stypy_return_type' (line 462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 8), 'stypy_return_type', TimerTk_call_result_258437)
        
        # ################# End of 'new_timer(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_timer' in the type store
        # Getting the type of 'stypy_return_type' (line 447)
        stypy_return_type_258438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258438)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_timer'
        return stypy_return_type_258438


    @norecursion
    def flush_events(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'flush_events'
        module_type_store = module_type_store.open_function_context('flush_events', 464, 4, False)
        # Assigning a type to the variable 'self' (line 465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 465, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasTkAgg.flush_events.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasTkAgg.flush_events.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasTkAgg.flush_events.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasTkAgg.flush_events.__dict__.__setitem__('stypy_function_name', 'FigureCanvasTkAgg.flush_events')
        FigureCanvasTkAgg.flush_events.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasTkAgg.flush_events.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasTkAgg.flush_events.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasTkAgg.flush_events.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasTkAgg.flush_events.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasTkAgg.flush_events.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasTkAgg.flush_events.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasTkAgg.flush_events', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'flush_events', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'flush_events(...)' code ##################

        
        # Call to update(...): (line 465)
        # Processing the call keyword arguments (line 465)
        kwargs_258442 = {}
        # Getting the type of 'self' (line 465)
        self_258439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 8), 'self', False)
        # Obtaining the member '_master' of a type (line 465)
        _master_258440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 8), self_258439, '_master')
        # Obtaining the member 'update' of a type (line 465)
        update_258441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 8), _master_258440, 'update')
        # Calling update(args, kwargs) (line 465)
        update_call_result_258443 = invoke(stypy.reporting.localization.Localization(__file__, 465, 8), update_258441, *[], **kwargs_258442)
        
        
        # ################# End of 'flush_events(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'flush_events' in the type store
        # Getting the type of 'stypy_return_type' (line 464)
        stypy_return_type_258444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258444)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'flush_events'
        return stypy_return_type_258444


# Assigning a type to the variable 'FigureCanvasTkAgg' (line 107)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 0), 'FigureCanvasTkAgg', FigureCanvasTkAgg)

# Assigning a Dict to a Name (line 108):

# Obtaining an instance of the builtin type 'dict' (line 108)
dict_258445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, 14), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 108)
# Adding element type (key, value) (line 108)
int_258446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, 15), 'int')
unicode_258447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, 23), 'unicode', u'control')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258446, unicode_258447))
# Adding element type (key, value) (line 108)
int_258448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 15), 'int')
unicode_258449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 23), 'unicode', u'shift')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258448, unicode_258449))
# Adding element type (key, value) (line 108)
int_258450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, 15), 'int')
unicode_258451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, 23), 'unicode', u'alt')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258450, unicode_258451))
# Adding element type (key, value) (line 108)
int_258452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 15), 'int')
unicode_258453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 23), 'unicode', u'super')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258452, unicode_258453))
# Adding element type (key, value) (line 108)
int_258454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 112, 15), 'int')
unicode_258455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 112, 23), 'unicode', u'control')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258454, unicode_258455))
# Adding element type (key, value) (line 108)
int_258456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 15), 'int')
unicode_258457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 23), 'unicode', u'shift')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258456, unicode_258457))
# Adding element type (key, value) (line 108)
int_258458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 114, 15), 'int')
unicode_258459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 114, 23), 'unicode', u'alt')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258458, unicode_258459))
# Adding element type (key, value) (line 108)
int_258460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 15), 'int')
unicode_258461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 23), 'unicode', u'left')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258460, unicode_258461))
# Adding element type (key, value) (line 108)
int_258462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 15), 'int')
unicode_258463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 23), 'unicode', u'up')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258462, unicode_258463))
# Adding element type (key, value) (line 108)
int_258464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 15), 'int')
unicode_258465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 23), 'unicode', u'right')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258464, unicode_258465))
# Adding element type (key, value) (line 108)
int_258466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 118, 15), 'int')
unicode_258467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 118, 23), 'unicode', u'down')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258466, unicode_258467))
# Adding element type (key, value) (line 108)
int_258468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 15), 'int')
unicode_258469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 23), 'unicode', u'escape')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258468, unicode_258469))
# Adding element type (key, value) (line 108)
int_258470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 120, 15), 'int')
unicode_258471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 120, 23), 'unicode', u'f1')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258470, unicode_258471))
# Adding element type (key, value) (line 108)
int_258472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 15), 'int')
unicode_258473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 23), 'unicode', u'f2')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258472, unicode_258473))
# Adding element type (key, value) (line 108)
int_258474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 122, 15), 'int')
unicode_258475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 122, 23), 'unicode', u'f3')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258474, unicode_258475))
# Adding element type (key, value) (line 108)
int_258476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 15), 'int')
unicode_258477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 23), 'unicode', u'f4')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258476, unicode_258477))
# Adding element type (key, value) (line 108)
int_258478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 15), 'int')
unicode_258479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 23), 'unicode', u'f5')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258478, unicode_258479))
# Adding element type (key, value) (line 108)
int_258480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 15), 'int')
unicode_258481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 23), 'unicode', u'f6')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258480, unicode_258481))
# Adding element type (key, value) (line 108)
int_258482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 15), 'int')
unicode_258483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 23), 'unicode', u'f7')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258482, unicode_258483))
# Adding element type (key, value) (line 108)
int_258484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 15), 'int')
unicode_258485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 23), 'unicode', u'f8')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258484, unicode_258485))
# Adding element type (key, value) (line 108)
int_258486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 128, 15), 'int')
unicode_258487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 128, 23), 'unicode', u'f9')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258486, unicode_258487))
# Adding element type (key, value) (line 108)
int_258488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 15), 'int')
unicode_258489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 23), 'unicode', u'f10')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258488, unicode_258489))
# Adding element type (key, value) (line 108)
int_258490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 15), 'int')
unicode_258491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 23), 'unicode', u'f11')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258490, unicode_258491))
# Adding element type (key, value) (line 108)
int_258492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 131, 15), 'int')
unicode_258493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 131, 23), 'unicode', u'f12')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258492, unicode_258493))
# Adding element type (key, value) (line 108)
int_258494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 132, 15), 'int')
unicode_258495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 132, 23), 'unicode', u'scroll_lock')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258494, unicode_258495))
# Adding element type (key, value) (line 108)
int_258496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 133, 15), 'int')
unicode_258497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 133, 23), 'unicode', u'break')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258496, unicode_258497))
# Adding element type (key, value) (line 108)
int_258498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 134, 15), 'int')
unicode_258499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 134, 23), 'unicode', u'backspace')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258498, unicode_258499))
# Adding element type (key, value) (line 108)
int_258500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 135, 15), 'int')
unicode_258501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 135, 23), 'unicode', u'enter')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258500, unicode_258501))
# Adding element type (key, value) (line 108)
int_258502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 136, 15), 'int')
unicode_258503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 136, 23), 'unicode', u'insert')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258502, unicode_258503))
# Adding element type (key, value) (line 108)
int_258504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 137, 15), 'int')
unicode_258505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 137, 23), 'unicode', u'delete')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258504, unicode_258505))
# Adding element type (key, value) (line 108)
int_258506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 138, 15), 'int')
unicode_258507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 138, 23), 'unicode', u'home')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258506, unicode_258507))
# Adding element type (key, value) (line 108)
int_258508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 15), 'int')
unicode_258509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 23), 'unicode', u'end')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258508, unicode_258509))
# Adding element type (key, value) (line 108)
int_258510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 15), 'int')
unicode_258511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 23), 'unicode', u'pageup')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258510, unicode_258511))
# Adding element type (key, value) (line 108)
int_258512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 15), 'int')
unicode_258513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 23), 'unicode', u'pagedown')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258512, unicode_258513))
# Adding element type (key, value) (line 108)
int_258514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 142, 15), 'int')
unicode_258515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 142, 23), 'unicode', u'0')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258514, unicode_258515))
# Adding element type (key, value) (line 108)
int_258516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 143, 15), 'int')
unicode_258517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 143, 23), 'unicode', u'1')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258516, unicode_258517))
# Adding element type (key, value) (line 108)
int_258518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 15), 'int')
unicode_258519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 23), 'unicode', u'2')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258518, unicode_258519))
# Adding element type (key, value) (line 108)
int_258520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 145, 15), 'int')
unicode_258521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 145, 23), 'unicode', u'3')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258520, unicode_258521))
# Adding element type (key, value) (line 108)
int_258522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 15), 'int')
unicode_258523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 23), 'unicode', u'4')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258522, unicode_258523))
# Adding element type (key, value) (line 108)
int_258524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 15), 'int')
unicode_258525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 23), 'unicode', u'5')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258524, unicode_258525))
# Adding element type (key, value) (line 108)
int_258526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 15), 'int')
unicode_258527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 23), 'unicode', u'6')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258526, unicode_258527))
# Adding element type (key, value) (line 108)
int_258528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 149, 15), 'int')
unicode_258529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 149, 23), 'unicode', u'7')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258528, unicode_258529))
# Adding element type (key, value) (line 108)
int_258530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 15), 'int')
unicode_258531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 23), 'unicode', u'8')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258530, unicode_258531))
# Adding element type (key, value) (line 108)
int_258532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 15), 'int')
unicode_258533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 23), 'unicode', u'9')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258532, unicode_258533))
# Adding element type (key, value) (line 108)
int_258534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 152, 15), 'int')
unicode_258535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 152, 23), 'unicode', u'+')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258534, unicode_258535))
# Adding element type (key, value) (line 108)
int_258536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 153, 15), 'int')
unicode_258537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 153, 23), 'unicode', u'-')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258536, unicode_258537))
# Adding element type (key, value) (line 108)
int_258538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 15), 'int')
unicode_258539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 23), 'unicode', u'*')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258538, unicode_258539))
# Adding element type (key, value) (line 108)
int_258540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 155, 15), 'int')
unicode_258541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 155, 23), 'unicode', u'/')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258540, unicode_258541))
# Adding element type (key, value) (line 108)
int_258542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 156, 15), 'int')
unicode_258543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 156, 23), 'unicode', u'dec')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258542, unicode_258543))
# Adding element type (key, value) (line 108)
int_258544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 157, 15), 'int')
unicode_258545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 157, 23), 'unicode', u'enter')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 108, 14), dict_258445, (int_258544, unicode_258545))

# Getting the type of 'FigureCanvasTkAgg'
FigureCanvasTkAgg_258546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasTkAgg')
# Setting the type of the member 'keyvald' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasTkAgg_258546, 'keyvald', dict_258445)

# Assigning a Dict to a Name (line 160):

# Obtaining an instance of the builtin type 'dict' (line 160)
dict_258547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 22), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 160)
# Adding element type (key, value) (line 160)
int_258548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 23), 'int')
unicode_258549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 31), 'unicode', u'control')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 22), dict_258547, (int_258548, unicode_258549))
# Adding element type (key, value) (line 160)
int_258550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 23), 'int')
unicode_258551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 31), 'unicode', u'alt')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 22), dict_258547, (int_258550, unicode_258551))
# Adding element type (key, value) (line 160)
int_258552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 23), 'int')
unicode_258553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 31), 'unicode', u'alt')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 22), dict_258547, (int_258552, unicode_258553))
# Adding element type (key, value) (line 160)
int_258554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 23), 'int')
unicode_258555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 32), 'unicode', u'super')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 22), dict_258547, (int_258554, unicode_258555))
# Adding element type (key, value) (line 160)
int_258556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 23), 'int')
unicode_258557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 32), 'unicode', u'super')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 22), dict_258547, (int_258556, unicode_258557))
# Adding element type (key, value) (line 160)
int_258558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 166, 23), 'int')
unicode_258559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 166, 31), 'unicode', u'shift')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 22), dict_258547, (int_258558, unicode_258559))
# Adding element type (key, value) (line 160)
int_258560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 167, 23), 'int')
unicode_258561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 167, 31), 'unicode', u'shift')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 22), dict_258547, (int_258560, unicode_258561))

# Getting the type of 'FigureCanvasTkAgg'
FigureCanvasTkAgg_258562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasTkAgg')
# Setting the type of the member '_keycode_lookup' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasTkAgg_258562, '_keycode_lookup', dict_258547)

# Assigning a Name to a Name (line 312):
# Getting the type of 'FigureCanvasTkAgg'
FigureCanvasTkAgg_258563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasTkAgg')
# Obtaining the member 'draw' of a type
draw_258564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasTkAgg_258563, 'draw')
# Getting the type of 'FigureCanvasTkAgg'
FigureCanvasTkAgg_258565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasTkAgg')
# Setting the type of the member 'show' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasTkAgg_258565, 'show', draw_258564)
# Declaration of the 'FigureManagerTkAgg' class
# Getting the type of 'FigureManagerBase' (line 468)
FigureManagerBase_258566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 25), 'FigureManagerBase')

class FigureManagerTkAgg(FigureManagerBase_258566, ):
    unicode_258567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, (-1)), 'unicode', u'\n    Attributes\n    ----------\n    canvas : `FigureCanvas`\n        The FigureCanvas instance\n    num : int or str\n        The Figure number\n    toolbar : tk.Toolbar\n        The tk.Toolbar\n    window : tk.Window\n        The tk.Window\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 482, 4, False)
        # Assigning a type to the variable 'self' (line 483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerTkAgg.__init__', ['canvas', 'num', 'window'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['canvas', 'num', 'window'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 483)
        # Processing the call arguments (line 483)
        # Getting the type of 'self' (line 483)
        self_258570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 35), 'self', False)
        # Getting the type of 'canvas' (line 483)
        canvas_258571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 41), 'canvas', False)
        # Getting the type of 'num' (line 483)
        num_258572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 49), 'num', False)
        # Processing the call keyword arguments (line 483)
        kwargs_258573 = {}
        # Getting the type of 'FigureManagerBase' (line 483)
        FigureManagerBase_258568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'FigureManagerBase', False)
        # Obtaining the member '__init__' of a type (line 483)
        init___258569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 8), FigureManagerBase_258568, '__init__')
        # Calling __init__(args, kwargs) (line 483)
        init___call_result_258574 = invoke(stypy.reporting.localization.Localization(__file__, 483, 8), init___258569, *[self_258570, canvas_258571, num_258572], **kwargs_258573)
        
        
        # Assigning a Name to a Attribute (line 484):
        
        # Assigning a Name to a Attribute (line 484):
        # Getting the type of 'window' (line 484)
        window_258575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 22), 'window')
        # Getting the type of 'self' (line 484)
        self_258576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'self')
        # Setting the type of the member 'window' of a type (line 484)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 8), self_258576, 'window', window_258575)
        
        # Call to withdraw(...): (line 485)
        # Processing the call keyword arguments (line 485)
        kwargs_258580 = {}
        # Getting the type of 'self' (line 485)
        self_258577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 8), 'self', False)
        # Obtaining the member 'window' of a type (line 485)
        window_258578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 8), self_258577, 'window')
        # Obtaining the member 'withdraw' of a type (line 485)
        withdraw_258579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 8), window_258578, 'withdraw')
        # Calling withdraw(args, kwargs) (line 485)
        withdraw_call_result_258581 = invoke(stypy.reporting.localization.Localization(__file__, 485, 8), withdraw_258579, *[], **kwargs_258580)
        
        
        # Call to set_window_title(...): (line 486)
        # Processing the call arguments (line 486)
        unicode_258584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 30), 'unicode', u'Figure %d')
        # Getting the type of 'num' (line 486)
        num_258585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 44), 'num', False)
        # Applying the binary operator '%' (line 486)
        result_mod_258586 = python_operator(stypy.reporting.localization.Localization(__file__, 486, 30), '%', unicode_258584, num_258585)
        
        # Processing the call keyword arguments (line 486)
        kwargs_258587 = {}
        # Getting the type of 'self' (line 486)
        self_258582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 8), 'self', False)
        # Obtaining the member 'set_window_title' of a type (line 486)
        set_window_title_258583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 8), self_258582, 'set_window_title')
        # Calling set_window_title(args, kwargs) (line 486)
        set_window_title_call_result_258588 = invoke(stypy.reporting.localization.Localization(__file__, 486, 8), set_window_title_258583, *[result_mod_258586], **kwargs_258587)
        
        
        # Assigning a Name to a Attribute (line 487):
        
        # Assigning a Name to a Attribute (line 487):
        # Getting the type of 'canvas' (line 487)
        canvas_258589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 22), 'canvas')
        # Getting the type of 'self' (line 487)
        self_258590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 487)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 8), self_258590, 'canvas', canvas_258589)
        
        # Call to pack(...): (line 488)
        # Processing the call keyword arguments (line 488)
        # Getting the type of 'Tk' (line 488)
        Tk_258595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 40), 'Tk', False)
        # Obtaining the member 'TOP' of a type (line 488)
        TOP_258596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 40), Tk_258595, 'TOP')
        keyword_258597 = TOP_258596
        # Getting the type of 'Tk' (line 488)
        Tk_258598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 53), 'Tk', False)
        # Obtaining the member 'BOTH' of a type (line 488)
        BOTH_258599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 53), Tk_258598, 'BOTH')
        keyword_258600 = BOTH_258599
        int_258601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, 69), 'int')
        keyword_258602 = int_258601
        kwargs_258603 = {'side': keyword_258597, 'expand': keyword_258602, 'fill': keyword_258600}
        # Getting the type of 'self' (line 488)
        self_258591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 488)
        canvas_258592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 8), self_258591, 'canvas')
        # Obtaining the member '_tkcanvas' of a type (line 488)
        _tkcanvas_258593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 8), canvas_258592, '_tkcanvas')
        # Obtaining the member 'pack' of a type (line 488)
        pack_258594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 8), _tkcanvas_258593, 'pack')
        # Calling pack(args, kwargs) (line 488)
        pack_call_result_258604 = invoke(stypy.reporting.localization.Localization(__file__, 488, 8), pack_258594, *[], **kwargs_258603)
        
        
        # Assigning a Name to a Attribute (line 489):
        
        # Assigning a Name to a Attribute (line 489):
        # Getting the type of 'num' (line 489)
        num_258605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 20), 'num')
        # Getting the type of 'self' (line 489)
        self_258606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'self')
        # Setting the type of the member '_num' of a type (line 489)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 8), self_258606, '_num', num_258605)
        
        # Assigning a Call to a Attribute (line 491):
        
        # Assigning a Call to a Attribute (line 491):
        
        # Call to _get_toolmanager(...): (line 491)
        # Processing the call keyword arguments (line 491)
        kwargs_258609 = {}
        # Getting the type of 'self' (line 491)
        self_258607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 27), 'self', False)
        # Obtaining the member '_get_toolmanager' of a type (line 491)
        _get_toolmanager_258608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 27), self_258607, '_get_toolmanager')
        # Calling _get_toolmanager(args, kwargs) (line 491)
        _get_toolmanager_call_result_258610 = invoke(stypy.reporting.localization.Localization(__file__, 491, 27), _get_toolmanager_258608, *[], **kwargs_258609)
        
        # Getting the type of 'self' (line 491)
        self_258611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 8), 'self')
        # Setting the type of the member 'toolmanager' of a type (line 491)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 8), self_258611, 'toolmanager', _get_toolmanager_call_result_258610)
        
        # Assigning a Call to a Attribute (line 492):
        
        # Assigning a Call to a Attribute (line 492):
        
        # Call to _get_toolbar(...): (line 492)
        # Processing the call keyword arguments (line 492)
        kwargs_258614 = {}
        # Getting the type of 'self' (line 492)
        self_258612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 23), 'self', False)
        # Obtaining the member '_get_toolbar' of a type (line 492)
        _get_toolbar_258613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 23), self_258612, '_get_toolbar')
        # Calling _get_toolbar(args, kwargs) (line 492)
        _get_toolbar_call_result_258615 = invoke(stypy.reporting.localization.Localization(__file__, 492, 23), _get_toolbar_258613, *[], **kwargs_258614)
        
        # Getting the type of 'self' (line 492)
        self_258616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'self')
        # Setting the type of the member 'toolbar' of a type (line 492)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 8), self_258616, 'toolbar', _get_toolbar_call_result_258615)
        
        # Assigning a Name to a Attribute (line 493):
        
        # Assigning a Name to a Attribute (line 493):
        # Getting the type of 'None' (line 493)
        None_258617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 25), 'None')
        # Getting the type of 'self' (line 493)
        self_258618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'self')
        # Setting the type of the member 'statusbar' of a type (line 493)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 8), self_258618, 'statusbar', None_258617)
        
        # Getting the type of 'self' (line 495)
        self_258619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 11), 'self')
        # Obtaining the member 'toolmanager' of a type (line 495)
        toolmanager_258620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 11), self_258619, 'toolmanager')
        # Testing the type of an if condition (line 495)
        if_condition_258621 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 495, 8), toolmanager_258620)
        # Assigning a type to the variable 'if_condition_258621' (line 495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 8), 'if_condition_258621', if_condition_258621)
        # SSA begins for if statement (line 495)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to add_tools_to_manager(...): (line 496)
        # Processing the call arguments (line 496)
        # Getting the type of 'self' (line 496)
        self_258624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 47), 'self', False)
        # Obtaining the member 'toolmanager' of a type (line 496)
        toolmanager_258625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 47), self_258624, 'toolmanager')
        # Processing the call keyword arguments (line 496)
        kwargs_258626 = {}
        # Getting the type of 'backend_tools' (line 496)
        backend_tools_258622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 12), 'backend_tools', False)
        # Obtaining the member 'add_tools_to_manager' of a type (line 496)
        add_tools_to_manager_258623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 12), backend_tools_258622, 'add_tools_to_manager')
        # Calling add_tools_to_manager(args, kwargs) (line 496)
        add_tools_to_manager_call_result_258627 = invoke(stypy.reporting.localization.Localization(__file__, 496, 12), add_tools_to_manager_258623, *[toolmanager_258625], **kwargs_258626)
        
        
        # Getting the type of 'self' (line 497)
        self_258628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 15), 'self')
        # Obtaining the member 'toolbar' of a type (line 497)
        toolbar_258629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 15), self_258628, 'toolbar')
        # Testing the type of an if condition (line 497)
        if_condition_258630 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 497, 12), toolbar_258629)
        # Assigning a type to the variable 'if_condition_258630' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'if_condition_258630', if_condition_258630)
        # SSA begins for if statement (line 497)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to add_tools_to_container(...): (line 498)
        # Processing the call arguments (line 498)
        # Getting the type of 'self' (line 498)
        self_258633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 53), 'self', False)
        # Obtaining the member 'toolbar' of a type (line 498)
        toolbar_258634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 53), self_258633, 'toolbar')
        # Processing the call keyword arguments (line 498)
        kwargs_258635 = {}
        # Getting the type of 'backend_tools' (line 498)
        backend_tools_258631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 16), 'backend_tools', False)
        # Obtaining the member 'add_tools_to_container' of a type (line 498)
        add_tools_to_container_258632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 16), backend_tools_258631, 'add_tools_to_container')
        # Calling add_tools_to_container(args, kwargs) (line 498)
        add_tools_to_container_call_result_258636 = invoke(stypy.reporting.localization.Localization(__file__, 498, 16), add_tools_to_container_258632, *[toolbar_258634], **kwargs_258635)
        
        
        # Assigning a Call to a Attribute (line 499):
        
        # Assigning a Call to a Attribute (line 499):
        
        # Call to StatusbarTk(...): (line 499)
        # Processing the call arguments (line 499)
        # Getting the type of 'self' (line 499)
        self_258638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 45), 'self', False)
        # Obtaining the member 'window' of a type (line 499)
        window_258639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 45), self_258638, 'window')
        # Getting the type of 'self' (line 499)
        self_258640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 58), 'self', False)
        # Obtaining the member 'toolmanager' of a type (line 499)
        toolmanager_258641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 58), self_258640, 'toolmanager')
        # Processing the call keyword arguments (line 499)
        kwargs_258642 = {}
        # Getting the type of 'StatusbarTk' (line 499)
        StatusbarTk_258637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 33), 'StatusbarTk', False)
        # Calling StatusbarTk(args, kwargs) (line 499)
        StatusbarTk_call_result_258643 = invoke(stypy.reporting.localization.Localization(__file__, 499, 33), StatusbarTk_258637, *[window_258639, toolmanager_258641], **kwargs_258642)
        
        # Getting the type of 'self' (line 499)
        self_258644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 16), 'self')
        # Setting the type of the member 'statusbar' of a type (line 499)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 16), self_258644, 'statusbar', StatusbarTk_call_result_258643)
        # SSA join for if statement (line 497)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 495)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 501):
        
        # Assigning a Name to a Attribute (line 501):
        # Getting the type of 'False' (line 501)
        False_258645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 22), 'False')
        # Getting the type of 'self' (line 501)
        self_258646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 8), 'self')
        # Setting the type of the member '_shown' of a type (line 501)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 501, 8), self_258646, '_shown', False_258645)

        @norecursion
        def notify_axes_change(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'notify_axes_change'
            module_type_store = module_type_store.open_function_context('notify_axes_change', 503, 8, False)
            
            # Passed parameters checking function
            notify_axes_change.stypy_localization = localization
            notify_axes_change.stypy_type_of_self = None
            notify_axes_change.stypy_type_store = module_type_store
            notify_axes_change.stypy_function_name = 'notify_axes_change'
            notify_axes_change.stypy_param_names_list = ['fig']
            notify_axes_change.stypy_varargs_param_name = None
            notify_axes_change.stypy_kwargs_param_name = None
            notify_axes_change.stypy_call_defaults = defaults
            notify_axes_change.stypy_call_varargs = varargs
            notify_axes_change.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'notify_axes_change', ['fig'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'notify_axes_change', localization, ['fig'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'notify_axes_change(...)' code ##################

            unicode_258647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 12), 'unicode', u'this will be called whenever the current axes is changed')
            
            
            # Getting the type of 'self' (line 505)
            self_258648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 15), 'self')
            # Obtaining the member 'toolmanager' of a type (line 505)
            toolmanager_258649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 505, 15), self_258648, 'toolmanager')
            # Getting the type of 'None' (line 505)
            None_258650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 39), 'None')
            # Applying the binary operator 'isnot' (line 505)
            result_is_not_258651 = python_operator(stypy.reporting.localization.Localization(__file__, 505, 15), 'isnot', toolmanager_258649, None_258650)
            
            # Testing the type of an if condition (line 505)
            if_condition_258652 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 505, 12), result_is_not_258651)
            # Assigning a type to the variable 'if_condition_258652' (line 505)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 505, 12), 'if_condition_258652', if_condition_258652)
            # SSA begins for if statement (line 505)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            pass
            # SSA branch for the else part of an if statement (line 505)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'self' (line 507)
            self_258653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 17), 'self')
            # Obtaining the member 'toolbar' of a type (line 507)
            toolbar_258654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 507, 17), self_258653, 'toolbar')
            # Getting the type of 'None' (line 507)
            None_258655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 37), 'None')
            # Applying the binary operator 'isnot' (line 507)
            result_is_not_258656 = python_operator(stypy.reporting.localization.Localization(__file__, 507, 17), 'isnot', toolbar_258654, None_258655)
            
            # Testing the type of an if condition (line 507)
            if_condition_258657 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 507, 17), result_is_not_258656)
            # Assigning a type to the variable 'if_condition_258657' (line 507)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 507, 17), 'if_condition_258657', if_condition_258657)
            # SSA begins for if statement (line 507)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to update(...): (line 508)
            # Processing the call keyword arguments (line 508)
            kwargs_258661 = {}
            # Getting the type of 'self' (line 508)
            self_258658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 16), 'self', False)
            # Obtaining the member 'toolbar' of a type (line 508)
            toolbar_258659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 16), self_258658, 'toolbar')
            # Obtaining the member 'update' of a type (line 508)
            update_258660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 16), toolbar_258659, 'update')
            # Calling update(args, kwargs) (line 508)
            update_call_result_258662 = invoke(stypy.reporting.localization.Localization(__file__, 508, 16), update_258660, *[], **kwargs_258661)
            
            # SSA join for if statement (line 507)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 505)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of 'notify_axes_change(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'notify_axes_change' in the type store
            # Getting the type of 'stypy_return_type' (line 503)
            stypy_return_type_258663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_258663)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'notify_axes_change'
            return stypy_return_type_258663

        # Assigning a type to the variable 'notify_axes_change' (line 503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 8), 'notify_axes_change', notify_axes_change)
        
        # Call to add_axobserver(...): (line 509)
        # Processing the call arguments (line 509)
        # Getting the type of 'notify_axes_change' (line 509)
        notify_axes_change_258668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 42), 'notify_axes_change', False)
        # Processing the call keyword arguments (line 509)
        kwargs_258669 = {}
        # Getting the type of 'self' (line 509)
        self_258664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 509)
        canvas_258665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 509, 8), self_258664, 'canvas')
        # Obtaining the member 'figure' of a type (line 509)
        figure_258666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 509, 8), canvas_258665, 'figure')
        # Obtaining the member 'add_axobserver' of a type (line 509)
        add_axobserver_258667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 509, 8), figure_258666, 'add_axobserver')
        # Calling add_axobserver(args, kwargs) (line 509)
        add_axobserver_call_result_258670 = invoke(stypy.reporting.localization.Localization(__file__, 509, 8), add_axobserver_258667, *[notify_axes_change_258668], **kwargs_258669)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _get_toolbar(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_toolbar'
        module_type_store = module_type_store.open_function_context('_get_toolbar', 511, 4, False)
        # Assigning a type to the variable 'self' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerTkAgg._get_toolbar.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerTkAgg._get_toolbar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerTkAgg._get_toolbar.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerTkAgg._get_toolbar.__dict__.__setitem__('stypy_function_name', 'FigureManagerTkAgg._get_toolbar')
        FigureManagerTkAgg._get_toolbar.__dict__.__setitem__('stypy_param_names_list', [])
        FigureManagerTkAgg._get_toolbar.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerTkAgg._get_toolbar.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerTkAgg._get_toolbar.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerTkAgg._get_toolbar.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerTkAgg._get_toolbar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerTkAgg._get_toolbar.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerTkAgg._get_toolbar', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_toolbar', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_toolbar(...)' code ##################

        
        
        
        # Obtaining the type of the subscript
        unicode_258671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 31), 'unicode', u'toolbar')
        # Getting the type of 'matplotlib' (line 512)
        matplotlib_258672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 11), 'matplotlib')
        # Obtaining the member 'rcParams' of a type (line 512)
        rcParams_258673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 11), matplotlib_258672, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 512)
        getitem___258674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 11), rcParams_258673, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 512)
        subscript_call_result_258675 = invoke(stypy.reporting.localization.Localization(__file__, 512, 11), getitem___258674, unicode_258671)
        
        unicode_258676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 45), 'unicode', u'toolbar2')
        # Applying the binary operator '==' (line 512)
        result_eq_258677 = python_operator(stypy.reporting.localization.Localization(__file__, 512, 11), '==', subscript_call_result_258675, unicode_258676)
        
        # Testing the type of an if condition (line 512)
        if_condition_258678 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 512, 8), result_eq_258677)
        # Assigning a type to the variable 'if_condition_258678' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 8), 'if_condition_258678', if_condition_258678)
        # SSA begins for if statement (line 512)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 513):
        
        # Assigning a Call to a Name (line 513):
        
        # Call to NavigationToolbar2TkAgg(...): (line 513)
        # Processing the call arguments (line 513)
        # Getting the type of 'self' (line 513)
        self_258680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 46), 'self', False)
        # Obtaining the member 'canvas' of a type (line 513)
        canvas_258681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 46), self_258680, 'canvas')
        # Getting the type of 'self' (line 513)
        self_258682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 59), 'self', False)
        # Obtaining the member 'window' of a type (line 513)
        window_258683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 59), self_258682, 'window')
        # Processing the call keyword arguments (line 513)
        kwargs_258684 = {}
        # Getting the type of 'NavigationToolbar2TkAgg' (line 513)
        NavigationToolbar2TkAgg_258679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 22), 'NavigationToolbar2TkAgg', False)
        # Calling NavigationToolbar2TkAgg(args, kwargs) (line 513)
        NavigationToolbar2TkAgg_call_result_258685 = invoke(stypy.reporting.localization.Localization(__file__, 513, 22), NavigationToolbar2TkAgg_258679, *[canvas_258681, window_258683], **kwargs_258684)
        
        # Assigning a type to the variable 'toolbar' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 12), 'toolbar', NavigationToolbar2TkAgg_call_result_258685)
        # SSA branch for the else part of an if statement (line 512)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Obtaining the type of the subscript
        unicode_258686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 33), 'unicode', u'toolbar')
        # Getting the type of 'matplotlib' (line 514)
        matplotlib_258687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 13), 'matplotlib')
        # Obtaining the member 'rcParams' of a type (line 514)
        rcParams_258688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 13), matplotlib_258687, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 514)
        getitem___258689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 13), rcParams_258688, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 514)
        subscript_call_result_258690 = invoke(stypy.reporting.localization.Localization(__file__, 514, 13), getitem___258689, unicode_258686)
        
        unicode_258691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 47), 'unicode', u'toolmanager')
        # Applying the binary operator '==' (line 514)
        result_eq_258692 = python_operator(stypy.reporting.localization.Localization(__file__, 514, 13), '==', subscript_call_result_258690, unicode_258691)
        
        # Testing the type of an if condition (line 514)
        if_condition_258693 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 514, 13), result_eq_258692)
        # Assigning a type to the variable 'if_condition_258693' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 13), 'if_condition_258693', if_condition_258693)
        # SSA begins for if statement (line 514)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 515):
        
        # Assigning a Call to a Name (line 515):
        
        # Call to ToolbarTk(...): (line 515)
        # Processing the call arguments (line 515)
        # Getting the type of 'self' (line 515)
        self_258695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 32), 'self', False)
        # Obtaining the member 'toolmanager' of a type (line 515)
        toolmanager_258696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 32), self_258695, 'toolmanager')
        # Getting the type of 'self' (line 515)
        self_258697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 50), 'self', False)
        # Obtaining the member 'window' of a type (line 515)
        window_258698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 50), self_258697, 'window')
        # Processing the call keyword arguments (line 515)
        kwargs_258699 = {}
        # Getting the type of 'ToolbarTk' (line 515)
        ToolbarTk_258694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 22), 'ToolbarTk', False)
        # Calling ToolbarTk(args, kwargs) (line 515)
        ToolbarTk_call_result_258700 = invoke(stypy.reporting.localization.Localization(__file__, 515, 22), ToolbarTk_258694, *[toolmanager_258696, window_258698], **kwargs_258699)
        
        # Assigning a type to the variable 'toolbar' (line 515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 12), 'toolbar', ToolbarTk_call_result_258700)
        # SSA branch for the else part of an if statement (line 514)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 517):
        
        # Assigning a Name to a Name (line 517):
        # Getting the type of 'None' (line 517)
        None_258701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 22), 'None')
        # Assigning a type to the variable 'toolbar' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'toolbar', None_258701)
        # SSA join for if statement (line 514)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 512)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'toolbar' (line 518)
        toolbar_258702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 15), 'toolbar')
        # Assigning a type to the variable 'stypy_return_type' (line 518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 8), 'stypy_return_type', toolbar_258702)
        
        # ################# End of '_get_toolbar(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_toolbar' in the type store
        # Getting the type of 'stypy_return_type' (line 511)
        stypy_return_type_258703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258703)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_toolbar'
        return stypy_return_type_258703


    @norecursion
    def _get_toolmanager(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_toolmanager'
        module_type_store = module_type_store.open_function_context('_get_toolmanager', 520, 4, False)
        # Assigning a type to the variable 'self' (line 521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 521, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerTkAgg._get_toolmanager.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerTkAgg._get_toolmanager.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerTkAgg._get_toolmanager.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerTkAgg._get_toolmanager.__dict__.__setitem__('stypy_function_name', 'FigureManagerTkAgg._get_toolmanager')
        FigureManagerTkAgg._get_toolmanager.__dict__.__setitem__('stypy_param_names_list', [])
        FigureManagerTkAgg._get_toolmanager.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerTkAgg._get_toolmanager.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerTkAgg._get_toolmanager.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerTkAgg._get_toolmanager.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerTkAgg._get_toolmanager.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerTkAgg._get_toolmanager.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerTkAgg._get_toolmanager', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_toolmanager', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_toolmanager(...)' code ##################

        
        
        
        # Obtaining the type of the subscript
        unicode_258704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, 20), 'unicode', u'toolbar')
        # Getting the type of 'rcParams' (line 521)
        rcParams_258705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 11), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 521)
        getitem___258706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 11), rcParams_258705, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 521)
        subscript_call_result_258707 = invoke(stypy.reporting.localization.Localization(__file__, 521, 11), getitem___258706, unicode_258704)
        
        unicode_258708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, 34), 'unicode', u'toolmanager')
        # Applying the binary operator '==' (line 521)
        result_eq_258709 = python_operator(stypy.reporting.localization.Localization(__file__, 521, 11), '==', subscript_call_result_258707, unicode_258708)
        
        # Testing the type of an if condition (line 521)
        if_condition_258710 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 521, 8), result_eq_258709)
        # Assigning a type to the variable 'if_condition_258710' (line 521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 521, 8), 'if_condition_258710', if_condition_258710)
        # SSA begins for if statement (line 521)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 522):
        
        # Assigning a Call to a Name (line 522):
        
        # Call to ToolManager(...): (line 522)
        # Processing the call arguments (line 522)
        # Getting the type of 'self' (line 522)
        self_258712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 38), 'self', False)
        # Obtaining the member 'canvas' of a type (line 522)
        canvas_258713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 38), self_258712, 'canvas')
        # Obtaining the member 'figure' of a type (line 522)
        figure_258714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 38), canvas_258713, 'figure')
        # Processing the call keyword arguments (line 522)
        kwargs_258715 = {}
        # Getting the type of 'ToolManager' (line 522)
        ToolManager_258711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 26), 'ToolManager', False)
        # Calling ToolManager(args, kwargs) (line 522)
        ToolManager_call_result_258716 = invoke(stypy.reporting.localization.Localization(__file__, 522, 26), ToolManager_258711, *[figure_258714], **kwargs_258715)
        
        # Assigning a type to the variable 'toolmanager' (line 522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 12), 'toolmanager', ToolManager_call_result_258716)
        # SSA branch for the else part of an if statement (line 521)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 524):
        
        # Assigning a Name to a Name (line 524):
        # Getting the type of 'None' (line 524)
        None_258717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 26), 'None')
        # Assigning a type to the variable 'toolmanager' (line 524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 12), 'toolmanager', None_258717)
        # SSA join for if statement (line 521)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'toolmanager' (line 525)
        toolmanager_258718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 15), 'toolmanager')
        # Assigning a type to the variable 'stypy_return_type' (line 525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 525, 8), 'stypy_return_type', toolmanager_258718)
        
        # ################# End of '_get_toolmanager(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_toolmanager' in the type store
        # Getting the type of 'stypy_return_type' (line 520)
        stypy_return_type_258719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258719)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_toolmanager'
        return stypy_return_type_258719


    @norecursion
    def resize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 527)
        None_258720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 35), 'None')
        defaults = [None_258720]
        # Create a new context for function 'resize'
        module_type_store = module_type_store.open_function_context('resize', 527, 4, False)
        # Assigning a type to the variable 'self' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerTkAgg.resize.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerTkAgg.resize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerTkAgg.resize.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerTkAgg.resize.__dict__.__setitem__('stypy_function_name', 'FigureManagerTkAgg.resize')
        FigureManagerTkAgg.resize.__dict__.__setitem__('stypy_param_names_list', ['width', 'height'])
        FigureManagerTkAgg.resize.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerTkAgg.resize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerTkAgg.resize.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerTkAgg.resize.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerTkAgg.resize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerTkAgg.resize.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerTkAgg.resize', ['width', 'height'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'resize', localization, ['width', 'height'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'resize(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 537)
        # Getting the type of 'height' (line 537)
        height_258721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 11), 'height')
        # Getting the type of 'None' (line 537)
        None_258722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 21), 'None')
        
        (may_be_258723, more_types_in_union_258724) = may_be_none(height_258721, None_258722)

        if may_be_258723:

            if more_types_in_union_258724:
                # Runtime conditional SSA (line 537)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 538):
            
            # Assigning a Attribute to a Name (line 538):
            # Getting the type of 'width' (line 538)
            width_258725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 20), 'width')
            # Obtaining the member 'width' of a type (line 538)
            width_258726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 20), width_258725, 'width')
            # Assigning a type to the variable 'width' (line 538)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 12), 'width', width_258726)

            if more_types_in_union_258724:
                # Runtime conditional SSA for else branch (line 537)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_258723) or more_types_in_union_258724):
            
            # Call to geometry(...): (line 540)
            # Processing the call arguments (line 540)
            unicode_258732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 50), 'unicode', u'%dx%d')
            
            # Obtaining an instance of the builtin type 'tuple' (line 540)
            tuple_258733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 61), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 540)
            # Adding element type (line 540)
            # Getting the type of 'width' (line 540)
            width_258734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 61), 'width', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 540, 61), tuple_258733, width_258734)
            # Adding element type (line 540)
            # Getting the type of 'height' (line 540)
            height_258735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 68), 'height', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 540, 61), tuple_258733, height_258735)
            
            # Applying the binary operator '%' (line 540)
            result_mod_258736 = python_operator(stypy.reporting.localization.Localization(__file__, 540, 50), '%', unicode_258732, tuple_258733)
            
            # Processing the call keyword arguments (line 540)
            kwargs_258737 = {}
            # Getting the type of 'self' (line 540)
            self_258727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 12), 'self', False)
            # Obtaining the member 'canvas' of a type (line 540)
            canvas_258728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 12), self_258727, 'canvas')
            # Obtaining the member '_tkcanvas' of a type (line 540)
            _tkcanvas_258729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 12), canvas_258728, '_tkcanvas')
            # Obtaining the member 'master' of a type (line 540)
            master_258730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 12), _tkcanvas_258729, 'master')
            # Obtaining the member 'geometry' of a type (line 540)
            geometry_258731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 12), master_258730, 'geometry')
            # Calling geometry(args, kwargs) (line 540)
            geometry_call_result_258738 = invoke(stypy.reporting.localization.Localization(__file__, 540, 12), geometry_258731, *[result_mod_258736], **kwargs_258737)
            

            if (may_be_258723 and more_types_in_union_258724):
                # SSA join for if statement (line 537)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'self' (line 542)
        self_258739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 11), 'self')
        # Obtaining the member 'toolbar' of a type (line 542)
        toolbar_258740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 11), self_258739, 'toolbar')
        # Getting the type of 'None' (line 542)
        None_258741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 31), 'None')
        # Applying the binary operator 'isnot' (line 542)
        result_is_not_258742 = python_operator(stypy.reporting.localization.Localization(__file__, 542, 11), 'isnot', toolbar_258740, None_258741)
        
        # Testing the type of an if condition (line 542)
        if_condition_258743 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 542, 8), result_is_not_258742)
        # Assigning a type to the variable 'if_condition_258743' (line 542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 8), 'if_condition_258743', if_condition_258743)
        # SSA begins for if statement (line 542)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to configure(...): (line 543)
        # Processing the call keyword arguments (line 543)
        # Getting the type of 'width' (line 543)
        width_258747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 41), 'width', False)
        keyword_258748 = width_258747
        kwargs_258749 = {'width': keyword_258748}
        # Getting the type of 'self' (line 543)
        self_258744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 12), 'self', False)
        # Obtaining the member 'toolbar' of a type (line 543)
        toolbar_258745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 12), self_258744, 'toolbar')
        # Obtaining the member 'configure' of a type (line 543)
        configure_258746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 12), toolbar_258745, 'configure')
        # Calling configure(args, kwargs) (line 543)
        configure_call_result_258750 = invoke(stypy.reporting.localization.Localization(__file__, 543, 12), configure_258746, *[], **kwargs_258749)
        
        # SSA join for if statement (line 542)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'resize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'resize' in the type store
        # Getting the type of 'stypy_return_type' (line 527)
        stypy_return_type_258751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258751)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'resize'
        return stypy_return_type_258751


    @norecursion
    def show(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'show'
        module_type_store = module_type_store.open_function_context('show', 545, 4, False)
        # Assigning a type to the variable 'self' (line 546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerTkAgg.show.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerTkAgg.show.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerTkAgg.show.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerTkAgg.show.__dict__.__setitem__('stypy_function_name', 'FigureManagerTkAgg.show')
        FigureManagerTkAgg.show.__dict__.__setitem__('stypy_param_names_list', [])
        FigureManagerTkAgg.show.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerTkAgg.show.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerTkAgg.show.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerTkAgg.show.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerTkAgg.show.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerTkAgg.show.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerTkAgg.show', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'show', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'show(...)' code ##################

        unicode_258752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, (-1)), 'unicode', u"\n        this function doesn't segfault but causes the\n        PyEval_RestoreThread: NULL state bug on win32\n        ")
        
        # Assigning a Call to a Name (line 550):
        
        # Assigning a Call to a Name (line 550):
        
        # Call to FocusManager(...): (line 550)
        # Processing the call keyword arguments (line 550)
        kwargs_258755 = {}
        # Getting the type of 'windowing' (line 550)
        windowing_258753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 17), 'windowing', False)
        # Obtaining the member 'FocusManager' of a type (line 550)
        FocusManager_258754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 550, 17), windowing_258753, 'FocusManager')
        # Calling FocusManager(args, kwargs) (line 550)
        FocusManager_call_result_258756 = invoke(stypy.reporting.localization.Localization(__file__, 550, 17), FocusManager_258754, *[], **kwargs_258755)
        
        # Assigning a type to the variable '_focus' (line 550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 8), '_focus', FocusManager_call_result_258756)
        
        
        # Getting the type of 'self' (line 551)
        self_258757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 15), 'self')
        # Obtaining the member '_shown' of a type (line 551)
        _shown_258758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 15), self_258757, '_shown')
        # Applying the 'not' unary operator (line 551)
        result_not__258759 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 11), 'not', _shown_258758)
        
        # Testing the type of an if condition (line 551)
        if_condition_258760 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 551, 8), result_not__258759)
        # Assigning a type to the variable 'if_condition_258760' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 'if_condition_258760', if_condition_258760)
        # SSA begins for if statement (line 551)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

        @norecursion
        def destroy(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'destroy'
            module_type_store = module_type_store.open_function_context('destroy', 552, 12, False)
            
            # Passed parameters checking function
            destroy.stypy_localization = localization
            destroy.stypy_type_of_self = None
            destroy.stypy_type_store = module_type_store
            destroy.stypy_function_name = 'destroy'
            destroy.stypy_param_names_list = []
            destroy.stypy_varargs_param_name = 'args'
            destroy.stypy_kwargs_param_name = None
            destroy.stypy_call_defaults = defaults
            destroy.stypy_call_varargs = varargs
            destroy.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'destroy', [], 'args', None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'destroy', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'destroy(...)' code ##################

            
            # Assigning a Name to a Attribute (line 553):
            
            # Assigning a Name to a Attribute (line 553):
            # Getting the type of 'None' (line 553)
            None_258761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 30), 'None')
            # Getting the type of 'self' (line 553)
            self_258762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 16), 'self')
            # Setting the type of the member 'window' of a type (line 553)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 16), self_258762, 'window', None_258761)
            
            # Call to destroy(...): (line 554)
            # Processing the call arguments (line 554)
            # Getting the type of 'self' (line 554)
            self_258765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 28), 'self', False)
            # Obtaining the member '_num' of a type (line 554)
            _num_258766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 28), self_258765, '_num')
            # Processing the call keyword arguments (line 554)
            kwargs_258767 = {}
            # Getting the type of 'Gcf' (line 554)
            Gcf_258763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 16), 'Gcf', False)
            # Obtaining the member 'destroy' of a type (line 554)
            destroy_258764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 16), Gcf_258763, 'destroy')
            # Calling destroy(args, kwargs) (line 554)
            destroy_call_result_258768 = invoke(stypy.reporting.localization.Localization(__file__, 554, 16), destroy_258764, *[_num_258766], **kwargs_258767)
            
            
            # ################# End of 'destroy(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'destroy' in the type store
            # Getting the type of 'stypy_return_type' (line 552)
            stypy_return_type_258769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 12), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_258769)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'destroy'
            return stypy_return_type_258769

        # Assigning a type to the variable 'destroy' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 12), 'destroy', destroy)
        
        # Call to bind(...): (line 555)
        # Processing the call arguments (line 555)
        unicode_258774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 555, 39), 'unicode', u'<Destroy>')
        # Getting the type of 'destroy' (line 555)
        destroy_258775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 52), 'destroy', False)
        # Processing the call keyword arguments (line 555)
        kwargs_258776 = {}
        # Getting the type of 'self' (line 555)
        self_258770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 555)
        canvas_258771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 12), self_258770, 'canvas')
        # Obtaining the member '_tkcanvas' of a type (line 555)
        _tkcanvas_258772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 12), canvas_258771, '_tkcanvas')
        # Obtaining the member 'bind' of a type (line 555)
        bind_258773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 12), _tkcanvas_258772, 'bind')
        # Calling bind(args, kwargs) (line 555)
        bind_call_result_258777 = invoke(stypy.reporting.localization.Localization(__file__, 555, 12), bind_258773, *[unicode_258774, destroy_258775], **kwargs_258776)
        
        
        # Call to deiconify(...): (line 556)
        # Processing the call keyword arguments (line 556)
        kwargs_258781 = {}
        # Getting the type of 'self' (line 556)
        self_258778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 12), 'self', False)
        # Obtaining the member 'window' of a type (line 556)
        window_258779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 12), self_258778, 'window')
        # Obtaining the member 'deiconify' of a type (line 556)
        deiconify_258780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 12), window_258779, 'deiconify')
        # Calling deiconify(args, kwargs) (line 556)
        deiconify_call_result_258782 = invoke(stypy.reporting.localization.Localization(__file__, 556, 12), deiconify_258780, *[], **kwargs_258781)
        
        
        # Call to update(...): (line 558)
        # Processing the call keyword arguments (line 558)
        kwargs_258786 = {}
        # Getting the type of 'self' (line 558)
        self_258783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 12), 'self', False)
        # Obtaining the member 'window' of a type (line 558)
        window_258784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 558, 12), self_258783, 'window')
        # Obtaining the member 'update' of a type (line 558)
        update_258785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 558, 12), window_258784, 'update')
        # Calling update(args, kwargs) (line 558)
        update_call_result_258787 = invoke(stypy.reporting.localization.Localization(__file__, 558, 12), update_258785, *[], **kwargs_258786)
        
        # SSA branch for the else part of an if statement (line 551)
        module_type_store.open_ssa_branch('else')
        
        # Call to draw_idle(...): (line 560)
        # Processing the call keyword arguments (line 560)
        kwargs_258791 = {}
        # Getting the type of 'self' (line 560)
        self_258788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 560)
        canvas_258789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 12), self_258788, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 560)
        draw_idle_258790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 12), canvas_258789, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 560)
        draw_idle_call_result_258792 = invoke(stypy.reporting.localization.Localization(__file__, 560, 12), draw_idle_258790, *[], **kwargs_258791)
        
        # SSA join for if statement (line 551)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to attributes(...): (line 562)
        # Processing the call arguments (line 562)
        unicode_258798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 46), 'unicode', u'-topmost')
        int_258799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 58), 'int')
        # Processing the call keyword arguments (line 562)
        kwargs_258800 = {}
        # Getting the type of 'self' (line 562)
        self_258793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 562)
        canvas_258794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 8), self_258793, 'canvas')
        # Obtaining the member 'manager' of a type (line 562)
        manager_258795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 8), canvas_258794, 'manager')
        # Obtaining the member 'window' of a type (line 562)
        window_258796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 8), manager_258795, 'window')
        # Obtaining the member 'attributes' of a type (line 562)
        attributes_258797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 8), window_258796, 'attributes')
        # Calling attributes(args, kwargs) (line 562)
        attributes_call_result_258801 = invoke(stypy.reporting.localization.Localization(__file__, 562, 8), attributes_258797, *[unicode_258798, int_258799], **kwargs_258800)
        
        
        # Call to attributes(...): (line 563)
        # Processing the call arguments (line 563)
        unicode_258807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 46), 'unicode', u'-topmost')
        int_258808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 58), 'int')
        # Processing the call keyword arguments (line 563)
        kwargs_258809 = {}
        # Getting the type of 'self' (line 563)
        self_258802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 563)
        canvas_258803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 8), self_258802, 'canvas')
        # Obtaining the member 'manager' of a type (line 563)
        manager_258804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 8), canvas_258803, 'manager')
        # Obtaining the member 'window' of a type (line 563)
        window_258805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 8), manager_258804, 'window')
        # Obtaining the member 'attributes' of a type (line 563)
        attributes_258806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 8), window_258805, 'attributes')
        # Calling attributes(args, kwargs) (line 563)
        attributes_call_result_258810 = invoke(stypy.reporting.localization.Localization(__file__, 563, 8), attributes_258806, *[unicode_258807, int_258808], **kwargs_258809)
        
        
        # Assigning a Name to a Attribute (line 564):
        
        # Assigning a Name to a Attribute (line 564):
        # Getting the type of 'True' (line 564)
        True_258811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 22), 'True')
        # Getting the type of 'self' (line 564)
        self_258812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'self')
        # Setting the type of the member '_shown' of a type (line 564)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 8), self_258812, '_shown', True_258811)
        
        # ################# End of 'show(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'show' in the type store
        # Getting the type of 'stypy_return_type' (line 545)
        stypy_return_type_258813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258813)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'show'
        return stypy_return_type_258813


    @norecursion
    def destroy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'destroy'
        module_type_store = module_type_store.open_function_context('destroy', 566, 4, False)
        # Assigning a type to the variable 'self' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerTkAgg.destroy.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerTkAgg.destroy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerTkAgg.destroy.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerTkAgg.destroy.__dict__.__setitem__('stypy_function_name', 'FigureManagerTkAgg.destroy')
        FigureManagerTkAgg.destroy.__dict__.__setitem__('stypy_param_names_list', [])
        FigureManagerTkAgg.destroy.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureManagerTkAgg.destroy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerTkAgg.destroy.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerTkAgg.destroy.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerTkAgg.destroy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerTkAgg.destroy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerTkAgg.destroy', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'destroy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'destroy(...)' code ##################

        
        
        # Getting the type of 'self' (line 567)
        self_258814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 11), 'self')
        # Obtaining the member 'window' of a type (line 567)
        window_258815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 11), self_258814, 'window')
        # Getting the type of 'None' (line 567)
        None_258816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 30), 'None')
        # Applying the binary operator 'isnot' (line 567)
        result_is_not_258817 = python_operator(stypy.reporting.localization.Localization(__file__, 567, 11), 'isnot', window_258815, None_258816)
        
        # Testing the type of an if condition (line 567)
        if_condition_258818 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 567, 8), result_is_not_258817)
        # Assigning a type to the variable 'if_condition_258818' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 8), 'if_condition_258818', if_condition_258818)
        # SSA begins for if statement (line 567)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 569)
        self_258819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 15), 'self')
        # Obtaining the member 'canvas' of a type (line 569)
        canvas_258820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 15), self_258819, 'canvas')
        # Obtaining the member '_idle_callback' of a type (line 569)
        _idle_callback_258821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 15), canvas_258820, '_idle_callback')
        # Testing the type of an if condition (line 569)
        if_condition_258822 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 569, 12), _idle_callback_258821)
        # Assigning a type to the variable 'if_condition_258822' (line 569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 12), 'if_condition_258822', if_condition_258822)
        # SSA begins for if statement (line 569)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to after_cancel(...): (line 570)
        # Processing the call arguments (line 570)
        # Getting the type of 'self' (line 570)
        self_258827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 51), 'self', False)
        # Obtaining the member 'canvas' of a type (line 570)
        canvas_258828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 51), self_258827, 'canvas')
        # Obtaining the member '_idle_callback' of a type (line 570)
        _idle_callback_258829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 51), canvas_258828, '_idle_callback')
        # Processing the call keyword arguments (line 570)
        kwargs_258830 = {}
        # Getting the type of 'self' (line 570)
        self_258823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 570)
        canvas_258824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 16), self_258823, 'canvas')
        # Obtaining the member '_tkcanvas' of a type (line 570)
        _tkcanvas_258825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 16), canvas_258824, '_tkcanvas')
        # Obtaining the member 'after_cancel' of a type (line 570)
        after_cancel_258826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 16), _tkcanvas_258825, 'after_cancel')
        # Calling after_cancel(args, kwargs) (line 570)
        after_cancel_call_result_258831 = invoke(stypy.reporting.localization.Localization(__file__, 570, 16), after_cancel_258826, *[_idle_callback_258829], **kwargs_258830)
        
        # SSA join for if statement (line 569)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to destroy(...): (line 571)
        # Processing the call keyword arguments (line 571)
        kwargs_258835 = {}
        # Getting the type of 'self' (line 571)
        self_258832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 12), 'self', False)
        # Obtaining the member 'window' of a type (line 571)
        window_258833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 12), self_258832, 'window')
        # Obtaining the member 'destroy' of a type (line 571)
        destroy_258834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 12), window_258833, 'destroy')
        # Calling destroy(args, kwargs) (line 571)
        destroy_call_result_258836 = invoke(stypy.reporting.localization.Localization(__file__, 571, 12), destroy_258834, *[], **kwargs_258835)
        
        # SSA join for if statement (line 567)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to get_num_fig_managers(...): (line 572)
        # Processing the call keyword arguments (line 572)
        kwargs_258839 = {}
        # Getting the type of 'Gcf' (line 572)
        Gcf_258837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 11), 'Gcf', False)
        # Obtaining the member 'get_num_fig_managers' of a type (line 572)
        get_num_fig_managers_258838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 11), Gcf_258837, 'get_num_fig_managers')
        # Calling get_num_fig_managers(args, kwargs) (line 572)
        get_num_fig_managers_call_result_258840 = invoke(stypy.reporting.localization.Localization(__file__, 572, 11), get_num_fig_managers_258838, *[], **kwargs_258839)
        
        int_258841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 39), 'int')
        # Applying the binary operator '==' (line 572)
        result_eq_258842 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 11), '==', get_num_fig_managers_call_result_258840, int_258841)
        
        # Testing the type of an if condition (line 572)
        if_condition_258843 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 572, 8), result_eq_258842)
        # Assigning a type to the variable 'if_condition_258843' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'if_condition_258843', if_condition_258843)
        # SSA begins for if statement (line 572)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 573)
        self_258844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 15), 'self')
        # Obtaining the member 'window' of a type (line 573)
        window_258845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 15), self_258844, 'window')
        # Getting the type of 'None' (line 573)
        None_258846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 34), 'None')
        # Applying the binary operator 'isnot' (line 573)
        result_is_not_258847 = python_operator(stypy.reporting.localization.Localization(__file__, 573, 15), 'isnot', window_258845, None_258846)
        
        # Testing the type of an if condition (line 573)
        if_condition_258848 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 573, 12), result_is_not_258847)
        # Assigning a type to the variable 'if_condition_258848' (line 573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 12), 'if_condition_258848', if_condition_258848)
        # SSA begins for if statement (line 573)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to quit(...): (line 574)
        # Processing the call keyword arguments (line 574)
        kwargs_258852 = {}
        # Getting the type of 'self' (line 574)
        self_258849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 16), 'self', False)
        # Obtaining the member 'window' of a type (line 574)
        window_258850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 16), self_258849, 'window')
        # Obtaining the member 'quit' of a type (line 574)
        quit_258851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 16), window_258850, 'quit')
        # Calling quit(args, kwargs) (line 574)
        quit_call_result_258853 = invoke(stypy.reporting.localization.Localization(__file__, 574, 16), quit_258851, *[], **kwargs_258852)
        
        # SSA join for if statement (line 573)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 572)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 575):
        
        # Assigning a Name to a Attribute (line 575):
        # Getting the type of 'None' (line 575)
        None_258854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 22), 'None')
        # Getting the type of 'self' (line 575)
        self_258855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 8), 'self')
        # Setting the type of the member 'window' of a type (line 575)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 8), self_258855, 'window', None_258854)
        
        # ################# End of 'destroy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'destroy' in the type store
        # Getting the type of 'stypy_return_type' (line 566)
        stypy_return_type_258856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258856)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'destroy'
        return stypy_return_type_258856


    @norecursion
    def get_window_title(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_window_title'
        module_type_store = module_type_store.open_function_context('get_window_title', 577, 4, False)
        # Assigning a type to the variable 'self' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerTkAgg.get_window_title.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerTkAgg.get_window_title.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerTkAgg.get_window_title.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerTkAgg.get_window_title.__dict__.__setitem__('stypy_function_name', 'FigureManagerTkAgg.get_window_title')
        FigureManagerTkAgg.get_window_title.__dict__.__setitem__('stypy_param_names_list', [])
        FigureManagerTkAgg.get_window_title.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerTkAgg.get_window_title.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerTkAgg.get_window_title.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerTkAgg.get_window_title.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerTkAgg.get_window_title.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerTkAgg.get_window_title.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerTkAgg.get_window_title', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_title', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_title(...)' code ##################

        
        # Call to wm_title(...): (line 578)
        # Processing the call keyword arguments (line 578)
        kwargs_258860 = {}
        # Getting the type of 'self' (line 578)
        self_258857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 15), 'self', False)
        # Obtaining the member 'window' of a type (line 578)
        window_258858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 15), self_258857, 'window')
        # Obtaining the member 'wm_title' of a type (line 578)
        wm_title_258859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 15), window_258858, 'wm_title')
        # Calling wm_title(args, kwargs) (line 578)
        wm_title_call_result_258861 = invoke(stypy.reporting.localization.Localization(__file__, 578, 15), wm_title_258859, *[], **kwargs_258860)
        
        # Assigning a type to the variable 'stypy_return_type' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'stypy_return_type', wm_title_call_result_258861)
        
        # ################# End of 'get_window_title(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_title' in the type store
        # Getting the type of 'stypy_return_type' (line 577)
        stypy_return_type_258862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258862)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_title'
        return stypy_return_type_258862


    @norecursion
    def set_window_title(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_window_title'
        module_type_store = module_type_store.open_function_context('set_window_title', 580, 4, False)
        # Assigning a type to the variable 'self' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerTkAgg.set_window_title.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerTkAgg.set_window_title.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerTkAgg.set_window_title.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerTkAgg.set_window_title.__dict__.__setitem__('stypy_function_name', 'FigureManagerTkAgg.set_window_title')
        FigureManagerTkAgg.set_window_title.__dict__.__setitem__('stypy_param_names_list', ['title'])
        FigureManagerTkAgg.set_window_title.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerTkAgg.set_window_title.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerTkAgg.set_window_title.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerTkAgg.set_window_title.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerTkAgg.set_window_title.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerTkAgg.set_window_title.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerTkAgg.set_window_title', ['title'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_window_title', localization, ['title'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_window_title(...)' code ##################

        
        # Call to wm_title(...): (line 581)
        # Processing the call arguments (line 581)
        # Getting the type of 'title' (line 581)
        title_258866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 29), 'title', False)
        # Processing the call keyword arguments (line 581)
        kwargs_258867 = {}
        # Getting the type of 'self' (line 581)
        self_258863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 8), 'self', False)
        # Obtaining the member 'window' of a type (line 581)
        window_258864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 8), self_258863, 'window')
        # Obtaining the member 'wm_title' of a type (line 581)
        wm_title_258865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 8), window_258864, 'wm_title')
        # Calling wm_title(args, kwargs) (line 581)
        wm_title_call_result_258868 = invoke(stypy.reporting.localization.Localization(__file__, 581, 8), wm_title_258865, *[title_258866], **kwargs_258867)
        
        
        # ################# End of 'set_window_title(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_window_title' in the type store
        # Getting the type of 'stypy_return_type' (line 580)
        stypy_return_type_258869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258869)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_window_title'
        return stypy_return_type_258869


    @norecursion
    def full_screen_toggle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'full_screen_toggle'
        module_type_store = module_type_store.open_function_context('full_screen_toggle', 583, 4, False)
        # Assigning a type to the variable 'self' (line 584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerTkAgg.full_screen_toggle.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerTkAgg.full_screen_toggle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerTkAgg.full_screen_toggle.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerTkAgg.full_screen_toggle.__dict__.__setitem__('stypy_function_name', 'FigureManagerTkAgg.full_screen_toggle')
        FigureManagerTkAgg.full_screen_toggle.__dict__.__setitem__('stypy_param_names_list', [])
        FigureManagerTkAgg.full_screen_toggle.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerTkAgg.full_screen_toggle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerTkAgg.full_screen_toggle.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerTkAgg.full_screen_toggle.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerTkAgg.full_screen_toggle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerTkAgg.full_screen_toggle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerTkAgg.full_screen_toggle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'full_screen_toggle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'full_screen_toggle(...)' code ##################

        
        # Assigning a Call to a Name (line 584):
        
        # Assigning a Call to a Name (line 584):
        
        # Call to bool(...): (line 584)
        # Processing the call arguments (line 584)
        
        # Call to attributes(...): (line 584)
        # Processing the call arguments (line 584)
        unicode_258874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 52), 'unicode', u'-fullscreen')
        # Processing the call keyword arguments (line 584)
        kwargs_258875 = {}
        # Getting the type of 'self' (line 584)
        self_258871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 29), 'self', False)
        # Obtaining the member 'window' of a type (line 584)
        window_258872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 29), self_258871, 'window')
        # Obtaining the member 'attributes' of a type (line 584)
        attributes_258873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 29), window_258872, 'attributes')
        # Calling attributes(args, kwargs) (line 584)
        attributes_call_result_258876 = invoke(stypy.reporting.localization.Localization(__file__, 584, 29), attributes_258873, *[unicode_258874], **kwargs_258875)
        
        # Processing the call keyword arguments (line 584)
        kwargs_258877 = {}
        # Getting the type of 'bool' (line 584)
        bool_258870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 24), 'bool', False)
        # Calling bool(args, kwargs) (line 584)
        bool_call_result_258878 = invoke(stypy.reporting.localization.Localization(__file__, 584, 24), bool_258870, *[attributes_call_result_258876], **kwargs_258877)
        
        # Assigning a type to the variable 'is_fullscreen' (line 584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 8), 'is_fullscreen', bool_call_result_258878)
        
        # Call to attributes(...): (line 585)
        # Processing the call arguments (line 585)
        unicode_258882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 31), 'unicode', u'-fullscreen')
        
        # Getting the type of 'is_fullscreen' (line 585)
        is_fullscreen_258883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 50), 'is_fullscreen', False)
        # Applying the 'not' unary operator (line 585)
        result_not__258884 = python_operator(stypy.reporting.localization.Localization(__file__, 585, 46), 'not', is_fullscreen_258883)
        
        # Processing the call keyword arguments (line 585)
        kwargs_258885 = {}
        # Getting the type of 'self' (line 585)
        self_258879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 8), 'self', False)
        # Obtaining the member 'window' of a type (line 585)
        window_258880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 8), self_258879, 'window')
        # Obtaining the member 'attributes' of a type (line 585)
        attributes_258881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 8), window_258880, 'attributes')
        # Calling attributes(args, kwargs) (line 585)
        attributes_call_result_258886 = invoke(stypy.reporting.localization.Localization(__file__, 585, 8), attributes_258881, *[unicode_258882, result_not__258884], **kwargs_258885)
        
        
        # ################# End of 'full_screen_toggle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'full_screen_toggle' in the type store
        # Getting the type of 'stypy_return_type' (line 583)
        stypy_return_type_258887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_258887)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'full_screen_toggle'
        return stypy_return_type_258887


# Assigning a type to the variable 'FigureManagerTkAgg' (line 468)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 0), 'FigureManagerTkAgg', FigureManagerTkAgg)
# Declaration of the 'AxisMenu' class

class AxisMenu(object, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 589, 4, False)
        # Assigning a type to the variable 'self' (line 590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxisMenu.__init__', ['master', 'naxes'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['master', 'naxes'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 590):
        
        # Assigning a Name to a Attribute (line 590):
        # Getting the type of 'master' (line 590)
        master_258888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 23), 'master')
        # Getting the type of 'self' (line 590)
        self_258889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 8), 'self')
        # Setting the type of the member '_master' of a type (line 590)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 8), self_258889, '_master', master_258888)
        
        # Assigning a Name to a Attribute (line 591):
        
        # Assigning a Name to a Attribute (line 591):
        # Getting the type of 'naxes' (line 591)
        naxes_258890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 22), 'naxes')
        # Getting the type of 'self' (line 591)
        self_258891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 8), 'self')
        # Setting the type of the member '_naxes' of a type (line 591)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 8), self_258891, '_naxes', naxes_258890)
        
        # Assigning a Call to a Attribute (line 592):
        
        # Assigning a Call to a Attribute (line 592):
        
        # Call to Frame(...): (line 592)
        # Processing the call keyword arguments (line 592)
        # Getting the type of 'master' (line 592)
        master_258894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 37), 'master', False)
        keyword_258895 = master_258894
        # Getting the type of 'Tk' (line 592)
        Tk_258896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 52), 'Tk', False)
        # Obtaining the member 'RAISED' of a type (line 592)
        RAISED_258897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 52), Tk_258896, 'RAISED')
        keyword_258898 = RAISED_258897
        int_258899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 75), 'int')
        keyword_258900 = int_258899
        kwargs_258901 = {'master': keyword_258895, 'relief': keyword_258898, 'borderwidth': keyword_258900}
        # Getting the type of 'Tk' (line 592)
        Tk_258892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 21), 'Tk', False)
        # Obtaining the member 'Frame' of a type (line 592)
        Frame_258893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 21), Tk_258892, 'Frame')
        # Calling Frame(args, kwargs) (line 592)
        Frame_call_result_258902 = invoke(stypy.reporting.localization.Localization(__file__, 592, 21), Frame_258893, *[], **kwargs_258901)
        
        # Getting the type of 'self' (line 592)
        self_258903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 8), 'self')
        # Setting the type of the member '_mbar' of a type (line 592)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 8), self_258903, '_mbar', Frame_call_result_258902)
        
        # Call to pack(...): (line 593)
        # Processing the call keyword arguments (line 593)
        # Getting the type of 'Tk' (line 593)
        Tk_258907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 29), 'Tk', False)
        # Obtaining the member 'LEFT' of a type (line 593)
        LEFT_258908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 29), Tk_258907, 'LEFT')
        keyword_258909 = LEFT_258908
        kwargs_258910 = {'side': keyword_258909}
        # Getting the type of 'self' (line 593)
        self_258904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 8), 'self', False)
        # Obtaining the member '_mbar' of a type (line 593)
        _mbar_258905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 8), self_258904, '_mbar')
        # Obtaining the member 'pack' of a type (line 593)
        pack_258906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 8), _mbar_258905, 'pack')
        # Calling pack(args, kwargs) (line 593)
        pack_call_result_258911 = invoke(stypy.reporting.localization.Localization(__file__, 593, 8), pack_258906, *[], **kwargs_258910)
        
        
        # Assigning a Call to a Attribute (line 594):
        
        # Assigning a Call to a Attribute (line 594):
        
        # Call to Menubutton(...): (line 594)
        # Processing the call keyword arguments (line 594)
        # Getting the type of 'self' (line 595)
        self_258914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 19), 'self', False)
        # Obtaining the member '_mbar' of a type (line 595)
        _mbar_258915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 19), self_258914, '_mbar')
        keyword_258916 = _mbar_258915
        unicode_258917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 36), 'unicode', u'Axes')
        keyword_258918 = unicode_258917
        int_258919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 54), 'int')
        keyword_258920 = int_258919
        kwargs_258921 = {'text': keyword_258918, 'master': keyword_258916, 'underline': keyword_258920}
        # Getting the type of 'Tk' (line 594)
        Tk_258912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 24), 'Tk', False)
        # Obtaining the member 'Menubutton' of a type (line 594)
        Menubutton_258913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 24), Tk_258912, 'Menubutton')
        # Calling Menubutton(args, kwargs) (line 594)
        Menubutton_call_result_258922 = invoke(stypy.reporting.localization.Localization(__file__, 594, 24), Menubutton_258913, *[], **kwargs_258921)
        
        # Getting the type of 'self' (line 594)
        self_258923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 8), 'self')
        # Setting the type of the member '_mbutton' of a type (line 594)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 8), self_258923, '_mbutton', Menubutton_call_result_258922)
        
        # Call to pack(...): (line 596)
        # Processing the call keyword arguments (line 596)
        # Getting the type of 'Tk' (line 596)
        Tk_258927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 32), 'Tk', False)
        # Obtaining the member 'LEFT' of a type (line 596)
        LEFT_258928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 32), Tk_258927, 'LEFT')
        keyword_258929 = LEFT_258928
        unicode_258930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 46), 'unicode', u'2m')
        keyword_258931 = unicode_258930
        kwargs_258932 = {'padx': keyword_258931, 'side': keyword_258929}
        # Getting the type of 'self' (line 596)
        self_258924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 8), 'self', False)
        # Obtaining the member '_mbutton' of a type (line 596)
        _mbutton_258925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 8), self_258924, '_mbutton')
        # Obtaining the member 'pack' of a type (line 596)
        pack_258926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 8), _mbutton_258925, 'pack')
        # Calling pack(args, kwargs) (line 596)
        pack_call_result_258933 = invoke(stypy.reporting.localization.Localization(__file__, 596, 8), pack_258926, *[], **kwargs_258932)
        
        
        # Assigning a Call to a Attribute (line 597):
        
        # Assigning a Call to a Attribute (line 597):
        
        # Call to Menu(...): (line 597)
        # Processing the call arguments (line 597)
        # Getting the type of 'self' (line 597)
        self_258936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 37), 'self', False)
        # Obtaining the member '_mbutton' of a type (line 597)
        _mbutton_258937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 37), self_258936, '_mbutton')
        # Processing the call keyword arguments (line 597)
        kwargs_258938 = {}
        # Getting the type of 'Tk' (line 597)
        Tk_258934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 29), 'Tk', False)
        # Obtaining the member 'Menu' of a type (line 597)
        Menu_258935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 29), Tk_258934, 'Menu')
        # Calling Menu(args, kwargs) (line 597)
        Menu_call_result_258939 = invoke(stypy.reporting.localization.Localization(__file__, 597, 29), Menu_258935, *[_mbutton_258937], **kwargs_258938)
        
        # Getting the type of 'self' (line 597)
        self_258940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 8), 'self')
        # Obtaining the member '_mbutton' of a type (line 597)
        _mbutton_258941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 8), self_258940, '_mbutton')
        # Setting the type of the member 'menu' of a type (line 597)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 8), _mbutton_258941, 'menu', Menu_call_result_258939)
        
        # Call to add_command(...): (line 598)
        # Processing the call keyword arguments (line 598)
        unicode_258946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 18), 'unicode', u'Select All')
        keyword_258947 = unicode_258946
        # Getting the type of 'self' (line 599)
        self_258948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 40), 'self', False)
        # Obtaining the member 'select_all' of a type (line 599)
        select_all_258949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 40), self_258948, 'select_all')
        keyword_258950 = select_all_258949
        kwargs_258951 = {'command': keyword_258950, 'label': keyword_258947}
        # Getting the type of 'self' (line 598)
        self_258942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'self', False)
        # Obtaining the member '_mbutton' of a type (line 598)
        _mbutton_258943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 8), self_258942, '_mbutton')
        # Obtaining the member 'menu' of a type (line 598)
        menu_258944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 8), _mbutton_258943, 'menu')
        # Obtaining the member 'add_command' of a type (line 598)
        add_command_258945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 8), menu_258944, 'add_command')
        # Calling add_command(args, kwargs) (line 598)
        add_command_call_result_258952 = invoke(stypy.reporting.localization.Localization(__file__, 598, 8), add_command_258945, *[], **kwargs_258951)
        
        
        # Call to add_command(...): (line 600)
        # Processing the call keyword arguments (line 600)
        unicode_258957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 18), 'unicode', u'Invert All')
        keyword_258958 = unicode_258957
        # Getting the type of 'self' (line 601)
        self_258959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 40), 'self', False)
        # Obtaining the member 'invert_all' of a type (line 601)
        invert_all_258960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 40), self_258959, 'invert_all')
        keyword_258961 = invert_all_258960
        kwargs_258962 = {'command': keyword_258961, 'label': keyword_258958}
        # Getting the type of 'self' (line 600)
        self_258953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'self', False)
        # Obtaining the member '_mbutton' of a type (line 600)
        _mbutton_258954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 8), self_258953, '_mbutton')
        # Obtaining the member 'menu' of a type (line 600)
        menu_258955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 8), _mbutton_258954, 'menu')
        # Obtaining the member 'add_command' of a type (line 600)
        add_command_258956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 8), menu_258955, 'add_command')
        # Calling add_command(args, kwargs) (line 600)
        add_command_call_result_258963 = invoke(stypy.reporting.localization.Localization(__file__, 600, 8), add_command_258956, *[], **kwargs_258962)
        
        
        # Assigning a List to a Attribute (line 602):
        
        # Assigning a List to a Attribute (line 602):
        
        # Obtaining an instance of the builtin type 'list' (line 602)
        list_258964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 602)
        
        # Getting the type of 'self' (line 602)
        self_258965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 8), 'self')
        # Setting the type of the member '_axis_var' of a type (line 602)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 8), self_258965, '_axis_var', list_258964)
        
        # Assigning a List to a Attribute (line 603):
        
        # Assigning a List to a Attribute (line 603):
        
        # Obtaining an instance of the builtin type 'list' (line 603)
        list_258966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 603)
        
        # Getting the type of 'self' (line 603)
        self_258967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 8), 'self')
        # Setting the type of the member '_checkbutton' of a type (line 603)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 8), self_258967, '_checkbutton', list_258966)
        
        
        # Call to range(...): (line 604)
        # Processing the call arguments (line 604)
        # Getting the type of 'naxes' (line 604)
        naxes_258969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 23), 'naxes', False)
        # Processing the call keyword arguments (line 604)
        kwargs_258970 = {}
        # Getting the type of 'range' (line 604)
        range_258968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 17), 'range', False)
        # Calling range(args, kwargs) (line 604)
        range_call_result_258971 = invoke(stypy.reporting.localization.Localization(__file__, 604, 17), range_258968, *[naxes_258969], **kwargs_258970)
        
        # Testing the type of a for loop iterable (line 604)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 604, 8), range_call_result_258971)
        # Getting the type of the for loop variable (line 604)
        for_loop_var_258972 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 604, 8), range_call_result_258971)
        # Assigning a type to the variable 'i' (line 604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 8), 'i', for_loop_var_258972)
        # SSA begins for a for statement (line 604)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 605)
        # Processing the call arguments (line 605)
        
        # Call to IntVar(...): (line 605)
        # Processing the call keyword arguments (line 605)
        kwargs_258978 = {}
        # Getting the type of 'Tk' (line 605)
        Tk_258976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 34), 'Tk', False)
        # Obtaining the member 'IntVar' of a type (line 605)
        IntVar_258977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 34), Tk_258976, 'IntVar')
        # Calling IntVar(args, kwargs) (line 605)
        IntVar_call_result_258979 = invoke(stypy.reporting.localization.Localization(__file__, 605, 34), IntVar_258977, *[], **kwargs_258978)
        
        # Processing the call keyword arguments (line 605)
        kwargs_258980 = {}
        # Getting the type of 'self' (line 605)
        self_258973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 12), 'self', False)
        # Obtaining the member '_axis_var' of a type (line 605)
        _axis_var_258974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 12), self_258973, '_axis_var')
        # Obtaining the member 'append' of a type (line 605)
        append_258975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 12), _axis_var_258974, 'append')
        # Calling append(args, kwargs) (line 605)
        append_call_result_258981 = invoke(stypy.reporting.localization.Localization(__file__, 605, 12), append_258975, *[IntVar_call_result_258979], **kwargs_258980)
        
        
        # Call to set(...): (line 606)
        # Processing the call arguments (line 606)
        int_258988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 34), 'int')
        # Processing the call keyword arguments (line 606)
        kwargs_258989 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 606)
        i_258982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 27), 'i', False)
        # Getting the type of 'self' (line 606)
        self_258983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'self', False)
        # Obtaining the member '_axis_var' of a type (line 606)
        _axis_var_258984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 12), self_258983, '_axis_var')
        # Obtaining the member '__getitem__' of a type (line 606)
        getitem___258985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 12), _axis_var_258984, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 606)
        subscript_call_result_258986 = invoke(stypy.reporting.localization.Localization(__file__, 606, 12), getitem___258985, i_258982)
        
        # Obtaining the member 'set' of a type (line 606)
        set_258987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 12), subscript_call_result_258986, 'set')
        # Calling set(args, kwargs) (line 606)
        set_call_result_258990 = invoke(stypy.reporting.localization.Localization(__file__, 606, 12), set_258987, *[int_258988], **kwargs_258989)
        
        
        # Call to append(...): (line 607)
        # Processing the call arguments (line 607)
        
        # Call to add_checkbutton(...): (line 607)
        # Processing the call keyword arguments (line 607)
        unicode_258998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 608, 24), 'unicode', u'Axis %d')
        # Getting the type of 'i' (line 608)
        i_258999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 37), 'i', False)
        int_259000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 608, 39), 'int')
        # Applying the binary operator '+' (line 608)
        result_add_259001 = python_operator(stypy.reporting.localization.Localization(__file__, 608, 37), '+', i_258999, int_259000)
        
        # Applying the binary operator '%' (line 608)
        result_mod_259002 = python_operator(stypy.reporting.localization.Localization(__file__, 608, 24), '%', unicode_258998, result_add_259001)
        
        keyword_259003 = result_mod_259002
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 609)
        i_259004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 40), 'i', False)
        # Getting the type of 'self' (line 609)
        self_259005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 25), 'self', False)
        # Obtaining the member '_axis_var' of a type (line 609)
        _axis_var_259006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 25), self_259005, '_axis_var')
        # Obtaining the member '__getitem__' of a type (line 609)
        getitem___259007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 25), _axis_var_259006, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 609)
        subscript_call_result_259008 = invoke(stypy.reporting.localization.Localization(__file__, 609, 25), getitem___259007, i_259004)
        
        keyword_259009 = subscript_call_result_259008
        # Getting the type of 'self' (line 610)
        self_259010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 24), 'self', False)
        # Obtaining the member 'set_active' of a type (line 610)
        set_active_259011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 24), self_259010, 'set_active')
        keyword_259012 = set_active_259011
        kwargs_259013 = {'variable': keyword_259009, 'command': keyword_259012, 'label': keyword_259003}
        # Getting the type of 'self' (line 607)
        self_258994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 37), 'self', False)
        # Obtaining the member '_mbutton' of a type (line 607)
        _mbutton_258995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 37), self_258994, '_mbutton')
        # Obtaining the member 'menu' of a type (line 607)
        menu_258996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 37), _mbutton_258995, 'menu')
        # Obtaining the member 'add_checkbutton' of a type (line 607)
        add_checkbutton_258997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 37), menu_258996, 'add_checkbutton')
        # Calling add_checkbutton(args, kwargs) (line 607)
        add_checkbutton_call_result_259014 = invoke(stypy.reporting.localization.Localization(__file__, 607, 37), add_checkbutton_258997, *[], **kwargs_259013)
        
        # Processing the call keyword arguments (line 607)
        kwargs_259015 = {}
        # Getting the type of 'self' (line 607)
        self_258991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 12), 'self', False)
        # Obtaining the member '_checkbutton' of a type (line 607)
        _checkbutton_258992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 12), self_258991, '_checkbutton')
        # Obtaining the member 'append' of a type (line 607)
        append_258993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 12), _checkbutton_258992, 'append')
        # Calling append(args, kwargs) (line 607)
        append_call_result_259016 = invoke(stypy.reporting.localization.Localization(__file__, 607, 12), append_258993, *[add_checkbutton_call_result_259014], **kwargs_259015)
        
        
        # Call to invoke(...): (line 611)
        # Processing the call arguments (line 611)
        
        # Call to index(...): (line 611)
        # Processing the call arguments (line 611)
        unicode_259025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 63), 'unicode', u'Select All')
        # Processing the call keyword arguments (line 611)
        kwargs_259026 = {}
        # Getting the type of 'self' (line 611)
        self_259021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 38), 'self', False)
        # Obtaining the member '_mbutton' of a type (line 611)
        _mbutton_259022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 38), self_259021, '_mbutton')
        # Obtaining the member 'menu' of a type (line 611)
        menu_259023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 38), _mbutton_259022, 'menu')
        # Obtaining the member 'index' of a type (line 611)
        index_259024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 38), menu_259023, 'index')
        # Calling index(args, kwargs) (line 611)
        index_call_result_259027 = invoke(stypy.reporting.localization.Localization(__file__, 611, 38), index_259024, *[unicode_259025], **kwargs_259026)
        
        # Processing the call keyword arguments (line 611)
        kwargs_259028 = {}
        # Getting the type of 'self' (line 611)
        self_259017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 12), 'self', False)
        # Obtaining the member '_mbutton' of a type (line 611)
        _mbutton_259018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 12), self_259017, '_mbutton')
        # Obtaining the member 'menu' of a type (line 611)
        menu_259019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 12), _mbutton_259018, 'menu')
        # Obtaining the member 'invoke' of a type (line 611)
        invoke_259020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 12), menu_259019, 'invoke')
        # Calling invoke(args, kwargs) (line 611)
        invoke_call_result_259029 = invoke(stypy.reporting.localization.Localization(__file__, 611, 12), invoke_259020, *[index_call_result_259027], **kwargs_259028)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Subscript (line 612):
        
        # Assigning a Attribute to a Subscript (line 612):
        # Getting the type of 'self' (line 612)
        self_259030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 32), 'self')
        # Obtaining the member '_mbutton' of a type (line 612)
        _mbutton_259031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 32), self_259030, '_mbutton')
        # Obtaining the member 'menu' of a type (line 612)
        menu_259032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 32), _mbutton_259031, 'menu')
        # Getting the type of 'self' (line 612)
        self_259033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'self')
        # Obtaining the member '_mbutton' of a type (line 612)
        _mbutton_259034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 8), self_259033, '_mbutton')
        unicode_259035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 22), 'unicode', u'menu')
        # Storing an element on a container (line 612)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 612, 8), _mbutton_259034, (unicode_259035, menu_259032))
        
        # Call to tk_menuBar(...): (line 613)
        # Processing the call arguments (line 613)
        # Getting the type of 'self' (line 613)
        self_259039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 30), 'self', False)
        # Obtaining the member '_mbutton' of a type (line 613)
        _mbutton_259040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 30), self_259039, '_mbutton')
        # Processing the call keyword arguments (line 613)
        kwargs_259041 = {}
        # Getting the type of 'self' (line 613)
        self_259036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 8), 'self', False)
        # Obtaining the member '_mbar' of a type (line 613)
        _mbar_259037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 8), self_259036, '_mbar')
        # Obtaining the member 'tk_menuBar' of a type (line 613)
        tk_menuBar_259038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 8), _mbar_259037, 'tk_menuBar')
        # Calling tk_menuBar(args, kwargs) (line 613)
        tk_menuBar_call_result_259042 = invoke(stypy.reporting.localization.Localization(__file__, 613, 8), tk_menuBar_259038, *[_mbutton_259040], **kwargs_259041)
        
        
        # Call to set_active(...): (line 614)
        # Processing the call keyword arguments (line 614)
        kwargs_259045 = {}
        # Getting the type of 'self' (line 614)
        self_259043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 8), 'self', False)
        # Obtaining the member 'set_active' of a type (line 614)
        set_active_259044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 8), self_259043, 'set_active')
        # Calling set_active(args, kwargs) (line 614)
        set_active_call_result_259046 = invoke(stypy.reporting.localization.Localization(__file__, 614, 8), set_active_259044, *[], **kwargs_259045)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def adjust(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'adjust'
        module_type_store = module_type_store.open_function_context('adjust', 616, 4, False)
        # Assigning a type to the variable 'self' (line 617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxisMenu.adjust.__dict__.__setitem__('stypy_localization', localization)
        AxisMenu.adjust.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxisMenu.adjust.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxisMenu.adjust.__dict__.__setitem__('stypy_function_name', 'AxisMenu.adjust')
        AxisMenu.adjust.__dict__.__setitem__('stypy_param_names_list', ['naxes'])
        AxisMenu.adjust.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxisMenu.adjust.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxisMenu.adjust.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxisMenu.adjust.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxisMenu.adjust.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxisMenu.adjust.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxisMenu.adjust', ['naxes'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'adjust', localization, ['naxes'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'adjust(...)' code ##################

        
        
        # Getting the type of 'self' (line 617)
        self_259047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 11), 'self')
        # Obtaining the member '_naxes' of a type (line 617)
        _naxes_259048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 11), self_259047, '_naxes')
        # Getting the type of 'naxes' (line 617)
        naxes_259049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 25), 'naxes')
        # Applying the binary operator '<' (line 617)
        result_lt_259050 = python_operator(stypy.reporting.localization.Localization(__file__, 617, 11), '<', _naxes_259048, naxes_259049)
        
        # Testing the type of an if condition (line 617)
        if_condition_259051 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 617, 8), result_lt_259050)
        # Assigning a type to the variable 'if_condition_259051' (line 617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'if_condition_259051', if_condition_259051)
        # SSA begins for if statement (line 617)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to range(...): (line 618)
        # Processing the call arguments (line 618)
        # Getting the type of 'self' (line 618)
        self_259053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 27), 'self', False)
        # Obtaining the member '_naxes' of a type (line 618)
        _naxes_259054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 27), self_259053, '_naxes')
        # Getting the type of 'naxes' (line 618)
        naxes_259055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 40), 'naxes', False)
        # Processing the call keyword arguments (line 618)
        kwargs_259056 = {}
        # Getting the type of 'range' (line 618)
        range_259052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 21), 'range', False)
        # Calling range(args, kwargs) (line 618)
        range_call_result_259057 = invoke(stypy.reporting.localization.Localization(__file__, 618, 21), range_259052, *[_naxes_259054, naxes_259055], **kwargs_259056)
        
        # Testing the type of a for loop iterable (line 618)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 618, 12), range_call_result_259057)
        # Getting the type of the for loop variable (line 618)
        for_loop_var_259058 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 618, 12), range_call_result_259057)
        # Assigning a type to the variable 'i' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 12), 'i', for_loop_var_259058)
        # SSA begins for a for statement (line 618)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 619)
        # Processing the call arguments (line 619)
        
        # Call to IntVar(...): (line 619)
        # Processing the call keyword arguments (line 619)
        kwargs_259064 = {}
        # Getting the type of 'Tk' (line 619)
        Tk_259062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 38), 'Tk', False)
        # Obtaining the member 'IntVar' of a type (line 619)
        IntVar_259063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 38), Tk_259062, 'IntVar')
        # Calling IntVar(args, kwargs) (line 619)
        IntVar_call_result_259065 = invoke(stypy.reporting.localization.Localization(__file__, 619, 38), IntVar_259063, *[], **kwargs_259064)
        
        # Processing the call keyword arguments (line 619)
        kwargs_259066 = {}
        # Getting the type of 'self' (line 619)
        self_259059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 16), 'self', False)
        # Obtaining the member '_axis_var' of a type (line 619)
        _axis_var_259060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 16), self_259059, '_axis_var')
        # Obtaining the member 'append' of a type (line 619)
        append_259061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 16), _axis_var_259060, 'append')
        # Calling append(args, kwargs) (line 619)
        append_call_result_259067 = invoke(stypy.reporting.localization.Localization(__file__, 619, 16), append_259061, *[IntVar_call_result_259065], **kwargs_259066)
        
        
        # Call to set(...): (line 620)
        # Processing the call arguments (line 620)
        int_259074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 38), 'int')
        # Processing the call keyword arguments (line 620)
        kwargs_259075 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 620)
        i_259068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 31), 'i', False)
        # Getting the type of 'self' (line 620)
        self_259069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 16), 'self', False)
        # Obtaining the member '_axis_var' of a type (line 620)
        _axis_var_259070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 16), self_259069, '_axis_var')
        # Obtaining the member '__getitem__' of a type (line 620)
        getitem___259071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 16), _axis_var_259070, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 620)
        subscript_call_result_259072 = invoke(stypy.reporting.localization.Localization(__file__, 620, 16), getitem___259071, i_259068)
        
        # Obtaining the member 'set' of a type (line 620)
        set_259073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 16), subscript_call_result_259072, 'set')
        # Calling set(args, kwargs) (line 620)
        set_call_result_259076 = invoke(stypy.reporting.localization.Localization(__file__, 620, 16), set_259073, *[int_259074], **kwargs_259075)
        
        
        # Call to append(...): (line 621)
        # Processing the call arguments (line 621)
        
        # Call to add_checkbutton(...): (line 621)
        # Processing the call keyword arguments (line 621)
        unicode_259084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 28), 'unicode', u'Axis %d')
        # Getting the type of 'i' (line 622)
        i_259085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 41), 'i', False)
        int_259086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 43), 'int')
        # Applying the binary operator '+' (line 622)
        result_add_259087 = python_operator(stypy.reporting.localization.Localization(__file__, 622, 41), '+', i_259085, int_259086)
        
        # Applying the binary operator '%' (line 622)
        result_mod_259088 = python_operator(stypy.reporting.localization.Localization(__file__, 622, 28), '%', unicode_259084, result_add_259087)
        
        keyword_259089 = result_mod_259088
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 623)
        i_259090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 44), 'i', False)
        # Getting the type of 'self' (line 623)
        self_259091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 29), 'self', False)
        # Obtaining the member '_axis_var' of a type (line 623)
        _axis_var_259092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 29), self_259091, '_axis_var')
        # Obtaining the member '__getitem__' of a type (line 623)
        getitem___259093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 29), _axis_var_259092, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 623)
        subscript_call_result_259094 = invoke(stypy.reporting.localization.Localization(__file__, 623, 29), getitem___259093, i_259090)
        
        keyword_259095 = subscript_call_result_259094
        # Getting the type of 'self' (line 624)
        self_259096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 28), 'self', False)
        # Obtaining the member 'set_active' of a type (line 624)
        set_active_259097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 28), self_259096, 'set_active')
        keyword_259098 = set_active_259097
        kwargs_259099 = {'variable': keyword_259095, 'command': keyword_259098, 'label': keyword_259089}
        # Getting the type of 'self' (line 621)
        self_259080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 42), 'self', False)
        # Obtaining the member '_mbutton' of a type (line 621)
        _mbutton_259081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 42), self_259080, '_mbutton')
        # Obtaining the member 'menu' of a type (line 621)
        menu_259082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 42), _mbutton_259081, 'menu')
        # Obtaining the member 'add_checkbutton' of a type (line 621)
        add_checkbutton_259083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 42), menu_259082, 'add_checkbutton')
        # Calling add_checkbutton(args, kwargs) (line 621)
        add_checkbutton_call_result_259100 = invoke(stypy.reporting.localization.Localization(__file__, 621, 42), add_checkbutton_259083, *[], **kwargs_259099)
        
        # Processing the call keyword arguments (line 621)
        kwargs_259101 = {}
        # Getting the type of 'self' (line 621)
        self_259077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 16), 'self', False)
        # Obtaining the member '_checkbutton' of a type (line 621)
        _checkbutton_259078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 16), self_259077, '_checkbutton')
        # Obtaining the member 'append' of a type (line 621)
        append_259079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 16), _checkbutton_259078, 'append')
        # Calling append(args, kwargs) (line 621)
        append_call_result_259102 = invoke(stypy.reporting.localization.Localization(__file__, 621, 16), append_259079, *[add_checkbutton_call_result_259100], **kwargs_259101)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 617)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 625)
        self_259103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 13), 'self')
        # Obtaining the member '_naxes' of a type (line 625)
        _naxes_259104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 13), self_259103, '_naxes')
        # Getting the type of 'naxes' (line 625)
        naxes_259105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 27), 'naxes')
        # Applying the binary operator '>' (line 625)
        result_gt_259106 = python_operator(stypy.reporting.localization.Localization(__file__, 625, 13), '>', _naxes_259104, naxes_259105)
        
        # Testing the type of an if condition (line 625)
        if_condition_259107 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 625, 13), result_gt_259106)
        # Assigning a type to the variable 'if_condition_259107' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 13), 'if_condition_259107', if_condition_259107)
        # SSA begins for if statement (line 625)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to range(...): (line 626)
        # Processing the call arguments (line 626)
        # Getting the type of 'self' (line 626)
        self_259109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 27), 'self', False)
        # Obtaining the member '_naxes' of a type (line 626)
        _naxes_259110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 27), self_259109, '_naxes')
        int_259111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 39), 'int')
        # Applying the binary operator '-' (line 626)
        result_sub_259112 = python_operator(stypy.reporting.localization.Localization(__file__, 626, 27), '-', _naxes_259110, int_259111)
        
        # Getting the type of 'naxes' (line 626)
        naxes_259113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 42), 'naxes', False)
        int_259114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 48), 'int')
        # Applying the binary operator '-' (line 626)
        result_sub_259115 = python_operator(stypy.reporting.localization.Localization(__file__, 626, 42), '-', naxes_259113, int_259114)
        
        int_259116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 51), 'int')
        # Processing the call keyword arguments (line 626)
        kwargs_259117 = {}
        # Getting the type of 'range' (line 626)
        range_259108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 21), 'range', False)
        # Calling range(args, kwargs) (line 626)
        range_call_result_259118 = invoke(stypy.reporting.localization.Localization(__file__, 626, 21), range_259108, *[result_sub_259112, result_sub_259115, int_259116], **kwargs_259117)
        
        # Testing the type of a for loop iterable (line 626)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 626, 12), range_call_result_259118)
        # Getting the type of the for loop variable (line 626)
        for_loop_var_259119 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 626, 12), range_call_result_259118)
        # Assigning a type to the variable 'i' (line 626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 12), 'i', for_loop_var_259119)
        # SSA begins for a for statement (line 626)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        # Deleting a member
        # Getting the type of 'self' (line 627)
        self_259120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 20), 'self')
        # Obtaining the member '_axis_var' of a type (line 627)
        _axis_var_259121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 20), self_259120, '_axis_var')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 627)
        i_259122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 35), 'i')
        # Getting the type of 'self' (line 627)
        self_259123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 20), 'self')
        # Obtaining the member '_axis_var' of a type (line 627)
        _axis_var_259124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 20), self_259123, '_axis_var')
        # Obtaining the member '__getitem__' of a type (line 627)
        getitem___259125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 20), _axis_var_259124, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 627)
        subscript_call_result_259126 = invoke(stypy.reporting.localization.Localization(__file__, 627, 20), getitem___259125, i_259122)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 627, 16), _axis_var_259121, subscript_call_result_259126)
        
        # Call to forget(...): (line 628)
        # Processing the call arguments (line 628)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 628)
        i_259131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 60), 'i', False)
        # Getting the type of 'self' (line 628)
        self_259132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 42), 'self', False)
        # Obtaining the member '_checkbutton' of a type (line 628)
        _checkbutton_259133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 42), self_259132, '_checkbutton')
        # Obtaining the member '__getitem__' of a type (line 628)
        getitem___259134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 42), _checkbutton_259133, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 628)
        subscript_call_result_259135 = invoke(stypy.reporting.localization.Localization(__file__, 628, 42), getitem___259134, i_259131)
        
        # Processing the call keyword arguments (line 628)
        kwargs_259136 = {}
        # Getting the type of 'self' (line 628)
        self_259127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 16), 'self', False)
        # Obtaining the member '_mbutton' of a type (line 628)
        _mbutton_259128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 16), self_259127, '_mbutton')
        # Obtaining the member 'menu' of a type (line 628)
        menu_259129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 16), _mbutton_259128, 'menu')
        # Obtaining the member 'forget' of a type (line 628)
        forget_259130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 16), menu_259129, 'forget')
        # Calling forget(args, kwargs) (line 628)
        forget_call_result_259137 = invoke(stypy.reporting.localization.Localization(__file__, 628, 16), forget_259130, *[subscript_call_result_259135], **kwargs_259136)
        
        # Deleting a member
        # Getting the type of 'self' (line 629)
        self_259138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 20), 'self')
        # Obtaining the member '_checkbutton' of a type (line 629)
        _checkbutton_259139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 20), self_259138, '_checkbutton')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 629)
        i_259140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 38), 'i')
        # Getting the type of 'self' (line 629)
        self_259141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 20), 'self')
        # Obtaining the member '_checkbutton' of a type (line 629)
        _checkbutton_259142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 20), self_259141, '_checkbutton')
        # Obtaining the member '__getitem__' of a type (line 629)
        getitem___259143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 20), _checkbutton_259142, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 629)
        subscript_call_result_259144 = invoke(stypy.reporting.localization.Localization(__file__, 629, 20), getitem___259143, i_259140)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 16), _checkbutton_259139, subscript_call_result_259144)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 625)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 617)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 630):
        
        # Assigning a Name to a Attribute (line 630):
        # Getting the type of 'naxes' (line 630)
        naxes_259145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 22), 'naxes')
        # Getting the type of 'self' (line 630)
        self_259146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 8), 'self')
        # Setting the type of the member '_naxes' of a type (line 630)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 8), self_259146, '_naxes', naxes_259145)
        
        # Call to set_active(...): (line 631)
        # Processing the call keyword arguments (line 631)
        kwargs_259149 = {}
        # Getting the type of 'self' (line 631)
        self_259147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 8), 'self', False)
        # Obtaining the member 'set_active' of a type (line 631)
        set_active_259148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 631, 8), self_259147, 'set_active')
        # Calling set_active(args, kwargs) (line 631)
        set_active_call_result_259150 = invoke(stypy.reporting.localization.Localization(__file__, 631, 8), set_active_259148, *[], **kwargs_259149)
        
        
        # ################# End of 'adjust(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'adjust' in the type store
        # Getting the type of 'stypy_return_type' (line 616)
        stypy_return_type_259151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259151)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'adjust'
        return stypy_return_type_259151


    @norecursion
    def get_indices(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_indices'
        module_type_store = module_type_store.open_function_context('get_indices', 633, 4, False)
        # Assigning a type to the variable 'self' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxisMenu.get_indices.__dict__.__setitem__('stypy_localization', localization)
        AxisMenu.get_indices.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxisMenu.get_indices.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxisMenu.get_indices.__dict__.__setitem__('stypy_function_name', 'AxisMenu.get_indices')
        AxisMenu.get_indices.__dict__.__setitem__('stypy_param_names_list', [])
        AxisMenu.get_indices.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxisMenu.get_indices.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxisMenu.get_indices.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxisMenu.get_indices.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxisMenu.get_indices.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxisMenu.get_indices.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxisMenu.get_indices', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_indices', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_indices(...)' code ##################

        
        # Assigning a ListComp to a Name (line 634):
        
        # Assigning a ListComp to a Name (line 634):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to range(...): (line 634)
        # Processing the call arguments (line 634)
        
        # Call to len(...): (line 634)
        # Processing the call arguments (line 634)
        # Getting the type of 'self' (line 634)
        self_259163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 34), 'self', False)
        # Obtaining the member '_axis_var' of a type (line 634)
        _axis_var_259164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 34), self_259163, '_axis_var')
        # Processing the call keyword arguments (line 634)
        kwargs_259165 = {}
        # Getting the type of 'len' (line 634)
        len_259162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 30), 'len', False)
        # Calling len(args, kwargs) (line 634)
        len_call_result_259166 = invoke(stypy.reporting.localization.Localization(__file__, 634, 30), len_259162, *[_axis_var_259164], **kwargs_259165)
        
        # Processing the call keyword arguments (line 634)
        kwargs_259167 = {}
        # Getting the type of 'range' (line 634)
        range_259161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 24), 'range', False)
        # Calling range(args, kwargs) (line 634)
        range_call_result_259168 = invoke(stypy.reporting.localization.Localization(__file__, 634, 24), range_259161, *[len_call_result_259166], **kwargs_259167)
        
        comprehension_259169 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 634, 13), range_call_result_259168)
        # Assigning a type to the variable 'i' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 13), 'i', comprehension_259169)
        
        # Call to get(...): (line 634)
        # Processing the call keyword arguments (line 634)
        kwargs_259159 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 634)
        i_259153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 69), 'i', False)
        # Getting the type of 'self' (line 634)
        self_259154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 54), 'self', False)
        # Obtaining the member '_axis_var' of a type (line 634)
        _axis_var_259155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 54), self_259154, '_axis_var')
        # Obtaining the member '__getitem__' of a type (line 634)
        getitem___259156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 54), _axis_var_259155, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 634)
        subscript_call_result_259157 = invoke(stypy.reporting.localization.Localization(__file__, 634, 54), getitem___259156, i_259153)
        
        # Obtaining the member 'get' of a type (line 634)
        get_259158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 54), subscript_call_result_259157, 'get')
        # Calling get(args, kwargs) (line 634)
        get_call_result_259160 = invoke(stypy.reporting.localization.Localization(__file__, 634, 54), get_259158, *[], **kwargs_259159)
        
        # Getting the type of 'i' (line 634)
        i_259152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 13), 'i')
        list_259170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 13), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 634, 13), list_259170, i_259152)
        # Assigning a type to the variable 'a' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'a', list_259170)
        # Getting the type of 'a' (line 635)
        a_259171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 15), 'a')
        # Assigning a type to the variable 'stypy_return_type' (line 635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 8), 'stypy_return_type', a_259171)
        
        # ################# End of 'get_indices(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_indices' in the type store
        # Getting the type of 'stypy_return_type' (line 633)
        stypy_return_type_259172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259172)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_indices'
        return stypy_return_type_259172


    @norecursion
    def set_active(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_active'
        module_type_store = module_type_store.open_function_context('set_active', 637, 4, False)
        # Assigning a type to the variable 'self' (line 638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxisMenu.set_active.__dict__.__setitem__('stypy_localization', localization)
        AxisMenu.set_active.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxisMenu.set_active.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxisMenu.set_active.__dict__.__setitem__('stypy_function_name', 'AxisMenu.set_active')
        AxisMenu.set_active.__dict__.__setitem__('stypy_param_names_list', [])
        AxisMenu.set_active.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxisMenu.set_active.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxisMenu.set_active.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxisMenu.set_active.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxisMenu.set_active.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxisMenu.set_active.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxisMenu.set_active', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_active', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_active(...)' code ##################

        
        # Call to set_active(...): (line 638)
        # Processing the call arguments (line 638)
        
        # Call to get_indices(...): (line 638)
        # Processing the call keyword arguments (line 638)
        kwargs_259178 = {}
        # Getting the type of 'self' (line 638)
        self_259176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 32), 'self', False)
        # Obtaining the member 'get_indices' of a type (line 638)
        get_indices_259177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 32), self_259176, 'get_indices')
        # Calling get_indices(args, kwargs) (line 638)
        get_indices_call_result_259179 = invoke(stypy.reporting.localization.Localization(__file__, 638, 32), get_indices_259177, *[], **kwargs_259178)
        
        # Processing the call keyword arguments (line 638)
        kwargs_259180 = {}
        # Getting the type of 'self' (line 638)
        self_259173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'self', False)
        # Obtaining the member '_master' of a type (line 638)
        _master_259174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 8), self_259173, '_master')
        # Obtaining the member 'set_active' of a type (line 638)
        set_active_259175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 8), _master_259174, 'set_active')
        # Calling set_active(args, kwargs) (line 638)
        set_active_call_result_259181 = invoke(stypy.reporting.localization.Localization(__file__, 638, 8), set_active_259175, *[get_indices_call_result_259179], **kwargs_259180)
        
        
        # ################# End of 'set_active(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_active' in the type store
        # Getting the type of 'stypy_return_type' (line 637)
        stypy_return_type_259182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259182)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_active'
        return stypy_return_type_259182


    @norecursion
    def invert_all(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'invert_all'
        module_type_store = module_type_store.open_function_context('invert_all', 640, 4, False)
        # Assigning a type to the variable 'self' (line 641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxisMenu.invert_all.__dict__.__setitem__('stypy_localization', localization)
        AxisMenu.invert_all.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxisMenu.invert_all.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxisMenu.invert_all.__dict__.__setitem__('stypy_function_name', 'AxisMenu.invert_all')
        AxisMenu.invert_all.__dict__.__setitem__('stypy_param_names_list', [])
        AxisMenu.invert_all.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxisMenu.invert_all.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxisMenu.invert_all.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxisMenu.invert_all.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxisMenu.invert_all.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxisMenu.invert_all.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxisMenu.invert_all', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'invert_all', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'invert_all(...)' code ##################

        
        # Getting the type of 'self' (line 641)
        self_259183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 17), 'self')
        # Obtaining the member '_axis_var' of a type (line 641)
        _axis_var_259184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 17), self_259183, '_axis_var')
        # Testing the type of a for loop iterable (line 641)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 641, 8), _axis_var_259184)
        # Getting the type of the for loop variable (line 641)
        for_loop_var_259185 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 641, 8), _axis_var_259184)
        # Assigning a type to the variable 'a' (line 641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 8), 'a', for_loop_var_259185)
        # SSA begins for a for statement (line 641)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set(...): (line 642)
        # Processing the call arguments (line 642)
        
        
        # Call to get(...): (line 642)
        # Processing the call keyword arguments (line 642)
        kwargs_259190 = {}
        # Getting the type of 'a' (line 642)
        a_259188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 22), 'a', False)
        # Obtaining the member 'get' of a type (line 642)
        get_259189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 642, 22), a_259188, 'get')
        # Calling get(args, kwargs) (line 642)
        get_call_result_259191 = invoke(stypy.reporting.localization.Localization(__file__, 642, 22), get_259189, *[], **kwargs_259190)
        
        # Applying the 'not' unary operator (line 642)
        result_not__259192 = python_operator(stypy.reporting.localization.Localization(__file__, 642, 18), 'not', get_call_result_259191)
        
        # Processing the call keyword arguments (line 642)
        kwargs_259193 = {}
        # Getting the type of 'a' (line 642)
        a_259186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 12), 'a', False)
        # Obtaining the member 'set' of a type (line 642)
        set_259187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 642, 12), a_259186, 'set')
        # Calling set(args, kwargs) (line 642)
        set_call_result_259194 = invoke(stypy.reporting.localization.Localization(__file__, 642, 12), set_259187, *[result_not__259192], **kwargs_259193)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_active(...): (line 643)
        # Processing the call keyword arguments (line 643)
        kwargs_259197 = {}
        # Getting the type of 'self' (line 643)
        self_259195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 8), 'self', False)
        # Obtaining the member 'set_active' of a type (line 643)
        set_active_259196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 8), self_259195, 'set_active')
        # Calling set_active(args, kwargs) (line 643)
        set_active_call_result_259198 = invoke(stypy.reporting.localization.Localization(__file__, 643, 8), set_active_259196, *[], **kwargs_259197)
        
        
        # ################# End of 'invert_all(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'invert_all' in the type store
        # Getting the type of 'stypy_return_type' (line 640)
        stypy_return_type_259199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259199)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'invert_all'
        return stypy_return_type_259199


    @norecursion
    def select_all(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'select_all'
        module_type_store = module_type_store.open_function_context('select_all', 645, 4, False)
        # Assigning a type to the variable 'self' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxisMenu.select_all.__dict__.__setitem__('stypy_localization', localization)
        AxisMenu.select_all.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxisMenu.select_all.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxisMenu.select_all.__dict__.__setitem__('stypy_function_name', 'AxisMenu.select_all')
        AxisMenu.select_all.__dict__.__setitem__('stypy_param_names_list', [])
        AxisMenu.select_all.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxisMenu.select_all.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxisMenu.select_all.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxisMenu.select_all.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxisMenu.select_all.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxisMenu.select_all.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxisMenu.select_all', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'select_all', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'select_all(...)' code ##################

        
        # Getting the type of 'self' (line 646)
        self_259200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 17), 'self')
        # Obtaining the member '_axis_var' of a type (line 646)
        _axis_var_259201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 17), self_259200, '_axis_var')
        # Testing the type of a for loop iterable (line 646)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 646, 8), _axis_var_259201)
        # Getting the type of the for loop variable (line 646)
        for_loop_var_259202 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 646, 8), _axis_var_259201)
        # Assigning a type to the variable 'a' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 8), 'a', for_loop_var_259202)
        # SSA begins for a for statement (line 646)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set(...): (line 647)
        # Processing the call arguments (line 647)
        int_259205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 647, 18), 'int')
        # Processing the call keyword arguments (line 647)
        kwargs_259206 = {}
        # Getting the type of 'a' (line 647)
        a_259203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 12), 'a', False)
        # Obtaining the member 'set' of a type (line 647)
        set_259204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 12), a_259203, 'set')
        # Calling set(args, kwargs) (line 647)
        set_call_result_259207 = invoke(stypy.reporting.localization.Localization(__file__, 647, 12), set_259204, *[int_259205], **kwargs_259206)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_active(...): (line 648)
        # Processing the call keyword arguments (line 648)
        kwargs_259210 = {}
        # Getting the type of 'self' (line 648)
        self_259208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'self', False)
        # Obtaining the member 'set_active' of a type (line 648)
        set_active_259209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 8), self_259208, 'set_active')
        # Calling set_active(args, kwargs) (line 648)
        set_active_call_result_259211 = invoke(stypy.reporting.localization.Localization(__file__, 648, 8), set_active_259209, *[], **kwargs_259210)
        
        
        # ################# End of 'select_all(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'select_all' in the type store
        # Getting the type of 'stypy_return_type' (line 645)
        stypy_return_type_259212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259212)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'select_all'
        return stypy_return_type_259212


# Assigning a type to the variable 'AxisMenu' (line 588)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 0), 'AxisMenu', AxisMenu)
# Declaration of the 'NavigationToolbar2TkAgg' class
# Getting the type of 'NavigationToolbar2' (line 651)
NavigationToolbar2_259213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 30), 'NavigationToolbar2')
# Getting the type of 'Tk' (line 651)
Tk_259214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 50), 'Tk')
# Obtaining the member 'Frame' of a type (line 651)
Frame_259215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 50), Tk_259214, 'Frame')

class NavigationToolbar2TkAgg(NavigationToolbar2_259213, Frame_259215, ):
    unicode_259216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 660, (-1)), 'unicode', u'\n    Attributes\n    ----------\n    canvas : `FigureCanvas`\n        the figure canvas on which to operate\n    win : tk.Window\n        the tk.Window which owns this toolbar\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 661, 4, False)
        # Assigning a type to the variable 'self' (line 662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2TkAgg.__init__', ['canvas', 'window'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['canvas', 'window'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 662):
        
        # Assigning a Name to a Attribute (line 662):
        # Getting the type of 'canvas' (line 662)
        canvas_259217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 22), 'canvas')
        # Getting the type of 'self' (line 662)
        self_259218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 662)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 8), self_259218, 'canvas', canvas_259217)
        
        # Assigning a Name to a Attribute (line 663):
        
        # Assigning a Name to a Attribute (line 663):
        # Getting the type of 'window' (line 663)
        window_259219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 22), 'window')
        # Getting the type of 'self' (line 663)
        self_259220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 8), 'self')
        # Setting the type of the member 'window' of a type (line 663)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 8), self_259220, 'window', window_259219)
        
        # Assigning a Name to a Attribute (line 664):
        
        # Assigning a Name to a Attribute (line 664):
        # Getting the type of 'True' (line 664)
        True_259221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 21), 'True')
        # Getting the type of 'self' (line 664)
        self_259222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'self')
        # Setting the type of the member '_idle' of a type (line 664)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 8), self_259222, '_idle', True_259221)
        
        # Call to __init__(...): (line 665)
        # Processing the call arguments (line 665)
        # Getting the type of 'self' (line 665)
        self_259225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 36), 'self', False)
        # Getting the type of 'canvas' (line 665)
        canvas_259226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 42), 'canvas', False)
        # Processing the call keyword arguments (line 665)
        kwargs_259227 = {}
        # Getting the type of 'NavigationToolbar2' (line 665)
        NavigationToolbar2_259223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 8), 'NavigationToolbar2', False)
        # Obtaining the member '__init__' of a type (line 665)
        init___259224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 8), NavigationToolbar2_259223, '__init__')
        # Calling __init__(args, kwargs) (line 665)
        init___call_result_259228 = invoke(stypy.reporting.localization.Localization(__file__, 665, 8), init___259224, *[self_259225, canvas_259226], **kwargs_259227)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def destroy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'destroy'
        module_type_store = module_type_store.open_function_context('destroy', 667, 4, False)
        # Assigning a type to the variable 'self' (line 668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 668, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2TkAgg.destroy.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2TkAgg.destroy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2TkAgg.destroy.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2TkAgg.destroy.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2TkAgg.destroy')
        NavigationToolbar2TkAgg.destroy.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2TkAgg.destroy.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        NavigationToolbar2TkAgg.destroy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2TkAgg.destroy.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2TkAgg.destroy.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2TkAgg.destroy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2TkAgg.destroy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2TkAgg.destroy', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'destroy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'destroy(...)' code ##################

        # Deleting a member
        # Getting the type of 'self' (line 668)
        self_259229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 8), 'self')
        module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 668, 8), self_259229, 'message')
        
        # Call to destroy(...): (line 669)
        # Processing the call arguments (line 669)
        # Getting the type of 'self' (line 669)
        self_259233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 25), 'self', False)
        # Getting the type of 'args' (line 669)
        args_259234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 32), 'args', False)
        # Processing the call keyword arguments (line 669)
        kwargs_259235 = {}
        # Getting the type of 'Tk' (line 669)
        Tk_259230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 8), 'Tk', False)
        # Obtaining the member 'Frame' of a type (line 669)
        Frame_259231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 8), Tk_259230, 'Frame')
        # Obtaining the member 'destroy' of a type (line 669)
        destroy_259232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 8), Frame_259231, 'destroy')
        # Calling destroy(args, kwargs) (line 669)
        destroy_call_result_259236 = invoke(stypy.reporting.localization.Localization(__file__, 669, 8), destroy_259232, *[self_259233, args_259234], **kwargs_259235)
        
        
        # ################# End of 'destroy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'destroy' in the type store
        # Getting the type of 'stypy_return_type' (line 667)
        stypy_return_type_259237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259237)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'destroy'
        return stypy_return_type_259237


    @norecursion
    def set_message(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_message'
        module_type_store = module_type_store.open_function_context('set_message', 671, 4, False)
        # Assigning a type to the variable 'self' (line 672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2TkAgg.set_message.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2TkAgg.set_message.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2TkAgg.set_message.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2TkAgg.set_message.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2TkAgg.set_message')
        NavigationToolbar2TkAgg.set_message.__dict__.__setitem__('stypy_param_names_list', ['s'])
        NavigationToolbar2TkAgg.set_message.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2TkAgg.set_message.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2TkAgg.set_message.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2TkAgg.set_message.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2TkAgg.set_message.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2TkAgg.set_message.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2TkAgg.set_message', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_message', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_message(...)' code ##################

        
        # Call to set(...): (line 672)
        # Processing the call arguments (line 672)
        # Getting the type of 's' (line 672)
        s_259241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 25), 's', False)
        # Processing the call keyword arguments (line 672)
        kwargs_259242 = {}
        # Getting the type of 'self' (line 672)
        self_259238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'self', False)
        # Obtaining the member 'message' of a type (line 672)
        message_259239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 8), self_259238, 'message')
        # Obtaining the member 'set' of a type (line 672)
        set_259240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 8), message_259239, 'set')
        # Calling set(args, kwargs) (line 672)
        set_call_result_259243 = invoke(stypy.reporting.localization.Localization(__file__, 672, 8), set_259240, *[s_259241], **kwargs_259242)
        
        
        # ################# End of 'set_message(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_message' in the type store
        # Getting the type of 'stypy_return_type' (line 671)
        stypy_return_type_259244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259244)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_message'
        return stypy_return_type_259244


    @norecursion
    def draw_rubberband(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_rubberband'
        module_type_store = module_type_store.open_function_context('draw_rubberband', 674, 4, False)
        # Assigning a type to the variable 'self' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2TkAgg.draw_rubberband.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2TkAgg.draw_rubberband.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2TkAgg.draw_rubberband.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2TkAgg.draw_rubberband.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2TkAgg.draw_rubberband')
        NavigationToolbar2TkAgg.draw_rubberband.__dict__.__setitem__('stypy_param_names_list', ['event', 'x0', 'y0', 'x1', 'y1'])
        NavigationToolbar2TkAgg.draw_rubberband.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2TkAgg.draw_rubberband.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2TkAgg.draw_rubberband.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2TkAgg.draw_rubberband.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2TkAgg.draw_rubberband.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2TkAgg.draw_rubberband.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2TkAgg.draw_rubberband', ['event', 'x0', 'y0', 'x1', 'y1'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_rubberband', localization, ['event', 'x0', 'y0', 'x1', 'y1'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_rubberband(...)' code ##################

        
        # Assigning a Attribute to a Name (line 675):
        
        # Assigning a Attribute to a Name (line 675):
        # Getting the type of 'self' (line 675)
        self_259245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 17), 'self')
        # Obtaining the member 'canvas' of a type (line 675)
        canvas_259246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 17), self_259245, 'canvas')
        # Obtaining the member 'figure' of a type (line 675)
        figure_259247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 17), canvas_259246, 'figure')
        # Obtaining the member 'bbox' of a type (line 675)
        bbox_259248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 17), figure_259247, 'bbox')
        # Obtaining the member 'height' of a type (line 675)
        height_259249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 17), bbox_259248, 'height')
        # Assigning a type to the variable 'height' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 8), 'height', height_259249)
        
        # Assigning a BinOp to a Name (line 676):
        
        # Assigning a BinOp to a Name (line 676):
        # Getting the type of 'height' (line 676)
        height_259250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 13), 'height')
        # Getting the type of 'y0' (line 676)
        y0_259251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 22), 'y0')
        # Applying the binary operator '-' (line 676)
        result_sub_259252 = python_operator(stypy.reporting.localization.Localization(__file__, 676, 13), '-', height_259250, y0_259251)
        
        # Assigning a type to the variable 'y0' (line 676)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 676, 8), 'y0', result_sub_259252)
        
        # Assigning a BinOp to a Name (line 677):
        
        # Assigning a BinOp to a Name (line 677):
        # Getting the type of 'height' (line 677)
        height_259253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 13), 'height')
        # Getting the type of 'y1' (line 677)
        y1_259254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 22), 'y1')
        # Applying the binary operator '-' (line 677)
        result_sub_259255 = python_operator(stypy.reporting.localization.Localization(__file__, 677, 13), '-', height_259253, y1_259254)
        
        # Assigning a type to the variable 'y1' (line 677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 8), 'y1', result_sub_259255)
        
        # Type idiom detected: calculating its left and rigth part (line 678)
        unicode_259256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 25), 'unicode', u'lastrect')
        # Getting the type of 'self' (line 678)
        self_259257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 19), 'self')
        
        (may_be_259258, more_types_in_union_259259) = may_provide_member(unicode_259256, self_259257)

        if may_be_259258:

            if more_types_in_union_259259:
                # Runtime conditional SSA (line 678)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 678)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 678, 8), 'self', remove_not_member_provider_from_union(self_259257, u'lastrect'))
            
            # Call to delete(...): (line 679)
            # Processing the call arguments (line 679)
            # Getting the type of 'self' (line 679)
            self_259264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 41), 'self', False)
            # Obtaining the member 'lastrect' of a type (line 679)
            lastrect_259265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 41), self_259264, 'lastrect')
            # Processing the call keyword arguments (line 679)
            kwargs_259266 = {}
            # Getting the type of 'self' (line 679)
            self_259260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 12), 'self', False)
            # Obtaining the member 'canvas' of a type (line 679)
            canvas_259261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 12), self_259260, 'canvas')
            # Obtaining the member '_tkcanvas' of a type (line 679)
            _tkcanvas_259262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 12), canvas_259261, '_tkcanvas')
            # Obtaining the member 'delete' of a type (line 679)
            delete_259263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 12), _tkcanvas_259262, 'delete')
            # Calling delete(args, kwargs) (line 679)
            delete_call_result_259267 = invoke(stypy.reporting.localization.Localization(__file__, 679, 12), delete_259263, *[lastrect_259265], **kwargs_259266)
            

            if more_types_in_union_259259:
                # SSA join for if statement (line 678)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 680):
        
        # Assigning a Call to a Attribute (line 680):
        
        # Call to create_rectangle(...): (line 680)
        # Processing the call arguments (line 680)
        # Getting the type of 'x0' (line 680)
        x0_259272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 63), 'x0', False)
        # Getting the type of 'y0' (line 680)
        y0_259273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 67), 'y0', False)
        # Getting the type of 'x1' (line 680)
        x1_259274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 71), 'x1', False)
        # Getting the type of 'y1' (line 680)
        y1_259275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 75), 'y1', False)
        # Processing the call keyword arguments (line 680)
        kwargs_259276 = {}
        # Getting the type of 'self' (line 680)
        self_259268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 24), 'self', False)
        # Obtaining the member 'canvas' of a type (line 680)
        canvas_259269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 24), self_259268, 'canvas')
        # Obtaining the member '_tkcanvas' of a type (line 680)
        _tkcanvas_259270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 24), canvas_259269, '_tkcanvas')
        # Obtaining the member 'create_rectangle' of a type (line 680)
        create_rectangle_259271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 24), _tkcanvas_259270, 'create_rectangle')
        # Calling create_rectangle(args, kwargs) (line 680)
        create_rectangle_call_result_259277 = invoke(stypy.reporting.localization.Localization(__file__, 680, 24), create_rectangle_259271, *[x0_259272, y0_259273, x1_259274, y1_259275], **kwargs_259276)
        
        # Getting the type of 'self' (line 680)
        self_259278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 8), 'self')
        # Setting the type of the member 'lastrect' of a type (line 680)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 8), self_259278, 'lastrect', create_rectangle_call_result_259277)
        
        # ################# End of 'draw_rubberband(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_rubberband' in the type store
        # Getting the type of 'stypy_return_type' (line 674)
        stypy_return_type_259279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259279)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_rubberband'
        return stypy_return_type_259279


    @norecursion
    def release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'release'
        module_type_store = module_type_store.open_function_context('release', 684, 4, False)
        # Assigning a type to the variable 'self' (line 685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2TkAgg.release.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2TkAgg.release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2TkAgg.release.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2TkAgg.release.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2TkAgg.release')
        NavigationToolbar2TkAgg.release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2TkAgg.release.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2TkAgg.release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2TkAgg.release.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2TkAgg.release.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2TkAgg.release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2TkAgg.release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2TkAgg.release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'release(...)' code ##################

        
        
        # SSA begins for try-except statement (line 685)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        # Getting the type of 'self' (line 685)
        self_259280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 13), 'self')
        # Obtaining the member 'lastrect' of a type (line 685)
        lastrect_259281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 13), self_259280, 'lastrect')
        # SSA branch for the except part of a try statement (line 685)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 685)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 685)
        module_type_store.open_ssa_branch('except else')
        
        # Call to delete(...): (line 688)
        # Processing the call arguments (line 688)
        # Getting the type of 'self' (line 688)
        self_259286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 41), 'self', False)
        # Obtaining the member 'lastrect' of a type (line 688)
        lastrect_259287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 41), self_259286, 'lastrect')
        # Processing the call keyword arguments (line 688)
        kwargs_259288 = {}
        # Getting the type of 'self' (line 688)
        self_259282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 688)
        canvas_259283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 12), self_259282, 'canvas')
        # Obtaining the member '_tkcanvas' of a type (line 688)
        _tkcanvas_259284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 12), canvas_259283, '_tkcanvas')
        # Obtaining the member 'delete' of a type (line 688)
        delete_259285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 12), _tkcanvas_259284, 'delete')
        # Calling delete(args, kwargs) (line 688)
        delete_call_result_259289 = invoke(stypy.reporting.localization.Localization(__file__, 688, 12), delete_259285, *[lastrect_259287], **kwargs_259288)
        
        # Deleting a member
        # Getting the type of 'self' (line 689)
        self_259290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 12), 'self')
        module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 689, 12), self_259290, 'lastrect')
        # SSA join for try-except statement (line 685)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'release' in the type store
        # Getting the type of 'stypy_return_type' (line 684)
        stypy_return_type_259291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259291)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'release'
        return stypy_return_type_259291


    @norecursion
    def set_cursor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_cursor'
        module_type_store = module_type_store.open_function_context('set_cursor', 691, 4, False)
        # Assigning a type to the variable 'self' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2TkAgg.set_cursor.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2TkAgg.set_cursor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2TkAgg.set_cursor.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2TkAgg.set_cursor.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2TkAgg.set_cursor')
        NavigationToolbar2TkAgg.set_cursor.__dict__.__setitem__('stypy_param_names_list', ['cursor'])
        NavigationToolbar2TkAgg.set_cursor.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2TkAgg.set_cursor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2TkAgg.set_cursor.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2TkAgg.set_cursor.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2TkAgg.set_cursor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2TkAgg.set_cursor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2TkAgg.set_cursor', ['cursor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_cursor', localization, ['cursor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_cursor(...)' code ##################

        
        # Call to configure(...): (line 692)
        # Processing the call keyword arguments (line 692)
        
        # Obtaining the type of the subscript
        # Getting the type of 'cursor' (line 692)
        cursor_259295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 45), 'cursor', False)
        # Getting the type of 'cursord' (line 692)
        cursord_259296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 37), 'cursord', False)
        # Obtaining the member '__getitem__' of a type (line 692)
        getitem___259297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 37), cursord_259296, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 692)
        subscript_call_result_259298 = invoke(stypy.reporting.localization.Localization(__file__, 692, 37), getitem___259297, cursor_259295)
        
        keyword_259299 = subscript_call_result_259298
        kwargs_259300 = {'cursor': keyword_259299}
        # Getting the type of 'self' (line 692)
        self_259292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 8), 'self', False)
        # Obtaining the member 'window' of a type (line 692)
        window_259293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 8), self_259292, 'window')
        # Obtaining the member 'configure' of a type (line 692)
        configure_259294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 8), window_259293, 'configure')
        # Calling configure(args, kwargs) (line 692)
        configure_call_result_259301 = invoke(stypy.reporting.localization.Localization(__file__, 692, 8), configure_259294, *[], **kwargs_259300)
        
        
        # Call to update_idletasks(...): (line 693)
        # Processing the call keyword arguments (line 693)
        kwargs_259305 = {}
        # Getting the type of 'self' (line 693)
        self_259302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), 'self', False)
        # Obtaining the member 'window' of a type (line 693)
        window_259303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 693, 8), self_259302, 'window')
        # Obtaining the member 'update_idletasks' of a type (line 693)
        update_idletasks_259304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 693, 8), window_259303, 'update_idletasks')
        # Calling update_idletasks(args, kwargs) (line 693)
        update_idletasks_call_result_259306 = invoke(stypy.reporting.localization.Localization(__file__, 693, 8), update_idletasks_259304, *[], **kwargs_259305)
        
        
        # ################# End of 'set_cursor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_cursor' in the type store
        # Getting the type of 'stypy_return_type' (line 691)
        stypy_return_type_259307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259307)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_cursor'
        return stypy_return_type_259307


    @norecursion
    def _Button(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_259308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 695, 53), 'unicode', u'.gif')
        defaults = [unicode_259308]
        # Create a new context for function '_Button'
        module_type_store = module_type_store.open_function_context('_Button', 695, 4, False)
        # Assigning a type to the variable 'self' (line 696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2TkAgg._Button.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2TkAgg._Button.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2TkAgg._Button.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2TkAgg._Button.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2TkAgg._Button')
        NavigationToolbar2TkAgg._Button.__dict__.__setitem__('stypy_param_names_list', ['text', 'file', 'command', 'extension'])
        NavigationToolbar2TkAgg._Button.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2TkAgg._Button.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2TkAgg._Button.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2TkAgg._Button.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2TkAgg._Button.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2TkAgg._Button.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2TkAgg._Button', ['text', 'file', 'command', 'extension'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_Button', localization, ['text', 'file', 'command', 'extension'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_Button(...)' code ##################

        
        # Assigning a Call to a Name (line 696):
        
        # Assigning a Call to a Name (line 696):
        
        # Call to join(...): (line 696)
        # Processing the call arguments (line 696)
        
        # Obtaining the type of the subscript
        unicode_259312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 21), 'unicode', u'datapath')
        # Getting the type of 'rcParams' (line 697)
        rcParams_259313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 12), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 697)
        getitem___259314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 12), rcParams_259313, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 697)
        subscript_call_result_259315 = invoke(stypy.reporting.localization.Localization(__file__, 697, 12), getitem___259314, unicode_259312)
        
        unicode_259316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 34), 'unicode', u'images')
        # Getting the type of 'file' (line 697)
        file_259317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 44), 'file', False)
        # Getting the type of 'extension' (line 697)
        extension_259318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 51), 'extension', False)
        # Applying the binary operator '+' (line 697)
        result_add_259319 = python_operator(stypy.reporting.localization.Localization(__file__, 697, 44), '+', file_259317, extension_259318)
        
        # Processing the call keyword arguments (line 696)
        kwargs_259320 = {}
        # Getting the type of 'os' (line 696)
        os_259309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 696)
        path_259310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 696, 19), os_259309, 'path')
        # Obtaining the member 'join' of a type (line 696)
        join_259311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 696, 19), path_259310, 'join')
        # Calling join(args, kwargs) (line 696)
        join_call_result_259321 = invoke(stypy.reporting.localization.Localization(__file__, 696, 19), join_259311, *[subscript_call_result_259315, unicode_259316, result_add_259319], **kwargs_259320)
        
        # Assigning a type to the variable 'img_file' (line 696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 8), 'img_file', join_call_result_259321)
        
        # Assigning a Call to a Name (line 698):
        
        # Assigning a Call to a Name (line 698):
        
        # Call to PhotoImage(...): (line 698)
        # Processing the call keyword arguments (line 698)
        # Getting the type of 'self' (line 698)
        self_259324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 34), 'self', False)
        keyword_259325 = self_259324
        # Getting the type of 'img_file' (line 698)
        img_file_259326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 45), 'img_file', False)
        keyword_259327 = img_file_259326
        kwargs_259328 = {'master': keyword_259325, 'file': keyword_259327}
        # Getting the type of 'Tk' (line 698)
        Tk_259322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 13), 'Tk', False)
        # Obtaining the member 'PhotoImage' of a type (line 698)
        PhotoImage_259323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 13), Tk_259322, 'PhotoImage')
        # Calling PhotoImage(args, kwargs) (line 698)
        PhotoImage_call_result_259329 = invoke(stypy.reporting.localization.Localization(__file__, 698, 13), PhotoImage_259323, *[], **kwargs_259328)
        
        # Assigning a type to the variable 'im' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 8), 'im', PhotoImage_call_result_259329)
        
        # Assigning a Call to a Name (line 699):
        
        # Assigning a Call to a Name (line 699):
        
        # Call to Button(...): (line 699)
        # Processing the call keyword arguments (line 699)
        # Getting the type of 'self' (line 700)
        self_259332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 19), 'self', False)
        keyword_259333 = self_259332
        # Getting the type of 'text' (line 700)
        text_259334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 30), 'text', False)
        keyword_259335 = text_259334
        int_259336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 700, 41), 'int')
        keyword_259337 = int_259336
        int_259338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 700, 49), 'int')
        keyword_259339 = int_259338
        # Getting the type of 'im' (line 700)
        im_259340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 58), 'im', False)
        keyword_259341 = im_259340
        # Getting the type of 'command' (line 700)
        command_259342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 70), 'command', False)
        keyword_259343 = command_259342
        kwargs_259344 = {'text': keyword_259335, 'image': keyword_259341, 'master': keyword_259333, 'padx': keyword_259337, 'pady': keyword_259339, 'command': keyword_259343}
        # Getting the type of 'Tk' (line 699)
        Tk_259330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 12), 'Tk', False)
        # Obtaining the member 'Button' of a type (line 699)
        Button_259331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 12), Tk_259330, 'Button')
        # Calling Button(args, kwargs) (line 699)
        Button_call_result_259345 = invoke(stypy.reporting.localization.Localization(__file__, 699, 12), Button_259331, *[], **kwargs_259344)
        
        # Assigning a type to the variable 'b' (line 699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'b', Button_call_result_259345)
        
        # Assigning a Name to a Attribute (line 701):
        
        # Assigning a Name to a Attribute (line 701):
        # Getting the type of 'im' (line 701)
        im_259346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 21), 'im')
        # Getting the type of 'b' (line 701)
        b_259347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 8), 'b')
        # Setting the type of the member '_ntimage' of a type (line 701)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 8), b_259347, '_ntimage', im_259346)
        
        # Call to pack(...): (line 702)
        # Processing the call keyword arguments (line 702)
        # Getting the type of 'Tk' (line 702)
        Tk_259350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 20), 'Tk', False)
        # Obtaining the member 'LEFT' of a type (line 702)
        LEFT_259351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 702, 20), Tk_259350, 'LEFT')
        keyword_259352 = LEFT_259351
        kwargs_259353 = {'side': keyword_259352}
        # Getting the type of 'b' (line 702)
        b_259348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 8), 'b', False)
        # Obtaining the member 'pack' of a type (line 702)
        pack_259349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 702, 8), b_259348, 'pack')
        # Calling pack(args, kwargs) (line 702)
        pack_call_result_259354 = invoke(stypy.reporting.localization.Localization(__file__, 702, 8), pack_259349, *[], **kwargs_259353)
        
        # Getting the type of 'b' (line 703)
        b_259355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 15), 'b')
        # Assigning a type to the variable 'stypy_return_type' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'stypy_return_type', b_259355)
        
        # ################# End of '_Button(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_Button' in the type store
        # Getting the type of 'stypy_return_type' (line 695)
        stypy_return_type_259356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259356)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_Button'
        return stypy_return_type_259356


    @norecursion
    def _Spacer(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_Spacer'
        module_type_store = module_type_store.open_function_context('_Spacer', 705, 4, False)
        # Assigning a type to the variable 'self' (line 706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2TkAgg._Spacer.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2TkAgg._Spacer.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2TkAgg._Spacer.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2TkAgg._Spacer.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2TkAgg._Spacer')
        NavigationToolbar2TkAgg._Spacer.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2TkAgg._Spacer.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2TkAgg._Spacer.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2TkAgg._Spacer.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2TkAgg._Spacer.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2TkAgg._Spacer.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2TkAgg._Spacer.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2TkAgg._Spacer', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_Spacer', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_Spacer(...)' code ##################

        
        # Assigning a Call to a Name (line 707):
        
        # Assigning a Call to a Name (line 707):
        
        # Call to Frame(...): (line 707)
        # Processing the call keyword arguments (line 707)
        # Getting the type of 'self' (line 708)
        self_259359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 19), 'self', False)
        keyword_259360 = self_259359
        int_259361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 32), 'int')
        keyword_259362 = int_259361
        # Getting the type of 'Tk' (line 708)
        Tk_259363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 43), 'Tk', False)
        # Obtaining the member 'RIDGE' of a type (line 708)
        RIDGE_259364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 43), Tk_259363, 'RIDGE')
        keyword_259365 = RIDGE_259364
        int_259366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 58), 'int')
        keyword_259367 = int_259366
        unicode_259368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 64), 'unicode', u'DarkGray')
        keyword_259369 = unicode_259368
        kwargs_259370 = {'pady': keyword_259367, 'bg': keyword_259369, 'master': keyword_259360, 'relief': keyword_259365, 'height': keyword_259362}
        # Getting the type of 'Tk' (line 707)
        Tk_259357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 12), 'Tk', False)
        # Obtaining the member 'Frame' of a type (line 707)
        Frame_259358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 12), Tk_259357, 'Frame')
        # Calling Frame(args, kwargs) (line 707)
        Frame_call_result_259371 = invoke(stypy.reporting.localization.Localization(__file__, 707, 12), Frame_259358, *[], **kwargs_259370)
        
        # Assigning a type to the variable 's' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 's', Frame_call_result_259371)
        
        # Call to pack(...): (line 709)
        # Processing the call keyword arguments (line 709)
        # Getting the type of 'Tk' (line 709)
        Tk_259374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 20), 'Tk', False)
        # Obtaining the member 'LEFT' of a type (line 709)
        LEFT_259375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 20), Tk_259374, 'LEFT')
        keyword_259376 = LEFT_259375
        int_259377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 709, 34), 'int')
        keyword_259378 = int_259377
        kwargs_259379 = {'padx': keyword_259378, 'side': keyword_259376}
        # Getting the type of 's' (line 709)
        s_259372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 8), 's', False)
        # Obtaining the member 'pack' of a type (line 709)
        pack_259373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 8), s_259372, 'pack')
        # Calling pack(args, kwargs) (line 709)
        pack_call_result_259380 = invoke(stypy.reporting.localization.Localization(__file__, 709, 8), pack_259373, *[], **kwargs_259379)
        
        # Getting the type of 's' (line 710)
        s_259381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 15), 's')
        # Assigning a type to the variable 'stypy_return_type' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 8), 'stypy_return_type', s_259381)
        
        # ################# End of '_Spacer(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_Spacer' in the type store
        # Getting the type of 'stypy_return_type' (line 705)
        stypy_return_type_259382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259382)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_Spacer'
        return stypy_return_type_259382


    @norecursion
    def _init_toolbar(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_init_toolbar'
        module_type_store = module_type_store.open_function_context('_init_toolbar', 712, 4, False)
        # Assigning a type to the variable 'self' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2TkAgg._init_toolbar.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2TkAgg._init_toolbar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2TkAgg._init_toolbar.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2TkAgg._init_toolbar.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2TkAgg._init_toolbar')
        NavigationToolbar2TkAgg._init_toolbar.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2TkAgg._init_toolbar.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2TkAgg._init_toolbar.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2TkAgg._init_toolbar.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2TkAgg._init_toolbar.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2TkAgg._init_toolbar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2TkAgg._init_toolbar.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2TkAgg._init_toolbar', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_init_toolbar', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_init_toolbar(...)' code ##################

        
        # Assigning a Attribute to a Tuple (line 713):
        
        # Assigning a Subscript to a Name (line 713):
        
        # Obtaining the type of the subscript
        int_259383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 8), 'int')
        # Getting the type of 'self' (line 713)
        self_259384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 21), 'self')
        # Obtaining the member 'canvas' of a type (line 713)
        canvas_259385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 21), self_259384, 'canvas')
        # Obtaining the member 'figure' of a type (line 713)
        figure_259386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 21), canvas_259385, 'figure')
        # Obtaining the member 'bbox' of a type (line 713)
        bbox_259387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 21), figure_259386, 'bbox')
        # Obtaining the member 'intervalx' of a type (line 713)
        intervalx_259388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 21), bbox_259387, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 713)
        getitem___259389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 8), intervalx_259388, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 713)
        subscript_call_result_259390 = invoke(stypy.reporting.localization.Localization(__file__, 713, 8), getitem___259389, int_259383)
        
        # Assigning a type to the variable 'tuple_var_assignment_257455' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'tuple_var_assignment_257455', subscript_call_result_259390)
        
        # Assigning a Subscript to a Name (line 713):
        
        # Obtaining the type of the subscript
        int_259391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 8), 'int')
        # Getting the type of 'self' (line 713)
        self_259392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 21), 'self')
        # Obtaining the member 'canvas' of a type (line 713)
        canvas_259393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 21), self_259392, 'canvas')
        # Obtaining the member 'figure' of a type (line 713)
        figure_259394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 21), canvas_259393, 'figure')
        # Obtaining the member 'bbox' of a type (line 713)
        bbox_259395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 21), figure_259394, 'bbox')
        # Obtaining the member 'intervalx' of a type (line 713)
        intervalx_259396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 21), bbox_259395, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 713)
        getitem___259397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 8), intervalx_259396, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 713)
        subscript_call_result_259398 = invoke(stypy.reporting.localization.Localization(__file__, 713, 8), getitem___259397, int_259391)
        
        # Assigning a type to the variable 'tuple_var_assignment_257456' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'tuple_var_assignment_257456', subscript_call_result_259398)
        
        # Assigning a Name to a Name (line 713):
        # Getting the type of 'tuple_var_assignment_257455' (line 713)
        tuple_var_assignment_257455_259399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'tuple_var_assignment_257455')
        # Assigning a type to the variable 'xmin' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'xmin', tuple_var_assignment_257455_259399)
        
        # Assigning a Name to a Name (line 713):
        # Getting the type of 'tuple_var_assignment_257456' (line 713)
        tuple_var_assignment_257456_259400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'tuple_var_assignment_257456')
        # Assigning a type to the variable 'xmax' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 14), 'xmax', tuple_var_assignment_257456_259400)
        
        # Assigning a Tuple to a Tuple (line 714):
        
        # Assigning a Num to a Name (line 714):
        int_259401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 714, 24), 'int')
        # Assigning a type to the variable 'tuple_assignment_257457' (line 714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'tuple_assignment_257457', int_259401)
        
        # Assigning a BinOp to a Name (line 714):
        # Getting the type of 'xmax' (line 714)
        xmax_259402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 28), 'xmax')
        # Getting the type of 'xmin' (line 714)
        xmin_259403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 33), 'xmin')
        # Applying the binary operator '-' (line 714)
        result_sub_259404 = python_operator(stypy.reporting.localization.Localization(__file__, 714, 28), '-', xmax_259402, xmin_259403)
        
        # Assigning a type to the variable 'tuple_assignment_257458' (line 714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'tuple_assignment_257458', result_sub_259404)
        
        # Assigning a Name to a Name (line 714):
        # Getting the type of 'tuple_assignment_257457' (line 714)
        tuple_assignment_257457_259405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'tuple_assignment_257457')
        # Assigning a type to the variable 'height' (line 714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'height', tuple_assignment_257457_259405)
        
        # Assigning a Name to a Name (line 714):
        # Getting the type of 'tuple_assignment_257458' (line 714)
        tuple_assignment_257458_259406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'tuple_assignment_257458')
        # Assigning a type to the variable 'width' (line 714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 16), 'width', tuple_assignment_257458_259406)
        
        # Call to __init__(...): (line 715)
        # Processing the call arguments (line 715)
        # Getting the type of 'self' (line 715)
        self_259410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 26), 'self', False)
        # Processing the call keyword arguments (line 715)
        # Getting the type of 'self' (line 715)
        self_259411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 39), 'self', False)
        # Obtaining the member 'window' of a type (line 715)
        window_259412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 39), self_259411, 'window')
        keyword_259413 = window_259412
        
        # Call to int(...): (line 716)
        # Processing the call arguments (line 716)
        # Getting the type of 'width' (line 716)
        width_259415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 36), 'width', False)
        # Processing the call keyword arguments (line 716)
        kwargs_259416 = {}
        # Getting the type of 'int' (line 716)
        int_259414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 32), 'int', False)
        # Calling int(args, kwargs) (line 716)
        int_call_result_259417 = invoke(stypy.reporting.localization.Localization(__file__, 716, 32), int_259414, *[width_259415], **kwargs_259416)
        
        keyword_259418 = int_call_result_259417
        
        # Call to int(...): (line 716)
        # Processing the call arguments (line 716)
        # Getting the type of 'height' (line 716)
        height_259420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 55), 'height', False)
        # Processing the call keyword arguments (line 716)
        kwargs_259421 = {}
        # Getting the type of 'int' (line 716)
        int_259419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 51), 'int', False)
        # Calling int(args, kwargs) (line 716)
        int_call_result_259422 = invoke(stypy.reporting.localization.Localization(__file__, 716, 51), int_259419, *[height_259420], **kwargs_259421)
        
        keyword_259423 = int_call_result_259422
        int_259424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 717, 38), 'int')
        keyword_259425 = int_259424
        kwargs_259426 = {'width': keyword_259418, 'master': keyword_259413, 'borderwidth': keyword_259425, 'height': keyword_259423}
        # Getting the type of 'Tk' (line 715)
        Tk_259407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 8), 'Tk', False)
        # Obtaining the member 'Frame' of a type (line 715)
        Frame_259408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 8), Tk_259407, 'Frame')
        # Obtaining the member '__init__' of a type (line 715)
        init___259409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 8), Frame_259408, '__init__')
        # Calling __init__(args, kwargs) (line 715)
        init___call_result_259427 = invoke(stypy.reporting.localization.Localization(__file__, 715, 8), init___259409, *[self_259410], **kwargs_259426)
        
        
        # Call to update(...): (line 719)
        # Processing the call keyword arguments (line 719)
        kwargs_259430 = {}
        # Getting the type of 'self' (line 719)
        self_259428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'self', False)
        # Obtaining the member 'update' of a type (line 719)
        update_259429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 8), self_259428, 'update')
        # Calling update(args, kwargs) (line 719)
        update_call_result_259431 = invoke(stypy.reporting.localization.Localization(__file__, 719, 8), update_259429, *[], **kwargs_259430)
        
        
        # Getting the type of 'self' (line 721)
        self_259432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 56), 'self')
        # Obtaining the member 'toolitems' of a type (line 721)
        toolitems_259433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 721, 56), self_259432, 'toolitems')
        # Testing the type of a for loop iterable (line 721)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 721, 8), toolitems_259433)
        # Getting the type of the for loop variable (line 721)
        for_loop_var_259434 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 721, 8), toolitems_259433)
        # Assigning a type to the variable 'text' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 8), 'text', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 8), for_loop_var_259434))
        # Assigning a type to the variable 'tooltip_text' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 8), 'tooltip_text', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 8), for_loop_var_259434))
        # Assigning a type to the variable 'image_file' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 8), 'image_file', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 8), for_loop_var_259434))
        # Assigning a type to the variable 'callback' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 8), 'callback', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 8), for_loop_var_259434))
        # SSA begins for a for statement (line 721)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 722)
        # Getting the type of 'text' (line 722)
        text_259435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 15), 'text')
        # Getting the type of 'None' (line 722)
        None_259436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 23), 'None')
        
        (may_be_259437, more_types_in_union_259438) = may_be_none(text_259435, None_259436)

        if may_be_259437:

            if more_types_in_union_259438:
                # Runtime conditional SSA (line 722)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to _Spacer(...): (line 724)
            # Processing the call keyword arguments (line 724)
            kwargs_259441 = {}
            # Getting the type of 'self' (line 724)
            self_259439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 16), 'self', False)
            # Obtaining the member '_Spacer' of a type (line 724)
            _Spacer_259440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 724, 16), self_259439, '_Spacer')
            # Calling _Spacer(args, kwargs) (line 724)
            _Spacer_call_result_259442 = invoke(stypy.reporting.localization.Localization(__file__, 724, 16), _Spacer_259440, *[], **kwargs_259441)
            

            if more_types_in_union_259438:
                # Runtime conditional SSA for else branch (line 722)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_259437) or more_types_in_union_259438):
            
            # Assigning a Call to a Name (line 726):
            
            # Assigning a Call to a Name (line 726):
            
            # Call to _Button(...): (line 726)
            # Processing the call keyword arguments (line 726)
            # Getting the type of 'text' (line 726)
            text_259445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 43), 'text', False)
            keyword_259446 = text_259445
            # Getting the type of 'image_file' (line 726)
            image_file_259447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 54), 'image_file', False)
            keyword_259448 = image_file_259447
            
            # Call to getattr(...): (line 727)
            # Processing the call arguments (line 727)
            # Getting the type of 'self' (line 727)
            self_259450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 54), 'self', False)
            # Getting the type of 'callback' (line 727)
            callback_259451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 60), 'callback', False)
            # Processing the call keyword arguments (line 727)
            kwargs_259452 = {}
            # Getting the type of 'getattr' (line 727)
            getattr_259449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 46), 'getattr', False)
            # Calling getattr(args, kwargs) (line 727)
            getattr_call_result_259453 = invoke(stypy.reporting.localization.Localization(__file__, 727, 46), getattr_259449, *[self_259450, callback_259451], **kwargs_259452)
            
            keyword_259454 = getattr_call_result_259453
            kwargs_259455 = {'text': keyword_259446, 'command': keyword_259454, 'file': keyword_259448}
            # Getting the type of 'self' (line 726)
            self_259443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 25), 'self', False)
            # Obtaining the member '_Button' of a type (line 726)
            _Button_259444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 25), self_259443, '_Button')
            # Calling _Button(args, kwargs) (line 726)
            _Button_call_result_259456 = invoke(stypy.reporting.localization.Localization(__file__, 726, 25), _Button_259444, *[], **kwargs_259455)
            
            # Assigning a type to the variable 'button' (line 726)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 16), 'button', _Button_call_result_259456)
            
            # Type idiom detected: calculating its left and rigth part (line 728)
            # Getting the type of 'tooltip_text' (line 728)
            tooltip_text_259457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 16), 'tooltip_text')
            # Getting the type of 'None' (line 728)
            None_259458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 39), 'None')
            
            (may_be_259459, more_types_in_union_259460) = may_not_be_none(tooltip_text_259457, None_259458)

            if may_be_259459:

                if more_types_in_union_259460:
                    # Runtime conditional SSA (line 728)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Call to createToolTip(...): (line 729)
                # Processing the call arguments (line 729)
                # Getting the type of 'button' (line 729)
                button_259463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 42), 'button', False)
                # Getting the type of 'tooltip_text' (line 729)
                tooltip_text_259464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 50), 'tooltip_text', False)
                # Processing the call keyword arguments (line 729)
                kwargs_259465 = {}
                # Getting the type of 'ToolTip' (line 729)
                ToolTip_259461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 20), 'ToolTip', False)
                # Obtaining the member 'createToolTip' of a type (line 729)
                createToolTip_259462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 20), ToolTip_259461, 'createToolTip')
                # Calling createToolTip(args, kwargs) (line 729)
                createToolTip_call_result_259466 = invoke(stypy.reporting.localization.Localization(__file__, 729, 20), createToolTip_259462, *[button_259463, tooltip_text_259464], **kwargs_259465)
                

                if more_types_in_union_259460:
                    # SSA join for if statement (line 728)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_259437 and more_types_in_union_259438):
                # SSA join for if statement (line 722)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 731):
        
        # Assigning a Call to a Attribute (line 731):
        
        # Call to StringVar(...): (line 731)
        # Processing the call keyword arguments (line 731)
        # Getting the type of 'self' (line 731)
        self_259469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 43), 'self', False)
        keyword_259470 = self_259469
        kwargs_259471 = {'master': keyword_259470}
        # Getting the type of 'Tk' (line 731)
        Tk_259467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 23), 'Tk', False)
        # Obtaining the member 'StringVar' of a type (line 731)
        StringVar_259468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 731, 23), Tk_259467, 'StringVar')
        # Calling StringVar(args, kwargs) (line 731)
        StringVar_call_result_259472 = invoke(stypy.reporting.localization.Localization(__file__, 731, 23), StringVar_259468, *[], **kwargs_259471)
        
        # Getting the type of 'self' (line 731)
        self_259473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 8), 'self')
        # Setting the type of the member 'message' of a type (line 731)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 731, 8), self_259473, 'message', StringVar_call_result_259472)
        
        # Assigning a Call to a Attribute (line 732):
        
        # Assigning a Call to a Attribute (line 732):
        
        # Call to Label(...): (line 732)
        # Processing the call keyword arguments (line 732)
        # Getting the type of 'self' (line 732)
        self_259476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 46), 'self', False)
        keyword_259477 = self_259476
        # Getting the type of 'self' (line 732)
        self_259478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 65), 'self', False)
        # Obtaining the member 'message' of a type (line 732)
        message_259479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 65), self_259478, 'message')
        keyword_259480 = message_259479
        kwargs_259481 = {'master': keyword_259477, 'textvariable': keyword_259480}
        # Getting the type of 'Tk' (line 732)
        Tk_259474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 30), 'Tk', False)
        # Obtaining the member 'Label' of a type (line 732)
        Label_259475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 30), Tk_259474, 'Label')
        # Calling Label(args, kwargs) (line 732)
        Label_call_result_259482 = invoke(stypy.reporting.localization.Localization(__file__, 732, 30), Label_259475, *[], **kwargs_259481)
        
        # Getting the type of 'self' (line 732)
        self_259483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 8), 'self')
        # Setting the type of the member '_message_label' of a type (line 732)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 8), self_259483, '_message_label', Label_call_result_259482)
        
        # Call to pack(...): (line 733)
        # Processing the call keyword arguments (line 733)
        # Getting the type of 'Tk' (line 733)
        Tk_259487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 38), 'Tk', False)
        # Obtaining the member 'RIGHT' of a type (line 733)
        RIGHT_259488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 38), Tk_259487, 'RIGHT')
        keyword_259489 = RIGHT_259488
        kwargs_259490 = {'side': keyword_259489}
        # Getting the type of 'self' (line 733)
        self_259484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 8), 'self', False)
        # Obtaining the member '_message_label' of a type (line 733)
        _message_label_259485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 8), self_259484, '_message_label')
        # Obtaining the member 'pack' of a type (line 733)
        pack_259486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 8), _message_label_259485, 'pack')
        # Calling pack(args, kwargs) (line 733)
        pack_call_result_259491 = invoke(stypy.reporting.localization.Localization(__file__, 733, 8), pack_259486, *[], **kwargs_259490)
        
        
        # Call to pack(...): (line 734)
        # Processing the call keyword arguments (line 734)
        # Getting the type of 'Tk' (line 734)
        Tk_259494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 23), 'Tk', False)
        # Obtaining the member 'BOTTOM' of a type (line 734)
        BOTTOM_259495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 23), Tk_259494, 'BOTTOM')
        keyword_259496 = BOTTOM_259495
        # Getting the type of 'Tk' (line 734)
        Tk_259497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 39), 'Tk', False)
        # Obtaining the member 'X' of a type (line 734)
        X_259498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 39), Tk_259497, 'X')
        keyword_259499 = X_259498
        kwargs_259500 = {'side': keyword_259496, 'fill': keyword_259499}
        # Getting the type of 'self' (line 734)
        self_259492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'self', False)
        # Obtaining the member 'pack' of a type (line 734)
        pack_259493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 8), self_259492, 'pack')
        # Calling pack(args, kwargs) (line 734)
        pack_call_result_259501 = invoke(stypy.reporting.localization.Localization(__file__, 734, 8), pack_259493, *[], **kwargs_259500)
        
        
        # ################# End of '_init_toolbar(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_init_toolbar' in the type store
        # Getting the type of 'stypy_return_type' (line 712)
        stypy_return_type_259502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259502)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_init_toolbar'
        return stypy_return_type_259502


    @norecursion
    def configure_subplots(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'configure_subplots'
        module_type_store = module_type_store.open_function_context('configure_subplots', 736, 4, False)
        # Assigning a type to the variable 'self' (line 737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2TkAgg.configure_subplots.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2TkAgg.configure_subplots.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2TkAgg.configure_subplots.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2TkAgg.configure_subplots.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2TkAgg.configure_subplots')
        NavigationToolbar2TkAgg.configure_subplots.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2TkAgg.configure_subplots.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2TkAgg.configure_subplots.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2TkAgg.configure_subplots.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2TkAgg.configure_subplots.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2TkAgg.configure_subplots.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2TkAgg.configure_subplots.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2TkAgg.configure_subplots', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'configure_subplots', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'configure_subplots(...)' code ##################

        
        # Assigning a Call to a Name (line 737):
        
        # Assigning a Call to a Name (line 737):
        
        # Call to Figure(...): (line 737)
        # Processing the call keyword arguments (line 737)
        
        # Obtaining an instance of the builtin type 'tuple' (line 737)
        tuple_259504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 737, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 737)
        # Adding element type (line 737)
        int_259505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 737, 34), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 737, 34), tuple_259504, int_259505)
        # Adding element type (line 737)
        int_259506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 737, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 737, 34), tuple_259504, int_259506)
        
        keyword_259507 = tuple_259504
        kwargs_259508 = {'figsize': keyword_259507}
        # Getting the type of 'Figure' (line 737)
        Figure_259503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 18), 'Figure', False)
        # Calling Figure(args, kwargs) (line 737)
        Figure_call_result_259509 = invoke(stypy.reporting.localization.Localization(__file__, 737, 18), Figure_259503, *[], **kwargs_259508)
        
        # Assigning a type to the variable 'toolfig' (line 737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 8), 'toolfig', Figure_call_result_259509)
        
        # Assigning a Call to a Name (line 738):
        
        # Assigning a Call to a Name (line 738):
        
        # Call to Tk(...): (line 738)
        # Processing the call keyword arguments (line 738)
        kwargs_259512 = {}
        # Getting the type of 'Tk' (line 738)
        Tk_259510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 17), 'Tk', False)
        # Obtaining the member 'Tk' of a type (line 738)
        Tk_259511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 17), Tk_259510, 'Tk')
        # Calling Tk(args, kwargs) (line 738)
        Tk_call_result_259513 = invoke(stypy.reporting.localization.Localization(__file__, 738, 17), Tk_259511, *[], **kwargs_259512)
        
        # Assigning a type to the variable 'window' (line 738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 738, 8), 'window', Tk_call_result_259513)
        
        # Assigning a Call to a Name (line 739):
        
        # Assigning a Call to a Name (line 739):
        
        # Call to FigureCanvasTkAgg(...): (line 739)
        # Processing the call arguments (line 739)
        # Getting the type of 'toolfig' (line 739)
        toolfig_259515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 35), 'toolfig', False)
        # Processing the call keyword arguments (line 739)
        # Getting the type of 'window' (line 739)
        window_259516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 51), 'window', False)
        keyword_259517 = window_259516
        kwargs_259518 = {'master': keyword_259517}
        # Getting the type of 'FigureCanvasTkAgg' (line 739)
        FigureCanvasTkAgg_259514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 17), 'FigureCanvasTkAgg', False)
        # Calling FigureCanvasTkAgg(args, kwargs) (line 739)
        FigureCanvasTkAgg_call_result_259519 = invoke(stypy.reporting.localization.Localization(__file__, 739, 17), FigureCanvasTkAgg_259514, *[toolfig_259515], **kwargs_259518)
        
        # Assigning a type to the variable 'canvas' (line 739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'canvas', FigureCanvasTkAgg_call_result_259519)
        
        # Call to subplots_adjust(...): (line 740)
        # Processing the call keyword arguments (line 740)
        float_259522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, 36), 'float')
        keyword_259523 = float_259522
        kwargs_259524 = {'top': keyword_259523}
        # Getting the type of 'toolfig' (line 740)
        toolfig_259520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 8), 'toolfig', False)
        # Obtaining the member 'subplots_adjust' of a type (line 740)
        subplots_adjust_259521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 8), toolfig_259520, 'subplots_adjust')
        # Calling subplots_adjust(args, kwargs) (line 740)
        subplots_adjust_call_result_259525 = invoke(stypy.reporting.localization.Localization(__file__, 740, 8), subplots_adjust_259521, *[], **kwargs_259524)
        
        
        # Assigning a Call to a Name (line 741):
        
        # Assigning a Call to a Name (line 741):
        
        # Call to SubplotTool(...): (line 741)
        # Processing the call arguments (line 741)
        # Getting the type of 'self' (line 741)
        self_259527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 28), 'self', False)
        # Obtaining the member 'canvas' of a type (line 741)
        canvas_259528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 28), self_259527, 'canvas')
        # Obtaining the member 'figure' of a type (line 741)
        figure_259529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 28), canvas_259528, 'figure')
        # Getting the type of 'toolfig' (line 741)
        toolfig_259530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 48), 'toolfig', False)
        # Processing the call keyword arguments (line 741)
        kwargs_259531 = {}
        # Getting the type of 'SubplotTool' (line 741)
        SubplotTool_259526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 16), 'SubplotTool', False)
        # Calling SubplotTool(args, kwargs) (line 741)
        SubplotTool_call_result_259532 = invoke(stypy.reporting.localization.Localization(__file__, 741, 16), SubplotTool_259526, *[figure_259529, toolfig_259530], **kwargs_259531)
        
        # Assigning a type to the variable 'tool' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 8), 'tool', SubplotTool_call_result_259532)
        
        # Call to show(...): (line 742)
        # Processing the call keyword arguments (line 742)
        kwargs_259535 = {}
        # Getting the type of 'canvas' (line 742)
        canvas_259533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 8), 'canvas', False)
        # Obtaining the member 'show' of a type (line 742)
        show_259534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 8), canvas_259533, 'show')
        # Calling show(args, kwargs) (line 742)
        show_call_result_259536 = invoke(stypy.reporting.localization.Localization(__file__, 742, 8), show_259534, *[], **kwargs_259535)
        
        
        # Call to pack(...): (line 743)
        # Processing the call keyword arguments (line 743)
        # Getting the type of 'Tk' (line 743)
        Tk_259542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 41), 'Tk', False)
        # Obtaining the member 'TOP' of a type (line 743)
        TOP_259543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 41), Tk_259542, 'TOP')
        keyword_259544 = TOP_259543
        # Getting the type of 'Tk' (line 743)
        Tk_259545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 54), 'Tk', False)
        # Obtaining the member 'BOTH' of a type (line 743)
        BOTH_259546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 54), Tk_259545, 'BOTH')
        keyword_259547 = BOTH_259546
        int_259548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 70), 'int')
        keyword_259549 = int_259548
        kwargs_259550 = {'side': keyword_259544, 'expand': keyword_259549, 'fill': keyword_259547}
        
        # Call to get_tk_widget(...): (line 743)
        # Processing the call keyword arguments (line 743)
        kwargs_259539 = {}
        # Getting the type of 'canvas' (line 743)
        canvas_259537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 8), 'canvas', False)
        # Obtaining the member 'get_tk_widget' of a type (line 743)
        get_tk_widget_259538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 8), canvas_259537, 'get_tk_widget')
        # Calling get_tk_widget(args, kwargs) (line 743)
        get_tk_widget_call_result_259540 = invoke(stypy.reporting.localization.Localization(__file__, 743, 8), get_tk_widget_259538, *[], **kwargs_259539)
        
        # Obtaining the member 'pack' of a type (line 743)
        pack_259541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 8), get_tk_widget_call_result_259540, 'pack')
        # Calling pack(args, kwargs) (line 743)
        pack_call_result_259551 = invoke(stypy.reporting.localization.Localization(__file__, 743, 8), pack_259541, *[], **kwargs_259550)
        
        
        # ################# End of 'configure_subplots(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'configure_subplots' in the type store
        # Getting the type of 'stypy_return_type' (line 736)
        stypy_return_type_259552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259552)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'configure_subplots'
        return stypy_return_type_259552


    @norecursion
    def save_figure(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'save_figure'
        module_type_store = module_type_store.open_function_context('save_figure', 745, 4, False)
        # Assigning a type to the variable 'self' (line 746)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2TkAgg.save_figure.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2TkAgg.save_figure.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2TkAgg.save_figure.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2TkAgg.save_figure.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2TkAgg.save_figure')
        NavigationToolbar2TkAgg.save_figure.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2TkAgg.save_figure.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        NavigationToolbar2TkAgg.save_figure.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2TkAgg.save_figure.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2TkAgg.save_figure.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2TkAgg.save_figure.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2TkAgg.save_figure.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2TkAgg.save_figure', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'save_figure', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'save_figure(...)' code ##################

        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 746, 8))
        
        # 'from six.moves import tkinter_tkfiledialog, tkinter_messagebox' statement (line 746)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
        import_259553 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 746, 8), 'six.moves')

        if (type(import_259553) is not StypyTypeError):

            if (import_259553 != 'pyd_module'):
                __import__(import_259553)
                sys_modules_259554 = sys.modules[import_259553]
                import_from_module(stypy.reporting.localization.Localization(__file__, 746, 8), 'six.moves', sys_modules_259554.module_type_store, module_type_store, ['tkinter_tkfiledialog', 'tkinter_messagebox'])
                nest_module(stypy.reporting.localization.Localization(__file__, 746, 8), __file__, sys_modules_259554, sys_modules_259554.module_type_store, module_type_store)
            else:
                from six.moves import tkinter_tkfiledialog, tkinter_messagebox

                import_from_module(stypy.reporting.localization.Localization(__file__, 746, 8), 'six.moves', None, module_type_store, ['tkinter_tkfiledialog', 'tkinter_messagebox'], [tkinter_tkfiledialog, tkinter_messagebox])

        else:
            # Assigning a type to the variable 'six.moves' (line 746)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 8), 'six.moves', import_259553)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')
        
        
        # Assigning a Call to a Name (line 747):
        
        # Assigning a Call to a Name (line 747):
        
        # Call to copy(...): (line 747)
        # Processing the call keyword arguments (line 747)
        kwargs_259561 = {}
        
        # Call to get_supported_filetypes(...): (line 747)
        # Processing the call keyword arguments (line 747)
        kwargs_259558 = {}
        # Getting the type of 'self' (line 747)
        self_259555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 20), 'self', False)
        # Obtaining the member 'canvas' of a type (line 747)
        canvas_259556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 20), self_259555, 'canvas')
        # Obtaining the member 'get_supported_filetypes' of a type (line 747)
        get_supported_filetypes_259557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 20), canvas_259556, 'get_supported_filetypes')
        # Calling get_supported_filetypes(args, kwargs) (line 747)
        get_supported_filetypes_call_result_259559 = invoke(stypy.reporting.localization.Localization(__file__, 747, 20), get_supported_filetypes_259557, *[], **kwargs_259558)
        
        # Obtaining the member 'copy' of a type (line 747)
        copy_259560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 20), get_supported_filetypes_call_result_259559, 'copy')
        # Calling copy(args, kwargs) (line 747)
        copy_call_result_259562 = invoke(stypy.reporting.localization.Localization(__file__, 747, 20), copy_259560, *[], **kwargs_259561)
        
        # Assigning a type to the variable 'filetypes' (line 747)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 747, 8), 'filetypes', copy_call_result_259562)
        
        # Assigning a Call to a Name (line 748):
        
        # Assigning a Call to a Name (line 748):
        
        # Call to get_default_filetype(...): (line 748)
        # Processing the call keyword arguments (line 748)
        kwargs_259566 = {}
        # Getting the type of 'self' (line 748)
        self_259563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 27), 'self', False)
        # Obtaining the member 'canvas' of a type (line 748)
        canvas_259564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 27), self_259563, 'canvas')
        # Obtaining the member 'get_default_filetype' of a type (line 748)
        get_default_filetype_259565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 27), canvas_259564, 'get_default_filetype')
        # Calling get_default_filetype(args, kwargs) (line 748)
        get_default_filetype_call_result_259567 = invoke(stypy.reporting.localization.Localization(__file__, 748, 27), get_default_filetype_259565, *[], **kwargs_259566)
        
        # Assigning a type to the variable 'default_filetype' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 8), 'default_filetype', get_default_filetype_call_result_259567)
        
        # Assigning a Call to a Name (line 752):
        
        # Assigning a Call to a Name (line 752):
        
        # Call to pop(...): (line 752)
        # Processing the call arguments (line 752)
        # Getting the type of 'default_filetype' (line 752)
        default_filetype_259570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 46), 'default_filetype', False)
        # Processing the call keyword arguments (line 752)
        kwargs_259571 = {}
        # Getting the type of 'filetypes' (line 752)
        filetypes_259568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 32), 'filetypes', False)
        # Obtaining the member 'pop' of a type (line 752)
        pop_259569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 32), filetypes_259568, 'pop')
        # Calling pop(args, kwargs) (line 752)
        pop_call_result_259572 = invoke(stypy.reporting.localization.Localization(__file__, 752, 32), pop_259569, *[default_filetype_259570], **kwargs_259571)
        
        # Assigning a type to the variable 'default_filetype_name' (line 752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 752, 8), 'default_filetype_name', pop_call_result_259572)
        
        # Assigning a BinOp to a Name (line 753):
        
        # Assigning a BinOp to a Name (line 753):
        
        # Obtaining an instance of the builtin type 'list' (line 753)
        list_259573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 753)
        # Adding element type (line 753)
        
        # Obtaining an instance of the builtin type 'tuple' (line 753)
        tuple_259574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 753)
        # Adding element type (line 753)
        # Getting the type of 'default_filetype' (line 753)
        default_filetype_259575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 30), 'default_filetype')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 753, 30), tuple_259574, default_filetype_259575)
        # Adding element type (line 753)
        # Getting the type of 'default_filetype_name' (line 753)
        default_filetype_name_259576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 48), 'default_filetype_name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 753, 30), tuple_259574, default_filetype_name_259576)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 753, 28), list_259573, tuple_259574)
        
        
        # Call to sorted(...): (line 754)
        # Processing the call arguments (line 754)
        
        # Call to iteritems(...): (line 754)
        # Processing the call arguments (line 754)
        # Getting the type of 'filetypes' (line 754)
        filetypes_259580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 51), 'filetypes', False)
        # Processing the call keyword arguments (line 754)
        kwargs_259581 = {}
        # Getting the type of 'six' (line 754)
        six_259578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 37), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 754)
        iteritems_259579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 37), six_259578, 'iteritems')
        # Calling iteritems(args, kwargs) (line 754)
        iteritems_call_result_259582 = invoke(stypy.reporting.localization.Localization(__file__, 754, 37), iteritems_259579, *[filetypes_259580], **kwargs_259581)
        
        # Processing the call keyword arguments (line 754)
        kwargs_259583 = {}
        # Getting the type of 'sorted' (line 754)
        sorted_259577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 30), 'sorted', False)
        # Calling sorted(args, kwargs) (line 754)
        sorted_call_result_259584 = invoke(stypy.reporting.localization.Localization(__file__, 754, 30), sorted_259577, *[iteritems_call_result_259582], **kwargs_259583)
        
        # Applying the binary operator '+' (line 753)
        result_add_259585 = python_operator(stypy.reporting.localization.Localization(__file__, 753, 28), '+', list_259573, sorted_call_result_259584)
        
        # Assigning a type to the variable 'sorted_filetypes' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 8), 'sorted_filetypes', result_add_259585)
        
        # Assigning a ListComp to a Name (line 755):
        
        # Assigning a ListComp to a Name (line 755):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'sorted_filetypes' (line 755)
        sorted_filetypes_259591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 62), 'sorted_filetypes')
        comprehension_259592 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 24), sorted_filetypes_259591)
        # Assigning a type to the variable 'ext' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 24), 'ext', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 24), comprehension_259592))
        # Assigning a type to the variable 'name' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 24), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 24), comprehension_259592))
        
        # Obtaining an instance of the builtin type 'tuple' (line 755)
        tuple_259586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 755)
        # Adding element type (line 755)
        # Getting the type of 'name' (line 755)
        name_259587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 25), 'name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 25), tuple_259586, name_259587)
        # Adding element type (line 755)
        unicode_259588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 31), 'unicode', u'*.%s')
        # Getting the type of 'ext' (line 755)
        ext_259589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 40), 'ext')
        # Applying the binary operator '%' (line 755)
        result_mod_259590 = python_operator(stypy.reporting.localization.Localization(__file__, 755, 31), '%', unicode_259588, ext_259589)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 25), tuple_259586, result_mod_259590)
        
        list_259593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 24), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 24), list_259593, tuple_259586)
        # Assigning a type to the variable 'tk_filetypes' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 8), 'tk_filetypes', list_259593)
        
        # Assigning a Str to a Name (line 762):
        
        # Assigning a Str to a Name (line 762):
        unicode_259594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 762, 27), 'unicode', u'')
        # Assigning a type to the variable 'defaultextension' (line 762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 8), 'defaultextension', unicode_259594)
        
        # Assigning a Call to a Name (line 763):
        
        # Assigning a Call to a Name (line 763):
        
        # Call to expanduser(...): (line 763)
        # Processing the call arguments (line 763)
        
        # Obtaining the type of the subscript
        unicode_259598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 49), 'unicode', u'savefig.directory')
        # Getting the type of 'rcParams' (line 763)
        rcParams_259599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 40), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 763)
        getitem___259600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 40), rcParams_259599, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 763)
        subscript_call_result_259601 = invoke(stypy.reporting.localization.Localization(__file__, 763, 40), getitem___259600, unicode_259598)
        
        # Processing the call keyword arguments (line 763)
        kwargs_259602 = {}
        # Getting the type of 'os' (line 763)
        os_259595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 21), 'os', False)
        # Obtaining the member 'path' of a type (line 763)
        path_259596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 21), os_259595, 'path')
        # Obtaining the member 'expanduser' of a type (line 763)
        expanduser_259597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 21), path_259596, 'expanduser')
        # Calling expanduser(args, kwargs) (line 763)
        expanduser_call_result_259603 = invoke(stypy.reporting.localization.Localization(__file__, 763, 21), expanduser_259597, *[subscript_call_result_259601], **kwargs_259602)
        
        # Assigning a type to the variable 'initialdir' (line 763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 8), 'initialdir', expanduser_call_result_259603)
        
        # Assigning a Call to a Name (line 764):
        
        # Assigning a Call to a Name (line 764):
        
        # Call to get_default_filename(...): (line 764)
        # Processing the call keyword arguments (line 764)
        kwargs_259607 = {}
        # Getting the type of 'self' (line 764)
        self_259604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 22), 'self', False)
        # Obtaining the member 'canvas' of a type (line 764)
        canvas_259605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 22), self_259604, 'canvas')
        # Obtaining the member 'get_default_filename' of a type (line 764)
        get_default_filename_259606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 22), canvas_259605, 'get_default_filename')
        # Calling get_default_filename(args, kwargs) (line 764)
        get_default_filename_call_result_259608 = invoke(stypy.reporting.localization.Localization(__file__, 764, 22), get_default_filename_259606, *[], **kwargs_259607)
        
        # Assigning a type to the variable 'initialfile' (line 764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 8), 'initialfile', get_default_filename_call_result_259608)
        
        # Assigning a Call to a Name (line 765):
        
        # Assigning a Call to a Name (line 765):
        
        # Call to asksaveasfilename(...): (line 765)
        # Processing the call keyword arguments (line 765)
        # Getting the type of 'self' (line 766)
        self_259611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 19), 'self', False)
        # Obtaining the member 'window' of a type (line 766)
        window_259612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 19), self_259611, 'window')
        keyword_259613 = window_259612
        unicode_259614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 18), 'unicode', u'Save the figure')
        keyword_259615 = unicode_259614
        # Getting the type of 'tk_filetypes' (line 768)
        tk_filetypes_259616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 22), 'tk_filetypes', False)
        keyword_259617 = tk_filetypes_259616
        # Getting the type of 'defaultextension' (line 769)
        defaultextension_259618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 29), 'defaultextension', False)
        keyword_259619 = defaultextension_259618
        # Getting the type of 'initialdir' (line 770)
        initialdir_259620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 23), 'initialdir', False)
        keyword_259621 = initialdir_259620
        # Getting the type of 'initialfile' (line 771)
        initialfile_259622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 24), 'initialfile', False)
        keyword_259623 = initialfile_259622
        kwargs_259624 = {'initialdir': keyword_259621, 'title': keyword_259615, 'initialfile': keyword_259623, 'master': keyword_259613, 'defaultextension': keyword_259619, 'filetypes': keyword_259617}
        # Getting the type of 'tkinter_tkfiledialog' (line 765)
        tkinter_tkfiledialog_259609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 16), 'tkinter_tkfiledialog', False)
        # Obtaining the member 'asksaveasfilename' of a type (line 765)
        asksaveasfilename_259610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 16), tkinter_tkfiledialog_259609, 'asksaveasfilename')
        # Calling asksaveasfilename(args, kwargs) (line 765)
        asksaveasfilename_call_result_259625 = invoke(stypy.reporting.localization.Localization(__file__, 765, 16), asksaveasfilename_259610, *[], **kwargs_259624)
        
        # Assigning a type to the variable 'fname' (line 765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 8), 'fname', asksaveasfilename_call_result_259625)
        
        
        # Getting the type of 'fname' (line 774)
        fname_259626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 11), 'fname')
        
        # Obtaining an instance of the builtin type 'list' (line 774)
        list_259627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 774)
        # Adding element type (line 774)
        unicode_259628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 21), 'unicode', u'')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 20), list_259627, unicode_259628)
        # Adding element type (line 774)
        
        # Obtaining an instance of the builtin type 'tuple' (line 774)
        tuple_259629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 774)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 20), list_259627, tuple_259629)
        
        # Applying the binary operator 'in' (line 774)
        result_contains_259630 = python_operator(stypy.reporting.localization.Localization(__file__, 774, 11), 'in', fname_259626, list_259627)
        
        # Testing the type of an if condition (line 774)
        if_condition_259631 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 774, 8), result_contains_259630)
        # Assigning a type to the variable 'if_condition_259631' (line 774)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 8), 'if_condition_259631', if_condition_259631)
        # SSA begins for if statement (line 774)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 775, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 774)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'initialdir' (line 777)
        initialdir_259632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 11), 'initialdir')
        unicode_259633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 777, 25), 'unicode', u'')
        # Applying the binary operator '!=' (line 777)
        result_ne_259634 = python_operator(stypy.reporting.localization.Localization(__file__, 777, 11), '!=', initialdir_259632, unicode_259633)
        
        # Testing the type of an if condition (line 777)
        if_condition_259635 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 777, 8), result_ne_259634)
        # Assigning a type to the variable 'if_condition_259635' (line 777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 8), 'if_condition_259635', if_condition_259635)
        # SSA begins for if statement (line 777)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 778):
        
        # Assigning a Call to a Subscript (line 778):
        
        # Call to dirname(...): (line 779)
        # Processing the call arguments (line 779)
        
        # Call to text_type(...): (line 779)
        # Processing the call arguments (line 779)
        # Getting the type of 'fname' (line 779)
        fname_259641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 46), 'fname', False)
        # Processing the call keyword arguments (line 779)
        kwargs_259642 = {}
        # Getting the type of 'six' (line 779)
        six_259639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 32), 'six', False)
        # Obtaining the member 'text_type' of a type (line 779)
        text_type_259640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 32), six_259639, 'text_type')
        # Calling text_type(args, kwargs) (line 779)
        text_type_call_result_259643 = invoke(stypy.reporting.localization.Localization(__file__, 779, 32), text_type_259640, *[fname_259641], **kwargs_259642)
        
        # Processing the call keyword arguments (line 779)
        kwargs_259644 = {}
        # Getting the type of 'os' (line 779)
        os_259636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 16), 'os', False)
        # Obtaining the member 'path' of a type (line 779)
        path_259637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 16), os_259636, 'path')
        # Obtaining the member 'dirname' of a type (line 779)
        dirname_259638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 16), path_259637, 'dirname')
        # Calling dirname(args, kwargs) (line 779)
        dirname_call_result_259645 = invoke(stypy.reporting.localization.Localization(__file__, 779, 16), dirname_259638, *[text_type_call_result_259643], **kwargs_259644)
        
        # Getting the type of 'rcParams' (line 778)
        rcParams_259646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 12), 'rcParams')
        unicode_259647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, 21), 'unicode', u'savefig.directory')
        # Storing an element on a container (line 778)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 778, 12), rcParams_259646, (unicode_259647, dirname_call_result_259645))
        # SSA join for if statement (line 777)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 780)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to savefig(...): (line 782)
        # Processing the call arguments (line 782)
        # Getting the type of 'fname' (line 782)
        fname_259652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 39), 'fname', False)
        # Processing the call keyword arguments (line 782)
        kwargs_259653 = {}
        # Getting the type of 'self' (line 782)
        self_259648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 782)
        canvas_259649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 12), self_259648, 'canvas')
        # Obtaining the member 'figure' of a type (line 782)
        figure_259650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 12), canvas_259649, 'figure')
        # Obtaining the member 'savefig' of a type (line 782)
        savefig_259651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 12), figure_259650, 'savefig')
        # Calling savefig(args, kwargs) (line 782)
        savefig_call_result_259654 = invoke(stypy.reporting.localization.Localization(__file__, 782, 12), savefig_259651, *[fname_259652], **kwargs_259653)
        
        # SSA branch for the except part of a try statement (line 780)
        # SSA branch for the except 'Exception' branch of a try statement (line 780)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'Exception' (line 783)
        Exception_259655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 15), 'Exception')
        # Assigning a type to the variable 'e' (line 783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 8), 'e', Exception_259655)
        
        # Call to showerror(...): (line 784)
        # Processing the call arguments (line 784)
        unicode_259658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 784, 41), 'unicode', u'Error saving file')
        
        # Call to str(...): (line 784)
        # Processing the call arguments (line 784)
        # Getting the type of 'e' (line 784)
        e_259660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 66), 'e', False)
        # Processing the call keyword arguments (line 784)
        kwargs_259661 = {}
        # Getting the type of 'str' (line 784)
        str_259659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 62), 'str', False)
        # Calling str(args, kwargs) (line 784)
        str_call_result_259662 = invoke(stypy.reporting.localization.Localization(__file__, 784, 62), str_259659, *[e_259660], **kwargs_259661)
        
        # Processing the call keyword arguments (line 784)
        kwargs_259663 = {}
        # Getting the type of 'tkinter_messagebox' (line 784)
        tkinter_messagebox_259656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 12), 'tkinter_messagebox', False)
        # Obtaining the member 'showerror' of a type (line 784)
        showerror_259657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 12), tkinter_messagebox_259656, 'showerror')
        # Calling showerror(args, kwargs) (line 784)
        showerror_call_result_259664 = invoke(stypy.reporting.localization.Localization(__file__, 784, 12), showerror_259657, *[unicode_259658, str_call_result_259662], **kwargs_259663)
        
        # SSA join for try-except statement (line 780)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'save_figure(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'save_figure' in the type store
        # Getting the type of 'stypy_return_type' (line 745)
        stypy_return_type_259665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259665)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'save_figure'
        return stypy_return_type_259665


    @norecursion
    def set_active(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_active'
        module_type_store = module_type_store.open_function_context('set_active', 786, 4, False)
        # Assigning a type to the variable 'self' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2TkAgg.set_active.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2TkAgg.set_active.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2TkAgg.set_active.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2TkAgg.set_active.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2TkAgg.set_active')
        NavigationToolbar2TkAgg.set_active.__dict__.__setitem__('stypy_param_names_list', ['ind'])
        NavigationToolbar2TkAgg.set_active.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2TkAgg.set_active.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2TkAgg.set_active.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2TkAgg.set_active.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2TkAgg.set_active.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2TkAgg.set_active.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2TkAgg.set_active', ['ind'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_active', localization, ['ind'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_active(...)' code ##################

        
        # Assigning a Name to a Attribute (line 787):
        
        # Assigning a Name to a Attribute (line 787):
        # Getting the type of 'ind' (line 787)
        ind_259666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 20), 'ind')
        # Getting the type of 'self' (line 787)
        self_259667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 8), 'self')
        # Setting the type of the member '_ind' of a type (line 787)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 8), self_259667, '_ind', ind_259666)
        
        # Assigning a ListComp to a Attribute (line 788):
        
        # Assigning a ListComp to a Attribute (line 788):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'self' (line 788)
        self_259673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 47), 'self')
        # Obtaining the member '_ind' of a type (line 788)
        _ind_259674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 47), self_259673, '_ind')
        comprehension_259675 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 788, 24), _ind_259674)
        # Assigning a type to the variable 'i' (line 788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 24), 'i', comprehension_259675)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 788)
        i_259668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 35), 'i')
        # Getting the type of 'self' (line 788)
        self_259669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 24), 'self')
        # Obtaining the member '_axes' of a type (line 788)
        _axes_259670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 24), self_259669, '_axes')
        # Obtaining the member '__getitem__' of a type (line 788)
        getitem___259671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 24), _axes_259670, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 788)
        subscript_call_result_259672 = invoke(stypy.reporting.localization.Localization(__file__, 788, 24), getitem___259671, i_259668)
        
        list_259676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 788, 24), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 788, 24), list_259676, subscript_call_result_259672)
        # Getting the type of 'self' (line 788)
        self_259677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 8), 'self')
        # Setting the type of the member '_active' of a type (line 788)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 8), self_259677, '_active', list_259676)
        
        # ################# End of 'set_active(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_active' in the type store
        # Getting the type of 'stypy_return_type' (line 786)
        stypy_return_type_259678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259678)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_active'
        return stypy_return_type_259678


    @norecursion
    def update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update'
        module_type_store = module_type_store.open_function_context('update', 790, 4, False)
        # Assigning a type to the variable 'self' (line 791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2TkAgg.update.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2TkAgg.update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2TkAgg.update.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2TkAgg.update.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2TkAgg.update')
        NavigationToolbar2TkAgg.update.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2TkAgg.update.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2TkAgg.update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2TkAgg.update.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2TkAgg.update.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2TkAgg.update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2TkAgg.update.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2TkAgg.update', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update(...)' code ##################

        
        # Assigning a Call to a Name (line 791):
        
        # Assigning a Call to a Name (line 791):
        
        # Call to FocusManager(...): (line 791)
        # Processing the call keyword arguments (line 791)
        kwargs_259681 = {}
        # Getting the type of 'windowing' (line 791)
        windowing_259679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 17), 'windowing', False)
        # Obtaining the member 'FocusManager' of a type (line 791)
        FocusManager_259680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 17), windowing_259679, 'FocusManager')
        # Calling FocusManager(args, kwargs) (line 791)
        FocusManager_call_result_259682 = invoke(stypy.reporting.localization.Localization(__file__, 791, 17), FocusManager_259680, *[], **kwargs_259681)
        
        # Assigning a type to the variable '_focus' (line 791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 8), '_focus', FocusManager_call_result_259682)
        
        # Assigning a Attribute to a Attribute (line 792):
        
        # Assigning a Attribute to a Attribute (line 792):
        # Getting the type of 'self' (line 792)
        self_259683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 21), 'self')
        # Obtaining the member 'canvas' of a type (line 792)
        canvas_259684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 21), self_259683, 'canvas')
        # Obtaining the member 'figure' of a type (line 792)
        figure_259685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 21), canvas_259684, 'figure')
        # Obtaining the member 'axes' of a type (line 792)
        axes_259686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 21), figure_259685, 'axes')
        # Getting the type of 'self' (line 792)
        self_259687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 8), 'self')
        # Setting the type of the member '_axes' of a type (line 792)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 8), self_259687, '_axes', axes_259686)
        
        # Call to update(...): (line 793)
        # Processing the call arguments (line 793)
        # Getting the type of 'self' (line 793)
        self_259690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 34), 'self', False)
        # Processing the call keyword arguments (line 793)
        kwargs_259691 = {}
        # Getting the type of 'NavigationToolbar2' (line 793)
        NavigationToolbar2_259688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 8), 'NavigationToolbar2', False)
        # Obtaining the member 'update' of a type (line 793)
        update_259689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 8), NavigationToolbar2_259688, 'update')
        # Calling update(args, kwargs) (line 793)
        update_call_result_259692 = invoke(stypy.reporting.localization.Localization(__file__, 793, 8), update_259689, *[self_259690], **kwargs_259691)
        
        
        # ################# End of 'update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update' in the type store
        # Getting the type of 'stypy_return_type' (line 790)
        stypy_return_type_259693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259693)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update'
        return stypy_return_type_259693


# Assigning a type to the variable 'NavigationToolbar2TkAgg' (line 651)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 651, 0), 'NavigationToolbar2TkAgg', NavigationToolbar2TkAgg)
# Declaration of the 'ToolTip' class

class ToolTip(object, ):
    unicode_259694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 800, (-1)), 'unicode', u'\n    Tooltip recipe from\n    http://www.voidspace.org.uk/python/weblog/arch_d7_2006_07_01.shtml#e387\n    ')

    @staticmethod
    @norecursion
    def createToolTip(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'createToolTip'
        module_type_store = module_type_store.open_function_context('createToolTip', 801, 4, False)
        
        # Passed parameters checking function
        ToolTip.createToolTip.__dict__.__setitem__('stypy_localization', localization)
        ToolTip.createToolTip.__dict__.__setitem__('stypy_type_of_self', None)
        ToolTip.createToolTip.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolTip.createToolTip.__dict__.__setitem__('stypy_function_name', 'createToolTip')
        ToolTip.createToolTip.__dict__.__setitem__('stypy_param_names_list', ['widget', 'text'])
        ToolTip.createToolTip.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolTip.createToolTip.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolTip.createToolTip.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolTip.createToolTip.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolTip.createToolTip.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolTip.createToolTip.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, 'createToolTip', ['widget', 'text'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'createToolTip', localization, ['text'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'createToolTip(...)' code ##################

        
        # Assigning a Call to a Name (line 803):
        
        # Assigning a Call to a Name (line 803):
        
        # Call to ToolTip(...): (line 803)
        # Processing the call arguments (line 803)
        # Getting the type of 'widget' (line 803)
        widget_259696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 26), 'widget', False)
        # Processing the call keyword arguments (line 803)
        kwargs_259697 = {}
        # Getting the type of 'ToolTip' (line 803)
        ToolTip_259695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 18), 'ToolTip', False)
        # Calling ToolTip(args, kwargs) (line 803)
        ToolTip_call_result_259698 = invoke(stypy.reporting.localization.Localization(__file__, 803, 18), ToolTip_259695, *[widget_259696], **kwargs_259697)
        
        # Assigning a type to the variable 'toolTip' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'toolTip', ToolTip_call_result_259698)

        @norecursion
        def enter(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'enter'
            module_type_store = module_type_store.open_function_context('enter', 804, 8, False)
            
            # Passed parameters checking function
            enter.stypy_localization = localization
            enter.stypy_type_of_self = None
            enter.stypy_type_store = module_type_store
            enter.stypy_function_name = 'enter'
            enter.stypy_param_names_list = ['event']
            enter.stypy_varargs_param_name = None
            enter.stypy_kwargs_param_name = None
            enter.stypy_call_defaults = defaults
            enter.stypy_call_varargs = varargs
            enter.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'enter', ['event'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'enter', localization, ['event'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'enter(...)' code ##################

            
            # Call to showtip(...): (line 805)
            # Processing the call arguments (line 805)
            # Getting the type of 'text' (line 805)
            text_259701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 28), 'text', False)
            # Processing the call keyword arguments (line 805)
            kwargs_259702 = {}
            # Getting the type of 'toolTip' (line 805)
            toolTip_259699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 12), 'toolTip', False)
            # Obtaining the member 'showtip' of a type (line 805)
            showtip_259700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 12), toolTip_259699, 'showtip')
            # Calling showtip(args, kwargs) (line 805)
            showtip_call_result_259703 = invoke(stypy.reporting.localization.Localization(__file__, 805, 12), showtip_259700, *[text_259701], **kwargs_259702)
            
            
            # ################# End of 'enter(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'enter' in the type store
            # Getting the type of 'stypy_return_type' (line 804)
            stypy_return_type_259704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_259704)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'enter'
            return stypy_return_type_259704

        # Assigning a type to the variable 'enter' (line 804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 8), 'enter', enter)

        @norecursion
        def leave(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'leave'
            module_type_store = module_type_store.open_function_context('leave', 806, 8, False)
            
            # Passed parameters checking function
            leave.stypy_localization = localization
            leave.stypy_type_of_self = None
            leave.stypy_type_store = module_type_store
            leave.stypy_function_name = 'leave'
            leave.stypy_param_names_list = ['event']
            leave.stypy_varargs_param_name = None
            leave.stypy_kwargs_param_name = None
            leave.stypy_call_defaults = defaults
            leave.stypy_call_varargs = varargs
            leave.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'leave', ['event'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'leave', localization, ['event'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'leave(...)' code ##################

            
            # Call to hidetip(...): (line 807)
            # Processing the call keyword arguments (line 807)
            kwargs_259707 = {}
            # Getting the type of 'toolTip' (line 807)
            toolTip_259705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 12), 'toolTip', False)
            # Obtaining the member 'hidetip' of a type (line 807)
            hidetip_259706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 12), toolTip_259705, 'hidetip')
            # Calling hidetip(args, kwargs) (line 807)
            hidetip_call_result_259708 = invoke(stypy.reporting.localization.Localization(__file__, 807, 12), hidetip_259706, *[], **kwargs_259707)
            
            
            # ################# End of 'leave(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'leave' in the type store
            # Getting the type of 'stypy_return_type' (line 806)
            stypy_return_type_259709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_259709)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'leave'
            return stypy_return_type_259709

        # Assigning a type to the variable 'leave' (line 806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 8), 'leave', leave)
        
        # Call to bind(...): (line 808)
        # Processing the call arguments (line 808)
        unicode_259712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 20), 'unicode', u'<Enter>')
        # Getting the type of 'enter' (line 808)
        enter_259713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 31), 'enter', False)
        # Processing the call keyword arguments (line 808)
        kwargs_259714 = {}
        # Getting the type of 'widget' (line 808)
        widget_259710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 8), 'widget', False)
        # Obtaining the member 'bind' of a type (line 808)
        bind_259711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 8), widget_259710, 'bind')
        # Calling bind(args, kwargs) (line 808)
        bind_call_result_259715 = invoke(stypy.reporting.localization.Localization(__file__, 808, 8), bind_259711, *[unicode_259712, enter_259713], **kwargs_259714)
        
        
        # Call to bind(...): (line 809)
        # Processing the call arguments (line 809)
        unicode_259718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 20), 'unicode', u'<Leave>')
        # Getting the type of 'leave' (line 809)
        leave_259719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 31), 'leave', False)
        # Processing the call keyword arguments (line 809)
        kwargs_259720 = {}
        # Getting the type of 'widget' (line 809)
        widget_259716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 8), 'widget', False)
        # Obtaining the member 'bind' of a type (line 809)
        bind_259717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 8), widget_259716, 'bind')
        # Calling bind(args, kwargs) (line 809)
        bind_call_result_259721 = invoke(stypy.reporting.localization.Localization(__file__, 809, 8), bind_259717, *[unicode_259718, leave_259719], **kwargs_259720)
        
        
        # ################# End of 'createToolTip(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'createToolTip' in the type store
        # Getting the type of 'stypy_return_type' (line 801)
        stypy_return_type_259722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259722)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'createToolTip'
        return stypy_return_type_259722


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 811, 4, False)
        # Assigning a type to the variable 'self' (line 812)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 812, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolTip.__init__', ['widget'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['widget'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 812):
        
        # Assigning a Name to a Attribute (line 812):
        # Getting the type of 'widget' (line 812)
        widget_259723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 22), 'widget')
        # Getting the type of 'self' (line 812)
        self_259724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 8), 'self')
        # Setting the type of the member 'widget' of a type (line 812)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 8), self_259724, 'widget', widget_259723)
        
        # Assigning a Name to a Attribute (line 813):
        
        # Assigning a Name to a Attribute (line 813):
        # Getting the type of 'None' (line 813)
        None_259725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 25), 'None')
        # Getting the type of 'self' (line 813)
        self_259726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 8), 'self')
        # Setting the type of the member 'tipwindow' of a type (line 813)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 813, 8), self_259726, 'tipwindow', None_259725)
        
        # Assigning a Name to a Attribute (line 814):
        
        # Assigning a Name to a Attribute (line 814):
        # Getting the type of 'None' (line 814)
        None_259727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 18), 'None')
        # Getting the type of 'self' (line 814)
        self_259728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 8), 'self')
        # Setting the type of the member 'id' of a type (line 814)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 8), self_259728, 'id', None_259727)
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Num to a Attribute (line 815):
        int_259729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 26), 'int')
        # Getting the type of 'self' (line 815)
        self_259730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 17), 'self')
        # Setting the type of the member 'y' of a type (line 815)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 17), self_259730, 'y', int_259729)
        
        # Assigning a Attribute to a Attribute (line 815):
        # Getting the type of 'self' (line 815)
        self_259731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 17), 'self')
        # Obtaining the member 'y' of a type (line 815)
        y_259732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 17), self_259731, 'y')
        # Getting the type of 'self' (line 815)
        self_259733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 8), 'self')
        # Setting the type of the member 'x' of a type (line 815)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 8), self_259733, 'x', y_259732)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def showtip(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'showtip'
        module_type_store = module_type_store.open_function_context('showtip', 817, 4, False)
        # Assigning a type to the variable 'self' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolTip.showtip.__dict__.__setitem__('stypy_localization', localization)
        ToolTip.showtip.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolTip.showtip.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolTip.showtip.__dict__.__setitem__('stypy_function_name', 'ToolTip.showtip')
        ToolTip.showtip.__dict__.__setitem__('stypy_param_names_list', ['text'])
        ToolTip.showtip.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolTip.showtip.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolTip.showtip.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolTip.showtip.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolTip.showtip.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolTip.showtip.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolTip.showtip', ['text'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'showtip', localization, ['text'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'showtip(...)' code ##################

        unicode_259734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 8), 'unicode', u'Display text in tooltip window')
        
        # Assigning a Name to a Attribute (line 819):
        
        # Assigning a Name to a Attribute (line 819):
        # Getting the type of 'text' (line 819)
        text_259735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 20), 'text')
        # Getting the type of 'self' (line 819)
        self_259736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 8), 'self')
        # Setting the type of the member 'text' of a type (line 819)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 8), self_259736, 'text', text_259735)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 820)
        self_259737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 11), 'self')
        # Obtaining the member 'tipwindow' of a type (line 820)
        tipwindow_259738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 11), self_259737, 'tipwindow')
        
        # Getting the type of 'self' (line 820)
        self_259739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 33), 'self')
        # Obtaining the member 'text' of a type (line 820)
        text_259740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 33), self_259739, 'text')
        # Applying the 'not' unary operator (line 820)
        result_not__259741 = python_operator(stypy.reporting.localization.Localization(__file__, 820, 29), 'not', text_259740)
        
        # Applying the binary operator 'or' (line 820)
        result_or_keyword_259742 = python_operator(stypy.reporting.localization.Localization(__file__, 820, 11), 'or', tipwindow_259738, result_not__259741)
        
        # Testing the type of an if condition (line 820)
        if_condition_259743 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 820, 8), result_or_keyword_259742)
        # Assigning a type to the variable 'if_condition_259743' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'if_condition_259743', if_condition_259743)
        # SSA begins for if statement (line 820)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 820)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 822):
        
        # Assigning a Call to a Name:
        
        # Call to bbox(...): (line 822)
        # Processing the call arguments (line 822)
        unicode_259747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 38), 'unicode', u'insert')
        # Processing the call keyword arguments (line 822)
        kwargs_259748 = {}
        # Getting the type of 'self' (line 822)
        self_259744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 21), 'self', False)
        # Obtaining the member 'widget' of a type (line 822)
        widget_259745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 21), self_259744, 'widget')
        # Obtaining the member 'bbox' of a type (line 822)
        bbox_259746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 21), widget_259745, 'bbox')
        # Calling bbox(args, kwargs) (line 822)
        bbox_call_result_259749 = invoke(stypy.reporting.localization.Localization(__file__, 822, 21), bbox_259746, *[unicode_259747], **kwargs_259748)
        
        # Assigning a type to the variable 'call_assignment_257459' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'call_assignment_257459', bbox_call_result_259749)
        
        # Assigning a Call to a Name (line 822):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_259752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 8), 'int')
        # Processing the call keyword arguments
        kwargs_259753 = {}
        # Getting the type of 'call_assignment_257459' (line 822)
        call_assignment_257459_259750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'call_assignment_257459', False)
        # Obtaining the member '__getitem__' of a type (line 822)
        getitem___259751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 8), call_assignment_257459_259750, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_259754 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___259751, *[int_259752], **kwargs_259753)
        
        # Assigning a type to the variable 'call_assignment_257460' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'call_assignment_257460', getitem___call_result_259754)
        
        # Assigning a Name to a Name (line 822):
        # Getting the type of 'call_assignment_257460' (line 822)
        call_assignment_257460_259755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'call_assignment_257460')
        # Assigning a type to the variable 'x' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'x', call_assignment_257460_259755)
        
        # Assigning a Call to a Name (line 822):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_259758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 8), 'int')
        # Processing the call keyword arguments
        kwargs_259759 = {}
        # Getting the type of 'call_assignment_257459' (line 822)
        call_assignment_257459_259756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'call_assignment_257459', False)
        # Obtaining the member '__getitem__' of a type (line 822)
        getitem___259757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 8), call_assignment_257459_259756, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_259760 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___259757, *[int_259758], **kwargs_259759)
        
        # Assigning a type to the variable 'call_assignment_257461' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'call_assignment_257461', getitem___call_result_259760)
        
        # Assigning a Name to a Name (line 822):
        # Getting the type of 'call_assignment_257461' (line 822)
        call_assignment_257461_259761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'call_assignment_257461')
        # Assigning a type to the variable 'y' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 11), 'y', call_assignment_257461_259761)
        
        # Assigning a Call to a Name (line 822):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_259764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 8), 'int')
        # Processing the call keyword arguments
        kwargs_259765 = {}
        # Getting the type of 'call_assignment_257459' (line 822)
        call_assignment_257459_259762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'call_assignment_257459', False)
        # Obtaining the member '__getitem__' of a type (line 822)
        getitem___259763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 8), call_assignment_257459_259762, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_259766 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___259763, *[int_259764], **kwargs_259765)
        
        # Assigning a type to the variable 'call_assignment_257462' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'call_assignment_257462', getitem___call_result_259766)
        
        # Assigning a Name to a Name (line 822):
        # Getting the type of 'call_assignment_257462' (line 822)
        call_assignment_257462_259767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'call_assignment_257462')
        # Assigning a type to the variable '_' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 14), '_', call_assignment_257462_259767)
        
        # Assigning a Call to a Name (line 822):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_259770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 8), 'int')
        # Processing the call keyword arguments
        kwargs_259771 = {}
        # Getting the type of 'call_assignment_257459' (line 822)
        call_assignment_257459_259768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'call_assignment_257459', False)
        # Obtaining the member '__getitem__' of a type (line 822)
        getitem___259769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 8), call_assignment_257459_259768, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_259772 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___259769, *[int_259770], **kwargs_259771)
        
        # Assigning a type to the variable 'call_assignment_257463' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'call_assignment_257463', getitem___call_result_259772)
        
        # Assigning a Name to a Name (line 822):
        # Getting the type of 'call_assignment_257463' (line 822)
        call_assignment_257463_259773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'call_assignment_257463')
        # Assigning a type to the variable '_' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 17), '_', call_assignment_257463_259773)
        
        # Assigning a BinOp to a Name (line 823):
        
        # Assigning a BinOp to a Name (line 823):
        # Getting the type of 'x' (line 823)
        x_259774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 12), 'x')
        
        # Call to winfo_rootx(...): (line 823)
        # Processing the call keyword arguments (line 823)
        kwargs_259778 = {}
        # Getting the type of 'self' (line 823)
        self_259775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 16), 'self', False)
        # Obtaining the member 'widget' of a type (line 823)
        widget_259776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 16), self_259775, 'widget')
        # Obtaining the member 'winfo_rootx' of a type (line 823)
        winfo_rootx_259777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 16), widget_259776, 'winfo_rootx')
        # Calling winfo_rootx(args, kwargs) (line 823)
        winfo_rootx_call_result_259779 = invoke(stypy.reporting.localization.Localization(__file__, 823, 16), winfo_rootx_259777, *[], **kwargs_259778)
        
        # Applying the binary operator '+' (line 823)
        result_add_259780 = python_operator(stypy.reporting.localization.Localization(__file__, 823, 12), '+', x_259774, winfo_rootx_call_result_259779)
        
        int_259781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 44), 'int')
        # Applying the binary operator '+' (line 823)
        result_add_259782 = python_operator(stypy.reporting.localization.Localization(__file__, 823, 42), '+', result_add_259780, int_259781)
        
        # Assigning a type to the variable 'x' (line 823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 8), 'x', result_add_259782)
        
        # Assigning a BinOp to a Name (line 824):
        
        # Assigning a BinOp to a Name (line 824):
        # Getting the type of 'y' (line 824)
        y_259783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 12), 'y')
        
        # Call to winfo_rooty(...): (line 824)
        # Processing the call keyword arguments (line 824)
        kwargs_259787 = {}
        # Getting the type of 'self' (line 824)
        self_259784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 16), 'self', False)
        # Obtaining the member 'widget' of a type (line 824)
        widget_259785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 824, 16), self_259784, 'widget')
        # Obtaining the member 'winfo_rooty' of a type (line 824)
        winfo_rooty_259786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 824, 16), widget_259785, 'winfo_rooty')
        # Calling winfo_rooty(args, kwargs) (line 824)
        winfo_rooty_call_result_259788 = invoke(stypy.reporting.localization.Localization(__file__, 824, 16), winfo_rooty_259786, *[], **kwargs_259787)
        
        # Applying the binary operator '+' (line 824)
        result_add_259789 = python_operator(stypy.reporting.localization.Localization(__file__, 824, 12), '+', y_259783, winfo_rooty_call_result_259788)
        
        # Assigning a type to the variable 'y' (line 824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 8), 'y', result_add_259789)
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Call to a Name (line 825):
        
        # Call to Toplevel(...): (line 825)
        # Processing the call arguments (line 825)
        # Getting the type of 'self' (line 825)
        self_259792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 42), 'self', False)
        # Obtaining the member 'widget' of a type (line 825)
        widget_259793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 42), self_259792, 'widget')
        # Processing the call keyword arguments (line 825)
        kwargs_259794 = {}
        # Getting the type of 'Tk' (line 825)
        Tk_259790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 30), 'Tk', False)
        # Obtaining the member 'Toplevel' of a type (line 825)
        Toplevel_259791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 30), Tk_259790, 'Toplevel')
        # Calling Toplevel(args, kwargs) (line 825)
        Toplevel_call_result_259795 = invoke(stypy.reporting.localization.Localization(__file__, 825, 30), Toplevel_259791, *[widget_259793], **kwargs_259794)
        
        # Assigning a type to the variable 'tw' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 25), 'tw', Toplevel_call_result_259795)
        
        # Assigning a Name to a Attribute (line 825):
        # Getting the type of 'tw' (line 825)
        tw_259796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 25), 'tw')
        # Getting the type of 'self' (line 825)
        self_259797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'self')
        # Setting the type of the member 'tipwindow' of a type (line 825)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 8), self_259797, 'tipwindow', tw_259796)
        
        # Call to wm_overrideredirect(...): (line 826)
        # Processing the call arguments (line 826)
        int_259800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 31), 'int')
        # Processing the call keyword arguments (line 826)
        kwargs_259801 = {}
        # Getting the type of 'tw' (line 826)
        tw_259798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'tw', False)
        # Obtaining the member 'wm_overrideredirect' of a type (line 826)
        wm_overrideredirect_259799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 8), tw_259798, 'wm_overrideredirect')
        # Calling wm_overrideredirect(args, kwargs) (line 826)
        wm_overrideredirect_call_result_259802 = invoke(stypy.reporting.localization.Localization(__file__, 826, 8), wm_overrideredirect_259799, *[int_259800], **kwargs_259801)
        
        
        # Call to wm_geometry(...): (line 827)
        # Processing the call arguments (line 827)
        unicode_259805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 23), 'unicode', u'+%d+%d')
        
        # Obtaining an instance of the builtin type 'tuple' (line 827)
        tuple_259806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 827)
        # Adding element type (line 827)
        # Getting the type of 'x' (line 827)
        x_259807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 35), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 827, 35), tuple_259806, x_259807)
        # Adding element type (line 827)
        # Getting the type of 'y' (line 827)
        y_259808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 38), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 827, 35), tuple_259806, y_259808)
        
        # Applying the binary operator '%' (line 827)
        result_mod_259809 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 23), '%', unicode_259805, tuple_259806)
        
        # Processing the call keyword arguments (line 827)
        kwargs_259810 = {}
        # Getting the type of 'tw' (line 827)
        tw_259803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 8), 'tw', False)
        # Obtaining the member 'wm_geometry' of a type (line 827)
        wm_geometry_259804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 8), tw_259803, 'wm_geometry')
        # Calling wm_geometry(args, kwargs) (line 827)
        wm_geometry_call_result_259811 = invoke(stypy.reporting.localization.Localization(__file__, 827, 8), wm_geometry_259804, *[result_mod_259809], **kwargs_259810)
        
        
        
        # SSA begins for try-except statement (line 828)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to call(...): (line 830)
        # Processing the call arguments (line 830)
        unicode_259815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 23), 'unicode', u'::tk::unsupported::MacWindowStyle')
        unicode_259816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 23), 'unicode', u'style')
        # Getting the type of 'tw' (line 831)
        tw_259817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 32), 'tw', False)
        # Obtaining the member '_w' of a type (line 831)
        _w_259818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 32), tw_259817, '_w')
        unicode_259819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 23), 'unicode', u'help')
        unicode_259820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 31), 'unicode', u'noActivates')
        # Processing the call keyword arguments (line 830)
        kwargs_259821 = {}
        # Getting the type of 'tw' (line 830)
        tw_259812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 12), 'tw', False)
        # Obtaining the member 'tk' of a type (line 830)
        tk_259813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 12), tw_259812, 'tk')
        # Obtaining the member 'call' of a type (line 830)
        call_259814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 12), tk_259813, 'call')
        # Calling call(args, kwargs) (line 830)
        call_call_result_259822 = invoke(stypy.reporting.localization.Localization(__file__, 830, 12), call_259814, *[unicode_259815, unicode_259816, _w_259818, unicode_259819, unicode_259820], **kwargs_259821)
        
        # SSA branch for the except part of a try statement (line 828)
        # SSA branch for the except 'Attribute' branch of a try statement (line 828)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 828)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 835):
        
        # Assigning a Call to a Name (line 835):
        
        # Call to Label(...): (line 835)
        # Processing the call arguments (line 835)
        # Getting the type of 'tw' (line 835)
        tw_259825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 25), 'tw', False)
        # Processing the call keyword arguments (line 835)
        # Getting the type of 'self' (line 835)
        self_259826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 34), 'self', False)
        # Obtaining the member 'text' of a type (line 835)
        text_259827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 34), self_259826, 'text')
        keyword_259828 = text_259827
        # Getting the type of 'Tk' (line 835)
        Tk_259829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 53), 'Tk', False)
        # Obtaining the member 'LEFT' of a type (line 835)
        LEFT_259830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 53), Tk_259829, 'LEFT')
        keyword_259831 = LEFT_259830
        unicode_259832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 36), 'unicode', u'#ffffe0')
        keyword_259833 = unicode_259832
        # Getting the type of 'Tk' (line 836)
        Tk_259834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 54), 'Tk', False)
        # Obtaining the member 'SOLID' of a type (line 836)
        SOLID_259835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 54), Tk_259834, 'SOLID')
        keyword_259836 = SOLID_259835
        int_259837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 76), 'int')
        keyword_259838 = int_259837
        kwargs_259839 = {'borderwidth': keyword_259838, 'text': keyword_259828, 'relief': keyword_259836, 'background': keyword_259833, 'justify': keyword_259831}
        # Getting the type of 'Tk' (line 835)
        Tk_259823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 16), 'Tk', False)
        # Obtaining the member 'Label' of a type (line 835)
        Label_259824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 16), Tk_259823, 'Label')
        # Calling Label(args, kwargs) (line 835)
        Label_call_result_259840 = invoke(stypy.reporting.localization.Localization(__file__, 835, 16), Label_259824, *[tw_259825], **kwargs_259839)
        
        # Assigning a type to the variable 'label' (line 835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 835, 8), 'label', Label_call_result_259840)
        
        # Call to pack(...): (line 837)
        # Processing the call keyword arguments (line 837)
        int_259843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 25), 'int')
        keyword_259844 = int_259843
        kwargs_259845 = {'ipadx': keyword_259844}
        # Getting the type of 'label' (line 837)
        label_259841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 8), 'label', False)
        # Obtaining the member 'pack' of a type (line 837)
        pack_259842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 8), label_259841, 'pack')
        # Calling pack(args, kwargs) (line 837)
        pack_call_result_259846 = invoke(stypy.reporting.localization.Localization(__file__, 837, 8), pack_259842, *[], **kwargs_259845)
        
        
        # ################# End of 'showtip(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'showtip' in the type store
        # Getting the type of 'stypy_return_type' (line 817)
        stypy_return_type_259847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259847)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'showtip'
        return stypy_return_type_259847


    @norecursion
    def hidetip(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'hidetip'
        module_type_store = module_type_store.open_function_context('hidetip', 839, 4, False)
        # Assigning a type to the variable 'self' (line 840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolTip.hidetip.__dict__.__setitem__('stypy_localization', localization)
        ToolTip.hidetip.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolTip.hidetip.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolTip.hidetip.__dict__.__setitem__('stypy_function_name', 'ToolTip.hidetip')
        ToolTip.hidetip.__dict__.__setitem__('stypy_param_names_list', [])
        ToolTip.hidetip.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolTip.hidetip.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolTip.hidetip.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolTip.hidetip.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolTip.hidetip.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolTip.hidetip.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolTip.hidetip', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'hidetip', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'hidetip(...)' code ##################

        
        # Assigning a Attribute to a Name (line 840):
        
        # Assigning a Attribute to a Name (line 840):
        # Getting the type of 'self' (line 840)
        self_259848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 13), 'self')
        # Obtaining the member 'tipwindow' of a type (line 840)
        tipwindow_259849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 13), self_259848, 'tipwindow')
        # Assigning a type to the variable 'tw' (line 840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 8), 'tw', tipwindow_259849)
        
        # Assigning a Name to a Attribute (line 841):
        
        # Assigning a Name to a Attribute (line 841):
        # Getting the type of 'None' (line 841)
        None_259850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 25), 'None')
        # Getting the type of 'self' (line 841)
        self_259851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 8), 'self')
        # Setting the type of the member 'tipwindow' of a type (line 841)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 8), self_259851, 'tipwindow', None_259850)
        
        # Getting the type of 'tw' (line 842)
        tw_259852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 11), 'tw')
        # Testing the type of an if condition (line 842)
        if_condition_259853 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 842, 8), tw_259852)
        # Assigning a type to the variable 'if_condition_259853' (line 842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 842, 8), 'if_condition_259853', if_condition_259853)
        # SSA begins for if statement (line 842)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to destroy(...): (line 843)
        # Processing the call keyword arguments (line 843)
        kwargs_259856 = {}
        # Getting the type of 'tw' (line 843)
        tw_259854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 12), 'tw', False)
        # Obtaining the member 'destroy' of a type (line 843)
        destroy_259855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 843, 12), tw_259854, 'destroy')
        # Calling destroy(args, kwargs) (line 843)
        destroy_call_result_259857 = invoke(stypy.reporting.localization.Localization(__file__, 843, 12), destroy_259855, *[], **kwargs_259856)
        
        # SSA join for if statement (line 842)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'hidetip(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'hidetip' in the type store
        # Getting the type of 'stypy_return_type' (line 839)
        stypy_return_type_259858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259858)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'hidetip'
        return stypy_return_type_259858


# Assigning a type to the variable 'ToolTip' (line 796)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 0), 'ToolTip', ToolTip)
# Declaration of the 'RubberbandTk' class
# Getting the type of 'backend_tools' (line 846)
backend_tools_259859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 19), 'backend_tools')
# Obtaining the member 'RubberbandBase' of a type (line 846)
RubberbandBase_259860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 846, 19), backend_tools_259859, 'RubberbandBase')

class RubberbandTk(RubberbandBase_259860, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 847, 4, False)
        # Assigning a type to the variable 'self' (line 848)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RubberbandTk.__init__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 848)
        # Processing the call arguments (line 848)
        # Getting the type of 'self' (line 848)
        self_259864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 46), 'self', False)
        # Getting the type of 'args' (line 848)
        args_259865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 53), 'args', False)
        # Processing the call keyword arguments (line 848)
        # Getting the type of 'kwargs' (line 848)
        kwargs_259866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 61), 'kwargs', False)
        kwargs_259867 = {'kwargs_259866': kwargs_259866}
        # Getting the type of 'backend_tools' (line 848)
        backend_tools_259861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 8), 'backend_tools', False)
        # Obtaining the member 'RubberbandBase' of a type (line 848)
        RubberbandBase_259862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 8), backend_tools_259861, 'RubberbandBase')
        # Obtaining the member '__init__' of a type (line 848)
        init___259863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 8), RubberbandBase_259862, '__init__')
        # Calling __init__(args, kwargs) (line 848)
        init___call_result_259868 = invoke(stypy.reporting.localization.Localization(__file__, 848, 8), init___259863, *[self_259864, args_259865], **kwargs_259867)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def draw_rubberband(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_rubberband'
        module_type_store = module_type_store.open_function_context('draw_rubberband', 850, 4, False)
        # Assigning a type to the variable 'self' (line 851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 851, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RubberbandTk.draw_rubberband.__dict__.__setitem__('stypy_localization', localization)
        RubberbandTk.draw_rubberband.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RubberbandTk.draw_rubberband.__dict__.__setitem__('stypy_type_store', module_type_store)
        RubberbandTk.draw_rubberband.__dict__.__setitem__('stypy_function_name', 'RubberbandTk.draw_rubberband')
        RubberbandTk.draw_rubberband.__dict__.__setitem__('stypy_param_names_list', ['x0', 'y0', 'x1', 'y1'])
        RubberbandTk.draw_rubberband.__dict__.__setitem__('stypy_varargs_param_name', None)
        RubberbandTk.draw_rubberband.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RubberbandTk.draw_rubberband.__dict__.__setitem__('stypy_call_defaults', defaults)
        RubberbandTk.draw_rubberband.__dict__.__setitem__('stypy_call_varargs', varargs)
        RubberbandTk.draw_rubberband.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RubberbandTk.draw_rubberband.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RubberbandTk.draw_rubberband', ['x0', 'y0', 'x1', 'y1'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_rubberband', localization, ['x0', 'y0', 'x1', 'y1'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_rubberband(...)' code ##################

        
        # Assigning a Attribute to a Name (line 851):
        
        # Assigning a Attribute to a Name (line 851):
        # Getting the type of 'self' (line 851)
        self_259869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 17), 'self')
        # Obtaining the member 'figure' of a type (line 851)
        figure_259870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 17), self_259869, 'figure')
        # Obtaining the member 'canvas' of a type (line 851)
        canvas_259871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 17), figure_259870, 'canvas')
        # Obtaining the member 'figure' of a type (line 851)
        figure_259872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 17), canvas_259871, 'figure')
        # Obtaining the member 'bbox' of a type (line 851)
        bbox_259873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 17), figure_259872, 'bbox')
        # Obtaining the member 'height' of a type (line 851)
        height_259874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 17), bbox_259873, 'height')
        # Assigning a type to the variable 'height' (line 851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 851, 8), 'height', height_259874)
        
        # Assigning a BinOp to a Name (line 852):
        
        # Assigning a BinOp to a Name (line 852):
        # Getting the type of 'height' (line 852)
        height_259875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 13), 'height')
        # Getting the type of 'y0' (line 852)
        y0_259876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 22), 'y0')
        # Applying the binary operator '-' (line 852)
        result_sub_259877 = python_operator(stypy.reporting.localization.Localization(__file__, 852, 13), '-', height_259875, y0_259876)
        
        # Assigning a type to the variable 'y0' (line 852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 8), 'y0', result_sub_259877)
        
        # Assigning a BinOp to a Name (line 853):
        
        # Assigning a BinOp to a Name (line 853):
        # Getting the type of 'height' (line 853)
        height_259878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 13), 'height')
        # Getting the type of 'y1' (line 853)
        y1_259879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 22), 'y1')
        # Applying the binary operator '-' (line 853)
        result_sub_259880 = python_operator(stypy.reporting.localization.Localization(__file__, 853, 13), '-', height_259878, y1_259879)
        
        # Assigning a type to the variable 'y1' (line 853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 853, 8), 'y1', result_sub_259880)
        
        # Type idiom detected: calculating its left and rigth part (line 854)
        unicode_259881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 854, 25), 'unicode', u'lastrect')
        # Getting the type of 'self' (line 854)
        self_259882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 19), 'self')
        
        (may_be_259883, more_types_in_union_259884) = may_provide_member(unicode_259881, self_259882)

        if may_be_259883:

            if more_types_in_union_259884:
                # Runtime conditional SSA (line 854)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 854)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'self', remove_not_member_provider_from_union(self_259882, u'lastrect'))
            
            # Call to delete(...): (line 855)
            # Processing the call arguments (line 855)
            # Getting the type of 'self' (line 855)
            self_259890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 48), 'self', False)
            # Obtaining the member 'lastrect' of a type (line 855)
            lastrect_259891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 855, 48), self_259890, 'lastrect')
            # Processing the call keyword arguments (line 855)
            kwargs_259892 = {}
            # Getting the type of 'self' (line 855)
            self_259885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 12), 'self', False)
            # Obtaining the member 'figure' of a type (line 855)
            figure_259886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 855, 12), self_259885, 'figure')
            # Obtaining the member 'canvas' of a type (line 855)
            canvas_259887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 855, 12), figure_259886, 'canvas')
            # Obtaining the member '_tkcanvas' of a type (line 855)
            _tkcanvas_259888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 855, 12), canvas_259887, '_tkcanvas')
            # Obtaining the member 'delete' of a type (line 855)
            delete_259889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 855, 12), _tkcanvas_259888, 'delete')
            # Calling delete(args, kwargs) (line 855)
            delete_call_result_259893 = invoke(stypy.reporting.localization.Localization(__file__, 855, 12), delete_259889, *[lastrect_259891], **kwargs_259892)
            

            if more_types_in_union_259884:
                # SSA join for if statement (line 854)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 856):
        
        # Assigning a Call to a Attribute (line 856):
        
        # Call to create_rectangle(...): (line 856)
        # Processing the call arguments (line 856)
        # Getting the type of 'x0' (line 857)
        x0_259899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 12), 'x0', False)
        # Getting the type of 'y0' (line 857)
        y0_259900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 16), 'y0', False)
        # Getting the type of 'x1' (line 857)
        x1_259901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 20), 'x1', False)
        # Getting the type of 'y1' (line 857)
        y1_259902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 24), 'y1', False)
        # Processing the call keyword arguments (line 856)
        kwargs_259903 = {}
        # Getting the type of 'self' (line 856)
        self_259894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 24), 'self', False)
        # Obtaining the member 'figure' of a type (line 856)
        figure_259895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 24), self_259894, 'figure')
        # Obtaining the member 'canvas' of a type (line 856)
        canvas_259896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 24), figure_259895, 'canvas')
        # Obtaining the member '_tkcanvas' of a type (line 856)
        _tkcanvas_259897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 24), canvas_259896, '_tkcanvas')
        # Obtaining the member 'create_rectangle' of a type (line 856)
        create_rectangle_259898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 24), _tkcanvas_259897, 'create_rectangle')
        # Calling create_rectangle(args, kwargs) (line 856)
        create_rectangle_call_result_259904 = invoke(stypy.reporting.localization.Localization(__file__, 856, 24), create_rectangle_259898, *[x0_259899, y0_259900, x1_259901, y1_259902], **kwargs_259903)
        
        # Getting the type of 'self' (line 856)
        self_259905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 8), 'self')
        # Setting the type of the member 'lastrect' of a type (line 856)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 8), self_259905, 'lastrect', create_rectangle_call_result_259904)
        
        # ################# End of 'draw_rubberband(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_rubberband' in the type store
        # Getting the type of 'stypy_return_type' (line 850)
        stypy_return_type_259906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259906)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_rubberband'
        return stypy_return_type_259906


    @norecursion
    def remove_rubberband(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'remove_rubberband'
        module_type_store = module_type_store.open_function_context('remove_rubberband', 859, 4, False)
        # Assigning a type to the variable 'self' (line 860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RubberbandTk.remove_rubberband.__dict__.__setitem__('stypy_localization', localization)
        RubberbandTk.remove_rubberband.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RubberbandTk.remove_rubberband.__dict__.__setitem__('stypy_type_store', module_type_store)
        RubberbandTk.remove_rubberband.__dict__.__setitem__('stypy_function_name', 'RubberbandTk.remove_rubberband')
        RubberbandTk.remove_rubberband.__dict__.__setitem__('stypy_param_names_list', [])
        RubberbandTk.remove_rubberband.__dict__.__setitem__('stypy_varargs_param_name', None)
        RubberbandTk.remove_rubberband.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RubberbandTk.remove_rubberband.__dict__.__setitem__('stypy_call_defaults', defaults)
        RubberbandTk.remove_rubberband.__dict__.__setitem__('stypy_call_varargs', varargs)
        RubberbandTk.remove_rubberband.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RubberbandTk.remove_rubberband.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RubberbandTk.remove_rubberband', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'remove_rubberband', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'remove_rubberband(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 860)
        unicode_259907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 25), 'unicode', u'lastrect')
        # Getting the type of 'self' (line 860)
        self_259908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 19), 'self')
        
        (may_be_259909, more_types_in_union_259910) = may_provide_member(unicode_259907, self_259908)

        if may_be_259909:

            if more_types_in_union_259910:
                # Runtime conditional SSA (line 860)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 860)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 8), 'self', remove_not_member_provider_from_union(self_259908, u'lastrect'))
            
            # Call to delete(...): (line 861)
            # Processing the call arguments (line 861)
            # Getting the type of 'self' (line 861)
            self_259916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 48), 'self', False)
            # Obtaining the member 'lastrect' of a type (line 861)
            lastrect_259917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 48), self_259916, 'lastrect')
            # Processing the call keyword arguments (line 861)
            kwargs_259918 = {}
            # Getting the type of 'self' (line 861)
            self_259911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 12), 'self', False)
            # Obtaining the member 'figure' of a type (line 861)
            figure_259912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 12), self_259911, 'figure')
            # Obtaining the member 'canvas' of a type (line 861)
            canvas_259913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 12), figure_259912, 'canvas')
            # Obtaining the member '_tkcanvas' of a type (line 861)
            _tkcanvas_259914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 12), canvas_259913, '_tkcanvas')
            # Obtaining the member 'delete' of a type (line 861)
            delete_259915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 12), _tkcanvas_259914, 'delete')
            # Calling delete(args, kwargs) (line 861)
            delete_call_result_259919 = invoke(stypy.reporting.localization.Localization(__file__, 861, 12), delete_259915, *[lastrect_259917], **kwargs_259918)
            
            # Deleting a member
            # Getting the type of 'self' (line 862)
            self_259920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 12), 'self')
            module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 862, 12), self_259920, 'lastrect')

            if more_types_in_union_259910:
                # SSA join for if statement (line 860)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'remove_rubberband(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'remove_rubberband' in the type store
        # Getting the type of 'stypy_return_type' (line 859)
        stypy_return_type_259921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259921)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'remove_rubberband'
        return stypy_return_type_259921


# Assigning a type to the variable 'RubberbandTk' (line 846)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 0), 'RubberbandTk', RubberbandTk)
# Declaration of the 'SetCursorTk' class
# Getting the type of 'backend_tools' (line 865)
backend_tools_259922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 18), 'backend_tools')
# Obtaining the member 'SetCursorBase' of a type (line 865)
SetCursorBase_259923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 865, 18), backend_tools_259922, 'SetCursorBase')

class SetCursorTk(SetCursorBase_259923, ):

    @norecursion
    def set_cursor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_cursor'
        module_type_store = module_type_store.open_function_context('set_cursor', 866, 4, False)
        # Assigning a type to the variable 'self' (line 867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SetCursorTk.set_cursor.__dict__.__setitem__('stypy_localization', localization)
        SetCursorTk.set_cursor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SetCursorTk.set_cursor.__dict__.__setitem__('stypy_type_store', module_type_store)
        SetCursorTk.set_cursor.__dict__.__setitem__('stypy_function_name', 'SetCursorTk.set_cursor')
        SetCursorTk.set_cursor.__dict__.__setitem__('stypy_param_names_list', ['cursor'])
        SetCursorTk.set_cursor.__dict__.__setitem__('stypy_varargs_param_name', None)
        SetCursorTk.set_cursor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SetCursorTk.set_cursor.__dict__.__setitem__('stypy_call_defaults', defaults)
        SetCursorTk.set_cursor.__dict__.__setitem__('stypy_call_varargs', varargs)
        SetCursorTk.set_cursor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SetCursorTk.set_cursor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SetCursorTk.set_cursor', ['cursor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_cursor', localization, ['cursor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_cursor(...)' code ##################

        
        # Call to configure(...): (line 867)
        # Processing the call keyword arguments (line 867)
        
        # Obtaining the type of the subscript
        # Getting the type of 'cursor' (line 867)
        cursor_259930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 67), 'cursor', False)
        # Getting the type of 'cursord' (line 867)
        cursord_259931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 59), 'cursord', False)
        # Obtaining the member '__getitem__' of a type (line 867)
        getitem___259932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 59), cursord_259931, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 867)
        subscript_call_result_259933 = invoke(stypy.reporting.localization.Localization(__file__, 867, 59), getitem___259932, cursor_259930)
        
        keyword_259934 = subscript_call_result_259933
        kwargs_259935 = {'cursor': keyword_259934}
        # Getting the type of 'self' (line 867)
        self_259924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 8), 'self', False)
        # Obtaining the member 'figure' of a type (line 867)
        figure_259925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 8), self_259924, 'figure')
        # Obtaining the member 'canvas' of a type (line 867)
        canvas_259926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 8), figure_259925, 'canvas')
        # Obtaining the member 'manager' of a type (line 867)
        manager_259927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 8), canvas_259926, 'manager')
        # Obtaining the member 'window' of a type (line 867)
        window_259928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 8), manager_259927, 'window')
        # Obtaining the member 'configure' of a type (line 867)
        configure_259929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 8), window_259928, 'configure')
        # Calling configure(args, kwargs) (line 867)
        configure_call_result_259936 = invoke(stypy.reporting.localization.Localization(__file__, 867, 8), configure_259929, *[], **kwargs_259935)
        
        
        # ################# End of 'set_cursor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_cursor' in the type store
        # Getting the type of 'stypy_return_type' (line 866)
        stypy_return_type_259937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_259937)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_cursor'
        return stypy_return_type_259937


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 865, 0, False)
        # Assigning a type to the variable 'self' (line 866)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 866, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SetCursorTk.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'SetCursorTk' (line 865)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 865, 0), 'SetCursorTk', SetCursorTk)
# Declaration of the 'ToolbarTk' class
# Getting the type of 'ToolContainerBase' (line 870)
ToolContainerBase_259938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 16), 'ToolContainerBase')
# Getting the type of 'Tk' (line 870)
Tk_259939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 35), 'Tk')
# Obtaining the member 'Frame' of a type (line 870)
Frame_259940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 35), Tk_259939, 'Frame')

class ToolbarTk(ToolContainerBase_259938, Frame_259940, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 871, 4, False)
        # Assigning a type to the variable 'self' (line 872)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 872, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolbarTk.__init__', ['toolmanager', 'window'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['toolmanager', 'window'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 872)
        # Processing the call arguments (line 872)
        # Getting the type of 'self' (line 872)
        self_259943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 35), 'self', False)
        # Getting the type of 'toolmanager' (line 872)
        toolmanager_259944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 41), 'toolmanager', False)
        # Processing the call keyword arguments (line 872)
        kwargs_259945 = {}
        # Getting the type of 'ToolContainerBase' (line 872)
        ToolContainerBase_259941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 8), 'ToolContainerBase', False)
        # Obtaining the member '__init__' of a type (line 872)
        init___259942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 872, 8), ToolContainerBase_259941, '__init__')
        # Calling __init__(args, kwargs) (line 872)
        init___call_result_259946 = invoke(stypy.reporting.localization.Localization(__file__, 872, 8), init___259942, *[self_259943, toolmanager_259944], **kwargs_259945)
        
        
        # Assigning a Attribute to a Tuple (line 873):
        
        # Assigning a Subscript to a Name (line 873):
        
        # Obtaining the type of the subscript
        int_259947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 873, 8), 'int')
        # Getting the type of 'self' (line 873)
        self_259948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 21), 'self')
        # Obtaining the member 'toolmanager' of a type (line 873)
        toolmanager_259949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 21), self_259948, 'toolmanager')
        # Obtaining the member 'canvas' of a type (line 873)
        canvas_259950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 21), toolmanager_259949, 'canvas')
        # Obtaining the member 'figure' of a type (line 873)
        figure_259951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 21), canvas_259950, 'figure')
        # Obtaining the member 'bbox' of a type (line 873)
        bbox_259952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 21), figure_259951, 'bbox')
        # Obtaining the member 'intervalx' of a type (line 873)
        intervalx_259953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 21), bbox_259952, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 873)
        getitem___259954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 8), intervalx_259953, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 873)
        subscript_call_result_259955 = invoke(stypy.reporting.localization.Localization(__file__, 873, 8), getitem___259954, int_259947)
        
        # Assigning a type to the variable 'tuple_var_assignment_257464' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'tuple_var_assignment_257464', subscript_call_result_259955)
        
        # Assigning a Subscript to a Name (line 873):
        
        # Obtaining the type of the subscript
        int_259956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 873, 8), 'int')
        # Getting the type of 'self' (line 873)
        self_259957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 21), 'self')
        # Obtaining the member 'toolmanager' of a type (line 873)
        toolmanager_259958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 21), self_259957, 'toolmanager')
        # Obtaining the member 'canvas' of a type (line 873)
        canvas_259959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 21), toolmanager_259958, 'canvas')
        # Obtaining the member 'figure' of a type (line 873)
        figure_259960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 21), canvas_259959, 'figure')
        # Obtaining the member 'bbox' of a type (line 873)
        bbox_259961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 21), figure_259960, 'bbox')
        # Obtaining the member 'intervalx' of a type (line 873)
        intervalx_259962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 21), bbox_259961, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 873)
        getitem___259963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 8), intervalx_259962, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 873)
        subscript_call_result_259964 = invoke(stypy.reporting.localization.Localization(__file__, 873, 8), getitem___259963, int_259956)
        
        # Assigning a type to the variable 'tuple_var_assignment_257465' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'tuple_var_assignment_257465', subscript_call_result_259964)
        
        # Assigning a Name to a Name (line 873):
        # Getting the type of 'tuple_var_assignment_257464' (line 873)
        tuple_var_assignment_257464_259965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'tuple_var_assignment_257464')
        # Assigning a type to the variable 'xmin' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'xmin', tuple_var_assignment_257464_259965)
        
        # Assigning a Name to a Name (line 873):
        # Getting the type of 'tuple_var_assignment_257465' (line 873)
        tuple_var_assignment_257465_259966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'tuple_var_assignment_257465')
        # Assigning a type to the variable 'xmax' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 14), 'xmax', tuple_var_assignment_257465_259966)
        
        # Assigning a Tuple to a Tuple (line 874):
        
        # Assigning a Num to a Name (line 874):
        int_259967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 874, 24), 'int')
        # Assigning a type to the variable 'tuple_assignment_257466' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 8), 'tuple_assignment_257466', int_259967)
        
        # Assigning a BinOp to a Name (line 874):
        # Getting the type of 'xmax' (line 874)
        xmax_259968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 28), 'xmax')
        # Getting the type of 'xmin' (line 874)
        xmin_259969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 35), 'xmin')
        # Applying the binary operator '-' (line 874)
        result_sub_259970 = python_operator(stypy.reporting.localization.Localization(__file__, 874, 28), '-', xmax_259968, xmin_259969)
        
        # Assigning a type to the variable 'tuple_assignment_257467' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 8), 'tuple_assignment_257467', result_sub_259970)
        
        # Assigning a Name to a Name (line 874):
        # Getting the type of 'tuple_assignment_257466' (line 874)
        tuple_assignment_257466_259971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 8), 'tuple_assignment_257466')
        # Assigning a type to the variable 'height' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 8), 'height', tuple_assignment_257466_259971)
        
        # Assigning a Name to a Name (line 874):
        # Getting the type of 'tuple_assignment_257467' (line 874)
        tuple_assignment_257467_259972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 8), 'tuple_assignment_257467')
        # Assigning a type to the variable 'width' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 16), 'width', tuple_assignment_257467_259972)
        
        # Call to __init__(...): (line 875)
        # Processing the call arguments (line 875)
        # Getting the type of 'self' (line 875)
        self_259976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 26), 'self', False)
        # Processing the call keyword arguments (line 875)
        # Getting the type of 'window' (line 875)
        window_259977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 39), 'window', False)
        keyword_259978 = window_259977
        
        # Call to int(...): (line 876)
        # Processing the call arguments (line 876)
        # Getting the type of 'width' (line 876)
        width_259980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 36), 'width', False)
        # Processing the call keyword arguments (line 876)
        kwargs_259981 = {}
        # Getting the type of 'int' (line 876)
        int_259979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 32), 'int', False)
        # Calling int(args, kwargs) (line 876)
        int_call_result_259982 = invoke(stypy.reporting.localization.Localization(__file__, 876, 32), int_259979, *[width_259980], **kwargs_259981)
        
        keyword_259983 = int_call_result_259982
        
        # Call to int(...): (line 876)
        # Processing the call arguments (line 876)
        # Getting the type of 'height' (line 876)
        height_259985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 55), 'height', False)
        # Processing the call keyword arguments (line 876)
        kwargs_259986 = {}
        # Getting the type of 'int' (line 876)
        int_259984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 51), 'int', False)
        # Calling int(args, kwargs) (line 876)
        int_call_result_259987 = invoke(stypy.reporting.localization.Localization(__file__, 876, 51), int_259984, *[height_259985], **kwargs_259986)
        
        keyword_259988 = int_call_result_259987
        int_259989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 38), 'int')
        keyword_259990 = int_259989
        kwargs_259991 = {'width': keyword_259983, 'master': keyword_259978, 'borderwidth': keyword_259990, 'height': keyword_259988}
        # Getting the type of 'Tk' (line 875)
        Tk_259973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 8), 'Tk', False)
        # Obtaining the member 'Frame' of a type (line 875)
        Frame_259974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 8), Tk_259973, 'Frame')
        # Obtaining the member '__init__' of a type (line 875)
        init___259975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 8), Frame_259974, '__init__')
        # Calling __init__(args, kwargs) (line 875)
        init___call_result_259992 = invoke(stypy.reporting.localization.Localization(__file__, 875, 8), init___259975, *[self_259976], **kwargs_259991)
        
        
        # Assigning a Dict to a Attribute (line 878):
        
        # Assigning a Dict to a Attribute (line 878):
        
        # Obtaining an instance of the builtin type 'dict' (line 878)
        dict_259993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 878, 26), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 878)
        
        # Getting the type of 'self' (line 878)
        self_259994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 8), 'self')
        # Setting the type of the member '_toolitems' of a type (line 878)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 8), self_259994, '_toolitems', dict_259993)
        
        # Call to pack(...): (line 879)
        # Processing the call keyword arguments (line 879)
        # Getting the type of 'Tk' (line 879)
        Tk_259997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 23), 'Tk', False)
        # Obtaining the member 'TOP' of a type (line 879)
        TOP_259998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 23), Tk_259997, 'TOP')
        keyword_259999 = TOP_259998
        # Getting the type of 'Tk' (line 879)
        Tk_260000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 36), 'Tk', False)
        # Obtaining the member 'X' of a type (line 879)
        X_260001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 36), Tk_260000, 'X')
        keyword_260002 = X_260001
        kwargs_260003 = {'side': keyword_259999, 'fill': keyword_260002}
        # Getting the type of 'self' (line 879)
        self_259995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 8), 'self', False)
        # Obtaining the member 'pack' of a type (line 879)
        pack_259996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 8), self_259995, 'pack')
        # Calling pack(args, kwargs) (line 879)
        pack_call_result_260004 = invoke(stypy.reporting.localization.Localization(__file__, 879, 8), pack_259996, *[], **kwargs_260003)
        
        
        # Assigning a Dict to a Attribute (line 880):
        
        # Assigning a Dict to a Attribute (line 880):
        
        # Obtaining an instance of the builtin type 'dict' (line 880)
        dict_260005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, 23), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 880)
        
        # Getting the type of 'self' (line 880)
        self_260006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 8), 'self')
        # Setting the type of the member '_groups' of a type (line 880)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 880, 8), self_260006, '_groups', dict_260005)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def add_toolitem(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_toolitem'
        module_type_store = module_type_store.open_function_context('add_toolitem', 882, 4, False)
        # Assigning a type to the variable 'self' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolbarTk.add_toolitem.__dict__.__setitem__('stypy_localization', localization)
        ToolbarTk.add_toolitem.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolbarTk.add_toolitem.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolbarTk.add_toolitem.__dict__.__setitem__('stypy_function_name', 'ToolbarTk.add_toolitem')
        ToolbarTk.add_toolitem.__dict__.__setitem__('stypy_param_names_list', ['name', 'group', 'position', 'image_file', 'description', 'toggle'])
        ToolbarTk.add_toolitem.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolbarTk.add_toolitem.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolbarTk.add_toolitem.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolbarTk.add_toolitem.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolbarTk.add_toolitem.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolbarTk.add_toolitem.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolbarTk.add_toolitem', ['name', 'group', 'position', 'image_file', 'description', 'toggle'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_toolitem', localization, ['name', 'group', 'position', 'image_file', 'description', 'toggle'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_toolitem(...)' code ##################

        
        # Assigning a Call to a Name (line 884):
        
        # Assigning a Call to a Name (line 884):
        
        # Call to _get_groupframe(...): (line 884)
        # Processing the call arguments (line 884)
        # Getting the type of 'group' (line 884)
        group_260009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 37), 'group', False)
        # Processing the call keyword arguments (line 884)
        kwargs_260010 = {}
        # Getting the type of 'self' (line 884)
        self_260007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 16), 'self', False)
        # Obtaining the member '_get_groupframe' of a type (line 884)
        _get_groupframe_260008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 16), self_260007, '_get_groupframe')
        # Calling _get_groupframe(args, kwargs) (line 884)
        _get_groupframe_call_result_260011 = invoke(stypy.reporting.localization.Localization(__file__, 884, 16), _get_groupframe_260008, *[group_260009], **kwargs_260010)
        
        # Assigning a type to the variable 'frame' (line 884)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 8), 'frame', _get_groupframe_call_result_260011)
        
        # Assigning a Call to a Name (line 885):
        
        # Assigning a Call to a Name (line 885):
        
        # Call to _Button(...): (line 885)
        # Processing the call arguments (line 885)
        # Getting the type of 'name' (line 885)
        name_260014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 30), 'name', False)
        # Getting the type of 'image_file' (line 885)
        image_file_260015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 36), 'image_file', False)
        # Getting the type of 'toggle' (line 885)
        toggle_260016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 48), 'toggle', False)
        # Getting the type of 'frame' (line 885)
        frame_260017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 56), 'frame', False)
        # Processing the call keyword arguments (line 885)
        kwargs_260018 = {}
        # Getting the type of 'self' (line 885)
        self_260012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 17), 'self', False)
        # Obtaining the member '_Button' of a type (line 885)
        _Button_260013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 17), self_260012, '_Button')
        # Calling _Button(args, kwargs) (line 885)
        _Button_call_result_260019 = invoke(stypy.reporting.localization.Localization(__file__, 885, 17), _Button_260013, *[name_260014, image_file_260015, toggle_260016, frame_260017], **kwargs_260018)
        
        # Assigning a type to the variable 'button' (line 885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 8), 'button', _Button_call_result_260019)
        
        # Type idiom detected: calculating its left and rigth part (line 886)
        # Getting the type of 'description' (line 886)
        description_260020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 8), 'description')
        # Getting the type of 'None' (line 886)
        None_260021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 30), 'None')
        
        (may_be_260022, more_types_in_union_260023) = may_not_be_none(description_260020, None_260021)

        if may_be_260022:

            if more_types_in_union_260023:
                # Runtime conditional SSA (line 886)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to createToolTip(...): (line 887)
            # Processing the call arguments (line 887)
            # Getting the type of 'button' (line 887)
            button_260026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 34), 'button', False)
            # Getting the type of 'description' (line 887)
            description_260027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 42), 'description', False)
            # Processing the call keyword arguments (line 887)
            kwargs_260028 = {}
            # Getting the type of 'ToolTip' (line 887)
            ToolTip_260024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 12), 'ToolTip', False)
            # Obtaining the member 'createToolTip' of a type (line 887)
            createToolTip_260025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 12), ToolTip_260024, 'createToolTip')
            # Calling createToolTip(args, kwargs) (line 887)
            createToolTip_call_result_260029 = invoke(stypy.reporting.localization.Localization(__file__, 887, 12), createToolTip_260025, *[button_260026, description_260027], **kwargs_260028)
            

            if more_types_in_union_260023:
                # SSA join for if statement (line 886)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to setdefault(...): (line 888)
        # Processing the call arguments (line 888)
        # Getting the type of 'name' (line 888)
        name_260033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 35), 'name', False)
        
        # Obtaining an instance of the builtin type 'list' (line 888)
        list_260034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 888, 41), 'list')
        # Adding type elements to the builtin type 'list' instance (line 888)
        
        # Processing the call keyword arguments (line 888)
        kwargs_260035 = {}
        # Getting the type of 'self' (line 888)
        self_260030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 8), 'self', False)
        # Obtaining the member '_toolitems' of a type (line 888)
        _toolitems_260031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 8), self_260030, '_toolitems')
        # Obtaining the member 'setdefault' of a type (line 888)
        setdefault_260032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 8), _toolitems_260031, 'setdefault')
        # Calling setdefault(args, kwargs) (line 888)
        setdefault_call_result_260036 = invoke(stypy.reporting.localization.Localization(__file__, 888, 8), setdefault_260032, *[name_260033, list_260034], **kwargs_260035)
        
        
        # Call to append(...): (line 889)
        # Processing the call arguments (line 889)
        # Getting the type of 'button' (line 889)
        button_260043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 37), 'button', False)
        # Processing the call keyword arguments (line 889)
        kwargs_260044 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 889)
        name_260037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 24), 'name', False)
        # Getting the type of 'self' (line 889)
        self_260038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 8), 'self', False)
        # Obtaining the member '_toolitems' of a type (line 889)
        _toolitems_260039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 889, 8), self_260038, '_toolitems')
        # Obtaining the member '__getitem__' of a type (line 889)
        getitem___260040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 889, 8), _toolitems_260039, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 889)
        subscript_call_result_260041 = invoke(stypy.reporting.localization.Localization(__file__, 889, 8), getitem___260040, name_260037)
        
        # Obtaining the member 'append' of a type (line 889)
        append_260042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 889, 8), subscript_call_result_260041, 'append')
        # Calling append(args, kwargs) (line 889)
        append_call_result_260045 = invoke(stypy.reporting.localization.Localization(__file__, 889, 8), append_260042, *[button_260043], **kwargs_260044)
        
        
        # ################# End of 'add_toolitem(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_toolitem' in the type store
        # Getting the type of 'stypy_return_type' (line 882)
        stypy_return_type_260046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260046)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_toolitem'
        return stypy_return_type_260046


    @norecursion
    def _get_groupframe(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_groupframe'
        module_type_store = module_type_store.open_function_context('_get_groupframe', 891, 4, False)
        # Assigning a type to the variable 'self' (line 892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolbarTk._get_groupframe.__dict__.__setitem__('stypy_localization', localization)
        ToolbarTk._get_groupframe.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolbarTk._get_groupframe.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolbarTk._get_groupframe.__dict__.__setitem__('stypy_function_name', 'ToolbarTk._get_groupframe')
        ToolbarTk._get_groupframe.__dict__.__setitem__('stypy_param_names_list', ['group'])
        ToolbarTk._get_groupframe.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolbarTk._get_groupframe.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolbarTk._get_groupframe.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolbarTk._get_groupframe.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolbarTk._get_groupframe.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolbarTk._get_groupframe.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolbarTk._get_groupframe', ['group'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_groupframe', localization, ['group'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_groupframe(...)' code ##################

        
        
        # Getting the type of 'group' (line 892)
        group_260047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 11), 'group')
        # Getting the type of 'self' (line 892)
        self_260048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 24), 'self')
        # Obtaining the member '_groups' of a type (line 892)
        _groups_260049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 24), self_260048, '_groups')
        # Applying the binary operator 'notin' (line 892)
        result_contains_260050 = python_operator(stypy.reporting.localization.Localization(__file__, 892, 11), 'notin', group_260047, _groups_260049)
        
        # Testing the type of an if condition (line 892)
        if_condition_260051 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 892, 8), result_contains_260050)
        # Assigning a type to the variable 'if_condition_260051' (line 892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 8), 'if_condition_260051', if_condition_260051)
        # SSA begins for if statement (line 892)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 893)
        self_260052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 15), 'self')
        # Obtaining the member '_groups' of a type (line 893)
        _groups_260053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 15), self_260052, '_groups')
        # Testing the type of an if condition (line 893)
        if_condition_260054 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 893, 12), _groups_260053)
        # Assigning a type to the variable 'if_condition_260054' (line 893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 12), 'if_condition_260054', if_condition_260054)
        # SSA begins for if statement (line 893)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _add_separator(...): (line 894)
        # Processing the call keyword arguments (line 894)
        kwargs_260057 = {}
        # Getting the type of 'self' (line 894)
        self_260055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 16), 'self', False)
        # Obtaining the member '_add_separator' of a type (line 894)
        _add_separator_260056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 16), self_260055, '_add_separator')
        # Calling _add_separator(args, kwargs) (line 894)
        _add_separator_call_result_260058 = invoke(stypy.reporting.localization.Localization(__file__, 894, 16), _add_separator_260056, *[], **kwargs_260057)
        
        # SSA join for if statement (line 893)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 895):
        
        # Assigning a Call to a Name (line 895):
        
        # Call to Frame(...): (line 895)
        # Processing the call keyword arguments (line 895)
        # Getting the type of 'self' (line 895)
        self_260061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 36), 'self', False)
        keyword_260062 = self_260061
        int_260063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, 54), 'int')
        keyword_260064 = int_260063
        kwargs_260065 = {'master': keyword_260062, 'borderwidth': keyword_260064}
        # Getting the type of 'Tk' (line 895)
        Tk_260059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 20), 'Tk', False)
        # Obtaining the member 'Frame' of a type (line 895)
        Frame_260060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 20), Tk_260059, 'Frame')
        # Calling Frame(args, kwargs) (line 895)
        Frame_call_result_260066 = invoke(stypy.reporting.localization.Localization(__file__, 895, 20), Frame_260060, *[], **kwargs_260065)
        
        # Assigning a type to the variable 'frame' (line 895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 12), 'frame', Frame_call_result_260066)
        
        # Call to pack(...): (line 896)
        # Processing the call keyword arguments (line 896)
        # Getting the type of 'Tk' (line 896)
        Tk_260069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 28), 'Tk', False)
        # Obtaining the member 'LEFT' of a type (line 896)
        LEFT_260070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 28), Tk_260069, 'LEFT')
        keyword_260071 = LEFT_260070
        # Getting the type of 'Tk' (line 896)
        Tk_260072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 42), 'Tk', False)
        # Obtaining the member 'Y' of a type (line 896)
        Y_260073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 42), Tk_260072, 'Y')
        keyword_260074 = Y_260073
        kwargs_260075 = {'side': keyword_260071, 'fill': keyword_260074}
        # Getting the type of 'frame' (line 896)
        frame_260067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 12), 'frame', False)
        # Obtaining the member 'pack' of a type (line 896)
        pack_260068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 12), frame_260067, 'pack')
        # Calling pack(args, kwargs) (line 896)
        pack_call_result_260076 = invoke(stypy.reporting.localization.Localization(__file__, 896, 12), pack_260068, *[], **kwargs_260075)
        
        
        # Assigning a Name to a Subscript (line 897):
        
        # Assigning a Name to a Subscript (line 897):
        # Getting the type of 'frame' (line 897)
        frame_260077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 34), 'frame')
        # Getting the type of 'self' (line 897)
        self_260078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 12), 'self')
        # Obtaining the member '_groups' of a type (line 897)
        _groups_260079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 12), self_260078, '_groups')
        # Getting the type of 'group' (line 897)
        group_260080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 25), 'group')
        # Storing an element on a container (line 897)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 897, 12), _groups_260079, (group_260080, frame_260077))
        # SSA join for if statement (line 892)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'group' (line 898)
        group_260081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 28), 'group')
        # Getting the type of 'self' (line 898)
        self_260082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 15), 'self')
        # Obtaining the member '_groups' of a type (line 898)
        _groups_260083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 15), self_260082, '_groups')
        # Obtaining the member '__getitem__' of a type (line 898)
        getitem___260084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 15), _groups_260083, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 898)
        subscript_call_result_260085 = invoke(stypy.reporting.localization.Localization(__file__, 898, 15), getitem___260084, group_260081)
        
        # Assigning a type to the variable 'stypy_return_type' (line 898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 898, 8), 'stypy_return_type', subscript_call_result_260085)
        
        # ################# End of '_get_groupframe(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_groupframe' in the type store
        # Getting the type of 'stypy_return_type' (line 891)
        stypy_return_type_260086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260086)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_groupframe'
        return stypy_return_type_260086


    @norecursion
    def _add_separator(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_add_separator'
        module_type_store = module_type_store.open_function_context('_add_separator', 900, 4, False)
        # Assigning a type to the variable 'self' (line 901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 901, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolbarTk._add_separator.__dict__.__setitem__('stypy_localization', localization)
        ToolbarTk._add_separator.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolbarTk._add_separator.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolbarTk._add_separator.__dict__.__setitem__('stypy_function_name', 'ToolbarTk._add_separator')
        ToolbarTk._add_separator.__dict__.__setitem__('stypy_param_names_list', [])
        ToolbarTk._add_separator.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolbarTk._add_separator.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolbarTk._add_separator.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolbarTk._add_separator.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolbarTk._add_separator.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolbarTk._add_separator.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolbarTk._add_separator', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_add_separator', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_add_separator(...)' code ##################

        
        # Assigning a Call to a Name (line 901):
        
        # Assigning a Call to a Name (line 901):
        
        # Call to Frame(...): (line 901)
        # Processing the call keyword arguments (line 901)
        # Getting the type of 'self' (line 901)
        self_260089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 36), 'self', False)
        keyword_260090 = self_260089
        int_260091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 901, 45), 'int')
        keyword_260092 = int_260091
        int_260093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 901, 54), 'int')
        keyword_260094 = int_260093
        unicode_260095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 901, 60), 'unicode', u'black')
        keyword_260096 = unicode_260095
        kwargs_260097 = {'bd': keyword_260092, 'width': keyword_260094, 'bg': keyword_260096, 'master': keyword_260090}
        # Getting the type of 'Tk' (line 901)
        Tk_260087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 20), 'Tk', False)
        # Obtaining the member 'Frame' of a type (line 901)
        Frame_260088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 901, 20), Tk_260087, 'Frame')
        # Calling Frame(args, kwargs) (line 901)
        Frame_call_result_260098 = invoke(stypy.reporting.localization.Localization(__file__, 901, 20), Frame_260088, *[], **kwargs_260097)
        
        # Assigning a type to the variable 'separator' (line 901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 901, 8), 'separator', Frame_call_result_260098)
        
        # Call to pack(...): (line 902)
        # Processing the call keyword arguments (line 902)
        # Getting the type of 'Tk' (line 902)
        Tk_260101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 28), 'Tk', False)
        # Obtaining the member 'LEFT' of a type (line 902)
        LEFT_260102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 28), Tk_260101, 'LEFT')
        keyword_260103 = LEFT_260102
        # Getting the type of 'Tk' (line 902)
        Tk_260104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 42), 'Tk', False)
        # Obtaining the member 'Y' of a type (line 902)
        Y_260105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 42), Tk_260104, 'Y')
        keyword_260106 = Y_260105
        int_260107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 902, 53), 'int')
        keyword_260108 = int_260107
        kwargs_260109 = {'padx': keyword_260108, 'side': keyword_260103, 'fill': keyword_260106}
        # Getting the type of 'separator' (line 902)
        separator_260099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 8), 'separator', False)
        # Obtaining the member 'pack' of a type (line 902)
        pack_260100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 8), separator_260099, 'pack')
        # Calling pack(args, kwargs) (line 902)
        pack_call_result_260110 = invoke(stypy.reporting.localization.Localization(__file__, 902, 8), pack_260100, *[], **kwargs_260109)
        
        
        # ################# End of '_add_separator(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_add_separator' in the type store
        # Getting the type of 'stypy_return_type' (line 900)
        stypy_return_type_260111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260111)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_add_separator'
        return stypy_return_type_260111


    @norecursion
    def _Button(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_Button'
        module_type_store = module_type_store.open_function_context('_Button', 904, 4, False)
        # Assigning a type to the variable 'self' (line 905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolbarTk._Button.__dict__.__setitem__('stypy_localization', localization)
        ToolbarTk._Button.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolbarTk._Button.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolbarTk._Button.__dict__.__setitem__('stypy_function_name', 'ToolbarTk._Button')
        ToolbarTk._Button.__dict__.__setitem__('stypy_param_names_list', ['text', 'image_file', 'toggle', 'frame'])
        ToolbarTk._Button.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolbarTk._Button.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolbarTk._Button.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolbarTk._Button.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolbarTk._Button.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolbarTk._Button.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolbarTk._Button', ['text', 'image_file', 'toggle', 'frame'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_Button', localization, ['text', 'image_file', 'toggle', 'frame'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_Button(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 905)
        # Getting the type of 'image_file' (line 905)
        image_file_260112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'image_file')
        # Getting the type of 'None' (line 905)
        None_260113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 29), 'None')
        
        (may_be_260114, more_types_in_union_260115) = may_not_be_none(image_file_260112, None_260113)

        if may_be_260114:

            if more_types_in_union_260115:
                # Runtime conditional SSA (line 905)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 906):
            
            # Assigning a Call to a Name (line 906):
            
            # Call to PhotoImage(...): (line 906)
            # Processing the call keyword arguments (line 906)
            # Getting the type of 'self' (line 906)
            self_260118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 38), 'self', False)
            keyword_260119 = self_260118
            # Getting the type of 'image_file' (line 906)
            image_file_260120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 49), 'image_file', False)
            keyword_260121 = image_file_260120
            kwargs_260122 = {'master': keyword_260119, 'file': keyword_260121}
            # Getting the type of 'Tk' (line 906)
            Tk_260116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 17), 'Tk', False)
            # Obtaining the member 'PhotoImage' of a type (line 906)
            PhotoImage_260117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 906, 17), Tk_260116, 'PhotoImage')
            # Calling PhotoImage(args, kwargs) (line 906)
            PhotoImage_call_result_260123 = invoke(stypy.reporting.localization.Localization(__file__, 906, 17), PhotoImage_260117, *[], **kwargs_260122)
            
            # Assigning a type to the variable 'im' (line 906)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 12), 'im', PhotoImage_call_result_260123)

            if more_types_in_union_260115:
                # Runtime conditional SSA for else branch (line 905)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_260114) or more_types_in_union_260115):
            
            # Assigning a Name to a Name (line 908):
            
            # Assigning a Name to a Name (line 908):
            # Getting the type of 'None' (line 908)
            None_260124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 17), 'None')
            # Assigning a type to the variable 'im' (line 908)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 12), 'im', None_260124)

            if (may_be_260114 and more_types_in_union_260115):
                # SSA join for if statement (line 905)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'toggle' (line 910)
        toggle_260125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 15), 'toggle')
        # Applying the 'not' unary operator (line 910)
        result_not__260126 = python_operator(stypy.reporting.localization.Localization(__file__, 910, 11), 'not', toggle_260125)
        
        # Testing the type of an if condition (line 910)
        if_condition_260127 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 910, 8), result_not__260126)
        # Assigning a type to the variable 'if_condition_260127' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 8), 'if_condition_260127', if_condition_260127)
        # SSA begins for if statement (line 910)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 911):
        
        # Assigning a Call to a Name (line 911):
        
        # Call to Button(...): (line 911)
        # Processing the call keyword arguments (line 911)
        # Getting the type of 'frame' (line 911)
        frame_260130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 33), 'frame', False)
        keyword_260131 = frame_260130
        # Getting the type of 'text' (line 911)
        text_260132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 45), 'text', False)
        keyword_260133 = text_260132
        int_260134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 56), 'int')
        keyword_260135 = int_260134
        int_260136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 64), 'int')
        keyword_260137 = int_260136
        # Getting the type of 'im' (line 911)
        im_260138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 73), 'im', False)
        keyword_260139 = im_260138

        @norecursion
        def _stypy_temp_lambda_109(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_109'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_109', 912, 34, True)
            # Passed parameters checking function
            _stypy_temp_lambda_109.stypy_localization = localization
            _stypy_temp_lambda_109.stypy_type_of_self = None
            _stypy_temp_lambda_109.stypy_type_store = module_type_store
            _stypy_temp_lambda_109.stypy_function_name = '_stypy_temp_lambda_109'
            _stypy_temp_lambda_109.stypy_param_names_list = []
            _stypy_temp_lambda_109.stypy_varargs_param_name = None
            _stypy_temp_lambda_109.stypy_kwargs_param_name = None
            _stypy_temp_lambda_109.stypy_call_defaults = defaults
            _stypy_temp_lambda_109.stypy_call_varargs = varargs
            _stypy_temp_lambda_109.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_109', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_109', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to _button_click(...): (line 912)
            # Processing the call arguments (line 912)
            # Getting the type of 'text' (line 912)
            text_260142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 61), 'text', False)
            # Processing the call keyword arguments (line 912)
            kwargs_260143 = {}
            # Getting the type of 'self' (line 912)
            self_260140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 42), 'self', False)
            # Obtaining the member '_button_click' of a type (line 912)
            _button_click_260141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 42), self_260140, '_button_click')
            # Calling _button_click(args, kwargs) (line 912)
            _button_click_call_result_260144 = invoke(stypy.reporting.localization.Localization(__file__, 912, 42), _button_click_260141, *[text_260142], **kwargs_260143)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 912)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 34), 'stypy_return_type', _button_click_call_result_260144)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_109' in the type store
            # Getting the type of 'stypy_return_type' (line 912)
            stypy_return_type_260145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 34), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_260145)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_109'
            return stypy_return_type_260145

        # Assigning a type to the variable '_stypy_temp_lambda_109' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 34), '_stypy_temp_lambda_109', _stypy_temp_lambda_109)
        # Getting the type of '_stypy_temp_lambda_109' (line 912)
        _stypy_temp_lambda_109_260146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 34), '_stypy_temp_lambda_109')
        keyword_260147 = _stypy_temp_lambda_109_260146
        kwargs_260148 = {'text': keyword_260133, 'image': keyword_260139, 'master': keyword_260131, 'padx': keyword_260135, 'pady': keyword_260137, 'command': keyword_260147}
        # Getting the type of 'Tk' (line 911)
        Tk_260128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 16), 'Tk', False)
        # Obtaining the member 'Button' of a type (line 911)
        Button_260129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 16), Tk_260128, 'Button')
        # Calling Button(args, kwargs) (line 911)
        Button_call_result_260149 = invoke(stypy.reporting.localization.Localization(__file__, 911, 16), Button_260129, *[], **kwargs_260148)
        
        # Assigning a type to the variable 'b' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 12), 'b', Button_call_result_260149)
        # SSA branch for the else part of an if statement (line 910)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 914):
        
        # Assigning a Call to a Name (line 914):
        
        # Call to Checkbutton(...): (line 914)
        # Processing the call keyword arguments (line 914)
        # Getting the type of 'frame' (line 914)
        frame_260152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 38), 'frame', False)
        keyword_260153 = frame_260152
        # Getting the type of 'text' (line 914)
        text_260154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 50), 'text', False)
        keyword_260155 = text_260154
        int_260156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 61), 'int')
        keyword_260157 = int_260156
        int_260158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 69), 'int')
        keyword_260159 = int_260158
        # Getting the type of 'im' (line 915)
        im_260160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 37), 'im', False)
        keyword_260161 = im_260160
        # Getting the type of 'False' (line 915)
        False_260162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 53), 'False', False)
        keyword_260163 = False_260162

        @norecursion
        def _stypy_temp_lambda_110(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_110'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_110', 916, 39, True)
            # Passed parameters checking function
            _stypy_temp_lambda_110.stypy_localization = localization
            _stypy_temp_lambda_110.stypy_type_of_self = None
            _stypy_temp_lambda_110.stypy_type_store = module_type_store
            _stypy_temp_lambda_110.stypy_function_name = '_stypy_temp_lambda_110'
            _stypy_temp_lambda_110.stypy_param_names_list = []
            _stypy_temp_lambda_110.stypy_varargs_param_name = None
            _stypy_temp_lambda_110.stypy_kwargs_param_name = None
            _stypy_temp_lambda_110.stypy_call_defaults = defaults
            _stypy_temp_lambda_110.stypy_call_varargs = varargs
            _stypy_temp_lambda_110.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_110', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_110', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to _button_click(...): (line 916)
            # Processing the call arguments (line 916)
            # Getting the type of 'text' (line 916)
            text_260166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 66), 'text', False)
            # Processing the call keyword arguments (line 916)
            kwargs_260167 = {}
            # Getting the type of 'self' (line 916)
            self_260164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 47), 'self', False)
            # Obtaining the member '_button_click' of a type (line 916)
            _button_click_260165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 47), self_260164, '_button_click')
            # Calling _button_click(args, kwargs) (line 916)
            _button_click_call_result_260168 = invoke(stypy.reporting.localization.Localization(__file__, 916, 47), _button_click_260165, *[text_260166], **kwargs_260167)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 916)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 916, 39), 'stypy_return_type', _button_click_call_result_260168)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_110' in the type store
            # Getting the type of 'stypy_return_type' (line 916)
            stypy_return_type_260169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 39), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_260169)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_110'
            return stypy_return_type_260169

        # Assigning a type to the variable '_stypy_temp_lambda_110' (line 916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 916, 39), '_stypy_temp_lambda_110', _stypy_temp_lambda_110)
        # Getting the type of '_stypy_temp_lambda_110' (line 916)
        _stypy_temp_lambda_110_260170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 39), '_stypy_temp_lambda_110')
        keyword_260171 = _stypy_temp_lambda_110_260170
        kwargs_260172 = {'text': keyword_260155, 'image': keyword_260161, 'command': keyword_260171, 'indicatoron': keyword_260163, 'master': keyword_260153, 'pady': keyword_260159, 'padx': keyword_260157}
        # Getting the type of 'Tk' (line 914)
        Tk_260150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 16), 'Tk', False)
        # Obtaining the member 'Checkbutton' of a type (line 914)
        Checkbutton_260151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 16), Tk_260150, 'Checkbutton')
        # Calling Checkbutton(args, kwargs) (line 914)
        Checkbutton_call_result_260173 = invoke(stypy.reporting.localization.Localization(__file__, 914, 16), Checkbutton_260151, *[], **kwargs_260172)
        
        # Assigning a type to the variable 'b' (line 914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 12), 'b', Checkbutton_call_result_260173)
        # SSA join for if statement (line 910)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 917):
        
        # Assigning a Name to a Attribute (line 917):
        # Getting the type of 'im' (line 917)
        im_260174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 21), 'im')
        # Getting the type of 'b' (line 917)
        b_260175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 8), 'b')
        # Setting the type of the member '_ntimage' of a type (line 917)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 8), b_260175, '_ntimage', im_260174)
        
        # Call to pack(...): (line 918)
        # Processing the call keyword arguments (line 918)
        # Getting the type of 'Tk' (line 918)
        Tk_260178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 20), 'Tk', False)
        # Obtaining the member 'LEFT' of a type (line 918)
        LEFT_260179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 20), Tk_260178, 'LEFT')
        keyword_260180 = LEFT_260179
        kwargs_260181 = {'side': keyword_260180}
        # Getting the type of 'b' (line 918)
        b_260176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 8), 'b', False)
        # Obtaining the member 'pack' of a type (line 918)
        pack_260177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 8), b_260176, 'pack')
        # Calling pack(args, kwargs) (line 918)
        pack_call_result_260182 = invoke(stypy.reporting.localization.Localization(__file__, 918, 8), pack_260177, *[], **kwargs_260181)
        
        # Getting the type of 'b' (line 919)
        b_260183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 15), 'b')
        # Assigning a type to the variable 'stypy_return_type' (line 919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'stypy_return_type', b_260183)
        
        # ################# End of '_Button(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_Button' in the type store
        # Getting the type of 'stypy_return_type' (line 904)
        stypy_return_type_260184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260184)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_Button'
        return stypy_return_type_260184


    @norecursion
    def _button_click(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_button_click'
        module_type_store = module_type_store.open_function_context('_button_click', 921, 4, False)
        # Assigning a type to the variable 'self' (line 922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolbarTk._button_click.__dict__.__setitem__('stypy_localization', localization)
        ToolbarTk._button_click.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolbarTk._button_click.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolbarTk._button_click.__dict__.__setitem__('stypy_function_name', 'ToolbarTk._button_click')
        ToolbarTk._button_click.__dict__.__setitem__('stypy_param_names_list', ['name'])
        ToolbarTk._button_click.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolbarTk._button_click.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolbarTk._button_click.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolbarTk._button_click.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolbarTk._button_click.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolbarTk._button_click.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolbarTk._button_click', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_button_click', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_button_click(...)' code ##################

        
        # Call to trigger_tool(...): (line 922)
        # Processing the call arguments (line 922)
        # Getting the type of 'name' (line 922)
        name_260187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 26), 'name', False)
        # Processing the call keyword arguments (line 922)
        kwargs_260188 = {}
        # Getting the type of 'self' (line 922)
        self_260185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 8), 'self', False)
        # Obtaining the member 'trigger_tool' of a type (line 922)
        trigger_tool_260186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 8), self_260185, 'trigger_tool')
        # Calling trigger_tool(args, kwargs) (line 922)
        trigger_tool_call_result_260189 = invoke(stypy.reporting.localization.Localization(__file__, 922, 8), trigger_tool_260186, *[name_260187], **kwargs_260188)
        
        
        # ################# End of '_button_click(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_button_click' in the type store
        # Getting the type of 'stypy_return_type' (line 921)
        stypy_return_type_260190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260190)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_button_click'
        return stypy_return_type_260190


    @norecursion
    def toggle_toolitem(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'toggle_toolitem'
        module_type_store = module_type_store.open_function_context('toggle_toolitem', 924, 4, False)
        # Assigning a type to the variable 'self' (line 925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolbarTk.toggle_toolitem.__dict__.__setitem__('stypy_localization', localization)
        ToolbarTk.toggle_toolitem.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolbarTk.toggle_toolitem.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolbarTk.toggle_toolitem.__dict__.__setitem__('stypy_function_name', 'ToolbarTk.toggle_toolitem')
        ToolbarTk.toggle_toolitem.__dict__.__setitem__('stypy_param_names_list', ['name', 'toggled'])
        ToolbarTk.toggle_toolitem.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolbarTk.toggle_toolitem.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolbarTk.toggle_toolitem.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolbarTk.toggle_toolitem.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolbarTk.toggle_toolitem.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolbarTk.toggle_toolitem.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolbarTk.toggle_toolitem', ['name', 'toggled'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'toggle_toolitem', localization, ['name', 'toggled'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'toggle_toolitem(...)' code ##################

        
        
        # Getting the type of 'name' (line 925)
        name_260191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 11), 'name')
        # Getting the type of 'self' (line 925)
        self_260192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 23), 'self')
        # Obtaining the member '_toolitems' of a type (line 925)
        _toolitems_260193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 23), self_260192, '_toolitems')
        # Applying the binary operator 'notin' (line 925)
        result_contains_260194 = python_operator(stypy.reporting.localization.Localization(__file__, 925, 11), 'notin', name_260191, _toolitems_260193)
        
        # Testing the type of an if condition (line 925)
        if_condition_260195 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 925, 8), result_contains_260194)
        # Assigning a type to the variable 'if_condition_260195' (line 925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 8), 'if_condition_260195', if_condition_260195)
        # SSA begins for if statement (line 925)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 926, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 925)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 927)
        name_260196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 40), 'name')
        # Getting the type of 'self' (line 927)
        self_260197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 24), 'self')
        # Obtaining the member '_toolitems' of a type (line 927)
        _toolitems_260198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 927, 24), self_260197, '_toolitems')
        # Obtaining the member '__getitem__' of a type (line 927)
        getitem___260199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 927, 24), _toolitems_260198, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 927)
        subscript_call_result_260200 = invoke(stypy.reporting.localization.Localization(__file__, 927, 24), getitem___260199, name_260196)
        
        # Testing the type of a for loop iterable (line 927)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 927, 8), subscript_call_result_260200)
        # Getting the type of the for loop variable (line 927)
        for_loop_var_260201 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 927, 8), subscript_call_result_260200)
        # Assigning a type to the variable 'toolitem' (line 927)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 927, 8), 'toolitem', for_loop_var_260201)
        # SSA begins for a for statement (line 927)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'toggled' (line 928)
        toggled_260202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 15), 'toggled')
        # Testing the type of an if condition (line 928)
        if_condition_260203 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 928, 12), toggled_260202)
        # Assigning a type to the variable 'if_condition_260203' (line 928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 12), 'if_condition_260203', if_condition_260203)
        # SSA begins for if statement (line 928)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to select(...): (line 929)
        # Processing the call keyword arguments (line 929)
        kwargs_260206 = {}
        # Getting the type of 'toolitem' (line 929)
        toolitem_260204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 16), 'toolitem', False)
        # Obtaining the member 'select' of a type (line 929)
        select_260205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 16), toolitem_260204, 'select')
        # Calling select(args, kwargs) (line 929)
        select_call_result_260207 = invoke(stypy.reporting.localization.Localization(__file__, 929, 16), select_260205, *[], **kwargs_260206)
        
        # SSA branch for the else part of an if statement (line 928)
        module_type_store.open_ssa_branch('else')
        
        # Call to deselect(...): (line 931)
        # Processing the call keyword arguments (line 931)
        kwargs_260210 = {}
        # Getting the type of 'toolitem' (line 931)
        toolitem_260208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 16), 'toolitem', False)
        # Obtaining the member 'deselect' of a type (line 931)
        deselect_260209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 16), toolitem_260208, 'deselect')
        # Calling deselect(args, kwargs) (line 931)
        deselect_call_result_260211 = invoke(stypy.reporting.localization.Localization(__file__, 931, 16), deselect_260209, *[], **kwargs_260210)
        
        # SSA join for if statement (line 928)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'toggle_toolitem(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'toggle_toolitem' in the type store
        # Getting the type of 'stypy_return_type' (line 924)
        stypy_return_type_260212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260212)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'toggle_toolitem'
        return stypy_return_type_260212


    @norecursion
    def remove_toolitem(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'remove_toolitem'
        module_type_store = module_type_store.open_function_context('remove_toolitem', 933, 4, False)
        # Assigning a type to the variable 'self' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolbarTk.remove_toolitem.__dict__.__setitem__('stypy_localization', localization)
        ToolbarTk.remove_toolitem.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolbarTk.remove_toolitem.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolbarTk.remove_toolitem.__dict__.__setitem__('stypy_function_name', 'ToolbarTk.remove_toolitem')
        ToolbarTk.remove_toolitem.__dict__.__setitem__('stypy_param_names_list', ['name'])
        ToolbarTk.remove_toolitem.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolbarTk.remove_toolitem.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolbarTk.remove_toolitem.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolbarTk.remove_toolitem.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolbarTk.remove_toolitem.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolbarTk.remove_toolitem.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolbarTk.remove_toolitem', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'remove_toolitem', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'remove_toolitem(...)' code ##################

        
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 934)
        name_260213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 40), 'name')
        # Getting the type of 'self' (line 934)
        self_260214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 24), 'self')
        # Obtaining the member '_toolitems' of a type (line 934)
        _toolitems_260215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 24), self_260214, '_toolitems')
        # Obtaining the member '__getitem__' of a type (line 934)
        getitem___260216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 24), _toolitems_260215, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 934)
        subscript_call_result_260217 = invoke(stypy.reporting.localization.Localization(__file__, 934, 24), getitem___260216, name_260213)
        
        # Testing the type of a for loop iterable (line 934)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 934, 8), subscript_call_result_260217)
        # Getting the type of the for loop variable (line 934)
        for_loop_var_260218 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 934, 8), subscript_call_result_260217)
        # Assigning a type to the variable 'toolitem' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'toolitem', for_loop_var_260218)
        # SSA begins for a for statement (line 934)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to pack_forget(...): (line 935)
        # Processing the call keyword arguments (line 935)
        kwargs_260221 = {}
        # Getting the type of 'toolitem' (line 935)
        toolitem_260219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 12), 'toolitem', False)
        # Obtaining the member 'pack_forget' of a type (line 935)
        pack_forget_260220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 12), toolitem_260219, 'pack_forget')
        # Calling pack_forget(args, kwargs) (line 935)
        pack_forget_call_result_260222 = invoke(stypy.reporting.localization.Localization(__file__, 935, 12), pack_forget_260220, *[], **kwargs_260221)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Deleting a member
        # Getting the type of 'self' (line 936)
        self_260223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 12), 'self')
        # Obtaining the member '_toolitems' of a type (line 936)
        _toolitems_260224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 12), self_260223, '_toolitems')
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 936)
        name_260225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 28), 'name')
        # Getting the type of 'self' (line 936)
        self_260226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 12), 'self')
        # Obtaining the member '_toolitems' of a type (line 936)
        _toolitems_260227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 12), self_260226, '_toolitems')
        # Obtaining the member '__getitem__' of a type (line 936)
        getitem___260228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 12), _toolitems_260227, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 936)
        subscript_call_result_260229 = invoke(stypy.reporting.localization.Localization(__file__, 936, 12), getitem___260228, name_260225)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 936, 8), _toolitems_260224, subscript_call_result_260229)
        
        # ################# End of 'remove_toolitem(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'remove_toolitem' in the type store
        # Getting the type of 'stypy_return_type' (line 933)
        stypy_return_type_260230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260230)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'remove_toolitem'
        return stypy_return_type_260230


# Assigning a type to the variable 'ToolbarTk' (line 870)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 0), 'ToolbarTk', ToolbarTk)
# Declaration of the 'StatusbarTk' class
# Getting the type of 'StatusbarBase' (line 939)
StatusbarBase_260231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 18), 'StatusbarBase')
# Getting the type of 'Tk' (line 939)
Tk_260232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 33), 'Tk')
# Obtaining the member 'Frame' of a type (line 939)
Frame_260233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 939, 33), Tk_260232, 'Frame')

class StatusbarTk(StatusbarBase_260231, Frame_260233, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 940, 4, False)
        # Assigning a type to the variable 'self' (line 941)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 941, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StatusbarTk.__init__', ['window'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['window'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 941)
        # Processing the call arguments (line 941)
        # Getting the type of 'self' (line 941)
        self_260236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 31), 'self', False)
        # Getting the type of 'args' (line 941)
        args_260237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 38), 'args', False)
        # Processing the call keyword arguments (line 941)
        # Getting the type of 'kwargs' (line 941)
        kwargs_260238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 46), 'kwargs', False)
        kwargs_260239 = {'kwargs_260238': kwargs_260238}
        # Getting the type of 'StatusbarBase' (line 941)
        StatusbarBase_260234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 8), 'StatusbarBase', False)
        # Obtaining the member '__init__' of a type (line 941)
        init___260235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 941, 8), StatusbarBase_260234, '__init__')
        # Calling __init__(args, kwargs) (line 941)
        init___call_result_260240 = invoke(stypy.reporting.localization.Localization(__file__, 941, 8), init___260235, *[self_260236, args_260237], **kwargs_260239)
        
        
        # Assigning a Attribute to a Tuple (line 942):
        
        # Assigning a Subscript to a Name (line 942):
        
        # Obtaining the type of the subscript
        int_260241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 8), 'int')
        # Getting the type of 'self' (line 942)
        self_260242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 21), 'self')
        # Obtaining the member 'toolmanager' of a type (line 942)
        toolmanager_260243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 21), self_260242, 'toolmanager')
        # Obtaining the member 'canvas' of a type (line 942)
        canvas_260244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 21), toolmanager_260243, 'canvas')
        # Obtaining the member 'figure' of a type (line 942)
        figure_260245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 21), canvas_260244, 'figure')
        # Obtaining the member 'bbox' of a type (line 942)
        bbox_260246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 21), figure_260245, 'bbox')
        # Obtaining the member 'intervalx' of a type (line 942)
        intervalx_260247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 21), bbox_260246, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 942)
        getitem___260248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 8), intervalx_260247, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 942)
        subscript_call_result_260249 = invoke(stypy.reporting.localization.Localization(__file__, 942, 8), getitem___260248, int_260241)
        
        # Assigning a type to the variable 'tuple_var_assignment_257468' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'tuple_var_assignment_257468', subscript_call_result_260249)
        
        # Assigning a Subscript to a Name (line 942):
        
        # Obtaining the type of the subscript
        int_260250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 8), 'int')
        # Getting the type of 'self' (line 942)
        self_260251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 21), 'self')
        # Obtaining the member 'toolmanager' of a type (line 942)
        toolmanager_260252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 21), self_260251, 'toolmanager')
        # Obtaining the member 'canvas' of a type (line 942)
        canvas_260253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 21), toolmanager_260252, 'canvas')
        # Obtaining the member 'figure' of a type (line 942)
        figure_260254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 21), canvas_260253, 'figure')
        # Obtaining the member 'bbox' of a type (line 942)
        bbox_260255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 21), figure_260254, 'bbox')
        # Obtaining the member 'intervalx' of a type (line 942)
        intervalx_260256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 21), bbox_260255, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 942)
        getitem___260257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 8), intervalx_260256, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 942)
        subscript_call_result_260258 = invoke(stypy.reporting.localization.Localization(__file__, 942, 8), getitem___260257, int_260250)
        
        # Assigning a type to the variable 'tuple_var_assignment_257469' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'tuple_var_assignment_257469', subscript_call_result_260258)
        
        # Assigning a Name to a Name (line 942):
        # Getting the type of 'tuple_var_assignment_257468' (line 942)
        tuple_var_assignment_257468_260259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'tuple_var_assignment_257468')
        # Assigning a type to the variable 'xmin' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'xmin', tuple_var_assignment_257468_260259)
        
        # Assigning a Name to a Name (line 942):
        # Getting the type of 'tuple_var_assignment_257469' (line 942)
        tuple_var_assignment_257469_260260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'tuple_var_assignment_257469')
        # Assigning a type to the variable 'xmax' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 14), 'xmax', tuple_var_assignment_257469_260260)
        
        # Assigning a Tuple to a Tuple (line 943):
        
        # Assigning a Num to a Name (line 943):
        int_260261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 24), 'int')
        # Assigning a type to the variable 'tuple_assignment_257470' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 8), 'tuple_assignment_257470', int_260261)
        
        # Assigning a BinOp to a Name (line 943):
        # Getting the type of 'xmax' (line 943)
        xmax_260262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 28), 'xmax')
        # Getting the type of 'xmin' (line 943)
        xmin_260263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 35), 'xmin')
        # Applying the binary operator '-' (line 943)
        result_sub_260264 = python_operator(stypy.reporting.localization.Localization(__file__, 943, 28), '-', xmax_260262, xmin_260263)
        
        # Assigning a type to the variable 'tuple_assignment_257471' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 8), 'tuple_assignment_257471', result_sub_260264)
        
        # Assigning a Name to a Name (line 943):
        # Getting the type of 'tuple_assignment_257470' (line 943)
        tuple_assignment_257470_260265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 8), 'tuple_assignment_257470')
        # Assigning a type to the variable 'height' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 8), 'height', tuple_assignment_257470_260265)
        
        # Assigning a Name to a Name (line 943):
        # Getting the type of 'tuple_assignment_257471' (line 943)
        tuple_assignment_257471_260266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 8), 'tuple_assignment_257471')
        # Assigning a type to the variable 'width' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 16), 'width', tuple_assignment_257471_260266)
        
        # Call to __init__(...): (line 944)
        # Processing the call arguments (line 944)
        # Getting the type of 'self' (line 944)
        self_260270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 26), 'self', False)
        # Processing the call keyword arguments (line 944)
        # Getting the type of 'window' (line 944)
        window_260271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 39), 'window', False)
        keyword_260272 = window_260271
        
        # Call to int(...): (line 945)
        # Processing the call arguments (line 945)
        # Getting the type of 'width' (line 945)
        width_260274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 36), 'width', False)
        # Processing the call keyword arguments (line 945)
        kwargs_260275 = {}
        # Getting the type of 'int' (line 945)
        int_260273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 32), 'int', False)
        # Calling int(args, kwargs) (line 945)
        int_call_result_260276 = invoke(stypy.reporting.localization.Localization(__file__, 945, 32), int_260273, *[width_260274], **kwargs_260275)
        
        keyword_260277 = int_call_result_260276
        
        # Call to int(...): (line 945)
        # Processing the call arguments (line 945)
        # Getting the type of 'height' (line 945)
        height_260279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 55), 'height', False)
        # Processing the call keyword arguments (line 945)
        kwargs_260280 = {}
        # Getting the type of 'int' (line 945)
        int_260278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 51), 'int', False)
        # Calling int(args, kwargs) (line 945)
        int_call_result_260281 = invoke(stypy.reporting.localization.Localization(__file__, 945, 51), int_260278, *[height_260279], **kwargs_260280)
        
        keyword_260282 = int_call_result_260281
        int_260283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 38), 'int')
        keyword_260284 = int_260283
        kwargs_260285 = {'width': keyword_260277, 'master': keyword_260272, 'borderwidth': keyword_260284, 'height': keyword_260282}
        # Getting the type of 'Tk' (line 944)
        Tk_260267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'Tk', False)
        # Obtaining the member 'Frame' of a type (line 944)
        Frame_260268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 8), Tk_260267, 'Frame')
        # Obtaining the member '__init__' of a type (line 944)
        init___260269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 8), Frame_260268, '__init__')
        # Calling __init__(args, kwargs) (line 944)
        init___call_result_260286 = invoke(stypy.reporting.localization.Localization(__file__, 944, 8), init___260269, *[self_260270], **kwargs_260285)
        
        
        # Assigning a Call to a Attribute (line 947):
        
        # Assigning a Call to a Attribute (line 947):
        
        # Call to StringVar(...): (line 947)
        # Processing the call keyword arguments (line 947)
        # Getting the type of 'self' (line 947)
        self_260289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 44), 'self', False)
        keyword_260290 = self_260289
        kwargs_260291 = {'master': keyword_260290}
        # Getting the type of 'Tk' (line 947)
        Tk_260287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 24), 'Tk', False)
        # Obtaining the member 'StringVar' of a type (line 947)
        StringVar_260288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 24), Tk_260287, 'StringVar')
        # Calling StringVar(args, kwargs) (line 947)
        StringVar_call_result_260292 = invoke(stypy.reporting.localization.Localization(__file__, 947, 24), StringVar_260288, *[], **kwargs_260291)
        
        # Getting the type of 'self' (line 947)
        self_260293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 8), 'self')
        # Setting the type of the member '_message' of a type (line 947)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 8), self_260293, '_message', StringVar_call_result_260292)
        
        # Assigning a Call to a Attribute (line 948):
        
        # Assigning a Call to a Attribute (line 948):
        
        # Call to Label(...): (line 948)
        # Processing the call keyword arguments (line 948)
        # Getting the type of 'self' (line 948)
        self_260296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 46), 'self', False)
        keyword_260297 = self_260296
        # Getting the type of 'self' (line 948)
        self_260298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 65), 'self', False)
        # Obtaining the member '_message' of a type (line 948)
        _message_260299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 65), self_260298, '_message')
        keyword_260300 = _message_260299
        kwargs_260301 = {'master': keyword_260297, 'textvariable': keyword_260300}
        # Getting the type of 'Tk' (line 948)
        Tk_260294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 30), 'Tk', False)
        # Obtaining the member 'Label' of a type (line 948)
        Label_260295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 30), Tk_260294, 'Label')
        # Calling Label(args, kwargs) (line 948)
        Label_call_result_260302 = invoke(stypy.reporting.localization.Localization(__file__, 948, 30), Label_260295, *[], **kwargs_260301)
        
        # Getting the type of 'self' (line 948)
        self_260303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 8), 'self')
        # Setting the type of the member '_message_label' of a type (line 948)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 8), self_260303, '_message_label', Label_call_result_260302)
        
        # Call to pack(...): (line 949)
        # Processing the call keyword arguments (line 949)
        # Getting the type of 'Tk' (line 949)
        Tk_260307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 38), 'Tk', False)
        # Obtaining the member 'RIGHT' of a type (line 949)
        RIGHT_260308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 38), Tk_260307, 'RIGHT')
        keyword_260309 = RIGHT_260308
        kwargs_260310 = {'side': keyword_260309}
        # Getting the type of 'self' (line 949)
        self_260304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 8), 'self', False)
        # Obtaining the member '_message_label' of a type (line 949)
        _message_label_260305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 8), self_260304, '_message_label')
        # Obtaining the member 'pack' of a type (line 949)
        pack_260306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 8), _message_label_260305, 'pack')
        # Calling pack(args, kwargs) (line 949)
        pack_call_result_260311 = invoke(stypy.reporting.localization.Localization(__file__, 949, 8), pack_260306, *[], **kwargs_260310)
        
        
        # Call to pack(...): (line 950)
        # Processing the call keyword arguments (line 950)
        # Getting the type of 'Tk' (line 950)
        Tk_260314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 23), 'Tk', False)
        # Obtaining the member 'TOP' of a type (line 950)
        TOP_260315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 23), Tk_260314, 'TOP')
        keyword_260316 = TOP_260315
        # Getting the type of 'Tk' (line 950)
        Tk_260317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 36), 'Tk', False)
        # Obtaining the member 'X' of a type (line 950)
        X_260318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 36), Tk_260317, 'X')
        keyword_260319 = X_260318
        kwargs_260320 = {'side': keyword_260316, 'fill': keyword_260319}
        # Getting the type of 'self' (line 950)
        self_260312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'self', False)
        # Obtaining the member 'pack' of a type (line 950)
        pack_260313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 8), self_260312, 'pack')
        # Calling pack(args, kwargs) (line 950)
        pack_call_result_260321 = invoke(stypy.reporting.localization.Localization(__file__, 950, 8), pack_260313, *[], **kwargs_260320)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_message(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_message'
        module_type_store = module_type_store.open_function_context('set_message', 952, 4, False)
        # Assigning a type to the variable 'self' (line 953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StatusbarTk.set_message.__dict__.__setitem__('stypy_localization', localization)
        StatusbarTk.set_message.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StatusbarTk.set_message.__dict__.__setitem__('stypy_type_store', module_type_store)
        StatusbarTk.set_message.__dict__.__setitem__('stypy_function_name', 'StatusbarTk.set_message')
        StatusbarTk.set_message.__dict__.__setitem__('stypy_param_names_list', ['s'])
        StatusbarTk.set_message.__dict__.__setitem__('stypy_varargs_param_name', None)
        StatusbarTk.set_message.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StatusbarTk.set_message.__dict__.__setitem__('stypy_call_defaults', defaults)
        StatusbarTk.set_message.__dict__.__setitem__('stypy_call_varargs', varargs)
        StatusbarTk.set_message.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StatusbarTk.set_message.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StatusbarTk.set_message', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_message', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_message(...)' code ##################

        
        # Call to set(...): (line 953)
        # Processing the call arguments (line 953)
        # Getting the type of 's' (line 953)
        s_260325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 26), 's', False)
        # Processing the call keyword arguments (line 953)
        kwargs_260326 = {}
        # Getting the type of 'self' (line 953)
        self_260322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 8), 'self', False)
        # Obtaining the member '_message' of a type (line 953)
        _message_260323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 8), self_260322, '_message')
        # Obtaining the member 'set' of a type (line 953)
        set_260324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 8), _message_260323, 'set')
        # Calling set(args, kwargs) (line 953)
        set_call_result_260327 = invoke(stypy.reporting.localization.Localization(__file__, 953, 8), set_260324, *[s_260325], **kwargs_260326)
        
        
        # ################# End of 'set_message(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_message' in the type store
        # Getting the type of 'stypy_return_type' (line 952)
        stypy_return_type_260328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260328)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_message'
        return stypy_return_type_260328


# Assigning a type to the variable 'StatusbarTk' (line 939)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 0), 'StatusbarTk', StatusbarTk)
# Declaration of the 'SaveFigureTk' class
# Getting the type of 'backend_tools' (line 956)
backend_tools_260329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 19), 'backend_tools')
# Obtaining the member 'SaveFigureBase' of a type (line 956)
SaveFigureBase_260330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 956, 19), backend_tools_260329, 'SaveFigureBase')

class SaveFigureTk(SaveFigureBase_260330, ):

    @norecursion
    def trigger(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'trigger'
        module_type_store = module_type_store.open_function_context('trigger', 957, 4, False)
        # Assigning a type to the variable 'self' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SaveFigureTk.trigger.__dict__.__setitem__('stypy_localization', localization)
        SaveFigureTk.trigger.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SaveFigureTk.trigger.__dict__.__setitem__('stypy_type_store', module_type_store)
        SaveFigureTk.trigger.__dict__.__setitem__('stypy_function_name', 'SaveFigureTk.trigger')
        SaveFigureTk.trigger.__dict__.__setitem__('stypy_param_names_list', [])
        SaveFigureTk.trigger.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        SaveFigureTk.trigger.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SaveFigureTk.trigger.__dict__.__setitem__('stypy_call_defaults', defaults)
        SaveFigureTk.trigger.__dict__.__setitem__('stypy_call_varargs', varargs)
        SaveFigureTk.trigger.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SaveFigureTk.trigger.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SaveFigureTk.trigger', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'trigger', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'trigger(...)' code ##################

        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 958, 8))
        
        # 'from six.moves import tkinter_tkfiledialog, tkinter_messagebox' statement (line 958)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
        import_260331 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 958, 8), 'six.moves')

        if (type(import_260331) is not StypyTypeError):

            if (import_260331 != 'pyd_module'):
                __import__(import_260331)
                sys_modules_260332 = sys.modules[import_260331]
                import_from_module(stypy.reporting.localization.Localization(__file__, 958, 8), 'six.moves', sys_modules_260332.module_type_store, module_type_store, ['tkinter_tkfiledialog', 'tkinter_messagebox'])
                nest_module(stypy.reporting.localization.Localization(__file__, 958, 8), __file__, sys_modules_260332, sys_modules_260332.module_type_store, module_type_store)
            else:
                from six.moves import tkinter_tkfiledialog, tkinter_messagebox

                import_from_module(stypy.reporting.localization.Localization(__file__, 958, 8), 'six.moves', None, module_type_store, ['tkinter_tkfiledialog', 'tkinter_messagebox'], [tkinter_tkfiledialog, tkinter_messagebox])

        else:
            # Assigning a type to the variable 'six.moves' (line 958)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 8), 'six.moves', import_260331)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')
        
        
        # Assigning a Call to a Name (line 959):
        
        # Assigning a Call to a Name (line 959):
        
        # Call to copy(...): (line 959)
        # Processing the call keyword arguments (line 959)
        kwargs_260340 = {}
        
        # Call to get_supported_filetypes(...): (line 959)
        # Processing the call keyword arguments (line 959)
        kwargs_260337 = {}
        # Getting the type of 'self' (line 959)
        self_260333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 20), 'self', False)
        # Obtaining the member 'figure' of a type (line 959)
        figure_260334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 20), self_260333, 'figure')
        # Obtaining the member 'canvas' of a type (line 959)
        canvas_260335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 20), figure_260334, 'canvas')
        # Obtaining the member 'get_supported_filetypes' of a type (line 959)
        get_supported_filetypes_260336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 20), canvas_260335, 'get_supported_filetypes')
        # Calling get_supported_filetypes(args, kwargs) (line 959)
        get_supported_filetypes_call_result_260338 = invoke(stypy.reporting.localization.Localization(__file__, 959, 20), get_supported_filetypes_260336, *[], **kwargs_260337)
        
        # Obtaining the member 'copy' of a type (line 959)
        copy_260339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 20), get_supported_filetypes_call_result_260338, 'copy')
        # Calling copy(args, kwargs) (line 959)
        copy_call_result_260341 = invoke(stypy.reporting.localization.Localization(__file__, 959, 20), copy_260339, *[], **kwargs_260340)
        
        # Assigning a type to the variable 'filetypes' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 8), 'filetypes', copy_call_result_260341)
        
        # Assigning a Call to a Name (line 960):
        
        # Assigning a Call to a Name (line 960):
        
        # Call to get_default_filetype(...): (line 960)
        # Processing the call keyword arguments (line 960)
        kwargs_260346 = {}
        # Getting the type of 'self' (line 960)
        self_260342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 27), 'self', False)
        # Obtaining the member 'figure' of a type (line 960)
        figure_260343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 27), self_260342, 'figure')
        # Obtaining the member 'canvas' of a type (line 960)
        canvas_260344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 27), figure_260343, 'canvas')
        # Obtaining the member 'get_default_filetype' of a type (line 960)
        get_default_filetype_260345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 27), canvas_260344, 'get_default_filetype')
        # Calling get_default_filetype(args, kwargs) (line 960)
        get_default_filetype_call_result_260347 = invoke(stypy.reporting.localization.Localization(__file__, 960, 27), get_default_filetype_260345, *[], **kwargs_260346)
        
        # Assigning a type to the variable 'default_filetype' (line 960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 8), 'default_filetype', get_default_filetype_call_result_260347)
        
        # Assigning a Call to a Name (line 964):
        
        # Assigning a Call to a Name (line 964):
        
        # Call to pop(...): (line 964)
        # Processing the call arguments (line 964)
        # Getting the type of 'default_filetype' (line 964)
        default_filetype_260350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 46), 'default_filetype', False)
        # Processing the call keyword arguments (line 964)
        kwargs_260351 = {}
        # Getting the type of 'filetypes' (line 964)
        filetypes_260348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 32), 'filetypes', False)
        # Obtaining the member 'pop' of a type (line 964)
        pop_260349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 32), filetypes_260348, 'pop')
        # Calling pop(args, kwargs) (line 964)
        pop_call_result_260352 = invoke(stypy.reporting.localization.Localization(__file__, 964, 32), pop_260349, *[default_filetype_260350], **kwargs_260351)
        
        # Assigning a type to the variable 'default_filetype_name' (line 964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 8), 'default_filetype_name', pop_call_result_260352)
        
        # Assigning a BinOp to a Name (line 965):
        
        # Assigning a BinOp to a Name (line 965):
        
        # Obtaining an instance of the builtin type 'list' (line 965)
        list_260353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 965, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 965)
        # Adding element type (line 965)
        
        # Obtaining an instance of the builtin type 'tuple' (line 965)
        tuple_260354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 965, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 965)
        # Adding element type (line 965)
        # Getting the type of 'default_filetype' (line 965)
        default_filetype_260355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 30), 'default_filetype')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 965, 30), tuple_260354, default_filetype_260355)
        # Adding element type (line 965)
        # Getting the type of 'default_filetype_name' (line 965)
        default_filetype_name_260356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 48), 'default_filetype_name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 965, 30), tuple_260354, default_filetype_name_260356)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 965, 28), list_260353, tuple_260354)
        
        
        # Call to sorted(...): (line 966)
        # Processing the call arguments (line 966)
        
        # Call to iteritems(...): (line 966)
        # Processing the call arguments (line 966)
        # Getting the type of 'filetypes' (line 966)
        filetypes_260360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 51), 'filetypes', False)
        # Processing the call keyword arguments (line 966)
        kwargs_260361 = {}
        # Getting the type of 'six' (line 966)
        six_260358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 37), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 966)
        iteritems_260359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 37), six_260358, 'iteritems')
        # Calling iteritems(args, kwargs) (line 966)
        iteritems_call_result_260362 = invoke(stypy.reporting.localization.Localization(__file__, 966, 37), iteritems_260359, *[filetypes_260360], **kwargs_260361)
        
        # Processing the call keyword arguments (line 966)
        kwargs_260363 = {}
        # Getting the type of 'sorted' (line 966)
        sorted_260357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 30), 'sorted', False)
        # Calling sorted(args, kwargs) (line 966)
        sorted_call_result_260364 = invoke(stypy.reporting.localization.Localization(__file__, 966, 30), sorted_260357, *[iteritems_call_result_260362], **kwargs_260363)
        
        # Applying the binary operator '+' (line 965)
        result_add_260365 = python_operator(stypy.reporting.localization.Localization(__file__, 965, 28), '+', list_260353, sorted_call_result_260364)
        
        # Assigning a type to the variable 'sorted_filetypes' (line 965)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 965, 8), 'sorted_filetypes', result_add_260365)
        
        # Assigning a ListComp to a Name (line 967):
        
        # Assigning a ListComp to a Name (line 967):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'sorted_filetypes' (line 967)
        sorted_filetypes_260371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 62), 'sorted_filetypes')
        comprehension_260372 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 967, 24), sorted_filetypes_260371)
        # Assigning a type to the variable 'ext' (line 967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 24), 'ext', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 967, 24), comprehension_260372))
        # Assigning a type to the variable 'name' (line 967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 24), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 967, 24), comprehension_260372))
        
        # Obtaining an instance of the builtin type 'tuple' (line 967)
        tuple_260366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 967)
        # Adding element type (line 967)
        # Getting the type of 'name' (line 967)
        name_260367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 25), 'name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 967, 25), tuple_260366, name_260367)
        # Adding element type (line 967)
        unicode_260368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 31), 'unicode', u'*.%s')
        # Getting the type of 'ext' (line 967)
        ext_260369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 40), 'ext')
        # Applying the binary operator '%' (line 967)
        result_mod_260370 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 31), '%', unicode_260368, ext_260369)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 967, 25), tuple_260366, result_mod_260370)
        
        list_260373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 24), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 967, 24), list_260373, tuple_260366)
        # Assigning a type to the variable 'tk_filetypes' (line 967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 8), 'tk_filetypes', list_260373)
        
        # Assigning a Str to a Name (line 974):
        
        # Assigning a Str to a Name (line 974):
        unicode_260374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 27), 'unicode', u'')
        # Assigning a type to the variable 'defaultextension' (line 974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 8), 'defaultextension', unicode_260374)
        
        # Assigning a Call to a Name (line 975):
        
        # Assigning a Call to a Name (line 975):
        
        # Call to expanduser(...): (line 975)
        # Processing the call arguments (line 975)
        
        # Obtaining the type of the subscript
        unicode_260378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 975, 49), 'unicode', u'savefig.directory')
        # Getting the type of 'rcParams' (line 975)
        rcParams_260379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 40), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 975)
        getitem___260380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 40), rcParams_260379, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 975)
        subscript_call_result_260381 = invoke(stypy.reporting.localization.Localization(__file__, 975, 40), getitem___260380, unicode_260378)
        
        # Processing the call keyword arguments (line 975)
        kwargs_260382 = {}
        # Getting the type of 'os' (line 975)
        os_260375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 21), 'os', False)
        # Obtaining the member 'path' of a type (line 975)
        path_260376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 21), os_260375, 'path')
        # Obtaining the member 'expanduser' of a type (line 975)
        expanduser_260377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 21), path_260376, 'expanduser')
        # Calling expanduser(args, kwargs) (line 975)
        expanduser_call_result_260383 = invoke(stypy.reporting.localization.Localization(__file__, 975, 21), expanduser_260377, *[subscript_call_result_260381], **kwargs_260382)
        
        # Assigning a type to the variable 'initialdir' (line 975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 8), 'initialdir', expanduser_call_result_260383)
        
        # Assigning a Call to a Name (line 976):
        
        # Assigning a Call to a Name (line 976):
        
        # Call to get_default_filename(...): (line 976)
        # Processing the call keyword arguments (line 976)
        kwargs_260388 = {}
        # Getting the type of 'self' (line 976)
        self_260384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 22), 'self', False)
        # Obtaining the member 'figure' of a type (line 976)
        figure_260385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 22), self_260384, 'figure')
        # Obtaining the member 'canvas' of a type (line 976)
        canvas_260386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 22), figure_260385, 'canvas')
        # Obtaining the member 'get_default_filename' of a type (line 976)
        get_default_filename_260387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 22), canvas_260386, 'get_default_filename')
        # Calling get_default_filename(args, kwargs) (line 976)
        get_default_filename_call_result_260389 = invoke(stypy.reporting.localization.Localization(__file__, 976, 22), get_default_filename_260387, *[], **kwargs_260388)
        
        # Assigning a type to the variable 'initialfile' (line 976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 8), 'initialfile', get_default_filename_call_result_260389)
        
        # Assigning a Call to a Name (line 977):
        
        # Assigning a Call to a Name (line 977):
        
        # Call to asksaveasfilename(...): (line 977)
        # Processing the call keyword arguments (line 977)
        # Getting the type of 'self' (line 978)
        self_260392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 19), 'self', False)
        # Obtaining the member 'figure' of a type (line 978)
        figure_260393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 19), self_260392, 'figure')
        # Obtaining the member 'canvas' of a type (line 978)
        canvas_260394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 19), figure_260393, 'canvas')
        # Obtaining the member 'manager' of a type (line 978)
        manager_260395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 19), canvas_260394, 'manager')
        # Obtaining the member 'window' of a type (line 978)
        window_260396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 19), manager_260395, 'window')
        keyword_260397 = window_260396
        unicode_260398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 979, 18), 'unicode', u'Save the figure')
        keyword_260399 = unicode_260398
        # Getting the type of 'tk_filetypes' (line 980)
        tk_filetypes_260400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 22), 'tk_filetypes', False)
        keyword_260401 = tk_filetypes_260400
        # Getting the type of 'defaultextension' (line 981)
        defaultextension_260402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 29), 'defaultextension', False)
        keyword_260403 = defaultextension_260402
        # Getting the type of 'initialdir' (line 982)
        initialdir_260404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 23), 'initialdir', False)
        keyword_260405 = initialdir_260404
        # Getting the type of 'initialfile' (line 983)
        initialfile_260406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 24), 'initialfile', False)
        keyword_260407 = initialfile_260406
        kwargs_260408 = {'initialdir': keyword_260405, 'title': keyword_260399, 'initialfile': keyword_260407, 'master': keyword_260397, 'defaultextension': keyword_260403, 'filetypes': keyword_260401}
        # Getting the type of 'tkinter_tkfiledialog' (line 977)
        tkinter_tkfiledialog_260390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 16), 'tkinter_tkfiledialog', False)
        # Obtaining the member 'asksaveasfilename' of a type (line 977)
        asksaveasfilename_260391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 16), tkinter_tkfiledialog_260390, 'asksaveasfilename')
        # Calling asksaveasfilename(args, kwargs) (line 977)
        asksaveasfilename_call_result_260409 = invoke(stypy.reporting.localization.Localization(__file__, 977, 16), asksaveasfilename_260391, *[], **kwargs_260408)
        
        # Assigning a type to the variable 'fname' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 8), 'fname', asksaveasfilename_call_result_260409)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'fname' (line 986)
        fname_260410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 11), 'fname')
        unicode_260411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 20), 'unicode', u'')
        # Applying the binary operator '==' (line 986)
        result_eq_260412 = python_operator(stypy.reporting.localization.Localization(__file__, 986, 11), '==', fname_260410, unicode_260411)
        
        
        # Getting the type of 'fname' (line 986)
        fname_260413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 26), 'fname')
        
        # Obtaining an instance of the builtin type 'tuple' (line 986)
        tuple_260414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 986)
        
        # Applying the binary operator '==' (line 986)
        result_eq_260415 = python_operator(stypy.reporting.localization.Localization(__file__, 986, 26), '==', fname_260413, tuple_260414)
        
        # Applying the binary operator 'or' (line 986)
        result_or_keyword_260416 = python_operator(stypy.reporting.localization.Localization(__file__, 986, 11), 'or', result_eq_260412, result_eq_260415)
        
        # Testing the type of an if condition (line 986)
        if_condition_260417 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 986, 8), result_or_keyword_260416)
        # Assigning a type to the variable 'if_condition_260417' (line 986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'if_condition_260417', if_condition_260417)
        # SSA begins for if statement (line 986)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 12), 'stypy_return_type', types.NoneType)
        # SSA branch for the else part of an if statement (line 986)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'initialdir' (line 989)
        initialdir_260418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 15), 'initialdir')
        unicode_260419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 29), 'unicode', u'')
        # Applying the binary operator '==' (line 989)
        result_eq_260420 = python_operator(stypy.reporting.localization.Localization(__file__, 989, 15), '==', initialdir_260418, unicode_260419)
        
        # Testing the type of an if condition (line 989)
        if_condition_260421 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 989, 12), result_eq_260420)
        # Assigning a type to the variable 'if_condition_260421' (line 989)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 12), 'if_condition_260421', if_condition_260421)
        # SSA begins for if statement (line 989)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 991):
        
        # Assigning a Name to a Subscript (line 991):
        # Getting the type of 'initialdir' (line 991)
        initialdir_260422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 48), 'initialdir')
        # Getting the type of 'rcParams' (line 991)
        rcParams_260423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 16), 'rcParams')
        unicode_260424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 991, 25), 'unicode', u'savefig.directory')
        # Storing an element on a container (line 991)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 991, 16), rcParams_260423, (unicode_260424, initialdir_260422))
        # SSA branch for the else part of an if statement (line 989)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Subscript (line 994):
        
        # Assigning a Call to a Subscript (line 994):
        
        # Call to dirname(...): (line 994)
        # Processing the call arguments (line 994)
        
        # Call to text_type(...): (line 995)
        # Processing the call arguments (line 995)
        # Getting the type of 'fname' (line 995)
        fname_260430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 34), 'fname', False)
        # Processing the call keyword arguments (line 995)
        kwargs_260431 = {}
        # Getting the type of 'six' (line 995)
        six_260428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 20), 'six', False)
        # Obtaining the member 'text_type' of a type (line 995)
        text_type_260429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 20), six_260428, 'text_type')
        # Calling text_type(args, kwargs) (line 995)
        text_type_call_result_260432 = invoke(stypy.reporting.localization.Localization(__file__, 995, 20), text_type_260429, *[fname_260430], **kwargs_260431)
        
        # Processing the call keyword arguments (line 994)
        kwargs_260433 = {}
        # Getting the type of 'os' (line 994)
        os_260425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 48), 'os', False)
        # Obtaining the member 'path' of a type (line 994)
        path_260426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 48), os_260425, 'path')
        # Obtaining the member 'dirname' of a type (line 994)
        dirname_260427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 48), path_260426, 'dirname')
        # Calling dirname(args, kwargs) (line 994)
        dirname_call_result_260434 = invoke(stypy.reporting.localization.Localization(__file__, 994, 48), dirname_260427, *[text_type_call_result_260432], **kwargs_260433)
        
        # Getting the type of 'rcParams' (line 994)
        rcParams_260435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 16), 'rcParams')
        unicode_260436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 994, 25), 'unicode', u'savefig.directory')
        # Storing an element on a container (line 994)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 994, 16), rcParams_260435, (unicode_260436, dirname_call_result_260434))
        # SSA join for if statement (line 989)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 996)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to savefig(...): (line 998)
        # Processing the call arguments (line 998)
        # Getting the type of 'fname' (line 998)
        fname_260440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 36), 'fname', False)
        # Processing the call keyword arguments (line 998)
        kwargs_260441 = {}
        # Getting the type of 'self' (line 998)
        self_260437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 16), 'self', False)
        # Obtaining the member 'figure' of a type (line 998)
        figure_260438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 16), self_260437, 'figure')
        # Obtaining the member 'savefig' of a type (line 998)
        savefig_260439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 16), figure_260438, 'savefig')
        # Calling savefig(args, kwargs) (line 998)
        savefig_call_result_260442 = invoke(stypy.reporting.localization.Localization(__file__, 998, 16), savefig_260439, *[fname_260440], **kwargs_260441)
        
        # SSA branch for the except part of a try statement (line 996)
        # SSA branch for the except 'Exception' branch of a try statement (line 996)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'Exception' (line 999)
        Exception_260443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 19), 'Exception')
        # Assigning a type to the variable 'e' (line 999)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 999, 12), 'e', Exception_260443)
        
        # Call to showerror(...): (line 1000)
        # Processing the call arguments (line 1000)
        unicode_260446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1000, 45), 'unicode', u'Error saving file')
        
        # Call to str(...): (line 1000)
        # Processing the call arguments (line 1000)
        # Getting the type of 'e' (line 1000)
        e_260448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 70), 'e', False)
        # Processing the call keyword arguments (line 1000)
        kwargs_260449 = {}
        # Getting the type of 'str' (line 1000)
        str_260447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 66), 'str', False)
        # Calling str(args, kwargs) (line 1000)
        str_call_result_260450 = invoke(stypy.reporting.localization.Localization(__file__, 1000, 66), str_260447, *[e_260448], **kwargs_260449)
        
        # Processing the call keyword arguments (line 1000)
        kwargs_260451 = {}
        # Getting the type of 'tkinter_messagebox' (line 1000)
        tkinter_messagebox_260444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 16), 'tkinter_messagebox', False)
        # Obtaining the member 'showerror' of a type (line 1000)
        showerror_260445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 16), tkinter_messagebox_260444, 'showerror')
        # Calling showerror(args, kwargs) (line 1000)
        showerror_call_result_260452 = invoke(stypy.reporting.localization.Localization(__file__, 1000, 16), showerror_260445, *[unicode_260446, str_call_result_260450], **kwargs_260451)
        
        # SSA join for try-except statement (line 996)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 986)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'trigger(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'trigger' in the type store
        # Getting the type of 'stypy_return_type' (line 957)
        stypy_return_type_260453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260453)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'trigger'
        return stypy_return_type_260453


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 956, 0, False)
        # Assigning a type to the variable 'self' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SaveFigureTk.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'SaveFigureTk' (line 956)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 0), 'SaveFigureTk', SaveFigureTk)
# Declaration of the 'ConfigureSubplotsTk' class
# Getting the type of 'backend_tools' (line 1003)
backend_tools_260454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 26), 'backend_tools')
# Obtaining the member 'ConfigureSubplotsBase' of a type (line 1003)
ConfigureSubplotsBase_260455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 26), backend_tools_260454, 'ConfigureSubplotsBase')

class ConfigureSubplotsTk(ConfigureSubplotsBase_260455, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1004, 4, False)
        # Assigning a type to the variable 'self' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ConfigureSubplotsTk.__init__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1005)
        # Processing the call arguments (line 1005)
        # Getting the type of 'self' (line 1005)
        self_260459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 53), 'self', False)
        # Getting the type of 'args' (line 1005)
        args_260460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 60), 'args', False)
        # Processing the call keyword arguments (line 1005)
        # Getting the type of 'kwargs' (line 1005)
        kwargs_260461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 68), 'kwargs', False)
        kwargs_260462 = {'kwargs_260461': kwargs_260461}
        # Getting the type of 'backend_tools' (line 1005)
        backend_tools_260456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 8), 'backend_tools', False)
        # Obtaining the member 'ConfigureSubplotsBase' of a type (line 1005)
        ConfigureSubplotsBase_260457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 8), backend_tools_260456, 'ConfigureSubplotsBase')
        # Obtaining the member '__init__' of a type (line 1005)
        init___260458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 8), ConfigureSubplotsBase_260457, '__init__')
        # Calling __init__(args, kwargs) (line 1005)
        init___call_result_260463 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 8), init___260458, *[self_260459, args_260460], **kwargs_260462)
        
        
        # Assigning a Name to a Attribute (line 1006):
        
        # Assigning a Name to a Attribute (line 1006):
        # Getting the type of 'None' (line 1006)
        None_260464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 22), 'None')
        # Getting the type of 'self' (line 1006)
        self_260465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 8), 'self')
        # Setting the type of the member 'window' of a type (line 1006)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 8), self_260465, 'window', None_260464)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def trigger(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'trigger'
        module_type_store = module_type_store.open_function_context('trigger', 1008, 4, False)
        # Assigning a type to the variable 'self' (line 1009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ConfigureSubplotsTk.trigger.__dict__.__setitem__('stypy_localization', localization)
        ConfigureSubplotsTk.trigger.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ConfigureSubplotsTk.trigger.__dict__.__setitem__('stypy_type_store', module_type_store)
        ConfigureSubplotsTk.trigger.__dict__.__setitem__('stypy_function_name', 'ConfigureSubplotsTk.trigger')
        ConfigureSubplotsTk.trigger.__dict__.__setitem__('stypy_param_names_list', [])
        ConfigureSubplotsTk.trigger.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        ConfigureSubplotsTk.trigger.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ConfigureSubplotsTk.trigger.__dict__.__setitem__('stypy_call_defaults', defaults)
        ConfigureSubplotsTk.trigger.__dict__.__setitem__('stypy_call_varargs', varargs)
        ConfigureSubplotsTk.trigger.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ConfigureSubplotsTk.trigger.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ConfigureSubplotsTk.trigger', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'trigger', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'trigger(...)' code ##################

        
        # Call to init_window(...): (line 1009)
        # Processing the call keyword arguments (line 1009)
        kwargs_260468 = {}
        # Getting the type of 'self' (line 1009)
        self_260466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 8), 'self', False)
        # Obtaining the member 'init_window' of a type (line 1009)
        init_window_260467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 8), self_260466, 'init_window')
        # Calling init_window(args, kwargs) (line 1009)
        init_window_call_result_260469 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 8), init_window_260467, *[], **kwargs_260468)
        
        
        # Call to lift(...): (line 1010)
        # Processing the call keyword arguments (line 1010)
        kwargs_260473 = {}
        # Getting the type of 'self' (line 1010)
        self_260470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 8), 'self', False)
        # Obtaining the member 'window' of a type (line 1010)
        window_260471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 8), self_260470, 'window')
        # Obtaining the member 'lift' of a type (line 1010)
        lift_260472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 8), window_260471, 'lift')
        # Calling lift(args, kwargs) (line 1010)
        lift_call_result_260474 = invoke(stypy.reporting.localization.Localization(__file__, 1010, 8), lift_260472, *[], **kwargs_260473)
        
        
        # ################# End of 'trigger(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'trigger' in the type store
        # Getting the type of 'stypy_return_type' (line 1008)
        stypy_return_type_260475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260475)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'trigger'
        return stypy_return_type_260475


    @norecursion
    def init_window(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'init_window'
        module_type_store = module_type_store.open_function_context('init_window', 1012, 4, False)
        # Assigning a type to the variable 'self' (line 1013)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1013, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ConfigureSubplotsTk.init_window.__dict__.__setitem__('stypy_localization', localization)
        ConfigureSubplotsTk.init_window.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ConfigureSubplotsTk.init_window.__dict__.__setitem__('stypy_type_store', module_type_store)
        ConfigureSubplotsTk.init_window.__dict__.__setitem__('stypy_function_name', 'ConfigureSubplotsTk.init_window')
        ConfigureSubplotsTk.init_window.__dict__.__setitem__('stypy_param_names_list', [])
        ConfigureSubplotsTk.init_window.__dict__.__setitem__('stypy_varargs_param_name', None)
        ConfigureSubplotsTk.init_window.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ConfigureSubplotsTk.init_window.__dict__.__setitem__('stypy_call_defaults', defaults)
        ConfigureSubplotsTk.init_window.__dict__.__setitem__('stypy_call_varargs', varargs)
        ConfigureSubplotsTk.init_window.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ConfigureSubplotsTk.init_window.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ConfigureSubplotsTk.init_window', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'init_window', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'init_window(...)' code ##################

        
        # Getting the type of 'self' (line 1013)
        self_260476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 11), 'self')
        # Obtaining the member 'window' of a type (line 1013)
        window_260477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 11), self_260476, 'window')
        # Testing the type of an if condition (line 1013)
        if_condition_260478 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1013, 8), window_260477)
        # Assigning a type to the variable 'if_condition_260478' (line 1013)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1013, 8), 'if_condition_260478', if_condition_260478)
        # SSA begins for if statement (line 1013)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1014, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1013)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1016):
        
        # Assigning a Call to a Name (line 1016):
        
        # Call to Figure(...): (line 1016)
        # Processing the call keyword arguments (line 1016)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1016)
        tuple_260480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1016, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1016)
        # Adding element type (line 1016)
        int_260481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1016, 34), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1016, 34), tuple_260480, int_260481)
        # Adding element type (line 1016)
        int_260482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1016, 37), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1016, 34), tuple_260480, int_260482)
        
        keyword_260483 = tuple_260480
        kwargs_260484 = {'figsize': keyword_260483}
        # Getting the type of 'Figure' (line 1016)
        Figure_260479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 18), 'Figure', False)
        # Calling Figure(args, kwargs) (line 1016)
        Figure_call_result_260485 = invoke(stypy.reporting.localization.Localization(__file__, 1016, 18), Figure_260479, *[], **kwargs_260484)
        
        # Assigning a type to the variable 'toolfig' (line 1016)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 8), 'toolfig', Figure_call_result_260485)
        
        # Assigning a Call to a Attribute (line 1017):
        
        # Assigning a Call to a Attribute (line 1017):
        
        # Call to Tk(...): (line 1017)
        # Processing the call keyword arguments (line 1017)
        kwargs_260488 = {}
        # Getting the type of 'Tk' (line 1017)
        Tk_260486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 22), 'Tk', False)
        # Obtaining the member 'Tk' of a type (line 1017)
        Tk_260487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 22), Tk_260486, 'Tk')
        # Calling Tk(args, kwargs) (line 1017)
        Tk_call_result_260489 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 22), Tk_260487, *[], **kwargs_260488)
        
        # Getting the type of 'self' (line 1017)
        self_260490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 8), 'self')
        # Setting the type of the member 'window' of a type (line 1017)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 8), self_260490, 'window', Tk_call_result_260489)
        
        # Assigning a Call to a Name (line 1019):
        
        # Assigning a Call to a Name (line 1019):
        
        # Call to FigureCanvasTkAgg(...): (line 1019)
        # Processing the call arguments (line 1019)
        # Getting the type of 'toolfig' (line 1019)
        toolfig_260492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 35), 'toolfig', False)
        # Processing the call keyword arguments (line 1019)
        # Getting the type of 'self' (line 1019)
        self_260493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 51), 'self', False)
        # Obtaining the member 'window' of a type (line 1019)
        window_260494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1019, 51), self_260493, 'window')
        keyword_260495 = window_260494
        kwargs_260496 = {'master': keyword_260495}
        # Getting the type of 'FigureCanvasTkAgg' (line 1019)
        FigureCanvasTkAgg_260491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 17), 'FigureCanvasTkAgg', False)
        # Calling FigureCanvasTkAgg(args, kwargs) (line 1019)
        FigureCanvasTkAgg_call_result_260497 = invoke(stypy.reporting.localization.Localization(__file__, 1019, 17), FigureCanvasTkAgg_260491, *[toolfig_260492], **kwargs_260496)
        
        # Assigning a type to the variable 'canvas' (line 1019)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1019, 8), 'canvas', FigureCanvasTkAgg_call_result_260497)
        
        # Call to subplots_adjust(...): (line 1020)
        # Processing the call keyword arguments (line 1020)
        float_260500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 36), 'float')
        keyword_260501 = float_260500
        kwargs_260502 = {'top': keyword_260501}
        # Getting the type of 'toolfig' (line 1020)
        toolfig_260498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 8), 'toolfig', False)
        # Obtaining the member 'subplots_adjust' of a type (line 1020)
        subplots_adjust_260499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 8), toolfig_260498, 'subplots_adjust')
        # Calling subplots_adjust(args, kwargs) (line 1020)
        subplots_adjust_call_result_260503 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 8), subplots_adjust_260499, *[], **kwargs_260502)
        
        
        # Assigning a Call to a Name (line 1021):
        
        # Assigning a Call to a Name (line 1021):
        
        # Call to SubplotTool(...): (line 1021)
        # Processing the call arguments (line 1021)
        # Getting the type of 'self' (line 1021)
        self_260505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 28), 'self', False)
        # Obtaining the member 'figure' of a type (line 1021)
        figure_260506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1021, 28), self_260505, 'figure')
        # Getting the type of 'toolfig' (line 1021)
        toolfig_260507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 41), 'toolfig', False)
        # Processing the call keyword arguments (line 1021)
        kwargs_260508 = {}
        # Getting the type of 'SubplotTool' (line 1021)
        SubplotTool_260504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 16), 'SubplotTool', False)
        # Calling SubplotTool(args, kwargs) (line 1021)
        SubplotTool_call_result_260509 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 16), SubplotTool_260504, *[figure_260506, toolfig_260507], **kwargs_260508)
        
        # Assigning a type to the variable '_tool' (line 1021)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1021, 8), '_tool', SubplotTool_call_result_260509)
        
        # Call to show(...): (line 1022)
        # Processing the call keyword arguments (line 1022)
        kwargs_260512 = {}
        # Getting the type of 'canvas' (line 1022)
        canvas_260510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 8), 'canvas', False)
        # Obtaining the member 'show' of a type (line 1022)
        show_260511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1022, 8), canvas_260510, 'show')
        # Calling show(args, kwargs) (line 1022)
        show_call_result_260513 = invoke(stypy.reporting.localization.Localization(__file__, 1022, 8), show_260511, *[], **kwargs_260512)
        
        
        # Call to pack(...): (line 1023)
        # Processing the call keyword arguments (line 1023)
        # Getting the type of 'Tk' (line 1023)
        Tk_260519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 41), 'Tk', False)
        # Obtaining the member 'TOP' of a type (line 1023)
        TOP_260520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 41), Tk_260519, 'TOP')
        keyword_260521 = TOP_260520
        # Getting the type of 'Tk' (line 1023)
        Tk_260522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 54), 'Tk', False)
        # Obtaining the member 'BOTH' of a type (line 1023)
        BOTH_260523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 54), Tk_260522, 'BOTH')
        keyword_260524 = BOTH_260523
        int_260525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, 70), 'int')
        keyword_260526 = int_260525
        kwargs_260527 = {'side': keyword_260521, 'expand': keyword_260526, 'fill': keyword_260524}
        
        # Call to get_tk_widget(...): (line 1023)
        # Processing the call keyword arguments (line 1023)
        kwargs_260516 = {}
        # Getting the type of 'canvas' (line 1023)
        canvas_260514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 8), 'canvas', False)
        # Obtaining the member 'get_tk_widget' of a type (line 1023)
        get_tk_widget_260515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 8), canvas_260514, 'get_tk_widget')
        # Calling get_tk_widget(args, kwargs) (line 1023)
        get_tk_widget_call_result_260517 = invoke(stypy.reporting.localization.Localization(__file__, 1023, 8), get_tk_widget_260515, *[], **kwargs_260516)
        
        # Obtaining the member 'pack' of a type (line 1023)
        pack_260518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 8), get_tk_widget_call_result_260517, 'pack')
        # Calling pack(args, kwargs) (line 1023)
        pack_call_result_260528 = invoke(stypy.reporting.localization.Localization(__file__, 1023, 8), pack_260518, *[], **kwargs_260527)
        
        
        # Call to protocol(...): (line 1024)
        # Processing the call arguments (line 1024)
        unicode_260532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, 29), 'unicode', u'WM_DELETE_WINDOW')
        # Getting the type of 'self' (line 1024)
        self_260533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 49), 'self', False)
        # Obtaining the member 'destroy' of a type (line 1024)
        destroy_260534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1024, 49), self_260533, 'destroy')
        # Processing the call keyword arguments (line 1024)
        kwargs_260535 = {}
        # Getting the type of 'self' (line 1024)
        self_260529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 8), 'self', False)
        # Obtaining the member 'window' of a type (line 1024)
        window_260530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1024, 8), self_260529, 'window')
        # Obtaining the member 'protocol' of a type (line 1024)
        protocol_260531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1024, 8), window_260530, 'protocol')
        # Calling protocol(args, kwargs) (line 1024)
        protocol_call_result_260536 = invoke(stypy.reporting.localization.Localization(__file__, 1024, 8), protocol_260531, *[unicode_260532, destroy_260534], **kwargs_260535)
        
        
        # ################# End of 'init_window(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'init_window' in the type store
        # Getting the type of 'stypy_return_type' (line 1012)
        stypy_return_type_260537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260537)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'init_window'
        return stypy_return_type_260537


    @norecursion
    def destroy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'destroy'
        module_type_store = module_type_store.open_function_context('destroy', 1026, 4, False)
        # Assigning a type to the variable 'self' (line 1027)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1027, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ConfigureSubplotsTk.destroy.__dict__.__setitem__('stypy_localization', localization)
        ConfigureSubplotsTk.destroy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ConfigureSubplotsTk.destroy.__dict__.__setitem__('stypy_type_store', module_type_store)
        ConfigureSubplotsTk.destroy.__dict__.__setitem__('stypy_function_name', 'ConfigureSubplotsTk.destroy')
        ConfigureSubplotsTk.destroy.__dict__.__setitem__('stypy_param_names_list', [])
        ConfigureSubplotsTk.destroy.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        ConfigureSubplotsTk.destroy.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        ConfigureSubplotsTk.destroy.__dict__.__setitem__('stypy_call_defaults', defaults)
        ConfigureSubplotsTk.destroy.__dict__.__setitem__('stypy_call_varargs', varargs)
        ConfigureSubplotsTk.destroy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ConfigureSubplotsTk.destroy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ConfigureSubplotsTk.destroy', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'destroy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'destroy(...)' code ##################

        
        # Call to destroy(...): (line 1027)
        # Processing the call keyword arguments (line 1027)
        kwargs_260541 = {}
        # Getting the type of 'self' (line 1027)
        self_260538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 8), 'self', False)
        # Obtaining the member 'window' of a type (line 1027)
        window_260539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 8), self_260538, 'window')
        # Obtaining the member 'destroy' of a type (line 1027)
        destroy_260540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 8), window_260539, 'destroy')
        # Calling destroy(args, kwargs) (line 1027)
        destroy_call_result_260542 = invoke(stypy.reporting.localization.Localization(__file__, 1027, 8), destroy_260540, *[], **kwargs_260541)
        
        
        # Assigning a Name to a Attribute (line 1028):
        
        # Assigning a Name to a Attribute (line 1028):
        # Getting the type of 'None' (line 1028)
        None_260543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 22), 'None')
        # Getting the type of 'self' (line 1028)
        self_260544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 8), 'self')
        # Setting the type of the member 'window' of a type (line 1028)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 8), self_260544, 'window', None_260543)
        
        # ################# End of 'destroy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'destroy' in the type store
        # Getting the type of 'stypy_return_type' (line 1026)
        stypy_return_type_260545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260545)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'destroy'
        return stypy_return_type_260545


# Assigning a type to the variable 'ConfigureSubplotsTk' (line 1003)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1003, 0), 'ConfigureSubplotsTk', ConfigureSubplotsTk)

# Assigning a Name to a Attribute (line 1031):

# Assigning a Name to a Attribute (line 1031):
# Getting the type of 'SaveFigureTk' (line 1031)
SaveFigureTk_260546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 31), 'SaveFigureTk')
# Getting the type of 'backend_tools' (line 1031)
backend_tools_260547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 0), 'backend_tools')
# Setting the type of the member 'ToolSaveFigure' of a type (line 1031)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1031, 0), backend_tools_260547, 'ToolSaveFigure', SaveFigureTk_260546)

# Assigning a Name to a Attribute (line 1032):

# Assigning a Name to a Attribute (line 1032):
# Getting the type of 'ConfigureSubplotsTk' (line 1032)
ConfigureSubplotsTk_260548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 38), 'ConfigureSubplotsTk')
# Getting the type of 'backend_tools' (line 1032)
backend_tools_260549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 0), 'backend_tools')
# Setting the type of the member 'ToolConfigureSubplots' of a type (line 1032)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 0), backend_tools_260549, 'ToolConfigureSubplots', ConfigureSubplotsTk_260548)

# Assigning a Name to a Attribute (line 1033):

# Assigning a Name to a Attribute (line 1033):
# Getting the type of 'SetCursorTk' (line 1033)
SetCursorTk_260550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 30), 'SetCursorTk')
# Getting the type of 'backend_tools' (line 1033)
backend_tools_260551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 0), 'backend_tools')
# Setting the type of the member 'ToolSetCursor' of a type (line 1033)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1033, 0), backend_tools_260551, 'ToolSetCursor', SetCursorTk_260550)

# Assigning a Name to a Attribute (line 1034):

# Assigning a Name to a Attribute (line 1034):
# Getting the type of 'RubberbandTk' (line 1034)
RubberbandTk_260552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 31), 'RubberbandTk')
# Getting the type of 'backend_tools' (line 1034)
backend_tools_260553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 0), 'backend_tools')
# Setting the type of the member 'ToolRubberband' of a type (line 1034)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 0), backend_tools_260553, 'ToolRubberband', RubberbandTk_260552)

# Assigning a Name to a Name (line 1035):

# Assigning a Name to a Name (line 1035):
# Getting the type of 'ToolbarTk' (line 1035)
ToolbarTk_260554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 10), 'ToolbarTk')
# Assigning a type to the variable 'Toolbar' (line 1035)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 0), 'Toolbar', ToolbarTk_260554)
# Declaration of the '_BackendTkAgg' class
# Getting the type of '_Backend' (line 1039)
_Backend_260555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 20), '_Backend')

class _BackendTkAgg(_Backend_260555, ):
    
    # Assigning a Name to a Name (line 1040):
    
    # Assigning a Name to a Name (line 1041):

    @staticmethod
    @norecursion
    def new_figure_manager_given_figure(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_figure_manager_given_figure'
        module_type_store = module_type_store.open_function_context('new_figure_manager_given_figure', 1043, 4, False)
        
        # Passed parameters checking function
        _BackendTkAgg.new_figure_manager_given_figure.__dict__.__setitem__('stypy_localization', localization)
        _BackendTkAgg.new_figure_manager_given_figure.__dict__.__setitem__('stypy_type_of_self', None)
        _BackendTkAgg.new_figure_manager_given_figure.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BackendTkAgg.new_figure_manager_given_figure.__dict__.__setitem__('stypy_function_name', 'new_figure_manager_given_figure')
        _BackendTkAgg.new_figure_manager_given_figure.__dict__.__setitem__('stypy_param_names_list', ['num', 'figure'])
        _BackendTkAgg.new_figure_manager_given_figure.__dict__.__setitem__('stypy_varargs_param_name', None)
        _BackendTkAgg.new_figure_manager_given_figure.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _BackendTkAgg.new_figure_manager_given_figure.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BackendTkAgg.new_figure_manager_given_figure.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BackendTkAgg.new_figure_manager_given_figure.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BackendTkAgg.new_figure_manager_given_figure.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, 'new_figure_manager_given_figure', ['num', 'figure'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_figure_manager_given_figure', localization, ['figure'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_figure_manager_given_figure(...)' code ##################

        unicode_260556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, (-1)), 'unicode', u'\n        Create a new figure manager instance for the given figure.\n        ')
        
        # Assigning a Call to a Name (line 1048):
        
        # Assigning a Call to a Name (line 1048):
        
        # Call to FocusManager(...): (line 1048)
        # Processing the call keyword arguments (line 1048)
        kwargs_260559 = {}
        # Getting the type of 'windowing' (line 1048)
        windowing_260557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 17), 'windowing', False)
        # Obtaining the member 'FocusManager' of a type (line 1048)
        FocusManager_260558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 17), windowing_260557, 'FocusManager')
        # Calling FocusManager(args, kwargs) (line 1048)
        FocusManager_call_result_260560 = invoke(stypy.reporting.localization.Localization(__file__, 1048, 17), FocusManager_260558, *[], **kwargs_260559)
        
        # Assigning a type to the variable '_focus' (line 1048)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 8), '_focus', FocusManager_call_result_260560)
        
        # Assigning a Call to a Name (line 1049):
        
        # Assigning a Call to a Name (line 1049):
        
        # Call to Tk(...): (line 1049)
        # Processing the call keyword arguments (line 1049)
        unicode_260563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 33), 'unicode', u'matplotlib')
        keyword_260564 = unicode_260563
        kwargs_260565 = {'className': keyword_260564}
        # Getting the type of 'Tk' (line 1049)
        Tk_260561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 17), 'Tk', False)
        # Obtaining the member 'Tk' of a type (line 1049)
        Tk_260562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 17), Tk_260561, 'Tk')
        # Calling Tk(args, kwargs) (line 1049)
        Tk_call_result_260566 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 17), Tk_260562, *[], **kwargs_260565)
        
        # Assigning a type to the variable 'window' (line 1049)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1049, 8), 'window', Tk_call_result_260566)
        
        # Call to withdraw(...): (line 1050)
        # Processing the call keyword arguments (line 1050)
        kwargs_260569 = {}
        # Getting the type of 'window' (line 1050)
        window_260567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 8), 'window', False)
        # Obtaining the member 'withdraw' of a type (line 1050)
        withdraw_260568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 8), window_260567, 'withdraw')
        # Calling withdraw(args, kwargs) (line 1050)
        withdraw_call_result_260570 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 8), withdraw_260568, *[], **kwargs_260569)
        
        
        # Assigning a Call to a Name (line 1056):
        
        # Assigning a Call to a Name (line 1056):
        
        # Call to join(...): (line 1056)
        # Processing the call arguments (line 1056)
        
        # Obtaining the type of the subscript
        unicode_260574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1057, 21), 'unicode', u'datapath')
        # Getting the type of 'rcParams' (line 1057)
        rcParams_260575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 12), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1057)
        getitem___260576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 12), rcParams_260575, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1057)
        subscript_call_result_260577 = invoke(stypy.reporting.localization.Localization(__file__, 1057, 12), getitem___260576, unicode_260574)
        
        unicode_260578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1057, 34), 'unicode', u'images')
        unicode_260579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1057, 44), 'unicode', u'matplotlib.ppm')
        # Processing the call keyword arguments (line 1056)
        kwargs_260580 = {}
        # Getting the type of 'os' (line 1056)
        os_260571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 21), 'os', False)
        # Obtaining the member 'path' of a type (line 1056)
        path_260572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 21), os_260571, 'path')
        # Obtaining the member 'join' of a type (line 1056)
        join_260573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 21), path_260572, 'join')
        # Calling join(args, kwargs) (line 1056)
        join_call_result_260581 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 21), join_260573, *[subscript_call_result_260577, unicode_260578, unicode_260579], **kwargs_260580)
        
        # Assigning a type to the variable 'icon_fname' (line 1056)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 8), 'icon_fname', join_call_result_260581)
        
        # Assigning a Call to a Name (line 1058):
        
        # Assigning a Call to a Name (line 1058):
        
        # Call to PhotoImage(...): (line 1058)
        # Processing the call keyword arguments (line 1058)
        # Getting the type of 'icon_fname' (line 1058)
        icon_fname_260584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 38), 'icon_fname', False)
        keyword_260585 = icon_fname_260584
        kwargs_260586 = {'file': keyword_260585}
        # Getting the type of 'Tk' (line 1058)
        Tk_260582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 19), 'Tk', False)
        # Obtaining the member 'PhotoImage' of a type (line 1058)
        PhotoImage_260583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1058, 19), Tk_260582, 'PhotoImage')
        # Calling PhotoImage(args, kwargs) (line 1058)
        PhotoImage_call_result_260587 = invoke(stypy.reporting.localization.Localization(__file__, 1058, 19), PhotoImage_260583, *[], **kwargs_260586)
        
        # Assigning a type to the variable 'icon_img' (line 1058)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1058, 8), 'icon_img', PhotoImage_call_result_260587)
        
        
        # SSA begins for try-except statement (line 1059)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to call(...): (line 1060)
        # Processing the call arguments (line 1060)
        unicode_260591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1060, 27), 'unicode', u'wm')
        unicode_260592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1060, 33), 'unicode', u'foobar')
        # Getting the type of 'window' (line 1060)
        window_260593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 43), 'window', False)
        # Obtaining the member '_w' of a type (line 1060)
        _w_260594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 43), window_260593, '_w')
        # Getting the type of 'icon_img' (line 1060)
        icon_img_260595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 54), 'icon_img', False)
        # Processing the call keyword arguments (line 1060)
        kwargs_260596 = {}
        # Getting the type of 'window' (line 1060)
        window_260588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 12), 'window', False)
        # Obtaining the member 'tk' of a type (line 1060)
        tk_260589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 12), window_260588, 'tk')
        # Obtaining the member 'call' of a type (line 1060)
        call_260590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 12), tk_260589, 'call')
        # Calling call(args, kwargs) (line 1060)
        call_call_result_260597 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 12), call_260590, *[unicode_260591, unicode_260592, _w_260594, icon_img_260595], **kwargs_260596)
        
        # SSA branch for the except part of a try statement (line 1059)
        # SSA branch for the except 'Exception' branch of a try statement (line 1059)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'Exception' (line 1061)
        Exception_260598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 15), 'Exception')
        # Assigning a type to the variable 'exc' (line 1061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1061, 8), 'exc', Exception_260598)
        
        # Call to report(...): (line 1063)
        # Processing the call arguments (line 1063)
        unicode_260601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1063, 27), 'unicode', u'Could not load matplotlib icon: %s')
        # Getting the type of 'exc' (line 1063)
        exc_260602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 66), 'exc', False)
        # Applying the binary operator '%' (line 1063)
        result_mod_260603 = python_operator(stypy.reporting.localization.Localization(__file__, 1063, 27), '%', unicode_260601, exc_260602)
        
        # Processing the call keyword arguments (line 1063)
        kwargs_260604 = {}
        # Getting the type of 'verbose' (line 1063)
        verbose_260599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 12), 'verbose', False)
        # Obtaining the member 'report' of a type (line 1063)
        report_260600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1063, 12), verbose_260599, 'report')
        # Calling report(args, kwargs) (line 1063)
        report_call_result_260605 = invoke(stypy.reporting.localization.Localization(__file__, 1063, 12), report_260600, *[result_mod_260603], **kwargs_260604)
        
        # SSA join for try-except statement (line 1059)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1065):
        
        # Assigning a Call to a Name (line 1065):
        
        # Call to FigureCanvasTkAgg(...): (line 1065)
        # Processing the call arguments (line 1065)
        # Getting the type of 'figure' (line 1065)
        figure_260607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 35), 'figure', False)
        # Processing the call keyword arguments (line 1065)
        # Getting the type of 'window' (line 1065)
        window_260608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 50), 'window', False)
        keyword_260609 = window_260608
        kwargs_260610 = {'master': keyword_260609}
        # Getting the type of 'FigureCanvasTkAgg' (line 1065)
        FigureCanvasTkAgg_260606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 17), 'FigureCanvasTkAgg', False)
        # Calling FigureCanvasTkAgg(args, kwargs) (line 1065)
        FigureCanvasTkAgg_call_result_260611 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 17), FigureCanvasTkAgg_260606, *[figure_260607], **kwargs_260610)
        
        # Assigning a type to the variable 'canvas' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 8), 'canvas', FigureCanvasTkAgg_call_result_260611)
        
        # Assigning a Call to a Name (line 1066):
        
        # Assigning a Call to a Name (line 1066):
        
        # Call to FigureManagerTkAgg(...): (line 1066)
        # Processing the call arguments (line 1066)
        # Getting the type of 'canvas' (line 1066)
        canvas_260613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 37), 'canvas', False)
        # Getting the type of 'num' (line 1066)
        num_260614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 45), 'num', False)
        # Getting the type of 'window' (line 1066)
        window_260615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 50), 'window', False)
        # Processing the call keyword arguments (line 1066)
        kwargs_260616 = {}
        # Getting the type of 'FigureManagerTkAgg' (line 1066)
        FigureManagerTkAgg_260612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 18), 'FigureManagerTkAgg', False)
        # Calling FigureManagerTkAgg(args, kwargs) (line 1066)
        FigureManagerTkAgg_call_result_260617 = invoke(stypy.reporting.localization.Localization(__file__, 1066, 18), FigureManagerTkAgg_260612, *[canvas_260613, num_260614, window_260615], **kwargs_260616)
        
        # Assigning a type to the variable 'manager' (line 1066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1066, 8), 'manager', FigureManagerTkAgg_call_result_260617)
        
        
        # Call to is_interactive(...): (line 1067)
        # Processing the call keyword arguments (line 1067)
        kwargs_260620 = {}
        # Getting the type of 'matplotlib' (line 1067)
        matplotlib_260618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 11), 'matplotlib', False)
        # Obtaining the member 'is_interactive' of a type (line 1067)
        is_interactive_260619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 11), matplotlib_260618, 'is_interactive')
        # Calling is_interactive(args, kwargs) (line 1067)
        is_interactive_call_result_260621 = invoke(stypy.reporting.localization.Localization(__file__, 1067, 11), is_interactive_260619, *[], **kwargs_260620)
        
        # Testing the type of an if condition (line 1067)
        if_condition_260622 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1067, 8), is_interactive_call_result_260621)
        # Assigning a type to the variable 'if_condition_260622' (line 1067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 8), 'if_condition_260622', if_condition_260622)
        # SSA begins for if statement (line 1067)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to show(...): (line 1068)
        # Processing the call keyword arguments (line 1068)
        kwargs_260625 = {}
        # Getting the type of 'manager' (line 1068)
        manager_260623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 12), 'manager', False)
        # Obtaining the member 'show' of a type (line 1068)
        show_260624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 12), manager_260623, 'show')
        # Calling show(args, kwargs) (line 1068)
        show_call_result_260626 = invoke(stypy.reporting.localization.Localization(__file__, 1068, 12), show_260624, *[], **kwargs_260625)
        
        
        # Call to draw_idle(...): (line 1069)
        # Processing the call keyword arguments (line 1069)
        kwargs_260629 = {}
        # Getting the type of 'canvas' (line 1069)
        canvas_260627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 12), 'canvas', False)
        # Obtaining the member 'draw_idle' of a type (line 1069)
        draw_idle_260628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1069, 12), canvas_260627, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 1069)
        draw_idle_call_result_260630 = invoke(stypy.reporting.localization.Localization(__file__, 1069, 12), draw_idle_260628, *[], **kwargs_260629)
        
        # SSA join for if statement (line 1067)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'manager' (line 1070)
        manager_260631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 15), 'manager')
        # Assigning a type to the variable 'stypy_return_type' (line 1070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 8), 'stypy_return_type', manager_260631)
        
        # ################# End of 'new_figure_manager_given_figure(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_figure_manager_given_figure' in the type store
        # Getting the type of 'stypy_return_type' (line 1043)
        stypy_return_type_260632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260632)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_figure_manager_given_figure'
        return stypy_return_type_260632


    @staticmethod
    @norecursion
    def trigger_manager_draw(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'trigger_manager_draw'
        module_type_store = module_type_store.open_function_context('trigger_manager_draw', 1072, 4, False)
        
        # Passed parameters checking function
        _BackendTkAgg.trigger_manager_draw.__dict__.__setitem__('stypy_localization', localization)
        _BackendTkAgg.trigger_manager_draw.__dict__.__setitem__('stypy_type_of_self', None)
        _BackendTkAgg.trigger_manager_draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BackendTkAgg.trigger_manager_draw.__dict__.__setitem__('stypy_function_name', 'trigger_manager_draw')
        _BackendTkAgg.trigger_manager_draw.__dict__.__setitem__('stypy_param_names_list', ['manager'])
        _BackendTkAgg.trigger_manager_draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        _BackendTkAgg.trigger_manager_draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _BackendTkAgg.trigger_manager_draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BackendTkAgg.trigger_manager_draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BackendTkAgg.trigger_manager_draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BackendTkAgg.trigger_manager_draw.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, 'trigger_manager_draw', ['manager'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'trigger_manager_draw', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'trigger_manager_draw(...)' code ##################

        
        # Call to show(...): (line 1074)
        # Processing the call keyword arguments (line 1074)
        kwargs_260635 = {}
        # Getting the type of 'manager' (line 1074)
        manager_260633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'manager', False)
        # Obtaining the member 'show' of a type (line 1074)
        show_260634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 8), manager_260633, 'show')
        # Calling show(args, kwargs) (line 1074)
        show_call_result_260636 = invoke(stypy.reporting.localization.Localization(__file__, 1074, 8), show_260634, *[], **kwargs_260635)
        
        
        # ################# End of 'trigger_manager_draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'trigger_manager_draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1072)
        stypy_return_type_260637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260637)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'trigger_manager_draw'
        return stypy_return_type_260637


    @staticmethod
    @norecursion
    def mainloop(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mainloop'
        module_type_store = module_type_store.open_function_context('mainloop', 1076, 4, False)
        
        # Passed parameters checking function
        _BackendTkAgg.mainloop.__dict__.__setitem__('stypy_localization', localization)
        _BackendTkAgg.mainloop.__dict__.__setitem__('stypy_type_of_self', None)
        _BackendTkAgg.mainloop.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BackendTkAgg.mainloop.__dict__.__setitem__('stypy_function_name', 'mainloop')
        _BackendTkAgg.mainloop.__dict__.__setitem__('stypy_param_names_list', [])
        _BackendTkAgg.mainloop.__dict__.__setitem__('stypy_varargs_param_name', None)
        _BackendTkAgg.mainloop.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _BackendTkAgg.mainloop.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BackendTkAgg.mainloop.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BackendTkAgg.mainloop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BackendTkAgg.mainloop.__dict__.__setitem__('stypy_declared_arg_number', 0)
        arguments = process_argument_values(localization, None, module_type_store, 'mainloop', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mainloop', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mainloop(...)' code ##################

        
        # Call to mainloop(...): (line 1078)
        # Processing the call keyword arguments (line 1078)
        kwargs_260640 = {}
        # Getting the type of 'Tk' (line 1078)
        Tk_260638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 8), 'Tk', False)
        # Obtaining the member 'mainloop' of a type (line 1078)
        mainloop_260639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 8), Tk_260638, 'mainloop')
        # Calling mainloop(args, kwargs) (line 1078)
        mainloop_call_result_260641 = invoke(stypy.reporting.localization.Localization(__file__, 1078, 8), mainloop_260639, *[], **kwargs_260640)
        
        
        # ################# End of 'mainloop(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mainloop' in the type store
        # Getting the type of 'stypy_return_type' (line 1076)
        stypy_return_type_260642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_260642)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mainloop'
        return stypy_return_type_260642


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1038, 0, False)
        # Assigning a type to the variable 'self' (line 1039)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1039, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_BackendTkAgg.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_BackendTkAgg' (line 1038)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1038, 0), '_BackendTkAgg', _BackendTkAgg)

# Assigning a Name to a Name (line 1040):
# Getting the type of 'FigureCanvasTkAgg' (line 1040)
FigureCanvasTkAgg_260643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 19), 'FigureCanvasTkAgg')
# Getting the type of '_BackendTkAgg'
_BackendTkAgg_260644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_BackendTkAgg')
# Setting the type of the member 'FigureCanvas' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _BackendTkAgg_260644, 'FigureCanvas', FigureCanvasTkAgg_260643)

# Assigning a Name to a Name (line 1041):
# Getting the type of 'FigureManagerTkAgg' (line 1041)
FigureManagerTkAgg_260645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 20), 'FigureManagerTkAgg')
# Getting the type of '_BackendTkAgg'
_BackendTkAgg_260646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_BackendTkAgg')
# Setting the type of the member 'FigureManager' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _BackendTkAgg_260646, 'FigureManager', FigureManagerTkAgg_260645)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
