
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2:  A wxPython backend for matplotlib, based (very heavily) on
3:  backend_template.py and backend_gtk.py
4: 
5:  Author: Jeremy O'Donoghue (jeremy@o-donoghue.com)
6: 
7:  Derived from original copyright work by John Hunter
8:  (jdhunter@ace.bsd.uchicago.edu)
9: 
10:  Copyright (C) Jeremy O'Donoghue & John Hunter, 2003-4
11: 
12:  License: This work is licensed under a PSF compatible license. A copy
13:  should be included with this source code.
14: 
15: '''
16: from __future__ import (absolute_import, division, print_function,
17:                         unicode_literals)
18: 
19: from six.moves import xrange
20: 
21: import sys
22: import os
23: import os.path
24: import math
25: import weakref
26: import warnings
27: 
28: import numpy as np
29: 
30: import matplotlib
31: from matplotlib.backend_bases import (
32:     _Backend, FigureCanvasBase, FigureManagerBase, GraphicsContextBase,
33:     NavigationToolbar2, RendererBase, TimerBase, cursors)
34: from matplotlib.backend_bases import _has_pil
35: 
36: from matplotlib._pylab_helpers import Gcf
37: from matplotlib.cbook import is_writable_file_like, warn_deprecated
38: from matplotlib.figure import Figure
39: from matplotlib.path import Path
40: from matplotlib.transforms import Affine2D
41: from matplotlib.widgets import SubplotTool
42: from matplotlib import cbook, rcParams
43: 
44: from . import wx_compat as wxc
45: import wx
46: 
47: # Debugging settings here...
48: # Debug level set here. If the debug level is less than 5, information
49: # messages (progressively more info for lower value) are printed. In addition,
50: # traceback is performed, and pdb activated, for all uncaught exceptions in
51: # this case
52: _DEBUG = 5
53: if _DEBUG < 5:
54:     import traceback
55:     import pdb
56: _DEBUG_lvls = {1: 'Low ', 2: 'Med ', 3: 'High', 4: 'Error'}
57: 
58: 
59: def DEBUG_MSG(string, lvl=3, o=None):
60:     if lvl >= _DEBUG:
61:         cls = o.__class__
62:         # Jeremy, often times the commented line won't print but the
63:         # one below does.  I think WX is redefining stderr, damned
64:         # beast
65:         #print >>sys.stderr, "%s- %s in %s" % (_DEBUG_lvls[lvl], string, cls)
66:         print("%s- %s in %s" % (_DEBUG_lvls[lvl], string, cls))
67: 
68: 
69: def debug_on_error(type, value, tb):
70:     '''Code due to Thomas Heller - published in Python Cookbook (O'Reilley)'''
71:     traceback.print_exception(type, value, tb)
72:     print()
73:     pdb.pm()  # jdh uncomment
74: 
75: 
76: class fake_stderr(object):
77:     '''
78:     Wx does strange things with stderr, as it makes the assumption that
79:     there is probably no console. This redirects stderr to the console, since
80:     we know that there is one!
81:     '''
82: 
83:     def write(self, msg):
84:         print("Stderr: %s\n\r" % msg)
85: 
86: #if _DEBUG < 5:
87:     #sys.excepthook = debug_on_error
88:     #WxLogger =wx.LogStderr()
89:     #sys.stderr = fake_stderr
90: 
91: # the True dots per inch on the screen; should be display dependent
92: # see
93: # http://groups.google.com/groups?q=screen+dpi+x11&hl=en&lr=&ie=UTF-8&oe=UTF-8&safe=off&selm=7077.26e81ad5%40swift.cs.tcd.ie&rnum=5
94: # for some info about screen dpi
95: PIXELS_PER_INCH = 75
96: 
97: # Delay time for idle checks
98: IDLE_DELAY = 5
99: 
100: 
101: def error_msg_wx(msg, parent=None):
102:     '''
103:     Signal an error condition -- in a GUI, popup a error dialog
104:     '''
105:     dialog = wx.MessageDialog(parent=parent,
106:                               message=msg,
107:                               caption='Matplotlib backend_wx error',
108:                               style=wx.OK | wx.CENTRE)
109:     dialog.ShowModal()
110:     dialog.Destroy()
111:     return None
112: 
113: 
114: def raise_msg_to_str(msg):
115:     '''msg is a return arg from a raise.  Join with new lines'''
116:     if not isinstance(msg, six.string_types):
117:         msg = '\n'.join(map(str, msg))
118:     return msg
119: 
120: 
121: class TimerWx(TimerBase):
122:     '''
123:     Subclass of :class:`backend_bases.TimerBase` that uses WxTimer events.
124: 
125:     Attributes
126:     ----------
127:     interval : int
128:         The time between timer events in milliseconds. Default is 1000 ms.
129:     single_shot : bool
130:         Boolean flag indicating whether this timer should operate as single
131:         shot (run once and then stop). Defaults to False.
132:     callbacks : list
133:         Stores list of (func, args) tuples that will be called upon timer
134:         events. This list can be manipulated directly, or the functions
135:         `add_callback` and `remove_callback` can be used.
136: 
137:     '''
138: 
139:     def __init__(self, parent, *args, **kwargs):
140:         TimerBase.__init__(self, *args, **kwargs)
141: 
142:         # Create a new timer and connect the timer event to our handler.
143:         # For WX, the events have to use a widget for binding.
144:         self.parent = parent
145:         self._timer = wx.Timer(self.parent, wx.NewId())
146:         self.parent.Bind(wx.EVT_TIMER, self._on_timer, self._timer)
147: 
148:      # Unbinding causes Wx to stop for some reason. Disabling for now.
149: #    def __del__(self):
150: #        TimerBase.__del__(self)
151: #        self.parent.Bind(wx.EVT_TIMER, None, self._timer)
152: 
153:     def _timer_start(self):
154:         self._timer.Start(self._interval, self._single)
155: 
156:     def _timer_stop(self):
157:         self._timer.Stop()
158: 
159:     def _timer_set_interval(self):
160:         self._timer_start()
161: 
162:     def _timer_set_single_shot(self):
163:         self._timer.Start()
164: 
165:     def _on_timer(self, *args):
166:         TimerBase._on_timer(self)
167: 
168: 
169: class RendererWx(RendererBase):
170:     '''
171:     The renderer handles all the drawing primitives using a graphics
172:     context instance that controls the colors/styles. It acts as the
173:     'renderer' instance used by many classes in the hierarchy.
174:     '''
175:     # In wxPython, drawing is performed on a wxDC instance, which will
176:     # generally be mapped to the client aread of the window displaying
177:     # the plot. Under wxPython, the wxDC instance has a wx.Pen which
178:     # describes the colour and weight of any lines drawn, and a wxBrush
179:     # which describes the fill colour of any closed polygon.
180: 
181:     fontweights = wxc.fontweights
182:     fontangles = wxc.fontangles
183: 
184:     # wxPython allows for portable font styles, choosing them appropriately
185:     # for the target platform. Map some standard font names to the portable
186:     # styles
187:     # QUESTION: Is it be wise to agree standard fontnames across all backends?
188:     fontnames = wxc.fontnames
189: 
190:     def __init__(self, bitmap, dpi):
191:         '''
192:         Initialise a wxWindows renderer instance.
193:         '''
194:         warn_deprecated('2.0', message="The WX backend is "
195:                         "deprecated. It's untested "
196:                         "and will be removed in Matplotlib 2.2. "
197:                         "Use the WXAgg backend instead. "
198:                         "See Matplotlib usage FAQ for more info on backends.",
199:                         alternative='WXAgg')
200:         RendererBase.__init__(self)
201:         DEBUG_MSG("__init__()", 1, self)
202:         self.width = bitmap.GetWidth()
203:         self.height = bitmap.GetHeight()
204:         self.bitmap = bitmap
205:         self.fontd = {}
206:         self.dpi = dpi
207:         self.gc = None
208: 
209:     def flipy(self):
210:         return True
211: 
212:     def offset_text_height(self):
213:         return True
214: 
215:     def get_text_width_height_descent(self, s, prop, ismath):
216:         '''
217:         get the width and height in display coords of the string s
218:         with FontPropertry prop
219:         '''
220:         # return 1, 1
221:         if ismath:
222:             s = self.strip_math(s)
223: 
224:         if self.gc is None:
225:             gc = self.new_gc()
226:         else:
227:             gc = self.gc
228:         gfx_ctx = gc.gfx_ctx
229:         font = self.get_wx_font(s, prop)
230:         gfx_ctx.SetFont(font, wx.BLACK)
231:         w, h, descent, leading = gfx_ctx.GetFullTextExtent(s)
232: 
233:         return w, h, descent
234: 
235:     def get_canvas_width_height(self):
236:         'return the canvas width and height in display coords'
237:         return self.width, self.height
238: 
239:     def handle_clip_rectangle(self, gc):
240:         new_bounds = gc.get_clip_rectangle()
241:         if new_bounds is not None:
242:             new_bounds = new_bounds.bounds
243:         gfx_ctx = gc.gfx_ctx
244:         if gfx_ctx._lastcliprect != new_bounds:
245:             gfx_ctx._lastcliprect = new_bounds
246:             if new_bounds is None:
247:                 gfx_ctx.ResetClip()
248:             else:
249:                 gfx_ctx.Clip(new_bounds[0],
250:                              self.height - new_bounds[1] - new_bounds[3],
251:                              new_bounds[2], new_bounds[3])
252: 
253:     @staticmethod
254:     def convert_path(gfx_ctx, path, transform):
255:         wxpath = gfx_ctx.CreatePath()
256:         for points, code in path.iter_segments(transform):
257:             if code == Path.MOVETO:
258:                 wxpath.MoveToPoint(*points)
259:             elif code == Path.LINETO:
260:                 wxpath.AddLineToPoint(*points)
261:             elif code == Path.CURVE3:
262:                 wxpath.AddQuadCurveToPoint(*points)
263:             elif code == Path.CURVE4:
264:                 wxpath.AddCurveToPoint(*points)
265:             elif code == Path.CLOSEPOLY:
266:                 wxpath.CloseSubpath()
267:         return wxpath
268: 
269:     def draw_path(self, gc, path, transform, rgbFace=None):
270:         gc.select()
271:         self.handle_clip_rectangle(gc)
272:         gfx_ctx = gc.gfx_ctx
273:         transform = transform + \
274:             Affine2D().scale(1.0, -1.0).translate(0.0, self.height)
275:         wxpath = self.convert_path(gfx_ctx, path, transform)
276:         if rgbFace is not None:
277:             gfx_ctx.SetBrush(wx.Brush(gc.get_wxcolour(rgbFace)))
278:             gfx_ctx.DrawPath(wxpath)
279:         else:
280:             gfx_ctx.StrokePath(wxpath)
281:         gc.unselect()
282: 
283:     def draw_image(self, gc, x, y, im):
284:         bbox = gc.get_clip_rectangle()
285:         if bbox is not None:
286:             l, b, w, h = bbox.bounds
287:         else:
288:             l = 0
289:             b = 0
290:             w = self.width
291:             h = self.height
292:         rows, cols = im.shape[:2]
293:         bitmap = wxc.BitmapFromBuffer(cols, rows, im.tostring())
294:         gc = self.get_gc()
295:         gc.select()
296:         gc.gfx_ctx.DrawBitmap(bitmap, int(l), int(self.height - b),
297:                               int(w), int(-h))
298:         gc.unselect()
299: 
300:     def draw_text(self, gc, x, y, s, prop, angle, ismath=False, mtext=None):
301:         if ismath:
302:             s = self.strip_math(s)
303:         DEBUG_MSG("draw_text()", 1, self)
304:         gc.select()
305:         self.handle_clip_rectangle(gc)
306:         gfx_ctx = gc.gfx_ctx
307: 
308:         font = self.get_wx_font(s, prop)
309:         color = gc.get_wxcolour(gc.get_rgb())
310:         gfx_ctx.SetFont(font, color)
311: 
312:         w, h, d = self.get_text_width_height_descent(s, prop, ismath)
313:         x = int(x)
314:         y = int(y - h)
315: 
316:         if angle == 0.0:
317:             gfx_ctx.DrawText(s, x, y)
318:         else:
319:             rads = math.radians(angle)
320:             xo = h * math.sin(rads)
321:             yo = h * math.cos(rads)
322:             gfx_ctx.DrawRotatedText(s, x - xo, y - yo, rads)
323: 
324:         gc.unselect()
325: 
326:     def new_gc(self):
327:         '''
328:         Return an instance of a GraphicsContextWx, and sets the current gc copy
329:         '''
330:         DEBUG_MSG('new_gc()', 2, self)
331:         self.gc = GraphicsContextWx(self.bitmap, self)
332:         self.gc.select()
333:         self.gc.unselect()
334:         return self.gc
335: 
336:     def get_gc(self):
337:         '''
338:         Fetch the locally cached gc.
339:         '''
340:         # This is a dirty hack to allow anything with access to a renderer to
341:         # access the current graphics context
342:         assert self.gc is not None, "gc must be defined"
343:         return self.gc
344: 
345:     def get_wx_font(self, s, prop):
346:         '''
347:         Return a wx font.  Cache instances in a font dictionary for
348:         efficiency
349:         '''
350:         DEBUG_MSG("get_wx_font()", 1, self)
351: 
352:         key = hash(prop)
353:         fontprop = prop
354:         fontname = fontprop.get_name()
355: 
356:         font = self.fontd.get(key)
357:         if font is not None:
358:             return font
359: 
360:         # Allow use of platform independent and dependent font names
361:         wxFontname = self.fontnames.get(fontname, wx.ROMAN)
362:         wxFacename = ''  # Empty => wxPython chooses based on wx_fontname
363: 
364:         # Font colour is determined by the active wx.Pen
365:         # TODO: It may be wise to cache font information
366:         size = self.points_to_pixels(fontprop.get_size_in_points())
367: 
368:         font = wx.Font(int(size + 0.5),             # Size
369:                        wxFontname,                # 'Generic' name
370:                        self.fontangles[fontprop.get_style()],   # Angle
371:                        self.fontweights[fontprop.get_weight()],  # Weight
372:                        False,                     # Underline
373:                        wxFacename)                # Platform font name
374: 
375:         # cache the font and gc and return it
376:         self.fontd[key] = font
377: 
378:         return font
379: 
380:     def points_to_pixels(self, points):
381:         '''
382:         convert point measures to pixes using dpi and the pixels per
383:         inch of the display
384:         '''
385:         return points * (PIXELS_PER_INCH / 72.0 * self.dpi / 72.0)
386: 
387: 
388: class GraphicsContextWx(GraphicsContextBase):
389:     '''
390:     The graphics context provides the color, line styles, etc...
391: 
392:     This class stores a reference to a wxMemoryDC, and a
393:     wxGraphicsContext that draws to it.  Creating a wxGraphicsContext
394:     seems to be fairly heavy, so these objects are cached based on the
395:     bitmap object that is passed in.
396: 
397:     The base GraphicsContext stores colors as a RGB tuple on the unit
398:     interval, e.g., (0.5, 0.0, 1.0).  wxPython uses an int interval, but
399:     since wxPython colour management is rather simple, I have not chosen
400:     to implement a separate colour manager class.
401:     '''
402:     _capd = {'butt': wx.CAP_BUTT,
403:              'projecting': wx.CAP_PROJECTING,
404:              'round': wx.CAP_ROUND}
405: 
406:     _joind = {'bevel': wx.JOIN_BEVEL,
407:               'miter': wx.JOIN_MITER,
408:               'round': wx.JOIN_ROUND}
409: 
410:     _cache = weakref.WeakKeyDictionary()
411: 
412:     def __init__(self, bitmap, renderer):
413:         GraphicsContextBase.__init__(self)
414:         #assert self.Ok(), "wxMemoryDC not OK to use"
415:         DEBUG_MSG("__init__()", 1, self)
416:         DEBUG_MSG("__init__() 2: %s" % bitmap, 1, self)
417: 
418:         dc, gfx_ctx = self._cache.get(bitmap, (None, None))
419:         if dc is None:
420:             dc = wx.MemoryDC()
421:             dc.SelectObject(bitmap)
422:             gfx_ctx = wx.GraphicsContext.Create(dc)
423:             gfx_ctx._lastcliprect = None
424:             self._cache[bitmap] = dc, gfx_ctx
425: 
426:         self.bitmap = bitmap
427:         self.dc = dc
428:         self.gfx_ctx = gfx_ctx
429:         self._pen = wx.Pen('BLACK', 1, wx.SOLID)
430:         gfx_ctx.SetPen(self._pen)
431:         self._style = wx.SOLID
432:         self.renderer = renderer
433: 
434:     def select(self):
435:         '''
436:         Select the current bitmap into this wxDC instance
437:         '''
438: 
439:         if sys.platform == 'win32':
440:             self.dc.SelectObject(self.bitmap)
441:             self.IsSelected = True
442: 
443:     def unselect(self):
444:         '''
445:         Select a Null bitmasp into this wxDC instance
446:         '''
447:         if sys.platform == 'win32':
448:             self.dc.SelectObject(wx.NullBitmap)
449:             self.IsSelected = False
450: 
451:     def set_foreground(self, fg, isRGBA=None):
452:         '''
453:         Set the foreground color.  fg can be a matlab format string, a
454:         html hex color string, an rgb unit tuple, or a float between 0
455:         and 1.  In the latter case, grayscale is used.
456:         '''
457:         # Implementation note: wxPython has a separate concept of pen and
458:         # brush - the brush fills any outline trace left by the pen.
459:         # Here we set both to the same colour - if a figure is not to be
460:         # filled, the renderer will set the brush to be transparent
461:         # Same goes for text foreground...
462:         DEBUG_MSG("set_foreground()", 1, self)
463:         self.select()
464:         GraphicsContextBase.set_foreground(self, fg, isRGBA)
465: 
466:         self._pen.SetColour(self.get_wxcolour(self.get_rgb()))
467:         self.gfx_ctx.SetPen(self._pen)
468:         self.unselect()
469: 
470:     def set_linewidth(self, w):
471:         '''
472:         Set the line width.
473:         '''
474:         w = float(w)
475:         DEBUG_MSG("set_linewidth()", 1, self)
476:         self.select()
477:         if w > 0 and w < 1:
478:             w = 1
479:         GraphicsContextBase.set_linewidth(self, w)
480:         lw = int(self.renderer.points_to_pixels(self._linewidth))
481:         if lw == 0:
482:             lw = 1
483:         self._pen.SetWidth(lw)
484:         self.gfx_ctx.SetPen(self._pen)
485:         self.unselect()
486: 
487:     def set_capstyle(self, cs):
488:         '''
489:         Set the capstyle as a string in ('butt', 'round', 'projecting')
490:         '''
491:         DEBUG_MSG("set_capstyle()", 1, self)
492:         self.select()
493:         GraphicsContextBase.set_capstyle(self, cs)
494:         self._pen.SetCap(GraphicsContextWx._capd[self._capstyle])
495:         self.gfx_ctx.SetPen(self._pen)
496:         self.unselect()
497: 
498:     def set_joinstyle(self, js):
499:         '''
500:         Set the join style to be one of ('miter', 'round', 'bevel')
501:         '''
502:         DEBUG_MSG("set_joinstyle()", 1, self)
503:         self.select()
504:         GraphicsContextBase.set_joinstyle(self, js)
505:         self._pen.SetJoin(GraphicsContextWx._joind[self._joinstyle])
506:         self.gfx_ctx.SetPen(self._pen)
507:         self.unselect()
508: 
509:     @cbook.deprecated("2.1")
510:     def set_linestyle(self, ls):
511:         '''
512:         Set the line style to be one of
513:         '''
514:         DEBUG_MSG("set_linestyle()", 1, self)
515:         self.select()
516:         GraphicsContextBase.set_linestyle(self, ls)
517:         try:
518:             self._style = wxc.dashd_wx[ls]
519:         except KeyError:
520:             self._style = wx.LONG_DASH  # Style not used elsewhere...
521: 
522:         # On MS Windows platform, only line width of 1 allowed for dash lines
523:         if wx.Platform == '__WXMSW__':
524:             self.set_linewidth(1)
525: 
526:         self._pen.SetStyle(self._style)
527:         self.gfx_ctx.SetPen(self._pen)
528:         self.unselect()
529: 
530:     def get_wxcolour(self, color):
531:         '''return a wx.Colour from RGB format'''
532:         DEBUG_MSG("get_wx_color()", 1, self)
533:         if len(color) == 3:
534:             r, g, b = color
535:             r *= 255
536:             g *= 255
537:             b *= 255
538:             return wx.Colour(red=int(r), green=int(g), blue=int(b))
539:         else:
540:             r, g, b, a = color
541:             r *= 255
542:             g *= 255
543:             b *= 255
544:             a *= 255
545:             return wx.Colour(
546:                 red=int(r),
547:                 green=int(g),
548:                 blue=int(b),
549:                 alpha=int(a))
550: 
551: 
552: class FigureCanvasWx(FigureCanvasBase, wx.Panel):
553:     '''
554:     The FigureCanvas contains the figure and does event handling.
555: 
556:     In the wxPython backend, it is derived from wxPanel, and (usually) lives
557:     inside a frame instantiated by a FigureManagerWx. The parent window
558:     probably implements a wx.Sizer to control the displayed control size - but
559:     we give a hint as to our preferred minimum size.
560:     '''
561: 
562:     keyvald = {
563:         wx.WXK_CONTROL: 'control',
564:         wx.WXK_SHIFT: 'shift',
565:         wx.WXK_ALT: 'alt',
566:         wx.WXK_LEFT: 'left',
567:         wx.WXK_UP: 'up',
568:         wx.WXK_RIGHT: 'right',
569:         wx.WXK_DOWN: 'down',
570:         wx.WXK_ESCAPE: 'escape',
571:         wx.WXK_F1: 'f1',
572:         wx.WXK_F2: 'f2',
573:         wx.WXK_F3: 'f3',
574:         wx.WXK_F4: 'f4',
575:         wx.WXK_F5: 'f5',
576:         wx.WXK_F6: 'f6',
577:         wx.WXK_F7: 'f7',
578:         wx.WXK_F8: 'f8',
579:         wx.WXK_F9: 'f9',
580:         wx.WXK_F10: 'f10',
581:         wx.WXK_F11: 'f11',
582:         wx.WXK_F12: 'f12',
583:         wx.WXK_SCROLL: 'scroll_lock',
584:         wx.WXK_PAUSE: 'break',
585:         wx.WXK_BACK: 'backspace',
586:         wx.WXK_RETURN: 'enter',
587:         wx.WXK_INSERT: 'insert',
588:         wx.WXK_DELETE: 'delete',
589:         wx.WXK_HOME: 'home',
590:         wx.WXK_END: 'end',
591:         wx.WXK_PAGEUP: 'pageup',
592:         wx.WXK_PAGEDOWN: 'pagedown',
593:         wx.WXK_NUMPAD0: '0',
594:         wx.WXK_NUMPAD1: '1',
595:         wx.WXK_NUMPAD2: '2',
596:         wx.WXK_NUMPAD3: '3',
597:         wx.WXK_NUMPAD4: '4',
598:         wx.WXK_NUMPAD5: '5',
599:         wx.WXK_NUMPAD6: '6',
600:         wx.WXK_NUMPAD7: '7',
601:         wx.WXK_NUMPAD8: '8',
602:         wx.WXK_NUMPAD9: '9',
603:         wx.WXK_NUMPAD_ADD: '+',
604:         wx.WXK_NUMPAD_SUBTRACT: '-',
605:         wx.WXK_NUMPAD_MULTIPLY: '*',
606:         wx.WXK_NUMPAD_DIVIDE: '/',
607:         wx.WXK_NUMPAD_DECIMAL: 'dec',
608:         wx.WXK_NUMPAD_ENTER: 'enter',
609:         wx.WXK_NUMPAD_UP: 'up',
610:         wx.WXK_NUMPAD_RIGHT: 'right',
611:         wx.WXK_NUMPAD_DOWN: 'down',
612:         wx.WXK_NUMPAD_LEFT: 'left',
613:         wx.WXK_NUMPAD_PAGEUP: 'pageup',
614:         wx.WXK_NUMPAD_PAGEDOWN: 'pagedown',
615:         wx.WXK_NUMPAD_HOME: 'home',
616:         wx.WXK_NUMPAD_END: 'end',
617:         wx.WXK_NUMPAD_INSERT: 'insert',
618:         wx.WXK_NUMPAD_DELETE: 'delete',
619:     }
620: 
621:     def __init__(self, parent, id, figure):
622:         '''
623:         Initialise a FigureWx instance.
624: 
625:         - Initialise the FigureCanvasBase and wxPanel parents.
626:         - Set event handlers for:
627:           EVT_SIZE  (Resize event)
628:           EVT_PAINT (Paint event)
629:         '''
630: 
631:         FigureCanvasBase.__init__(self, figure)
632:         # Set preferred window size hint - helps the sizer (if one is
633:         # connected)
634:         l, b, w, h = figure.bbox.bounds
635:         w = int(math.ceil(w))
636:         h = int(math.ceil(h))
637: 
638:         wx.Panel.__init__(self, parent, id, size=wx.Size(w, h))
639: 
640:         def do_nothing(*args, **kwargs):
641:             warnings.warn(
642:                 "could not find a setinitialsize function for backend_wx; "
643:                 "please report your wxpython version=%s "
644:                 "to the matplotlib developers list" %
645:                 wxc.backend_version)
646:             pass
647: 
648:         # try to find the set size func across wx versions
649:         try:
650:             getattr(self, 'SetInitialSize')
651:         except AttributeError:
652:             self.SetInitialSize = getattr(self, 'SetBestFittingSize',
653:                                           do_nothing)
654: 
655:         if not hasattr(self, 'IsShownOnScreen'):
656:             self.IsShownOnScreen = getattr(self, 'IsVisible',
657:                                            lambda *args: True)
658: 
659:         # Create the drawing bitmap
660:         self.bitmap = wxc.EmptyBitmap(w, h)
661:         DEBUG_MSG("__init__() - bitmap w:%d h:%d" % (w, h), 2, self)
662:         # TODO: Add support for 'point' inspection and plot navigation.
663:         self._isDrawn = False
664: 
665:         self.Bind(wx.EVT_SIZE, self._onSize)
666:         self.Bind(wx.EVT_PAINT, self._onPaint)
667:         self.Bind(wx.EVT_KEY_DOWN, self._onKeyDown)
668:         self.Bind(wx.EVT_KEY_UP, self._onKeyUp)
669:         self.Bind(wx.EVT_RIGHT_DOWN, self._onRightButtonDown)
670:         self.Bind(wx.EVT_RIGHT_DCLICK, self._onRightButtonDClick)
671:         self.Bind(wx.EVT_RIGHT_UP, self._onRightButtonUp)
672:         self.Bind(wx.EVT_MOUSEWHEEL, self._onMouseWheel)
673:         self.Bind(wx.EVT_LEFT_DOWN, self._onLeftButtonDown)
674:         self.Bind(wx.EVT_LEFT_DCLICK, self._onLeftButtonDClick)
675:         self.Bind(wx.EVT_LEFT_UP, self._onLeftButtonUp)
676:         self.Bind(wx.EVT_MOTION, self._onMotion)
677:         self.Bind(wx.EVT_LEAVE_WINDOW, self._onLeave)
678:         self.Bind(wx.EVT_ENTER_WINDOW, self._onEnter)
679:         # Add middle button events
680:         self.Bind(wx.EVT_MIDDLE_DOWN, self._onMiddleButtonDown)
681:         self.Bind(wx.EVT_MIDDLE_DCLICK, self._onMiddleButtonDClick)
682:         self.Bind(wx.EVT_MIDDLE_UP, self._onMiddleButtonUp)
683: 
684:         self.Bind(wx.EVT_MOUSE_CAPTURE_CHANGED, self._onCaptureLost)
685:         self.Bind(wx.EVT_MOUSE_CAPTURE_LOST, self._onCaptureLost)
686: 
687:         if wx.VERSION_STRING < "2.9":
688:             # only needed in 2.8 to reduce flicker
689:             self.SetBackgroundStyle(wx.BG_STYLE_CUSTOM)
690:             self.Bind(wx.EVT_ERASE_BACKGROUND, self._onEraseBackground)
691:         else:
692:             # this does the same in 2.9+
693:             self.SetBackgroundStyle(wx.BG_STYLE_PAINT)
694: 
695:         self.macros = {}  # dict from wx id to seq of macros
696: 
697:     def Destroy(self, *args, **kwargs):
698:         wx.Panel.Destroy(self, *args, **kwargs)
699: 
700:     def Copy_to_Clipboard(self, event=None):
701:         "copy bitmap of canvas to system clipboard"
702:         bmp_obj = wx.BitmapDataObject()
703:         bmp_obj.SetBitmap(self.bitmap)
704: 
705:         if not wx.TheClipboard.IsOpened():
706:             open_success = wx.TheClipboard.Open()
707:             if open_success:
708:                 wx.TheClipboard.SetData(bmp_obj)
709:                 wx.TheClipboard.Close()
710:                 wx.TheClipboard.Flush()
711: 
712:     def draw_idle(self):
713:         '''
714:         Delay rendering until the GUI is idle.
715:         '''
716:         DEBUG_MSG("draw_idle()", 1, self)
717:         self._isDrawn = False  # Force redraw
718: 
719:         # Triggering a paint event is all that is needed to defer drawing
720:         # until later. The platform will send the event when it thinks it is
721:         # a good time (usually as soon as there are no other events pending).
722:         self.Refresh(eraseBackground=False)
723: 
724:     def draw(self, drawDC=None):
725:         '''
726:         Render the figure using RendererWx instance renderer, or using a
727:         previously defined renderer if none is specified.
728:         '''
729:         DEBUG_MSG("draw()", 1, self)
730:         self.renderer = RendererWx(self.bitmap, self.figure.dpi)
731:         self.figure.draw(self.renderer)
732:         self._isDrawn = True
733:         self.gui_repaint(drawDC=drawDC)
734: 
735:     def new_timer(self, *args, **kwargs):
736:         '''
737:         Creates a new backend-specific subclass of
738:         :class:`backend_bases.Timer`. This is useful for getting periodic
739:         events through the backend's native event loop. Implemented only
740:         for backends with GUIs.
741: 
742:         Other Parameters
743:         ----------------
744:         interval : scalar
745:             Timer interval in milliseconds
746:         callbacks : list
747:             Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``
748:             will be executed by the timer every *interval*.
749: 
750:         '''
751:         return TimerWx(self, *args, **kwargs)
752: 
753:     def flush_events(self):
754:         wx.Yield()
755: 
756:     def start_event_loop(self, timeout=0):
757:         '''
758:         Start an event loop.  This is used to start a blocking event
759:         loop so that interactive functions, such as ginput and
760:         waitforbuttonpress, can wait for events.  This should not be
761:         confused with the main GUI event loop, which is always running
762:         and has nothing to do with this.
763: 
764:         This call blocks until a callback function triggers
765:         stop_event_loop() or *timeout* is reached.  If *timeout* is
766:         <=0, never timeout.
767: 
768:         Raises RuntimeError if event loop is already running.
769:         '''
770:         if hasattr(self, '_event_loop'):
771:             raise RuntimeError("Event loop already running")
772:         id = wx.NewId()
773:         timer = wx.Timer(self, id=id)
774:         if timeout > 0:
775:             timer.Start(timeout * 1000, oneShot=True)
776:             self.Bind(wx.EVT_TIMER, self.stop_event_loop, id=id)
777: 
778:         # Event loop handler for start/stop event loop
779:         self._event_loop = wxc.EventLoop()
780:         self._event_loop.Run()
781:         timer.Stop()
782: 
783:     def stop_event_loop(self, event=None):
784:         '''
785:         Stop an event loop.  This is used to stop a blocking event
786:         loop so that interactive functions, such as ginput and
787:         waitforbuttonpress, can wait for events.
788: 
789:         '''
790:         if hasattr(self, '_event_loop'):
791:             if self._event_loop.IsRunning():
792:                 self._event_loop.Exit()
793:             del self._event_loop
794: 
795:     def _get_imagesave_wildcards(self):
796:         'return the wildcard string for the filesave dialog'
797:         default_filetype = self.get_default_filetype()
798:         filetypes = self.get_supported_filetypes_grouped()
799:         sorted_filetypes = sorted(filetypes.items())
800:         wildcards = []
801:         extensions = []
802:         filter_index = 0
803:         for i, (name, exts) in enumerate(sorted_filetypes):
804:             ext_list = ';'.join(['*.%s' % ext for ext in exts])
805:             extensions.append(exts[0])
806:             wildcard = '%s (%s)|%s' % (name, ext_list, ext_list)
807:             if default_filetype in exts:
808:                 filter_index = i
809:             wildcards.append(wildcard)
810:         wildcards = '|'.join(wildcards)
811:         return wildcards, extensions, filter_index
812: 
813:     def gui_repaint(self, drawDC=None, origin='WX'):
814:         '''
815:         Performs update of the displayed image on the GUI canvas, using the
816:         supplied wx.PaintDC device context.
817: 
818:         The 'WXAgg' backend sets origin accordingly.
819:         '''
820:         DEBUG_MSG("gui_repaint()", 1, self)
821:         if self.IsShownOnScreen():
822:             if not drawDC:
823:                 # not called from OnPaint use a ClientDC
824:                 drawDC = wx.ClientDC(self)
825: 
826:             # following is for 'WX' backend on Windows
827:             # the bitmap can not be in use by another DC,
828:             # see GraphicsContextWx._cache
829:             if wx.Platform == '__WXMSW__' and origin == 'WX':
830:                 img = self.bitmap.ConvertToImage()
831:                 bmp = img.ConvertToBitmap()
832:                 drawDC.DrawBitmap(bmp, 0, 0)
833:             else:
834:                 drawDC.DrawBitmap(self.bitmap, 0, 0)
835: 
836:     filetypes = FigureCanvasBase.filetypes.copy()
837:     filetypes['bmp'] = 'Windows bitmap'
838:     filetypes['jpeg'] = 'JPEG'
839:     filetypes['jpg'] = 'JPEG'
840:     filetypes['pcx'] = 'PCX'
841:     filetypes['png'] = 'Portable Network Graphics'
842:     filetypes['tif'] = 'Tagged Image Format File'
843:     filetypes['tiff'] = 'Tagged Image Format File'
844:     filetypes['xpm'] = 'X pixmap'
845: 
846:     def print_figure(self, filename, *args, **kwargs):
847:         # Use pure Agg renderer to draw
848:         FigureCanvasBase.print_figure(self, filename, *args, **kwargs)
849:         # Restore the current view; this is needed because the
850:         # artist contains methods rely on particular attributes
851:         # of the rendered figure for determining things like
852:         # bounding boxes.
853:         if self._isDrawn:
854:             self.draw()
855: 
856:     def print_bmp(self, filename, *args, **kwargs):
857:         return self._print_image(filename, wx.BITMAP_TYPE_BMP, *args, **kwargs)
858: 
859:     if not _has_pil:
860:         def print_jpeg(self, filename, *args, **kwargs):
861:             return self._print_image(filename, wx.BITMAP_TYPE_JPEG,
862:                                      *args, **kwargs)
863:         print_jpg = print_jpeg
864: 
865:     def print_pcx(self, filename, *args, **kwargs):
866:         return self._print_image(filename, wx.BITMAP_TYPE_PCX, *args, **kwargs)
867: 
868:     def print_png(self, filename, *args, **kwargs):
869:         return self._print_image(filename, wx.BITMAP_TYPE_PNG, *args, **kwargs)
870: 
871:     if not _has_pil:
872:         def print_tiff(self, filename, *args, **kwargs):
873:             return self._print_image(filename, wx.BITMAP_TYPE_TIF,
874:                                      *args, **kwargs)
875:         print_tif = print_tiff
876: 
877:     def print_xpm(self, filename, *args, **kwargs):
878:         return self._print_image(filename, wx.BITMAP_TYPE_XPM, *args, **kwargs)
879: 
880:     def _print_image(self, filename, filetype, *args, **kwargs):
881:         origBitmap = self.bitmap
882: 
883:         l, b, width, height = self.figure.bbox.bounds
884:         width = int(math.ceil(width))
885:         height = int(math.ceil(height))
886: 
887:         self.bitmap = wxc.EmptyBitmap(width, height)
888: 
889:         renderer = RendererWx(self.bitmap, self.figure.dpi)
890: 
891:         gc = renderer.new_gc()
892: 
893:         self.figure.draw(renderer)
894: 
895:         # image is the object that we call SaveFile on.
896:         image = self.bitmap
897:         # set the JPEG quality appropriately.  Unfortunately, it is only
898:         # possible to set the quality on a wx.Image object.  So if we
899:         # are saving a JPEG, convert the wx.Bitmap to a wx.Image,
900:         # and set the quality.
901:         if filetype == wx.BITMAP_TYPE_JPEG:
902:             jpeg_quality = kwargs.get('quality',
903:                                       rcParams['savefig.jpeg_quality'])
904:             image = self.bitmap.ConvertToImage()
905:             image.SetOption(wx.IMAGE_OPTION_QUALITY, str(jpeg_quality))
906: 
907:         # Now that we have rendered into the bitmap, save it
908:         # to the appropriate file type and clean up
909:         if isinstance(filename, six.string_types):
910:             if not image.SaveFile(filename, filetype):
911:                 DEBUG_MSG('print_figure() file save error', 4, self)
912:                 raise RuntimeError(
913:                     'Could not save figure to %s\n' %
914:                     (filename))
915:         elif is_writable_file_like(filename):
916:             if not isinstance(image, wx.Image):
917:                 image = image.ConvertToImage()
918:             if not image.SaveStream(filename, filetype):
919:                 DEBUG_MSG('print_figure() file save error', 4, self)
920:                 raise RuntimeError(
921:                     'Could not save figure to %s\n' %
922:                     (filename))
923: 
924:         # Restore everything to normal
925:         self.bitmap = origBitmap
926: 
927:         # Note: draw is required here since bits of state about the
928:         # last renderer are strewn about the artist draw methods.  Do
929:         # not remove the draw without first verifying that these have
930:         # been cleaned up.  The artist contains() methods will fail
931:         # otherwise.
932:         if self._isDrawn:
933:             self.draw()
934:         self.Refresh()
935: 
936:     def _onPaint(self, evt):
937:         '''
938:         Called when wxPaintEvt is generated
939:         '''
940: 
941:         DEBUG_MSG("_onPaint()", 1, self)
942:         drawDC = wx.PaintDC(self)
943:         if not self._isDrawn:
944:             self.draw(drawDC=drawDC)
945:         else:
946:             self.gui_repaint(drawDC=drawDC)
947:         evt.Skip()
948: 
949:     def _onEraseBackground(self, evt):
950:         '''
951:         Called when window is redrawn; since we are blitting the entire
952:         image, we can leave this blank to suppress flicker.
953:         '''
954:         pass
955: 
956:     def _onSize(self, evt):
957:         '''
958:         Called when wxEventSize is generated.
959: 
960:         In this application we attempt to resize to fit the window, so it
961:         is better to take the performance hit and redraw the whole window.
962:         '''
963: 
964:         DEBUG_MSG("_onSize()", 2, self)
965:         # Create a new, correctly sized bitmap
966:         self._width, self._height = self.GetClientSize()
967:         self.bitmap = wxc.EmptyBitmap(self._width, self._height)
968: 
969:         self._isDrawn = False
970: 
971:         if self._width <= 1 or self._height <= 1:
972:             return  # Empty figure
973: 
974:         dpival = self.figure.dpi
975:         winch = self._width / dpival
976:         hinch = self._height / dpival
977:         self.figure.set_size_inches(winch, hinch, forward=False)
978: 
979:         # Rendering will happen on the associated paint event
980:         # so no need to do anything here except to make sure
981:         # the whole background is repainted.
982:         self.Refresh(eraseBackground=False)
983:         FigureCanvasBase.resize_event(self)
984: 
985:     def _get_key(self, evt):
986: 
987:         keyval = evt.KeyCode
988:         if keyval in self.keyvald:
989:             key = self.keyvald[keyval]
990:         elif keyval < 256:
991:             key = chr(keyval)
992:             # wx always returns an uppercase, so make it lowercase if the shift
993:             # key is not depressed (NOTE: this will not handle Caps Lock)
994:             if not evt.ShiftDown():
995:                 key = key.lower()
996:         else:
997:             key = None
998: 
999:         for meth, prefix in (
1000:                 [evt.AltDown, 'alt'],
1001:                 [evt.ControlDown, 'ctrl'], ):
1002:             if meth():
1003:                 key = '{0}+{1}'.format(prefix, key)
1004: 
1005:         return key
1006: 
1007:     def _onKeyDown(self, evt):
1008:         '''Capture key press.'''
1009:         key = self._get_key(evt)
1010:         evt.Skip()
1011:         FigureCanvasBase.key_press_event(self, key, guiEvent=evt)
1012: 
1013:     def _onKeyUp(self, evt):
1014:         '''Release key.'''
1015:         key = self._get_key(evt)
1016:         # print 'release key', key
1017:         evt.Skip()
1018:         FigureCanvasBase.key_release_event(self, key, guiEvent=evt)
1019: 
1020:     def _set_capture(self, capture=True):
1021:         '''control wx mouse capture '''
1022:         if self.HasCapture():
1023:             self.ReleaseMouse()
1024:         if capture:
1025:             self.CaptureMouse()
1026: 
1027:     def _onCaptureLost(self, evt):
1028:         '''Capture changed or lost'''
1029:         self._set_capture(False)
1030: 
1031:     def _onRightButtonDown(self, evt):
1032:         '''Start measuring on an axis.'''
1033:         x = evt.GetX()
1034:         y = self.figure.bbox.height - evt.GetY()
1035:         evt.Skip()
1036:         self._set_capture(True)
1037:         FigureCanvasBase.button_press_event(self, x, y, 3, guiEvent=evt)
1038: 
1039:     def _onRightButtonDClick(self, evt):
1040:         '''Start measuring on an axis.'''
1041:         x = evt.GetX()
1042:         y = self.figure.bbox.height - evt.GetY()
1043:         evt.Skip()
1044:         self._set_capture(True)
1045:         FigureCanvasBase.button_press_event(self, x, y, 3,
1046:                                             dblclick=True, guiEvent=evt)
1047: 
1048:     def _onRightButtonUp(self, evt):
1049:         '''End measuring on an axis.'''
1050:         x = evt.GetX()
1051:         y = self.figure.bbox.height - evt.GetY()
1052:         evt.Skip()
1053:         self._set_capture(False)
1054:         FigureCanvasBase.button_release_event(self, x, y, 3, guiEvent=evt)
1055: 
1056:     def _onLeftButtonDown(self, evt):
1057:         '''Start measuring on an axis.'''
1058:         x = evt.GetX()
1059:         y = self.figure.bbox.height - evt.GetY()
1060:         evt.Skip()
1061:         self._set_capture(True)
1062:         FigureCanvasBase.button_press_event(self, x, y, 1, guiEvent=evt)
1063: 
1064:     def _onLeftButtonDClick(self, evt):
1065:         '''Start measuring on an axis.'''
1066:         x = evt.GetX()
1067:         y = self.figure.bbox.height - evt.GetY()
1068:         evt.Skip()
1069:         self._set_capture(True)
1070:         FigureCanvasBase.button_press_event(self, x, y, 1,
1071:                                             dblclick=True, guiEvent=evt)
1072: 
1073:     def _onLeftButtonUp(self, evt):
1074:         '''End measuring on an axis.'''
1075:         x = evt.GetX()
1076:         y = self.figure.bbox.height - evt.GetY()
1077:         # print 'release button', 1
1078:         evt.Skip()
1079:         self._set_capture(False)
1080:         FigureCanvasBase.button_release_event(self, x, y, 1, guiEvent=evt)
1081: 
1082:     # Add middle button events
1083:     def _onMiddleButtonDown(self, evt):
1084:         '''Start measuring on an axis.'''
1085:         x = evt.GetX()
1086:         y = self.figure.bbox.height - evt.GetY()
1087:         evt.Skip()
1088:         self._set_capture(True)
1089:         FigureCanvasBase.button_press_event(self, x, y, 2, guiEvent=evt)
1090: 
1091:     def _onMiddleButtonDClick(self, evt):
1092:         '''Start measuring on an axis.'''
1093:         x = evt.GetX()
1094:         y = self.figure.bbox.height - evt.GetY()
1095:         evt.Skip()
1096:         self._set_capture(True)
1097:         FigureCanvasBase.button_press_event(self, x, y, 2,
1098:                                             dblclick=True, guiEvent=evt)
1099: 
1100:     def _onMiddleButtonUp(self, evt):
1101:         '''End measuring on an axis.'''
1102:         x = evt.GetX()
1103:         y = self.figure.bbox.height - evt.GetY()
1104:         # print 'release button', 1
1105:         evt.Skip()
1106:         self._set_capture(False)
1107:         FigureCanvasBase.button_release_event(self, x, y, 2, guiEvent=evt)
1108: 
1109:     def _onMouseWheel(self, evt):
1110:         '''Translate mouse wheel events into matplotlib events'''
1111: 
1112:         # Determine mouse location
1113:         x = evt.GetX()
1114:         y = self.figure.bbox.height - evt.GetY()
1115: 
1116:         # Convert delta/rotation/rate into a floating point step size
1117:         delta = evt.GetWheelDelta()
1118:         rotation = evt.GetWheelRotation()
1119:         rate = evt.GetLinesPerAction()
1120:         # print "delta,rotation,rate",delta,rotation,rate
1121:         step = rate * float(rotation) / delta
1122: 
1123:         # Done handling event
1124:         evt.Skip()
1125: 
1126:         # Mac is giving two events for every wheel event
1127:         # Need to skip every second one
1128:         if wx.Platform == '__WXMAC__':
1129:             if not hasattr(self, '_skipwheelevent'):
1130:                 self._skipwheelevent = True
1131:             elif self._skipwheelevent:
1132:                 self._skipwheelevent = False
1133:                 return  # Return without processing event
1134:             else:
1135:                 self._skipwheelevent = True
1136: 
1137:         # Convert to mpl event
1138:         FigureCanvasBase.scroll_event(self, x, y, step, guiEvent=evt)
1139: 
1140:     def _onMotion(self, evt):
1141:         '''Start measuring on an axis.'''
1142: 
1143:         x = evt.GetX()
1144:         y = self.figure.bbox.height - evt.GetY()
1145:         evt.Skip()
1146:         FigureCanvasBase.motion_notify_event(self, x, y, guiEvent=evt)
1147: 
1148:     def _onLeave(self, evt):
1149:         '''Mouse has left the window.'''
1150: 
1151:         evt.Skip()
1152:         FigureCanvasBase.leave_notify_event(self, guiEvent=evt)
1153: 
1154:     def _onEnter(self, evt):
1155:         '''Mouse has entered the window.'''
1156:         FigureCanvasBase.enter_notify_event(self, guiEvent=evt)
1157: 
1158: 
1159: ########################################################################
1160: #
1161: # The following functions and classes are for pylab compatibility
1162: # mode (matplotlib.pylab) and implement figure managers, etc...
1163: #
1164: ########################################################################
1165: 
1166: 
1167: class FigureFrameWx(wx.Frame):
1168:     def __init__(self, num, fig):
1169:         # On non-Windows platform, explicitly set the position - fix
1170:         # positioning bug on some Linux platforms
1171:         if wx.Platform == '__WXMSW__':
1172:             pos = wx.DefaultPosition
1173:         else:
1174:             pos = wx.Point(20, 20)
1175:         l, b, w, h = fig.bbox.bounds
1176:         wx.Frame.__init__(self, parent=None, id=-1, pos=pos,
1177:                           title="Figure %d" % num)
1178:         # Frame will be sized later by the Fit method
1179:         DEBUG_MSG("__init__()", 1, self)
1180:         self.num = num
1181: 
1182:         statbar = StatusBarWx(self)
1183:         self.SetStatusBar(statbar)
1184:         self.canvas = self.get_canvas(fig)
1185:         self.canvas.SetInitialSize(wx.Size(fig.bbox.width, fig.bbox.height))
1186:         self.canvas.SetFocus()
1187:         self.sizer = wx.BoxSizer(wx.VERTICAL)
1188:         self.sizer.Add(self.canvas, 1, wx.TOP | wx.LEFT | wx.EXPAND)
1189:         # By adding toolbar in sizer, we are able to put it at the bottom
1190:         # of the frame - so appearance is closer to GTK version
1191: 
1192:         self.toolbar = self._get_toolbar(statbar)
1193: 
1194:         if self.toolbar is not None:
1195:             self.toolbar.Realize()
1196:             # On Windows platform, default window size is incorrect, so set
1197:             # toolbar width to figure width.
1198:             if wxc.is_phoenix:
1199:                 tw, th = self.toolbar.GetSize()
1200:                 fw, fh = self.canvas.GetSize()
1201:             else:
1202:                 tw, th = self.toolbar.GetSizeTuple()
1203:                 fw, fh = self.canvas.GetSizeTuple()
1204:             # By adding toolbar in sizer, we are able to put it at the bottom
1205:             # of the frame - so appearance is closer to GTK version.
1206:             self.toolbar.SetSize(wx.Size(fw, th))
1207:             self.sizer.Add(self.toolbar, 0, wx.LEFT | wx.EXPAND)
1208:         self.SetSizer(self.sizer)
1209:         self.Fit()
1210: 
1211:         self.canvas.SetMinSize((2, 2))
1212: 
1213:         # give the window a matplotlib icon rather than the stock one.
1214:         # This is not currently working on Linux and is untested elsewhere.
1215:         # icon_path = os.path.join(matplotlib.rcParams['datapath'],
1216:         #                         'images', 'matplotlib.png')
1217:         #icon = wx.IconFromBitmap(wx.Bitmap(icon_path))
1218:         # for xpm type icons try:
1219:         #icon = wx.Icon(icon_path, wx.BITMAP_TYPE_XPM)
1220:         # self.SetIcon(icon)
1221: 
1222:         self.figmgr = FigureManagerWx(self.canvas, num, self)
1223: 
1224:         self.Bind(wx.EVT_CLOSE, self._onClose)
1225: 
1226:     def _get_toolbar(self, statbar):
1227:         if rcParams['toolbar'] == 'toolbar2':
1228:             toolbar = NavigationToolbar2Wx(self.canvas)
1229:             toolbar.set_status_bar(statbar)
1230:         else:
1231:             toolbar = None
1232:         return toolbar
1233: 
1234:     def get_canvas(self, fig):
1235:         return FigureCanvasWx(self, -1, fig)
1236: 
1237:     def get_figure_manager(self):
1238:         DEBUG_MSG("get_figure_manager()", 1, self)
1239:         return self.figmgr
1240: 
1241:     def _onClose(self, evt):
1242:         DEBUG_MSG("onClose()", 1, self)
1243:         self.canvas.close_event()
1244:         self.canvas.stop_event_loop()
1245:         Gcf.destroy(self.num)
1246:         # self.Destroy()
1247: 
1248:     def GetToolBar(self):
1249:         '''Override wxFrame::GetToolBar as we don't have managed toolbar'''
1250:         return self.toolbar
1251: 
1252:     def Destroy(self, *args, **kwargs):
1253:         try:
1254:             self.canvas.mpl_disconnect(self.toolbar._idDrag)
1255:             # Rationale for line above: see issue 2941338.
1256:         except AttributeError:
1257:             pass  # classic toolbar lacks the attribute
1258:         if not self.IsBeingDeleted():
1259:             wx.Frame.Destroy(self, *args, **kwargs)
1260:             if self.toolbar is not None:
1261:                 self.toolbar.Destroy()
1262:             wxapp = wx.GetApp()
1263:             if wxapp:
1264:                 wxapp.Yield()
1265:         return True
1266: 
1267: 
1268: class FigureManagerWx(FigureManagerBase):
1269:     '''
1270:     This class contains the FigureCanvas and GUI frame
1271: 
1272:     It is instantiated by GcfWx whenever a new figure is created. GcfWx is
1273:     responsible for managing multiple instances of FigureManagerWx.
1274: 
1275:     Attributes
1276:     ----------
1277:     canvas : `FigureCanvas`
1278:         a FigureCanvasWx(wx.Panel) instance
1279:     window : wxFrame
1280:         a wxFrame instance - wxpython.org/Phoenix/docs/html/Frame.html
1281: 
1282:     '''
1283: 
1284:     def __init__(self, canvas, num, frame):
1285:         DEBUG_MSG("__init__()", 1, self)
1286:         FigureManagerBase.__init__(self, canvas, num)
1287:         self.frame = frame
1288:         self.window = frame
1289: 
1290:         self.tb = frame.GetToolBar()
1291:         self.toolbar = self.tb  # consistent with other backends
1292: 
1293:         def notify_axes_change(fig):
1294:             'this will be called whenever the current axes is changed'
1295:             if self.tb is not None:
1296:                 self.tb.update()
1297:         self.canvas.figure.add_axobserver(notify_axes_change)
1298: 
1299:     def show(self):
1300:         self.frame.Show()
1301:         self.canvas.draw()
1302: 
1303:     def destroy(self, *args):
1304:         DEBUG_MSG("destroy()", 1, self)
1305:         self.frame.Destroy()
1306:         wxapp = wx.GetApp()
1307:         if wxapp:
1308:             wxapp.Yield()
1309: 
1310:     def get_window_title(self):
1311:         return self.window.GetTitle()
1312: 
1313:     def set_window_title(self, title):
1314:         self.window.SetTitle(title)
1315: 
1316:     def resize(self, width, height):
1317:         'Set the canvas size in pixels'
1318:         self.canvas.SetInitialSize(wx.Size(width, height))
1319:         self.window.GetSizer().Fit(self.window)
1320: 
1321: # Identifiers for toolbar controls - images_wx contains bitmaps for the images
1322: # used in the controls. wxWindows does not provide any stock images, so I've
1323: # 'stolen' those from GTK2, and transformed them into the appropriate format.
1324: #import images_wx
1325: 
1326: _NTB_AXISMENU = wx.NewId()
1327: _NTB_AXISMENU_BUTTON = wx.NewId()
1328: _NTB_X_PAN_LEFT = wx.NewId()
1329: _NTB_X_PAN_RIGHT = wx.NewId()
1330: _NTB_X_ZOOMIN = wx.NewId()
1331: _NTB_X_ZOOMOUT = wx.NewId()
1332: _NTB_Y_PAN_UP = wx.NewId()
1333: _NTB_Y_PAN_DOWN = wx.NewId()
1334: _NTB_Y_ZOOMIN = wx.NewId()
1335: _NTB_Y_ZOOMOUT = wx.NewId()
1336: #_NTB_SUBPLOT            =wx.NewId()
1337: _NTB_SAVE = wx.NewId()
1338: _NTB_CLOSE = wx.NewId()
1339: 
1340: 
1341: def _load_bitmap(filename):
1342:     '''
1343:     Load a bitmap file from the backends/images subdirectory in which the
1344:     matplotlib library is installed. The filename parameter should not
1345:     contain any path information as this is determined automatically.
1346: 
1347:     Returns a wx.Bitmap object
1348:     '''
1349: 
1350:     basedir = os.path.join(rcParams['datapath'], 'images')
1351: 
1352:     bmpFilename = os.path.normpath(os.path.join(basedir, filename))
1353:     if not os.path.exists(bmpFilename):
1354:         raise IOError('Could not find bitmap file "%s"; dying' % bmpFilename)
1355: 
1356:     bmp = wx.Bitmap(bmpFilename)
1357:     return bmp
1358: 
1359: 
1360: class MenuButtonWx(wx.Button):
1361:     '''
1362:     wxPython does not permit a menu to be incorporated directly into a toolbar.
1363:     This class simulates the effect by associating a pop-up menu with a button
1364:     in the toolbar, and managing this as though it were a menu.
1365:     '''
1366: 
1367:     def __init__(self, parent):
1368: 
1369:         wx.Button.__init__(self, parent, _NTB_AXISMENU_BUTTON, "Axes:        ",
1370:                            style=wx.BU_EXACTFIT)
1371:         self._toolbar = parent
1372:         self._menu = wx.Menu()
1373:         self._axisId = []
1374:         # First two menu items never change...
1375:         self._allId = wx.NewId()
1376:         self._invertId = wx.NewId()
1377:         self._menu.Append(self._allId, "All", "Select all axes", False)
1378:         self._menu.Append(self._invertId, "Invert", "Invert axes selected",
1379:                           False)
1380:         self._menu.AppendSeparator()
1381: 
1382:         self.Bind(wx.EVT_BUTTON, self._onMenuButton, id=_NTB_AXISMENU_BUTTON)
1383:         self.Bind(wx.EVT_MENU, self._handleSelectAllAxes, id=self._allId)
1384:         self.Bind(wx.EVT_MENU, self._handleInvertAxesSelected,
1385:                   id=self._invertId)
1386: 
1387:     def Destroy(self):
1388:         self._menu.Destroy()
1389:         self.Destroy()
1390: 
1391:     def _onMenuButton(self, evt):
1392:         '''Handle menu button pressed.'''
1393:         if wxc.is_phoenix:
1394:             x, y = self.GetPosition()
1395:             w, h = self.GetSize()
1396:         else:
1397:             x, y = self.GetPositionTuple()
1398:             w, h = self.GetSizeTuple()
1399:         self.PopupMenuXY(self._menu, x, y + h - 4)
1400:         # When menu returned, indicate selection in button
1401:         evt.Skip()
1402: 
1403:     def _handleSelectAllAxes(self, evt):
1404:         '''Called when the 'select all axes' menu item is selected.'''
1405:         if len(self._axisId) == 0:
1406:             return
1407:         for i in range(len(self._axisId)):
1408:             self._menu.Check(self._axisId[i], True)
1409:         self._toolbar.set_active(self.getActiveAxes())
1410:         evt.Skip()
1411: 
1412:     def _handleInvertAxesSelected(self, evt):
1413:         '''Called when the invert all menu item is selected'''
1414:         if len(self._axisId) == 0:
1415:             return
1416:         for i in range(len(self._axisId)):
1417:             if self._menu.IsChecked(self._axisId[i]):
1418:                 self._menu.Check(self._axisId[i], False)
1419:             else:
1420:                 self._menu.Check(self._axisId[i], True)
1421:         self._toolbar.set_active(self.getActiveAxes())
1422:         evt.Skip()
1423: 
1424:     def _onMenuItemSelected(self, evt):
1425:         '''Called whenever one of the specific axis menu items is selected'''
1426:         current = self._menu.IsChecked(evt.GetId())
1427:         if current:
1428:             new = False
1429:         else:
1430:             new = True
1431:         self._menu.Check(evt.GetId(), new)
1432:         # Lines above would be deleted based on svn tracker ID 2841525;
1433:         # not clear whether this matters or not.
1434:         self._toolbar.set_active(self.getActiveAxes())
1435:         evt.Skip()
1436: 
1437:     def updateAxes(self, maxAxis):
1438:         '''Ensures that there are entries for max_axis axes in the menu
1439:         (selected by default).'''
1440:         if maxAxis > len(self._axisId):
1441:             for i in range(len(self._axisId) + 1, maxAxis + 1, 1):
1442:                 menuId = wx.NewId()
1443:                 self._axisId.append(menuId)
1444:                 self._menu.Append(menuId, "Axis %d" % i,
1445:                                   "Select axis %d" % i,
1446:                                   True)
1447:                 self._menu.Check(menuId, True)
1448:                 self.Bind(wx.EVT_MENU, self._onMenuItemSelected, id=menuId)
1449:         elif maxAxis < len(self._axisId):
1450:             for menuId in self._axisId[maxAxis:]:
1451:                 self._menu.Delete(menuId)
1452:             self._axisId = self._axisId[:maxAxis]
1453:         self._toolbar.set_active(list(xrange(maxAxis)))
1454: 
1455:     def getActiveAxes(self):
1456:         '''Return a list of the selected axes.'''
1457:         active = []
1458:         for i in range(len(self._axisId)):
1459:             if self._menu.IsChecked(self._axisId[i]):
1460:                 active.append(i)
1461:         return active
1462: 
1463:     def updateButtonText(self, lst):
1464:         '''Update the list of selected axes in the menu button'''
1465:         axis_txt = ''
1466:         for e in lst:
1467:             axis_txt += '%d,' % (e + 1)
1468:         # remove trailing ',' and add to button string
1469:         self.SetLabel("Axes: %s" % axis_txt[:-1])
1470: 
1471: 
1472: cursord = {
1473:     cursors.MOVE: wx.CURSOR_HAND,
1474:     cursors.HAND: wx.CURSOR_HAND,
1475:     cursors.POINTER: wx.CURSOR_ARROW,
1476:     cursors.SELECT_REGION: wx.CURSOR_CROSS,
1477:     cursors.WAIT: wx.CURSOR_WAIT,
1478: }
1479: 
1480: 
1481: class SubplotToolWX(wx.Frame):
1482:     def __init__(self, targetfig):
1483:         wx.Frame.__init__(self, None, -1, "Configure subplots")
1484: 
1485:         toolfig = Figure((6, 3))
1486:         canvas = FigureCanvasWx(self, -1, toolfig)
1487: 
1488:         # Create a figure manager to manage things
1489:         figmgr = FigureManager(canvas, 1, self)
1490: 
1491:         # Now put all into a sizer
1492:         sizer = wx.BoxSizer(wx.VERTICAL)
1493:         # This way of adding to sizer allows resizing
1494:         sizer.Add(canvas, 1, wx.LEFT | wx.TOP | wx.GROW)
1495:         self.SetSizer(sizer)
1496:         self.Fit()
1497:         tool = SubplotTool(targetfig, toolfig)
1498: 
1499: 
1500: class NavigationToolbar2Wx(NavigationToolbar2, wx.ToolBar):
1501:     def __init__(self, canvas):
1502:         wx.ToolBar.__init__(self, canvas.GetParent(), -1)
1503:         NavigationToolbar2.__init__(self, canvas)
1504:         self.canvas = canvas
1505:         self._idle = True
1506:         self.statbar = None
1507:         self.prevZoomRect = None
1508:         # for now, use alternate zoom-rectangle drawing on all
1509:         # Macs. N.B. In future versions of wx it may be possible to
1510:         # detect Retina displays with window.GetContentScaleFactor()
1511:         # and/or dc.GetContentScaleFactor()
1512:         self.retinaFix = 'wxMac' in wx.PlatformInfo
1513: 
1514:     def get_canvas(self, frame, fig):
1515:         return FigureCanvasWx(frame, -1, fig)
1516: 
1517:     def _init_toolbar(self):
1518:         DEBUG_MSG("_init_toolbar", 1, self)
1519: 
1520:         self._parent = self.canvas.GetParent()
1521: 
1522:         self.wx_ids = {}
1523:         for text, tooltip_text, image_file, callback in self.toolitems:
1524:             if text is None:
1525:                 self.AddSeparator()
1526:                 continue
1527:             self.wx_ids[text] = wx.NewId()
1528:             wxc._AddTool(self, self.wx_ids, text,
1529:                         _load_bitmap(image_file + '.png'),
1530:                         tooltip_text)
1531: 
1532:             self.Bind(wx.EVT_TOOL, getattr(self, callback),
1533:                       id=self.wx_ids[text])
1534: 
1535:         self.Realize()
1536: 
1537:     def zoom(self, *args):
1538:         self.ToggleTool(self.wx_ids['Pan'], False)
1539:         NavigationToolbar2.zoom(self, *args)
1540: 
1541:     def pan(self, *args):
1542:         self.ToggleTool(self.wx_ids['Zoom'], False)
1543:         NavigationToolbar2.pan(self, *args)
1544: 
1545:     def configure_subplots(self, evt):
1546:         frame = wx.Frame(None, -1, "Configure subplots")
1547: 
1548:         toolfig = Figure((6, 3))
1549:         canvas = self.get_canvas(frame, toolfig)
1550: 
1551:         # Create a figure manager to manage things
1552:         figmgr = FigureManager(canvas, 1, frame)
1553: 
1554:         # Now put all into a sizer
1555:         sizer = wx.BoxSizer(wx.VERTICAL)
1556:         # This way of adding to sizer allows resizing
1557:         sizer.Add(canvas, 1, wx.LEFT | wx.TOP | wx.GROW)
1558:         frame.SetSizer(sizer)
1559:         frame.Fit()
1560:         tool = SubplotTool(self.canvas.figure, toolfig)
1561:         frame.Show()
1562: 
1563:     def save_figure(self, *args):
1564:         # Fetch the required filename and file type.
1565:         filetypes, exts, filter_index = self.canvas._get_imagesave_wildcards()
1566:         default_file = self.canvas.get_default_filename()
1567:         dlg = wx.FileDialog(self._parent, "Save to file", "", default_file,
1568:                             filetypes,
1569:                             wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
1570:         dlg.SetFilterIndex(filter_index)
1571:         if dlg.ShowModal() == wx.ID_OK:
1572:             dirname = dlg.GetDirectory()
1573:             filename = dlg.GetFilename()
1574:             DEBUG_MSG(
1575:                 'Save file dir:%s name:%s' %
1576:                 (dirname, filename), 3, self)
1577:             format = exts[dlg.GetFilterIndex()]
1578:             basename, ext = os.path.splitext(filename)
1579:             if ext.startswith('.'):
1580:                 ext = ext[1:]
1581:             if ext in ('svg', 'pdf', 'ps', 'eps', 'png') and format != ext:
1582:                 # looks like they forgot to set the image type drop
1583:                 # down, going with the extension.
1584:                 warnings.warn(
1585:                     'extension %s did not match the selected '
1586:                     'image type %s; going with %s' %
1587:                     (ext, format, ext), stacklevel=0)
1588:                 format = ext
1589:             try:
1590:                 self.canvas.figure.savefig(
1591:                     os.path.join(dirname, filename), format=format)
1592:             except Exception as e:
1593:                 error_msg_wx(str(e))
1594: 
1595:     def set_cursor(self, cursor):
1596:         cursor = wxc.Cursor(cursord[cursor])
1597:         self.canvas.SetCursor(cursor)
1598:         self.canvas.Update()
1599: 
1600:     def release(self, event):
1601:         try:
1602:             del self.lastrect
1603:         except AttributeError:
1604:             pass
1605: 
1606:     @cbook.deprecated("2.1", alternative="canvas.draw_idle")
1607:     def dynamic_update(self):
1608:         d = self._idle
1609:         self._idle = False
1610:         if d:
1611:             self.canvas.draw()
1612:             self._idle = True
1613: 
1614:     def press(self, event):
1615:         if self._active == 'ZOOM':
1616:             if not self.retinaFix:
1617:                 self.wxoverlay = wx.Overlay()
1618:             else:
1619:                 if event.inaxes is not None:
1620:                     self.savedRetinaImage = self.canvas.copy_from_bbox(
1621:                         event.inaxes.bbox)
1622:                     self.zoomStartX = event.xdata
1623:                     self.zoomStartY = event.ydata
1624:                     self.zoomAxes = event.inaxes
1625: 
1626:     def release(self, event):
1627:         if self._active == 'ZOOM':
1628:             # When the mouse is released we reset the overlay and it
1629:             # restores the former content to the window.
1630:             if not self.retinaFix:
1631:                 self.wxoverlay.Reset()
1632:                 del self.wxoverlay
1633:             else:
1634:                 del self.savedRetinaImage
1635:                 if self.prevZoomRect:
1636:                     self.prevZoomRect.pop(0).remove()
1637:                     self.prevZoomRect = None
1638:                 if self.zoomAxes:
1639:                     self.zoomAxes = None
1640: 
1641:     def draw_rubberband(self, event, x0, y0, x1, y1):
1642:         if self.retinaFix:  # On Macs, use the following code
1643:             # wx.DCOverlay does not work properly on Retina displays.
1644:             rubberBandColor = '#C0C0FF'
1645:             if self.prevZoomRect:
1646:                 self.prevZoomRect.pop(0).remove()
1647:             self.canvas.restore_region(self.savedRetinaImage)
1648:             X0, X1 = self.zoomStartX, event.xdata
1649:             Y0, Y1 = self.zoomStartY, event.ydata
1650:             lineX = (X0, X0, X1, X1, X0)
1651:             lineY = (Y0, Y1, Y1, Y0, Y0)
1652:             self.prevZoomRect = self.zoomAxes.plot(
1653:                 lineX, lineY, '-', color=rubberBandColor)
1654:             self.zoomAxes.draw_artist(self.prevZoomRect[0])
1655:             self.canvas.blit(self.zoomAxes.bbox)
1656:             return
1657: 
1658:         # Use an Overlay to draw a rubberband-like bounding box.
1659: 
1660:         dc = wx.ClientDC(self.canvas)
1661:         odc = wx.DCOverlay(self.wxoverlay, dc)
1662:         odc.Clear()
1663: 
1664:         # Mac's DC is already the same as a GCDC, and it causes
1665:         # problems with the overlay if we try to use an actual
1666:         # wx.GCDC so don't try it.
1667:         if 'wxMac' not in wx.PlatformInfo:
1668:             dc = wx.GCDC(dc)
1669: 
1670:         height = self.canvas.figure.bbox.height
1671:         y1 = height - y1
1672:         y0 = height - y0
1673: 
1674:         if y1 < y0:
1675:             y0, y1 = y1, y0
1676:         if x1 < y0:
1677:             x0, x1 = x1, x0
1678: 
1679:         w = x1 - x0
1680:         h = y1 - y0
1681:         rect = wx.Rect(x0, y0, w, h)
1682: 
1683:         rubberBandColor = '#C0C0FF'  # or load from config?
1684: 
1685:         # Set a pen for the border
1686:         color = wxc.NamedColour(rubberBandColor)
1687:         dc.SetPen(wx.Pen(color, 1))
1688: 
1689:         # use the same color, plus alpha for the brush
1690:         r, g, b, a = color.Get(True)
1691:         color.Set(r, g, b, 0x60)
1692:         dc.SetBrush(wx.Brush(color))
1693:         if wxc.is_phoenix:
1694:             dc.DrawRectangle(rect)
1695:         else:
1696:             dc.DrawRectangleRect(rect)
1697: 
1698:     def set_status_bar(self, statbar):
1699:         self.statbar = statbar
1700: 
1701:     def set_message(self, s):
1702:         if self.statbar is not None:
1703:             self.statbar.set_function(s)
1704: 
1705:     def set_history_buttons(self):
1706:         can_backward = (self._views._pos > 0)
1707:         can_forward = (self._views._pos < len(self._views._elements) - 1)
1708:         self.EnableTool(self.wx_ids['Back'], can_backward)
1709:         self.EnableTool(self.wx_ids['Forward'], can_forward)
1710: 
1711: 
1712: class StatusBarWx(wx.StatusBar):
1713:     '''
1714:     A status bar is added to _FigureFrame to allow measurements and the
1715:     previously selected scroll function to be displayed as a user
1716:     convenience.
1717:     '''
1718: 
1719:     def __init__(self, parent):
1720:         wx.StatusBar.__init__(self, parent, -1)
1721:         self.SetFieldsCount(2)
1722:         self.SetStatusText("None", 1)
1723:         #self.SetStatusText("Measurement: None", 2)
1724:         # self.Reposition()
1725: 
1726:     def set_function(self, string):
1727:         self.SetStatusText("%s" % string, 1)
1728: 
1729:     # def set_measurement(self, string):
1730:     #    self.SetStatusText("Measurement: %s" % string, 2)
1731: 
1732: 
1733: #< Additions for printing support: Matt Newville
1734: 
1735: class PrintoutWx(wx.Printout):
1736:     '''
1737:     Simple wrapper around wx Printout class -- all the real work
1738:     here is scaling the matplotlib canvas bitmap to the current
1739:     printer's definition.
1740:     '''
1741: 
1742:     def __init__(self, canvas, width=5.5, margin=0.5, title='matplotlib'):
1743:         wx.Printout.__init__(self, title=title)
1744:         self.canvas = canvas
1745:         # width, in inches of output figure (approximate)
1746:         self.width = width
1747:         self.margin = margin
1748: 
1749:     def HasPage(self, page):
1750:         # current only supports 1 page print
1751:         return page == 1
1752: 
1753:     def GetPageInfo(self):
1754:         return (1, 1, 1, 1)
1755: 
1756:     def OnPrintPage(self, page):
1757:         self.canvas.draw()
1758: 
1759:         dc = self.GetDC()
1760:         (ppw, pph) = self.GetPPIPrinter()      # printer's pixels per in
1761:         (pgw, pgh) = self.GetPageSizePixels()  # page size in pixels
1762:         (dcw, dch) = dc.GetSize()
1763:         if wxc.is_phoenix:
1764:             (grw, grh) = self.canvas.GetSize()
1765:         else:
1766:             (grw, grh) = self.canvas.GetSizeTuple()
1767: 
1768:         # save current figure dpi resolution and bg color,
1769:         # so that we can temporarily set them to the dpi of
1770:         # the printer, and the bg color to white
1771:         bgcolor = self.canvas.figure.get_facecolor()
1772:         fig_dpi = self.canvas.figure.dpi
1773: 
1774:         # draw the bitmap, scaled appropriately
1775:         vscale = float(ppw) / fig_dpi
1776: 
1777:         # set figure resolution,bg color for printer
1778:         self.canvas.figure.dpi = ppw
1779:         self.canvas.figure.set_facecolor('#FFFFFF')
1780: 
1781:         renderer = RendererWx(self.canvas.bitmap, self.canvas.figure.dpi)
1782:         self.canvas.figure.draw(renderer)
1783:         self.canvas.bitmap.SetWidth(
1784:             int(self.canvas.bitmap.GetWidth() * vscale))
1785:         self.canvas.bitmap.SetHeight(
1786:             int(self.canvas.bitmap.GetHeight() * vscale))
1787:         self.canvas.draw()
1788: 
1789:         # page may need additional scaling on preview
1790:         page_scale = 1.0
1791:         if self.IsPreview():
1792:             page_scale = float(dcw) / pgw
1793: 
1794:         # get margin in pixels = (margin in in) * (pixels/in)
1795:         top_margin = int(self.margin * pph * page_scale)
1796:         left_margin = int(self.margin * ppw * page_scale)
1797: 
1798:         # set scale so that width of output is self.width inches
1799:         # (assuming grw is size of graph in inches....)
1800:         user_scale = (self.width * fig_dpi * page_scale) / float(grw)
1801: 
1802:         dc.SetDeviceOrigin(left_margin, top_margin)
1803:         dc.SetUserScale(user_scale, user_scale)
1804: 
1805:         # this cute little number avoid API inconsistencies in wx
1806:         try:
1807:             dc.DrawBitmap(self.canvas.bitmap, 0, 0)
1808:         except:
1809:             try:
1810:                 dc.DrawBitmap(self.canvas.bitmap, (0, 0))
1811:             except:
1812:                 pass
1813: 
1814:         # restore original figure  resolution
1815:         self.canvas.figure.set_facecolor(bgcolor)
1816:         self.canvas.figure.dpi = fig_dpi
1817:         self.canvas.draw()
1818:         return True
1819: #>
1820: 
1821: ########################################################################
1822: #
1823: # Now just provide the standard names that backend.__init__ is expecting
1824: #
1825: ########################################################################
1826: 
1827: Toolbar = NavigationToolbar2Wx
1828: 
1829: 
1830: @_Backend.export
1831: class _BackendWx(_Backend):
1832:     FigureCanvas = FigureCanvasWx
1833:     FigureManager = FigureManagerWx
1834:     _frame_class = FigureFrameWx
1835: 
1836:     @staticmethod
1837:     def trigger_manager_draw(manager):
1838:         manager.canvas.draw_idle()
1839: 
1840:     @classmethod
1841:     def new_figure_manager(cls, num, *args, **kwargs):
1842:         # Create a wx.App instance if it has not been created sofar.
1843:         wxapp = wx.GetApp()
1844:         if wxapp is None:
1845:             wxapp = wx.App(False)
1846:             wxapp.SetExitOnFrameDelete(True)
1847:             # Retain a reference to the app object so that it does not get
1848:             # garbage collected.
1849:             _BackendWx._theWxApp = wxapp
1850:         return super(_BackendWx, cls).new_figure_manager(num, *args, **kwargs)
1851: 
1852:     @classmethod
1853:     def new_figure_manager_given_figure(cls, num, figure):
1854:         frame = cls._frame_class(num, figure)
1855:         figmgr = frame.get_figure_manager()
1856:         if matplotlib.is_interactive():
1857:             figmgr.frame.Show()
1858:             figure.canvas.draw_idle()
1859:         return figmgr
1860: 
1861:     @staticmethod
1862:     def mainloop():
1863:         if not wx.App.IsMainLoopRunning():
1864:             wxapp = wx.GetApp()
1865:             if wxapp is not None:
1866:                 wxapp.MainLoop()
1867: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_263098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 15, (-1)), 'unicode', u"\n A wxPython backend for matplotlib, based (very heavily) on\n backend_template.py and backend_gtk.py\n\n Author: Jeremy O'Donoghue (jeremy@o-donoghue.com)\n\n Derived from original copyright work by John Hunter\n (jdhunter@ace.bsd.uchicago.edu)\n\n Copyright (C) Jeremy O'Donoghue & John Hunter, 2003-4\n\n License: This work is licensed under a PSF compatible license. A copy\n should be included with this source code.\n\n")
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'from six.moves import xrange' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263099 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'six.moves')

if (type(import_263099) is not StypyTypeError):

    if (import_263099 != 'pyd_module'):
        __import__(import_263099)
        sys_modules_263100 = sys.modules[import_263099]
        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'six.moves', sys_modules_263100.module_type_store, module_type_store, ['xrange'])
        nest_module(stypy.reporting.localization.Localization(__file__, 19, 0), __file__, sys_modules_263100, sys_modules_263100.module_type_store, module_type_store)
    else:
        from six.moves import xrange

        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'six.moves', None, module_type_store, ['xrange'], [xrange])

else:
    # Assigning a type to the variable 'six.moves' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'six.moves', import_263099)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'import sys' statement (line 21)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 0))

# 'import os' statement (line 22)
import os

import_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'import os.path' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263101 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'os.path')

if (type(import_263101) is not StypyTypeError):

    if (import_263101 != 'pyd_module'):
        __import__(import_263101)
        sys_modules_263102 = sys.modules[import_263101]
        import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'os.path', sys_modules_263102.module_type_store, module_type_store)
    else:
        import os.path

        import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'os.path', os.path, module_type_store)

else:
    # Assigning a type to the variable 'os.path' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'os.path', import_263101)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'import math' statement (line 24)
import math

import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'math', math, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'import weakref' statement (line 25)
import weakref

import_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'weakref', weakref, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'import warnings' statement (line 26)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'import numpy' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263103 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy')

if (type(import_263103) is not StypyTypeError):

    if (import_263103 != 'pyd_module'):
        __import__(import_263103)
        sys_modules_263104 = sys.modules[import_263103]
        import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'np', sys_modules_263104.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy', import_263103)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'import matplotlib' statement (line 30)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263105 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib')

if (type(import_263105) is not StypyTypeError):

    if (import_263105 != 'pyd_module'):
        __import__(import_263105)
        sys_modules_263106 = sys.modules[import_263105]
        import_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib', sys_modules_263106.module_type_store, module_type_store)
    else:
        import matplotlib

        import_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib', matplotlib, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib' (line 30)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib', import_263105)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'from matplotlib.backend_bases import _Backend, FigureCanvasBase, FigureManagerBase, GraphicsContextBase, NavigationToolbar2, RendererBase, TimerBase, cursors' statement (line 31)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263107 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.backend_bases')

if (type(import_263107) is not StypyTypeError):

    if (import_263107 != 'pyd_module'):
        __import__(import_263107)
        sys_modules_263108 = sys.modules[import_263107]
        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.backend_bases', sys_modules_263108.module_type_store, module_type_store, ['_Backend', 'FigureCanvasBase', 'FigureManagerBase', 'GraphicsContextBase', 'NavigationToolbar2', 'RendererBase', 'TimerBase', 'cursors'])
        nest_module(stypy.reporting.localization.Localization(__file__, 31, 0), __file__, sys_modules_263108, sys_modules_263108.module_type_store, module_type_store)
    else:
        from matplotlib.backend_bases import _Backend, FigureCanvasBase, FigureManagerBase, GraphicsContextBase, NavigationToolbar2, RendererBase, TimerBase, cursors

        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.backend_bases', None, module_type_store, ['_Backend', 'FigureCanvasBase', 'FigureManagerBase', 'GraphicsContextBase', 'NavigationToolbar2', 'RendererBase', 'TimerBase', 'cursors'], [_Backend, FigureCanvasBase, FigureManagerBase, GraphicsContextBase, NavigationToolbar2, RendererBase, TimerBase, cursors])

else:
    # Assigning a type to the variable 'matplotlib.backend_bases' (line 31)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.backend_bases', import_263107)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 34, 0))

# 'from matplotlib.backend_bases import _has_pil' statement (line 34)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263109 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.backend_bases')

if (type(import_263109) is not StypyTypeError):

    if (import_263109 != 'pyd_module'):
        __import__(import_263109)
        sys_modules_263110 = sys.modules[import_263109]
        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.backend_bases', sys_modules_263110.module_type_store, module_type_store, ['_has_pil'])
        nest_module(stypy.reporting.localization.Localization(__file__, 34, 0), __file__, sys_modules_263110, sys_modules_263110.module_type_store, module_type_store)
    else:
        from matplotlib.backend_bases import _has_pil

        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.backend_bases', None, module_type_store, ['_has_pil'], [_has_pil])

else:
    # Assigning a type to the variable 'matplotlib.backend_bases' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.backend_bases', import_263109)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 36, 0))

# 'from matplotlib._pylab_helpers import Gcf' statement (line 36)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263111 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'matplotlib._pylab_helpers')

if (type(import_263111) is not StypyTypeError):

    if (import_263111 != 'pyd_module'):
        __import__(import_263111)
        sys_modules_263112 = sys.modules[import_263111]
        import_from_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'matplotlib._pylab_helpers', sys_modules_263112.module_type_store, module_type_store, ['Gcf'])
        nest_module(stypy.reporting.localization.Localization(__file__, 36, 0), __file__, sys_modules_263112, sys_modules_263112.module_type_store, module_type_store)
    else:
        from matplotlib._pylab_helpers import Gcf

        import_from_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'matplotlib._pylab_helpers', None, module_type_store, ['Gcf'], [Gcf])

else:
    # Assigning a type to the variable 'matplotlib._pylab_helpers' (line 36)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'matplotlib._pylab_helpers', import_263111)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 37, 0))

# 'from matplotlib.cbook import is_writable_file_like, warn_deprecated' statement (line 37)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263113 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.cbook')

if (type(import_263113) is not StypyTypeError):

    if (import_263113 != 'pyd_module'):
        __import__(import_263113)
        sys_modules_263114 = sys.modules[import_263113]
        import_from_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.cbook', sys_modules_263114.module_type_store, module_type_store, ['is_writable_file_like', 'warn_deprecated'])
        nest_module(stypy.reporting.localization.Localization(__file__, 37, 0), __file__, sys_modules_263114, sys_modules_263114.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import is_writable_file_like, warn_deprecated

        import_from_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.cbook', None, module_type_store, ['is_writable_file_like', 'warn_deprecated'], [is_writable_file_like, warn_deprecated])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 37)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.cbook', import_263113)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 38, 0))

# 'from matplotlib.figure import Figure' statement (line 38)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263115 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.figure')

if (type(import_263115) is not StypyTypeError):

    if (import_263115 != 'pyd_module'):
        __import__(import_263115)
        sys_modules_263116 = sys.modules[import_263115]
        import_from_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.figure', sys_modules_263116.module_type_store, module_type_store, ['Figure'])
        nest_module(stypy.reporting.localization.Localization(__file__, 38, 0), __file__, sys_modules_263116, sys_modules_263116.module_type_store, module_type_store)
    else:
        from matplotlib.figure import Figure

        import_from_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.figure', None, module_type_store, ['Figure'], [Figure])

else:
    # Assigning a type to the variable 'matplotlib.figure' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.figure', import_263115)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 39, 0))

# 'from matplotlib.path import Path' statement (line 39)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263117 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'matplotlib.path')

if (type(import_263117) is not StypyTypeError):

    if (import_263117 != 'pyd_module'):
        __import__(import_263117)
        sys_modules_263118 = sys.modules[import_263117]
        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'matplotlib.path', sys_modules_263118.module_type_store, module_type_store, ['Path'])
        nest_module(stypy.reporting.localization.Localization(__file__, 39, 0), __file__, sys_modules_263118, sys_modules_263118.module_type_store, module_type_store)
    else:
        from matplotlib.path import Path

        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'matplotlib.path', None, module_type_store, ['Path'], [Path])

else:
    # Assigning a type to the variable 'matplotlib.path' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'matplotlib.path', import_263117)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 40, 0))

# 'from matplotlib.transforms import Affine2D' statement (line 40)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263119 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.transforms')

if (type(import_263119) is not StypyTypeError):

    if (import_263119 != 'pyd_module'):
        __import__(import_263119)
        sys_modules_263120 = sys.modules[import_263119]
        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.transforms', sys_modules_263120.module_type_store, module_type_store, ['Affine2D'])
        nest_module(stypy.reporting.localization.Localization(__file__, 40, 0), __file__, sys_modules_263120, sys_modules_263120.module_type_store, module_type_store)
    else:
        from matplotlib.transforms import Affine2D

        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.transforms', None, module_type_store, ['Affine2D'], [Affine2D])

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.transforms', import_263119)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 41, 0))

# 'from matplotlib.widgets import SubplotTool' statement (line 41)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263121 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib.widgets')

if (type(import_263121) is not StypyTypeError):

    if (import_263121 != 'pyd_module'):
        __import__(import_263121)
        sys_modules_263122 = sys.modules[import_263121]
        import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib.widgets', sys_modules_263122.module_type_store, module_type_store, ['SubplotTool'])
        nest_module(stypy.reporting.localization.Localization(__file__, 41, 0), __file__, sys_modules_263122, sys_modules_263122.module_type_store, module_type_store)
    else:
        from matplotlib.widgets import SubplotTool

        import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib.widgets', None, module_type_store, ['SubplotTool'], [SubplotTool])

else:
    # Assigning a type to the variable 'matplotlib.widgets' (line 41)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib.widgets', import_263121)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 42, 0))

# 'from matplotlib import cbook, rcParams' statement (line 42)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263123 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib')

if (type(import_263123) is not StypyTypeError):

    if (import_263123 != 'pyd_module'):
        __import__(import_263123)
        sys_modules_263124 = sys.modules[import_263123]
        import_from_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib', sys_modules_263124.module_type_store, module_type_store, ['cbook', 'rcParams'])
        nest_module(stypy.reporting.localization.Localization(__file__, 42, 0), __file__, sys_modules_263124, sys_modules_263124.module_type_store, module_type_store)
    else:
        from matplotlib import cbook, rcParams

        import_from_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib', None, module_type_store, ['cbook', 'rcParams'], [cbook, rcParams])

else:
    # Assigning a type to the variable 'matplotlib' (line 42)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib', import_263123)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 44, 0))

# 'from matplotlib.backends import wxc' statement (line 44)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263125 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.backends')

if (type(import_263125) is not StypyTypeError):

    if (import_263125 != 'pyd_module'):
        __import__(import_263125)
        sys_modules_263126 = sys.modules[import_263125]
        import_from_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.backends', sys_modules_263126.module_type_store, module_type_store, ['wx_compat'])
        nest_module(stypy.reporting.localization.Localization(__file__, 44, 0), __file__, sys_modules_263126, sys_modules_263126.module_type_store, module_type_store)
    else:
        from matplotlib.backends import wx_compat as wxc

        import_from_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.backends', None, module_type_store, ['wx_compat'], [wxc])

else:
    # Assigning a type to the variable 'matplotlib.backends' (line 44)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.backends', import_263125)

# Adding an alias
module_type_store.add_alias('wxc', 'wx_compat')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 45, 0))

# 'import wx' statement (line 45)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/backends/')
import_263127 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 45, 0), 'wx')

if (type(import_263127) is not StypyTypeError):

    if (import_263127 != 'pyd_module'):
        __import__(import_263127)
        sys_modules_263128 = sys.modules[import_263127]
        import_module(stypy.reporting.localization.Localization(__file__, 45, 0), 'wx', sys_modules_263128.module_type_store, module_type_store)
    else:
        import wx

        import_module(stypy.reporting.localization.Localization(__file__, 45, 0), 'wx', wx, module_type_store)

else:
    # Assigning a type to the variable 'wx' (line 45)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 45, 0), 'wx', import_263127)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/backends/')


# Assigning a Num to a Name (line 52):

# Assigning a Num to a Name (line 52):
int_263129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 9), 'int')
# Assigning a type to the variable '_DEBUG' (line 52)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 0), '_DEBUG', int_263129)


# Getting the type of '_DEBUG' (line 53)
_DEBUG_263130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 3), '_DEBUG')
int_263131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 12), 'int')
# Applying the binary operator '<' (line 53)
result_lt_263132 = python_operator(stypy.reporting.localization.Localization(__file__, 53, 3), '<', _DEBUG_263130, int_263131)

# Testing the type of an if condition (line 53)
if_condition_263133 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 53, 0), result_lt_263132)
# Assigning a type to the variable 'if_condition_263133' (line 53)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 0), 'if_condition_263133', if_condition_263133)
# SSA begins for if statement (line 53)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 54, 4))

# 'import traceback' statement (line 54)
import traceback

import_module(stypy.reporting.localization.Localization(__file__, 54, 4), 'traceback', traceback, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 55, 4))

# 'import pdb' statement (line 55)
import pdb

import_module(stypy.reporting.localization.Localization(__file__, 55, 4), 'pdb', pdb, module_type_store)

# SSA join for if statement (line 53)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Dict to a Name (line 56):

# Assigning a Dict to a Name (line 56):

# Obtaining an instance of the builtin type 'dict' (line 56)
dict_263134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 14), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 56)
# Adding element type (key, value) (line 56)
int_263135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 15), 'int')
unicode_263136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 18), 'unicode', u'Low ')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 56, 14), dict_263134, (int_263135, unicode_263136))
# Adding element type (key, value) (line 56)
int_263137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 26), 'int')
unicode_263138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 29), 'unicode', u'Med ')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 56, 14), dict_263134, (int_263137, unicode_263138))
# Adding element type (key, value) (line 56)
int_263139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 37), 'int')
unicode_263140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 40), 'unicode', u'High')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 56, 14), dict_263134, (int_263139, unicode_263140))
# Adding element type (key, value) (line 56)
int_263141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 48), 'int')
unicode_263142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 51), 'unicode', u'Error')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 56, 14), dict_263134, (int_263141, unicode_263142))

# Assigning a type to the variable '_DEBUG_lvls' (line 56)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 0), '_DEBUG_lvls', dict_263134)

@norecursion
def DEBUG_MSG(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_263143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 26), 'int')
    # Getting the type of 'None' (line 59)
    None_263144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 31), 'None')
    defaults = [int_263143, None_263144]
    # Create a new context for function 'DEBUG_MSG'
    module_type_store = module_type_store.open_function_context('DEBUG_MSG', 59, 0, False)
    
    # Passed parameters checking function
    DEBUG_MSG.stypy_localization = localization
    DEBUG_MSG.stypy_type_of_self = None
    DEBUG_MSG.stypy_type_store = module_type_store
    DEBUG_MSG.stypy_function_name = 'DEBUG_MSG'
    DEBUG_MSG.stypy_param_names_list = ['string', 'lvl', 'o']
    DEBUG_MSG.stypy_varargs_param_name = None
    DEBUG_MSG.stypy_kwargs_param_name = None
    DEBUG_MSG.stypy_call_defaults = defaults
    DEBUG_MSG.stypy_call_varargs = varargs
    DEBUG_MSG.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'DEBUG_MSG', ['string', 'lvl', 'o'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'DEBUG_MSG', localization, ['string', 'lvl', 'o'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'DEBUG_MSG(...)' code ##################

    
    
    # Getting the type of 'lvl' (line 60)
    lvl_263145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 7), 'lvl')
    # Getting the type of '_DEBUG' (line 60)
    _DEBUG_263146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 14), '_DEBUG')
    # Applying the binary operator '>=' (line 60)
    result_ge_263147 = python_operator(stypy.reporting.localization.Localization(__file__, 60, 7), '>=', lvl_263145, _DEBUG_263146)
    
    # Testing the type of an if condition (line 60)
    if_condition_263148 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 60, 4), result_ge_263147)
    # Assigning a type to the variable 'if_condition_263148' (line 60)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 4), 'if_condition_263148', if_condition_263148)
    # SSA begins for if statement (line 60)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 61):
    
    # Assigning a Attribute to a Name (line 61):
    # Getting the type of 'o' (line 61)
    o_263149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 61, 14), 'o')
    # Obtaining the member '__class__' of a type (line 61)
    class___263150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 61, 14), o_263149, '__class__')
    # Assigning a type to the variable 'cls' (line 61)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 61, 8), 'cls', class___263150)
    
    # Call to print(...): (line 66)
    # Processing the call arguments (line 66)
    unicode_263152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 66, 14), 'unicode', u'%s- %s in %s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 66)
    tuple_263153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 66, 32), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 66)
    # Adding element type (line 66)
    
    # Obtaining the type of the subscript
    # Getting the type of 'lvl' (line 66)
    lvl_263154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 44), 'lvl', False)
    # Getting the type of '_DEBUG_lvls' (line 66)
    _DEBUG_lvls_263155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 32), '_DEBUG_lvls', False)
    # Obtaining the member '__getitem__' of a type (line 66)
    getitem___263156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 66, 32), _DEBUG_lvls_263155, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 66)
    subscript_call_result_263157 = invoke(stypy.reporting.localization.Localization(__file__, 66, 32), getitem___263156, lvl_263154)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 66, 32), tuple_263153, subscript_call_result_263157)
    # Adding element type (line 66)
    # Getting the type of 'string' (line 66)
    string_263158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 50), 'string', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 66, 32), tuple_263153, string_263158)
    # Adding element type (line 66)
    # Getting the type of 'cls' (line 66)
    cls_263159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 58), 'cls', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 66, 32), tuple_263153, cls_263159)
    
    # Applying the binary operator '%' (line 66)
    result_mod_263160 = python_operator(stypy.reporting.localization.Localization(__file__, 66, 14), '%', unicode_263152, tuple_263153)
    
    # Processing the call keyword arguments (line 66)
    kwargs_263161 = {}
    # Getting the type of 'print' (line 66)
    print_263151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 8), 'print', False)
    # Calling print(args, kwargs) (line 66)
    print_call_result_263162 = invoke(stypy.reporting.localization.Localization(__file__, 66, 8), print_263151, *[result_mod_263160], **kwargs_263161)
    
    # SSA join for if statement (line 60)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'DEBUG_MSG(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'DEBUG_MSG' in the type store
    # Getting the type of 'stypy_return_type' (line 59)
    stypy_return_type_263163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_263163)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'DEBUG_MSG'
    return stypy_return_type_263163

# Assigning a type to the variable 'DEBUG_MSG' (line 59)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 59, 0), 'DEBUG_MSG', DEBUG_MSG)

@norecursion
def debug_on_error(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'debug_on_error'
    module_type_store = module_type_store.open_function_context('debug_on_error', 69, 0, False)
    
    # Passed parameters checking function
    debug_on_error.stypy_localization = localization
    debug_on_error.stypy_type_of_self = None
    debug_on_error.stypy_type_store = module_type_store
    debug_on_error.stypy_function_name = 'debug_on_error'
    debug_on_error.stypy_param_names_list = ['type', 'value', 'tb']
    debug_on_error.stypy_varargs_param_name = None
    debug_on_error.stypy_kwargs_param_name = None
    debug_on_error.stypy_call_defaults = defaults
    debug_on_error.stypy_call_varargs = varargs
    debug_on_error.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'debug_on_error', ['type', 'value', 'tb'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'debug_on_error', localization, ['type', 'value', 'tb'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'debug_on_error(...)' code ##################

    unicode_263164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 70, 4), 'unicode', u"Code due to Thomas Heller - published in Python Cookbook (O'Reilley)")
    
    # Call to print_exception(...): (line 71)
    # Processing the call arguments (line 71)
    # Getting the type of 'type' (line 71)
    type_263167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 30), 'type', False)
    # Getting the type of 'value' (line 71)
    value_263168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 36), 'value', False)
    # Getting the type of 'tb' (line 71)
    tb_263169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 43), 'tb', False)
    # Processing the call keyword arguments (line 71)
    kwargs_263170 = {}
    # Getting the type of 'traceback' (line 71)
    traceback_263165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 4), 'traceback', False)
    # Obtaining the member 'print_exception' of a type (line 71)
    print_exception_263166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 4), traceback_263165, 'print_exception')
    # Calling print_exception(args, kwargs) (line 71)
    print_exception_call_result_263171 = invoke(stypy.reporting.localization.Localization(__file__, 71, 4), print_exception_263166, *[type_263167, value_263168, tb_263169], **kwargs_263170)
    
    
    # Call to print(...): (line 72)
    # Processing the call keyword arguments (line 72)
    kwargs_263173 = {}
    # Getting the type of 'print' (line 72)
    print_263172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 4), 'print', False)
    # Calling print(args, kwargs) (line 72)
    print_call_result_263174 = invoke(stypy.reporting.localization.Localization(__file__, 72, 4), print_263172, *[], **kwargs_263173)
    
    
    # Call to pm(...): (line 73)
    # Processing the call keyword arguments (line 73)
    kwargs_263177 = {}
    # Getting the type of 'pdb' (line 73)
    pdb_263175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 4), 'pdb', False)
    # Obtaining the member 'pm' of a type (line 73)
    pm_263176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 73, 4), pdb_263175, 'pm')
    # Calling pm(args, kwargs) (line 73)
    pm_call_result_263178 = invoke(stypy.reporting.localization.Localization(__file__, 73, 4), pm_263176, *[], **kwargs_263177)
    
    
    # ################# End of 'debug_on_error(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'debug_on_error' in the type store
    # Getting the type of 'stypy_return_type' (line 69)
    stypy_return_type_263179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_263179)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'debug_on_error'
    return stypy_return_type_263179

# Assigning a type to the variable 'debug_on_error' (line 69)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 0), 'debug_on_error', debug_on_error)
# Declaration of the 'fake_stderr' class

class fake_stderr(object, ):
    unicode_263180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, (-1)), 'unicode', u'\n    Wx does strange things with stderr, as it makes the assumption that\n    there is probably no console. This redirects stderr to the console, since\n    we know that there is one!\n    ')

    @norecursion
    def write(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'write'
        module_type_store = module_type_store.open_function_context('write', 83, 4, False)
        # Assigning a type to the variable 'self' (line 84)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        fake_stderr.write.__dict__.__setitem__('stypy_localization', localization)
        fake_stderr.write.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        fake_stderr.write.__dict__.__setitem__('stypy_type_store', module_type_store)
        fake_stderr.write.__dict__.__setitem__('stypy_function_name', 'fake_stderr.write')
        fake_stderr.write.__dict__.__setitem__('stypy_param_names_list', ['msg'])
        fake_stderr.write.__dict__.__setitem__('stypy_varargs_param_name', None)
        fake_stderr.write.__dict__.__setitem__('stypy_kwargs_param_name', None)
        fake_stderr.write.__dict__.__setitem__('stypy_call_defaults', defaults)
        fake_stderr.write.__dict__.__setitem__('stypy_call_varargs', varargs)
        fake_stderr.write.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        fake_stderr.write.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'fake_stderr.write', ['msg'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'write', localization, ['msg'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'write(...)' code ##################

        
        # Call to print(...): (line 84)
        # Processing the call arguments (line 84)
        unicode_263182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 14), 'unicode', u'Stderr: %s\n\r')
        # Getting the type of 'msg' (line 84)
        msg_263183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 33), 'msg', False)
        # Applying the binary operator '%' (line 84)
        result_mod_263184 = python_operator(stypy.reporting.localization.Localization(__file__, 84, 14), '%', unicode_263182, msg_263183)
        
        # Processing the call keyword arguments (line 84)
        kwargs_263185 = {}
        # Getting the type of 'print' (line 84)
        print_263181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 8), 'print', False)
        # Calling print(args, kwargs) (line 84)
        print_call_result_263186 = invoke(stypy.reporting.localization.Localization(__file__, 84, 8), print_263181, *[result_mod_263184], **kwargs_263185)
        
        
        # ################# End of 'write(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'write' in the type store
        # Getting the type of 'stypy_return_type' (line 83)
        stypy_return_type_263187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263187)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'write'
        return stypy_return_type_263187


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 76, 0, False)
        # Assigning a type to the variable 'self' (line 77)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'fake_stderr.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'fake_stderr' (line 76)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 0), 'fake_stderr', fake_stderr)

# Assigning a Num to a Name (line 95):

# Assigning a Num to a Name (line 95):
int_263188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 18), 'int')
# Assigning a type to the variable 'PIXELS_PER_INCH' (line 95)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 0), 'PIXELS_PER_INCH', int_263188)

# Assigning a Num to a Name (line 98):

# Assigning a Num to a Name (line 98):
int_263189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 13), 'int')
# Assigning a type to the variable 'IDLE_DELAY' (line 98)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 0), 'IDLE_DELAY', int_263189)

@norecursion
def error_msg_wx(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 101)
    None_263190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 29), 'None')
    defaults = [None_263190]
    # Create a new context for function 'error_msg_wx'
    module_type_store = module_type_store.open_function_context('error_msg_wx', 101, 0, False)
    
    # Passed parameters checking function
    error_msg_wx.stypy_localization = localization
    error_msg_wx.stypy_type_of_self = None
    error_msg_wx.stypy_type_store = module_type_store
    error_msg_wx.stypy_function_name = 'error_msg_wx'
    error_msg_wx.stypy_param_names_list = ['msg', 'parent']
    error_msg_wx.stypy_varargs_param_name = None
    error_msg_wx.stypy_kwargs_param_name = None
    error_msg_wx.stypy_call_defaults = defaults
    error_msg_wx.stypy_call_varargs = varargs
    error_msg_wx.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'error_msg_wx', ['msg', 'parent'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'error_msg_wx', localization, ['msg', 'parent'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'error_msg_wx(...)' code ##################

    unicode_263191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, (-1)), 'unicode', u'\n    Signal an error condition -- in a GUI, popup a error dialog\n    ')
    
    # Assigning a Call to a Name (line 105):
    
    # Assigning a Call to a Name (line 105):
    
    # Call to MessageDialog(...): (line 105)
    # Processing the call keyword arguments (line 105)
    # Getting the type of 'parent' (line 105)
    parent_263194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 37), 'parent', False)
    keyword_263195 = parent_263194
    # Getting the type of 'msg' (line 106)
    msg_263196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 38), 'msg', False)
    keyword_263197 = msg_263196
    unicode_263198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 38), 'unicode', u'Matplotlib backend_wx error')
    keyword_263199 = unicode_263198
    # Getting the type of 'wx' (line 108)
    wx_263200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 36), 'wx', False)
    # Obtaining the member 'OK' of a type (line 108)
    OK_263201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 36), wx_263200, 'OK')
    # Getting the type of 'wx' (line 108)
    wx_263202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 44), 'wx', False)
    # Obtaining the member 'CENTRE' of a type (line 108)
    CENTRE_263203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 44), wx_263202, 'CENTRE')
    # Applying the binary operator '|' (line 108)
    result_or__263204 = python_operator(stypy.reporting.localization.Localization(__file__, 108, 36), '|', OK_263201, CENTRE_263203)
    
    keyword_263205 = result_or__263204
    kwargs_263206 = {'caption': keyword_263199, 'message': keyword_263197, 'style': keyword_263205, 'parent': keyword_263195}
    # Getting the type of 'wx' (line 105)
    wx_263192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 13), 'wx', False)
    # Obtaining the member 'MessageDialog' of a type (line 105)
    MessageDialog_263193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 13), wx_263192, 'MessageDialog')
    # Calling MessageDialog(args, kwargs) (line 105)
    MessageDialog_call_result_263207 = invoke(stypy.reporting.localization.Localization(__file__, 105, 13), MessageDialog_263193, *[], **kwargs_263206)
    
    # Assigning a type to the variable 'dialog' (line 105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 4), 'dialog', MessageDialog_call_result_263207)
    
    # Call to ShowModal(...): (line 109)
    # Processing the call keyword arguments (line 109)
    kwargs_263210 = {}
    # Getting the type of 'dialog' (line 109)
    dialog_263208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 4), 'dialog', False)
    # Obtaining the member 'ShowModal' of a type (line 109)
    ShowModal_263209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 4), dialog_263208, 'ShowModal')
    # Calling ShowModal(args, kwargs) (line 109)
    ShowModal_call_result_263211 = invoke(stypy.reporting.localization.Localization(__file__, 109, 4), ShowModal_263209, *[], **kwargs_263210)
    
    
    # Call to Destroy(...): (line 110)
    # Processing the call keyword arguments (line 110)
    kwargs_263214 = {}
    # Getting the type of 'dialog' (line 110)
    dialog_263212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 4), 'dialog', False)
    # Obtaining the member 'Destroy' of a type (line 110)
    Destroy_263213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 110, 4), dialog_263212, 'Destroy')
    # Calling Destroy(args, kwargs) (line 110)
    Destroy_call_result_263215 = invoke(stypy.reporting.localization.Localization(__file__, 110, 4), Destroy_263213, *[], **kwargs_263214)
    
    # Getting the type of 'None' (line 111)
    None_263216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 11), 'None')
    # Assigning a type to the variable 'stypy_return_type' (line 111)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 111, 4), 'stypy_return_type', None_263216)
    
    # ################# End of 'error_msg_wx(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'error_msg_wx' in the type store
    # Getting the type of 'stypy_return_type' (line 101)
    stypy_return_type_263217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_263217)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'error_msg_wx'
    return stypy_return_type_263217

# Assigning a type to the variable 'error_msg_wx' (line 101)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 0), 'error_msg_wx', error_msg_wx)

@norecursion
def raise_msg_to_str(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'raise_msg_to_str'
    module_type_store = module_type_store.open_function_context('raise_msg_to_str', 114, 0, False)
    
    # Passed parameters checking function
    raise_msg_to_str.stypy_localization = localization
    raise_msg_to_str.stypy_type_of_self = None
    raise_msg_to_str.stypy_type_store = module_type_store
    raise_msg_to_str.stypy_function_name = 'raise_msg_to_str'
    raise_msg_to_str.stypy_param_names_list = ['msg']
    raise_msg_to_str.stypy_varargs_param_name = None
    raise_msg_to_str.stypy_kwargs_param_name = None
    raise_msg_to_str.stypy_call_defaults = defaults
    raise_msg_to_str.stypy_call_varargs = varargs
    raise_msg_to_str.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'raise_msg_to_str', ['msg'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'raise_msg_to_str', localization, ['msg'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'raise_msg_to_str(...)' code ##################

    unicode_263218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 4), 'unicode', u'msg is a return arg from a raise.  Join with new lines')
    
    
    
    # Call to isinstance(...): (line 116)
    # Processing the call arguments (line 116)
    # Getting the type of 'msg' (line 116)
    msg_263220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 22), 'msg', False)
    # Getting the type of 'six' (line 116)
    six_263221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 27), 'six', False)
    # Obtaining the member 'string_types' of a type (line 116)
    string_types_263222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 116, 27), six_263221, 'string_types')
    # Processing the call keyword arguments (line 116)
    kwargs_263223 = {}
    # Getting the type of 'isinstance' (line 116)
    isinstance_263219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 116)
    isinstance_call_result_263224 = invoke(stypy.reporting.localization.Localization(__file__, 116, 11), isinstance_263219, *[msg_263220, string_types_263222], **kwargs_263223)
    
    # Applying the 'not' unary operator (line 116)
    result_not__263225 = python_operator(stypy.reporting.localization.Localization(__file__, 116, 7), 'not', isinstance_call_result_263224)
    
    # Testing the type of an if condition (line 116)
    if_condition_263226 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 116, 4), result_not__263225)
    # Assigning a type to the variable 'if_condition_263226' (line 116)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 4), 'if_condition_263226', if_condition_263226)
    # SSA begins for if statement (line 116)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 117):
    
    # Assigning a Call to a Name (line 117):
    
    # Call to join(...): (line 117)
    # Processing the call arguments (line 117)
    
    # Call to map(...): (line 117)
    # Processing the call arguments (line 117)
    # Getting the type of 'str' (line 117)
    str_263230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 28), 'str', False)
    # Getting the type of 'msg' (line 117)
    msg_263231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 33), 'msg', False)
    # Processing the call keyword arguments (line 117)
    kwargs_263232 = {}
    # Getting the type of 'map' (line 117)
    map_263229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 24), 'map', False)
    # Calling map(args, kwargs) (line 117)
    map_call_result_263233 = invoke(stypy.reporting.localization.Localization(__file__, 117, 24), map_263229, *[str_263230, msg_263231], **kwargs_263232)
    
    # Processing the call keyword arguments (line 117)
    kwargs_263234 = {}
    unicode_263227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 14), 'unicode', u'\n')
    # Obtaining the member 'join' of a type (line 117)
    join_263228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 117, 14), unicode_263227, 'join')
    # Calling join(args, kwargs) (line 117)
    join_call_result_263235 = invoke(stypy.reporting.localization.Localization(__file__, 117, 14), join_263228, *[map_call_result_263233], **kwargs_263234)
    
    # Assigning a type to the variable 'msg' (line 117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 8), 'msg', join_call_result_263235)
    # SSA join for if statement (line 116)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'msg' (line 118)
    msg_263236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 11), 'msg')
    # Assigning a type to the variable 'stypy_return_type' (line 118)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 118, 4), 'stypy_return_type', msg_263236)
    
    # ################# End of 'raise_msg_to_str(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'raise_msg_to_str' in the type store
    # Getting the type of 'stypy_return_type' (line 114)
    stypy_return_type_263237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_263237)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'raise_msg_to_str'
    return stypy_return_type_263237

# Assigning a type to the variable 'raise_msg_to_str' (line 114)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 0), 'raise_msg_to_str', raise_msg_to_str)
# Declaration of the 'TimerWx' class
# Getting the type of 'TimerBase' (line 121)
TimerBase_263238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 14), 'TimerBase')

class TimerWx(TimerBase_263238, ):
    unicode_263239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 137, (-1)), 'unicode', u'\n    Subclass of :class:`backend_bases.TimerBase` that uses WxTimer events.\n\n    Attributes\n    ----------\n    interval : int\n        The time between timer events in milliseconds. Default is 1000 ms.\n    single_shot : bool\n        Boolean flag indicating whether this timer should operate as single\n        shot (run once and then stop). Defaults to False.\n    callbacks : list\n        Stores list of (func, args) tuples that will be called upon timer\n        events. This list can be manipulated directly, or the functions\n        `add_callback` and `remove_callback` can be used.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 139, 4, False)
        # Assigning a type to the variable 'self' (line 140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 140, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerWx.__init__', ['parent'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['parent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 140)
        # Processing the call arguments (line 140)
        # Getting the type of 'self' (line 140)
        self_263242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 27), 'self', False)
        # Getting the type of 'args' (line 140)
        args_263243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 34), 'args', False)
        # Processing the call keyword arguments (line 140)
        # Getting the type of 'kwargs' (line 140)
        kwargs_263244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 42), 'kwargs', False)
        kwargs_263245 = {'kwargs_263244': kwargs_263244}
        # Getting the type of 'TimerBase' (line 140)
        TimerBase_263240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 8), 'TimerBase', False)
        # Obtaining the member '__init__' of a type (line 140)
        init___263241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 140, 8), TimerBase_263240, '__init__')
        # Calling __init__(args, kwargs) (line 140)
        init___call_result_263246 = invoke(stypy.reporting.localization.Localization(__file__, 140, 8), init___263241, *[self_263242, args_263243], **kwargs_263245)
        
        
        # Assigning a Name to a Attribute (line 144):
        
        # Assigning a Name to a Attribute (line 144):
        # Getting the type of 'parent' (line 144)
        parent_263247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 22), 'parent')
        # Getting the type of 'self' (line 144)
        self_263248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 8), 'self')
        # Setting the type of the member 'parent' of a type (line 144)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 8), self_263248, 'parent', parent_263247)
        
        # Assigning a Call to a Attribute (line 145):
        
        # Assigning a Call to a Attribute (line 145):
        
        # Call to Timer(...): (line 145)
        # Processing the call arguments (line 145)
        # Getting the type of 'self' (line 145)
        self_263251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 31), 'self', False)
        # Obtaining the member 'parent' of a type (line 145)
        parent_263252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 31), self_263251, 'parent')
        
        # Call to NewId(...): (line 145)
        # Processing the call keyword arguments (line 145)
        kwargs_263255 = {}
        # Getting the type of 'wx' (line 145)
        wx_263253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 44), 'wx', False)
        # Obtaining the member 'NewId' of a type (line 145)
        NewId_263254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 44), wx_263253, 'NewId')
        # Calling NewId(args, kwargs) (line 145)
        NewId_call_result_263256 = invoke(stypy.reporting.localization.Localization(__file__, 145, 44), NewId_263254, *[], **kwargs_263255)
        
        # Processing the call keyword arguments (line 145)
        kwargs_263257 = {}
        # Getting the type of 'wx' (line 145)
        wx_263249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 22), 'wx', False)
        # Obtaining the member 'Timer' of a type (line 145)
        Timer_263250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 22), wx_263249, 'Timer')
        # Calling Timer(args, kwargs) (line 145)
        Timer_call_result_263258 = invoke(stypy.reporting.localization.Localization(__file__, 145, 22), Timer_263250, *[parent_263252, NewId_call_result_263256], **kwargs_263257)
        
        # Getting the type of 'self' (line 145)
        self_263259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 8), 'self')
        # Setting the type of the member '_timer' of a type (line 145)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 8), self_263259, '_timer', Timer_call_result_263258)
        
        # Call to Bind(...): (line 146)
        # Processing the call arguments (line 146)
        # Getting the type of 'wx' (line 146)
        wx_263263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 25), 'wx', False)
        # Obtaining the member 'EVT_TIMER' of a type (line 146)
        EVT_TIMER_263264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 25), wx_263263, 'EVT_TIMER')
        # Getting the type of 'self' (line 146)
        self_263265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 39), 'self', False)
        # Obtaining the member '_on_timer' of a type (line 146)
        _on_timer_263266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 39), self_263265, '_on_timer')
        # Getting the type of 'self' (line 146)
        self_263267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 55), 'self', False)
        # Obtaining the member '_timer' of a type (line 146)
        _timer_263268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 55), self_263267, '_timer')
        # Processing the call keyword arguments (line 146)
        kwargs_263269 = {}
        # Getting the type of 'self' (line 146)
        self_263260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 8), 'self', False)
        # Obtaining the member 'parent' of a type (line 146)
        parent_263261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 8), self_263260, 'parent')
        # Obtaining the member 'Bind' of a type (line 146)
        Bind_263262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 8), parent_263261, 'Bind')
        # Calling Bind(args, kwargs) (line 146)
        Bind_call_result_263270 = invoke(stypy.reporting.localization.Localization(__file__, 146, 8), Bind_263262, *[EVT_TIMER_263264, _on_timer_263266, _timer_263268], **kwargs_263269)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _timer_start(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_timer_start'
        module_type_store = module_type_store.open_function_context('_timer_start', 153, 4, False)
        # Assigning a type to the variable 'self' (line 154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerWx._timer_start.__dict__.__setitem__('stypy_localization', localization)
        TimerWx._timer_start.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerWx._timer_start.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerWx._timer_start.__dict__.__setitem__('stypy_function_name', 'TimerWx._timer_start')
        TimerWx._timer_start.__dict__.__setitem__('stypy_param_names_list', [])
        TimerWx._timer_start.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerWx._timer_start.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerWx._timer_start.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerWx._timer_start.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerWx._timer_start.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerWx._timer_start.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerWx._timer_start', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_timer_start', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_timer_start(...)' code ##################

        
        # Call to Start(...): (line 154)
        # Processing the call arguments (line 154)
        # Getting the type of 'self' (line 154)
        self_263274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 26), 'self', False)
        # Obtaining the member '_interval' of a type (line 154)
        _interval_263275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 26), self_263274, '_interval')
        # Getting the type of 'self' (line 154)
        self_263276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 42), 'self', False)
        # Obtaining the member '_single' of a type (line 154)
        _single_263277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 42), self_263276, '_single')
        # Processing the call keyword arguments (line 154)
        kwargs_263278 = {}
        # Getting the type of 'self' (line 154)
        self_263271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 8), 'self', False)
        # Obtaining the member '_timer' of a type (line 154)
        _timer_263272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 8), self_263271, '_timer')
        # Obtaining the member 'Start' of a type (line 154)
        Start_263273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 8), _timer_263272, 'Start')
        # Calling Start(args, kwargs) (line 154)
        Start_call_result_263279 = invoke(stypy.reporting.localization.Localization(__file__, 154, 8), Start_263273, *[_interval_263275, _single_263277], **kwargs_263278)
        
        
        # ################# End of '_timer_start(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_timer_start' in the type store
        # Getting the type of 'stypy_return_type' (line 153)
        stypy_return_type_263280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263280)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_timer_start'
        return stypy_return_type_263280


    @norecursion
    def _timer_stop(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_timer_stop'
        module_type_store = module_type_store.open_function_context('_timer_stop', 156, 4, False)
        # Assigning a type to the variable 'self' (line 157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerWx._timer_stop.__dict__.__setitem__('stypy_localization', localization)
        TimerWx._timer_stop.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerWx._timer_stop.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerWx._timer_stop.__dict__.__setitem__('stypy_function_name', 'TimerWx._timer_stop')
        TimerWx._timer_stop.__dict__.__setitem__('stypy_param_names_list', [])
        TimerWx._timer_stop.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerWx._timer_stop.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerWx._timer_stop.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerWx._timer_stop.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerWx._timer_stop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerWx._timer_stop.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerWx._timer_stop', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_timer_stop', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_timer_stop(...)' code ##################

        
        # Call to Stop(...): (line 157)
        # Processing the call keyword arguments (line 157)
        kwargs_263284 = {}
        # Getting the type of 'self' (line 157)
        self_263281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 8), 'self', False)
        # Obtaining the member '_timer' of a type (line 157)
        _timer_263282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 8), self_263281, '_timer')
        # Obtaining the member 'Stop' of a type (line 157)
        Stop_263283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 8), _timer_263282, 'Stop')
        # Calling Stop(args, kwargs) (line 157)
        Stop_call_result_263285 = invoke(stypy.reporting.localization.Localization(__file__, 157, 8), Stop_263283, *[], **kwargs_263284)
        
        
        # ################# End of '_timer_stop(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_timer_stop' in the type store
        # Getting the type of 'stypy_return_type' (line 156)
        stypy_return_type_263286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263286)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_timer_stop'
        return stypy_return_type_263286


    @norecursion
    def _timer_set_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_timer_set_interval'
        module_type_store = module_type_store.open_function_context('_timer_set_interval', 159, 4, False)
        # Assigning a type to the variable 'self' (line 160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerWx._timer_set_interval.__dict__.__setitem__('stypy_localization', localization)
        TimerWx._timer_set_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerWx._timer_set_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerWx._timer_set_interval.__dict__.__setitem__('stypy_function_name', 'TimerWx._timer_set_interval')
        TimerWx._timer_set_interval.__dict__.__setitem__('stypy_param_names_list', [])
        TimerWx._timer_set_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerWx._timer_set_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerWx._timer_set_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerWx._timer_set_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerWx._timer_set_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerWx._timer_set_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerWx._timer_set_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_timer_set_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_timer_set_interval(...)' code ##################

        
        # Call to _timer_start(...): (line 160)
        # Processing the call keyword arguments (line 160)
        kwargs_263289 = {}
        # Getting the type of 'self' (line 160)
        self_263287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 8), 'self', False)
        # Obtaining the member '_timer_start' of a type (line 160)
        _timer_start_263288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 160, 8), self_263287, '_timer_start')
        # Calling _timer_start(args, kwargs) (line 160)
        _timer_start_call_result_263290 = invoke(stypy.reporting.localization.Localization(__file__, 160, 8), _timer_start_263288, *[], **kwargs_263289)
        
        
        # ################# End of '_timer_set_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_timer_set_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 159)
        stypy_return_type_263291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263291)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_timer_set_interval'
        return stypy_return_type_263291


    @norecursion
    def _timer_set_single_shot(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_timer_set_single_shot'
        module_type_store = module_type_store.open_function_context('_timer_set_single_shot', 162, 4, False)
        # Assigning a type to the variable 'self' (line 163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerWx._timer_set_single_shot.__dict__.__setitem__('stypy_localization', localization)
        TimerWx._timer_set_single_shot.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerWx._timer_set_single_shot.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerWx._timer_set_single_shot.__dict__.__setitem__('stypy_function_name', 'TimerWx._timer_set_single_shot')
        TimerWx._timer_set_single_shot.__dict__.__setitem__('stypy_param_names_list', [])
        TimerWx._timer_set_single_shot.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerWx._timer_set_single_shot.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerWx._timer_set_single_shot.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerWx._timer_set_single_shot.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerWx._timer_set_single_shot.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerWx._timer_set_single_shot.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerWx._timer_set_single_shot', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_timer_set_single_shot', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_timer_set_single_shot(...)' code ##################

        
        # Call to Start(...): (line 163)
        # Processing the call keyword arguments (line 163)
        kwargs_263295 = {}
        # Getting the type of 'self' (line 163)
        self_263292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 8), 'self', False)
        # Obtaining the member '_timer' of a type (line 163)
        _timer_263293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 163, 8), self_263292, '_timer')
        # Obtaining the member 'Start' of a type (line 163)
        Start_263294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 163, 8), _timer_263293, 'Start')
        # Calling Start(args, kwargs) (line 163)
        Start_call_result_263296 = invoke(stypy.reporting.localization.Localization(__file__, 163, 8), Start_263294, *[], **kwargs_263295)
        
        
        # ################# End of '_timer_set_single_shot(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_timer_set_single_shot' in the type store
        # Getting the type of 'stypy_return_type' (line 162)
        stypy_return_type_263297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263297)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_timer_set_single_shot'
        return stypy_return_type_263297


    @norecursion
    def _on_timer(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_on_timer'
        module_type_store = module_type_store.open_function_context('_on_timer', 165, 4, False)
        # Assigning a type to the variable 'self' (line 166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 166, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerWx._on_timer.__dict__.__setitem__('stypy_localization', localization)
        TimerWx._on_timer.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerWx._on_timer.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerWx._on_timer.__dict__.__setitem__('stypy_function_name', 'TimerWx._on_timer')
        TimerWx._on_timer.__dict__.__setitem__('stypy_param_names_list', [])
        TimerWx._on_timer.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        TimerWx._on_timer.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerWx._on_timer.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerWx._on_timer.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerWx._on_timer.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerWx._on_timer.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerWx._on_timer', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_on_timer', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_on_timer(...)' code ##################

        
        # Call to _on_timer(...): (line 166)
        # Processing the call arguments (line 166)
        # Getting the type of 'self' (line 166)
        self_263300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 28), 'self', False)
        # Processing the call keyword arguments (line 166)
        kwargs_263301 = {}
        # Getting the type of 'TimerBase' (line 166)
        TimerBase_263298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 8), 'TimerBase', False)
        # Obtaining the member '_on_timer' of a type (line 166)
        _on_timer_263299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 8), TimerBase_263298, '_on_timer')
        # Calling _on_timer(args, kwargs) (line 166)
        _on_timer_call_result_263302 = invoke(stypy.reporting.localization.Localization(__file__, 166, 8), _on_timer_263299, *[self_263300], **kwargs_263301)
        
        
        # ################# End of '_on_timer(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_on_timer' in the type store
        # Getting the type of 'stypy_return_type' (line 165)
        stypy_return_type_263303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263303)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_on_timer'
        return stypy_return_type_263303


# Assigning a type to the variable 'TimerWx' (line 121)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 0), 'TimerWx', TimerWx)
# Declaration of the 'RendererWx' class
# Getting the type of 'RendererBase' (line 169)
RendererBase_263304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 17), 'RendererBase')

class RendererWx(RendererBase_263304, ):
    unicode_263305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 174, (-1)), 'unicode', u"\n    The renderer handles all the drawing primitives using a graphics\n    context instance that controls the colors/styles. It acts as the\n    'renderer' instance used by many classes in the hierarchy.\n    ")
    
    # Assigning a Attribute to a Name (line 181):
    
    # Assigning a Attribute to a Name (line 182):
    
    # Assigning a Attribute to a Name (line 188):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 190, 4, False)
        # Assigning a type to the variable 'self' (line 191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 191, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererWx.__init__', ['bitmap', 'dpi'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['bitmap', 'dpi'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_263306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, (-1)), 'unicode', u'\n        Initialise a wxWindows renderer instance.\n        ')
        
        # Call to warn_deprecated(...): (line 194)
        # Processing the call arguments (line 194)
        unicode_263308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 24), 'unicode', u'2.0')
        # Processing the call keyword arguments (line 194)
        unicode_263309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 39), 'unicode', u"The WX backend is deprecated. It's untested and will be removed in Matplotlib 2.2. Use the WXAgg backend instead. See Matplotlib usage FAQ for more info on backends.")
        keyword_263310 = unicode_263309
        unicode_263311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 199, 36), 'unicode', u'WXAgg')
        keyword_263312 = unicode_263311
        kwargs_263313 = {'message': keyword_263310, 'alternative': keyword_263312}
        # Getting the type of 'warn_deprecated' (line 194)
        warn_deprecated_263307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 8), 'warn_deprecated', False)
        # Calling warn_deprecated(args, kwargs) (line 194)
        warn_deprecated_call_result_263314 = invoke(stypy.reporting.localization.Localization(__file__, 194, 8), warn_deprecated_263307, *[unicode_263308], **kwargs_263313)
        
        
        # Call to __init__(...): (line 200)
        # Processing the call arguments (line 200)
        # Getting the type of 'self' (line 200)
        self_263317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 30), 'self', False)
        # Processing the call keyword arguments (line 200)
        kwargs_263318 = {}
        # Getting the type of 'RendererBase' (line 200)
        RendererBase_263315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 8), 'RendererBase', False)
        # Obtaining the member '__init__' of a type (line 200)
        init___263316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 8), RendererBase_263315, '__init__')
        # Calling __init__(args, kwargs) (line 200)
        init___call_result_263319 = invoke(stypy.reporting.localization.Localization(__file__, 200, 8), init___263316, *[self_263317], **kwargs_263318)
        
        
        # Call to DEBUG_MSG(...): (line 201)
        # Processing the call arguments (line 201)
        unicode_263321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 18), 'unicode', u'__init__()')
        int_263322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 32), 'int')
        # Getting the type of 'self' (line 201)
        self_263323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 35), 'self', False)
        # Processing the call keyword arguments (line 201)
        kwargs_263324 = {}
        # Getting the type of 'DEBUG_MSG' (line 201)
        DEBUG_MSG_263320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 201)
        DEBUG_MSG_call_result_263325 = invoke(stypy.reporting.localization.Localization(__file__, 201, 8), DEBUG_MSG_263320, *[unicode_263321, int_263322, self_263323], **kwargs_263324)
        
        
        # Assigning a Call to a Attribute (line 202):
        
        # Assigning a Call to a Attribute (line 202):
        
        # Call to GetWidth(...): (line 202)
        # Processing the call keyword arguments (line 202)
        kwargs_263328 = {}
        # Getting the type of 'bitmap' (line 202)
        bitmap_263326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 21), 'bitmap', False)
        # Obtaining the member 'GetWidth' of a type (line 202)
        GetWidth_263327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 21), bitmap_263326, 'GetWidth')
        # Calling GetWidth(args, kwargs) (line 202)
        GetWidth_call_result_263329 = invoke(stypy.reporting.localization.Localization(__file__, 202, 21), GetWidth_263327, *[], **kwargs_263328)
        
        # Getting the type of 'self' (line 202)
        self_263330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 8), 'self')
        # Setting the type of the member 'width' of a type (line 202)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 8), self_263330, 'width', GetWidth_call_result_263329)
        
        # Assigning a Call to a Attribute (line 203):
        
        # Assigning a Call to a Attribute (line 203):
        
        # Call to GetHeight(...): (line 203)
        # Processing the call keyword arguments (line 203)
        kwargs_263333 = {}
        # Getting the type of 'bitmap' (line 203)
        bitmap_263331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 22), 'bitmap', False)
        # Obtaining the member 'GetHeight' of a type (line 203)
        GetHeight_263332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 22), bitmap_263331, 'GetHeight')
        # Calling GetHeight(args, kwargs) (line 203)
        GetHeight_call_result_263334 = invoke(stypy.reporting.localization.Localization(__file__, 203, 22), GetHeight_263332, *[], **kwargs_263333)
        
        # Getting the type of 'self' (line 203)
        self_263335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 8), 'self')
        # Setting the type of the member 'height' of a type (line 203)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 8), self_263335, 'height', GetHeight_call_result_263334)
        
        # Assigning a Name to a Attribute (line 204):
        
        # Assigning a Name to a Attribute (line 204):
        # Getting the type of 'bitmap' (line 204)
        bitmap_263336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 22), 'bitmap')
        # Getting the type of 'self' (line 204)
        self_263337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 8), 'self')
        # Setting the type of the member 'bitmap' of a type (line 204)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 8), self_263337, 'bitmap', bitmap_263336)
        
        # Assigning a Dict to a Attribute (line 205):
        
        # Assigning a Dict to a Attribute (line 205):
        
        # Obtaining an instance of the builtin type 'dict' (line 205)
        dict_263338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 205, 21), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 205)
        
        # Getting the type of 'self' (line 205)
        self_263339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 8), 'self')
        # Setting the type of the member 'fontd' of a type (line 205)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 8), self_263339, 'fontd', dict_263338)
        
        # Assigning a Name to a Attribute (line 206):
        
        # Assigning a Name to a Attribute (line 206):
        # Getting the type of 'dpi' (line 206)
        dpi_263340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 19), 'dpi')
        # Getting the type of 'self' (line 206)
        self_263341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 8), 'self')
        # Setting the type of the member 'dpi' of a type (line 206)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 8), self_263341, 'dpi', dpi_263340)
        
        # Assigning a Name to a Attribute (line 207):
        
        # Assigning a Name to a Attribute (line 207):
        # Getting the type of 'None' (line 207)
        None_263342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 18), 'None')
        # Getting the type of 'self' (line 207)
        self_263343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 8), 'self')
        # Setting the type of the member 'gc' of a type (line 207)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 8), self_263343, 'gc', None_263342)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def flipy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'flipy'
        module_type_store = module_type_store.open_function_context('flipy', 209, 4, False)
        # Assigning a type to the variable 'self' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererWx.flipy.__dict__.__setitem__('stypy_localization', localization)
        RendererWx.flipy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererWx.flipy.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererWx.flipy.__dict__.__setitem__('stypy_function_name', 'RendererWx.flipy')
        RendererWx.flipy.__dict__.__setitem__('stypy_param_names_list', [])
        RendererWx.flipy.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererWx.flipy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererWx.flipy.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererWx.flipy.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererWx.flipy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererWx.flipy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererWx.flipy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'flipy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'flipy(...)' code ##################

        # Getting the type of 'True' (line 210)
        True_263344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 8), 'stypy_return_type', True_263344)
        
        # ################# End of 'flipy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'flipy' in the type store
        # Getting the type of 'stypy_return_type' (line 209)
        stypy_return_type_263345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263345)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'flipy'
        return stypy_return_type_263345


    @norecursion
    def offset_text_height(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'offset_text_height'
        module_type_store = module_type_store.open_function_context('offset_text_height', 212, 4, False)
        # Assigning a type to the variable 'self' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererWx.offset_text_height.__dict__.__setitem__('stypy_localization', localization)
        RendererWx.offset_text_height.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererWx.offset_text_height.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererWx.offset_text_height.__dict__.__setitem__('stypy_function_name', 'RendererWx.offset_text_height')
        RendererWx.offset_text_height.__dict__.__setitem__('stypy_param_names_list', [])
        RendererWx.offset_text_height.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererWx.offset_text_height.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererWx.offset_text_height.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererWx.offset_text_height.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererWx.offset_text_height.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererWx.offset_text_height.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererWx.offset_text_height', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'offset_text_height', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'offset_text_height(...)' code ##################

        # Getting the type of 'True' (line 213)
        True_263346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 8), 'stypy_return_type', True_263346)
        
        # ################# End of 'offset_text_height(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'offset_text_height' in the type store
        # Getting the type of 'stypy_return_type' (line 212)
        stypy_return_type_263347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263347)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'offset_text_height'
        return stypy_return_type_263347


    @norecursion
    def get_text_width_height_descent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_text_width_height_descent'
        module_type_store = module_type_store.open_function_context('get_text_width_height_descent', 215, 4, False)
        # Assigning a type to the variable 'self' (line 216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererWx.get_text_width_height_descent.__dict__.__setitem__('stypy_localization', localization)
        RendererWx.get_text_width_height_descent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererWx.get_text_width_height_descent.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererWx.get_text_width_height_descent.__dict__.__setitem__('stypy_function_name', 'RendererWx.get_text_width_height_descent')
        RendererWx.get_text_width_height_descent.__dict__.__setitem__('stypy_param_names_list', ['s', 'prop', 'ismath'])
        RendererWx.get_text_width_height_descent.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererWx.get_text_width_height_descent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererWx.get_text_width_height_descent.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererWx.get_text_width_height_descent.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererWx.get_text_width_height_descent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererWx.get_text_width_height_descent.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererWx.get_text_width_height_descent', ['s', 'prop', 'ismath'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_text_width_height_descent', localization, ['s', 'prop', 'ismath'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_text_width_height_descent(...)' code ##################

        unicode_263348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, (-1)), 'unicode', u'\n        get the width and height in display coords of the string s\n        with FontPropertry prop\n        ')
        
        # Getting the type of 'ismath' (line 221)
        ismath_263349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 11), 'ismath')
        # Testing the type of an if condition (line 221)
        if_condition_263350 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 221, 8), ismath_263349)
        # Assigning a type to the variable 'if_condition_263350' (line 221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'if_condition_263350', if_condition_263350)
        # SSA begins for if statement (line 221)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 222):
        
        # Assigning a Call to a Name (line 222):
        
        # Call to strip_math(...): (line 222)
        # Processing the call arguments (line 222)
        # Getting the type of 's' (line 222)
        s_263353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 32), 's', False)
        # Processing the call keyword arguments (line 222)
        kwargs_263354 = {}
        # Getting the type of 'self' (line 222)
        self_263351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 16), 'self', False)
        # Obtaining the member 'strip_math' of a type (line 222)
        strip_math_263352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 16), self_263351, 'strip_math')
        # Calling strip_math(args, kwargs) (line 222)
        strip_math_call_result_263355 = invoke(stypy.reporting.localization.Localization(__file__, 222, 16), strip_math_263352, *[s_263353], **kwargs_263354)
        
        # Assigning a type to the variable 's' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 12), 's', strip_math_call_result_263355)
        # SSA join for if statement (line 221)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 224)
        # Getting the type of 'self' (line 224)
        self_263356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 11), 'self')
        # Obtaining the member 'gc' of a type (line 224)
        gc_263357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 11), self_263356, 'gc')
        # Getting the type of 'None' (line 224)
        None_263358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 22), 'None')
        
        (may_be_263359, more_types_in_union_263360) = may_be_none(gc_263357, None_263358)

        if may_be_263359:

            if more_types_in_union_263360:
                # Runtime conditional SSA (line 224)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 225):
            
            # Assigning a Call to a Name (line 225):
            
            # Call to new_gc(...): (line 225)
            # Processing the call keyword arguments (line 225)
            kwargs_263363 = {}
            # Getting the type of 'self' (line 225)
            self_263361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 17), 'self', False)
            # Obtaining the member 'new_gc' of a type (line 225)
            new_gc_263362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 17), self_263361, 'new_gc')
            # Calling new_gc(args, kwargs) (line 225)
            new_gc_call_result_263364 = invoke(stypy.reporting.localization.Localization(__file__, 225, 17), new_gc_263362, *[], **kwargs_263363)
            
            # Assigning a type to the variable 'gc' (line 225)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 12), 'gc', new_gc_call_result_263364)

            if more_types_in_union_263360:
                # Runtime conditional SSA for else branch (line 224)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_263359) or more_types_in_union_263360):
            
            # Assigning a Attribute to a Name (line 227):
            
            # Assigning a Attribute to a Name (line 227):
            # Getting the type of 'self' (line 227)
            self_263365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 17), 'self')
            # Obtaining the member 'gc' of a type (line 227)
            gc_263366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 17), self_263365, 'gc')
            # Assigning a type to the variable 'gc' (line 227)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 227, 12), 'gc', gc_263366)

            if (may_be_263359 and more_types_in_union_263360):
                # SSA join for if statement (line 224)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Name (line 228):
        
        # Assigning a Attribute to a Name (line 228):
        # Getting the type of 'gc' (line 228)
        gc_263367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 18), 'gc')
        # Obtaining the member 'gfx_ctx' of a type (line 228)
        gfx_ctx_263368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 18), gc_263367, 'gfx_ctx')
        # Assigning a type to the variable 'gfx_ctx' (line 228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 8), 'gfx_ctx', gfx_ctx_263368)
        
        # Assigning a Call to a Name (line 229):
        
        # Assigning a Call to a Name (line 229):
        
        # Call to get_wx_font(...): (line 229)
        # Processing the call arguments (line 229)
        # Getting the type of 's' (line 229)
        s_263371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 32), 's', False)
        # Getting the type of 'prop' (line 229)
        prop_263372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 35), 'prop', False)
        # Processing the call keyword arguments (line 229)
        kwargs_263373 = {}
        # Getting the type of 'self' (line 229)
        self_263369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 15), 'self', False)
        # Obtaining the member 'get_wx_font' of a type (line 229)
        get_wx_font_263370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 15), self_263369, 'get_wx_font')
        # Calling get_wx_font(args, kwargs) (line 229)
        get_wx_font_call_result_263374 = invoke(stypy.reporting.localization.Localization(__file__, 229, 15), get_wx_font_263370, *[s_263371, prop_263372], **kwargs_263373)
        
        # Assigning a type to the variable 'font' (line 229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 229, 8), 'font', get_wx_font_call_result_263374)
        
        # Call to SetFont(...): (line 230)
        # Processing the call arguments (line 230)
        # Getting the type of 'font' (line 230)
        font_263377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 24), 'font', False)
        # Getting the type of 'wx' (line 230)
        wx_263378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 30), 'wx', False)
        # Obtaining the member 'BLACK' of a type (line 230)
        BLACK_263379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 30), wx_263378, 'BLACK')
        # Processing the call keyword arguments (line 230)
        kwargs_263380 = {}
        # Getting the type of 'gfx_ctx' (line 230)
        gfx_ctx_263375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 8), 'gfx_ctx', False)
        # Obtaining the member 'SetFont' of a type (line 230)
        SetFont_263376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 8), gfx_ctx_263375, 'SetFont')
        # Calling SetFont(args, kwargs) (line 230)
        SetFont_call_result_263381 = invoke(stypy.reporting.localization.Localization(__file__, 230, 8), SetFont_263376, *[font_263377, BLACK_263379], **kwargs_263380)
        
        
        # Assigning a Call to a Tuple (line 231):
        
        # Assigning a Call to a Name:
        
        # Call to GetFullTextExtent(...): (line 231)
        # Processing the call arguments (line 231)
        # Getting the type of 's' (line 231)
        s_263384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 59), 's', False)
        # Processing the call keyword arguments (line 231)
        kwargs_263385 = {}
        # Getting the type of 'gfx_ctx' (line 231)
        gfx_ctx_263382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 33), 'gfx_ctx', False)
        # Obtaining the member 'GetFullTextExtent' of a type (line 231)
        GetFullTextExtent_263383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 33), gfx_ctx_263382, 'GetFullTextExtent')
        # Calling GetFullTextExtent(args, kwargs) (line 231)
        GetFullTextExtent_call_result_263386 = invoke(stypy.reporting.localization.Localization(__file__, 231, 33), GetFullTextExtent_263383, *[s_263384], **kwargs_263385)
        
        # Assigning a type to the variable 'call_assignment_262999' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'call_assignment_262999', GetFullTextExtent_call_result_263386)
        
        # Assigning a Call to a Name (line 231):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_263389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 8), 'int')
        # Processing the call keyword arguments
        kwargs_263390 = {}
        # Getting the type of 'call_assignment_262999' (line 231)
        call_assignment_262999_263387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'call_assignment_262999', False)
        # Obtaining the member '__getitem__' of a type (line 231)
        getitem___263388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 8), call_assignment_262999_263387, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_263391 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___263388, *[int_263389], **kwargs_263390)
        
        # Assigning a type to the variable 'call_assignment_263000' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'call_assignment_263000', getitem___call_result_263391)
        
        # Assigning a Name to a Name (line 231):
        # Getting the type of 'call_assignment_263000' (line 231)
        call_assignment_263000_263392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'call_assignment_263000')
        # Assigning a type to the variable 'w' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'w', call_assignment_263000_263392)
        
        # Assigning a Call to a Name (line 231):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_263395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 8), 'int')
        # Processing the call keyword arguments
        kwargs_263396 = {}
        # Getting the type of 'call_assignment_262999' (line 231)
        call_assignment_262999_263393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'call_assignment_262999', False)
        # Obtaining the member '__getitem__' of a type (line 231)
        getitem___263394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 8), call_assignment_262999_263393, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_263397 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___263394, *[int_263395], **kwargs_263396)
        
        # Assigning a type to the variable 'call_assignment_263001' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'call_assignment_263001', getitem___call_result_263397)
        
        # Assigning a Name to a Name (line 231):
        # Getting the type of 'call_assignment_263001' (line 231)
        call_assignment_263001_263398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'call_assignment_263001')
        # Assigning a type to the variable 'h' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 11), 'h', call_assignment_263001_263398)
        
        # Assigning a Call to a Name (line 231):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_263401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 8), 'int')
        # Processing the call keyword arguments
        kwargs_263402 = {}
        # Getting the type of 'call_assignment_262999' (line 231)
        call_assignment_262999_263399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'call_assignment_262999', False)
        # Obtaining the member '__getitem__' of a type (line 231)
        getitem___263400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 8), call_assignment_262999_263399, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_263403 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___263400, *[int_263401], **kwargs_263402)
        
        # Assigning a type to the variable 'call_assignment_263002' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'call_assignment_263002', getitem___call_result_263403)
        
        # Assigning a Name to a Name (line 231):
        # Getting the type of 'call_assignment_263002' (line 231)
        call_assignment_263002_263404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'call_assignment_263002')
        # Assigning a type to the variable 'descent' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 14), 'descent', call_assignment_263002_263404)
        
        # Assigning a Call to a Name (line 231):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_263407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 8), 'int')
        # Processing the call keyword arguments
        kwargs_263408 = {}
        # Getting the type of 'call_assignment_262999' (line 231)
        call_assignment_262999_263405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'call_assignment_262999', False)
        # Obtaining the member '__getitem__' of a type (line 231)
        getitem___263406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 8), call_assignment_262999_263405, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_263409 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___263406, *[int_263407], **kwargs_263408)
        
        # Assigning a type to the variable 'call_assignment_263003' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'call_assignment_263003', getitem___call_result_263409)
        
        # Assigning a Name to a Name (line 231):
        # Getting the type of 'call_assignment_263003' (line 231)
        call_assignment_263003_263410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'call_assignment_263003')
        # Assigning a type to the variable 'leading' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 23), 'leading', call_assignment_263003_263410)
        
        # Obtaining an instance of the builtin type 'tuple' (line 233)
        tuple_263411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 233, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 233)
        # Adding element type (line 233)
        # Getting the type of 'w' (line 233)
        w_263412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 15), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 233, 15), tuple_263411, w_263412)
        # Adding element type (line 233)
        # Getting the type of 'h' (line 233)
        h_263413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 18), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 233, 15), tuple_263411, h_263413)
        # Adding element type (line 233)
        # Getting the type of 'descent' (line 233)
        descent_263414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 21), 'descent')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 233, 15), tuple_263411, descent_263414)
        
        # Assigning a type to the variable 'stypy_return_type' (line 233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'stypy_return_type', tuple_263411)
        
        # ################# End of 'get_text_width_height_descent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_text_width_height_descent' in the type store
        # Getting the type of 'stypy_return_type' (line 215)
        stypy_return_type_263415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263415)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_text_width_height_descent'
        return stypy_return_type_263415


    @norecursion
    def get_canvas_width_height(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_canvas_width_height'
        module_type_store = module_type_store.open_function_context('get_canvas_width_height', 235, 4, False)
        # Assigning a type to the variable 'self' (line 236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 236, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererWx.get_canvas_width_height.__dict__.__setitem__('stypy_localization', localization)
        RendererWx.get_canvas_width_height.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererWx.get_canvas_width_height.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererWx.get_canvas_width_height.__dict__.__setitem__('stypy_function_name', 'RendererWx.get_canvas_width_height')
        RendererWx.get_canvas_width_height.__dict__.__setitem__('stypy_param_names_list', [])
        RendererWx.get_canvas_width_height.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererWx.get_canvas_width_height.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererWx.get_canvas_width_height.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererWx.get_canvas_width_height.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererWx.get_canvas_width_height.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererWx.get_canvas_width_height.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererWx.get_canvas_width_height', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_canvas_width_height', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_canvas_width_height(...)' code ##################

        unicode_263416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 8), 'unicode', u'return the canvas width and height in display coords')
        
        # Obtaining an instance of the builtin type 'tuple' (line 237)
        tuple_263417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 237)
        # Adding element type (line 237)
        # Getting the type of 'self' (line 237)
        self_263418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 15), 'self')
        # Obtaining the member 'width' of a type (line 237)
        width_263419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 15), self_263418, 'width')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 237, 15), tuple_263417, width_263419)
        # Adding element type (line 237)
        # Getting the type of 'self' (line 237)
        self_263420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 27), 'self')
        # Obtaining the member 'height' of a type (line 237)
        height_263421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 27), self_263420, 'height')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 237, 15), tuple_263417, height_263421)
        
        # Assigning a type to the variable 'stypy_return_type' (line 237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 8), 'stypy_return_type', tuple_263417)
        
        # ################# End of 'get_canvas_width_height(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_canvas_width_height' in the type store
        # Getting the type of 'stypy_return_type' (line 235)
        stypy_return_type_263422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263422)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_canvas_width_height'
        return stypy_return_type_263422


    @norecursion
    def handle_clip_rectangle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'handle_clip_rectangle'
        module_type_store = module_type_store.open_function_context('handle_clip_rectangle', 239, 4, False)
        # Assigning a type to the variable 'self' (line 240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererWx.handle_clip_rectangle.__dict__.__setitem__('stypy_localization', localization)
        RendererWx.handle_clip_rectangle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererWx.handle_clip_rectangle.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererWx.handle_clip_rectangle.__dict__.__setitem__('stypy_function_name', 'RendererWx.handle_clip_rectangle')
        RendererWx.handle_clip_rectangle.__dict__.__setitem__('stypy_param_names_list', ['gc'])
        RendererWx.handle_clip_rectangle.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererWx.handle_clip_rectangle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererWx.handle_clip_rectangle.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererWx.handle_clip_rectangle.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererWx.handle_clip_rectangle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererWx.handle_clip_rectangle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererWx.handle_clip_rectangle', ['gc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'handle_clip_rectangle', localization, ['gc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'handle_clip_rectangle(...)' code ##################

        
        # Assigning a Call to a Name (line 240):
        
        # Assigning a Call to a Name (line 240):
        
        # Call to get_clip_rectangle(...): (line 240)
        # Processing the call keyword arguments (line 240)
        kwargs_263425 = {}
        # Getting the type of 'gc' (line 240)
        gc_263423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 21), 'gc', False)
        # Obtaining the member 'get_clip_rectangle' of a type (line 240)
        get_clip_rectangle_263424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 240, 21), gc_263423, 'get_clip_rectangle')
        # Calling get_clip_rectangle(args, kwargs) (line 240)
        get_clip_rectangle_call_result_263426 = invoke(stypy.reporting.localization.Localization(__file__, 240, 21), get_clip_rectangle_263424, *[], **kwargs_263425)
        
        # Assigning a type to the variable 'new_bounds' (line 240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'new_bounds', get_clip_rectangle_call_result_263426)
        
        # Type idiom detected: calculating its left and rigth part (line 241)
        # Getting the type of 'new_bounds' (line 241)
        new_bounds_263427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 8), 'new_bounds')
        # Getting the type of 'None' (line 241)
        None_263428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 29), 'None')
        
        (may_be_263429, more_types_in_union_263430) = may_not_be_none(new_bounds_263427, None_263428)

        if may_be_263429:

            if more_types_in_union_263430:
                # Runtime conditional SSA (line 241)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 242):
            
            # Assigning a Attribute to a Name (line 242):
            # Getting the type of 'new_bounds' (line 242)
            new_bounds_263431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 25), 'new_bounds')
            # Obtaining the member 'bounds' of a type (line 242)
            bounds_263432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 25), new_bounds_263431, 'bounds')
            # Assigning a type to the variable 'new_bounds' (line 242)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 12), 'new_bounds', bounds_263432)

            if more_types_in_union_263430:
                # SSA join for if statement (line 241)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Name (line 243):
        
        # Assigning a Attribute to a Name (line 243):
        # Getting the type of 'gc' (line 243)
        gc_263433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 18), 'gc')
        # Obtaining the member 'gfx_ctx' of a type (line 243)
        gfx_ctx_263434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 18), gc_263433, 'gfx_ctx')
        # Assigning a type to the variable 'gfx_ctx' (line 243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 243, 8), 'gfx_ctx', gfx_ctx_263434)
        
        
        # Getting the type of 'gfx_ctx' (line 244)
        gfx_ctx_263435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 11), 'gfx_ctx')
        # Obtaining the member '_lastcliprect' of a type (line 244)
        _lastcliprect_263436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 11), gfx_ctx_263435, '_lastcliprect')
        # Getting the type of 'new_bounds' (line 244)
        new_bounds_263437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 36), 'new_bounds')
        # Applying the binary operator '!=' (line 244)
        result_ne_263438 = python_operator(stypy.reporting.localization.Localization(__file__, 244, 11), '!=', _lastcliprect_263436, new_bounds_263437)
        
        # Testing the type of an if condition (line 244)
        if_condition_263439 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 244, 8), result_ne_263438)
        # Assigning a type to the variable 'if_condition_263439' (line 244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 8), 'if_condition_263439', if_condition_263439)
        # SSA begins for if statement (line 244)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 245):
        
        # Assigning a Name to a Attribute (line 245):
        # Getting the type of 'new_bounds' (line 245)
        new_bounds_263440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 36), 'new_bounds')
        # Getting the type of 'gfx_ctx' (line 245)
        gfx_ctx_263441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 12), 'gfx_ctx')
        # Setting the type of the member '_lastcliprect' of a type (line 245)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 12), gfx_ctx_263441, '_lastcliprect', new_bounds_263440)
        
        # Type idiom detected: calculating its left and rigth part (line 246)
        # Getting the type of 'new_bounds' (line 246)
        new_bounds_263442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 15), 'new_bounds')
        # Getting the type of 'None' (line 246)
        None_263443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 29), 'None')
        
        (may_be_263444, more_types_in_union_263445) = may_be_none(new_bounds_263442, None_263443)

        if may_be_263444:

            if more_types_in_union_263445:
                # Runtime conditional SSA (line 246)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to ResetClip(...): (line 247)
            # Processing the call keyword arguments (line 247)
            kwargs_263448 = {}
            # Getting the type of 'gfx_ctx' (line 247)
            gfx_ctx_263446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 16), 'gfx_ctx', False)
            # Obtaining the member 'ResetClip' of a type (line 247)
            ResetClip_263447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 16), gfx_ctx_263446, 'ResetClip')
            # Calling ResetClip(args, kwargs) (line 247)
            ResetClip_call_result_263449 = invoke(stypy.reporting.localization.Localization(__file__, 247, 16), ResetClip_263447, *[], **kwargs_263448)
            

            if more_types_in_union_263445:
                # Runtime conditional SSA for else branch (line 246)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_263444) or more_types_in_union_263445):
            
            # Call to Clip(...): (line 249)
            # Processing the call arguments (line 249)
            
            # Obtaining the type of the subscript
            int_263452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 40), 'int')
            # Getting the type of 'new_bounds' (line 249)
            new_bounds_263453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 29), 'new_bounds', False)
            # Obtaining the member '__getitem__' of a type (line 249)
            getitem___263454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 29), new_bounds_263453, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 249)
            subscript_call_result_263455 = invoke(stypy.reporting.localization.Localization(__file__, 249, 29), getitem___263454, int_263452)
            
            # Getting the type of 'self' (line 250)
            self_263456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 29), 'self', False)
            # Obtaining the member 'height' of a type (line 250)
            height_263457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 250, 29), self_263456, 'height')
            
            # Obtaining the type of the subscript
            int_263458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 250, 54), 'int')
            # Getting the type of 'new_bounds' (line 250)
            new_bounds_263459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 43), 'new_bounds', False)
            # Obtaining the member '__getitem__' of a type (line 250)
            getitem___263460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 250, 43), new_bounds_263459, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 250)
            subscript_call_result_263461 = invoke(stypy.reporting.localization.Localization(__file__, 250, 43), getitem___263460, int_263458)
            
            # Applying the binary operator '-' (line 250)
            result_sub_263462 = python_operator(stypy.reporting.localization.Localization(__file__, 250, 29), '-', height_263457, subscript_call_result_263461)
            
            
            # Obtaining the type of the subscript
            int_263463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 250, 70), 'int')
            # Getting the type of 'new_bounds' (line 250)
            new_bounds_263464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 59), 'new_bounds', False)
            # Obtaining the member '__getitem__' of a type (line 250)
            getitem___263465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 250, 59), new_bounds_263464, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 250)
            subscript_call_result_263466 = invoke(stypy.reporting.localization.Localization(__file__, 250, 59), getitem___263465, int_263463)
            
            # Applying the binary operator '-' (line 250)
            result_sub_263467 = python_operator(stypy.reporting.localization.Localization(__file__, 250, 57), '-', result_sub_263462, subscript_call_result_263466)
            
            
            # Obtaining the type of the subscript
            int_263468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 40), 'int')
            # Getting the type of 'new_bounds' (line 251)
            new_bounds_263469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 29), 'new_bounds', False)
            # Obtaining the member '__getitem__' of a type (line 251)
            getitem___263470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 29), new_bounds_263469, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 251)
            subscript_call_result_263471 = invoke(stypy.reporting.localization.Localization(__file__, 251, 29), getitem___263470, int_263468)
            
            
            # Obtaining the type of the subscript
            int_263472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 55), 'int')
            # Getting the type of 'new_bounds' (line 251)
            new_bounds_263473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 44), 'new_bounds', False)
            # Obtaining the member '__getitem__' of a type (line 251)
            getitem___263474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 44), new_bounds_263473, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 251)
            subscript_call_result_263475 = invoke(stypy.reporting.localization.Localization(__file__, 251, 44), getitem___263474, int_263472)
            
            # Processing the call keyword arguments (line 249)
            kwargs_263476 = {}
            # Getting the type of 'gfx_ctx' (line 249)
            gfx_ctx_263450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 16), 'gfx_ctx', False)
            # Obtaining the member 'Clip' of a type (line 249)
            Clip_263451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 16), gfx_ctx_263450, 'Clip')
            # Calling Clip(args, kwargs) (line 249)
            Clip_call_result_263477 = invoke(stypy.reporting.localization.Localization(__file__, 249, 16), Clip_263451, *[subscript_call_result_263455, result_sub_263467, subscript_call_result_263471, subscript_call_result_263475], **kwargs_263476)
            

            if (may_be_263444 and more_types_in_union_263445):
                # SSA join for if statement (line 246)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 244)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'handle_clip_rectangle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'handle_clip_rectangle' in the type store
        # Getting the type of 'stypy_return_type' (line 239)
        stypy_return_type_263478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263478)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'handle_clip_rectangle'
        return stypy_return_type_263478


    @staticmethod
    @norecursion
    def convert_path(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'convert_path'
        module_type_store = module_type_store.open_function_context('convert_path', 253, 4, False)
        
        # Passed parameters checking function
        RendererWx.convert_path.__dict__.__setitem__('stypy_localization', localization)
        RendererWx.convert_path.__dict__.__setitem__('stypy_type_of_self', None)
        RendererWx.convert_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererWx.convert_path.__dict__.__setitem__('stypy_function_name', 'convert_path')
        RendererWx.convert_path.__dict__.__setitem__('stypy_param_names_list', ['gfx_ctx', 'path', 'transform'])
        RendererWx.convert_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererWx.convert_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererWx.convert_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererWx.convert_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererWx.convert_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererWx.convert_path.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, None, module_type_store, 'convert_path', ['gfx_ctx', 'path', 'transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'convert_path', localization, ['path', 'transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'convert_path(...)' code ##################

        
        # Assigning a Call to a Name (line 255):
        
        # Assigning a Call to a Name (line 255):
        
        # Call to CreatePath(...): (line 255)
        # Processing the call keyword arguments (line 255)
        kwargs_263481 = {}
        # Getting the type of 'gfx_ctx' (line 255)
        gfx_ctx_263479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 17), 'gfx_ctx', False)
        # Obtaining the member 'CreatePath' of a type (line 255)
        CreatePath_263480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 17), gfx_ctx_263479, 'CreatePath')
        # Calling CreatePath(args, kwargs) (line 255)
        CreatePath_call_result_263482 = invoke(stypy.reporting.localization.Localization(__file__, 255, 17), CreatePath_263480, *[], **kwargs_263481)
        
        # Assigning a type to the variable 'wxpath' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 8), 'wxpath', CreatePath_call_result_263482)
        
        
        # Call to iter_segments(...): (line 256)
        # Processing the call arguments (line 256)
        # Getting the type of 'transform' (line 256)
        transform_263485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 47), 'transform', False)
        # Processing the call keyword arguments (line 256)
        kwargs_263486 = {}
        # Getting the type of 'path' (line 256)
        path_263483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 28), 'path', False)
        # Obtaining the member 'iter_segments' of a type (line 256)
        iter_segments_263484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 28), path_263483, 'iter_segments')
        # Calling iter_segments(args, kwargs) (line 256)
        iter_segments_call_result_263487 = invoke(stypy.reporting.localization.Localization(__file__, 256, 28), iter_segments_263484, *[transform_263485], **kwargs_263486)
        
        # Testing the type of a for loop iterable (line 256)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 256, 8), iter_segments_call_result_263487)
        # Getting the type of the for loop variable (line 256)
        for_loop_var_263488 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 256, 8), iter_segments_call_result_263487)
        # Assigning a type to the variable 'points' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'points', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 256, 8), for_loop_var_263488))
        # Assigning a type to the variable 'code' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'code', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 256, 8), for_loop_var_263488))
        # SSA begins for a for statement (line 256)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'code' (line 257)
        code_263489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 15), 'code')
        # Getting the type of 'Path' (line 257)
        Path_263490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 23), 'Path')
        # Obtaining the member 'MOVETO' of a type (line 257)
        MOVETO_263491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 23), Path_263490, 'MOVETO')
        # Applying the binary operator '==' (line 257)
        result_eq_263492 = python_operator(stypy.reporting.localization.Localization(__file__, 257, 15), '==', code_263489, MOVETO_263491)
        
        # Testing the type of an if condition (line 257)
        if_condition_263493 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 257, 12), result_eq_263492)
        # Assigning a type to the variable 'if_condition_263493' (line 257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 12), 'if_condition_263493', if_condition_263493)
        # SSA begins for if statement (line 257)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to MoveToPoint(...): (line 258)
        # Getting the type of 'points' (line 258)
        points_263496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 36), 'points', False)
        # Processing the call keyword arguments (line 258)
        kwargs_263497 = {}
        # Getting the type of 'wxpath' (line 258)
        wxpath_263494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 16), 'wxpath', False)
        # Obtaining the member 'MoveToPoint' of a type (line 258)
        MoveToPoint_263495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 16), wxpath_263494, 'MoveToPoint')
        # Calling MoveToPoint(args, kwargs) (line 258)
        MoveToPoint_call_result_263498 = invoke(stypy.reporting.localization.Localization(__file__, 258, 16), MoveToPoint_263495, *[points_263496], **kwargs_263497)
        
        # SSA branch for the else part of an if statement (line 257)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'code' (line 259)
        code_263499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 17), 'code')
        # Getting the type of 'Path' (line 259)
        Path_263500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 25), 'Path')
        # Obtaining the member 'LINETO' of a type (line 259)
        LINETO_263501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 259, 25), Path_263500, 'LINETO')
        # Applying the binary operator '==' (line 259)
        result_eq_263502 = python_operator(stypy.reporting.localization.Localization(__file__, 259, 17), '==', code_263499, LINETO_263501)
        
        # Testing the type of an if condition (line 259)
        if_condition_263503 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 259, 17), result_eq_263502)
        # Assigning a type to the variable 'if_condition_263503' (line 259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 17), 'if_condition_263503', if_condition_263503)
        # SSA begins for if statement (line 259)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to AddLineToPoint(...): (line 260)
        # Getting the type of 'points' (line 260)
        points_263506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 39), 'points', False)
        # Processing the call keyword arguments (line 260)
        kwargs_263507 = {}
        # Getting the type of 'wxpath' (line 260)
        wxpath_263504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 16), 'wxpath', False)
        # Obtaining the member 'AddLineToPoint' of a type (line 260)
        AddLineToPoint_263505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 16), wxpath_263504, 'AddLineToPoint')
        # Calling AddLineToPoint(args, kwargs) (line 260)
        AddLineToPoint_call_result_263508 = invoke(stypy.reporting.localization.Localization(__file__, 260, 16), AddLineToPoint_263505, *[points_263506], **kwargs_263507)
        
        # SSA branch for the else part of an if statement (line 259)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'code' (line 261)
        code_263509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 17), 'code')
        # Getting the type of 'Path' (line 261)
        Path_263510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 25), 'Path')
        # Obtaining the member 'CURVE3' of a type (line 261)
        CURVE3_263511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 25), Path_263510, 'CURVE3')
        # Applying the binary operator '==' (line 261)
        result_eq_263512 = python_operator(stypy.reporting.localization.Localization(__file__, 261, 17), '==', code_263509, CURVE3_263511)
        
        # Testing the type of an if condition (line 261)
        if_condition_263513 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 261, 17), result_eq_263512)
        # Assigning a type to the variable 'if_condition_263513' (line 261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 17), 'if_condition_263513', if_condition_263513)
        # SSA begins for if statement (line 261)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to AddQuadCurveToPoint(...): (line 262)
        # Getting the type of 'points' (line 262)
        points_263516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 44), 'points', False)
        # Processing the call keyword arguments (line 262)
        kwargs_263517 = {}
        # Getting the type of 'wxpath' (line 262)
        wxpath_263514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 16), 'wxpath', False)
        # Obtaining the member 'AddQuadCurveToPoint' of a type (line 262)
        AddQuadCurveToPoint_263515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 262, 16), wxpath_263514, 'AddQuadCurveToPoint')
        # Calling AddQuadCurveToPoint(args, kwargs) (line 262)
        AddQuadCurveToPoint_call_result_263518 = invoke(stypy.reporting.localization.Localization(__file__, 262, 16), AddQuadCurveToPoint_263515, *[points_263516], **kwargs_263517)
        
        # SSA branch for the else part of an if statement (line 261)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'code' (line 263)
        code_263519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 17), 'code')
        # Getting the type of 'Path' (line 263)
        Path_263520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 25), 'Path')
        # Obtaining the member 'CURVE4' of a type (line 263)
        CURVE4_263521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 25), Path_263520, 'CURVE4')
        # Applying the binary operator '==' (line 263)
        result_eq_263522 = python_operator(stypy.reporting.localization.Localization(__file__, 263, 17), '==', code_263519, CURVE4_263521)
        
        # Testing the type of an if condition (line 263)
        if_condition_263523 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 263, 17), result_eq_263522)
        # Assigning a type to the variable 'if_condition_263523' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 17), 'if_condition_263523', if_condition_263523)
        # SSA begins for if statement (line 263)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to AddCurveToPoint(...): (line 264)
        # Getting the type of 'points' (line 264)
        points_263526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 40), 'points', False)
        # Processing the call keyword arguments (line 264)
        kwargs_263527 = {}
        # Getting the type of 'wxpath' (line 264)
        wxpath_263524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 16), 'wxpath', False)
        # Obtaining the member 'AddCurveToPoint' of a type (line 264)
        AddCurveToPoint_263525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 264, 16), wxpath_263524, 'AddCurveToPoint')
        # Calling AddCurveToPoint(args, kwargs) (line 264)
        AddCurveToPoint_call_result_263528 = invoke(stypy.reporting.localization.Localization(__file__, 264, 16), AddCurveToPoint_263525, *[points_263526], **kwargs_263527)
        
        # SSA branch for the else part of an if statement (line 263)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'code' (line 265)
        code_263529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 17), 'code')
        # Getting the type of 'Path' (line 265)
        Path_263530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 25), 'Path')
        # Obtaining the member 'CLOSEPOLY' of a type (line 265)
        CLOSEPOLY_263531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 25), Path_263530, 'CLOSEPOLY')
        # Applying the binary operator '==' (line 265)
        result_eq_263532 = python_operator(stypy.reporting.localization.Localization(__file__, 265, 17), '==', code_263529, CLOSEPOLY_263531)
        
        # Testing the type of an if condition (line 265)
        if_condition_263533 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 265, 17), result_eq_263532)
        # Assigning a type to the variable 'if_condition_263533' (line 265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 17), 'if_condition_263533', if_condition_263533)
        # SSA begins for if statement (line 265)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to CloseSubpath(...): (line 266)
        # Processing the call keyword arguments (line 266)
        kwargs_263536 = {}
        # Getting the type of 'wxpath' (line 266)
        wxpath_263534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 16), 'wxpath', False)
        # Obtaining the member 'CloseSubpath' of a type (line 266)
        CloseSubpath_263535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 266, 16), wxpath_263534, 'CloseSubpath')
        # Calling CloseSubpath(args, kwargs) (line 266)
        CloseSubpath_call_result_263537 = invoke(stypy.reporting.localization.Localization(__file__, 266, 16), CloseSubpath_263535, *[], **kwargs_263536)
        
        # SSA join for if statement (line 265)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 263)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 261)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 259)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 257)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'wxpath' (line 267)
        wxpath_263538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 15), 'wxpath')
        # Assigning a type to the variable 'stypy_return_type' (line 267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 8), 'stypy_return_type', wxpath_263538)
        
        # ################# End of 'convert_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'convert_path' in the type store
        # Getting the type of 'stypy_return_type' (line 253)
        stypy_return_type_263539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263539)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'convert_path'
        return stypy_return_type_263539


    @norecursion
    def draw_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 269)
        None_263540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 53), 'None')
        defaults = [None_263540]
        # Create a new context for function 'draw_path'
        module_type_store = module_type_store.open_function_context('draw_path', 269, 4, False)
        # Assigning a type to the variable 'self' (line 270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererWx.draw_path.__dict__.__setitem__('stypy_localization', localization)
        RendererWx.draw_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererWx.draw_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererWx.draw_path.__dict__.__setitem__('stypy_function_name', 'RendererWx.draw_path')
        RendererWx.draw_path.__dict__.__setitem__('stypy_param_names_list', ['gc', 'path', 'transform', 'rgbFace'])
        RendererWx.draw_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererWx.draw_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererWx.draw_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererWx.draw_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererWx.draw_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererWx.draw_path.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererWx.draw_path', ['gc', 'path', 'transform', 'rgbFace'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_path', localization, ['gc', 'path', 'transform', 'rgbFace'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_path(...)' code ##################

        
        # Call to select(...): (line 270)
        # Processing the call keyword arguments (line 270)
        kwargs_263543 = {}
        # Getting the type of 'gc' (line 270)
        gc_263541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 8), 'gc', False)
        # Obtaining the member 'select' of a type (line 270)
        select_263542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 270, 8), gc_263541, 'select')
        # Calling select(args, kwargs) (line 270)
        select_call_result_263544 = invoke(stypy.reporting.localization.Localization(__file__, 270, 8), select_263542, *[], **kwargs_263543)
        
        
        # Call to handle_clip_rectangle(...): (line 271)
        # Processing the call arguments (line 271)
        # Getting the type of 'gc' (line 271)
        gc_263547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 35), 'gc', False)
        # Processing the call keyword arguments (line 271)
        kwargs_263548 = {}
        # Getting the type of 'self' (line 271)
        self_263545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 8), 'self', False)
        # Obtaining the member 'handle_clip_rectangle' of a type (line 271)
        handle_clip_rectangle_263546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 271, 8), self_263545, 'handle_clip_rectangle')
        # Calling handle_clip_rectangle(args, kwargs) (line 271)
        handle_clip_rectangle_call_result_263549 = invoke(stypy.reporting.localization.Localization(__file__, 271, 8), handle_clip_rectangle_263546, *[gc_263547], **kwargs_263548)
        
        
        # Assigning a Attribute to a Name (line 272):
        
        # Assigning a Attribute to a Name (line 272):
        # Getting the type of 'gc' (line 272)
        gc_263550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 18), 'gc')
        # Obtaining the member 'gfx_ctx' of a type (line 272)
        gfx_ctx_263551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 18), gc_263550, 'gfx_ctx')
        # Assigning a type to the variable 'gfx_ctx' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 8), 'gfx_ctx', gfx_ctx_263551)
        
        # Assigning a BinOp to a Name (line 273):
        
        # Assigning a BinOp to a Name (line 273):
        # Getting the type of 'transform' (line 273)
        transform_263552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 20), 'transform')
        
        # Call to translate(...): (line 274)
        # Processing the call arguments (line 274)
        float_263562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 50), 'float')
        # Getting the type of 'self' (line 274)
        self_263563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 55), 'self', False)
        # Obtaining the member 'height' of a type (line 274)
        height_263564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 55), self_263563, 'height')
        # Processing the call keyword arguments (line 274)
        kwargs_263565 = {}
        
        # Call to scale(...): (line 274)
        # Processing the call arguments (line 274)
        float_263557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 29), 'float')
        float_263558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 34), 'float')
        # Processing the call keyword arguments (line 274)
        kwargs_263559 = {}
        
        # Call to Affine2D(...): (line 274)
        # Processing the call keyword arguments (line 274)
        kwargs_263554 = {}
        # Getting the type of 'Affine2D' (line 274)
        Affine2D_263553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 12), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 274)
        Affine2D_call_result_263555 = invoke(stypy.reporting.localization.Localization(__file__, 274, 12), Affine2D_263553, *[], **kwargs_263554)
        
        # Obtaining the member 'scale' of a type (line 274)
        scale_263556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 12), Affine2D_call_result_263555, 'scale')
        # Calling scale(args, kwargs) (line 274)
        scale_call_result_263560 = invoke(stypy.reporting.localization.Localization(__file__, 274, 12), scale_263556, *[float_263557, float_263558], **kwargs_263559)
        
        # Obtaining the member 'translate' of a type (line 274)
        translate_263561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 12), scale_call_result_263560, 'translate')
        # Calling translate(args, kwargs) (line 274)
        translate_call_result_263566 = invoke(stypy.reporting.localization.Localization(__file__, 274, 12), translate_263561, *[float_263562, height_263564], **kwargs_263565)
        
        # Applying the binary operator '+' (line 273)
        result_add_263567 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 20), '+', transform_263552, translate_call_result_263566)
        
        # Assigning a type to the variable 'transform' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'transform', result_add_263567)
        
        # Assigning a Call to a Name (line 275):
        
        # Assigning a Call to a Name (line 275):
        
        # Call to convert_path(...): (line 275)
        # Processing the call arguments (line 275)
        # Getting the type of 'gfx_ctx' (line 275)
        gfx_ctx_263570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 35), 'gfx_ctx', False)
        # Getting the type of 'path' (line 275)
        path_263571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 44), 'path', False)
        # Getting the type of 'transform' (line 275)
        transform_263572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 50), 'transform', False)
        # Processing the call keyword arguments (line 275)
        kwargs_263573 = {}
        # Getting the type of 'self' (line 275)
        self_263568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 17), 'self', False)
        # Obtaining the member 'convert_path' of a type (line 275)
        convert_path_263569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 17), self_263568, 'convert_path')
        # Calling convert_path(args, kwargs) (line 275)
        convert_path_call_result_263574 = invoke(stypy.reporting.localization.Localization(__file__, 275, 17), convert_path_263569, *[gfx_ctx_263570, path_263571, transform_263572], **kwargs_263573)
        
        # Assigning a type to the variable 'wxpath' (line 275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 8), 'wxpath', convert_path_call_result_263574)
        
        # Type idiom detected: calculating its left and rigth part (line 276)
        # Getting the type of 'rgbFace' (line 276)
        rgbFace_263575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 8), 'rgbFace')
        # Getting the type of 'None' (line 276)
        None_263576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 26), 'None')
        
        (may_be_263577, more_types_in_union_263578) = may_not_be_none(rgbFace_263575, None_263576)

        if may_be_263577:

            if more_types_in_union_263578:
                # Runtime conditional SSA (line 276)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to SetBrush(...): (line 277)
            # Processing the call arguments (line 277)
            
            # Call to Brush(...): (line 277)
            # Processing the call arguments (line 277)
            
            # Call to get_wxcolour(...): (line 277)
            # Processing the call arguments (line 277)
            # Getting the type of 'rgbFace' (line 277)
            rgbFace_263585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 54), 'rgbFace', False)
            # Processing the call keyword arguments (line 277)
            kwargs_263586 = {}
            # Getting the type of 'gc' (line 277)
            gc_263583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 38), 'gc', False)
            # Obtaining the member 'get_wxcolour' of a type (line 277)
            get_wxcolour_263584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 38), gc_263583, 'get_wxcolour')
            # Calling get_wxcolour(args, kwargs) (line 277)
            get_wxcolour_call_result_263587 = invoke(stypy.reporting.localization.Localization(__file__, 277, 38), get_wxcolour_263584, *[rgbFace_263585], **kwargs_263586)
            
            # Processing the call keyword arguments (line 277)
            kwargs_263588 = {}
            # Getting the type of 'wx' (line 277)
            wx_263581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 29), 'wx', False)
            # Obtaining the member 'Brush' of a type (line 277)
            Brush_263582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 29), wx_263581, 'Brush')
            # Calling Brush(args, kwargs) (line 277)
            Brush_call_result_263589 = invoke(stypy.reporting.localization.Localization(__file__, 277, 29), Brush_263582, *[get_wxcolour_call_result_263587], **kwargs_263588)
            
            # Processing the call keyword arguments (line 277)
            kwargs_263590 = {}
            # Getting the type of 'gfx_ctx' (line 277)
            gfx_ctx_263579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'gfx_ctx', False)
            # Obtaining the member 'SetBrush' of a type (line 277)
            SetBrush_263580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 12), gfx_ctx_263579, 'SetBrush')
            # Calling SetBrush(args, kwargs) (line 277)
            SetBrush_call_result_263591 = invoke(stypy.reporting.localization.Localization(__file__, 277, 12), SetBrush_263580, *[Brush_call_result_263589], **kwargs_263590)
            
            
            # Call to DrawPath(...): (line 278)
            # Processing the call arguments (line 278)
            # Getting the type of 'wxpath' (line 278)
            wxpath_263594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 29), 'wxpath', False)
            # Processing the call keyword arguments (line 278)
            kwargs_263595 = {}
            # Getting the type of 'gfx_ctx' (line 278)
            gfx_ctx_263592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 12), 'gfx_ctx', False)
            # Obtaining the member 'DrawPath' of a type (line 278)
            DrawPath_263593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 12), gfx_ctx_263592, 'DrawPath')
            # Calling DrawPath(args, kwargs) (line 278)
            DrawPath_call_result_263596 = invoke(stypy.reporting.localization.Localization(__file__, 278, 12), DrawPath_263593, *[wxpath_263594], **kwargs_263595)
            

            if more_types_in_union_263578:
                # Runtime conditional SSA for else branch (line 276)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_263577) or more_types_in_union_263578):
            
            # Call to StrokePath(...): (line 280)
            # Processing the call arguments (line 280)
            # Getting the type of 'wxpath' (line 280)
            wxpath_263599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 31), 'wxpath', False)
            # Processing the call keyword arguments (line 280)
            kwargs_263600 = {}
            # Getting the type of 'gfx_ctx' (line 280)
            gfx_ctx_263597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 12), 'gfx_ctx', False)
            # Obtaining the member 'StrokePath' of a type (line 280)
            StrokePath_263598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 12), gfx_ctx_263597, 'StrokePath')
            # Calling StrokePath(args, kwargs) (line 280)
            StrokePath_call_result_263601 = invoke(stypy.reporting.localization.Localization(__file__, 280, 12), StrokePath_263598, *[wxpath_263599], **kwargs_263600)
            

            if (may_be_263577 and more_types_in_union_263578):
                # SSA join for if statement (line 276)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to unselect(...): (line 281)
        # Processing the call keyword arguments (line 281)
        kwargs_263604 = {}
        # Getting the type of 'gc' (line 281)
        gc_263602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 8), 'gc', False)
        # Obtaining the member 'unselect' of a type (line 281)
        unselect_263603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 8), gc_263602, 'unselect')
        # Calling unselect(args, kwargs) (line 281)
        unselect_call_result_263605 = invoke(stypy.reporting.localization.Localization(__file__, 281, 8), unselect_263603, *[], **kwargs_263604)
        
        
        # ################# End of 'draw_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_path' in the type store
        # Getting the type of 'stypy_return_type' (line 269)
        stypy_return_type_263606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263606)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_path'
        return stypy_return_type_263606


    @norecursion
    def draw_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_image'
        module_type_store = module_type_store.open_function_context('draw_image', 283, 4, False)
        # Assigning a type to the variable 'self' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererWx.draw_image.__dict__.__setitem__('stypy_localization', localization)
        RendererWx.draw_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererWx.draw_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererWx.draw_image.__dict__.__setitem__('stypy_function_name', 'RendererWx.draw_image')
        RendererWx.draw_image.__dict__.__setitem__('stypy_param_names_list', ['gc', 'x', 'y', 'im'])
        RendererWx.draw_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererWx.draw_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererWx.draw_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererWx.draw_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererWx.draw_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererWx.draw_image.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererWx.draw_image', ['gc', 'x', 'y', 'im'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_image', localization, ['gc', 'x', 'y', 'im'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_image(...)' code ##################

        
        # Assigning a Call to a Name (line 284):
        
        # Assigning a Call to a Name (line 284):
        
        # Call to get_clip_rectangle(...): (line 284)
        # Processing the call keyword arguments (line 284)
        kwargs_263609 = {}
        # Getting the type of 'gc' (line 284)
        gc_263607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 15), 'gc', False)
        # Obtaining the member 'get_clip_rectangle' of a type (line 284)
        get_clip_rectangle_263608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 15), gc_263607, 'get_clip_rectangle')
        # Calling get_clip_rectangle(args, kwargs) (line 284)
        get_clip_rectangle_call_result_263610 = invoke(stypy.reporting.localization.Localization(__file__, 284, 15), get_clip_rectangle_263608, *[], **kwargs_263609)
        
        # Assigning a type to the variable 'bbox' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 8), 'bbox', get_clip_rectangle_call_result_263610)
        
        # Type idiom detected: calculating its left and rigth part (line 285)
        # Getting the type of 'bbox' (line 285)
        bbox_263611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 8), 'bbox')
        # Getting the type of 'None' (line 285)
        None_263612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 23), 'None')
        
        (may_be_263613, more_types_in_union_263614) = may_not_be_none(bbox_263611, None_263612)

        if may_be_263613:

            if more_types_in_union_263614:
                # Runtime conditional SSA (line 285)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Tuple (line 286):
            
            # Assigning a Subscript to a Name (line 286):
            
            # Obtaining the type of the subscript
            int_263615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 12), 'int')
            # Getting the type of 'bbox' (line 286)
            bbox_263616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 25), 'bbox')
            # Obtaining the member 'bounds' of a type (line 286)
            bounds_263617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 25), bbox_263616, 'bounds')
            # Obtaining the member '__getitem__' of a type (line 286)
            getitem___263618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 12), bounds_263617, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 286)
            subscript_call_result_263619 = invoke(stypy.reporting.localization.Localization(__file__, 286, 12), getitem___263618, int_263615)
            
            # Assigning a type to the variable 'tuple_var_assignment_263004' (line 286)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 12), 'tuple_var_assignment_263004', subscript_call_result_263619)
            
            # Assigning a Subscript to a Name (line 286):
            
            # Obtaining the type of the subscript
            int_263620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 12), 'int')
            # Getting the type of 'bbox' (line 286)
            bbox_263621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 25), 'bbox')
            # Obtaining the member 'bounds' of a type (line 286)
            bounds_263622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 25), bbox_263621, 'bounds')
            # Obtaining the member '__getitem__' of a type (line 286)
            getitem___263623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 12), bounds_263622, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 286)
            subscript_call_result_263624 = invoke(stypy.reporting.localization.Localization(__file__, 286, 12), getitem___263623, int_263620)
            
            # Assigning a type to the variable 'tuple_var_assignment_263005' (line 286)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 12), 'tuple_var_assignment_263005', subscript_call_result_263624)
            
            # Assigning a Subscript to a Name (line 286):
            
            # Obtaining the type of the subscript
            int_263625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 12), 'int')
            # Getting the type of 'bbox' (line 286)
            bbox_263626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 25), 'bbox')
            # Obtaining the member 'bounds' of a type (line 286)
            bounds_263627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 25), bbox_263626, 'bounds')
            # Obtaining the member '__getitem__' of a type (line 286)
            getitem___263628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 12), bounds_263627, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 286)
            subscript_call_result_263629 = invoke(stypy.reporting.localization.Localization(__file__, 286, 12), getitem___263628, int_263625)
            
            # Assigning a type to the variable 'tuple_var_assignment_263006' (line 286)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 12), 'tuple_var_assignment_263006', subscript_call_result_263629)
            
            # Assigning a Subscript to a Name (line 286):
            
            # Obtaining the type of the subscript
            int_263630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 12), 'int')
            # Getting the type of 'bbox' (line 286)
            bbox_263631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 25), 'bbox')
            # Obtaining the member 'bounds' of a type (line 286)
            bounds_263632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 25), bbox_263631, 'bounds')
            # Obtaining the member '__getitem__' of a type (line 286)
            getitem___263633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 12), bounds_263632, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 286)
            subscript_call_result_263634 = invoke(stypy.reporting.localization.Localization(__file__, 286, 12), getitem___263633, int_263630)
            
            # Assigning a type to the variable 'tuple_var_assignment_263007' (line 286)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 12), 'tuple_var_assignment_263007', subscript_call_result_263634)
            
            # Assigning a Name to a Name (line 286):
            # Getting the type of 'tuple_var_assignment_263004' (line 286)
            tuple_var_assignment_263004_263635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 12), 'tuple_var_assignment_263004')
            # Assigning a type to the variable 'l' (line 286)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 12), 'l', tuple_var_assignment_263004_263635)
            
            # Assigning a Name to a Name (line 286):
            # Getting the type of 'tuple_var_assignment_263005' (line 286)
            tuple_var_assignment_263005_263636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 12), 'tuple_var_assignment_263005')
            # Assigning a type to the variable 'b' (line 286)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 15), 'b', tuple_var_assignment_263005_263636)
            
            # Assigning a Name to a Name (line 286):
            # Getting the type of 'tuple_var_assignment_263006' (line 286)
            tuple_var_assignment_263006_263637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 12), 'tuple_var_assignment_263006')
            # Assigning a type to the variable 'w' (line 286)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 18), 'w', tuple_var_assignment_263006_263637)
            
            # Assigning a Name to a Name (line 286):
            # Getting the type of 'tuple_var_assignment_263007' (line 286)
            tuple_var_assignment_263007_263638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 12), 'tuple_var_assignment_263007')
            # Assigning a type to the variable 'h' (line 286)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 21), 'h', tuple_var_assignment_263007_263638)

            if more_types_in_union_263614:
                # Runtime conditional SSA for else branch (line 285)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_263613) or more_types_in_union_263614):
            
            # Assigning a Num to a Name (line 288):
            
            # Assigning a Num to a Name (line 288):
            int_263639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 288, 16), 'int')
            # Assigning a type to the variable 'l' (line 288)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 288, 12), 'l', int_263639)
            
            # Assigning a Num to a Name (line 289):
            
            # Assigning a Num to a Name (line 289):
            int_263640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 16), 'int')
            # Assigning a type to the variable 'b' (line 289)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 289, 12), 'b', int_263640)
            
            # Assigning a Attribute to a Name (line 290):
            
            # Assigning a Attribute to a Name (line 290):
            # Getting the type of 'self' (line 290)
            self_263641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 16), 'self')
            # Obtaining the member 'width' of a type (line 290)
            width_263642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 16), self_263641, 'width')
            # Assigning a type to the variable 'w' (line 290)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 12), 'w', width_263642)
            
            # Assigning a Attribute to a Name (line 291):
            
            # Assigning a Attribute to a Name (line 291):
            # Getting the type of 'self' (line 291)
            self_263643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 16), 'self')
            # Obtaining the member 'height' of a type (line 291)
            height_263644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 291, 16), self_263643, 'height')
            # Assigning a type to the variable 'h' (line 291)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 12), 'h', height_263644)

            if (may_be_263613 and more_types_in_union_263614):
                # SSA join for if statement (line 285)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Subscript to a Tuple (line 292):
        
        # Assigning a Subscript to a Name (line 292):
        
        # Obtaining the type of the subscript
        int_263645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 8), 'int')
        
        # Obtaining the type of the subscript
        int_263646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 31), 'int')
        slice_263647 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 292, 21), None, int_263646, None)
        # Getting the type of 'im' (line 292)
        im_263648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 21), 'im')
        # Obtaining the member 'shape' of a type (line 292)
        shape_263649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 21), im_263648, 'shape')
        # Obtaining the member '__getitem__' of a type (line 292)
        getitem___263650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 21), shape_263649, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 292)
        subscript_call_result_263651 = invoke(stypy.reporting.localization.Localization(__file__, 292, 21), getitem___263650, slice_263647)
        
        # Obtaining the member '__getitem__' of a type (line 292)
        getitem___263652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 8), subscript_call_result_263651, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 292)
        subscript_call_result_263653 = invoke(stypy.reporting.localization.Localization(__file__, 292, 8), getitem___263652, int_263645)
        
        # Assigning a type to the variable 'tuple_var_assignment_263008' (line 292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 8), 'tuple_var_assignment_263008', subscript_call_result_263653)
        
        # Assigning a Subscript to a Name (line 292):
        
        # Obtaining the type of the subscript
        int_263654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 8), 'int')
        
        # Obtaining the type of the subscript
        int_263655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 31), 'int')
        slice_263656 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 292, 21), None, int_263655, None)
        # Getting the type of 'im' (line 292)
        im_263657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 21), 'im')
        # Obtaining the member 'shape' of a type (line 292)
        shape_263658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 21), im_263657, 'shape')
        # Obtaining the member '__getitem__' of a type (line 292)
        getitem___263659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 21), shape_263658, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 292)
        subscript_call_result_263660 = invoke(stypy.reporting.localization.Localization(__file__, 292, 21), getitem___263659, slice_263656)
        
        # Obtaining the member '__getitem__' of a type (line 292)
        getitem___263661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 8), subscript_call_result_263660, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 292)
        subscript_call_result_263662 = invoke(stypy.reporting.localization.Localization(__file__, 292, 8), getitem___263661, int_263654)
        
        # Assigning a type to the variable 'tuple_var_assignment_263009' (line 292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 8), 'tuple_var_assignment_263009', subscript_call_result_263662)
        
        # Assigning a Name to a Name (line 292):
        # Getting the type of 'tuple_var_assignment_263008' (line 292)
        tuple_var_assignment_263008_263663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 8), 'tuple_var_assignment_263008')
        # Assigning a type to the variable 'rows' (line 292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 8), 'rows', tuple_var_assignment_263008_263663)
        
        # Assigning a Name to a Name (line 292):
        # Getting the type of 'tuple_var_assignment_263009' (line 292)
        tuple_var_assignment_263009_263664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 8), 'tuple_var_assignment_263009')
        # Assigning a type to the variable 'cols' (line 292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 14), 'cols', tuple_var_assignment_263009_263664)
        
        # Assigning a Call to a Name (line 293):
        
        # Assigning a Call to a Name (line 293):
        
        # Call to BitmapFromBuffer(...): (line 293)
        # Processing the call arguments (line 293)
        # Getting the type of 'cols' (line 293)
        cols_263667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 38), 'cols', False)
        # Getting the type of 'rows' (line 293)
        rows_263668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 44), 'rows', False)
        
        # Call to tostring(...): (line 293)
        # Processing the call keyword arguments (line 293)
        kwargs_263671 = {}
        # Getting the type of 'im' (line 293)
        im_263669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 50), 'im', False)
        # Obtaining the member 'tostring' of a type (line 293)
        tostring_263670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 50), im_263669, 'tostring')
        # Calling tostring(args, kwargs) (line 293)
        tostring_call_result_263672 = invoke(stypy.reporting.localization.Localization(__file__, 293, 50), tostring_263670, *[], **kwargs_263671)
        
        # Processing the call keyword arguments (line 293)
        kwargs_263673 = {}
        # Getting the type of 'wxc' (line 293)
        wxc_263665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 17), 'wxc', False)
        # Obtaining the member 'BitmapFromBuffer' of a type (line 293)
        BitmapFromBuffer_263666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 17), wxc_263665, 'BitmapFromBuffer')
        # Calling BitmapFromBuffer(args, kwargs) (line 293)
        BitmapFromBuffer_call_result_263674 = invoke(stypy.reporting.localization.Localization(__file__, 293, 17), BitmapFromBuffer_263666, *[cols_263667, rows_263668, tostring_call_result_263672], **kwargs_263673)
        
        # Assigning a type to the variable 'bitmap' (line 293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 293, 8), 'bitmap', BitmapFromBuffer_call_result_263674)
        
        # Assigning a Call to a Name (line 294):
        
        # Assigning a Call to a Name (line 294):
        
        # Call to get_gc(...): (line 294)
        # Processing the call keyword arguments (line 294)
        kwargs_263677 = {}
        # Getting the type of 'self' (line 294)
        self_263675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 13), 'self', False)
        # Obtaining the member 'get_gc' of a type (line 294)
        get_gc_263676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 294, 13), self_263675, 'get_gc')
        # Calling get_gc(args, kwargs) (line 294)
        get_gc_call_result_263678 = invoke(stypy.reporting.localization.Localization(__file__, 294, 13), get_gc_263676, *[], **kwargs_263677)
        
        # Assigning a type to the variable 'gc' (line 294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 294, 8), 'gc', get_gc_call_result_263678)
        
        # Call to select(...): (line 295)
        # Processing the call keyword arguments (line 295)
        kwargs_263681 = {}
        # Getting the type of 'gc' (line 295)
        gc_263679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 8), 'gc', False)
        # Obtaining the member 'select' of a type (line 295)
        select_263680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 8), gc_263679, 'select')
        # Calling select(args, kwargs) (line 295)
        select_call_result_263682 = invoke(stypy.reporting.localization.Localization(__file__, 295, 8), select_263680, *[], **kwargs_263681)
        
        
        # Call to DrawBitmap(...): (line 296)
        # Processing the call arguments (line 296)
        # Getting the type of 'bitmap' (line 296)
        bitmap_263686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 30), 'bitmap', False)
        
        # Call to int(...): (line 296)
        # Processing the call arguments (line 296)
        # Getting the type of 'l' (line 296)
        l_263688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 42), 'l', False)
        # Processing the call keyword arguments (line 296)
        kwargs_263689 = {}
        # Getting the type of 'int' (line 296)
        int_263687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 38), 'int', False)
        # Calling int(args, kwargs) (line 296)
        int_call_result_263690 = invoke(stypy.reporting.localization.Localization(__file__, 296, 38), int_263687, *[l_263688], **kwargs_263689)
        
        
        # Call to int(...): (line 296)
        # Processing the call arguments (line 296)
        # Getting the type of 'self' (line 296)
        self_263692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 50), 'self', False)
        # Obtaining the member 'height' of a type (line 296)
        height_263693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 50), self_263692, 'height')
        # Getting the type of 'b' (line 296)
        b_263694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 64), 'b', False)
        # Applying the binary operator '-' (line 296)
        result_sub_263695 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 50), '-', height_263693, b_263694)
        
        # Processing the call keyword arguments (line 296)
        kwargs_263696 = {}
        # Getting the type of 'int' (line 296)
        int_263691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 46), 'int', False)
        # Calling int(args, kwargs) (line 296)
        int_call_result_263697 = invoke(stypy.reporting.localization.Localization(__file__, 296, 46), int_263691, *[result_sub_263695], **kwargs_263696)
        
        
        # Call to int(...): (line 297)
        # Processing the call arguments (line 297)
        # Getting the type of 'w' (line 297)
        w_263699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 34), 'w', False)
        # Processing the call keyword arguments (line 297)
        kwargs_263700 = {}
        # Getting the type of 'int' (line 297)
        int_263698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 30), 'int', False)
        # Calling int(args, kwargs) (line 297)
        int_call_result_263701 = invoke(stypy.reporting.localization.Localization(__file__, 297, 30), int_263698, *[w_263699], **kwargs_263700)
        
        
        # Call to int(...): (line 297)
        # Processing the call arguments (line 297)
        
        # Getting the type of 'h' (line 297)
        h_263703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 43), 'h', False)
        # Applying the 'usub' unary operator (line 297)
        result___neg___263704 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 42), 'usub', h_263703)
        
        # Processing the call keyword arguments (line 297)
        kwargs_263705 = {}
        # Getting the type of 'int' (line 297)
        int_263702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 38), 'int', False)
        # Calling int(args, kwargs) (line 297)
        int_call_result_263706 = invoke(stypy.reporting.localization.Localization(__file__, 297, 38), int_263702, *[result___neg___263704], **kwargs_263705)
        
        # Processing the call keyword arguments (line 296)
        kwargs_263707 = {}
        # Getting the type of 'gc' (line 296)
        gc_263683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 8), 'gc', False)
        # Obtaining the member 'gfx_ctx' of a type (line 296)
        gfx_ctx_263684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 8), gc_263683, 'gfx_ctx')
        # Obtaining the member 'DrawBitmap' of a type (line 296)
        DrawBitmap_263685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 8), gfx_ctx_263684, 'DrawBitmap')
        # Calling DrawBitmap(args, kwargs) (line 296)
        DrawBitmap_call_result_263708 = invoke(stypy.reporting.localization.Localization(__file__, 296, 8), DrawBitmap_263685, *[bitmap_263686, int_call_result_263690, int_call_result_263697, int_call_result_263701, int_call_result_263706], **kwargs_263707)
        
        
        # Call to unselect(...): (line 298)
        # Processing the call keyword arguments (line 298)
        kwargs_263711 = {}
        # Getting the type of 'gc' (line 298)
        gc_263709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 'gc', False)
        # Obtaining the member 'unselect' of a type (line 298)
        unselect_263710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 8), gc_263709, 'unselect')
        # Calling unselect(args, kwargs) (line 298)
        unselect_call_result_263712 = invoke(stypy.reporting.localization.Localization(__file__, 298, 8), unselect_263710, *[], **kwargs_263711)
        
        
        # ################# End of 'draw_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_image' in the type store
        # Getting the type of 'stypy_return_type' (line 283)
        stypy_return_type_263713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263713)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_image'
        return stypy_return_type_263713


    @norecursion
    def draw_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 300)
        False_263714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 57), 'False')
        # Getting the type of 'None' (line 300)
        None_263715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 70), 'None')
        defaults = [False_263714, None_263715]
        # Create a new context for function 'draw_text'
        module_type_store = module_type_store.open_function_context('draw_text', 300, 4, False)
        # Assigning a type to the variable 'self' (line 301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererWx.draw_text.__dict__.__setitem__('stypy_localization', localization)
        RendererWx.draw_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererWx.draw_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererWx.draw_text.__dict__.__setitem__('stypy_function_name', 'RendererWx.draw_text')
        RendererWx.draw_text.__dict__.__setitem__('stypy_param_names_list', ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'])
        RendererWx.draw_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererWx.draw_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererWx.draw_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererWx.draw_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererWx.draw_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererWx.draw_text.__dict__.__setitem__('stypy_declared_arg_number', 9)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererWx.draw_text', ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_text', localization, ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_text(...)' code ##################

        
        # Getting the type of 'ismath' (line 301)
        ismath_263716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 11), 'ismath')
        # Testing the type of an if condition (line 301)
        if_condition_263717 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 301, 8), ismath_263716)
        # Assigning a type to the variable 'if_condition_263717' (line 301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 8), 'if_condition_263717', if_condition_263717)
        # SSA begins for if statement (line 301)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 302):
        
        # Assigning a Call to a Name (line 302):
        
        # Call to strip_math(...): (line 302)
        # Processing the call arguments (line 302)
        # Getting the type of 's' (line 302)
        s_263720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 32), 's', False)
        # Processing the call keyword arguments (line 302)
        kwargs_263721 = {}
        # Getting the type of 'self' (line 302)
        self_263718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 16), 'self', False)
        # Obtaining the member 'strip_math' of a type (line 302)
        strip_math_263719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 16), self_263718, 'strip_math')
        # Calling strip_math(args, kwargs) (line 302)
        strip_math_call_result_263722 = invoke(stypy.reporting.localization.Localization(__file__, 302, 16), strip_math_263719, *[s_263720], **kwargs_263721)
        
        # Assigning a type to the variable 's' (line 302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 302, 12), 's', strip_math_call_result_263722)
        # SSA join for if statement (line 301)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to DEBUG_MSG(...): (line 303)
        # Processing the call arguments (line 303)
        unicode_263724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 303, 18), 'unicode', u'draw_text()')
        int_263725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 303, 33), 'int')
        # Getting the type of 'self' (line 303)
        self_263726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 36), 'self', False)
        # Processing the call keyword arguments (line 303)
        kwargs_263727 = {}
        # Getting the type of 'DEBUG_MSG' (line 303)
        DEBUG_MSG_263723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 303)
        DEBUG_MSG_call_result_263728 = invoke(stypy.reporting.localization.Localization(__file__, 303, 8), DEBUG_MSG_263723, *[unicode_263724, int_263725, self_263726], **kwargs_263727)
        
        
        # Call to select(...): (line 304)
        # Processing the call keyword arguments (line 304)
        kwargs_263731 = {}
        # Getting the type of 'gc' (line 304)
        gc_263729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 8), 'gc', False)
        # Obtaining the member 'select' of a type (line 304)
        select_263730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 8), gc_263729, 'select')
        # Calling select(args, kwargs) (line 304)
        select_call_result_263732 = invoke(stypy.reporting.localization.Localization(__file__, 304, 8), select_263730, *[], **kwargs_263731)
        
        
        # Call to handle_clip_rectangle(...): (line 305)
        # Processing the call arguments (line 305)
        # Getting the type of 'gc' (line 305)
        gc_263735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 35), 'gc', False)
        # Processing the call keyword arguments (line 305)
        kwargs_263736 = {}
        # Getting the type of 'self' (line 305)
        self_263733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 8), 'self', False)
        # Obtaining the member 'handle_clip_rectangle' of a type (line 305)
        handle_clip_rectangle_263734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 8), self_263733, 'handle_clip_rectangle')
        # Calling handle_clip_rectangle(args, kwargs) (line 305)
        handle_clip_rectangle_call_result_263737 = invoke(stypy.reporting.localization.Localization(__file__, 305, 8), handle_clip_rectangle_263734, *[gc_263735], **kwargs_263736)
        
        
        # Assigning a Attribute to a Name (line 306):
        
        # Assigning a Attribute to a Name (line 306):
        # Getting the type of 'gc' (line 306)
        gc_263738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 18), 'gc')
        # Obtaining the member 'gfx_ctx' of a type (line 306)
        gfx_ctx_263739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 18), gc_263738, 'gfx_ctx')
        # Assigning a type to the variable 'gfx_ctx' (line 306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 8), 'gfx_ctx', gfx_ctx_263739)
        
        # Assigning a Call to a Name (line 308):
        
        # Assigning a Call to a Name (line 308):
        
        # Call to get_wx_font(...): (line 308)
        # Processing the call arguments (line 308)
        # Getting the type of 's' (line 308)
        s_263742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 32), 's', False)
        # Getting the type of 'prop' (line 308)
        prop_263743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 35), 'prop', False)
        # Processing the call keyword arguments (line 308)
        kwargs_263744 = {}
        # Getting the type of 'self' (line 308)
        self_263740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 15), 'self', False)
        # Obtaining the member 'get_wx_font' of a type (line 308)
        get_wx_font_263741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 15), self_263740, 'get_wx_font')
        # Calling get_wx_font(args, kwargs) (line 308)
        get_wx_font_call_result_263745 = invoke(stypy.reporting.localization.Localization(__file__, 308, 15), get_wx_font_263741, *[s_263742, prop_263743], **kwargs_263744)
        
        # Assigning a type to the variable 'font' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'font', get_wx_font_call_result_263745)
        
        # Assigning a Call to a Name (line 309):
        
        # Assigning a Call to a Name (line 309):
        
        # Call to get_wxcolour(...): (line 309)
        # Processing the call arguments (line 309)
        
        # Call to get_rgb(...): (line 309)
        # Processing the call keyword arguments (line 309)
        kwargs_263750 = {}
        # Getting the type of 'gc' (line 309)
        gc_263748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 32), 'gc', False)
        # Obtaining the member 'get_rgb' of a type (line 309)
        get_rgb_263749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 32), gc_263748, 'get_rgb')
        # Calling get_rgb(args, kwargs) (line 309)
        get_rgb_call_result_263751 = invoke(stypy.reporting.localization.Localization(__file__, 309, 32), get_rgb_263749, *[], **kwargs_263750)
        
        # Processing the call keyword arguments (line 309)
        kwargs_263752 = {}
        # Getting the type of 'gc' (line 309)
        gc_263746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 16), 'gc', False)
        # Obtaining the member 'get_wxcolour' of a type (line 309)
        get_wxcolour_263747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 16), gc_263746, 'get_wxcolour')
        # Calling get_wxcolour(args, kwargs) (line 309)
        get_wxcolour_call_result_263753 = invoke(stypy.reporting.localization.Localization(__file__, 309, 16), get_wxcolour_263747, *[get_rgb_call_result_263751], **kwargs_263752)
        
        # Assigning a type to the variable 'color' (line 309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 8), 'color', get_wxcolour_call_result_263753)
        
        # Call to SetFont(...): (line 310)
        # Processing the call arguments (line 310)
        # Getting the type of 'font' (line 310)
        font_263756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 24), 'font', False)
        # Getting the type of 'color' (line 310)
        color_263757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 30), 'color', False)
        # Processing the call keyword arguments (line 310)
        kwargs_263758 = {}
        # Getting the type of 'gfx_ctx' (line 310)
        gfx_ctx_263754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 8), 'gfx_ctx', False)
        # Obtaining the member 'SetFont' of a type (line 310)
        SetFont_263755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 8), gfx_ctx_263754, 'SetFont')
        # Calling SetFont(args, kwargs) (line 310)
        SetFont_call_result_263759 = invoke(stypy.reporting.localization.Localization(__file__, 310, 8), SetFont_263755, *[font_263756, color_263757], **kwargs_263758)
        
        
        # Assigning a Call to a Tuple (line 312):
        
        # Assigning a Call to a Name:
        
        # Call to get_text_width_height_descent(...): (line 312)
        # Processing the call arguments (line 312)
        # Getting the type of 's' (line 312)
        s_263762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 53), 's', False)
        # Getting the type of 'prop' (line 312)
        prop_263763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 56), 'prop', False)
        # Getting the type of 'ismath' (line 312)
        ismath_263764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 62), 'ismath', False)
        # Processing the call keyword arguments (line 312)
        kwargs_263765 = {}
        # Getting the type of 'self' (line 312)
        self_263760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 18), 'self', False)
        # Obtaining the member 'get_text_width_height_descent' of a type (line 312)
        get_text_width_height_descent_263761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 312, 18), self_263760, 'get_text_width_height_descent')
        # Calling get_text_width_height_descent(args, kwargs) (line 312)
        get_text_width_height_descent_call_result_263766 = invoke(stypy.reporting.localization.Localization(__file__, 312, 18), get_text_width_height_descent_263761, *[s_263762, prop_263763, ismath_263764], **kwargs_263765)
        
        # Assigning a type to the variable 'call_assignment_263010' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'call_assignment_263010', get_text_width_height_descent_call_result_263766)
        
        # Assigning a Call to a Name (line 312):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_263769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 8), 'int')
        # Processing the call keyword arguments
        kwargs_263770 = {}
        # Getting the type of 'call_assignment_263010' (line 312)
        call_assignment_263010_263767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'call_assignment_263010', False)
        # Obtaining the member '__getitem__' of a type (line 312)
        getitem___263768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 312, 8), call_assignment_263010_263767, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_263771 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___263768, *[int_263769], **kwargs_263770)
        
        # Assigning a type to the variable 'call_assignment_263011' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'call_assignment_263011', getitem___call_result_263771)
        
        # Assigning a Name to a Name (line 312):
        # Getting the type of 'call_assignment_263011' (line 312)
        call_assignment_263011_263772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'call_assignment_263011')
        # Assigning a type to the variable 'w' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'w', call_assignment_263011_263772)
        
        # Assigning a Call to a Name (line 312):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_263775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 8), 'int')
        # Processing the call keyword arguments
        kwargs_263776 = {}
        # Getting the type of 'call_assignment_263010' (line 312)
        call_assignment_263010_263773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'call_assignment_263010', False)
        # Obtaining the member '__getitem__' of a type (line 312)
        getitem___263774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 312, 8), call_assignment_263010_263773, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_263777 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___263774, *[int_263775], **kwargs_263776)
        
        # Assigning a type to the variable 'call_assignment_263012' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'call_assignment_263012', getitem___call_result_263777)
        
        # Assigning a Name to a Name (line 312):
        # Getting the type of 'call_assignment_263012' (line 312)
        call_assignment_263012_263778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'call_assignment_263012')
        # Assigning a type to the variable 'h' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 11), 'h', call_assignment_263012_263778)
        
        # Assigning a Call to a Name (line 312):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_263781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 8), 'int')
        # Processing the call keyword arguments
        kwargs_263782 = {}
        # Getting the type of 'call_assignment_263010' (line 312)
        call_assignment_263010_263779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'call_assignment_263010', False)
        # Obtaining the member '__getitem__' of a type (line 312)
        getitem___263780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 312, 8), call_assignment_263010_263779, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_263783 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___263780, *[int_263781], **kwargs_263782)
        
        # Assigning a type to the variable 'call_assignment_263013' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'call_assignment_263013', getitem___call_result_263783)
        
        # Assigning a Name to a Name (line 312):
        # Getting the type of 'call_assignment_263013' (line 312)
        call_assignment_263013_263784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 8), 'call_assignment_263013')
        # Assigning a type to the variable 'd' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 14), 'd', call_assignment_263013_263784)
        
        # Assigning a Call to a Name (line 313):
        
        # Assigning a Call to a Name (line 313):
        
        # Call to int(...): (line 313)
        # Processing the call arguments (line 313)
        # Getting the type of 'x' (line 313)
        x_263786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 16), 'x', False)
        # Processing the call keyword arguments (line 313)
        kwargs_263787 = {}
        # Getting the type of 'int' (line 313)
        int_263785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 12), 'int', False)
        # Calling int(args, kwargs) (line 313)
        int_call_result_263788 = invoke(stypy.reporting.localization.Localization(__file__, 313, 12), int_263785, *[x_263786], **kwargs_263787)
        
        # Assigning a type to the variable 'x' (line 313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 8), 'x', int_call_result_263788)
        
        # Assigning a Call to a Name (line 314):
        
        # Assigning a Call to a Name (line 314):
        
        # Call to int(...): (line 314)
        # Processing the call arguments (line 314)
        # Getting the type of 'y' (line 314)
        y_263790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 16), 'y', False)
        # Getting the type of 'h' (line 314)
        h_263791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 20), 'h', False)
        # Applying the binary operator '-' (line 314)
        result_sub_263792 = python_operator(stypy.reporting.localization.Localization(__file__, 314, 16), '-', y_263790, h_263791)
        
        # Processing the call keyword arguments (line 314)
        kwargs_263793 = {}
        # Getting the type of 'int' (line 314)
        int_263789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 12), 'int', False)
        # Calling int(args, kwargs) (line 314)
        int_call_result_263794 = invoke(stypy.reporting.localization.Localization(__file__, 314, 12), int_263789, *[result_sub_263792], **kwargs_263793)
        
        # Assigning a type to the variable 'y' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'y', int_call_result_263794)
        
        
        # Getting the type of 'angle' (line 316)
        angle_263795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 11), 'angle')
        float_263796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 20), 'float')
        # Applying the binary operator '==' (line 316)
        result_eq_263797 = python_operator(stypy.reporting.localization.Localization(__file__, 316, 11), '==', angle_263795, float_263796)
        
        # Testing the type of an if condition (line 316)
        if_condition_263798 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 316, 8), result_eq_263797)
        # Assigning a type to the variable 'if_condition_263798' (line 316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'if_condition_263798', if_condition_263798)
        # SSA begins for if statement (line 316)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to DrawText(...): (line 317)
        # Processing the call arguments (line 317)
        # Getting the type of 's' (line 317)
        s_263801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 29), 's', False)
        # Getting the type of 'x' (line 317)
        x_263802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 32), 'x', False)
        # Getting the type of 'y' (line 317)
        y_263803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 35), 'y', False)
        # Processing the call keyword arguments (line 317)
        kwargs_263804 = {}
        # Getting the type of 'gfx_ctx' (line 317)
        gfx_ctx_263799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 12), 'gfx_ctx', False)
        # Obtaining the member 'DrawText' of a type (line 317)
        DrawText_263800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 12), gfx_ctx_263799, 'DrawText')
        # Calling DrawText(args, kwargs) (line 317)
        DrawText_call_result_263805 = invoke(stypy.reporting.localization.Localization(__file__, 317, 12), DrawText_263800, *[s_263801, x_263802, y_263803], **kwargs_263804)
        
        # SSA branch for the else part of an if statement (line 316)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 319):
        
        # Assigning a Call to a Name (line 319):
        
        # Call to radians(...): (line 319)
        # Processing the call arguments (line 319)
        # Getting the type of 'angle' (line 319)
        angle_263808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 32), 'angle', False)
        # Processing the call keyword arguments (line 319)
        kwargs_263809 = {}
        # Getting the type of 'math' (line 319)
        math_263806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 19), 'math', False)
        # Obtaining the member 'radians' of a type (line 319)
        radians_263807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 19), math_263806, 'radians')
        # Calling radians(args, kwargs) (line 319)
        radians_call_result_263810 = invoke(stypy.reporting.localization.Localization(__file__, 319, 19), radians_263807, *[angle_263808], **kwargs_263809)
        
        # Assigning a type to the variable 'rads' (line 319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 319, 12), 'rads', radians_call_result_263810)
        
        # Assigning a BinOp to a Name (line 320):
        
        # Assigning a BinOp to a Name (line 320):
        # Getting the type of 'h' (line 320)
        h_263811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 17), 'h')
        
        # Call to sin(...): (line 320)
        # Processing the call arguments (line 320)
        # Getting the type of 'rads' (line 320)
        rads_263814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 30), 'rads', False)
        # Processing the call keyword arguments (line 320)
        kwargs_263815 = {}
        # Getting the type of 'math' (line 320)
        math_263812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 21), 'math', False)
        # Obtaining the member 'sin' of a type (line 320)
        sin_263813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 21), math_263812, 'sin')
        # Calling sin(args, kwargs) (line 320)
        sin_call_result_263816 = invoke(stypy.reporting.localization.Localization(__file__, 320, 21), sin_263813, *[rads_263814], **kwargs_263815)
        
        # Applying the binary operator '*' (line 320)
        result_mul_263817 = python_operator(stypy.reporting.localization.Localization(__file__, 320, 17), '*', h_263811, sin_call_result_263816)
        
        # Assigning a type to the variable 'xo' (line 320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 320, 12), 'xo', result_mul_263817)
        
        # Assigning a BinOp to a Name (line 321):
        
        # Assigning a BinOp to a Name (line 321):
        # Getting the type of 'h' (line 321)
        h_263818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 17), 'h')
        
        # Call to cos(...): (line 321)
        # Processing the call arguments (line 321)
        # Getting the type of 'rads' (line 321)
        rads_263821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 30), 'rads', False)
        # Processing the call keyword arguments (line 321)
        kwargs_263822 = {}
        # Getting the type of 'math' (line 321)
        math_263819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 21), 'math', False)
        # Obtaining the member 'cos' of a type (line 321)
        cos_263820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 21), math_263819, 'cos')
        # Calling cos(args, kwargs) (line 321)
        cos_call_result_263823 = invoke(stypy.reporting.localization.Localization(__file__, 321, 21), cos_263820, *[rads_263821], **kwargs_263822)
        
        # Applying the binary operator '*' (line 321)
        result_mul_263824 = python_operator(stypy.reporting.localization.Localization(__file__, 321, 17), '*', h_263818, cos_call_result_263823)
        
        # Assigning a type to the variable 'yo' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 12), 'yo', result_mul_263824)
        
        # Call to DrawRotatedText(...): (line 322)
        # Processing the call arguments (line 322)
        # Getting the type of 's' (line 322)
        s_263827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 36), 's', False)
        # Getting the type of 'x' (line 322)
        x_263828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 39), 'x', False)
        # Getting the type of 'xo' (line 322)
        xo_263829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 43), 'xo', False)
        # Applying the binary operator '-' (line 322)
        result_sub_263830 = python_operator(stypy.reporting.localization.Localization(__file__, 322, 39), '-', x_263828, xo_263829)
        
        # Getting the type of 'y' (line 322)
        y_263831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 47), 'y', False)
        # Getting the type of 'yo' (line 322)
        yo_263832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 51), 'yo', False)
        # Applying the binary operator '-' (line 322)
        result_sub_263833 = python_operator(stypy.reporting.localization.Localization(__file__, 322, 47), '-', y_263831, yo_263832)
        
        # Getting the type of 'rads' (line 322)
        rads_263834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 55), 'rads', False)
        # Processing the call keyword arguments (line 322)
        kwargs_263835 = {}
        # Getting the type of 'gfx_ctx' (line 322)
        gfx_ctx_263825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 12), 'gfx_ctx', False)
        # Obtaining the member 'DrawRotatedText' of a type (line 322)
        DrawRotatedText_263826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 12), gfx_ctx_263825, 'DrawRotatedText')
        # Calling DrawRotatedText(args, kwargs) (line 322)
        DrawRotatedText_call_result_263836 = invoke(stypy.reporting.localization.Localization(__file__, 322, 12), DrawRotatedText_263826, *[s_263827, result_sub_263830, result_sub_263833, rads_263834], **kwargs_263835)
        
        # SSA join for if statement (line 316)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to unselect(...): (line 324)
        # Processing the call keyword arguments (line 324)
        kwargs_263839 = {}
        # Getting the type of 'gc' (line 324)
        gc_263837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 8), 'gc', False)
        # Obtaining the member 'unselect' of a type (line 324)
        unselect_263838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 8), gc_263837, 'unselect')
        # Calling unselect(args, kwargs) (line 324)
        unselect_call_result_263840 = invoke(stypy.reporting.localization.Localization(__file__, 324, 8), unselect_263838, *[], **kwargs_263839)
        
        
        # ################# End of 'draw_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_text' in the type store
        # Getting the type of 'stypy_return_type' (line 300)
        stypy_return_type_263841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263841)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_text'
        return stypy_return_type_263841


    @norecursion
    def new_gc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_gc'
        module_type_store = module_type_store.open_function_context('new_gc', 326, 4, False)
        # Assigning a type to the variable 'self' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererWx.new_gc.__dict__.__setitem__('stypy_localization', localization)
        RendererWx.new_gc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererWx.new_gc.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererWx.new_gc.__dict__.__setitem__('stypy_function_name', 'RendererWx.new_gc')
        RendererWx.new_gc.__dict__.__setitem__('stypy_param_names_list', [])
        RendererWx.new_gc.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererWx.new_gc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererWx.new_gc.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererWx.new_gc.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererWx.new_gc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererWx.new_gc.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererWx.new_gc', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_gc', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_gc(...)' code ##################

        unicode_263842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 329, (-1)), 'unicode', u'\n        Return an instance of a GraphicsContextWx, and sets the current gc copy\n        ')
        
        # Call to DEBUG_MSG(...): (line 330)
        # Processing the call arguments (line 330)
        unicode_263844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, 18), 'unicode', u'new_gc()')
        int_263845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, 30), 'int')
        # Getting the type of 'self' (line 330)
        self_263846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 33), 'self', False)
        # Processing the call keyword arguments (line 330)
        kwargs_263847 = {}
        # Getting the type of 'DEBUG_MSG' (line 330)
        DEBUG_MSG_263843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 330)
        DEBUG_MSG_call_result_263848 = invoke(stypy.reporting.localization.Localization(__file__, 330, 8), DEBUG_MSG_263843, *[unicode_263844, int_263845, self_263846], **kwargs_263847)
        
        
        # Assigning a Call to a Attribute (line 331):
        
        # Assigning a Call to a Attribute (line 331):
        
        # Call to GraphicsContextWx(...): (line 331)
        # Processing the call arguments (line 331)
        # Getting the type of 'self' (line 331)
        self_263850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 36), 'self', False)
        # Obtaining the member 'bitmap' of a type (line 331)
        bitmap_263851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 36), self_263850, 'bitmap')
        # Getting the type of 'self' (line 331)
        self_263852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 49), 'self', False)
        # Processing the call keyword arguments (line 331)
        kwargs_263853 = {}
        # Getting the type of 'GraphicsContextWx' (line 331)
        GraphicsContextWx_263849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 18), 'GraphicsContextWx', False)
        # Calling GraphicsContextWx(args, kwargs) (line 331)
        GraphicsContextWx_call_result_263854 = invoke(stypy.reporting.localization.Localization(__file__, 331, 18), GraphicsContextWx_263849, *[bitmap_263851, self_263852], **kwargs_263853)
        
        # Getting the type of 'self' (line 331)
        self_263855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 8), 'self')
        # Setting the type of the member 'gc' of a type (line 331)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 8), self_263855, 'gc', GraphicsContextWx_call_result_263854)
        
        # Call to select(...): (line 332)
        # Processing the call keyword arguments (line 332)
        kwargs_263859 = {}
        # Getting the type of 'self' (line 332)
        self_263856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 8), 'self', False)
        # Obtaining the member 'gc' of a type (line 332)
        gc_263857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 8), self_263856, 'gc')
        # Obtaining the member 'select' of a type (line 332)
        select_263858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 8), gc_263857, 'select')
        # Calling select(args, kwargs) (line 332)
        select_call_result_263860 = invoke(stypy.reporting.localization.Localization(__file__, 332, 8), select_263858, *[], **kwargs_263859)
        
        
        # Call to unselect(...): (line 333)
        # Processing the call keyword arguments (line 333)
        kwargs_263864 = {}
        # Getting the type of 'self' (line 333)
        self_263861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 8), 'self', False)
        # Obtaining the member 'gc' of a type (line 333)
        gc_263862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 8), self_263861, 'gc')
        # Obtaining the member 'unselect' of a type (line 333)
        unselect_263863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 8), gc_263862, 'unselect')
        # Calling unselect(args, kwargs) (line 333)
        unselect_call_result_263865 = invoke(stypy.reporting.localization.Localization(__file__, 333, 8), unselect_263863, *[], **kwargs_263864)
        
        # Getting the type of 'self' (line 334)
        self_263866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 15), 'self')
        # Obtaining the member 'gc' of a type (line 334)
        gc_263867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 15), self_263866, 'gc')
        # Assigning a type to the variable 'stypy_return_type' (line 334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 8), 'stypy_return_type', gc_263867)
        
        # ################# End of 'new_gc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_gc' in the type store
        # Getting the type of 'stypy_return_type' (line 326)
        stypy_return_type_263868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263868)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_gc'
        return stypy_return_type_263868


    @norecursion
    def get_gc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_gc'
        module_type_store = module_type_store.open_function_context('get_gc', 336, 4, False)
        # Assigning a type to the variable 'self' (line 337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererWx.get_gc.__dict__.__setitem__('stypy_localization', localization)
        RendererWx.get_gc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererWx.get_gc.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererWx.get_gc.__dict__.__setitem__('stypy_function_name', 'RendererWx.get_gc')
        RendererWx.get_gc.__dict__.__setitem__('stypy_param_names_list', [])
        RendererWx.get_gc.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererWx.get_gc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererWx.get_gc.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererWx.get_gc.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererWx.get_gc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererWx.get_gc.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererWx.get_gc', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_gc', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_gc(...)' code ##################

        unicode_263869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 339, (-1)), 'unicode', u'\n        Fetch the locally cached gc.\n        ')
        # Evaluating assert statement condition
        
        # Getting the type of 'self' (line 342)
        self_263870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 15), 'self')
        # Obtaining the member 'gc' of a type (line 342)
        gc_263871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 15), self_263870, 'gc')
        # Getting the type of 'None' (line 342)
        None_263872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 30), 'None')
        # Applying the binary operator 'isnot' (line 342)
        result_is_not_263873 = python_operator(stypy.reporting.localization.Localization(__file__, 342, 15), 'isnot', gc_263871, None_263872)
        
        # Getting the type of 'self' (line 343)
        self_263874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 15), 'self')
        # Obtaining the member 'gc' of a type (line 343)
        gc_263875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 15), self_263874, 'gc')
        # Assigning a type to the variable 'stypy_return_type' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'stypy_return_type', gc_263875)
        
        # ################# End of 'get_gc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_gc' in the type store
        # Getting the type of 'stypy_return_type' (line 336)
        stypy_return_type_263876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263876)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_gc'
        return stypy_return_type_263876


    @norecursion
    def get_wx_font(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_wx_font'
        module_type_store = module_type_store.open_function_context('get_wx_font', 345, 4, False)
        # Assigning a type to the variable 'self' (line 346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererWx.get_wx_font.__dict__.__setitem__('stypy_localization', localization)
        RendererWx.get_wx_font.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererWx.get_wx_font.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererWx.get_wx_font.__dict__.__setitem__('stypy_function_name', 'RendererWx.get_wx_font')
        RendererWx.get_wx_font.__dict__.__setitem__('stypy_param_names_list', ['s', 'prop'])
        RendererWx.get_wx_font.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererWx.get_wx_font.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererWx.get_wx_font.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererWx.get_wx_font.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererWx.get_wx_font.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererWx.get_wx_font.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererWx.get_wx_font', ['s', 'prop'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_wx_font', localization, ['s', 'prop'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_wx_font(...)' code ##################

        unicode_263877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 349, (-1)), 'unicode', u'\n        Return a wx font.  Cache instances in a font dictionary for\n        efficiency\n        ')
        
        # Call to DEBUG_MSG(...): (line 350)
        # Processing the call arguments (line 350)
        unicode_263879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 18), 'unicode', u'get_wx_font()')
        int_263880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 35), 'int')
        # Getting the type of 'self' (line 350)
        self_263881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 38), 'self', False)
        # Processing the call keyword arguments (line 350)
        kwargs_263882 = {}
        # Getting the type of 'DEBUG_MSG' (line 350)
        DEBUG_MSG_263878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 350)
        DEBUG_MSG_call_result_263883 = invoke(stypy.reporting.localization.Localization(__file__, 350, 8), DEBUG_MSG_263878, *[unicode_263879, int_263880, self_263881], **kwargs_263882)
        
        
        # Assigning a Call to a Name (line 352):
        
        # Assigning a Call to a Name (line 352):
        
        # Call to hash(...): (line 352)
        # Processing the call arguments (line 352)
        # Getting the type of 'prop' (line 352)
        prop_263885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 19), 'prop', False)
        # Processing the call keyword arguments (line 352)
        kwargs_263886 = {}
        # Getting the type of 'hash' (line 352)
        hash_263884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 14), 'hash', False)
        # Calling hash(args, kwargs) (line 352)
        hash_call_result_263887 = invoke(stypy.reporting.localization.Localization(__file__, 352, 14), hash_263884, *[prop_263885], **kwargs_263886)
        
        # Assigning a type to the variable 'key' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'key', hash_call_result_263887)
        
        # Assigning a Name to a Name (line 353):
        
        # Assigning a Name to a Name (line 353):
        # Getting the type of 'prop' (line 353)
        prop_263888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 19), 'prop')
        # Assigning a type to the variable 'fontprop' (line 353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 353, 8), 'fontprop', prop_263888)
        
        # Assigning a Call to a Name (line 354):
        
        # Assigning a Call to a Name (line 354):
        
        # Call to get_name(...): (line 354)
        # Processing the call keyword arguments (line 354)
        kwargs_263891 = {}
        # Getting the type of 'fontprop' (line 354)
        fontprop_263889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 19), 'fontprop', False)
        # Obtaining the member 'get_name' of a type (line 354)
        get_name_263890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 354, 19), fontprop_263889, 'get_name')
        # Calling get_name(args, kwargs) (line 354)
        get_name_call_result_263892 = invoke(stypy.reporting.localization.Localization(__file__, 354, 19), get_name_263890, *[], **kwargs_263891)
        
        # Assigning a type to the variable 'fontname' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 8), 'fontname', get_name_call_result_263892)
        
        # Assigning a Call to a Name (line 356):
        
        # Assigning a Call to a Name (line 356):
        
        # Call to get(...): (line 356)
        # Processing the call arguments (line 356)
        # Getting the type of 'key' (line 356)
        key_263896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 30), 'key', False)
        # Processing the call keyword arguments (line 356)
        kwargs_263897 = {}
        # Getting the type of 'self' (line 356)
        self_263893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 15), 'self', False)
        # Obtaining the member 'fontd' of a type (line 356)
        fontd_263894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 15), self_263893, 'fontd')
        # Obtaining the member 'get' of a type (line 356)
        get_263895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 15), fontd_263894, 'get')
        # Calling get(args, kwargs) (line 356)
        get_call_result_263898 = invoke(stypy.reporting.localization.Localization(__file__, 356, 15), get_263895, *[key_263896], **kwargs_263897)
        
        # Assigning a type to the variable 'font' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 8), 'font', get_call_result_263898)
        
        # Type idiom detected: calculating its left and rigth part (line 357)
        # Getting the type of 'font' (line 357)
        font_263899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 8), 'font')
        # Getting the type of 'None' (line 357)
        None_263900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 23), 'None')
        
        (may_be_263901, more_types_in_union_263902) = may_not_be_none(font_263899, None_263900)

        if may_be_263901:

            if more_types_in_union_263902:
                # Runtime conditional SSA (line 357)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'font' (line 358)
            font_263903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 19), 'font')
            # Assigning a type to the variable 'stypy_return_type' (line 358)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 358, 12), 'stypy_return_type', font_263903)

            if more_types_in_union_263902:
                # SSA join for if statement (line 357)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 361):
        
        # Assigning a Call to a Name (line 361):
        
        # Call to get(...): (line 361)
        # Processing the call arguments (line 361)
        # Getting the type of 'fontname' (line 361)
        fontname_263907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 40), 'fontname', False)
        # Getting the type of 'wx' (line 361)
        wx_263908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 50), 'wx', False)
        # Obtaining the member 'ROMAN' of a type (line 361)
        ROMAN_263909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 50), wx_263908, 'ROMAN')
        # Processing the call keyword arguments (line 361)
        kwargs_263910 = {}
        # Getting the type of 'self' (line 361)
        self_263904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 21), 'self', False)
        # Obtaining the member 'fontnames' of a type (line 361)
        fontnames_263905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 21), self_263904, 'fontnames')
        # Obtaining the member 'get' of a type (line 361)
        get_263906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 21), fontnames_263905, 'get')
        # Calling get(args, kwargs) (line 361)
        get_call_result_263911 = invoke(stypy.reporting.localization.Localization(__file__, 361, 21), get_263906, *[fontname_263907, ROMAN_263909], **kwargs_263910)
        
        # Assigning a type to the variable 'wxFontname' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'wxFontname', get_call_result_263911)
        
        # Assigning a Str to a Name (line 362):
        
        # Assigning a Str to a Name (line 362):
        unicode_263912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 21), 'unicode', u'')
        # Assigning a type to the variable 'wxFacename' (line 362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 8), 'wxFacename', unicode_263912)
        
        # Assigning a Call to a Name (line 366):
        
        # Assigning a Call to a Name (line 366):
        
        # Call to points_to_pixels(...): (line 366)
        # Processing the call arguments (line 366)
        
        # Call to get_size_in_points(...): (line 366)
        # Processing the call keyword arguments (line 366)
        kwargs_263917 = {}
        # Getting the type of 'fontprop' (line 366)
        fontprop_263915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 37), 'fontprop', False)
        # Obtaining the member 'get_size_in_points' of a type (line 366)
        get_size_in_points_263916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 37), fontprop_263915, 'get_size_in_points')
        # Calling get_size_in_points(args, kwargs) (line 366)
        get_size_in_points_call_result_263918 = invoke(stypy.reporting.localization.Localization(__file__, 366, 37), get_size_in_points_263916, *[], **kwargs_263917)
        
        # Processing the call keyword arguments (line 366)
        kwargs_263919 = {}
        # Getting the type of 'self' (line 366)
        self_263913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 15), 'self', False)
        # Obtaining the member 'points_to_pixels' of a type (line 366)
        points_to_pixels_263914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 15), self_263913, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 366)
        points_to_pixels_call_result_263920 = invoke(stypy.reporting.localization.Localization(__file__, 366, 15), points_to_pixels_263914, *[get_size_in_points_call_result_263918], **kwargs_263919)
        
        # Assigning a type to the variable 'size' (line 366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 8), 'size', points_to_pixels_call_result_263920)
        
        # Assigning a Call to a Name (line 368):
        
        # Assigning a Call to a Name (line 368):
        
        # Call to Font(...): (line 368)
        # Processing the call arguments (line 368)
        
        # Call to int(...): (line 368)
        # Processing the call arguments (line 368)
        # Getting the type of 'size' (line 368)
        size_263924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 27), 'size', False)
        float_263925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 368, 34), 'float')
        # Applying the binary operator '+' (line 368)
        result_add_263926 = python_operator(stypy.reporting.localization.Localization(__file__, 368, 27), '+', size_263924, float_263925)
        
        # Processing the call keyword arguments (line 368)
        kwargs_263927 = {}
        # Getting the type of 'int' (line 368)
        int_263923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 23), 'int', False)
        # Calling int(args, kwargs) (line 368)
        int_call_result_263928 = invoke(stypy.reporting.localization.Localization(__file__, 368, 23), int_263923, *[result_add_263926], **kwargs_263927)
        
        # Getting the type of 'wxFontname' (line 369)
        wxFontname_263929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 23), 'wxFontname', False)
        
        # Obtaining the type of the subscript
        
        # Call to get_style(...): (line 370)
        # Processing the call keyword arguments (line 370)
        kwargs_263932 = {}
        # Getting the type of 'fontprop' (line 370)
        fontprop_263930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 39), 'fontprop', False)
        # Obtaining the member 'get_style' of a type (line 370)
        get_style_263931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 39), fontprop_263930, 'get_style')
        # Calling get_style(args, kwargs) (line 370)
        get_style_call_result_263933 = invoke(stypy.reporting.localization.Localization(__file__, 370, 39), get_style_263931, *[], **kwargs_263932)
        
        # Getting the type of 'self' (line 370)
        self_263934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 23), 'self', False)
        # Obtaining the member 'fontangles' of a type (line 370)
        fontangles_263935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 23), self_263934, 'fontangles')
        # Obtaining the member '__getitem__' of a type (line 370)
        getitem___263936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 23), fontangles_263935, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 370)
        subscript_call_result_263937 = invoke(stypy.reporting.localization.Localization(__file__, 370, 23), getitem___263936, get_style_call_result_263933)
        
        
        # Obtaining the type of the subscript
        
        # Call to get_weight(...): (line 371)
        # Processing the call keyword arguments (line 371)
        kwargs_263940 = {}
        # Getting the type of 'fontprop' (line 371)
        fontprop_263938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 40), 'fontprop', False)
        # Obtaining the member 'get_weight' of a type (line 371)
        get_weight_263939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 371, 40), fontprop_263938, 'get_weight')
        # Calling get_weight(args, kwargs) (line 371)
        get_weight_call_result_263941 = invoke(stypy.reporting.localization.Localization(__file__, 371, 40), get_weight_263939, *[], **kwargs_263940)
        
        # Getting the type of 'self' (line 371)
        self_263942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 23), 'self', False)
        # Obtaining the member 'fontweights' of a type (line 371)
        fontweights_263943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 371, 23), self_263942, 'fontweights')
        # Obtaining the member '__getitem__' of a type (line 371)
        getitem___263944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 371, 23), fontweights_263943, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 371)
        subscript_call_result_263945 = invoke(stypy.reporting.localization.Localization(__file__, 371, 23), getitem___263944, get_weight_call_result_263941)
        
        # Getting the type of 'False' (line 372)
        False_263946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 23), 'False', False)
        # Getting the type of 'wxFacename' (line 373)
        wxFacename_263947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 23), 'wxFacename', False)
        # Processing the call keyword arguments (line 368)
        kwargs_263948 = {}
        # Getting the type of 'wx' (line 368)
        wx_263921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 15), 'wx', False)
        # Obtaining the member 'Font' of a type (line 368)
        Font_263922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 15), wx_263921, 'Font')
        # Calling Font(args, kwargs) (line 368)
        Font_call_result_263949 = invoke(stypy.reporting.localization.Localization(__file__, 368, 15), Font_263922, *[int_call_result_263928, wxFontname_263929, subscript_call_result_263937, subscript_call_result_263945, False_263946, wxFacename_263947], **kwargs_263948)
        
        # Assigning a type to the variable 'font' (line 368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 8), 'font', Font_call_result_263949)
        
        # Assigning a Name to a Subscript (line 376):
        
        # Assigning a Name to a Subscript (line 376):
        # Getting the type of 'font' (line 376)
        font_263950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 26), 'font')
        # Getting the type of 'self' (line 376)
        self_263951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 8), 'self')
        # Obtaining the member 'fontd' of a type (line 376)
        fontd_263952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 8), self_263951, 'fontd')
        # Getting the type of 'key' (line 376)
        key_263953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 19), 'key')
        # Storing an element on a container (line 376)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 376, 8), fontd_263952, (key_263953, font_263950))
        # Getting the type of 'font' (line 378)
        font_263954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 15), 'font')
        # Assigning a type to the variable 'stypy_return_type' (line 378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 8), 'stypy_return_type', font_263954)
        
        # ################# End of 'get_wx_font(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_wx_font' in the type store
        # Getting the type of 'stypy_return_type' (line 345)
        stypy_return_type_263955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263955)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_wx_font'
        return stypy_return_type_263955


    @norecursion
    def points_to_pixels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'points_to_pixels'
        module_type_store = module_type_store.open_function_context('points_to_pixels', 380, 4, False)
        # Assigning a type to the variable 'self' (line 381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererWx.points_to_pixels.__dict__.__setitem__('stypy_localization', localization)
        RendererWx.points_to_pixels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererWx.points_to_pixels.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererWx.points_to_pixels.__dict__.__setitem__('stypy_function_name', 'RendererWx.points_to_pixels')
        RendererWx.points_to_pixels.__dict__.__setitem__('stypy_param_names_list', ['points'])
        RendererWx.points_to_pixels.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererWx.points_to_pixels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererWx.points_to_pixels.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererWx.points_to_pixels.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererWx.points_to_pixels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererWx.points_to_pixels.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererWx.points_to_pixels', ['points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'points_to_pixels', localization, ['points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'points_to_pixels(...)' code ##################

        unicode_263956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, (-1)), 'unicode', u'\n        convert point measures to pixes using dpi and the pixels per\n        inch of the display\n        ')
        # Getting the type of 'points' (line 385)
        points_263957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 15), 'points')
        # Getting the type of 'PIXELS_PER_INCH' (line 385)
        PIXELS_PER_INCH_263958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 25), 'PIXELS_PER_INCH')
        float_263959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, 43), 'float')
        # Applying the binary operator 'div' (line 385)
        result_div_263960 = python_operator(stypy.reporting.localization.Localization(__file__, 385, 25), 'div', PIXELS_PER_INCH_263958, float_263959)
        
        # Getting the type of 'self' (line 385)
        self_263961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 50), 'self')
        # Obtaining the member 'dpi' of a type (line 385)
        dpi_263962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 50), self_263961, 'dpi')
        # Applying the binary operator '*' (line 385)
        result_mul_263963 = python_operator(stypy.reporting.localization.Localization(__file__, 385, 48), '*', result_div_263960, dpi_263962)
        
        float_263964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, 61), 'float')
        # Applying the binary operator 'div' (line 385)
        result_div_263965 = python_operator(stypy.reporting.localization.Localization(__file__, 385, 59), 'div', result_mul_263963, float_263964)
        
        # Applying the binary operator '*' (line 385)
        result_mul_263966 = python_operator(stypy.reporting.localization.Localization(__file__, 385, 15), '*', points_263957, result_div_263965)
        
        # Assigning a type to the variable 'stypy_return_type' (line 385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 8), 'stypy_return_type', result_mul_263966)
        
        # ################# End of 'points_to_pixels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'points_to_pixels' in the type store
        # Getting the type of 'stypy_return_type' (line 380)
        stypy_return_type_263967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_263967)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'points_to_pixels'
        return stypy_return_type_263967


# Assigning a type to the variable 'RendererWx' (line 169)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 0), 'RendererWx', RendererWx)

# Assigning a Attribute to a Name (line 181):
# Getting the type of 'wxc' (line 181)
wxc_263968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 18), 'wxc')
# Obtaining the member 'fontweights' of a type (line 181)
fontweights_263969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 18), wxc_263968, 'fontweights')
# Getting the type of 'RendererWx'
RendererWx_263970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RendererWx')
# Setting the type of the member 'fontweights' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RendererWx_263970, 'fontweights', fontweights_263969)

# Assigning a Attribute to a Name (line 182):
# Getting the type of 'wxc' (line 182)
wxc_263971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 17), 'wxc')
# Obtaining the member 'fontangles' of a type (line 182)
fontangles_263972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 182, 17), wxc_263971, 'fontangles')
# Getting the type of 'RendererWx'
RendererWx_263973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RendererWx')
# Setting the type of the member 'fontangles' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RendererWx_263973, 'fontangles', fontangles_263972)

# Assigning a Attribute to a Name (line 188):
# Getting the type of 'wxc' (line 188)
wxc_263974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 16), 'wxc')
# Obtaining the member 'fontnames' of a type (line 188)
fontnames_263975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 16), wxc_263974, 'fontnames')
# Getting the type of 'RendererWx'
RendererWx_263976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RendererWx')
# Setting the type of the member 'fontnames' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RendererWx_263976, 'fontnames', fontnames_263975)
# Declaration of the 'GraphicsContextWx' class
# Getting the type of 'GraphicsContextBase' (line 388)
GraphicsContextBase_263977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 24), 'GraphicsContextBase')

class GraphicsContextWx(GraphicsContextBase_263977, ):
    unicode_263978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, (-1)), 'unicode', u'\n    The graphics context provides the color, line styles, etc...\n\n    This class stores a reference to a wxMemoryDC, and a\n    wxGraphicsContext that draws to it.  Creating a wxGraphicsContext\n    seems to be fairly heavy, so these objects are cached based on the\n    bitmap object that is passed in.\n\n    The base GraphicsContext stores colors as a RGB tuple on the unit\n    interval, e.g., (0.5, 0.0, 1.0).  wxPython uses an int interval, but\n    since wxPython colour management is rather simple, I have not chosen\n    to implement a separate colour manager class.\n    ')
    
    # Assigning a Dict to a Name (line 402):
    
    # Assigning a Dict to a Name (line 406):
    
    # Assigning a Call to a Name (line 410):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 412, 4, False)
        # Assigning a type to the variable 'self' (line 413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextWx.__init__', ['bitmap', 'renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['bitmap', 'renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 413)
        # Processing the call arguments (line 413)
        # Getting the type of 'self' (line 413)
        self_263981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 37), 'self', False)
        # Processing the call keyword arguments (line 413)
        kwargs_263982 = {}
        # Getting the type of 'GraphicsContextBase' (line 413)
        GraphicsContextBase_263979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'GraphicsContextBase', False)
        # Obtaining the member '__init__' of a type (line 413)
        init___263980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 8), GraphicsContextBase_263979, '__init__')
        # Calling __init__(args, kwargs) (line 413)
        init___call_result_263983 = invoke(stypy.reporting.localization.Localization(__file__, 413, 8), init___263980, *[self_263981], **kwargs_263982)
        
        
        # Call to DEBUG_MSG(...): (line 415)
        # Processing the call arguments (line 415)
        unicode_263985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, 18), 'unicode', u'__init__()')
        int_263986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, 32), 'int')
        # Getting the type of 'self' (line 415)
        self_263987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 35), 'self', False)
        # Processing the call keyword arguments (line 415)
        kwargs_263988 = {}
        # Getting the type of 'DEBUG_MSG' (line 415)
        DEBUG_MSG_263984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 415)
        DEBUG_MSG_call_result_263989 = invoke(stypy.reporting.localization.Localization(__file__, 415, 8), DEBUG_MSG_263984, *[unicode_263985, int_263986, self_263987], **kwargs_263988)
        
        
        # Call to DEBUG_MSG(...): (line 416)
        # Processing the call arguments (line 416)
        unicode_263991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 18), 'unicode', u'__init__() 2: %s')
        # Getting the type of 'bitmap' (line 416)
        bitmap_263992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 39), 'bitmap', False)
        # Applying the binary operator '%' (line 416)
        result_mod_263993 = python_operator(stypy.reporting.localization.Localization(__file__, 416, 18), '%', unicode_263991, bitmap_263992)
        
        int_263994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 47), 'int')
        # Getting the type of 'self' (line 416)
        self_263995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 50), 'self', False)
        # Processing the call keyword arguments (line 416)
        kwargs_263996 = {}
        # Getting the type of 'DEBUG_MSG' (line 416)
        DEBUG_MSG_263990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 416)
        DEBUG_MSG_call_result_263997 = invoke(stypy.reporting.localization.Localization(__file__, 416, 8), DEBUG_MSG_263990, *[result_mod_263993, int_263994, self_263995], **kwargs_263996)
        
        
        # Assigning a Call to a Tuple (line 418):
        
        # Assigning a Call to a Name:
        
        # Call to get(...): (line 418)
        # Processing the call arguments (line 418)
        # Getting the type of 'bitmap' (line 418)
        bitmap_264001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 38), 'bitmap', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 418)
        tuple_264002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 418)
        # Adding element type (line 418)
        # Getting the type of 'None' (line 418)
        None_264003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 47), 'None', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 418, 47), tuple_264002, None_264003)
        # Adding element type (line 418)
        # Getting the type of 'None' (line 418)
        None_264004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 53), 'None', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 418, 47), tuple_264002, None_264004)
        
        # Processing the call keyword arguments (line 418)
        kwargs_264005 = {}
        # Getting the type of 'self' (line 418)
        self_263998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 22), 'self', False)
        # Obtaining the member '_cache' of a type (line 418)
        _cache_263999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 22), self_263998, '_cache')
        # Obtaining the member 'get' of a type (line 418)
        get_264000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 22), _cache_263999, 'get')
        # Calling get(args, kwargs) (line 418)
        get_call_result_264006 = invoke(stypy.reporting.localization.Localization(__file__, 418, 22), get_264000, *[bitmap_264001, tuple_264002], **kwargs_264005)
        
        # Assigning a type to the variable 'call_assignment_263014' (line 418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'call_assignment_263014', get_call_result_264006)
        
        # Assigning a Call to a Name (line 418):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_264009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 8), 'int')
        # Processing the call keyword arguments
        kwargs_264010 = {}
        # Getting the type of 'call_assignment_263014' (line 418)
        call_assignment_263014_264007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'call_assignment_263014', False)
        # Obtaining the member '__getitem__' of a type (line 418)
        getitem___264008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 8), call_assignment_263014_264007, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_264011 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___264008, *[int_264009], **kwargs_264010)
        
        # Assigning a type to the variable 'call_assignment_263015' (line 418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'call_assignment_263015', getitem___call_result_264011)
        
        # Assigning a Name to a Name (line 418):
        # Getting the type of 'call_assignment_263015' (line 418)
        call_assignment_263015_264012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'call_assignment_263015')
        # Assigning a type to the variable 'dc' (line 418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'dc', call_assignment_263015_264012)
        
        # Assigning a Call to a Name (line 418):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_264015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 8), 'int')
        # Processing the call keyword arguments
        kwargs_264016 = {}
        # Getting the type of 'call_assignment_263014' (line 418)
        call_assignment_263014_264013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'call_assignment_263014', False)
        # Obtaining the member '__getitem__' of a type (line 418)
        getitem___264014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 8), call_assignment_263014_264013, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_264017 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___264014, *[int_264015], **kwargs_264016)
        
        # Assigning a type to the variable 'call_assignment_263016' (line 418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'call_assignment_263016', getitem___call_result_264017)
        
        # Assigning a Name to a Name (line 418):
        # Getting the type of 'call_assignment_263016' (line 418)
        call_assignment_263016_264018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'call_assignment_263016')
        # Assigning a type to the variable 'gfx_ctx' (line 418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 12), 'gfx_ctx', call_assignment_263016_264018)
        
        # Type idiom detected: calculating its left and rigth part (line 419)
        # Getting the type of 'dc' (line 419)
        dc_264019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 11), 'dc')
        # Getting the type of 'None' (line 419)
        None_264020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 17), 'None')
        
        (may_be_264021, more_types_in_union_264022) = may_be_none(dc_264019, None_264020)

        if may_be_264021:

            if more_types_in_union_264022:
                # Runtime conditional SSA (line 419)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 420):
            
            # Assigning a Call to a Name (line 420):
            
            # Call to MemoryDC(...): (line 420)
            # Processing the call keyword arguments (line 420)
            kwargs_264025 = {}
            # Getting the type of 'wx' (line 420)
            wx_264023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 17), 'wx', False)
            # Obtaining the member 'MemoryDC' of a type (line 420)
            MemoryDC_264024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 17), wx_264023, 'MemoryDC')
            # Calling MemoryDC(args, kwargs) (line 420)
            MemoryDC_call_result_264026 = invoke(stypy.reporting.localization.Localization(__file__, 420, 17), MemoryDC_264024, *[], **kwargs_264025)
            
            # Assigning a type to the variable 'dc' (line 420)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 12), 'dc', MemoryDC_call_result_264026)
            
            # Call to SelectObject(...): (line 421)
            # Processing the call arguments (line 421)
            # Getting the type of 'bitmap' (line 421)
            bitmap_264029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 28), 'bitmap', False)
            # Processing the call keyword arguments (line 421)
            kwargs_264030 = {}
            # Getting the type of 'dc' (line 421)
            dc_264027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 12), 'dc', False)
            # Obtaining the member 'SelectObject' of a type (line 421)
            SelectObject_264028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 12), dc_264027, 'SelectObject')
            # Calling SelectObject(args, kwargs) (line 421)
            SelectObject_call_result_264031 = invoke(stypy.reporting.localization.Localization(__file__, 421, 12), SelectObject_264028, *[bitmap_264029], **kwargs_264030)
            
            
            # Assigning a Call to a Name (line 422):
            
            # Assigning a Call to a Name (line 422):
            
            # Call to Create(...): (line 422)
            # Processing the call arguments (line 422)
            # Getting the type of 'dc' (line 422)
            dc_264035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 48), 'dc', False)
            # Processing the call keyword arguments (line 422)
            kwargs_264036 = {}
            # Getting the type of 'wx' (line 422)
            wx_264032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 22), 'wx', False)
            # Obtaining the member 'GraphicsContext' of a type (line 422)
            GraphicsContext_264033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 22), wx_264032, 'GraphicsContext')
            # Obtaining the member 'Create' of a type (line 422)
            Create_264034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 22), GraphicsContext_264033, 'Create')
            # Calling Create(args, kwargs) (line 422)
            Create_call_result_264037 = invoke(stypy.reporting.localization.Localization(__file__, 422, 22), Create_264034, *[dc_264035], **kwargs_264036)
            
            # Assigning a type to the variable 'gfx_ctx' (line 422)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 12), 'gfx_ctx', Create_call_result_264037)
            
            # Assigning a Name to a Attribute (line 423):
            
            # Assigning a Name to a Attribute (line 423):
            # Getting the type of 'None' (line 423)
            None_264038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 36), 'None')
            # Getting the type of 'gfx_ctx' (line 423)
            gfx_ctx_264039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 12), 'gfx_ctx')
            # Setting the type of the member '_lastcliprect' of a type (line 423)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 12), gfx_ctx_264039, '_lastcliprect', None_264038)
            
            # Assigning a Tuple to a Subscript (line 424):
            
            # Assigning a Tuple to a Subscript (line 424):
            
            # Obtaining an instance of the builtin type 'tuple' (line 424)
            tuple_264040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 424, 34), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 424)
            # Adding element type (line 424)
            # Getting the type of 'dc' (line 424)
            dc_264041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 34), 'dc')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 424, 34), tuple_264040, dc_264041)
            # Adding element type (line 424)
            # Getting the type of 'gfx_ctx' (line 424)
            gfx_ctx_264042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 38), 'gfx_ctx')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 424, 34), tuple_264040, gfx_ctx_264042)
            
            # Getting the type of 'self' (line 424)
            self_264043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 12), 'self')
            # Obtaining the member '_cache' of a type (line 424)
            _cache_264044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 424, 12), self_264043, '_cache')
            # Getting the type of 'bitmap' (line 424)
            bitmap_264045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 24), 'bitmap')
            # Storing an element on a container (line 424)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 424, 12), _cache_264044, (bitmap_264045, tuple_264040))

            if more_types_in_union_264022:
                # SSA join for if statement (line 419)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 426):
        
        # Assigning a Name to a Attribute (line 426):
        # Getting the type of 'bitmap' (line 426)
        bitmap_264046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 22), 'bitmap')
        # Getting the type of 'self' (line 426)
        self_264047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'self')
        # Setting the type of the member 'bitmap' of a type (line 426)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 8), self_264047, 'bitmap', bitmap_264046)
        
        # Assigning a Name to a Attribute (line 427):
        
        # Assigning a Name to a Attribute (line 427):
        # Getting the type of 'dc' (line 427)
        dc_264048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 18), 'dc')
        # Getting the type of 'self' (line 427)
        self_264049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 8), 'self')
        # Setting the type of the member 'dc' of a type (line 427)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 8), self_264049, 'dc', dc_264048)
        
        # Assigning a Name to a Attribute (line 428):
        
        # Assigning a Name to a Attribute (line 428):
        # Getting the type of 'gfx_ctx' (line 428)
        gfx_ctx_264050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 23), 'gfx_ctx')
        # Getting the type of 'self' (line 428)
        self_264051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 'self')
        # Setting the type of the member 'gfx_ctx' of a type (line 428)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 8), self_264051, 'gfx_ctx', gfx_ctx_264050)
        
        # Assigning a Call to a Attribute (line 429):
        
        # Assigning a Call to a Attribute (line 429):
        
        # Call to Pen(...): (line 429)
        # Processing the call arguments (line 429)
        unicode_264054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 429, 27), 'unicode', u'BLACK')
        int_264055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 429, 36), 'int')
        # Getting the type of 'wx' (line 429)
        wx_264056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 39), 'wx', False)
        # Obtaining the member 'SOLID' of a type (line 429)
        SOLID_264057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 39), wx_264056, 'SOLID')
        # Processing the call keyword arguments (line 429)
        kwargs_264058 = {}
        # Getting the type of 'wx' (line 429)
        wx_264052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 20), 'wx', False)
        # Obtaining the member 'Pen' of a type (line 429)
        Pen_264053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 20), wx_264052, 'Pen')
        # Calling Pen(args, kwargs) (line 429)
        Pen_call_result_264059 = invoke(stypy.reporting.localization.Localization(__file__, 429, 20), Pen_264053, *[unicode_264054, int_264055, SOLID_264057], **kwargs_264058)
        
        # Getting the type of 'self' (line 429)
        self_264060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 8), 'self')
        # Setting the type of the member '_pen' of a type (line 429)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 8), self_264060, '_pen', Pen_call_result_264059)
        
        # Call to SetPen(...): (line 430)
        # Processing the call arguments (line 430)
        # Getting the type of 'self' (line 430)
        self_264063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 23), 'self', False)
        # Obtaining the member '_pen' of a type (line 430)
        _pen_264064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 23), self_264063, '_pen')
        # Processing the call keyword arguments (line 430)
        kwargs_264065 = {}
        # Getting the type of 'gfx_ctx' (line 430)
        gfx_ctx_264061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 8), 'gfx_ctx', False)
        # Obtaining the member 'SetPen' of a type (line 430)
        SetPen_264062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 8), gfx_ctx_264061, 'SetPen')
        # Calling SetPen(args, kwargs) (line 430)
        SetPen_call_result_264066 = invoke(stypy.reporting.localization.Localization(__file__, 430, 8), SetPen_264062, *[_pen_264064], **kwargs_264065)
        
        
        # Assigning a Attribute to a Attribute (line 431):
        
        # Assigning a Attribute to a Attribute (line 431):
        # Getting the type of 'wx' (line 431)
        wx_264067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 22), 'wx')
        # Obtaining the member 'SOLID' of a type (line 431)
        SOLID_264068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 22), wx_264067, 'SOLID')
        # Getting the type of 'self' (line 431)
        self_264069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 8), 'self')
        # Setting the type of the member '_style' of a type (line 431)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 8), self_264069, '_style', SOLID_264068)
        
        # Assigning a Name to a Attribute (line 432):
        
        # Assigning a Name to a Attribute (line 432):
        # Getting the type of 'renderer' (line 432)
        renderer_264070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 24), 'renderer')
        # Getting the type of 'self' (line 432)
        self_264071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 8), 'self')
        # Setting the type of the member 'renderer' of a type (line 432)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 8), self_264071, 'renderer', renderer_264070)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def select(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'select'
        module_type_store = module_type_store.open_function_context('select', 434, 4, False)
        # Assigning a type to the variable 'self' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextWx.select.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextWx.select.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextWx.select.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextWx.select.__dict__.__setitem__('stypy_function_name', 'GraphicsContextWx.select')
        GraphicsContextWx.select.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextWx.select.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextWx.select.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextWx.select.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextWx.select.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextWx.select.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextWx.select.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextWx.select', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'select', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'select(...)' code ##################

        unicode_264072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 437, (-1)), 'unicode', u'\n        Select the current bitmap into this wxDC instance\n        ')
        
        
        # Getting the type of 'sys' (line 439)
        sys_264073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 439)
        platform_264074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 11), sys_264073, 'platform')
        unicode_264075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 439, 27), 'unicode', u'win32')
        # Applying the binary operator '==' (line 439)
        result_eq_264076 = python_operator(stypy.reporting.localization.Localization(__file__, 439, 11), '==', platform_264074, unicode_264075)
        
        # Testing the type of an if condition (line 439)
        if_condition_264077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 439, 8), result_eq_264076)
        # Assigning a type to the variable 'if_condition_264077' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 8), 'if_condition_264077', if_condition_264077)
        # SSA begins for if statement (line 439)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to SelectObject(...): (line 440)
        # Processing the call arguments (line 440)
        # Getting the type of 'self' (line 440)
        self_264081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 33), 'self', False)
        # Obtaining the member 'bitmap' of a type (line 440)
        bitmap_264082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 33), self_264081, 'bitmap')
        # Processing the call keyword arguments (line 440)
        kwargs_264083 = {}
        # Getting the type of 'self' (line 440)
        self_264078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 12), 'self', False)
        # Obtaining the member 'dc' of a type (line 440)
        dc_264079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 12), self_264078, 'dc')
        # Obtaining the member 'SelectObject' of a type (line 440)
        SelectObject_264080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 12), dc_264079, 'SelectObject')
        # Calling SelectObject(args, kwargs) (line 440)
        SelectObject_call_result_264084 = invoke(stypy.reporting.localization.Localization(__file__, 440, 12), SelectObject_264080, *[bitmap_264082], **kwargs_264083)
        
        
        # Assigning a Name to a Attribute (line 441):
        
        # Assigning a Name to a Attribute (line 441):
        # Getting the type of 'True' (line 441)
        True_264085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 30), 'True')
        # Getting the type of 'self' (line 441)
        self_264086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 12), 'self')
        # Setting the type of the member 'IsSelected' of a type (line 441)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 12), self_264086, 'IsSelected', True_264085)
        # SSA join for if statement (line 439)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'select(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'select' in the type store
        # Getting the type of 'stypy_return_type' (line 434)
        stypy_return_type_264087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264087)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'select'
        return stypy_return_type_264087


    @norecursion
    def unselect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'unselect'
        module_type_store = module_type_store.open_function_context('unselect', 443, 4, False)
        # Assigning a type to the variable 'self' (line 444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextWx.unselect.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextWx.unselect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextWx.unselect.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextWx.unselect.__dict__.__setitem__('stypy_function_name', 'GraphicsContextWx.unselect')
        GraphicsContextWx.unselect.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextWx.unselect.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextWx.unselect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextWx.unselect.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextWx.unselect.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextWx.unselect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextWx.unselect.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextWx.unselect', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'unselect', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'unselect(...)' code ##################

        unicode_264088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, (-1)), 'unicode', u'\n        Select a Null bitmasp into this wxDC instance\n        ')
        
        
        # Getting the type of 'sys' (line 447)
        sys_264089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 447)
        platform_264090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 11), sys_264089, 'platform')
        unicode_264091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 447, 27), 'unicode', u'win32')
        # Applying the binary operator '==' (line 447)
        result_eq_264092 = python_operator(stypy.reporting.localization.Localization(__file__, 447, 11), '==', platform_264090, unicode_264091)
        
        # Testing the type of an if condition (line 447)
        if_condition_264093 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 447, 8), result_eq_264092)
        # Assigning a type to the variable 'if_condition_264093' (line 447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'if_condition_264093', if_condition_264093)
        # SSA begins for if statement (line 447)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to SelectObject(...): (line 448)
        # Processing the call arguments (line 448)
        # Getting the type of 'wx' (line 448)
        wx_264097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 33), 'wx', False)
        # Obtaining the member 'NullBitmap' of a type (line 448)
        NullBitmap_264098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 33), wx_264097, 'NullBitmap')
        # Processing the call keyword arguments (line 448)
        kwargs_264099 = {}
        # Getting the type of 'self' (line 448)
        self_264094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 12), 'self', False)
        # Obtaining the member 'dc' of a type (line 448)
        dc_264095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 12), self_264094, 'dc')
        # Obtaining the member 'SelectObject' of a type (line 448)
        SelectObject_264096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 12), dc_264095, 'SelectObject')
        # Calling SelectObject(args, kwargs) (line 448)
        SelectObject_call_result_264100 = invoke(stypy.reporting.localization.Localization(__file__, 448, 12), SelectObject_264096, *[NullBitmap_264098], **kwargs_264099)
        
        
        # Assigning a Name to a Attribute (line 449):
        
        # Assigning a Name to a Attribute (line 449):
        # Getting the type of 'False' (line 449)
        False_264101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 30), 'False')
        # Getting the type of 'self' (line 449)
        self_264102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 12), 'self')
        # Setting the type of the member 'IsSelected' of a type (line 449)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 12), self_264102, 'IsSelected', False_264101)
        # SSA join for if statement (line 447)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'unselect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'unselect' in the type store
        # Getting the type of 'stypy_return_type' (line 443)
        stypy_return_type_264103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264103)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'unselect'
        return stypy_return_type_264103


    @norecursion
    def set_foreground(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 451)
        None_264104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 40), 'None')
        defaults = [None_264104]
        # Create a new context for function 'set_foreground'
        module_type_store = module_type_store.open_function_context('set_foreground', 451, 4, False)
        # Assigning a type to the variable 'self' (line 452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextWx.set_foreground.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextWx.set_foreground.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextWx.set_foreground.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextWx.set_foreground.__dict__.__setitem__('stypy_function_name', 'GraphicsContextWx.set_foreground')
        GraphicsContextWx.set_foreground.__dict__.__setitem__('stypy_param_names_list', ['fg', 'isRGBA'])
        GraphicsContextWx.set_foreground.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextWx.set_foreground.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextWx.set_foreground.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextWx.set_foreground.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextWx.set_foreground.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextWx.set_foreground.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextWx.set_foreground', ['fg', 'isRGBA'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_foreground', localization, ['fg', 'isRGBA'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_foreground(...)' code ##################

        unicode_264105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 456, (-1)), 'unicode', u'\n        Set the foreground color.  fg can be a matlab format string, a\n        html hex color string, an rgb unit tuple, or a float between 0\n        and 1.  In the latter case, grayscale is used.\n        ')
        
        # Call to DEBUG_MSG(...): (line 462)
        # Processing the call arguments (line 462)
        unicode_264107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 462, 18), 'unicode', u'set_foreground()')
        int_264108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 462, 38), 'int')
        # Getting the type of 'self' (line 462)
        self_264109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 41), 'self', False)
        # Processing the call keyword arguments (line 462)
        kwargs_264110 = {}
        # Getting the type of 'DEBUG_MSG' (line 462)
        DEBUG_MSG_264106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 462)
        DEBUG_MSG_call_result_264111 = invoke(stypy.reporting.localization.Localization(__file__, 462, 8), DEBUG_MSG_264106, *[unicode_264107, int_264108, self_264109], **kwargs_264110)
        
        
        # Call to select(...): (line 463)
        # Processing the call keyword arguments (line 463)
        kwargs_264114 = {}
        # Getting the type of 'self' (line 463)
        self_264112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 8), 'self', False)
        # Obtaining the member 'select' of a type (line 463)
        select_264113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 463, 8), self_264112, 'select')
        # Calling select(args, kwargs) (line 463)
        select_call_result_264115 = invoke(stypy.reporting.localization.Localization(__file__, 463, 8), select_264113, *[], **kwargs_264114)
        
        
        # Call to set_foreground(...): (line 464)
        # Processing the call arguments (line 464)
        # Getting the type of 'self' (line 464)
        self_264118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 43), 'self', False)
        # Getting the type of 'fg' (line 464)
        fg_264119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 49), 'fg', False)
        # Getting the type of 'isRGBA' (line 464)
        isRGBA_264120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 53), 'isRGBA', False)
        # Processing the call keyword arguments (line 464)
        kwargs_264121 = {}
        # Getting the type of 'GraphicsContextBase' (line 464)
        GraphicsContextBase_264116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 8), 'GraphicsContextBase', False)
        # Obtaining the member 'set_foreground' of a type (line 464)
        set_foreground_264117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 8), GraphicsContextBase_264116, 'set_foreground')
        # Calling set_foreground(args, kwargs) (line 464)
        set_foreground_call_result_264122 = invoke(stypy.reporting.localization.Localization(__file__, 464, 8), set_foreground_264117, *[self_264118, fg_264119, isRGBA_264120], **kwargs_264121)
        
        
        # Call to SetColour(...): (line 466)
        # Processing the call arguments (line 466)
        
        # Call to get_wxcolour(...): (line 466)
        # Processing the call arguments (line 466)
        
        # Call to get_rgb(...): (line 466)
        # Processing the call keyword arguments (line 466)
        kwargs_264130 = {}
        # Getting the type of 'self' (line 466)
        self_264128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 46), 'self', False)
        # Obtaining the member 'get_rgb' of a type (line 466)
        get_rgb_264129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 46), self_264128, 'get_rgb')
        # Calling get_rgb(args, kwargs) (line 466)
        get_rgb_call_result_264131 = invoke(stypy.reporting.localization.Localization(__file__, 466, 46), get_rgb_264129, *[], **kwargs_264130)
        
        # Processing the call keyword arguments (line 466)
        kwargs_264132 = {}
        # Getting the type of 'self' (line 466)
        self_264126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 28), 'self', False)
        # Obtaining the member 'get_wxcolour' of a type (line 466)
        get_wxcolour_264127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 28), self_264126, 'get_wxcolour')
        # Calling get_wxcolour(args, kwargs) (line 466)
        get_wxcolour_call_result_264133 = invoke(stypy.reporting.localization.Localization(__file__, 466, 28), get_wxcolour_264127, *[get_rgb_call_result_264131], **kwargs_264132)
        
        # Processing the call keyword arguments (line 466)
        kwargs_264134 = {}
        # Getting the type of 'self' (line 466)
        self_264123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 8), 'self', False)
        # Obtaining the member '_pen' of a type (line 466)
        _pen_264124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 8), self_264123, '_pen')
        # Obtaining the member 'SetColour' of a type (line 466)
        SetColour_264125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 8), _pen_264124, 'SetColour')
        # Calling SetColour(args, kwargs) (line 466)
        SetColour_call_result_264135 = invoke(stypy.reporting.localization.Localization(__file__, 466, 8), SetColour_264125, *[get_wxcolour_call_result_264133], **kwargs_264134)
        
        
        # Call to SetPen(...): (line 467)
        # Processing the call arguments (line 467)
        # Getting the type of 'self' (line 467)
        self_264139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 28), 'self', False)
        # Obtaining the member '_pen' of a type (line 467)
        _pen_264140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 28), self_264139, '_pen')
        # Processing the call keyword arguments (line 467)
        kwargs_264141 = {}
        # Getting the type of 'self' (line 467)
        self_264136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 8), 'self', False)
        # Obtaining the member 'gfx_ctx' of a type (line 467)
        gfx_ctx_264137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 8), self_264136, 'gfx_ctx')
        # Obtaining the member 'SetPen' of a type (line 467)
        SetPen_264138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 8), gfx_ctx_264137, 'SetPen')
        # Calling SetPen(args, kwargs) (line 467)
        SetPen_call_result_264142 = invoke(stypy.reporting.localization.Localization(__file__, 467, 8), SetPen_264138, *[_pen_264140], **kwargs_264141)
        
        
        # Call to unselect(...): (line 468)
        # Processing the call keyword arguments (line 468)
        kwargs_264145 = {}
        # Getting the type of 'self' (line 468)
        self_264143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 8), 'self', False)
        # Obtaining the member 'unselect' of a type (line 468)
        unselect_264144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 8), self_264143, 'unselect')
        # Calling unselect(args, kwargs) (line 468)
        unselect_call_result_264146 = invoke(stypy.reporting.localization.Localization(__file__, 468, 8), unselect_264144, *[], **kwargs_264145)
        
        
        # ################# End of 'set_foreground(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_foreground' in the type store
        # Getting the type of 'stypy_return_type' (line 451)
        stypy_return_type_264147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264147)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_foreground'
        return stypy_return_type_264147


    @norecursion
    def set_linewidth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_linewidth'
        module_type_store = module_type_store.open_function_context('set_linewidth', 470, 4, False)
        # Assigning a type to the variable 'self' (line 471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextWx.set_linewidth.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextWx.set_linewidth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextWx.set_linewidth.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextWx.set_linewidth.__dict__.__setitem__('stypy_function_name', 'GraphicsContextWx.set_linewidth')
        GraphicsContextWx.set_linewidth.__dict__.__setitem__('stypy_param_names_list', ['w'])
        GraphicsContextWx.set_linewidth.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextWx.set_linewidth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextWx.set_linewidth.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextWx.set_linewidth.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextWx.set_linewidth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextWx.set_linewidth.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextWx.set_linewidth', ['w'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_linewidth', localization, ['w'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_linewidth(...)' code ##################

        unicode_264148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, (-1)), 'unicode', u'\n        Set the line width.\n        ')
        
        # Assigning a Call to a Name (line 474):
        
        # Assigning a Call to a Name (line 474):
        
        # Call to float(...): (line 474)
        # Processing the call arguments (line 474)
        # Getting the type of 'w' (line 474)
        w_264150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 18), 'w', False)
        # Processing the call keyword arguments (line 474)
        kwargs_264151 = {}
        # Getting the type of 'float' (line 474)
        float_264149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 12), 'float', False)
        # Calling float(args, kwargs) (line 474)
        float_call_result_264152 = invoke(stypy.reporting.localization.Localization(__file__, 474, 12), float_264149, *[w_264150], **kwargs_264151)
        
        # Assigning a type to the variable 'w' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'w', float_call_result_264152)
        
        # Call to DEBUG_MSG(...): (line 475)
        # Processing the call arguments (line 475)
        unicode_264154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 18), 'unicode', u'set_linewidth()')
        int_264155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 37), 'int')
        # Getting the type of 'self' (line 475)
        self_264156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 40), 'self', False)
        # Processing the call keyword arguments (line 475)
        kwargs_264157 = {}
        # Getting the type of 'DEBUG_MSG' (line 475)
        DEBUG_MSG_264153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 475)
        DEBUG_MSG_call_result_264158 = invoke(stypy.reporting.localization.Localization(__file__, 475, 8), DEBUG_MSG_264153, *[unicode_264154, int_264155, self_264156], **kwargs_264157)
        
        
        # Call to select(...): (line 476)
        # Processing the call keyword arguments (line 476)
        kwargs_264161 = {}
        # Getting the type of 'self' (line 476)
        self_264159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 8), 'self', False)
        # Obtaining the member 'select' of a type (line 476)
        select_264160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 8), self_264159, 'select')
        # Calling select(args, kwargs) (line 476)
        select_call_result_264162 = invoke(stypy.reporting.localization.Localization(__file__, 476, 8), select_264160, *[], **kwargs_264161)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'w' (line 477)
        w_264163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 11), 'w')
        int_264164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 15), 'int')
        # Applying the binary operator '>' (line 477)
        result_gt_264165 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 11), '>', w_264163, int_264164)
        
        
        # Getting the type of 'w' (line 477)
        w_264166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 21), 'w')
        int_264167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 25), 'int')
        # Applying the binary operator '<' (line 477)
        result_lt_264168 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 21), '<', w_264166, int_264167)
        
        # Applying the binary operator 'and' (line 477)
        result_and_keyword_264169 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 11), 'and', result_gt_264165, result_lt_264168)
        
        # Testing the type of an if condition (line 477)
        if_condition_264170 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 477, 8), result_and_keyword_264169)
        # Assigning a type to the variable 'if_condition_264170' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'if_condition_264170', if_condition_264170)
        # SSA begins for if statement (line 477)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 478):
        
        # Assigning a Num to a Name (line 478):
        int_264171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 16), 'int')
        # Assigning a type to the variable 'w' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 12), 'w', int_264171)
        # SSA join for if statement (line 477)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_linewidth(...): (line 479)
        # Processing the call arguments (line 479)
        # Getting the type of 'self' (line 479)
        self_264174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 42), 'self', False)
        # Getting the type of 'w' (line 479)
        w_264175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 48), 'w', False)
        # Processing the call keyword arguments (line 479)
        kwargs_264176 = {}
        # Getting the type of 'GraphicsContextBase' (line 479)
        GraphicsContextBase_264172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 8), 'GraphicsContextBase', False)
        # Obtaining the member 'set_linewidth' of a type (line 479)
        set_linewidth_264173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 479, 8), GraphicsContextBase_264172, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 479)
        set_linewidth_call_result_264177 = invoke(stypy.reporting.localization.Localization(__file__, 479, 8), set_linewidth_264173, *[self_264174, w_264175], **kwargs_264176)
        
        
        # Assigning a Call to a Name (line 480):
        
        # Assigning a Call to a Name (line 480):
        
        # Call to int(...): (line 480)
        # Processing the call arguments (line 480)
        
        # Call to points_to_pixels(...): (line 480)
        # Processing the call arguments (line 480)
        # Getting the type of 'self' (line 480)
        self_264182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 48), 'self', False)
        # Obtaining the member '_linewidth' of a type (line 480)
        _linewidth_264183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 48), self_264182, '_linewidth')
        # Processing the call keyword arguments (line 480)
        kwargs_264184 = {}
        # Getting the type of 'self' (line 480)
        self_264179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 17), 'self', False)
        # Obtaining the member 'renderer' of a type (line 480)
        renderer_264180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 17), self_264179, 'renderer')
        # Obtaining the member 'points_to_pixels' of a type (line 480)
        points_to_pixels_264181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 17), renderer_264180, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 480)
        points_to_pixels_call_result_264185 = invoke(stypy.reporting.localization.Localization(__file__, 480, 17), points_to_pixels_264181, *[_linewidth_264183], **kwargs_264184)
        
        # Processing the call keyword arguments (line 480)
        kwargs_264186 = {}
        # Getting the type of 'int' (line 480)
        int_264178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 13), 'int', False)
        # Calling int(args, kwargs) (line 480)
        int_call_result_264187 = invoke(stypy.reporting.localization.Localization(__file__, 480, 13), int_264178, *[points_to_pixels_call_result_264185], **kwargs_264186)
        
        # Assigning a type to the variable 'lw' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'lw', int_call_result_264187)
        
        
        # Getting the type of 'lw' (line 481)
        lw_264188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 11), 'lw')
        int_264189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 17), 'int')
        # Applying the binary operator '==' (line 481)
        result_eq_264190 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 11), '==', lw_264188, int_264189)
        
        # Testing the type of an if condition (line 481)
        if_condition_264191 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 481, 8), result_eq_264190)
        # Assigning a type to the variable 'if_condition_264191' (line 481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 8), 'if_condition_264191', if_condition_264191)
        # SSA begins for if statement (line 481)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 482):
        
        # Assigning a Num to a Name (line 482):
        int_264192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 17), 'int')
        # Assigning a type to the variable 'lw' (line 482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'lw', int_264192)
        # SSA join for if statement (line 481)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to SetWidth(...): (line 483)
        # Processing the call arguments (line 483)
        # Getting the type of 'lw' (line 483)
        lw_264196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 27), 'lw', False)
        # Processing the call keyword arguments (line 483)
        kwargs_264197 = {}
        # Getting the type of 'self' (line 483)
        self_264193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'self', False)
        # Obtaining the member '_pen' of a type (line 483)
        _pen_264194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 8), self_264193, '_pen')
        # Obtaining the member 'SetWidth' of a type (line 483)
        SetWidth_264195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 8), _pen_264194, 'SetWidth')
        # Calling SetWidth(args, kwargs) (line 483)
        SetWidth_call_result_264198 = invoke(stypy.reporting.localization.Localization(__file__, 483, 8), SetWidth_264195, *[lw_264196], **kwargs_264197)
        
        
        # Call to SetPen(...): (line 484)
        # Processing the call arguments (line 484)
        # Getting the type of 'self' (line 484)
        self_264202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 28), 'self', False)
        # Obtaining the member '_pen' of a type (line 484)
        _pen_264203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 28), self_264202, '_pen')
        # Processing the call keyword arguments (line 484)
        kwargs_264204 = {}
        # Getting the type of 'self' (line 484)
        self_264199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'self', False)
        # Obtaining the member 'gfx_ctx' of a type (line 484)
        gfx_ctx_264200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 8), self_264199, 'gfx_ctx')
        # Obtaining the member 'SetPen' of a type (line 484)
        SetPen_264201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 8), gfx_ctx_264200, 'SetPen')
        # Calling SetPen(args, kwargs) (line 484)
        SetPen_call_result_264205 = invoke(stypy.reporting.localization.Localization(__file__, 484, 8), SetPen_264201, *[_pen_264203], **kwargs_264204)
        
        
        # Call to unselect(...): (line 485)
        # Processing the call keyword arguments (line 485)
        kwargs_264208 = {}
        # Getting the type of 'self' (line 485)
        self_264206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 8), 'self', False)
        # Obtaining the member 'unselect' of a type (line 485)
        unselect_264207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 8), self_264206, 'unselect')
        # Calling unselect(args, kwargs) (line 485)
        unselect_call_result_264209 = invoke(stypy.reporting.localization.Localization(__file__, 485, 8), unselect_264207, *[], **kwargs_264208)
        
        
        # ################# End of 'set_linewidth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_linewidth' in the type store
        # Getting the type of 'stypy_return_type' (line 470)
        stypy_return_type_264210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264210)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_linewidth'
        return stypy_return_type_264210


    @norecursion
    def set_capstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_capstyle'
        module_type_store = module_type_store.open_function_context('set_capstyle', 487, 4, False)
        # Assigning a type to the variable 'self' (line 488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextWx.set_capstyle.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextWx.set_capstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextWx.set_capstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextWx.set_capstyle.__dict__.__setitem__('stypy_function_name', 'GraphicsContextWx.set_capstyle')
        GraphicsContextWx.set_capstyle.__dict__.__setitem__('stypy_param_names_list', ['cs'])
        GraphicsContextWx.set_capstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextWx.set_capstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextWx.set_capstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextWx.set_capstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextWx.set_capstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextWx.set_capstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextWx.set_capstyle', ['cs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_capstyle', localization, ['cs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_capstyle(...)' code ##################

        unicode_264211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, (-1)), 'unicode', u"\n        Set the capstyle as a string in ('butt', 'round', 'projecting')\n        ")
        
        # Call to DEBUG_MSG(...): (line 491)
        # Processing the call arguments (line 491)
        unicode_264213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, 18), 'unicode', u'set_capstyle()')
        int_264214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, 36), 'int')
        # Getting the type of 'self' (line 491)
        self_264215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 39), 'self', False)
        # Processing the call keyword arguments (line 491)
        kwargs_264216 = {}
        # Getting the type of 'DEBUG_MSG' (line 491)
        DEBUG_MSG_264212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 491)
        DEBUG_MSG_call_result_264217 = invoke(stypy.reporting.localization.Localization(__file__, 491, 8), DEBUG_MSG_264212, *[unicode_264213, int_264214, self_264215], **kwargs_264216)
        
        
        # Call to select(...): (line 492)
        # Processing the call keyword arguments (line 492)
        kwargs_264220 = {}
        # Getting the type of 'self' (line 492)
        self_264218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'self', False)
        # Obtaining the member 'select' of a type (line 492)
        select_264219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 8), self_264218, 'select')
        # Calling select(args, kwargs) (line 492)
        select_call_result_264221 = invoke(stypy.reporting.localization.Localization(__file__, 492, 8), select_264219, *[], **kwargs_264220)
        
        
        # Call to set_capstyle(...): (line 493)
        # Processing the call arguments (line 493)
        # Getting the type of 'self' (line 493)
        self_264224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 41), 'self', False)
        # Getting the type of 'cs' (line 493)
        cs_264225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 47), 'cs', False)
        # Processing the call keyword arguments (line 493)
        kwargs_264226 = {}
        # Getting the type of 'GraphicsContextBase' (line 493)
        GraphicsContextBase_264222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'GraphicsContextBase', False)
        # Obtaining the member 'set_capstyle' of a type (line 493)
        set_capstyle_264223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 8), GraphicsContextBase_264222, 'set_capstyle')
        # Calling set_capstyle(args, kwargs) (line 493)
        set_capstyle_call_result_264227 = invoke(stypy.reporting.localization.Localization(__file__, 493, 8), set_capstyle_264223, *[self_264224, cs_264225], **kwargs_264226)
        
        
        # Call to SetCap(...): (line 494)
        # Processing the call arguments (line 494)
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 494)
        self_264231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 49), 'self', False)
        # Obtaining the member '_capstyle' of a type (line 494)
        _capstyle_264232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 49), self_264231, '_capstyle')
        # Getting the type of 'GraphicsContextWx' (line 494)
        GraphicsContextWx_264233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 25), 'GraphicsContextWx', False)
        # Obtaining the member '_capd' of a type (line 494)
        _capd_264234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 25), GraphicsContextWx_264233, '_capd')
        # Obtaining the member '__getitem__' of a type (line 494)
        getitem___264235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 25), _capd_264234, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 494)
        subscript_call_result_264236 = invoke(stypy.reporting.localization.Localization(__file__, 494, 25), getitem___264235, _capstyle_264232)
        
        # Processing the call keyword arguments (line 494)
        kwargs_264237 = {}
        # Getting the type of 'self' (line 494)
        self_264228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 8), 'self', False)
        # Obtaining the member '_pen' of a type (line 494)
        _pen_264229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 8), self_264228, '_pen')
        # Obtaining the member 'SetCap' of a type (line 494)
        SetCap_264230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 8), _pen_264229, 'SetCap')
        # Calling SetCap(args, kwargs) (line 494)
        SetCap_call_result_264238 = invoke(stypy.reporting.localization.Localization(__file__, 494, 8), SetCap_264230, *[subscript_call_result_264236], **kwargs_264237)
        
        
        # Call to SetPen(...): (line 495)
        # Processing the call arguments (line 495)
        # Getting the type of 'self' (line 495)
        self_264242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 28), 'self', False)
        # Obtaining the member '_pen' of a type (line 495)
        _pen_264243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 28), self_264242, '_pen')
        # Processing the call keyword arguments (line 495)
        kwargs_264244 = {}
        # Getting the type of 'self' (line 495)
        self_264239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 8), 'self', False)
        # Obtaining the member 'gfx_ctx' of a type (line 495)
        gfx_ctx_264240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 8), self_264239, 'gfx_ctx')
        # Obtaining the member 'SetPen' of a type (line 495)
        SetPen_264241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 8), gfx_ctx_264240, 'SetPen')
        # Calling SetPen(args, kwargs) (line 495)
        SetPen_call_result_264245 = invoke(stypy.reporting.localization.Localization(__file__, 495, 8), SetPen_264241, *[_pen_264243], **kwargs_264244)
        
        
        # Call to unselect(...): (line 496)
        # Processing the call keyword arguments (line 496)
        kwargs_264248 = {}
        # Getting the type of 'self' (line 496)
        self_264246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'self', False)
        # Obtaining the member 'unselect' of a type (line 496)
        unselect_264247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 8), self_264246, 'unselect')
        # Calling unselect(args, kwargs) (line 496)
        unselect_call_result_264249 = invoke(stypy.reporting.localization.Localization(__file__, 496, 8), unselect_264247, *[], **kwargs_264248)
        
        
        # ################# End of 'set_capstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_capstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 487)
        stypy_return_type_264250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264250)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_capstyle'
        return stypy_return_type_264250


    @norecursion
    def set_joinstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_joinstyle'
        module_type_store = module_type_store.open_function_context('set_joinstyle', 498, 4, False)
        # Assigning a type to the variable 'self' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextWx.set_joinstyle.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextWx.set_joinstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextWx.set_joinstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextWx.set_joinstyle.__dict__.__setitem__('stypy_function_name', 'GraphicsContextWx.set_joinstyle')
        GraphicsContextWx.set_joinstyle.__dict__.__setitem__('stypy_param_names_list', ['js'])
        GraphicsContextWx.set_joinstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextWx.set_joinstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextWx.set_joinstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextWx.set_joinstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextWx.set_joinstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextWx.set_joinstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextWx.set_joinstyle', ['js'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_joinstyle', localization, ['js'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_joinstyle(...)' code ##################

        unicode_264251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 501, (-1)), 'unicode', u"\n        Set the join style to be one of ('miter', 'round', 'bevel')\n        ")
        
        # Call to DEBUG_MSG(...): (line 502)
        # Processing the call arguments (line 502)
        unicode_264253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 18), 'unicode', u'set_joinstyle()')
        int_264254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 37), 'int')
        # Getting the type of 'self' (line 502)
        self_264255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 40), 'self', False)
        # Processing the call keyword arguments (line 502)
        kwargs_264256 = {}
        # Getting the type of 'DEBUG_MSG' (line 502)
        DEBUG_MSG_264252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 502)
        DEBUG_MSG_call_result_264257 = invoke(stypy.reporting.localization.Localization(__file__, 502, 8), DEBUG_MSG_264252, *[unicode_264253, int_264254, self_264255], **kwargs_264256)
        
        
        # Call to select(...): (line 503)
        # Processing the call keyword arguments (line 503)
        kwargs_264260 = {}
        # Getting the type of 'self' (line 503)
        self_264258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 8), 'self', False)
        # Obtaining the member 'select' of a type (line 503)
        select_264259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 8), self_264258, 'select')
        # Calling select(args, kwargs) (line 503)
        select_call_result_264261 = invoke(stypy.reporting.localization.Localization(__file__, 503, 8), select_264259, *[], **kwargs_264260)
        
        
        # Call to set_joinstyle(...): (line 504)
        # Processing the call arguments (line 504)
        # Getting the type of 'self' (line 504)
        self_264264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 42), 'self', False)
        # Getting the type of 'js' (line 504)
        js_264265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 48), 'js', False)
        # Processing the call keyword arguments (line 504)
        kwargs_264266 = {}
        # Getting the type of 'GraphicsContextBase' (line 504)
        GraphicsContextBase_264262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 8), 'GraphicsContextBase', False)
        # Obtaining the member 'set_joinstyle' of a type (line 504)
        set_joinstyle_264263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 8), GraphicsContextBase_264262, 'set_joinstyle')
        # Calling set_joinstyle(args, kwargs) (line 504)
        set_joinstyle_call_result_264267 = invoke(stypy.reporting.localization.Localization(__file__, 504, 8), set_joinstyle_264263, *[self_264264, js_264265], **kwargs_264266)
        
        
        # Call to SetJoin(...): (line 505)
        # Processing the call arguments (line 505)
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 505)
        self_264271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 51), 'self', False)
        # Obtaining the member '_joinstyle' of a type (line 505)
        _joinstyle_264272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 505, 51), self_264271, '_joinstyle')
        # Getting the type of 'GraphicsContextWx' (line 505)
        GraphicsContextWx_264273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 26), 'GraphicsContextWx', False)
        # Obtaining the member '_joind' of a type (line 505)
        _joind_264274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 505, 26), GraphicsContextWx_264273, '_joind')
        # Obtaining the member '__getitem__' of a type (line 505)
        getitem___264275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 505, 26), _joind_264274, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 505)
        subscript_call_result_264276 = invoke(stypy.reporting.localization.Localization(__file__, 505, 26), getitem___264275, _joinstyle_264272)
        
        # Processing the call keyword arguments (line 505)
        kwargs_264277 = {}
        # Getting the type of 'self' (line 505)
        self_264268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 8), 'self', False)
        # Obtaining the member '_pen' of a type (line 505)
        _pen_264269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 505, 8), self_264268, '_pen')
        # Obtaining the member 'SetJoin' of a type (line 505)
        SetJoin_264270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 505, 8), _pen_264269, 'SetJoin')
        # Calling SetJoin(args, kwargs) (line 505)
        SetJoin_call_result_264278 = invoke(stypy.reporting.localization.Localization(__file__, 505, 8), SetJoin_264270, *[subscript_call_result_264276], **kwargs_264277)
        
        
        # Call to SetPen(...): (line 506)
        # Processing the call arguments (line 506)
        # Getting the type of 'self' (line 506)
        self_264282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 28), 'self', False)
        # Obtaining the member '_pen' of a type (line 506)
        _pen_264283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 28), self_264282, '_pen')
        # Processing the call keyword arguments (line 506)
        kwargs_264284 = {}
        # Getting the type of 'self' (line 506)
        self_264279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 8), 'self', False)
        # Obtaining the member 'gfx_ctx' of a type (line 506)
        gfx_ctx_264280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 8), self_264279, 'gfx_ctx')
        # Obtaining the member 'SetPen' of a type (line 506)
        SetPen_264281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 8), gfx_ctx_264280, 'SetPen')
        # Calling SetPen(args, kwargs) (line 506)
        SetPen_call_result_264285 = invoke(stypy.reporting.localization.Localization(__file__, 506, 8), SetPen_264281, *[_pen_264283], **kwargs_264284)
        
        
        # Call to unselect(...): (line 507)
        # Processing the call keyword arguments (line 507)
        kwargs_264288 = {}
        # Getting the type of 'self' (line 507)
        self_264286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 8), 'self', False)
        # Obtaining the member 'unselect' of a type (line 507)
        unselect_264287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 507, 8), self_264286, 'unselect')
        # Calling unselect(args, kwargs) (line 507)
        unselect_call_result_264289 = invoke(stypy.reporting.localization.Localization(__file__, 507, 8), unselect_264287, *[], **kwargs_264288)
        
        
        # ################# End of 'set_joinstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_joinstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 498)
        stypy_return_type_264290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264290)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_joinstyle'
        return stypy_return_type_264290


    @norecursion
    def set_linestyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_linestyle'
        module_type_store = module_type_store.open_function_context('set_linestyle', 509, 4, False)
        # Assigning a type to the variable 'self' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextWx.set_linestyle.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextWx.set_linestyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextWx.set_linestyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextWx.set_linestyle.__dict__.__setitem__('stypy_function_name', 'GraphicsContextWx.set_linestyle')
        GraphicsContextWx.set_linestyle.__dict__.__setitem__('stypy_param_names_list', ['ls'])
        GraphicsContextWx.set_linestyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextWx.set_linestyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextWx.set_linestyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextWx.set_linestyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextWx.set_linestyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextWx.set_linestyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextWx.set_linestyle', ['ls'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_linestyle', localization, ['ls'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_linestyle(...)' code ##################

        unicode_264291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, (-1)), 'unicode', u'\n        Set the line style to be one of\n        ')
        
        # Call to DEBUG_MSG(...): (line 514)
        # Processing the call arguments (line 514)
        unicode_264293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 18), 'unicode', u'set_linestyle()')
        int_264294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 37), 'int')
        # Getting the type of 'self' (line 514)
        self_264295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 40), 'self', False)
        # Processing the call keyword arguments (line 514)
        kwargs_264296 = {}
        # Getting the type of 'DEBUG_MSG' (line 514)
        DEBUG_MSG_264292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 514)
        DEBUG_MSG_call_result_264297 = invoke(stypy.reporting.localization.Localization(__file__, 514, 8), DEBUG_MSG_264292, *[unicode_264293, int_264294, self_264295], **kwargs_264296)
        
        
        # Call to select(...): (line 515)
        # Processing the call keyword arguments (line 515)
        kwargs_264300 = {}
        # Getting the type of 'self' (line 515)
        self_264298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 8), 'self', False)
        # Obtaining the member 'select' of a type (line 515)
        select_264299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 8), self_264298, 'select')
        # Calling select(args, kwargs) (line 515)
        select_call_result_264301 = invoke(stypy.reporting.localization.Localization(__file__, 515, 8), select_264299, *[], **kwargs_264300)
        
        
        # Call to set_linestyle(...): (line 516)
        # Processing the call arguments (line 516)
        # Getting the type of 'self' (line 516)
        self_264304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 42), 'self', False)
        # Getting the type of 'ls' (line 516)
        ls_264305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 48), 'ls', False)
        # Processing the call keyword arguments (line 516)
        kwargs_264306 = {}
        # Getting the type of 'GraphicsContextBase' (line 516)
        GraphicsContextBase_264302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 8), 'GraphicsContextBase', False)
        # Obtaining the member 'set_linestyle' of a type (line 516)
        set_linestyle_264303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 8), GraphicsContextBase_264302, 'set_linestyle')
        # Calling set_linestyle(args, kwargs) (line 516)
        set_linestyle_call_result_264307 = invoke(stypy.reporting.localization.Localization(__file__, 516, 8), set_linestyle_264303, *[self_264304, ls_264305], **kwargs_264306)
        
        
        
        # SSA begins for try-except statement (line 517)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Attribute (line 518):
        
        # Assigning a Subscript to a Attribute (line 518):
        
        # Obtaining the type of the subscript
        # Getting the type of 'ls' (line 518)
        ls_264308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 39), 'ls')
        # Getting the type of 'wxc' (line 518)
        wxc_264309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 26), 'wxc')
        # Obtaining the member 'dashd_wx' of a type (line 518)
        dashd_wx_264310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 26), wxc_264309, 'dashd_wx')
        # Obtaining the member '__getitem__' of a type (line 518)
        getitem___264311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 26), dashd_wx_264310, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 518)
        subscript_call_result_264312 = invoke(stypy.reporting.localization.Localization(__file__, 518, 26), getitem___264311, ls_264308)
        
        # Getting the type of 'self' (line 518)
        self_264313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 12), 'self')
        # Setting the type of the member '_style' of a type (line 518)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 12), self_264313, '_style', subscript_call_result_264312)
        # SSA branch for the except part of a try statement (line 517)
        # SSA branch for the except 'KeyError' branch of a try statement (line 517)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Attribute to a Attribute (line 520):
        
        # Assigning a Attribute to a Attribute (line 520):
        # Getting the type of 'wx' (line 520)
        wx_264314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 26), 'wx')
        # Obtaining the member 'LONG_DASH' of a type (line 520)
        LONG_DASH_264315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 26), wx_264314, 'LONG_DASH')
        # Getting the type of 'self' (line 520)
        self_264316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 12), 'self')
        # Setting the type of the member '_style' of a type (line 520)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 12), self_264316, '_style', LONG_DASH_264315)
        # SSA join for try-except statement (line 517)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'wx' (line 523)
        wx_264317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 11), 'wx')
        # Obtaining the member 'Platform' of a type (line 523)
        Platform_264318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 11), wx_264317, 'Platform')
        unicode_264319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 26), 'unicode', u'__WXMSW__')
        # Applying the binary operator '==' (line 523)
        result_eq_264320 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 11), '==', Platform_264318, unicode_264319)
        
        # Testing the type of an if condition (line 523)
        if_condition_264321 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 523, 8), result_eq_264320)
        # Assigning a type to the variable 'if_condition_264321' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'if_condition_264321', if_condition_264321)
        # SSA begins for if statement (line 523)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_linewidth(...): (line 524)
        # Processing the call arguments (line 524)
        int_264324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 31), 'int')
        # Processing the call keyword arguments (line 524)
        kwargs_264325 = {}
        # Getting the type of 'self' (line 524)
        self_264322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 12), 'self', False)
        # Obtaining the member 'set_linewidth' of a type (line 524)
        set_linewidth_264323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 12), self_264322, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 524)
        set_linewidth_call_result_264326 = invoke(stypy.reporting.localization.Localization(__file__, 524, 12), set_linewidth_264323, *[int_264324], **kwargs_264325)
        
        # SSA join for if statement (line 523)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to SetStyle(...): (line 526)
        # Processing the call arguments (line 526)
        # Getting the type of 'self' (line 526)
        self_264330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 27), 'self', False)
        # Obtaining the member '_style' of a type (line 526)
        _style_264331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 27), self_264330, '_style')
        # Processing the call keyword arguments (line 526)
        kwargs_264332 = {}
        # Getting the type of 'self' (line 526)
        self_264327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'self', False)
        # Obtaining the member '_pen' of a type (line 526)
        _pen_264328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 8), self_264327, '_pen')
        # Obtaining the member 'SetStyle' of a type (line 526)
        SetStyle_264329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 8), _pen_264328, 'SetStyle')
        # Calling SetStyle(args, kwargs) (line 526)
        SetStyle_call_result_264333 = invoke(stypy.reporting.localization.Localization(__file__, 526, 8), SetStyle_264329, *[_style_264331], **kwargs_264332)
        
        
        # Call to SetPen(...): (line 527)
        # Processing the call arguments (line 527)
        # Getting the type of 'self' (line 527)
        self_264337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 28), 'self', False)
        # Obtaining the member '_pen' of a type (line 527)
        _pen_264338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 28), self_264337, '_pen')
        # Processing the call keyword arguments (line 527)
        kwargs_264339 = {}
        # Getting the type of 'self' (line 527)
        self_264334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 8), 'self', False)
        # Obtaining the member 'gfx_ctx' of a type (line 527)
        gfx_ctx_264335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 8), self_264334, 'gfx_ctx')
        # Obtaining the member 'SetPen' of a type (line 527)
        SetPen_264336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 8), gfx_ctx_264335, 'SetPen')
        # Calling SetPen(args, kwargs) (line 527)
        SetPen_call_result_264340 = invoke(stypy.reporting.localization.Localization(__file__, 527, 8), SetPen_264336, *[_pen_264338], **kwargs_264339)
        
        
        # Call to unselect(...): (line 528)
        # Processing the call keyword arguments (line 528)
        kwargs_264343 = {}
        # Getting the type of 'self' (line 528)
        self_264341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'self', False)
        # Obtaining the member 'unselect' of a type (line 528)
        unselect_264342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 8), self_264341, 'unselect')
        # Calling unselect(args, kwargs) (line 528)
        unselect_call_result_264344 = invoke(stypy.reporting.localization.Localization(__file__, 528, 8), unselect_264342, *[], **kwargs_264343)
        
        
        # ################# End of 'set_linestyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_linestyle' in the type store
        # Getting the type of 'stypy_return_type' (line 509)
        stypy_return_type_264345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264345)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_linestyle'
        return stypy_return_type_264345


    @norecursion
    def get_wxcolour(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_wxcolour'
        module_type_store = module_type_store.open_function_context('get_wxcolour', 530, 4, False)
        # Assigning a type to the variable 'self' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextWx.get_wxcolour.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextWx.get_wxcolour.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextWx.get_wxcolour.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextWx.get_wxcolour.__dict__.__setitem__('stypy_function_name', 'GraphicsContextWx.get_wxcolour')
        GraphicsContextWx.get_wxcolour.__dict__.__setitem__('stypy_param_names_list', ['color'])
        GraphicsContextWx.get_wxcolour.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextWx.get_wxcolour.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextWx.get_wxcolour.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextWx.get_wxcolour.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextWx.get_wxcolour.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextWx.get_wxcolour.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextWx.get_wxcolour', ['color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_wxcolour', localization, ['color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_wxcolour(...)' code ##################

        unicode_264346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 8), 'unicode', u'return a wx.Colour from RGB format')
        
        # Call to DEBUG_MSG(...): (line 532)
        # Processing the call arguments (line 532)
        unicode_264348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 18), 'unicode', u'get_wx_color()')
        int_264349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 36), 'int')
        # Getting the type of 'self' (line 532)
        self_264350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 39), 'self', False)
        # Processing the call keyword arguments (line 532)
        kwargs_264351 = {}
        # Getting the type of 'DEBUG_MSG' (line 532)
        DEBUG_MSG_264347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 532)
        DEBUG_MSG_call_result_264352 = invoke(stypy.reporting.localization.Localization(__file__, 532, 8), DEBUG_MSG_264347, *[unicode_264348, int_264349, self_264350], **kwargs_264351)
        
        
        
        
        # Call to len(...): (line 533)
        # Processing the call arguments (line 533)
        # Getting the type of 'color' (line 533)
        color_264354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 15), 'color', False)
        # Processing the call keyword arguments (line 533)
        kwargs_264355 = {}
        # Getting the type of 'len' (line 533)
        len_264353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 11), 'len', False)
        # Calling len(args, kwargs) (line 533)
        len_call_result_264356 = invoke(stypy.reporting.localization.Localization(__file__, 533, 11), len_264353, *[color_264354], **kwargs_264355)
        
        int_264357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 25), 'int')
        # Applying the binary operator '==' (line 533)
        result_eq_264358 = python_operator(stypy.reporting.localization.Localization(__file__, 533, 11), '==', len_call_result_264356, int_264357)
        
        # Testing the type of an if condition (line 533)
        if_condition_264359 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 533, 8), result_eq_264358)
        # Assigning a type to the variable 'if_condition_264359' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 8), 'if_condition_264359', if_condition_264359)
        # SSA begins for if statement (line 533)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 534):
        
        # Assigning a Subscript to a Name (line 534):
        
        # Obtaining the type of the subscript
        int_264360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 12), 'int')
        # Getting the type of 'color' (line 534)
        color_264361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 22), 'color')
        # Obtaining the member '__getitem__' of a type (line 534)
        getitem___264362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 12), color_264361, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 534)
        subscript_call_result_264363 = invoke(stypy.reporting.localization.Localization(__file__, 534, 12), getitem___264362, int_264360)
        
        # Assigning a type to the variable 'tuple_var_assignment_263017' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 12), 'tuple_var_assignment_263017', subscript_call_result_264363)
        
        # Assigning a Subscript to a Name (line 534):
        
        # Obtaining the type of the subscript
        int_264364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 12), 'int')
        # Getting the type of 'color' (line 534)
        color_264365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 22), 'color')
        # Obtaining the member '__getitem__' of a type (line 534)
        getitem___264366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 12), color_264365, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 534)
        subscript_call_result_264367 = invoke(stypy.reporting.localization.Localization(__file__, 534, 12), getitem___264366, int_264364)
        
        # Assigning a type to the variable 'tuple_var_assignment_263018' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 12), 'tuple_var_assignment_263018', subscript_call_result_264367)
        
        # Assigning a Subscript to a Name (line 534):
        
        # Obtaining the type of the subscript
        int_264368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 12), 'int')
        # Getting the type of 'color' (line 534)
        color_264369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 22), 'color')
        # Obtaining the member '__getitem__' of a type (line 534)
        getitem___264370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 12), color_264369, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 534)
        subscript_call_result_264371 = invoke(stypy.reporting.localization.Localization(__file__, 534, 12), getitem___264370, int_264368)
        
        # Assigning a type to the variable 'tuple_var_assignment_263019' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 12), 'tuple_var_assignment_263019', subscript_call_result_264371)
        
        # Assigning a Name to a Name (line 534):
        # Getting the type of 'tuple_var_assignment_263017' (line 534)
        tuple_var_assignment_263017_264372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 12), 'tuple_var_assignment_263017')
        # Assigning a type to the variable 'r' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 12), 'r', tuple_var_assignment_263017_264372)
        
        # Assigning a Name to a Name (line 534):
        # Getting the type of 'tuple_var_assignment_263018' (line 534)
        tuple_var_assignment_263018_264373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 12), 'tuple_var_assignment_263018')
        # Assigning a type to the variable 'g' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 15), 'g', tuple_var_assignment_263018_264373)
        
        # Assigning a Name to a Name (line 534):
        # Getting the type of 'tuple_var_assignment_263019' (line 534)
        tuple_var_assignment_263019_264374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 12), 'tuple_var_assignment_263019')
        # Assigning a type to the variable 'b' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 18), 'b', tuple_var_assignment_263019_264374)
        
        # Getting the type of 'r' (line 535)
        r_264375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 12), 'r')
        int_264376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 17), 'int')
        # Applying the binary operator '*=' (line 535)
        result_imul_264377 = python_operator(stypy.reporting.localization.Localization(__file__, 535, 12), '*=', r_264375, int_264376)
        # Assigning a type to the variable 'r' (line 535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 12), 'r', result_imul_264377)
        
        
        # Getting the type of 'g' (line 536)
        g_264378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 12), 'g')
        int_264379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 536, 17), 'int')
        # Applying the binary operator '*=' (line 536)
        result_imul_264380 = python_operator(stypy.reporting.localization.Localization(__file__, 536, 12), '*=', g_264378, int_264379)
        # Assigning a type to the variable 'g' (line 536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 536, 12), 'g', result_imul_264380)
        
        
        # Getting the type of 'b' (line 537)
        b_264381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 12), 'b')
        int_264382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 537, 17), 'int')
        # Applying the binary operator '*=' (line 537)
        result_imul_264383 = python_operator(stypy.reporting.localization.Localization(__file__, 537, 12), '*=', b_264381, int_264382)
        # Assigning a type to the variable 'b' (line 537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 12), 'b', result_imul_264383)
        
        
        # Call to Colour(...): (line 538)
        # Processing the call keyword arguments (line 538)
        
        # Call to int(...): (line 538)
        # Processing the call arguments (line 538)
        # Getting the type of 'r' (line 538)
        r_264387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 37), 'r', False)
        # Processing the call keyword arguments (line 538)
        kwargs_264388 = {}
        # Getting the type of 'int' (line 538)
        int_264386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 33), 'int', False)
        # Calling int(args, kwargs) (line 538)
        int_call_result_264389 = invoke(stypy.reporting.localization.Localization(__file__, 538, 33), int_264386, *[r_264387], **kwargs_264388)
        
        keyword_264390 = int_call_result_264389
        
        # Call to int(...): (line 538)
        # Processing the call arguments (line 538)
        # Getting the type of 'g' (line 538)
        g_264392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 51), 'g', False)
        # Processing the call keyword arguments (line 538)
        kwargs_264393 = {}
        # Getting the type of 'int' (line 538)
        int_264391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 47), 'int', False)
        # Calling int(args, kwargs) (line 538)
        int_call_result_264394 = invoke(stypy.reporting.localization.Localization(__file__, 538, 47), int_264391, *[g_264392], **kwargs_264393)
        
        keyword_264395 = int_call_result_264394
        
        # Call to int(...): (line 538)
        # Processing the call arguments (line 538)
        # Getting the type of 'b' (line 538)
        b_264397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 64), 'b', False)
        # Processing the call keyword arguments (line 538)
        kwargs_264398 = {}
        # Getting the type of 'int' (line 538)
        int_264396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 60), 'int', False)
        # Calling int(args, kwargs) (line 538)
        int_call_result_264399 = invoke(stypy.reporting.localization.Localization(__file__, 538, 60), int_264396, *[b_264397], **kwargs_264398)
        
        keyword_264400 = int_call_result_264399
        kwargs_264401 = {'blue': keyword_264400, 'green': keyword_264395, 'red': keyword_264390}
        # Getting the type of 'wx' (line 538)
        wx_264384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 19), 'wx', False)
        # Obtaining the member 'Colour' of a type (line 538)
        Colour_264385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 19), wx_264384, 'Colour')
        # Calling Colour(args, kwargs) (line 538)
        Colour_call_result_264402 = invoke(stypy.reporting.localization.Localization(__file__, 538, 19), Colour_264385, *[], **kwargs_264401)
        
        # Assigning a type to the variable 'stypy_return_type' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 12), 'stypy_return_type', Colour_call_result_264402)
        # SSA branch for the else part of an if statement (line 533)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Tuple (line 540):
        
        # Assigning a Subscript to a Name (line 540):
        
        # Obtaining the type of the subscript
        int_264403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 12), 'int')
        # Getting the type of 'color' (line 540)
        color_264404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 25), 'color')
        # Obtaining the member '__getitem__' of a type (line 540)
        getitem___264405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 12), color_264404, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 540)
        subscript_call_result_264406 = invoke(stypy.reporting.localization.Localization(__file__, 540, 12), getitem___264405, int_264403)
        
        # Assigning a type to the variable 'tuple_var_assignment_263020' (line 540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 12), 'tuple_var_assignment_263020', subscript_call_result_264406)
        
        # Assigning a Subscript to a Name (line 540):
        
        # Obtaining the type of the subscript
        int_264407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 12), 'int')
        # Getting the type of 'color' (line 540)
        color_264408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 25), 'color')
        # Obtaining the member '__getitem__' of a type (line 540)
        getitem___264409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 12), color_264408, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 540)
        subscript_call_result_264410 = invoke(stypy.reporting.localization.Localization(__file__, 540, 12), getitem___264409, int_264407)
        
        # Assigning a type to the variable 'tuple_var_assignment_263021' (line 540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 12), 'tuple_var_assignment_263021', subscript_call_result_264410)
        
        # Assigning a Subscript to a Name (line 540):
        
        # Obtaining the type of the subscript
        int_264411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 12), 'int')
        # Getting the type of 'color' (line 540)
        color_264412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 25), 'color')
        # Obtaining the member '__getitem__' of a type (line 540)
        getitem___264413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 12), color_264412, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 540)
        subscript_call_result_264414 = invoke(stypy.reporting.localization.Localization(__file__, 540, 12), getitem___264413, int_264411)
        
        # Assigning a type to the variable 'tuple_var_assignment_263022' (line 540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 12), 'tuple_var_assignment_263022', subscript_call_result_264414)
        
        # Assigning a Subscript to a Name (line 540):
        
        # Obtaining the type of the subscript
        int_264415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 12), 'int')
        # Getting the type of 'color' (line 540)
        color_264416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 25), 'color')
        # Obtaining the member '__getitem__' of a type (line 540)
        getitem___264417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 12), color_264416, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 540)
        subscript_call_result_264418 = invoke(stypy.reporting.localization.Localization(__file__, 540, 12), getitem___264417, int_264415)
        
        # Assigning a type to the variable 'tuple_var_assignment_263023' (line 540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 12), 'tuple_var_assignment_263023', subscript_call_result_264418)
        
        # Assigning a Name to a Name (line 540):
        # Getting the type of 'tuple_var_assignment_263020' (line 540)
        tuple_var_assignment_263020_264419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 12), 'tuple_var_assignment_263020')
        # Assigning a type to the variable 'r' (line 540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 12), 'r', tuple_var_assignment_263020_264419)
        
        # Assigning a Name to a Name (line 540):
        # Getting the type of 'tuple_var_assignment_263021' (line 540)
        tuple_var_assignment_263021_264420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 12), 'tuple_var_assignment_263021')
        # Assigning a type to the variable 'g' (line 540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 15), 'g', tuple_var_assignment_263021_264420)
        
        # Assigning a Name to a Name (line 540):
        # Getting the type of 'tuple_var_assignment_263022' (line 540)
        tuple_var_assignment_263022_264421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 12), 'tuple_var_assignment_263022')
        # Assigning a type to the variable 'b' (line 540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 18), 'b', tuple_var_assignment_263022_264421)
        
        # Assigning a Name to a Name (line 540):
        # Getting the type of 'tuple_var_assignment_263023' (line 540)
        tuple_var_assignment_263023_264422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 12), 'tuple_var_assignment_263023')
        # Assigning a type to the variable 'a' (line 540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 21), 'a', tuple_var_assignment_263023_264422)
        
        # Getting the type of 'r' (line 541)
        r_264423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 12), 'r')
        int_264424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 17), 'int')
        # Applying the binary operator '*=' (line 541)
        result_imul_264425 = python_operator(stypy.reporting.localization.Localization(__file__, 541, 12), '*=', r_264423, int_264424)
        # Assigning a type to the variable 'r' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 12), 'r', result_imul_264425)
        
        
        # Getting the type of 'g' (line 542)
        g_264426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 12), 'g')
        int_264427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 17), 'int')
        # Applying the binary operator '*=' (line 542)
        result_imul_264428 = python_operator(stypy.reporting.localization.Localization(__file__, 542, 12), '*=', g_264426, int_264427)
        # Assigning a type to the variable 'g' (line 542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 12), 'g', result_imul_264428)
        
        
        # Getting the type of 'b' (line 543)
        b_264429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 12), 'b')
        int_264430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 17), 'int')
        # Applying the binary operator '*=' (line 543)
        result_imul_264431 = python_operator(stypy.reporting.localization.Localization(__file__, 543, 12), '*=', b_264429, int_264430)
        # Assigning a type to the variable 'b' (line 543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 12), 'b', result_imul_264431)
        
        
        # Getting the type of 'a' (line 544)
        a_264432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 12), 'a')
        int_264433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 17), 'int')
        # Applying the binary operator '*=' (line 544)
        result_imul_264434 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 12), '*=', a_264432, int_264433)
        # Assigning a type to the variable 'a' (line 544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 12), 'a', result_imul_264434)
        
        
        # Call to Colour(...): (line 545)
        # Processing the call keyword arguments (line 545)
        
        # Call to int(...): (line 546)
        # Processing the call arguments (line 546)
        # Getting the type of 'r' (line 546)
        r_264438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 24), 'r', False)
        # Processing the call keyword arguments (line 546)
        kwargs_264439 = {}
        # Getting the type of 'int' (line 546)
        int_264437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 20), 'int', False)
        # Calling int(args, kwargs) (line 546)
        int_call_result_264440 = invoke(stypy.reporting.localization.Localization(__file__, 546, 20), int_264437, *[r_264438], **kwargs_264439)
        
        keyword_264441 = int_call_result_264440
        
        # Call to int(...): (line 547)
        # Processing the call arguments (line 547)
        # Getting the type of 'g' (line 547)
        g_264443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 26), 'g', False)
        # Processing the call keyword arguments (line 547)
        kwargs_264444 = {}
        # Getting the type of 'int' (line 547)
        int_264442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 22), 'int', False)
        # Calling int(args, kwargs) (line 547)
        int_call_result_264445 = invoke(stypy.reporting.localization.Localization(__file__, 547, 22), int_264442, *[g_264443], **kwargs_264444)
        
        keyword_264446 = int_call_result_264445
        
        # Call to int(...): (line 548)
        # Processing the call arguments (line 548)
        # Getting the type of 'b' (line 548)
        b_264448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 25), 'b', False)
        # Processing the call keyword arguments (line 548)
        kwargs_264449 = {}
        # Getting the type of 'int' (line 548)
        int_264447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 21), 'int', False)
        # Calling int(args, kwargs) (line 548)
        int_call_result_264450 = invoke(stypy.reporting.localization.Localization(__file__, 548, 21), int_264447, *[b_264448], **kwargs_264449)
        
        keyword_264451 = int_call_result_264450
        
        # Call to int(...): (line 549)
        # Processing the call arguments (line 549)
        # Getting the type of 'a' (line 549)
        a_264453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 26), 'a', False)
        # Processing the call keyword arguments (line 549)
        kwargs_264454 = {}
        # Getting the type of 'int' (line 549)
        int_264452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 22), 'int', False)
        # Calling int(args, kwargs) (line 549)
        int_call_result_264455 = invoke(stypy.reporting.localization.Localization(__file__, 549, 22), int_264452, *[a_264453], **kwargs_264454)
        
        keyword_264456 = int_call_result_264455
        kwargs_264457 = {'blue': keyword_264451, 'alpha': keyword_264456, 'green': keyword_264446, 'red': keyword_264441}
        # Getting the type of 'wx' (line 545)
        wx_264435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 19), 'wx', False)
        # Obtaining the member 'Colour' of a type (line 545)
        Colour_264436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 19), wx_264435, 'Colour')
        # Calling Colour(args, kwargs) (line 545)
        Colour_call_result_264458 = invoke(stypy.reporting.localization.Localization(__file__, 545, 19), Colour_264436, *[], **kwargs_264457)
        
        # Assigning a type to the variable 'stypy_return_type' (line 545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 545, 12), 'stypy_return_type', Colour_call_result_264458)
        # SSA join for if statement (line 533)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_wxcolour(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_wxcolour' in the type store
        # Getting the type of 'stypy_return_type' (line 530)
        stypy_return_type_264459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264459)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_wxcolour'
        return stypy_return_type_264459


# Assigning a type to the variable 'GraphicsContextWx' (line 388)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 0), 'GraphicsContextWx', GraphicsContextWx)

# Assigning a Dict to a Name (line 402):

# Obtaining an instance of the builtin type 'dict' (line 402)
dict_264460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 402, 12), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 402)
# Adding element type (key, value) (line 402)
unicode_264461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 402, 13), 'unicode', u'butt')
# Getting the type of 'wx' (line 402)
wx_264462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 21), 'wx')
# Obtaining the member 'CAP_BUTT' of a type (line 402)
CAP_BUTT_264463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 21), wx_264462, 'CAP_BUTT')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 402, 12), dict_264460, (unicode_264461, CAP_BUTT_264463))
# Adding element type (key, value) (line 402)
unicode_264464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 13), 'unicode', u'projecting')
# Getting the type of 'wx' (line 403)
wx_264465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 27), 'wx')
# Obtaining the member 'CAP_PROJECTING' of a type (line 403)
CAP_PROJECTING_264466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 27), wx_264465, 'CAP_PROJECTING')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 402, 12), dict_264460, (unicode_264464, CAP_PROJECTING_264466))
# Adding element type (key, value) (line 402)
unicode_264467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, 13), 'unicode', u'round')
# Getting the type of 'wx' (line 404)
wx_264468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 22), 'wx')
# Obtaining the member 'CAP_ROUND' of a type (line 404)
CAP_ROUND_264469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 22), wx_264468, 'CAP_ROUND')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 402, 12), dict_264460, (unicode_264467, CAP_ROUND_264469))

# Getting the type of 'GraphicsContextWx'
GraphicsContextWx_264470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'GraphicsContextWx')
# Setting the type of the member '_capd' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), GraphicsContextWx_264470, '_capd', dict_264460)

# Assigning a Dict to a Name (line 406):

# Obtaining an instance of the builtin type 'dict' (line 406)
dict_264471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 406, 13), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 406)
# Adding element type (key, value) (line 406)
unicode_264472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 406, 14), 'unicode', u'bevel')
# Getting the type of 'wx' (line 406)
wx_264473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 23), 'wx')
# Obtaining the member 'JOIN_BEVEL' of a type (line 406)
JOIN_BEVEL_264474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 23), wx_264473, 'JOIN_BEVEL')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 406, 13), dict_264471, (unicode_264472, JOIN_BEVEL_264474))
# Adding element type (key, value) (line 406)
unicode_264475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 407, 14), 'unicode', u'miter')
# Getting the type of 'wx' (line 407)
wx_264476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 23), 'wx')
# Obtaining the member 'JOIN_MITER' of a type (line 407)
JOIN_MITER_264477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 407, 23), wx_264476, 'JOIN_MITER')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 406, 13), dict_264471, (unicode_264475, JOIN_MITER_264477))
# Adding element type (key, value) (line 406)
unicode_264478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 408, 14), 'unicode', u'round')
# Getting the type of 'wx' (line 408)
wx_264479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 23), 'wx')
# Obtaining the member 'JOIN_ROUND' of a type (line 408)
JOIN_ROUND_264480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 23), wx_264479, 'JOIN_ROUND')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 406, 13), dict_264471, (unicode_264478, JOIN_ROUND_264480))

# Getting the type of 'GraphicsContextWx'
GraphicsContextWx_264481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'GraphicsContextWx')
# Setting the type of the member '_joind' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), GraphicsContextWx_264481, '_joind', dict_264471)

# Assigning a Call to a Name (line 410):

# Call to WeakKeyDictionary(...): (line 410)
# Processing the call keyword arguments (line 410)
kwargs_264484 = {}
# Getting the type of 'weakref' (line 410)
weakref_264482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 13), 'weakref', False)
# Obtaining the member 'WeakKeyDictionary' of a type (line 410)
WeakKeyDictionary_264483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 13), weakref_264482, 'WeakKeyDictionary')
# Calling WeakKeyDictionary(args, kwargs) (line 410)
WeakKeyDictionary_call_result_264485 = invoke(stypy.reporting.localization.Localization(__file__, 410, 13), WeakKeyDictionary_264483, *[], **kwargs_264484)

# Getting the type of 'GraphicsContextWx'
GraphicsContextWx_264486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'GraphicsContextWx')
# Setting the type of the member '_cache' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), GraphicsContextWx_264486, '_cache', WeakKeyDictionary_call_result_264485)
# Declaration of the 'FigureCanvasWx' class
# Getting the type of 'FigureCanvasBase' (line 552)
FigureCanvasBase_264487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 21), 'FigureCanvasBase')
# Getting the type of 'wx' (line 552)
wx_264488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 39), 'wx')
# Obtaining the member 'Panel' of a type (line 552)
Panel_264489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 39), wx_264488, 'Panel')

class FigureCanvasWx(FigureCanvasBase_264487, Panel_264489, ):
    unicode_264490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, (-1)), 'unicode', u'\n    The FigureCanvas contains the figure and does event handling.\n\n    In the wxPython backend, it is derived from wxPanel, and (usually) lives\n    inside a frame instantiated by a FigureManagerWx. The parent window\n    probably implements a wx.Sizer to control the displayed control size - but\n    we give a hint as to our preferred minimum size.\n    ')
    
    # Assigning a Dict to a Name (line 562):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 621, 4, False)
        # Assigning a type to the variable 'self' (line 622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.__init__', ['parent', 'id', 'figure'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['parent', 'id', 'figure'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_264491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, (-1)), 'unicode', u'\n        Initialise a FigureWx instance.\n\n        - Initialise the FigureCanvasBase and wxPanel parents.\n        - Set event handlers for:\n          EVT_SIZE  (Resize event)\n          EVT_PAINT (Paint event)\n        ')
        
        # Call to __init__(...): (line 631)
        # Processing the call arguments (line 631)
        # Getting the type of 'self' (line 631)
        self_264494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 34), 'self', False)
        # Getting the type of 'figure' (line 631)
        figure_264495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 40), 'figure', False)
        # Processing the call keyword arguments (line 631)
        kwargs_264496 = {}
        # Getting the type of 'FigureCanvasBase' (line 631)
        FigureCanvasBase_264492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 8), 'FigureCanvasBase', False)
        # Obtaining the member '__init__' of a type (line 631)
        init___264493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 631, 8), FigureCanvasBase_264492, '__init__')
        # Calling __init__(args, kwargs) (line 631)
        init___call_result_264497 = invoke(stypy.reporting.localization.Localization(__file__, 631, 8), init___264493, *[self_264494, figure_264495], **kwargs_264496)
        
        
        # Assigning a Attribute to a Tuple (line 634):
        
        # Assigning a Subscript to a Name (line 634):
        
        # Obtaining the type of the subscript
        int_264498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 8), 'int')
        # Getting the type of 'figure' (line 634)
        figure_264499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 21), 'figure')
        # Obtaining the member 'bbox' of a type (line 634)
        bbox_264500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 21), figure_264499, 'bbox')
        # Obtaining the member 'bounds' of a type (line 634)
        bounds_264501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 21), bbox_264500, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 634)
        getitem___264502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 8), bounds_264501, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 634)
        subscript_call_result_264503 = invoke(stypy.reporting.localization.Localization(__file__, 634, 8), getitem___264502, int_264498)
        
        # Assigning a type to the variable 'tuple_var_assignment_263024' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'tuple_var_assignment_263024', subscript_call_result_264503)
        
        # Assigning a Subscript to a Name (line 634):
        
        # Obtaining the type of the subscript
        int_264504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 8), 'int')
        # Getting the type of 'figure' (line 634)
        figure_264505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 21), 'figure')
        # Obtaining the member 'bbox' of a type (line 634)
        bbox_264506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 21), figure_264505, 'bbox')
        # Obtaining the member 'bounds' of a type (line 634)
        bounds_264507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 21), bbox_264506, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 634)
        getitem___264508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 8), bounds_264507, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 634)
        subscript_call_result_264509 = invoke(stypy.reporting.localization.Localization(__file__, 634, 8), getitem___264508, int_264504)
        
        # Assigning a type to the variable 'tuple_var_assignment_263025' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'tuple_var_assignment_263025', subscript_call_result_264509)
        
        # Assigning a Subscript to a Name (line 634):
        
        # Obtaining the type of the subscript
        int_264510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 8), 'int')
        # Getting the type of 'figure' (line 634)
        figure_264511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 21), 'figure')
        # Obtaining the member 'bbox' of a type (line 634)
        bbox_264512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 21), figure_264511, 'bbox')
        # Obtaining the member 'bounds' of a type (line 634)
        bounds_264513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 21), bbox_264512, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 634)
        getitem___264514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 8), bounds_264513, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 634)
        subscript_call_result_264515 = invoke(stypy.reporting.localization.Localization(__file__, 634, 8), getitem___264514, int_264510)
        
        # Assigning a type to the variable 'tuple_var_assignment_263026' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'tuple_var_assignment_263026', subscript_call_result_264515)
        
        # Assigning a Subscript to a Name (line 634):
        
        # Obtaining the type of the subscript
        int_264516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 8), 'int')
        # Getting the type of 'figure' (line 634)
        figure_264517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 21), 'figure')
        # Obtaining the member 'bbox' of a type (line 634)
        bbox_264518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 21), figure_264517, 'bbox')
        # Obtaining the member 'bounds' of a type (line 634)
        bounds_264519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 21), bbox_264518, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 634)
        getitem___264520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 8), bounds_264519, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 634)
        subscript_call_result_264521 = invoke(stypy.reporting.localization.Localization(__file__, 634, 8), getitem___264520, int_264516)
        
        # Assigning a type to the variable 'tuple_var_assignment_263027' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'tuple_var_assignment_263027', subscript_call_result_264521)
        
        # Assigning a Name to a Name (line 634):
        # Getting the type of 'tuple_var_assignment_263024' (line 634)
        tuple_var_assignment_263024_264522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'tuple_var_assignment_263024')
        # Assigning a type to the variable 'l' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'l', tuple_var_assignment_263024_264522)
        
        # Assigning a Name to a Name (line 634):
        # Getting the type of 'tuple_var_assignment_263025' (line 634)
        tuple_var_assignment_263025_264523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'tuple_var_assignment_263025')
        # Assigning a type to the variable 'b' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 11), 'b', tuple_var_assignment_263025_264523)
        
        # Assigning a Name to a Name (line 634):
        # Getting the type of 'tuple_var_assignment_263026' (line 634)
        tuple_var_assignment_263026_264524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'tuple_var_assignment_263026')
        # Assigning a type to the variable 'w' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 14), 'w', tuple_var_assignment_263026_264524)
        
        # Assigning a Name to a Name (line 634):
        # Getting the type of 'tuple_var_assignment_263027' (line 634)
        tuple_var_assignment_263027_264525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'tuple_var_assignment_263027')
        # Assigning a type to the variable 'h' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 17), 'h', tuple_var_assignment_263027_264525)
        
        # Assigning a Call to a Name (line 635):
        
        # Assigning a Call to a Name (line 635):
        
        # Call to int(...): (line 635)
        # Processing the call arguments (line 635)
        
        # Call to ceil(...): (line 635)
        # Processing the call arguments (line 635)
        # Getting the type of 'w' (line 635)
        w_264529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 26), 'w', False)
        # Processing the call keyword arguments (line 635)
        kwargs_264530 = {}
        # Getting the type of 'math' (line 635)
        math_264527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 16), 'math', False)
        # Obtaining the member 'ceil' of a type (line 635)
        ceil_264528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 16), math_264527, 'ceil')
        # Calling ceil(args, kwargs) (line 635)
        ceil_call_result_264531 = invoke(stypy.reporting.localization.Localization(__file__, 635, 16), ceil_264528, *[w_264529], **kwargs_264530)
        
        # Processing the call keyword arguments (line 635)
        kwargs_264532 = {}
        # Getting the type of 'int' (line 635)
        int_264526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 12), 'int', False)
        # Calling int(args, kwargs) (line 635)
        int_call_result_264533 = invoke(stypy.reporting.localization.Localization(__file__, 635, 12), int_264526, *[ceil_call_result_264531], **kwargs_264532)
        
        # Assigning a type to the variable 'w' (line 635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 8), 'w', int_call_result_264533)
        
        # Assigning a Call to a Name (line 636):
        
        # Assigning a Call to a Name (line 636):
        
        # Call to int(...): (line 636)
        # Processing the call arguments (line 636)
        
        # Call to ceil(...): (line 636)
        # Processing the call arguments (line 636)
        # Getting the type of 'h' (line 636)
        h_264537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 26), 'h', False)
        # Processing the call keyword arguments (line 636)
        kwargs_264538 = {}
        # Getting the type of 'math' (line 636)
        math_264535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 16), 'math', False)
        # Obtaining the member 'ceil' of a type (line 636)
        ceil_264536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 16), math_264535, 'ceil')
        # Calling ceil(args, kwargs) (line 636)
        ceil_call_result_264539 = invoke(stypy.reporting.localization.Localization(__file__, 636, 16), ceil_264536, *[h_264537], **kwargs_264538)
        
        # Processing the call keyword arguments (line 636)
        kwargs_264540 = {}
        # Getting the type of 'int' (line 636)
        int_264534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 12), 'int', False)
        # Calling int(args, kwargs) (line 636)
        int_call_result_264541 = invoke(stypy.reporting.localization.Localization(__file__, 636, 12), int_264534, *[ceil_call_result_264539], **kwargs_264540)
        
        # Assigning a type to the variable 'h' (line 636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 8), 'h', int_call_result_264541)
        
        # Call to __init__(...): (line 638)
        # Processing the call arguments (line 638)
        # Getting the type of 'self' (line 638)
        self_264545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 26), 'self', False)
        # Getting the type of 'parent' (line 638)
        parent_264546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 32), 'parent', False)
        # Getting the type of 'id' (line 638)
        id_264547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 40), 'id', False)
        # Processing the call keyword arguments (line 638)
        
        # Call to Size(...): (line 638)
        # Processing the call arguments (line 638)
        # Getting the type of 'w' (line 638)
        w_264550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 57), 'w', False)
        # Getting the type of 'h' (line 638)
        h_264551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 60), 'h', False)
        # Processing the call keyword arguments (line 638)
        kwargs_264552 = {}
        # Getting the type of 'wx' (line 638)
        wx_264548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 49), 'wx', False)
        # Obtaining the member 'Size' of a type (line 638)
        Size_264549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 49), wx_264548, 'Size')
        # Calling Size(args, kwargs) (line 638)
        Size_call_result_264553 = invoke(stypy.reporting.localization.Localization(__file__, 638, 49), Size_264549, *[w_264550, h_264551], **kwargs_264552)
        
        keyword_264554 = Size_call_result_264553
        kwargs_264555 = {'size': keyword_264554}
        # Getting the type of 'wx' (line 638)
        wx_264542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'wx', False)
        # Obtaining the member 'Panel' of a type (line 638)
        Panel_264543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 8), wx_264542, 'Panel')
        # Obtaining the member '__init__' of a type (line 638)
        init___264544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 8), Panel_264543, '__init__')
        # Calling __init__(args, kwargs) (line 638)
        init___call_result_264556 = invoke(stypy.reporting.localization.Localization(__file__, 638, 8), init___264544, *[self_264545, parent_264546, id_264547], **kwargs_264555)
        

        @norecursion
        def do_nothing(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'do_nothing'
            module_type_store = module_type_store.open_function_context('do_nothing', 640, 8, False)
            
            # Passed parameters checking function
            do_nothing.stypy_localization = localization
            do_nothing.stypy_type_of_self = None
            do_nothing.stypy_type_store = module_type_store
            do_nothing.stypy_function_name = 'do_nothing'
            do_nothing.stypy_param_names_list = []
            do_nothing.stypy_varargs_param_name = 'args'
            do_nothing.stypy_kwargs_param_name = 'kwargs'
            do_nothing.stypy_call_defaults = defaults
            do_nothing.stypy_call_varargs = varargs
            do_nothing.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'do_nothing', [], 'args', 'kwargs', defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'do_nothing', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'do_nothing(...)' code ##################

            
            # Call to warn(...): (line 641)
            # Processing the call arguments (line 641)
            unicode_264559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 16), 'unicode', u'could not find a setinitialsize function for backend_wx; please report your wxpython version=%s to the matplotlib developers list')
            # Getting the type of 'wxc' (line 645)
            wxc_264560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 16), 'wxc', False)
            # Obtaining the member 'backend_version' of a type (line 645)
            backend_version_264561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 16), wxc_264560, 'backend_version')
            # Applying the binary operator '%' (line 642)
            result_mod_264562 = python_operator(stypy.reporting.localization.Localization(__file__, 642, 16), '%', unicode_264559, backend_version_264561)
            
            # Processing the call keyword arguments (line 641)
            kwargs_264563 = {}
            # Getting the type of 'warnings' (line 641)
            warnings_264557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 12), 'warnings', False)
            # Obtaining the member 'warn' of a type (line 641)
            warn_264558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 12), warnings_264557, 'warn')
            # Calling warn(args, kwargs) (line 641)
            warn_call_result_264564 = invoke(stypy.reporting.localization.Localization(__file__, 641, 12), warn_264558, *[result_mod_264562], **kwargs_264563)
            
            pass
            
            # ################# End of 'do_nothing(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'do_nothing' in the type store
            # Getting the type of 'stypy_return_type' (line 640)
            stypy_return_type_264565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_264565)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'do_nothing'
            return stypy_return_type_264565

        # Assigning a type to the variable 'do_nothing' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'do_nothing', do_nothing)
        
        
        # SSA begins for try-except statement (line 649)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to getattr(...): (line 650)
        # Processing the call arguments (line 650)
        # Getting the type of 'self' (line 650)
        self_264567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 20), 'self', False)
        unicode_264568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 26), 'unicode', u'SetInitialSize')
        # Processing the call keyword arguments (line 650)
        kwargs_264569 = {}
        # Getting the type of 'getattr' (line 650)
        getattr_264566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 12), 'getattr', False)
        # Calling getattr(args, kwargs) (line 650)
        getattr_call_result_264570 = invoke(stypy.reporting.localization.Localization(__file__, 650, 12), getattr_264566, *[self_264567, unicode_264568], **kwargs_264569)
        
        # SSA branch for the except part of a try statement (line 649)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 649)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Attribute (line 652):
        
        # Assigning a Call to a Attribute (line 652):
        
        # Call to getattr(...): (line 652)
        # Processing the call arguments (line 652)
        # Getting the type of 'self' (line 652)
        self_264572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 42), 'self', False)
        unicode_264573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 652, 48), 'unicode', u'SetBestFittingSize')
        # Getting the type of 'do_nothing' (line 653)
        do_nothing_264574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 42), 'do_nothing', False)
        # Processing the call keyword arguments (line 652)
        kwargs_264575 = {}
        # Getting the type of 'getattr' (line 652)
        getattr_264571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 34), 'getattr', False)
        # Calling getattr(args, kwargs) (line 652)
        getattr_call_result_264576 = invoke(stypy.reporting.localization.Localization(__file__, 652, 34), getattr_264571, *[self_264572, unicode_264573, do_nothing_264574], **kwargs_264575)
        
        # Getting the type of 'self' (line 652)
        self_264577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 12), 'self')
        # Setting the type of the member 'SetInitialSize' of a type (line 652)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 12), self_264577, 'SetInitialSize', getattr_call_result_264576)
        # SSA join for try-except statement (line 649)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 655)
        unicode_264578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 655, 29), 'unicode', u'IsShownOnScreen')
        # Getting the type of 'self' (line 655)
        self_264579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 23), 'self')
        
        (may_be_264580, more_types_in_union_264581) = may_not_provide_member(unicode_264578, self_264579)

        if may_be_264580:

            if more_types_in_union_264581:
                # Runtime conditional SSA (line 655)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 655)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 8), 'self', remove_member_provider_from_union(self_264579, u'IsShownOnScreen'))
            
            # Assigning a Call to a Attribute (line 656):
            
            # Assigning a Call to a Attribute (line 656):
            
            # Call to getattr(...): (line 656)
            # Processing the call arguments (line 656)
            # Getting the type of 'self' (line 656)
            self_264583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 43), 'self', False)
            unicode_264584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 49), 'unicode', u'IsVisible')

            @norecursion
            def _stypy_temp_lambda_113(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function '_stypy_temp_lambda_113'
                module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_113', 657, 43, True)
                # Passed parameters checking function
                _stypy_temp_lambda_113.stypy_localization = localization
                _stypy_temp_lambda_113.stypy_type_of_self = None
                _stypy_temp_lambda_113.stypy_type_store = module_type_store
                _stypy_temp_lambda_113.stypy_function_name = '_stypy_temp_lambda_113'
                _stypy_temp_lambda_113.stypy_param_names_list = []
                _stypy_temp_lambda_113.stypy_varargs_param_name = 'args'
                _stypy_temp_lambda_113.stypy_kwargs_param_name = None
                _stypy_temp_lambda_113.stypy_call_defaults = defaults
                _stypy_temp_lambda_113.stypy_call_varargs = varargs
                _stypy_temp_lambda_113.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_113', [], 'args', None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Stacktrace push for error reporting
                localization.set_stack_trace('_stypy_temp_lambda_113', [], arguments)
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of the lambda function code ##################

                # Getting the type of 'True' (line 657)
                True_264585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 57), 'True', False)
                # Assigning the return type of the lambda function
                # Assigning a type to the variable 'stypy_return_type' (line 657)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 657, 43), 'stypy_return_type', True_264585)
                
                # ################# End of the lambda function code ##################

                # Stacktrace pop (error reporting)
                localization.unset_stack_trace()
                
                # Storing the return type of function '_stypy_temp_lambda_113' in the type store
                # Getting the type of 'stypy_return_type' (line 657)
                stypy_return_type_264586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 43), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_264586)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function '_stypy_temp_lambda_113'
                return stypy_return_type_264586

            # Assigning a type to the variable '_stypy_temp_lambda_113' (line 657)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 657, 43), '_stypy_temp_lambda_113', _stypy_temp_lambda_113)
            # Getting the type of '_stypy_temp_lambda_113' (line 657)
            _stypy_temp_lambda_113_264587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 43), '_stypy_temp_lambda_113')
            # Processing the call keyword arguments (line 656)
            kwargs_264588 = {}
            # Getting the type of 'getattr' (line 656)
            getattr_264582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 35), 'getattr', False)
            # Calling getattr(args, kwargs) (line 656)
            getattr_call_result_264589 = invoke(stypy.reporting.localization.Localization(__file__, 656, 35), getattr_264582, *[self_264583, unicode_264584, _stypy_temp_lambda_113_264587], **kwargs_264588)
            
            # Getting the type of 'self' (line 656)
            self_264590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 12), 'self')
            # Setting the type of the member 'IsShownOnScreen' of a type (line 656)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 12), self_264590, 'IsShownOnScreen', getattr_call_result_264589)

            if more_types_in_union_264581:
                # SSA join for if statement (line 655)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 660):
        
        # Assigning a Call to a Attribute (line 660):
        
        # Call to EmptyBitmap(...): (line 660)
        # Processing the call arguments (line 660)
        # Getting the type of 'w' (line 660)
        w_264593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 38), 'w', False)
        # Getting the type of 'h' (line 660)
        h_264594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 41), 'h', False)
        # Processing the call keyword arguments (line 660)
        kwargs_264595 = {}
        # Getting the type of 'wxc' (line 660)
        wxc_264591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 22), 'wxc', False)
        # Obtaining the member 'EmptyBitmap' of a type (line 660)
        EmptyBitmap_264592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 22), wxc_264591, 'EmptyBitmap')
        # Calling EmptyBitmap(args, kwargs) (line 660)
        EmptyBitmap_call_result_264596 = invoke(stypy.reporting.localization.Localization(__file__, 660, 22), EmptyBitmap_264592, *[w_264593, h_264594], **kwargs_264595)
        
        # Getting the type of 'self' (line 660)
        self_264597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 8), 'self')
        # Setting the type of the member 'bitmap' of a type (line 660)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 8), self_264597, 'bitmap', EmptyBitmap_call_result_264596)
        
        # Call to DEBUG_MSG(...): (line 661)
        # Processing the call arguments (line 661)
        unicode_264599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 661, 18), 'unicode', u'__init__() - bitmap w:%d h:%d')
        
        # Obtaining an instance of the builtin type 'tuple' (line 661)
        tuple_264600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 661, 53), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 661)
        # Adding element type (line 661)
        # Getting the type of 'w' (line 661)
        w_264601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 53), 'w', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 661, 53), tuple_264600, w_264601)
        # Adding element type (line 661)
        # Getting the type of 'h' (line 661)
        h_264602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 56), 'h', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 661, 53), tuple_264600, h_264602)
        
        # Applying the binary operator '%' (line 661)
        result_mod_264603 = python_operator(stypy.reporting.localization.Localization(__file__, 661, 18), '%', unicode_264599, tuple_264600)
        
        int_264604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 661, 60), 'int')
        # Getting the type of 'self' (line 661)
        self_264605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 63), 'self', False)
        # Processing the call keyword arguments (line 661)
        kwargs_264606 = {}
        # Getting the type of 'DEBUG_MSG' (line 661)
        DEBUG_MSG_264598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 661)
        DEBUG_MSG_call_result_264607 = invoke(stypy.reporting.localization.Localization(__file__, 661, 8), DEBUG_MSG_264598, *[result_mod_264603, int_264604, self_264605], **kwargs_264606)
        
        
        # Assigning a Name to a Attribute (line 663):
        
        # Assigning a Name to a Attribute (line 663):
        # Getting the type of 'False' (line 663)
        False_264608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 24), 'False')
        # Getting the type of 'self' (line 663)
        self_264609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 8), 'self')
        # Setting the type of the member '_isDrawn' of a type (line 663)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 8), self_264609, '_isDrawn', False_264608)
        
        # Call to Bind(...): (line 665)
        # Processing the call arguments (line 665)
        # Getting the type of 'wx' (line 665)
        wx_264612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 18), 'wx', False)
        # Obtaining the member 'EVT_SIZE' of a type (line 665)
        EVT_SIZE_264613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 18), wx_264612, 'EVT_SIZE')
        # Getting the type of 'self' (line 665)
        self_264614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 31), 'self', False)
        # Obtaining the member '_onSize' of a type (line 665)
        _onSize_264615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 31), self_264614, '_onSize')
        # Processing the call keyword arguments (line 665)
        kwargs_264616 = {}
        # Getting the type of 'self' (line 665)
        self_264610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 665)
        Bind_264611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 8), self_264610, 'Bind')
        # Calling Bind(args, kwargs) (line 665)
        Bind_call_result_264617 = invoke(stypy.reporting.localization.Localization(__file__, 665, 8), Bind_264611, *[EVT_SIZE_264613, _onSize_264615], **kwargs_264616)
        
        
        # Call to Bind(...): (line 666)
        # Processing the call arguments (line 666)
        # Getting the type of 'wx' (line 666)
        wx_264620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 18), 'wx', False)
        # Obtaining the member 'EVT_PAINT' of a type (line 666)
        EVT_PAINT_264621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 18), wx_264620, 'EVT_PAINT')
        # Getting the type of 'self' (line 666)
        self_264622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 32), 'self', False)
        # Obtaining the member '_onPaint' of a type (line 666)
        _onPaint_264623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 32), self_264622, '_onPaint')
        # Processing the call keyword arguments (line 666)
        kwargs_264624 = {}
        # Getting the type of 'self' (line 666)
        self_264618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 666)
        Bind_264619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 8), self_264618, 'Bind')
        # Calling Bind(args, kwargs) (line 666)
        Bind_call_result_264625 = invoke(stypy.reporting.localization.Localization(__file__, 666, 8), Bind_264619, *[EVT_PAINT_264621, _onPaint_264623], **kwargs_264624)
        
        
        # Call to Bind(...): (line 667)
        # Processing the call arguments (line 667)
        # Getting the type of 'wx' (line 667)
        wx_264628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 18), 'wx', False)
        # Obtaining the member 'EVT_KEY_DOWN' of a type (line 667)
        EVT_KEY_DOWN_264629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 18), wx_264628, 'EVT_KEY_DOWN')
        # Getting the type of 'self' (line 667)
        self_264630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 35), 'self', False)
        # Obtaining the member '_onKeyDown' of a type (line 667)
        _onKeyDown_264631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 35), self_264630, '_onKeyDown')
        # Processing the call keyword arguments (line 667)
        kwargs_264632 = {}
        # Getting the type of 'self' (line 667)
        self_264626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 667)
        Bind_264627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 8), self_264626, 'Bind')
        # Calling Bind(args, kwargs) (line 667)
        Bind_call_result_264633 = invoke(stypy.reporting.localization.Localization(__file__, 667, 8), Bind_264627, *[EVT_KEY_DOWN_264629, _onKeyDown_264631], **kwargs_264632)
        
        
        # Call to Bind(...): (line 668)
        # Processing the call arguments (line 668)
        # Getting the type of 'wx' (line 668)
        wx_264636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 18), 'wx', False)
        # Obtaining the member 'EVT_KEY_UP' of a type (line 668)
        EVT_KEY_UP_264637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 18), wx_264636, 'EVT_KEY_UP')
        # Getting the type of 'self' (line 668)
        self_264638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 33), 'self', False)
        # Obtaining the member '_onKeyUp' of a type (line 668)
        _onKeyUp_264639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 33), self_264638, '_onKeyUp')
        # Processing the call keyword arguments (line 668)
        kwargs_264640 = {}
        # Getting the type of 'self' (line 668)
        self_264634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 668)
        Bind_264635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 8), self_264634, 'Bind')
        # Calling Bind(args, kwargs) (line 668)
        Bind_call_result_264641 = invoke(stypy.reporting.localization.Localization(__file__, 668, 8), Bind_264635, *[EVT_KEY_UP_264637, _onKeyUp_264639], **kwargs_264640)
        
        
        # Call to Bind(...): (line 669)
        # Processing the call arguments (line 669)
        # Getting the type of 'wx' (line 669)
        wx_264644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 18), 'wx', False)
        # Obtaining the member 'EVT_RIGHT_DOWN' of a type (line 669)
        EVT_RIGHT_DOWN_264645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 18), wx_264644, 'EVT_RIGHT_DOWN')
        # Getting the type of 'self' (line 669)
        self_264646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 37), 'self', False)
        # Obtaining the member '_onRightButtonDown' of a type (line 669)
        _onRightButtonDown_264647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 37), self_264646, '_onRightButtonDown')
        # Processing the call keyword arguments (line 669)
        kwargs_264648 = {}
        # Getting the type of 'self' (line 669)
        self_264642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 669)
        Bind_264643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 8), self_264642, 'Bind')
        # Calling Bind(args, kwargs) (line 669)
        Bind_call_result_264649 = invoke(stypy.reporting.localization.Localization(__file__, 669, 8), Bind_264643, *[EVT_RIGHT_DOWN_264645, _onRightButtonDown_264647], **kwargs_264648)
        
        
        # Call to Bind(...): (line 670)
        # Processing the call arguments (line 670)
        # Getting the type of 'wx' (line 670)
        wx_264652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 18), 'wx', False)
        # Obtaining the member 'EVT_RIGHT_DCLICK' of a type (line 670)
        EVT_RIGHT_DCLICK_264653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 18), wx_264652, 'EVT_RIGHT_DCLICK')
        # Getting the type of 'self' (line 670)
        self_264654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 39), 'self', False)
        # Obtaining the member '_onRightButtonDClick' of a type (line 670)
        _onRightButtonDClick_264655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 39), self_264654, '_onRightButtonDClick')
        # Processing the call keyword arguments (line 670)
        kwargs_264656 = {}
        # Getting the type of 'self' (line 670)
        self_264650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 670)
        Bind_264651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 8), self_264650, 'Bind')
        # Calling Bind(args, kwargs) (line 670)
        Bind_call_result_264657 = invoke(stypy.reporting.localization.Localization(__file__, 670, 8), Bind_264651, *[EVT_RIGHT_DCLICK_264653, _onRightButtonDClick_264655], **kwargs_264656)
        
        
        # Call to Bind(...): (line 671)
        # Processing the call arguments (line 671)
        # Getting the type of 'wx' (line 671)
        wx_264660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 18), 'wx', False)
        # Obtaining the member 'EVT_RIGHT_UP' of a type (line 671)
        EVT_RIGHT_UP_264661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 18), wx_264660, 'EVT_RIGHT_UP')
        # Getting the type of 'self' (line 671)
        self_264662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 35), 'self', False)
        # Obtaining the member '_onRightButtonUp' of a type (line 671)
        _onRightButtonUp_264663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 35), self_264662, '_onRightButtonUp')
        # Processing the call keyword arguments (line 671)
        kwargs_264664 = {}
        # Getting the type of 'self' (line 671)
        self_264658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 671)
        Bind_264659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 8), self_264658, 'Bind')
        # Calling Bind(args, kwargs) (line 671)
        Bind_call_result_264665 = invoke(stypy.reporting.localization.Localization(__file__, 671, 8), Bind_264659, *[EVT_RIGHT_UP_264661, _onRightButtonUp_264663], **kwargs_264664)
        
        
        # Call to Bind(...): (line 672)
        # Processing the call arguments (line 672)
        # Getting the type of 'wx' (line 672)
        wx_264668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 18), 'wx', False)
        # Obtaining the member 'EVT_MOUSEWHEEL' of a type (line 672)
        EVT_MOUSEWHEEL_264669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 18), wx_264668, 'EVT_MOUSEWHEEL')
        # Getting the type of 'self' (line 672)
        self_264670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 37), 'self', False)
        # Obtaining the member '_onMouseWheel' of a type (line 672)
        _onMouseWheel_264671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 37), self_264670, '_onMouseWheel')
        # Processing the call keyword arguments (line 672)
        kwargs_264672 = {}
        # Getting the type of 'self' (line 672)
        self_264666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 672)
        Bind_264667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 8), self_264666, 'Bind')
        # Calling Bind(args, kwargs) (line 672)
        Bind_call_result_264673 = invoke(stypy.reporting.localization.Localization(__file__, 672, 8), Bind_264667, *[EVT_MOUSEWHEEL_264669, _onMouseWheel_264671], **kwargs_264672)
        
        
        # Call to Bind(...): (line 673)
        # Processing the call arguments (line 673)
        # Getting the type of 'wx' (line 673)
        wx_264676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 18), 'wx', False)
        # Obtaining the member 'EVT_LEFT_DOWN' of a type (line 673)
        EVT_LEFT_DOWN_264677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 18), wx_264676, 'EVT_LEFT_DOWN')
        # Getting the type of 'self' (line 673)
        self_264678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 36), 'self', False)
        # Obtaining the member '_onLeftButtonDown' of a type (line 673)
        _onLeftButtonDown_264679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 36), self_264678, '_onLeftButtonDown')
        # Processing the call keyword arguments (line 673)
        kwargs_264680 = {}
        # Getting the type of 'self' (line 673)
        self_264674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 673)
        Bind_264675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 8), self_264674, 'Bind')
        # Calling Bind(args, kwargs) (line 673)
        Bind_call_result_264681 = invoke(stypy.reporting.localization.Localization(__file__, 673, 8), Bind_264675, *[EVT_LEFT_DOWN_264677, _onLeftButtonDown_264679], **kwargs_264680)
        
        
        # Call to Bind(...): (line 674)
        # Processing the call arguments (line 674)
        # Getting the type of 'wx' (line 674)
        wx_264684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 18), 'wx', False)
        # Obtaining the member 'EVT_LEFT_DCLICK' of a type (line 674)
        EVT_LEFT_DCLICK_264685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 18), wx_264684, 'EVT_LEFT_DCLICK')
        # Getting the type of 'self' (line 674)
        self_264686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 38), 'self', False)
        # Obtaining the member '_onLeftButtonDClick' of a type (line 674)
        _onLeftButtonDClick_264687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 38), self_264686, '_onLeftButtonDClick')
        # Processing the call keyword arguments (line 674)
        kwargs_264688 = {}
        # Getting the type of 'self' (line 674)
        self_264682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 674)
        Bind_264683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 8), self_264682, 'Bind')
        # Calling Bind(args, kwargs) (line 674)
        Bind_call_result_264689 = invoke(stypy.reporting.localization.Localization(__file__, 674, 8), Bind_264683, *[EVT_LEFT_DCLICK_264685, _onLeftButtonDClick_264687], **kwargs_264688)
        
        
        # Call to Bind(...): (line 675)
        # Processing the call arguments (line 675)
        # Getting the type of 'wx' (line 675)
        wx_264692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 18), 'wx', False)
        # Obtaining the member 'EVT_LEFT_UP' of a type (line 675)
        EVT_LEFT_UP_264693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 18), wx_264692, 'EVT_LEFT_UP')
        # Getting the type of 'self' (line 675)
        self_264694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 34), 'self', False)
        # Obtaining the member '_onLeftButtonUp' of a type (line 675)
        _onLeftButtonUp_264695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 34), self_264694, '_onLeftButtonUp')
        # Processing the call keyword arguments (line 675)
        kwargs_264696 = {}
        # Getting the type of 'self' (line 675)
        self_264690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 675)
        Bind_264691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 8), self_264690, 'Bind')
        # Calling Bind(args, kwargs) (line 675)
        Bind_call_result_264697 = invoke(stypy.reporting.localization.Localization(__file__, 675, 8), Bind_264691, *[EVT_LEFT_UP_264693, _onLeftButtonUp_264695], **kwargs_264696)
        
        
        # Call to Bind(...): (line 676)
        # Processing the call arguments (line 676)
        # Getting the type of 'wx' (line 676)
        wx_264700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 18), 'wx', False)
        # Obtaining the member 'EVT_MOTION' of a type (line 676)
        EVT_MOTION_264701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 18), wx_264700, 'EVT_MOTION')
        # Getting the type of 'self' (line 676)
        self_264702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 33), 'self', False)
        # Obtaining the member '_onMotion' of a type (line 676)
        _onMotion_264703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 33), self_264702, '_onMotion')
        # Processing the call keyword arguments (line 676)
        kwargs_264704 = {}
        # Getting the type of 'self' (line 676)
        self_264698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 676)
        Bind_264699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 8), self_264698, 'Bind')
        # Calling Bind(args, kwargs) (line 676)
        Bind_call_result_264705 = invoke(stypy.reporting.localization.Localization(__file__, 676, 8), Bind_264699, *[EVT_MOTION_264701, _onMotion_264703], **kwargs_264704)
        
        
        # Call to Bind(...): (line 677)
        # Processing the call arguments (line 677)
        # Getting the type of 'wx' (line 677)
        wx_264708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 18), 'wx', False)
        # Obtaining the member 'EVT_LEAVE_WINDOW' of a type (line 677)
        EVT_LEAVE_WINDOW_264709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 677, 18), wx_264708, 'EVT_LEAVE_WINDOW')
        # Getting the type of 'self' (line 677)
        self_264710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 39), 'self', False)
        # Obtaining the member '_onLeave' of a type (line 677)
        _onLeave_264711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 677, 39), self_264710, '_onLeave')
        # Processing the call keyword arguments (line 677)
        kwargs_264712 = {}
        # Getting the type of 'self' (line 677)
        self_264706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 677)
        Bind_264707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 677, 8), self_264706, 'Bind')
        # Calling Bind(args, kwargs) (line 677)
        Bind_call_result_264713 = invoke(stypy.reporting.localization.Localization(__file__, 677, 8), Bind_264707, *[EVT_LEAVE_WINDOW_264709, _onLeave_264711], **kwargs_264712)
        
        
        # Call to Bind(...): (line 678)
        # Processing the call arguments (line 678)
        # Getting the type of 'wx' (line 678)
        wx_264716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 18), 'wx', False)
        # Obtaining the member 'EVT_ENTER_WINDOW' of a type (line 678)
        EVT_ENTER_WINDOW_264717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 18), wx_264716, 'EVT_ENTER_WINDOW')
        # Getting the type of 'self' (line 678)
        self_264718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 39), 'self', False)
        # Obtaining the member '_onEnter' of a type (line 678)
        _onEnter_264719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 39), self_264718, '_onEnter')
        # Processing the call keyword arguments (line 678)
        kwargs_264720 = {}
        # Getting the type of 'self' (line 678)
        self_264714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 678)
        Bind_264715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 8), self_264714, 'Bind')
        # Calling Bind(args, kwargs) (line 678)
        Bind_call_result_264721 = invoke(stypy.reporting.localization.Localization(__file__, 678, 8), Bind_264715, *[EVT_ENTER_WINDOW_264717, _onEnter_264719], **kwargs_264720)
        
        
        # Call to Bind(...): (line 680)
        # Processing the call arguments (line 680)
        # Getting the type of 'wx' (line 680)
        wx_264724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 18), 'wx', False)
        # Obtaining the member 'EVT_MIDDLE_DOWN' of a type (line 680)
        EVT_MIDDLE_DOWN_264725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 18), wx_264724, 'EVT_MIDDLE_DOWN')
        # Getting the type of 'self' (line 680)
        self_264726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 38), 'self', False)
        # Obtaining the member '_onMiddleButtonDown' of a type (line 680)
        _onMiddleButtonDown_264727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 38), self_264726, '_onMiddleButtonDown')
        # Processing the call keyword arguments (line 680)
        kwargs_264728 = {}
        # Getting the type of 'self' (line 680)
        self_264722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 680)
        Bind_264723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 8), self_264722, 'Bind')
        # Calling Bind(args, kwargs) (line 680)
        Bind_call_result_264729 = invoke(stypy.reporting.localization.Localization(__file__, 680, 8), Bind_264723, *[EVT_MIDDLE_DOWN_264725, _onMiddleButtonDown_264727], **kwargs_264728)
        
        
        # Call to Bind(...): (line 681)
        # Processing the call arguments (line 681)
        # Getting the type of 'wx' (line 681)
        wx_264732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 18), 'wx', False)
        # Obtaining the member 'EVT_MIDDLE_DCLICK' of a type (line 681)
        EVT_MIDDLE_DCLICK_264733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 18), wx_264732, 'EVT_MIDDLE_DCLICK')
        # Getting the type of 'self' (line 681)
        self_264734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 40), 'self', False)
        # Obtaining the member '_onMiddleButtonDClick' of a type (line 681)
        _onMiddleButtonDClick_264735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 40), self_264734, '_onMiddleButtonDClick')
        # Processing the call keyword arguments (line 681)
        kwargs_264736 = {}
        # Getting the type of 'self' (line 681)
        self_264730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 681)
        Bind_264731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 8), self_264730, 'Bind')
        # Calling Bind(args, kwargs) (line 681)
        Bind_call_result_264737 = invoke(stypy.reporting.localization.Localization(__file__, 681, 8), Bind_264731, *[EVT_MIDDLE_DCLICK_264733, _onMiddleButtonDClick_264735], **kwargs_264736)
        
        
        # Call to Bind(...): (line 682)
        # Processing the call arguments (line 682)
        # Getting the type of 'wx' (line 682)
        wx_264740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 18), 'wx', False)
        # Obtaining the member 'EVT_MIDDLE_UP' of a type (line 682)
        EVT_MIDDLE_UP_264741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 18), wx_264740, 'EVT_MIDDLE_UP')
        # Getting the type of 'self' (line 682)
        self_264742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 36), 'self', False)
        # Obtaining the member '_onMiddleButtonUp' of a type (line 682)
        _onMiddleButtonUp_264743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 36), self_264742, '_onMiddleButtonUp')
        # Processing the call keyword arguments (line 682)
        kwargs_264744 = {}
        # Getting the type of 'self' (line 682)
        self_264738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 682)
        Bind_264739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 8), self_264738, 'Bind')
        # Calling Bind(args, kwargs) (line 682)
        Bind_call_result_264745 = invoke(stypy.reporting.localization.Localization(__file__, 682, 8), Bind_264739, *[EVT_MIDDLE_UP_264741, _onMiddleButtonUp_264743], **kwargs_264744)
        
        
        # Call to Bind(...): (line 684)
        # Processing the call arguments (line 684)
        # Getting the type of 'wx' (line 684)
        wx_264748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 18), 'wx', False)
        # Obtaining the member 'EVT_MOUSE_CAPTURE_CHANGED' of a type (line 684)
        EVT_MOUSE_CAPTURE_CHANGED_264749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 18), wx_264748, 'EVT_MOUSE_CAPTURE_CHANGED')
        # Getting the type of 'self' (line 684)
        self_264750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 48), 'self', False)
        # Obtaining the member '_onCaptureLost' of a type (line 684)
        _onCaptureLost_264751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 48), self_264750, '_onCaptureLost')
        # Processing the call keyword arguments (line 684)
        kwargs_264752 = {}
        # Getting the type of 'self' (line 684)
        self_264746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 684)
        Bind_264747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 8), self_264746, 'Bind')
        # Calling Bind(args, kwargs) (line 684)
        Bind_call_result_264753 = invoke(stypy.reporting.localization.Localization(__file__, 684, 8), Bind_264747, *[EVT_MOUSE_CAPTURE_CHANGED_264749, _onCaptureLost_264751], **kwargs_264752)
        
        
        # Call to Bind(...): (line 685)
        # Processing the call arguments (line 685)
        # Getting the type of 'wx' (line 685)
        wx_264756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 18), 'wx', False)
        # Obtaining the member 'EVT_MOUSE_CAPTURE_LOST' of a type (line 685)
        EVT_MOUSE_CAPTURE_LOST_264757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 18), wx_264756, 'EVT_MOUSE_CAPTURE_LOST')
        # Getting the type of 'self' (line 685)
        self_264758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 45), 'self', False)
        # Obtaining the member '_onCaptureLost' of a type (line 685)
        _onCaptureLost_264759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 45), self_264758, '_onCaptureLost')
        # Processing the call keyword arguments (line 685)
        kwargs_264760 = {}
        # Getting the type of 'self' (line 685)
        self_264754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 685)
        Bind_264755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 8), self_264754, 'Bind')
        # Calling Bind(args, kwargs) (line 685)
        Bind_call_result_264761 = invoke(stypy.reporting.localization.Localization(__file__, 685, 8), Bind_264755, *[EVT_MOUSE_CAPTURE_LOST_264757, _onCaptureLost_264759], **kwargs_264760)
        
        
        
        # Getting the type of 'wx' (line 687)
        wx_264762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 11), 'wx')
        # Obtaining the member 'VERSION_STRING' of a type (line 687)
        VERSION_STRING_264763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 11), wx_264762, 'VERSION_STRING')
        unicode_264764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 31), 'unicode', u'2.9')
        # Applying the binary operator '<' (line 687)
        result_lt_264765 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 11), '<', VERSION_STRING_264763, unicode_264764)
        
        # Testing the type of an if condition (line 687)
        if_condition_264766 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 687, 8), result_lt_264765)
        # Assigning a type to the variable 'if_condition_264766' (line 687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 8), 'if_condition_264766', if_condition_264766)
        # SSA begins for if statement (line 687)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to SetBackgroundStyle(...): (line 689)
        # Processing the call arguments (line 689)
        # Getting the type of 'wx' (line 689)
        wx_264769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 36), 'wx', False)
        # Obtaining the member 'BG_STYLE_CUSTOM' of a type (line 689)
        BG_STYLE_CUSTOM_264770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 36), wx_264769, 'BG_STYLE_CUSTOM')
        # Processing the call keyword arguments (line 689)
        kwargs_264771 = {}
        # Getting the type of 'self' (line 689)
        self_264767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 12), 'self', False)
        # Obtaining the member 'SetBackgroundStyle' of a type (line 689)
        SetBackgroundStyle_264768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 12), self_264767, 'SetBackgroundStyle')
        # Calling SetBackgroundStyle(args, kwargs) (line 689)
        SetBackgroundStyle_call_result_264772 = invoke(stypy.reporting.localization.Localization(__file__, 689, 12), SetBackgroundStyle_264768, *[BG_STYLE_CUSTOM_264770], **kwargs_264771)
        
        
        # Call to Bind(...): (line 690)
        # Processing the call arguments (line 690)
        # Getting the type of 'wx' (line 690)
        wx_264775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 22), 'wx', False)
        # Obtaining the member 'EVT_ERASE_BACKGROUND' of a type (line 690)
        EVT_ERASE_BACKGROUND_264776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 22), wx_264775, 'EVT_ERASE_BACKGROUND')
        # Getting the type of 'self' (line 690)
        self_264777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 47), 'self', False)
        # Obtaining the member '_onEraseBackground' of a type (line 690)
        _onEraseBackground_264778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 47), self_264777, '_onEraseBackground')
        # Processing the call keyword arguments (line 690)
        kwargs_264779 = {}
        # Getting the type of 'self' (line 690)
        self_264773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 12), 'self', False)
        # Obtaining the member 'Bind' of a type (line 690)
        Bind_264774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 12), self_264773, 'Bind')
        # Calling Bind(args, kwargs) (line 690)
        Bind_call_result_264780 = invoke(stypy.reporting.localization.Localization(__file__, 690, 12), Bind_264774, *[EVT_ERASE_BACKGROUND_264776, _onEraseBackground_264778], **kwargs_264779)
        
        # SSA branch for the else part of an if statement (line 687)
        module_type_store.open_ssa_branch('else')
        
        # Call to SetBackgroundStyle(...): (line 693)
        # Processing the call arguments (line 693)
        # Getting the type of 'wx' (line 693)
        wx_264783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 36), 'wx', False)
        # Obtaining the member 'BG_STYLE_PAINT' of a type (line 693)
        BG_STYLE_PAINT_264784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 693, 36), wx_264783, 'BG_STYLE_PAINT')
        # Processing the call keyword arguments (line 693)
        kwargs_264785 = {}
        # Getting the type of 'self' (line 693)
        self_264781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 12), 'self', False)
        # Obtaining the member 'SetBackgroundStyle' of a type (line 693)
        SetBackgroundStyle_264782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 693, 12), self_264781, 'SetBackgroundStyle')
        # Calling SetBackgroundStyle(args, kwargs) (line 693)
        SetBackgroundStyle_call_result_264786 = invoke(stypy.reporting.localization.Localization(__file__, 693, 12), SetBackgroundStyle_264782, *[BG_STYLE_PAINT_264784], **kwargs_264785)
        
        # SSA join for if statement (line 687)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Dict to a Attribute (line 695):
        
        # Assigning a Dict to a Attribute (line 695):
        
        # Obtaining an instance of the builtin type 'dict' (line 695)
        dict_264787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 695, 22), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 695)
        
        # Getting the type of 'self' (line 695)
        self_264788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 8), 'self')
        # Setting the type of the member 'macros' of a type (line 695)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 8), self_264788, 'macros', dict_264787)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def Destroy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'Destroy'
        module_type_store = module_type_store.open_function_context('Destroy', 697, 4, False)
        # Assigning a type to the variable 'self' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx.Destroy.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx.Destroy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx.Destroy.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx.Destroy.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx.Destroy')
        FigureCanvasWx.Destroy.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasWx.Destroy.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasWx.Destroy.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasWx.Destroy.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx.Destroy.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx.Destroy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx.Destroy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.Destroy', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'Destroy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'Destroy(...)' code ##################

        
        # Call to Destroy(...): (line 698)
        # Processing the call arguments (line 698)
        # Getting the type of 'self' (line 698)
        self_264792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 25), 'self', False)
        # Getting the type of 'args' (line 698)
        args_264793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 32), 'args', False)
        # Processing the call keyword arguments (line 698)
        # Getting the type of 'kwargs' (line 698)
        kwargs_264794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 40), 'kwargs', False)
        kwargs_264795 = {'kwargs_264794': kwargs_264794}
        # Getting the type of 'wx' (line 698)
        wx_264789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 8), 'wx', False)
        # Obtaining the member 'Panel' of a type (line 698)
        Panel_264790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 8), wx_264789, 'Panel')
        # Obtaining the member 'Destroy' of a type (line 698)
        Destroy_264791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 8), Panel_264790, 'Destroy')
        # Calling Destroy(args, kwargs) (line 698)
        Destroy_call_result_264796 = invoke(stypy.reporting.localization.Localization(__file__, 698, 8), Destroy_264791, *[self_264792, args_264793], **kwargs_264795)
        
        
        # ################# End of 'Destroy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'Destroy' in the type store
        # Getting the type of 'stypy_return_type' (line 697)
        stypy_return_type_264797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264797)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'Destroy'
        return stypy_return_type_264797


    @norecursion
    def Copy_to_Clipboard(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 700)
        None_264798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 38), 'None')
        defaults = [None_264798]
        # Create a new context for function 'Copy_to_Clipboard'
        module_type_store = module_type_store.open_function_context('Copy_to_Clipboard', 700, 4, False)
        # Assigning a type to the variable 'self' (line 701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 701, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx.Copy_to_Clipboard.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx.Copy_to_Clipboard.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx.Copy_to_Clipboard.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx.Copy_to_Clipboard.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx.Copy_to_Clipboard')
        FigureCanvasWx.Copy_to_Clipboard.__dict__.__setitem__('stypy_param_names_list', ['event'])
        FigureCanvasWx.Copy_to_Clipboard.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx.Copy_to_Clipboard.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx.Copy_to_Clipboard.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx.Copy_to_Clipboard.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx.Copy_to_Clipboard.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx.Copy_to_Clipboard.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.Copy_to_Clipboard', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'Copy_to_Clipboard', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'Copy_to_Clipboard(...)' code ##################

        unicode_264799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 8), 'unicode', u'copy bitmap of canvas to system clipboard')
        
        # Assigning a Call to a Name (line 702):
        
        # Assigning a Call to a Name (line 702):
        
        # Call to BitmapDataObject(...): (line 702)
        # Processing the call keyword arguments (line 702)
        kwargs_264802 = {}
        # Getting the type of 'wx' (line 702)
        wx_264800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 18), 'wx', False)
        # Obtaining the member 'BitmapDataObject' of a type (line 702)
        BitmapDataObject_264801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 702, 18), wx_264800, 'BitmapDataObject')
        # Calling BitmapDataObject(args, kwargs) (line 702)
        BitmapDataObject_call_result_264803 = invoke(stypy.reporting.localization.Localization(__file__, 702, 18), BitmapDataObject_264801, *[], **kwargs_264802)
        
        # Assigning a type to the variable 'bmp_obj' (line 702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 702, 8), 'bmp_obj', BitmapDataObject_call_result_264803)
        
        # Call to SetBitmap(...): (line 703)
        # Processing the call arguments (line 703)
        # Getting the type of 'self' (line 703)
        self_264806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 26), 'self', False)
        # Obtaining the member 'bitmap' of a type (line 703)
        bitmap_264807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 26), self_264806, 'bitmap')
        # Processing the call keyword arguments (line 703)
        kwargs_264808 = {}
        # Getting the type of 'bmp_obj' (line 703)
        bmp_obj_264804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'bmp_obj', False)
        # Obtaining the member 'SetBitmap' of a type (line 703)
        SetBitmap_264805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 8), bmp_obj_264804, 'SetBitmap')
        # Calling SetBitmap(args, kwargs) (line 703)
        SetBitmap_call_result_264809 = invoke(stypy.reporting.localization.Localization(__file__, 703, 8), SetBitmap_264805, *[bitmap_264807], **kwargs_264808)
        
        
        
        
        # Call to IsOpened(...): (line 705)
        # Processing the call keyword arguments (line 705)
        kwargs_264813 = {}
        # Getting the type of 'wx' (line 705)
        wx_264810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 15), 'wx', False)
        # Obtaining the member 'TheClipboard' of a type (line 705)
        TheClipboard_264811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 15), wx_264810, 'TheClipboard')
        # Obtaining the member 'IsOpened' of a type (line 705)
        IsOpened_264812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 15), TheClipboard_264811, 'IsOpened')
        # Calling IsOpened(args, kwargs) (line 705)
        IsOpened_call_result_264814 = invoke(stypy.reporting.localization.Localization(__file__, 705, 15), IsOpened_264812, *[], **kwargs_264813)
        
        # Applying the 'not' unary operator (line 705)
        result_not__264815 = python_operator(stypy.reporting.localization.Localization(__file__, 705, 11), 'not', IsOpened_call_result_264814)
        
        # Testing the type of an if condition (line 705)
        if_condition_264816 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 705, 8), result_not__264815)
        # Assigning a type to the variable 'if_condition_264816' (line 705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 8), 'if_condition_264816', if_condition_264816)
        # SSA begins for if statement (line 705)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 706):
        
        # Assigning a Call to a Name (line 706):
        
        # Call to Open(...): (line 706)
        # Processing the call keyword arguments (line 706)
        kwargs_264820 = {}
        # Getting the type of 'wx' (line 706)
        wx_264817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 27), 'wx', False)
        # Obtaining the member 'TheClipboard' of a type (line 706)
        TheClipboard_264818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 27), wx_264817, 'TheClipboard')
        # Obtaining the member 'Open' of a type (line 706)
        Open_264819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 27), TheClipboard_264818, 'Open')
        # Calling Open(args, kwargs) (line 706)
        Open_call_result_264821 = invoke(stypy.reporting.localization.Localization(__file__, 706, 27), Open_264819, *[], **kwargs_264820)
        
        # Assigning a type to the variable 'open_success' (line 706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 12), 'open_success', Open_call_result_264821)
        
        # Getting the type of 'open_success' (line 707)
        open_success_264822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 15), 'open_success')
        # Testing the type of an if condition (line 707)
        if_condition_264823 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 707, 12), open_success_264822)
        # Assigning a type to the variable 'if_condition_264823' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 12), 'if_condition_264823', if_condition_264823)
        # SSA begins for if statement (line 707)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to SetData(...): (line 708)
        # Processing the call arguments (line 708)
        # Getting the type of 'bmp_obj' (line 708)
        bmp_obj_264827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 40), 'bmp_obj', False)
        # Processing the call keyword arguments (line 708)
        kwargs_264828 = {}
        # Getting the type of 'wx' (line 708)
        wx_264824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 16), 'wx', False)
        # Obtaining the member 'TheClipboard' of a type (line 708)
        TheClipboard_264825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 16), wx_264824, 'TheClipboard')
        # Obtaining the member 'SetData' of a type (line 708)
        SetData_264826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 16), TheClipboard_264825, 'SetData')
        # Calling SetData(args, kwargs) (line 708)
        SetData_call_result_264829 = invoke(stypy.reporting.localization.Localization(__file__, 708, 16), SetData_264826, *[bmp_obj_264827], **kwargs_264828)
        
        
        # Call to Close(...): (line 709)
        # Processing the call keyword arguments (line 709)
        kwargs_264833 = {}
        # Getting the type of 'wx' (line 709)
        wx_264830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 16), 'wx', False)
        # Obtaining the member 'TheClipboard' of a type (line 709)
        TheClipboard_264831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 16), wx_264830, 'TheClipboard')
        # Obtaining the member 'Close' of a type (line 709)
        Close_264832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 16), TheClipboard_264831, 'Close')
        # Calling Close(args, kwargs) (line 709)
        Close_call_result_264834 = invoke(stypy.reporting.localization.Localization(__file__, 709, 16), Close_264832, *[], **kwargs_264833)
        
        
        # Call to Flush(...): (line 710)
        # Processing the call keyword arguments (line 710)
        kwargs_264838 = {}
        # Getting the type of 'wx' (line 710)
        wx_264835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 16), 'wx', False)
        # Obtaining the member 'TheClipboard' of a type (line 710)
        TheClipboard_264836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 16), wx_264835, 'TheClipboard')
        # Obtaining the member 'Flush' of a type (line 710)
        Flush_264837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 16), TheClipboard_264836, 'Flush')
        # Calling Flush(args, kwargs) (line 710)
        Flush_call_result_264839 = invoke(stypy.reporting.localization.Localization(__file__, 710, 16), Flush_264837, *[], **kwargs_264838)
        
        # SSA join for if statement (line 707)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 705)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'Copy_to_Clipboard(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'Copy_to_Clipboard' in the type store
        # Getting the type of 'stypy_return_type' (line 700)
        stypy_return_type_264840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264840)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'Copy_to_Clipboard'
        return stypy_return_type_264840


    @norecursion
    def draw_idle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_idle'
        module_type_store = module_type_store.open_function_context('draw_idle', 712, 4, False)
        # Assigning a type to the variable 'self' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx.draw_idle.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx.draw_idle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx.draw_idle.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx.draw_idle.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx.draw_idle')
        FigureCanvasWx.draw_idle.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasWx.draw_idle.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx.draw_idle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx.draw_idle.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx.draw_idle.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx.draw_idle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx.draw_idle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.draw_idle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_idle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_idle(...)' code ##################

        unicode_264841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, (-1)), 'unicode', u'\n        Delay rendering until the GUI is idle.\n        ')
        
        # Call to DEBUG_MSG(...): (line 716)
        # Processing the call arguments (line 716)
        unicode_264843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 716, 18), 'unicode', u'draw_idle()')
        int_264844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 716, 33), 'int')
        # Getting the type of 'self' (line 716)
        self_264845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 36), 'self', False)
        # Processing the call keyword arguments (line 716)
        kwargs_264846 = {}
        # Getting the type of 'DEBUG_MSG' (line 716)
        DEBUG_MSG_264842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 716)
        DEBUG_MSG_call_result_264847 = invoke(stypy.reporting.localization.Localization(__file__, 716, 8), DEBUG_MSG_264842, *[unicode_264843, int_264844, self_264845], **kwargs_264846)
        
        
        # Assigning a Name to a Attribute (line 717):
        
        # Assigning a Name to a Attribute (line 717):
        # Getting the type of 'False' (line 717)
        False_264848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 24), 'False')
        # Getting the type of 'self' (line 717)
        self_264849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 8), 'self')
        # Setting the type of the member '_isDrawn' of a type (line 717)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 8), self_264849, '_isDrawn', False_264848)
        
        # Call to Refresh(...): (line 722)
        # Processing the call keyword arguments (line 722)
        # Getting the type of 'False' (line 722)
        False_264852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 37), 'False', False)
        keyword_264853 = False_264852
        kwargs_264854 = {'eraseBackground': keyword_264853}
        # Getting the type of 'self' (line 722)
        self_264850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 8), 'self', False)
        # Obtaining the member 'Refresh' of a type (line 722)
        Refresh_264851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 8), self_264850, 'Refresh')
        # Calling Refresh(args, kwargs) (line 722)
        Refresh_call_result_264855 = invoke(stypy.reporting.localization.Localization(__file__, 722, 8), Refresh_264851, *[], **kwargs_264854)
        
        
        # ################# End of 'draw_idle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_idle' in the type store
        # Getting the type of 'stypy_return_type' (line 712)
        stypy_return_type_264856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264856)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_idle'
        return stypy_return_type_264856


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 724)
        None_264857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 26), 'None')
        defaults = [None_264857]
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 724, 4, False)
        # Assigning a type to the variable 'self' (line 725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx.draw.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx.draw.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx.draw')
        FigureCanvasWx.draw.__dict__.__setitem__('stypy_param_names_list', ['drawDC'])
        FigureCanvasWx.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.draw', ['drawDC'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['drawDC'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_264858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, (-1)), 'unicode', u'\n        Render the figure using RendererWx instance renderer, or using a\n        previously defined renderer if none is specified.\n        ')
        
        # Call to DEBUG_MSG(...): (line 729)
        # Processing the call arguments (line 729)
        unicode_264860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 18), 'unicode', u'draw()')
        int_264861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 28), 'int')
        # Getting the type of 'self' (line 729)
        self_264862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 31), 'self', False)
        # Processing the call keyword arguments (line 729)
        kwargs_264863 = {}
        # Getting the type of 'DEBUG_MSG' (line 729)
        DEBUG_MSG_264859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 729)
        DEBUG_MSG_call_result_264864 = invoke(stypy.reporting.localization.Localization(__file__, 729, 8), DEBUG_MSG_264859, *[unicode_264860, int_264861, self_264862], **kwargs_264863)
        
        
        # Assigning a Call to a Attribute (line 730):
        
        # Assigning a Call to a Attribute (line 730):
        
        # Call to RendererWx(...): (line 730)
        # Processing the call arguments (line 730)
        # Getting the type of 'self' (line 730)
        self_264866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 35), 'self', False)
        # Obtaining the member 'bitmap' of a type (line 730)
        bitmap_264867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 35), self_264866, 'bitmap')
        # Getting the type of 'self' (line 730)
        self_264868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 48), 'self', False)
        # Obtaining the member 'figure' of a type (line 730)
        figure_264869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 48), self_264868, 'figure')
        # Obtaining the member 'dpi' of a type (line 730)
        dpi_264870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 48), figure_264869, 'dpi')
        # Processing the call keyword arguments (line 730)
        kwargs_264871 = {}
        # Getting the type of 'RendererWx' (line 730)
        RendererWx_264865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 24), 'RendererWx', False)
        # Calling RendererWx(args, kwargs) (line 730)
        RendererWx_call_result_264872 = invoke(stypy.reporting.localization.Localization(__file__, 730, 24), RendererWx_264865, *[bitmap_264867, dpi_264870], **kwargs_264871)
        
        # Getting the type of 'self' (line 730)
        self_264873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 8), 'self')
        # Setting the type of the member 'renderer' of a type (line 730)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 8), self_264873, 'renderer', RendererWx_call_result_264872)
        
        # Call to draw(...): (line 731)
        # Processing the call arguments (line 731)
        # Getting the type of 'self' (line 731)
        self_264877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 25), 'self', False)
        # Obtaining the member 'renderer' of a type (line 731)
        renderer_264878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 731, 25), self_264877, 'renderer')
        # Processing the call keyword arguments (line 731)
        kwargs_264879 = {}
        # Getting the type of 'self' (line 731)
        self_264874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 8), 'self', False)
        # Obtaining the member 'figure' of a type (line 731)
        figure_264875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 731, 8), self_264874, 'figure')
        # Obtaining the member 'draw' of a type (line 731)
        draw_264876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 731, 8), figure_264875, 'draw')
        # Calling draw(args, kwargs) (line 731)
        draw_call_result_264880 = invoke(stypy.reporting.localization.Localization(__file__, 731, 8), draw_264876, *[renderer_264878], **kwargs_264879)
        
        
        # Assigning a Name to a Attribute (line 732):
        
        # Assigning a Name to a Attribute (line 732):
        # Getting the type of 'True' (line 732)
        True_264881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 24), 'True')
        # Getting the type of 'self' (line 732)
        self_264882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 8), 'self')
        # Setting the type of the member '_isDrawn' of a type (line 732)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 8), self_264882, '_isDrawn', True_264881)
        
        # Call to gui_repaint(...): (line 733)
        # Processing the call keyword arguments (line 733)
        # Getting the type of 'drawDC' (line 733)
        drawDC_264885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 32), 'drawDC', False)
        keyword_264886 = drawDC_264885
        kwargs_264887 = {'drawDC': keyword_264886}
        # Getting the type of 'self' (line 733)
        self_264883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 8), 'self', False)
        # Obtaining the member 'gui_repaint' of a type (line 733)
        gui_repaint_264884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 8), self_264883, 'gui_repaint')
        # Calling gui_repaint(args, kwargs) (line 733)
        gui_repaint_call_result_264888 = invoke(stypy.reporting.localization.Localization(__file__, 733, 8), gui_repaint_264884, *[], **kwargs_264887)
        
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 724)
        stypy_return_type_264889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264889)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_264889


    @norecursion
    def new_timer(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_timer'
        module_type_store = module_type_store.open_function_context('new_timer', 735, 4, False)
        # Assigning a type to the variable 'self' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx.new_timer.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx.new_timer.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx.new_timer.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx.new_timer.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx.new_timer')
        FigureCanvasWx.new_timer.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasWx.new_timer.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasWx.new_timer.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasWx.new_timer.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx.new_timer.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx.new_timer.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx.new_timer.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.new_timer', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_timer', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_timer(...)' code ##################

        unicode_264890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, (-1)), 'unicode', u"\n        Creates a new backend-specific subclass of\n        :class:`backend_bases.Timer`. This is useful for getting periodic\n        events through the backend's native event loop. Implemented only\n        for backends with GUIs.\n\n        Other Parameters\n        ----------------\n        interval : scalar\n            Timer interval in milliseconds\n        callbacks : list\n            Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``\n            will be executed by the timer every *interval*.\n\n        ")
        
        # Call to TimerWx(...): (line 751)
        # Processing the call arguments (line 751)
        # Getting the type of 'self' (line 751)
        self_264892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 23), 'self', False)
        # Getting the type of 'args' (line 751)
        args_264893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 30), 'args', False)
        # Processing the call keyword arguments (line 751)
        # Getting the type of 'kwargs' (line 751)
        kwargs_264894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 38), 'kwargs', False)
        kwargs_264895 = {'kwargs_264894': kwargs_264894}
        # Getting the type of 'TimerWx' (line 751)
        TimerWx_264891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 15), 'TimerWx', False)
        # Calling TimerWx(args, kwargs) (line 751)
        TimerWx_call_result_264896 = invoke(stypy.reporting.localization.Localization(__file__, 751, 15), TimerWx_264891, *[self_264892, args_264893], **kwargs_264895)
        
        # Assigning a type to the variable 'stypy_return_type' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'stypy_return_type', TimerWx_call_result_264896)
        
        # ################# End of 'new_timer(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_timer' in the type store
        # Getting the type of 'stypy_return_type' (line 735)
        stypy_return_type_264897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264897)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_timer'
        return stypy_return_type_264897


    @norecursion
    def flush_events(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'flush_events'
        module_type_store = module_type_store.open_function_context('flush_events', 753, 4, False)
        # Assigning a type to the variable 'self' (line 754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx.flush_events.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx.flush_events.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx.flush_events.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx.flush_events.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx.flush_events')
        FigureCanvasWx.flush_events.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasWx.flush_events.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx.flush_events.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx.flush_events.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx.flush_events.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx.flush_events.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx.flush_events.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.flush_events', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'flush_events', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'flush_events(...)' code ##################

        
        # Call to Yield(...): (line 754)
        # Processing the call keyword arguments (line 754)
        kwargs_264900 = {}
        # Getting the type of 'wx' (line 754)
        wx_264898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 8), 'wx', False)
        # Obtaining the member 'Yield' of a type (line 754)
        Yield_264899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 8), wx_264898, 'Yield')
        # Calling Yield(args, kwargs) (line 754)
        Yield_call_result_264901 = invoke(stypy.reporting.localization.Localization(__file__, 754, 8), Yield_264899, *[], **kwargs_264900)
        
        
        # ################# End of 'flush_events(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'flush_events' in the type store
        # Getting the type of 'stypy_return_type' (line 753)
        stypy_return_type_264902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264902)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'flush_events'
        return stypy_return_type_264902


    @norecursion
    def start_event_loop(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_264903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 39), 'int')
        defaults = [int_264903]
        # Create a new context for function 'start_event_loop'
        module_type_store = module_type_store.open_function_context('start_event_loop', 756, 4, False)
        # Assigning a type to the variable 'self' (line 757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx.start_event_loop.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx.start_event_loop.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx.start_event_loop.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx.start_event_loop.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx.start_event_loop')
        FigureCanvasWx.start_event_loop.__dict__.__setitem__('stypy_param_names_list', ['timeout'])
        FigureCanvasWx.start_event_loop.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx.start_event_loop.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx.start_event_loop.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx.start_event_loop.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx.start_event_loop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx.start_event_loop.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.start_event_loop', ['timeout'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'start_event_loop', localization, ['timeout'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'start_event_loop(...)' code ##################

        unicode_264904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, (-1)), 'unicode', u'\n        Start an event loop.  This is used to start a blocking event\n        loop so that interactive functions, such as ginput and\n        waitforbuttonpress, can wait for events.  This should not be\n        confused with the main GUI event loop, which is always running\n        and has nothing to do with this.\n\n        This call blocks until a callback function triggers\n        stop_event_loop() or *timeout* is reached.  If *timeout* is\n        <=0, never timeout.\n\n        Raises RuntimeError if event loop is already running.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 770)
        unicode_264905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 25), 'unicode', u'_event_loop')
        # Getting the type of 'self' (line 770)
        self_264906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 19), 'self')
        
        (may_be_264907, more_types_in_union_264908) = may_provide_member(unicode_264905, self_264906)

        if may_be_264907:

            if more_types_in_union_264908:
                # Runtime conditional SSA (line 770)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 770)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 8), 'self', remove_not_member_provider_from_union(self_264906, u'_event_loop'))
            
            # Call to RuntimeError(...): (line 771)
            # Processing the call arguments (line 771)
            unicode_264910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 31), 'unicode', u'Event loop already running')
            # Processing the call keyword arguments (line 771)
            kwargs_264911 = {}
            # Getting the type of 'RuntimeError' (line 771)
            RuntimeError_264909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 18), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 771)
            RuntimeError_call_result_264912 = invoke(stypy.reporting.localization.Localization(__file__, 771, 18), RuntimeError_264909, *[unicode_264910], **kwargs_264911)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 771, 12), RuntimeError_call_result_264912, 'raise parameter', BaseException)

            if more_types_in_union_264908:
                # SSA join for if statement (line 770)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 772):
        
        # Assigning a Call to a Name (line 772):
        
        # Call to NewId(...): (line 772)
        # Processing the call keyword arguments (line 772)
        kwargs_264915 = {}
        # Getting the type of 'wx' (line 772)
        wx_264913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 13), 'wx', False)
        # Obtaining the member 'NewId' of a type (line 772)
        NewId_264914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 13), wx_264913, 'NewId')
        # Calling NewId(args, kwargs) (line 772)
        NewId_call_result_264916 = invoke(stypy.reporting.localization.Localization(__file__, 772, 13), NewId_264914, *[], **kwargs_264915)
        
        # Assigning a type to the variable 'id' (line 772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 8), 'id', NewId_call_result_264916)
        
        # Assigning a Call to a Name (line 773):
        
        # Assigning a Call to a Name (line 773):
        
        # Call to Timer(...): (line 773)
        # Processing the call arguments (line 773)
        # Getting the type of 'self' (line 773)
        self_264919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 25), 'self', False)
        # Processing the call keyword arguments (line 773)
        # Getting the type of 'id' (line 773)
        id_264920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 34), 'id', False)
        keyword_264921 = id_264920
        kwargs_264922 = {'id': keyword_264921}
        # Getting the type of 'wx' (line 773)
        wx_264917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 16), 'wx', False)
        # Obtaining the member 'Timer' of a type (line 773)
        Timer_264918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 16), wx_264917, 'Timer')
        # Calling Timer(args, kwargs) (line 773)
        Timer_call_result_264923 = invoke(stypy.reporting.localization.Localization(__file__, 773, 16), Timer_264918, *[self_264919], **kwargs_264922)
        
        # Assigning a type to the variable 'timer' (line 773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 773, 8), 'timer', Timer_call_result_264923)
        
        
        # Getting the type of 'timeout' (line 774)
        timeout_264924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 11), 'timeout')
        int_264925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 21), 'int')
        # Applying the binary operator '>' (line 774)
        result_gt_264926 = python_operator(stypy.reporting.localization.Localization(__file__, 774, 11), '>', timeout_264924, int_264925)
        
        # Testing the type of an if condition (line 774)
        if_condition_264927 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 774, 8), result_gt_264926)
        # Assigning a type to the variable 'if_condition_264927' (line 774)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 8), 'if_condition_264927', if_condition_264927)
        # SSA begins for if statement (line 774)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to Start(...): (line 775)
        # Processing the call arguments (line 775)
        # Getting the type of 'timeout' (line 775)
        timeout_264930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 24), 'timeout', False)
        int_264931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 775, 34), 'int')
        # Applying the binary operator '*' (line 775)
        result_mul_264932 = python_operator(stypy.reporting.localization.Localization(__file__, 775, 24), '*', timeout_264930, int_264931)
        
        # Processing the call keyword arguments (line 775)
        # Getting the type of 'True' (line 775)
        True_264933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 48), 'True', False)
        keyword_264934 = True_264933
        kwargs_264935 = {'oneShot': keyword_264934}
        # Getting the type of 'timer' (line 775)
        timer_264928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 12), 'timer', False)
        # Obtaining the member 'Start' of a type (line 775)
        Start_264929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 12), timer_264928, 'Start')
        # Calling Start(args, kwargs) (line 775)
        Start_call_result_264936 = invoke(stypy.reporting.localization.Localization(__file__, 775, 12), Start_264929, *[result_mul_264932], **kwargs_264935)
        
        
        # Call to Bind(...): (line 776)
        # Processing the call arguments (line 776)
        # Getting the type of 'wx' (line 776)
        wx_264939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 22), 'wx', False)
        # Obtaining the member 'EVT_TIMER' of a type (line 776)
        EVT_TIMER_264940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 22), wx_264939, 'EVT_TIMER')
        # Getting the type of 'self' (line 776)
        self_264941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 36), 'self', False)
        # Obtaining the member 'stop_event_loop' of a type (line 776)
        stop_event_loop_264942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 36), self_264941, 'stop_event_loop')
        # Processing the call keyword arguments (line 776)
        # Getting the type of 'id' (line 776)
        id_264943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 61), 'id', False)
        keyword_264944 = id_264943
        kwargs_264945 = {'id': keyword_264944}
        # Getting the type of 'self' (line 776)
        self_264937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 12), 'self', False)
        # Obtaining the member 'Bind' of a type (line 776)
        Bind_264938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 12), self_264937, 'Bind')
        # Calling Bind(args, kwargs) (line 776)
        Bind_call_result_264946 = invoke(stypy.reporting.localization.Localization(__file__, 776, 12), Bind_264938, *[EVT_TIMER_264940, stop_event_loop_264942], **kwargs_264945)
        
        # SSA join for if statement (line 774)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 779):
        
        # Assigning a Call to a Attribute (line 779):
        
        # Call to EventLoop(...): (line 779)
        # Processing the call keyword arguments (line 779)
        kwargs_264949 = {}
        # Getting the type of 'wxc' (line 779)
        wxc_264947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 27), 'wxc', False)
        # Obtaining the member 'EventLoop' of a type (line 779)
        EventLoop_264948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 27), wxc_264947, 'EventLoop')
        # Calling EventLoop(args, kwargs) (line 779)
        EventLoop_call_result_264950 = invoke(stypy.reporting.localization.Localization(__file__, 779, 27), EventLoop_264948, *[], **kwargs_264949)
        
        # Getting the type of 'self' (line 779)
        self_264951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 8), 'self')
        # Setting the type of the member '_event_loop' of a type (line 779)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 8), self_264951, '_event_loop', EventLoop_call_result_264950)
        
        # Call to Run(...): (line 780)
        # Processing the call keyword arguments (line 780)
        kwargs_264955 = {}
        # Getting the type of 'self' (line 780)
        self_264952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 8), 'self', False)
        # Obtaining the member '_event_loop' of a type (line 780)
        _event_loop_264953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 8), self_264952, '_event_loop')
        # Obtaining the member 'Run' of a type (line 780)
        Run_264954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 8), _event_loop_264953, 'Run')
        # Calling Run(args, kwargs) (line 780)
        Run_call_result_264956 = invoke(stypy.reporting.localization.Localization(__file__, 780, 8), Run_264954, *[], **kwargs_264955)
        
        
        # Call to Stop(...): (line 781)
        # Processing the call keyword arguments (line 781)
        kwargs_264959 = {}
        # Getting the type of 'timer' (line 781)
        timer_264957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 8), 'timer', False)
        # Obtaining the member 'Stop' of a type (line 781)
        Stop_264958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 781, 8), timer_264957, 'Stop')
        # Calling Stop(args, kwargs) (line 781)
        Stop_call_result_264960 = invoke(stypy.reporting.localization.Localization(__file__, 781, 8), Stop_264958, *[], **kwargs_264959)
        
        
        # ################# End of 'start_event_loop(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'start_event_loop' in the type store
        # Getting the type of 'stypy_return_type' (line 756)
        stypy_return_type_264961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264961)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'start_event_loop'
        return stypy_return_type_264961


    @norecursion
    def stop_event_loop(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 783)
        None_264962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 36), 'None')
        defaults = [None_264962]
        # Create a new context for function 'stop_event_loop'
        module_type_store = module_type_store.open_function_context('stop_event_loop', 783, 4, False)
        # Assigning a type to the variable 'self' (line 784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 784, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx.stop_event_loop.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx.stop_event_loop.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx.stop_event_loop.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx.stop_event_loop.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx.stop_event_loop')
        FigureCanvasWx.stop_event_loop.__dict__.__setitem__('stypy_param_names_list', ['event'])
        FigureCanvasWx.stop_event_loop.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx.stop_event_loop.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx.stop_event_loop.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx.stop_event_loop.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx.stop_event_loop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx.stop_event_loop.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.stop_event_loop', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'stop_event_loop', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'stop_event_loop(...)' code ##################

        unicode_264963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, (-1)), 'unicode', u'\n        Stop an event loop.  This is used to stop a blocking event\n        loop so that interactive functions, such as ginput and\n        waitforbuttonpress, can wait for events.\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 790)
        unicode_264964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 790, 25), 'unicode', u'_event_loop')
        # Getting the type of 'self' (line 790)
        self_264965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 19), 'self')
        
        (may_be_264966, more_types_in_union_264967) = may_provide_member(unicode_264964, self_264965)

        if may_be_264966:

            if more_types_in_union_264967:
                # Runtime conditional SSA (line 790)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 790)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 8), 'self', remove_not_member_provider_from_union(self_264965, u'_event_loop'))
            
            
            # Call to IsRunning(...): (line 791)
            # Processing the call keyword arguments (line 791)
            kwargs_264971 = {}
            # Getting the type of 'self' (line 791)
            self_264968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 15), 'self', False)
            # Obtaining the member '_event_loop' of a type (line 791)
            _event_loop_264969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 15), self_264968, '_event_loop')
            # Obtaining the member 'IsRunning' of a type (line 791)
            IsRunning_264970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 15), _event_loop_264969, 'IsRunning')
            # Calling IsRunning(args, kwargs) (line 791)
            IsRunning_call_result_264972 = invoke(stypy.reporting.localization.Localization(__file__, 791, 15), IsRunning_264970, *[], **kwargs_264971)
            
            # Testing the type of an if condition (line 791)
            if_condition_264973 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 791, 12), IsRunning_call_result_264972)
            # Assigning a type to the variable 'if_condition_264973' (line 791)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 12), 'if_condition_264973', if_condition_264973)
            # SSA begins for if statement (line 791)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to Exit(...): (line 792)
            # Processing the call keyword arguments (line 792)
            kwargs_264977 = {}
            # Getting the type of 'self' (line 792)
            self_264974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 16), 'self', False)
            # Obtaining the member '_event_loop' of a type (line 792)
            _event_loop_264975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 16), self_264974, '_event_loop')
            # Obtaining the member 'Exit' of a type (line 792)
            Exit_264976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 16), _event_loop_264975, 'Exit')
            # Calling Exit(args, kwargs) (line 792)
            Exit_call_result_264978 = invoke(stypy.reporting.localization.Localization(__file__, 792, 16), Exit_264976, *[], **kwargs_264977)
            
            # SSA join for if statement (line 791)
            module_type_store = module_type_store.join_ssa_context()
            
            # Deleting a member
            # Getting the type of 'self' (line 793)
            self_264979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 12), 'self')
            module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 793, 12), self_264979, '_event_loop')

            if more_types_in_union_264967:
                # SSA join for if statement (line 790)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'stop_event_loop(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'stop_event_loop' in the type store
        # Getting the type of 'stypy_return_type' (line 783)
        stypy_return_type_264980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_264980)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'stop_event_loop'
        return stypy_return_type_264980


    @norecursion
    def _get_imagesave_wildcards(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_imagesave_wildcards'
        module_type_store = module_type_store.open_function_context('_get_imagesave_wildcards', 795, 4, False)
        # Assigning a type to the variable 'self' (line 796)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._get_imagesave_wildcards.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._get_imagesave_wildcards.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._get_imagesave_wildcards.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._get_imagesave_wildcards.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._get_imagesave_wildcards')
        FigureCanvasWx._get_imagesave_wildcards.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasWx._get_imagesave_wildcards.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._get_imagesave_wildcards.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._get_imagesave_wildcards.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._get_imagesave_wildcards.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._get_imagesave_wildcards.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._get_imagesave_wildcards.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._get_imagesave_wildcards', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_imagesave_wildcards', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_imagesave_wildcards(...)' code ##################

        unicode_264981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 8), 'unicode', u'return the wildcard string for the filesave dialog')
        
        # Assigning a Call to a Name (line 797):
        
        # Assigning a Call to a Name (line 797):
        
        # Call to get_default_filetype(...): (line 797)
        # Processing the call keyword arguments (line 797)
        kwargs_264984 = {}
        # Getting the type of 'self' (line 797)
        self_264982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 27), 'self', False)
        # Obtaining the member 'get_default_filetype' of a type (line 797)
        get_default_filetype_264983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 27), self_264982, 'get_default_filetype')
        # Calling get_default_filetype(args, kwargs) (line 797)
        get_default_filetype_call_result_264985 = invoke(stypy.reporting.localization.Localization(__file__, 797, 27), get_default_filetype_264983, *[], **kwargs_264984)
        
        # Assigning a type to the variable 'default_filetype' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 8), 'default_filetype', get_default_filetype_call_result_264985)
        
        # Assigning a Call to a Name (line 798):
        
        # Assigning a Call to a Name (line 798):
        
        # Call to get_supported_filetypes_grouped(...): (line 798)
        # Processing the call keyword arguments (line 798)
        kwargs_264988 = {}
        # Getting the type of 'self' (line 798)
        self_264986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 20), 'self', False)
        # Obtaining the member 'get_supported_filetypes_grouped' of a type (line 798)
        get_supported_filetypes_grouped_264987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 20), self_264986, 'get_supported_filetypes_grouped')
        # Calling get_supported_filetypes_grouped(args, kwargs) (line 798)
        get_supported_filetypes_grouped_call_result_264989 = invoke(stypy.reporting.localization.Localization(__file__, 798, 20), get_supported_filetypes_grouped_264987, *[], **kwargs_264988)
        
        # Assigning a type to the variable 'filetypes' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 8), 'filetypes', get_supported_filetypes_grouped_call_result_264989)
        
        # Assigning a Call to a Name (line 799):
        
        # Assigning a Call to a Name (line 799):
        
        # Call to sorted(...): (line 799)
        # Processing the call arguments (line 799)
        
        # Call to items(...): (line 799)
        # Processing the call keyword arguments (line 799)
        kwargs_264993 = {}
        # Getting the type of 'filetypes' (line 799)
        filetypes_264991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 34), 'filetypes', False)
        # Obtaining the member 'items' of a type (line 799)
        items_264992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 34), filetypes_264991, 'items')
        # Calling items(args, kwargs) (line 799)
        items_call_result_264994 = invoke(stypy.reporting.localization.Localization(__file__, 799, 34), items_264992, *[], **kwargs_264993)
        
        # Processing the call keyword arguments (line 799)
        kwargs_264995 = {}
        # Getting the type of 'sorted' (line 799)
        sorted_264990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 27), 'sorted', False)
        # Calling sorted(args, kwargs) (line 799)
        sorted_call_result_264996 = invoke(stypy.reporting.localization.Localization(__file__, 799, 27), sorted_264990, *[items_call_result_264994], **kwargs_264995)
        
        # Assigning a type to the variable 'sorted_filetypes' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 8), 'sorted_filetypes', sorted_call_result_264996)
        
        # Assigning a List to a Name (line 800):
        
        # Assigning a List to a Name (line 800):
        
        # Obtaining an instance of the builtin type 'list' (line 800)
        list_264997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 800, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 800)
        
        # Assigning a type to the variable 'wildcards' (line 800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 800, 8), 'wildcards', list_264997)
        
        # Assigning a List to a Name (line 801):
        
        # Assigning a List to a Name (line 801):
        
        # Obtaining an instance of the builtin type 'list' (line 801)
        list_264998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 801, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 801)
        
        # Assigning a type to the variable 'extensions' (line 801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 801, 8), 'extensions', list_264998)
        
        # Assigning a Num to a Name (line 802):
        
        # Assigning a Num to a Name (line 802):
        int_264999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 23), 'int')
        # Assigning a type to the variable 'filter_index' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'filter_index', int_264999)
        
        
        # Call to enumerate(...): (line 803)
        # Processing the call arguments (line 803)
        # Getting the type of 'sorted_filetypes' (line 803)
        sorted_filetypes_265001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 41), 'sorted_filetypes', False)
        # Processing the call keyword arguments (line 803)
        kwargs_265002 = {}
        # Getting the type of 'enumerate' (line 803)
        enumerate_265000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 31), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 803)
        enumerate_call_result_265003 = invoke(stypy.reporting.localization.Localization(__file__, 803, 31), enumerate_265000, *[sorted_filetypes_265001], **kwargs_265002)
        
        # Testing the type of a for loop iterable (line 803)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 803, 8), enumerate_call_result_265003)
        # Getting the type of the for loop variable (line 803)
        for_loop_var_265004 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 803, 8), enumerate_call_result_265003)
        # Assigning a type to the variable 'i' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 8), for_loop_var_265004))
        # Assigning a type to the variable 'name' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 8), for_loop_var_265004))
        # Assigning a type to the variable 'exts' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'exts', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 8), for_loop_var_265004))
        # SSA begins for a for statement (line 803)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 804):
        
        # Assigning a Call to a Name (line 804):
        
        # Call to join(...): (line 804)
        # Processing the call arguments (line 804)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'exts' (line 804)
        exts_265010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 57), 'exts', False)
        comprehension_265011 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 804, 33), exts_265010)
        # Assigning a type to the variable 'ext' (line 804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 33), 'ext', comprehension_265011)
        unicode_265007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 33), 'unicode', u'*.%s')
        # Getting the type of 'ext' (line 804)
        ext_265008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 42), 'ext', False)
        # Applying the binary operator '%' (line 804)
        result_mod_265009 = python_operator(stypy.reporting.localization.Localization(__file__, 804, 33), '%', unicode_265007, ext_265008)
        
        list_265012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 33), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 804, 33), list_265012, result_mod_265009)
        # Processing the call keyword arguments (line 804)
        kwargs_265013 = {}
        unicode_265005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 23), 'unicode', u';')
        # Obtaining the member 'join' of a type (line 804)
        join_265006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 23), unicode_265005, 'join')
        # Calling join(args, kwargs) (line 804)
        join_call_result_265014 = invoke(stypy.reporting.localization.Localization(__file__, 804, 23), join_265006, *[list_265012], **kwargs_265013)
        
        # Assigning a type to the variable 'ext_list' (line 804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 12), 'ext_list', join_call_result_265014)
        
        # Call to append(...): (line 805)
        # Processing the call arguments (line 805)
        
        # Obtaining the type of the subscript
        int_265017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 35), 'int')
        # Getting the type of 'exts' (line 805)
        exts_265018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 30), 'exts', False)
        # Obtaining the member '__getitem__' of a type (line 805)
        getitem___265019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 30), exts_265018, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 805)
        subscript_call_result_265020 = invoke(stypy.reporting.localization.Localization(__file__, 805, 30), getitem___265019, int_265017)
        
        # Processing the call keyword arguments (line 805)
        kwargs_265021 = {}
        # Getting the type of 'extensions' (line 805)
        extensions_265015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 12), 'extensions', False)
        # Obtaining the member 'append' of a type (line 805)
        append_265016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 12), extensions_265015, 'append')
        # Calling append(args, kwargs) (line 805)
        append_call_result_265022 = invoke(stypy.reporting.localization.Localization(__file__, 805, 12), append_265016, *[subscript_call_result_265020], **kwargs_265021)
        
        
        # Assigning a BinOp to a Name (line 806):
        
        # Assigning a BinOp to a Name (line 806):
        unicode_265023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, 23), 'unicode', u'%s (%s)|%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 806)
        tuple_265024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 806)
        # Adding element type (line 806)
        # Getting the type of 'name' (line 806)
        name_265025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 39), 'name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 806, 39), tuple_265024, name_265025)
        # Adding element type (line 806)
        # Getting the type of 'ext_list' (line 806)
        ext_list_265026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 45), 'ext_list')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 806, 39), tuple_265024, ext_list_265026)
        # Adding element type (line 806)
        # Getting the type of 'ext_list' (line 806)
        ext_list_265027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 55), 'ext_list')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 806, 39), tuple_265024, ext_list_265027)
        
        # Applying the binary operator '%' (line 806)
        result_mod_265028 = python_operator(stypy.reporting.localization.Localization(__file__, 806, 23), '%', unicode_265023, tuple_265024)
        
        # Assigning a type to the variable 'wildcard' (line 806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 12), 'wildcard', result_mod_265028)
        
        
        # Getting the type of 'default_filetype' (line 807)
        default_filetype_265029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 15), 'default_filetype')
        # Getting the type of 'exts' (line 807)
        exts_265030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 35), 'exts')
        # Applying the binary operator 'in' (line 807)
        result_contains_265031 = python_operator(stypy.reporting.localization.Localization(__file__, 807, 15), 'in', default_filetype_265029, exts_265030)
        
        # Testing the type of an if condition (line 807)
        if_condition_265032 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 807, 12), result_contains_265031)
        # Assigning a type to the variable 'if_condition_265032' (line 807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 12), 'if_condition_265032', if_condition_265032)
        # SSA begins for if statement (line 807)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 808):
        
        # Assigning a Name to a Name (line 808):
        # Getting the type of 'i' (line 808)
        i_265033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 31), 'i')
        # Assigning a type to the variable 'filter_index' (line 808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 808, 16), 'filter_index', i_265033)
        # SSA join for if statement (line 807)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 809)
        # Processing the call arguments (line 809)
        # Getting the type of 'wildcard' (line 809)
        wildcard_265036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 29), 'wildcard', False)
        # Processing the call keyword arguments (line 809)
        kwargs_265037 = {}
        # Getting the type of 'wildcards' (line 809)
        wildcards_265034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 12), 'wildcards', False)
        # Obtaining the member 'append' of a type (line 809)
        append_265035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 12), wildcards_265034, 'append')
        # Calling append(args, kwargs) (line 809)
        append_call_result_265038 = invoke(stypy.reporting.localization.Localization(__file__, 809, 12), append_265035, *[wildcard_265036], **kwargs_265037)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 810):
        
        # Assigning a Call to a Name (line 810):
        
        # Call to join(...): (line 810)
        # Processing the call arguments (line 810)
        # Getting the type of 'wildcards' (line 810)
        wildcards_265041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 29), 'wildcards', False)
        # Processing the call keyword arguments (line 810)
        kwargs_265042 = {}
        unicode_265039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 810, 20), 'unicode', u'|')
        # Obtaining the member 'join' of a type (line 810)
        join_265040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 810, 20), unicode_265039, 'join')
        # Calling join(args, kwargs) (line 810)
        join_call_result_265043 = invoke(stypy.reporting.localization.Localization(__file__, 810, 20), join_265040, *[wildcards_265041], **kwargs_265042)
        
        # Assigning a type to the variable 'wildcards' (line 810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 810, 8), 'wildcards', join_call_result_265043)
        
        # Obtaining an instance of the builtin type 'tuple' (line 811)
        tuple_265044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 811)
        # Adding element type (line 811)
        # Getting the type of 'wildcards' (line 811)
        wildcards_265045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 15), 'wildcards')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 811, 15), tuple_265044, wildcards_265045)
        # Adding element type (line 811)
        # Getting the type of 'extensions' (line 811)
        extensions_265046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 26), 'extensions')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 811, 15), tuple_265044, extensions_265046)
        # Adding element type (line 811)
        # Getting the type of 'filter_index' (line 811)
        filter_index_265047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 38), 'filter_index')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 811, 15), tuple_265044, filter_index_265047)
        
        # Assigning a type to the variable 'stypy_return_type' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 8), 'stypy_return_type', tuple_265044)
        
        # ################# End of '_get_imagesave_wildcards(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_imagesave_wildcards' in the type store
        # Getting the type of 'stypy_return_type' (line 795)
        stypy_return_type_265048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265048)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_imagesave_wildcards'
        return stypy_return_type_265048


    @norecursion
    def gui_repaint(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 813)
        None_265049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 33), 'None')
        unicode_265050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 46), 'unicode', u'WX')
        defaults = [None_265049, unicode_265050]
        # Create a new context for function 'gui_repaint'
        module_type_store = module_type_store.open_function_context('gui_repaint', 813, 4, False)
        # Assigning a type to the variable 'self' (line 814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx.gui_repaint.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx.gui_repaint.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx.gui_repaint.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx.gui_repaint.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx.gui_repaint')
        FigureCanvasWx.gui_repaint.__dict__.__setitem__('stypy_param_names_list', ['drawDC', 'origin'])
        FigureCanvasWx.gui_repaint.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx.gui_repaint.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx.gui_repaint.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx.gui_repaint.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx.gui_repaint.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx.gui_repaint.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.gui_repaint', ['drawDC', 'origin'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'gui_repaint', localization, ['drawDC', 'origin'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'gui_repaint(...)' code ##################

        unicode_265051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, (-1)), 'unicode', u"\n        Performs update of the displayed image on the GUI canvas, using the\n        supplied wx.PaintDC device context.\n\n        The 'WXAgg' backend sets origin accordingly.\n        ")
        
        # Call to DEBUG_MSG(...): (line 820)
        # Processing the call arguments (line 820)
        unicode_265053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 18), 'unicode', u'gui_repaint()')
        int_265054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 35), 'int')
        # Getting the type of 'self' (line 820)
        self_265055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 38), 'self', False)
        # Processing the call keyword arguments (line 820)
        kwargs_265056 = {}
        # Getting the type of 'DEBUG_MSG' (line 820)
        DEBUG_MSG_265052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 820)
        DEBUG_MSG_call_result_265057 = invoke(stypy.reporting.localization.Localization(__file__, 820, 8), DEBUG_MSG_265052, *[unicode_265053, int_265054, self_265055], **kwargs_265056)
        
        
        
        # Call to IsShownOnScreen(...): (line 821)
        # Processing the call keyword arguments (line 821)
        kwargs_265060 = {}
        # Getting the type of 'self' (line 821)
        self_265058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 11), 'self', False)
        # Obtaining the member 'IsShownOnScreen' of a type (line 821)
        IsShownOnScreen_265059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 821, 11), self_265058, 'IsShownOnScreen')
        # Calling IsShownOnScreen(args, kwargs) (line 821)
        IsShownOnScreen_call_result_265061 = invoke(stypy.reporting.localization.Localization(__file__, 821, 11), IsShownOnScreen_265059, *[], **kwargs_265060)
        
        # Testing the type of an if condition (line 821)
        if_condition_265062 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 821, 8), IsShownOnScreen_call_result_265061)
        # Assigning a type to the variable 'if_condition_265062' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'if_condition_265062', if_condition_265062)
        # SSA begins for if statement (line 821)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'drawDC' (line 822)
        drawDC_265063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 19), 'drawDC')
        # Applying the 'not' unary operator (line 822)
        result_not__265064 = python_operator(stypy.reporting.localization.Localization(__file__, 822, 15), 'not', drawDC_265063)
        
        # Testing the type of an if condition (line 822)
        if_condition_265065 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 822, 12), result_not__265064)
        # Assigning a type to the variable 'if_condition_265065' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 12), 'if_condition_265065', if_condition_265065)
        # SSA begins for if statement (line 822)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 824):
        
        # Assigning a Call to a Name (line 824):
        
        # Call to ClientDC(...): (line 824)
        # Processing the call arguments (line 824)
        # Getting the type of 'self' (line 824)
        self_265068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 37), 'self', False)
        # Processing the call keyword arguments (line 824)
        kwargs_265069 = {}
        # Getting the type of 'wx' (line 824)
        wx_265066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 25), 'wx', False)
        # Obtaining the member 'ClientDC' of a type (line 824)
        ClientDC_265067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 824, 25), wx_265066, 'ClientDC')
        # Calling ClientDC(args, kwargs) (line 824)
        ClientDC_call_result_265070 = invoke(stypy.reporting.localization.Localization(__file__, 824, 25), ClientDC_265067, *[self_265068], **kwargs_265069)
        
        # Assigning a type to the variable 'drawDC' (line 824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 16), 'drawDC', ClientDC_call_result_265070)
        # SSA join for if statement (line 822)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'wx' (line 829)
        wx_265071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 15), 'wx')
        # Obtaining the member 'Platform' of a type (line 829)
        Platform_265072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 15), wx_265071, 'Platform')
        unicode_265073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 30), 'unicode', u'__WXMSW__')
        # Applying the binary operator '==' (line 829)
        result_eq_265074 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 15), '==', Platform_265072, unicode_265073)
        
        
        # Getting the type of 'origin' (line 829)
        origin_265075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 46), 'origin')
        unicode_265076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 56), 'unicode', u'WX')
        # Applying the binary operator '==' (line 829)
        result_eq_265077 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 46), '==', origin_265075, unicode_265076)
        
        # Applying the binary operator 'and' (line 829)
        result_and_keyword_265078 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 15), 'and', result_eq_265074, result_eq_265077)
        
        # Testing the type of an if condition (line 829)
        if_condition_265079 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 829, 12), result_and_keyword_265078)
        # Assigning a type to the variable 'if_condition_265079' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 12), 'if_condition_265079', if_condition_265079)
        # SSA begins for if statement (line 829)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 830):
        
        # Assigning a Call to a Name (line 830):
        
        # Call to ConvertToImage(...): (line 830)
        # Processing the call keyword arguments (line 830)
        kwargs_265083 = {}
        # Getting the type of 'self' (line 830)
        self_265080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 22), 'self', False)
        # Obtaining the member 'bitmap' of a type (line 830)
        bitmap_265081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 22), self_265080, 'bitmap')
        # Obtaining the member 'ConvertToImage' of a type (line 830)
        ConvertToImage_265082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 22), bitmap_265081, 'ConvertToImage')
        # Calling ConvertToImage(args, kwargs) (line 830)
        ConvertToImage_call_result_265084 = invoke(stypy.reporting.localization.Localization(__file__, 830, 22), ConvertToImage_265082, *[], **kwargs_265083)
        
        # Assigning a type to the variable 'img' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 16), 'img', ConvertToImage_call_result_265084)
        
        # Assigning a Call to a Name (line 831):
        
        # Assigning a Call to a Name (line 831):
        
        # Call to ConvertToBitmap(...): (line 831)
        # Processing the call keyword arguments (line 831)
        kwargs_265087 = {}
        # Getting the type of 'img' (line 831)
        img_265085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 22), 'img', False)
        # Obtaining the member 'ConvertToBitmap' of a type (line 831)
        ConvertToBitmap_265086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 22), img_265085, 'ConvertToBitmap')
        # Calling ConvertToBitmap(args, kwargs) (line 831)
        ConvertToBitmap_call_result_265088 = invoke(stypy.reporting.localization.Localization(__file__, 831, 22), ConvertToBitmap_265086, *[], **kwargs_265087)
        
        # Assigning a type to the variable 'bmp' (line 831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 831, 16), 'bmp', ConvertToBitmap_call_result_265088)
        
        # Call to DrawBitmap(...): (line 832)
        # Processing the call arguments (line 832)
        # Getting the type of 'bmp' (line 832)
        bmp_265091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 34), 'bmp', False)
        int_265092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 39), 'int')
        int_265093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 42), 'int')
        # Processing the call keyword arguments (line 832)
        kwargs_265094 = {}
        # Getting the type of 'drawDC' (line 832)
        drawDC_265089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 16), 'drawDC', False)
        # Obtaining the member 'DrawBitmap' of a type (line 832)
        DrawBitmap_265090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 16), drawDC_265089, 'DrawBitmap')
        # Calling DrawBitmap(args, kwargs) (line 832)
        DrawBitmap_call_result_265095 = invoke(stypy.reporting.localization.Localization(__file__, 832, 16), DrawBitmap_265090, *[bmp_265091, int_265092, int_265093], **kwargs_265094)
        
        # SSA branch for the else part of an if statement (line 829)
        module_type_store.open_ssa_branch('else')
        
        # Call to DrawBitmap(...): (line 834)
        # Processing the call arguments (line 834)
        # Getting the type of 'self' (line 834)
        self_265098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 34), 'self', False)
        # Obtaining the member 'bitmap' of a type (line 834)
        bitmap_265099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 34), self_265098, 'bitmap')
        int_265100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, 47), 'int')
        int_265101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, 50), 'int')
        # Processing the call keyword arguments (line 834)
        kwargs_265102 = {}
        # Getting the type of 'drawDC' (line 834)
        drawDC_265096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 16), 'drawDC', False)
        # Obtaining the member 'DrawBitmap' of a type (line 834)
        DrawBitmap_265097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 16), drawDC_265096, 'DrawBitmap')
        # Calling DrawBitmap(args, kwargs) (line 834)
        DrawBitmap_call_result_265103 = invoke(stypy.reporting.localization.Localization(__file__, 834, 16), DrawBitmap_265097, *[bitmap_265099, int_265100, int_265101], **kwargs_265102)
        
        # SSA join for if statement (line 829)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 821)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'gui_repaint(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'gui_repaint' in the type store
        # Getting the type of 'stypy_return_type' (line 813)
        stypy_return_type_265104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265104)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'gui_repaint'
        return stypy_return_type_265104

    
    # Assigning a Call to a Name (line 836):
    
    # Assigning a Str to a Subscript (line 837):
    
    # Assigning a Str to a Subscript (line 838):
    
    # Assigning a Str to a Subscript (line 839):
    
    # Assigning a Str to a Subscript (line 840):
    
    # Assigning a Str to a Subscript (line 841):
    
    # Assigning a Str to a Subscript (line 842):

    @norecursion
    def print_figure(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'print_figure'
        module_type_store = module_type_store.open_function_context('print_figure', 846, 4, False)
        # Assigning a type to the variable 'self' (line 847)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 847, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx.print_figure.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx.print_figure.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx.print_figure.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx.print_figure.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx.print_figure')
        FigureCanvasWx.print_figure.__dict__.__setitem__('stypy_param_names_list', ['filename'])
        FigureCanvasWx.print_figure.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasWx.print_figure.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasWx.print_figure.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx.print_figure.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx.print_figure.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx.print_figure.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.print_figure', ['filename'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'print_figure', localization, ['filename'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'print_figure(...)' code ##################

        
        # Call to print_figure(...): (line 848)
        # Processing the call arguments (line 848)
        # Getting the type of 'self' (line 848)
        self_265107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 38), 'self', False)
        # Getting the type of 'filename' (line 848)
        filename_265108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 44), 'filename', False)
        # Getting the type of 'args' (line 848)
        args_265109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 55), 'args', False)
        # Processing the call keyword arguments (line 848)
        # Getting the type of 'kwargs' (line 848)
        kwargs_265110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 63), 'kwargs', False)
        kwargs_265111 = {'kwargs_265110': kwargs_265110}
        # Getting the type of 'FigureCanvasBase' (line 848)
        FigureCanvasBase_265105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'print_figure' of a type (line 848)
        print_figure_265106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 8), FigureCanvasBase_265105, 'print_figure')
        # Calling print_figure(args, kwargs) (line 848)
        print_figure_call_result_265112 = invoke(stypy.reporting.localization.Localization(__file__, 848, 8), print_figure_265106, *[self_265107, filename_265108, args_265109], **kwargs_265111)
        
        
        # Getting the type of 'self' (line 853)
        self_265113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 11), 'self')
        # Obtaining the member '_isDrawn' of a type (line 853)
        _isDrawn_265114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 853, 11), self_265113, '_isDrawn')
        # Testing the type of an if condition (line 853)
        if_condition_265115 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 853, 8), _isDrawn_265114)
        # Assigning a type to the variable 'if_condition_265115' (line 853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 853, 8), 'if_condition_265115', if_condition_265115)
        # SSA begins for if statement (line 853)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 854)
        # Processing the call keyword arguments (line 854)
        kwargs_265118 = {}
        # Getting the type of 'self' (line 854)
        self_265116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 12), 'self', False)
        # Obtaining the member 'draw' of a type (line 854)
        draw_265117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 854, 12), self_265116, 'draw')
        # Calling draw(args, kwargs) (line 854)
        draw_call_result_265119 = invoke(stypy.reporting.localization.Localization(__file__, 854, 12), draw_265117, *[], **kwargs_265118)
        
        # SSA join for if statement (line 853)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'print_figure(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'print_figure' in the type store
        # Getting the type of 'stypy_return_type' (line 846)
        stypy_return_type_265120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265120)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'print_figure'
        return stypy_return_type_265120


    @norecursion
    def print_bmp(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'print_bmp'
        module_type_store = module_type_store.open_function_context('print_bmp', 856, 4, False)
        # Assigning a type to the variable 'self' (line 857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 857, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx.print_bmp.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx.print_bmp.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx.print_bmp.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx.print_bmp.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx.print_bmp')
        FigureCanvasWx.print_bmp.__dict__.__setitem__('stypy_param_names_list', ['filename'])
        FigureCanvasWx.print_bmp.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasWx.print_bmp.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasWx.print_bmp.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx.print_bmp.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx.print_bmp.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx.print_bmp.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.print_bmp', ['filename'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'print_bmp', localization, ['filename'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'print_bmp(...)' code ##################

        
        # Call to _print_image(...): (line 857)
        # Processing the call arguments (line 857)
        # Getting the type of 'filename' (line 857)
        filename_265123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 33), 'filename', False)
        # Getting the type of 'wx' (line 857)
        wx_265124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 43), 'wx', False)
        # Obtaining the member 'BITMAP_TYPE_BMP' of a type (line 857)
        BITMAP_TYPE_BMP_265125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 857, 43), wx_265124, 'BITMAP_TYPE_BMP')
        # Getting the type of 'args' (line 857)
        args_265126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 64), 'args', False)
        # Processing the call keyword arguments (line 857)
        # Getting the type of 'kwargs' (line 857)
        kwargs_265127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 72), 'kwargs', False)
        kwargs_265128 = {'kwargs_265127': kwargs_265127}
        # Getting the type of 'self' (line 857)
        self_265121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 15), 'self', False)
        # Obtaining the member '_print_image' of a type (line 857)
        _print_image_265122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 857, 15), self_265121, '_print_image')
        # Calling _print_image(args, kwargs) (line 857)
        _print_image_call_result_265129 = invoke(stypy.reporting.localization.Localization(__file__, 857, 15), _print_image_265122, *[filename_265123, BITMAP_TYPE_BMP_265125, args_265126], **kwargs_265128)
        
        # Assigning a type to the variable 'stypy_return_type' (line 857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 857, 8), 'stypy_return_type', _print_image_call_result_265129)
        
        # ################# End of 'print_bmp(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'print_bmp' in the type store
        # Getting the type of 'stypy_return_type' (line 856)
        stypy_return_type_265130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265130)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'print_bmp'
        return stypy_return_type_265130


    @norecursion
    def print_pcx(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'print_pcx'
        module_type_store = module_type_store.open_function_context('print_pcx', 865, 4, False)
        # Assigning a type to the variable 'self' (line 866)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 866, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx.print_pcx.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx.print_pcx.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx.print_pcx.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx.print_pcx.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx.print_pcx')
        FigureCanvasWx.print_pcx.__dict__.__setitem__('stypy_param_names_list', ['filename'])
        FigureCanvasWx.print_pcx.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasWx.print_pcx.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasWx.print_pcx.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx.print_pcx.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx.print_pcx.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx.print_pcx.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.print_pcx', ['filename'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'print_pcx', localization, ['filename'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'print_pcx(...)' code ##################

        
        # Call to _print_image(...): (line 866)
        # Processing the call arguments (line 866)
        # Getting the type of 'filename' (line 866)
        filename_265133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 33), 'filename', False)
        # Getting the type of 'wx' (line 866)
        wx_265134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 43), 'wx', False)
        # Obtaining the member 'BITMAP_TYPE_PCX' of a type (line 866)
        BITMAP_TYPE_PCX_265135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 866, 43), wx_265134, 'BITMAP_TYPE_PCX')
        # Getting the type of 'args' (line 866)
        args_265136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 64), 'args', False)
        # Processing the call keyword arguments (line 866)
        # Getting the type of 'kwargs' (line 866)
        kwargs_265137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 72), 'kwargs', False)
        kwargs_265138 = {'kwargs_265137': kwargs_265137}
        # Getting the type of 'self' (line 866)
        self_265131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 15), 'self', False)
        # Obtaining the member '_print_image' of a type (line 866)
        _print_image_265132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 866, 15), self_265131, '_print_image')
        # Calling _print_image(args, kwargs) (line 866)
        _print_image_call_result_265139 = invoke(stypy.reporting.localization.Localization(__file__, 866, 15), _print_image_265132, *[filename_265133, BITMAP_TYPE_PCX_265135, args_265136], **kwargs_265138)
        
        # Assigning a type to the variable 'stypy_return_type' (line 866)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 866, 8), 'stypy_return_type', _print_image_call_result_265139)
        
        # ################# End of 'print_pcx(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'print_pcx' in the type store
        # Getting the type of 'stypy_return_type' (line 865)
        stypy_return_type_265140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265140)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'print_pcx'
        return stypy_return_type_265140


    @norecursion
    def print_png(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'print_png'
        module_type_store = module_type_store.open_function_context('print_png', 868, 4, False)
        # Assigning a type to the variable 'self' (line 869)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 869, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx.print_png.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx.print_png.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx.print_png.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx.print_png.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx.print_png')
        FigureCanvasWx.print_png.__dict__.__setitem__('stypy_param_names_list', ['filename'])
        FigureCanvasWx.print_png.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasWx.print_png.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasWx.print_png.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx.print_png.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx.print_png.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx.print_png.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.print_png', ['filename'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'print_png', localization, ['filename'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'print_png(...)' code ##################

        
        # Call to _print_image(...): (line 869)
        # Processing the call arguments (line 869)
        # Getting the type of 'filename' (line 869)
        filename_265143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 33), 'filename', False)
        # Getting the type of 'wx' (line 869)
        wx_265144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 43), 'wx', False)
        # Obtaining the member 'BITMAP_TYPE_PNG' of a type (line 869)
        BITMAP_TYPE_PNG_265145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 869, 43), wx_265144, 'BITMAP_TYPE_PNG')
        # Getting the type of 'args' (line 869)
        args_265146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 64), 'args', False)
        # Processing the call keyword arguments (line 869)
        # Getting the type of 'kwargs' (line 869)
        kwargs_265147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 72), 'kwargs', False)
        kwargs_265148 = {'kwargs_265147': kwargs_265147}
        # Getting the type of 'self' (line 869)
        self_265141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 15), 'self', False)
        # Obtaining the member '_print_image' of a type (line 869)
        _print_image_265142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 869, 15), self_265141, '_print_image')
        # Calling _print_image(args, kwargs) (line 869)
        _print_image_call_result_265149 = invoke(stypy.reporting.localization.Localization(__file__, 869, 15), _print_image_265142, *[filename_265143, BITMAP_TYPE_PNG_265145, args_265146], **kwargs_265148)
        
        # Assigning a type to the variable 'stypy_return_type' (line 869)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 869, 8), 'stypy_return_type', _print_image_call_result_265149)
        
        # ################# End of 'print_png(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'print_png' in the type store
        # Getting the type of 'stypy_return_type' (line 868)
        stypy_return_type_265150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265150)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'print_png'
        return stypy_return_type_265150


    @norecursion
    def print_xpm(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'print_xpm'
        module_type_store = module_type_store.open_function_context('print_xpm', 877, 4, False)
        # Assigning a type to the variable 'self' (line 878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 878, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx.print_xpm.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx.print_xpm.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx.print_xpm.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx.print_xpm.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx.print_xpm')
        FigureCanvasWx.print_xpm.__dict__.__setitem__('stypy_param_names_list', ['filename'])
        FigureCanvasWx.print_xpm.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasWx.print_xpm.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasWx.print_xpm.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx.print_xpm.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx.print_xpm.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx.print_xpm.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx.print_xpm', ['filename'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'print_xpm', localization, ['filename'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'print_xpm(...)' code ##################

        
        # Call to _print_image(...): (line 878)
        # Processing the call arguments (line 878)
        # Getting the type of 'filename' (line 878)
        filename_265153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 33), 'filename', False)
        # Getting the type of 'wx' (line 878)
        wx_265154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 43), 'wx', False)
        # Obtaining the member 'BITMAP_TYPE_XPM' of a type (line 878)
        BITMAP_TYPE_XPM_265155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 43), wx_265154, 'BITMAP_TYPE_XPM')
        # Getting the type of 'args' (line 878)
        args_265156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 64), 'args', False)
        # Processing the call keyword arguments (line 878)
        # Getting the type of 'kwargs' (line 878)
        kwargs_265157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 72), 'kwargs', False)
        kwargs_265158 = {'kwargs_265157': kwargs_265157}
        # Getting the type of 'self' (line 878)
        self_265151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 15), 'self', False)
        # Obtaining the member '_print_image' of a type (line 878)
        _print_image_265152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 15), self_265151, '_print_image')
        # Calling _print_image(args, kwargs) (line 878)
        _print_image_call_result_265159 = invoke(stypy.reporting.localization.Localization(__file__, 878, 15), _print_image_265152, *[filename_265153, BITMAP_TYPE_XPM_265155, args_265156], **kwargs_265158)
        
        # Assigning a type to the variable 'stypy_return_type' (line 878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 878, 8), 'stypy_return_type', _print_image_call_result_265159)
        
        # ################# End of 'print_xpm(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'print_xpm' in the type store
        # Getting the type of 'stypy_return_type' (line 877)
        stypy_return_type_265160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265160)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'print_xpm'
        return stypy_return_type_265160


    @norecursion
    def _print_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_print_image'
        module_type_store = module_type_store.open_function_context('_print_image', 880, 4, False)
        # Assigning a type to the variable 'self' (line 881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 881, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._print_image.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._print_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._print_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._print_image.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._print_image')
        FigureCanvasWx._print_image.__dict__.__setitem__('stypy_param_names_list', ['filename', 'filetype'])
        FigureCanvasWx._print_image.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasWx._print_image.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasWx._print_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._print_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._print_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._print_image.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._print_image', ['filename', 'filetype'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_print_image', localization, ['filename', 'filetype'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_print_image(...)' code ##################

        
        # Assigning a Attribute to a Name (line 881):
        
        # Assigning a Attribute to a Name (line 881):
        # Getting the type of 'self' (line 881)
        self_265161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 21), 'self')
        # Obtaining the member 'bitmap' of a type (line 881)
        bitmap_265162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 21), self_265161, 'bitmap')
        # Assigning a type to the variable 'origBitmap' (line 881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 881, 8), 'origBitmap', bitmap_265162)
        
        # Assigning a Attribute to a Tuple (line 883):
        
        # Assigning a Subscript to a Name (line 883):
        
        # Obtaining the type of the subscript
        int_265163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 8), 'int')
        # Getting the type of 'self' (line 883)
        self_265164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 30), 'self')
        # Obtaining the member 'figure' of a type (line 883)
        figure_265165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 30), self_265164, 'figure')
        # Obtaining the member 'bbox' of a type (line 883)
        bbox_265166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 30), figure_265165, 'bbox')
        # Obtaining the member 'bounds' of a type (line 883)
        bounds_265167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 30), bbox_265166, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 883)
        getitem___265168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 8), bounds_265167, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 883)
        subscript_call_result_265169 = invoke(stypy.reporting.localization.Localization(__file__, 883, 8), getitem___265168, int_265163)
        
        # Assigning a type to the variable 'tuple_var_assignment_263028' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'tuple_var_assignment_263028', subscript_call_result_265169)
        
        # Assigning a Subscript to a Name (line 883):
        
        # Obtaining the type of the subscript
        int_265170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 8), 'int')
        # Getting the type of 'self' (line 883)
        self_265171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 30), 'self')
        # Obtaining the member 'figure' of a type (line 883)
        figure_265172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 30), self_265171, 'figure')
        # Obtaining the member 'bbox' of a type (line 883)
        bbox_265173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 30), figure_265172, 'bbox')
        # Obtaining the member 'bounds' of a type (line 883)
        bounds_265174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 30), bbox_265173, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 883)
        getitem___265175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 8), bounds_265174, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 883)
        subscript_call_result_265176 = invoke(stypy.reporting.localization.Localization(__file__, 883, 8), getitem___265175, int_265170)
        
        # Assigning a type to the variable 'tuple_var_assignment_263029' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'tuple_var_assignment_263029', subscript_call_result_265176)
        
        # Assigning a Subscript to a Name (line 883):
        
        # Obtaining the type of the subscript
        int_265177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 8), 'int')
        # Getting the type of 'self' (line 883)
        self_265178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 30), 'self')
        # Obtaining the member 'figure' of a type (line 883)
        figure_265179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 30), self_265178, 'figure')
        # Obtaining the member 'bbox' of a type (line 883)
        bbox_265180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 30), figure_265179, 'bbox')
        # Obtaining the member 'bounds' of a type (line 883)
        bounds_265181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 30), bbox_265180, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 883)
        getitem___265182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 8), bounds_265181, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 883)
        subscript_call_result_265183 = invoke(stypy.reporting.localization.Localization(__file__, 883, 8), getitem___265182, int_265177)
        
        # Assigning a type to the variable 'tuple_var_assignment_263030' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'tuple_var_assignment_263030', subscript_call_result_265183)
        
        # Assigning a Subscript to a Name (line 883):
        
        # Obtaining the type of the subscript
        int_265184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 8), 'int')
        # Getting the type of 'self' (line 883)
        self_265185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 30), 'self')
        # Obtaining the member 'figure' of a type (line 883)
        figure_265186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 30), self_265185, 'figure')
        # Obtaining the member 'bbox' of a type (line 883)
        bbox_265187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 30), figure_265186, 'bbox')
        # Obtaining the member 'bounds' of a type (line 883)
        bounds_265188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 30), bbox_265187, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 883)
        getitem___265189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 8), bounds_265188, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 883)
        subscript_call_result_265190 = invoke(stypy.reporting.localization.Localization(__file__, 883, 8), getitem___265189, int_265184)
        
        # Assigning a type to the variable 'tuple_var_assignment_263031' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'tuple_var_assignment_263031', subscript_call_result_265190)
        
        # Assigning a Name to a Name (line 883):
        # Getting the type of 'tuple_var_assignment_263028' (line 883)
        tuple_var_assignment_263028_265191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'tuple_var_assignment_263028')
        # Assigning a type to the variable 'l' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'l', tuple_var_assignment_263028_265191)
        
        # Assigning a Name to a Name (line 883):
        # Getting the type of 'tuple_var_assignment_263029' (line 883)
        tuple_var_assignment_263029_265192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'tuple_var_assignment_263029')
        # Assigning a type to the variable 'b' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 11), 'b', tuple_var_assignment_263029_265192)
        
        # Assigning a Name to a Name (line 883):
        # Getting the type of 'tuple_var_assignment_263030' (line 883)
        tuple_var_assignment_263030_265193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'tuple_var_assignment_263030')
        # Assigning a type to the variable 'width' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 14), 'width', tuple_var_assignment_263030_265193)
        
        # Assigning a Name to a Name (line 883):
        # Getting the type of 'tuple_var_assignment_263031' (line 883)
        tuple_var_assignment_263031_265194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'tuple_var_assignment_263031')
        # Assigning a type to the variable 'height' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 21), 'height', tuple_var_assignment_263031_265194)
        
        # Assigning a Call to a Name (line 884):
        
        # Assigning a Call to a Name (line 884):
        
        # Call to int(...): (line 884)
        # Processing the call arguments (line 884)
        
        # Call to ceil(...): (line 884)
        # Processing the call arguments (line 884)
        # Getting the type of 'width' (line 884)
        width_265198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 30), 'width', False)
        # Processing the call keyword arguments (line 884)
        kwargs_265199 = {}
        # Getting the type of 'math' (line 884)
        math_265196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 20), 'math', False)
        # Obtaining the member 'ceil' of a type (line 884)
        ceil_265197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 20), math_265196, 'ceil')
        # Calling ceil(args, kwargs) (line 884)
        ceil_call_result_265200 = invoke(stypy.reporting.localization.Localization(__file__, 884, 20), ceil_265197, *[width_265198], **kwargs_265199)
        
        # Processing the call keyword arguments (line 884)
        kwargs_265201 = {}
        # Getting the type of 'int' (line 884)
        int_265195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 16), 'int', False)
        # Calling int(args, kwargs) (line 884)
        int_call_result_265202 = invoke(stypy.reporting.localization.Localization(__file__, 884, 16), int_265195, *[ceil_call_result_265200], **kwargs_265201)
        
        # Assigning a type to the variable 'width' (line 884)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 8), 'width', int_call_result_265202)
        
        # Assigning a Call to a Name (line 885):
        
        # Assigning a Call to a Name (line 885):
        
        # Call to int(...): (line 885)
        # Processing the call arguments (line 885)
        
        # Call to ceil(...): (line 885)
        # Processing the call arguments (line 885)
        # Getting the type of 'height' (line 885)
        height_265206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 31), 'height', False)
        # Processing the call keyword arguments (line 885)
        kwargs_265207 = {}
        # Getting the type of 'math' (line 885)
        math_265204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 21), 'math', False)
        # Obtaining the member 'ceil' of a type (line 885)
        ceil_265205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 21), math_265204, 'ceil')
        # Calling ceil(args, kwargs) (line 885)
        ceil_call_result_265208 = invoke(stypy.reporting.localization.Localization(__file__, 885, 21), ceil_265205, *[height_265206], **kwargs_265207)
        
        # Processing the call keyword arguments (line 885)
        kwargs_265209 = {}
        # Getting the type of 'int' (line 885)
        int_265203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 17), 'int', False)
        # Calling int(args, kwargs) (line 885)
        int_call_result_265210 = invoke(stypy.reporting.localization.Localization(__file__, 885, 17), int_265203, *[ceil_call_result_265208], **kwargs_265209)
        
        # Assigning a type to the variable 'height' (line 885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 8), 'height', int_call_result_265210)
        
        # Assigning a Call to a Attribute (line 887):
        
        # Assigning a Call to a Attribute (line 887):
        
        # Call to EmptyBitmap(...): (line 887)
        # Processing the call arguments (line 887)
        # Getting the type of 'width' (line 887)
        width_265213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 38), 'width', False)
        # Getting the type of 'height' (line 887)
        height_265214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 45), 'height', False)
        # Processing the call keyword arguments (line 887)
        kwargs_265215 = {}
        # Getting the type of 'wxc' (line 887)
        wxc_265211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 22), 'wxc', False)
        # Obtaining the member 'EmptyBitmap' of a type (line 887)
        EmptyBitmap_265212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 22), wxc_265211, 'EmptyBitmap')
        # Calling EmptyBitmap(args, kwargs) (line 887)
        EmptyBitmap_call_result_265216 = invoke(stypy.reporting.localization.Localization(__file__, 887, 22), EmptyBitmap_265212, *[width_265213, height_265214], **kwargs_265215)
        
        # Getting the type of 'self' (line 887)
        self_265217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 8), 'self')
        # Setting the type of the member 'bitmap' of a type (line 887)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 8), self_265217, 'bitmap', EmptyBitmap_call_result_265216)
        
        # Assigning a Call to a Name (line 889):
        
        # Assigning a Call to a Name (line 889):
        
        # Call to RendererWx(...): (line 889)
        # Processing the call arguments (line 889)
        # Getting the type of 'self' (line 889)
        self_265219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 30), 'self', False)
        # Obtaining the member 'bitmap' of a type (line 889)
        bitmap_265220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 889, 30), self_265219, 'bitmap')
        # Getting the type of 'self' (line 889)
        self_265221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 43), 'self', False)
        # Obtaining the member 'figure' of a type (line 889)
        figure_265222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 889, 43), self_265221, 'figure')
        # Obtaining the member 'dpi' of a type (line 889)
        dpi_265223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 889, 43), figure_265222, 'dpi')
        # Processing the call keyword arguments (line 889)
        kwargs_265224 = {}
        # Getting the type of 'RendererWx' (line 889)
        RendererWx_265218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 19), 'RendererWx', False)
        # Calling RendererWx(args, kwargs) (line 889)
        RendererWx_call_result_265225 = invoke(stypy.reporting.localization.Localization(__file__, 889, 19), RendererWx_265218, *[bitmap_265220, dpi_265223], **kwargs_265224)
        
        # Assigning a type to the variable 'renderer' (line 889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 889, 8), 'renderer', RendererWx_call_result_265225)
        
        # Assigning a Call to a Name (line 891):
        
        # Assigning a Call to a Name (line 891):
        
        # Call to new_gc(...): (line 891)
        # Processing the call keyword arguments (line 891)
        kwargs_265228 = {}
        # Getting the type of 'renderer' (line 891)
        renderer_265226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 13), 'renderer', False)
        # Obtaining the member 'new_gc' of a type (line 891)
        new_gc_265227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 13), renderer_265226, 'new_gc')
        # Calling new_gc(args, kwargs) (line 891)
        new_gc_call_result_265229 = invoke(stypy.reporting.localization.Localization(__file__, 891, 13), new_gc_265227, *[], **kwargs_265228)
        
        # Assigning a type to the variable 'gc' (line 891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 8), 'gc', new_gc_call_result_265229)
        
        # Call to draw(...): (line 893)
        # Processing the call arguments (line 893)
        # Getting the type of 'renderer' (line 893)
        renderer_265233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 25), 'renderer', False)
        # Processing the call keyword arguments (line 893)
        kwargs_265234 = {}
        # Getting the type of 'self' (line 893)
        self_265230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 8), 'self', False)
        # Obtaining the member 'figure' of a type (line 893)
        figure_265231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 8), self_265230, 'figure')
        # Obtaining the member 'draw' of a type (line 893)
        draw_265232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 8), figure_265231, 'draw')
        # Calling draw(args, kwargs) (line 893)
        draw_call_result_265235 = invoke(stypy.reporting.localization.Localization(__file__, 893, 8), draw_265232, *[renderer_265233], **kwargs_265234)
        
        
        # Assigning a Attribute to a Name (line 896):
        
        # Assigning a Attribute to a Name (line 896):
        # Getting the type of 'self' (line 896)
        self_265236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 16), 'self')
        # Obtaining the member 'bitmap' of a type (line 896)
        bitmap_265237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 16), self_265236, 'bitmap')
        # Assigning a type to the variable 'image' (line 896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'image', bitmap_265237)
        
        
        # Getting the type of 'filetype' (line 901)
        filetype_265238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 11), 'filetype')
        # Getting the type of 'wx' (line 901)
        wx_265239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 23), 'wx')
        # Obtaining the member 'BITMAP_TYPE_JPEG' of a type (line 901)
        BITMAP_TYPE_JPEG_265240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 901, 23), wx_265239, 'BITMAP_TYPE_JPEG')
        # Applying the binary operator '==' (line 901)
        result_eq_265241 = python_operator(stypy.reporting.localization.Localization(__file__, 901, 11), '==', filetype_265238, BITMAP_TYPE_JPEG_265240)
        
        # Testing the type of an if condition (line 901)
        if_condition_265242 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 901, 8), result_eq_265241)
        # Assigning a type to the variable 'if_condition_265242' (line 901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 901, 8), 'if_condition_265242', if_condition_265242)
        # SSA begins for if statement (line 901)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 902):
        
        # Assigning a Call to a Name (line 902):
        
        # Call to get(...): (line 902)
        # Processing the call arguments (line 902)
        unicode_265245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 902, 38), 'unicode', u'quality')
        
        # Obtaining the type of the subscript
        unicode_265246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, 47), 'unicode', u'savefig.jpeg_quality')
        # Getting the type of 'rcParams' (line 903)
        rcParams_265247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 38), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 903)
        getitem___265248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 38), rcParams_265247, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 903)
        subscript_call_result_265249 = invoke(stypy.reporting.localization.Localization(__file__, 903, 38), getitem___265248, unicode_265246)
        
        # Processing the call keyword arguments (line 902)
        kwargs_265250 = {}
        # Getting the type of 'kwargs' (line 902)
        kwargs_265243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 27), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 902)
        get_265244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 27), kwargs_265243, 'get')
        # Calling get(args, kwargs) (line 902)
        get_call_result_265251 = invoke(stypy.reporting.localization.Localization(__file__, 902, 27), get_265244, *[unicode_265245, subscript_call_result_265249], **kwargs_265250)
        
        # Assigning a type to the variable 'jpeg_quality' (line 902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 12), 'jpeg_quality', get_call_result_265251)
        
        # Assigning a Call to a Name (line 904):
        
        # Assigning a Call to a Name (line 904):
        
        # Call to ConvertToImage(...): (line 904)
        # Processing the call keyword arguments (line 904)
        kwargs_265255 = {}
        # Getting the type of 'self' (line 904)
        self_265252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 20), 'self', False)
        # Obtaining the member 'bitmap' of a type (line 904)
        bitmap_265253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 904, 20), self_265252, 'bitmap')
        # Obtaining the member 'ConvertToImage' of a type (line 904)
        ConvertToImage_265254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 904, 20), bitmap_265253, 'ConvertToImage')
        # Calling ConvertToImage(args, kwargs) (line 904)
        ConvertToImage_call_result_265256 = invoke(stypy.reporting.localization.Localization(__file__, 904, 20), ConvertToImage_265254, *[], **kwargs_265255)
        
        # Assigning a type to the variable 'image' (line 904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 12), 'image', ConvertToImage_call_result_265256)
        
        # Call to SetOption(...): (line 905)
        # Processing the call arguments (line 905)
        # Getting the type of 'wx' (line 905)
        wx_265259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 28), 'wx', False)
        # Obtaining the member 'IMAGE_OPTION_QUALITY' of a type (line 905)
        IMAGE_OPTION_QUALITY_265260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 28), wx_265259, 'IMAGE_OPTION_QUALITY')
        
        # Call to str(...): (line 905)
        # Processing the call arguments (line 905)
        # Getting the type of 'jpeg_quality' (line 905)
        jpeg_quality_265262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 57), 'jpeg_quality', False)
        # Processing the call keyword arguments (line 905)
        kwargs_265263 = {}
        # Getting the type of 'str' (line 905)
        str_265261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 53), 'str', False)
        # Calling str(args, kwargs) (line 905)
        str_call_result_265264 = invoke(stypy.reporting.localization.Localization(__file__, 905, 53), str_265261, *[jpeg_quality_265262], **kwargs_265263)
        
        # Processing the call keyword arguments (line 905)
        kwargs_265265 = {}
        # Getting the type of 'image' (line 905)
        image_265257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 12), 'image', False)
        # Obtaining the member 'SetOption' of a type (line 905)
        SetOption_265258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 12), image_265257, 'SetOption')
        # Calling SetOption(args, kwargs) (line 905)
        SetOption_call_result_265266 = invoke(stypy.reporting.localization.Localization(__file__, 905, 12), SetOption_265258, *[IMAGE_OPTION_QUALITY_265260, str_call_result_265264], **kwargs_265265)
        
        # SSA join for if statement (line 901)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isinstance(...): (line 909)
        # Processing the call arguments (line 909)
        # Getting the type of 'filename' (line 909)
        filename_265268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 22), 'filename', False)
        # Getting the type of 'six' (line 909)
        six_265269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 32), 'six', False)
        # Obtaining the member 'string_types' of a type (line 909)
        string_types_265270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 909, 32), six_265269, 'string_types')
        # Processing the call keyword arguments (line 909)
        kwargs_265271 = {}
        # Getting the type of 'isinstance' (line 909)
        isinstance_265267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 909)
        isinstance_call_result_265272 = invoke(stypy.reporting.localization.Localization(__file__, 909, 11), isinstance_265267, *[filename_265268, string_types_265270], **kwargs_265271)
        
        # Testing the type of an if condition (line 909)
        if_condition_265273 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 909, 8), isinstance_call_result_265272)
        # Assigning a type to the variable 'if_condition_265273' (line 909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 8), 'if_condition_265273', if_condition_265273)
        # SSA begins for if statement (line 909)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to SaveFile(...): (line 910)
        # Processing the call arguments (line 910)
        # Getting the type of 'filename' (line 910)
        filename_265276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 34), 'filename', False)
        # Getting the type of 'filetype' (line 910)
        filetype_265277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 44), 'filetype', False)
        # Processing the call keyword arguments (line 910)
        kwargs_265278 = {}
        # Getting the type of 'image' (line 910)
        image_265274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 19), 'image', False)
        # Obtaining the member 'SaveFile' of a type (line 910)
        SaveFile_265275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 19), image_265274, 'SaveFile')
        # Calling SaveFile(args, kwargs) (line 910)
        SaveFile_call_result_265279 = invoke(stypy.reporting.localization.Localization(__file__, 910, 19), SaveFile_265275, *[filename_265276, filetype_265277], **kwargs_265278)
        
        # Applying the 'not' unary operator (line 910)
        result_not__265280 = python_operator(stypy.reporting.localization.Localization(__file__, 910, 15), 'not', SaveFile_call_result_265279)
        
        # Testing the type of an if condition (line 910)
        if_condition_265281 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 910, 12), result_not__265280)
        # Assigning a type to the variable 'if_condition_265281' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 12), 'if_condition_265281', if_condition_265281)
        # SSA begins for if statement (line 910)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to DEBUG_MSG(...): (line 911)
        # Processing the call arguments (line 911)
        unicode_265283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 26), 'unicode', u'print_figure() file save error')
        int_265284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 60), 'int')
        # Getting the type of 'self' (line 911)
        self_265285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 63), 'self', False)
        # Processing the call keyword arguments (line 911)
        kwargs_265286 = {}
        # Getting the type of 'DEBUG_MSG' (line 911)
        DEBUG_MSG_265282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 16), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 911)
        DEBUG_MSG_call_result_265287 = invoke(stypy.reporting.localization.Localization(__file__, 911, 16), DEBUG_MSG_265282, *[unicode_265283, int_265284, self_265285], **kwargs_265286)
        
        
        # Call to RuntimeError(...): (line 912)
        # Processing the call arguments (line 912)
        unicode_265289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 20), 'unicode', u'Could not save figure to %s\n')
        # Getting the type of 'filename' (line 914)
        filename_265290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 21), 'filename', False)
        # Applying the binary operator '%' (line 913)
        result_mod_265291 = python_operator(stypy.reporting.localization.Localization(__file__, 913, 20), '%', unicode_265289, filename_265290)
        
        # Processing the call keyword arguments (line 912)
        kwargs_265292 = {}
        # Getting the type of 'RuntimeError' (line 912)
        RuntimeError_265288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 22), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 912)
        RuntimeError_call_result_265293 = invoke(stypy.reporting.localization.Localization(__file__, 912, 22), RuntimeError_265288, *[result_mod_265291], **kwargs_265292)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 912, 16), RuntimeError_call_result_265293, 'raise parameter', BaseException)
        # SSA join for if statement (line 910)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 909)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to is_writable_file_like(...): (line 915)
        # Processing the call arguments (line 915)
        # Getting the type of 'filename' (line 915)
        filename_265295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 35), 'filename', False)
        # Processing the call keyword arguments (line 915)
        kwargs_265296 = {}
        # Getting the type of 'is_writable_file_like' (line 915)
        is_writable_file_like_265294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 13), 'is_writable_file_like', False)
        # Calling is_writable_file_like(args, kwargs) (line 915)
        is_writable_file_like_call_result_265297 = invoke(stypy.reporting.localization.Localization(__file__, 915, 13), is_writable_file_like_265294, *[filename_265295], **kwargs_265296)
        
        # Testing the type of an if condition (line 915)
        if_condition_265298 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 915, 13), is_writable_file_like_call_result_265297)
        # Assigning a type to the variable 'if_condition_265298' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 13), 'if_condition_265298', if_condition_265298)
        # SSA begins for if statement (line 915)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to isinstance(...): (line 916)
        # Processing the call arguments (line 916)
        # Getting the type of 'image' (line 916)
        image_265300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 30), 'image', False)
        # Getting the type of 'wx' (line 916)
        wx_265301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 37), 'wx', False)
        # Obtaining the member 'Image' of a type (line 916)
        Image_265302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 37), wx_265301, 'Image')
        # Processing the call keyword arguments (line 916)
        kwargs_265303 = {}
        # Getting the type of 'isinstance' (line 916)
        isinstance_265299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 19), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 916)
        isinstance_call_result_265304 = invoke(stypy.reporting.localization.Localization(__file__, 916, 19), isinstance_265299, *[image_265300, Image_265302], **kwargs_265303)
        
        # Applying the 'not' unary operator (line 916)
        result_not__265305 = python_operator(stypy.reporting.localization.Localization(__file__, 916, 15), 'not', isinstance_call_result_265304)
        
        # Testing the type of an if condition (line 916)
        if_condition_265306 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 916, 12), result_not__265305)
        # Assigning a type to the variable 'if_condition_265306' (line 916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 916, 12), 'if_condition_265306', if_condition_265306)
        # SSA begins for if statement (line 916)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 917):
        
        # Assigning a Call to a Name (line 917):
        
        # Call to ConvertToImage(...): (line 917)
        # Processing the call keyword arguments (line 917)
        kwargs_265309 = {}
        # Getting the type of 'image' (line 917)
        image_265307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 24), 'image', False)
        # Obtaining the member 'ConvertToImage' of a type (line 917)
        ConvertToImage_265308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 24), image_265307, 'ConvertToImage')
        # Calling ConvertToImage(args, kwargs) (line 917)
        ConvertToImage_call_result_265310 = invoke(stypy.reporting.localization.Localization(__file__, 917, 24), ConvertToImage_265308, *[], **kwargs_265309)
        
        # Assigning a type to the variable 'image' (line 917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 16), 'image', ConvertToImage_call_result_265310)
        # SSA join for if statement (line 916)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to SaveStream(...): (line 918)
        # Processing the call arguments (line 918)
        # Getting the type of 'filename' (line 918)
        filename_265313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 36), 'filename', False)
        # Getting the type of 'filetype' (line 918)
        filetype_265314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 46), 'filetype', False)
        # Processing the call keyword arguments (line 918)
        kwargs_265315 = {}
        # Getting the type of 'image' (line 918)
        image_265311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 19), 'image', False)
        # Obtaining the member 'SaveStream' of a type (line 918)
        SaveStream_265312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 19), image_265311, 'SaveStream')
        # Calling SaveStream(args, kwargs) (line 918)
        SaveStream_call_result_265316 = invoke(stypy.reporting.localization.Localization(__file__, 918, 19), SaveStream_265312, *[filename_265313, filetype_265314], **kwargs_265315)
        
        # Applying the 'not' unary operator (line 918)
        result_not__265317 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 15), 'not', SaveStream_call_result_265316)
        
        # Testing the type of an if condition (line 918)
        if_condition_265318 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 918, 12), result_not__265317)
        # Assigning a type to the variable 'if_condition_265318' (line 918)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 12), 'if_condition_265318', if_condition_265318)
        # SSA begins for if statement (line 918)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to DEBUG_MSG(...): (line 919)
        # Processing the call arguments (line 919)
        unicode_265320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 919, 26), 'unicode', u'print_figure() file save error')
        int_265321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 919, 60), 'int')
        # Getting the type of 'self' (line 919)
        self_265322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 63), 'self', False)
        # Processing the call keyword arguments (line 919)
        kwargs_265323 = {}
        # Getting the type of 'DEBUG_MSG' (line 919)
        DEBUG_MSG_265319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 16), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 919)
        DEBUG_MSG_call_result_265324 = invoke(stypy.reporting.localization.Localization(__file__, 919, 16), DEBUG_MSG_265319, *[unicode_265320, int_265321, self_265322], **kwargs_265323)
        
        
        # Call to RuntimeError(...): (line 920)
        # Processing the call arguments (line 920)
        unicode_265326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, 20), 'unicode', u'Could not save figure to %s\n')
        # Getting the type of 'filename' (line 922)
        filename_265327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 21), 'filename', False)
        # Applying the binary operator '%' (line 921)
        result_mod_265328 = python_operator(stypy.reporting.localization.Localization(__file__, 921, 20), '%', unicode_265326, filename_265327)
        
        # Processing the call keyword arguments (line 920)
        kwargs_265329 = {}
        # Getting the type of 'RuntimeError' (line 920)
        RuntimeError_265325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 22), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 920)
        RuntimeError_call_result_265330 = invoke(stypy.reporting.localization.Localization(__file__, 920, 22), RuntimeError_265325, *[result_mod_265328], **kwargs_265329)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 920, 16), RuntimeError_call_result_265330, 'raise parameter', BaseException)
        # SSA join for if statement (line 918)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 915)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 909)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 925):
        
        # Assigning a Name to a Attribute (line 925):
        # Getting the type of 'origBitmap' (line 925)
        origBitmap_265331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 22), 'origBitmap')
        # Getting the type of 'self' (line 925)
        self_265332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 8), 'self')
        # Setting the type of the member 'bitmap' of a type (line 925)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 8), self_265332, 'bitmap', origBitmap_265331)
        
        # Getting the type of 'self' (line 932)
        self_265333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 11), 'self')
        # Obtaining the member '_isDrawn' of a type (line 932)
        _isDrawn_265334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 11), self_265333, '_isDrawn')
        # Testing the type of an if condition (line 932)
        if_condition_265335 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 932, 8), _isDrawn_265334)
        # Assigning a type to the variable 'if_condition_265335' (line 932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 932, 8), 'if_condition_265335', if_condition_265335)
        # SSA begins for if statement (line 932)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 933)
        # Processing the call keyword arguments (line 933)
        kwargs_265338 = {}
        # Getting the type of 'self' (line 933)
        self_265336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 12), 'self', False)
        # Obtaining the member 'draw' of a type (line 933)
        draw_265337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 12), self_265336, 'draw')
        # Calling draw(args, kwargs) (line 933)
        draw_call_result_265339 = invoke(stypy.reporting.localization.Localization(__file__, 933, 12), draw_265337, *[], **kwargs_265338)
        
        # SSA join for if statement (line 932)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to Refresh(...): (line 934)
        # Processing the call keyword arguments (line 934)
        kwargs_265342 = {}
        # Getting the type of 'self' (line 934)
        self_265340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'self', False)
        # Obtaining the member 'Refresh' of a type (line 934)
        Refresh_265341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 8), self_265340, 'Refresh')
        # Calling Refresh(args, kwargs) (line 934)
        Refresh_call_result_265343 = invoke(stypy.reporting.localization.Localization(__file__, 934, 8), Refresh_265341, *[], **kwargs_265342)
        
        
        # ################# End of '_print_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_print_image' in the type store
        # Getting the type of 'stypy_return_type' (line 880)
        stypy_return_type_265344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265344)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_print_image'
        return stypy_return_type_265344


    @norecursion
    def _onPaint(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onPaint'
        module_type_store = module_type_store.open_function_context('_onPaint', 936, 4, False)
        # Assigning a type to the variable 'self' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onPaint.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onPaint.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onPaint.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onPaint.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onPaint')
        FigureCanvasWx._onPaint.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onPaint.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onPaint.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onPaint.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onPaint.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onPaint.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onPaint.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onPaint', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onPaint', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onPaint(...)' code ##################

        unicode_265345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, (-1)), 'unicode', u'\n        Called when wxPaintEvt is generated\n        ')
        
        # Call to DEBUG_MSG(...): (line 941)
        # Processing the call arguments (line 941)
        unicode_265347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 18), 'unicode', u'_onPaint()')
        int_265348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 32), 'int')
        # Getting the type of 'self' (line 941)
        self_265349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 35), 'self', False)
        # Processing the call keyword arguments (line 941)
        kwargs_265350 = {}
        # Getting the type of 'DEBUG_MSG' (line 941)
        DEBUG_MSG_265346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 941)
        DEBUG_MSG_call_result_265351 = invoke(stypy.reporting.localization.Localization(__file__, 941, 8), DEBUG_MSG_265346, *[unicode_265347, int_265348, self_265349], **kwargs_265350)
        
        
        # Assigning a Call to a Name (line 942):
        
        # Assigning a Call to a Name (line 942):
        
        # Call to PaintDC(...): (line 942)
        # Processing the call arguments (line 942)
        # Getting the type of 'self' (line 942)
        self_265354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 28), 'self', False)
        # Processing the call keyword arguments (line 942)
        kwargs_265355 = {}
        # Getting the type of 'wx' (line 942)
        wx_265352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 17), 'wx', False)
        # Obtaining the member 'PaintDC' of a type (line 942)
        PaintDC_265353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 17), wx_265352, 'PaintDC')
        # Calling PaintDC(args, kwargs) (line 942)
        PaintDC_call_result_265356 = invoke(stypy.reporting.localization.Localization(__file__, 942, 17), PaintDC_265353, *[self_265354], **kwargs_265355)
        
        # Assigning a type to the variable 'drawDC' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'drawDC', PaintDC_call_result_265356)
        
        
        # Getting the type of 'self' (line 943)
        self_265357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 15), 'self')
        # Obtaining the member '_isDrawn' of a type (line 943)
        _isDrawn_265358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 15), self_265357, '_isDrawn')
        # Applying the 'not' unary operator (line 943)
        result_not__265359 = python_operator(stypy.reporting.localization.Localization(__file__, 943, 11), 'not', _isDrawn_265358)
        
        # Testing the type of an if condition (line 943)
        if_condition_265360 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 943, 8), result_not__265359)
        # Assigning a type to the variable 'if_condition_265360' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 8), 'if_condition_265360', if_condition_265360)
        # SSA begins for if statement (line 943)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 944)
        # Processing the call keyword arguments (line 944)
        # Getting the type of 'drawDC' (line 944)
        drawDC_265363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 29), 'drawDC', False)
        keyword_265364 = drawDC_265363
        kwargs_265365 = {'drawDC': keyword_265364}
        # Getting the type of 'self' (line 944)
        self_265361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 12), 'self', False)
        # Obtaining the member 'draw' of a type (line 944)
        draw_265362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 12), self_265361, 'draw')
        # Calling draw(args, kwargs) (line 944)
        draw_call_result_265366 = invoke(stypy.reporting.localization.Localization(__file__, 944, 12), draw_265362, *[], **kwargs_265365)
        
        # SSA branch for the else part of an if statement (line 943)
        module_type_store.open_ssa_branch('else')
        
        # Call to gui_repaint(...): (line 946)
        # Processing the call keyword arguments (line 946)
        # Getting the type of 'drawDC' (line 946)
        drawDC_265369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 36), 'drawDC', False)
        keyword_265370 = drawDC_265369
        kwargs_265371 = {'drawDC': keyword_265370}
        # Getting the type of 'self' (line 946)
        self_265367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 12), 'self', False)
        # Obtaining the member 'gui_repaint' of a type (line 946)
        gui_repaint_265368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 946, 12), self_265367, 'gui_repaint')
        # Calling gui_repaint(args, kwargs) (line 946)
        gui_repaint_call_result_265372 = invoke(stypy.reporting.localization.Localization(__file__, 946, 12), gui_repaint_265368, *[], **kwargs_265371)
        
        # SSA join for if statement (line 943)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to Skip(...): (line 947)
        # Processing the call keyword arguments (line 947)
        kwargs_265375 = {}
        # Getting the type of 'evt' (line 947)
        evt_265373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 947)
        Skip_265374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 8), evt_265373, 'Skip')
        # Calling Skip(args, kwargs) (line 947)
        Skip_call_result_265376 = invoke(stypy.reporting.localization.Localization(__file__, 947, 8), Skip_265374, *[], **kwargs_265375)
        
        
        # ################# End of '_onPaint(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onPaint' in the type store
        # Getting the type of 'stypy_return_type' (line 936)
        stypy_return_type_265377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265377)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onPaint'
        return stypy_return_type_265377


    @norecursion
    def _onEraseBackground(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onEraseBackground'
        module_type_store = module_type_store.open_function_context('_onEraseBackground', 949, 4, False)
        # Assigning a type to the variable 'self' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onEraseBackground.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onEraseBackground.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onEraseBackground.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onEraseBackground.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onEraseBackground')
        FigureCanvasWx._onEraseBackground.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onEraseBackground.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onEraseBackground.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onEraseBackground.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onEraseBackground.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onEraseBackground.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onEraseBackground.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onEraseBackground', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onEraseBackground', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onEraseBackground(...)' code ##################

        unicode_265378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 953, (-1)), 'unicode', u'\n        Called when window is redrawn; since we are blitting the entire\n        image, we can leave this blank to suppress flicker.\n        ')
        pass
        
        # ################# End of '_onEraseBackground(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onEraseBackground' in the type store
        # Getting the type of 'stypy_return_type' (line 949)
        stypy_return_type_265379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265379)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onEraseBackground'
        return stypy_return_type_265379


    @norecursion
    def _onSize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onSize'
        module_type_store = module_type_store.open_function_context('_onSize', 956, 4, False)
        # Assigning a type to the variable 'self' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onSize.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onSize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onSize.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onSize.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onSize')
        FigureCanvasWx._onSize.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onSize.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onSize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onSize.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onSize.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onSize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onSize.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onSize', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onSize', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onSize(...)' code ##################

        unicode_265380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, (-1)), 'unicode', u'\n        Called when wxEventSize is generated.\n\n        In this application we attempt to resize to fit the window, so it\n        is better to take the performance hit and redraw the whole window.\n        ')
        
        # Call to DEBUG_MSG(...): (line 964)
        # Processing the call arguments (line 964)
        unicode_265382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 18), 'unicode', u'_onSize()')
        int_265383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 31), 'int')
        # Getting the type of 'self' (line 964)
        self_265384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 34), 'self', False)
        # Processing the call keyword arguments (line 964)
        kwargs_265385 = {}
        # Getting the type of 'DEBUG_MSG' (line 964)
        DEBUG_MSG_265381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 964)
        DEBUG_MSG_call_result_265386 = invoke(stypy.reporting.localization.Localization(__file__, 964, 8), DEBUG_MSG_265381, *[unicode_265382, int_265383, self_265384], **kwargs_265385)
        
        
        # Assigning a Call to a Tuple (line 966):
        
        # Assigning a Call to a Name:
        
        # Call to GetClientSize(...): (line 966)
        # Processing the call keyword arguments (line 966)
        kwargs_265389 = {}
        # Getting the type of 'self' (line 966)
        self_265387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 36), 'self', False)
        # Obtaining the member 'GetClientSize' of a type (line 966)
        GetClientSize_265388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 36), self_265387, 'GetClientSize')
        # Calling GetClientSize(args, kwargs) (line 966)
        GetClientSize_call_result_265390 = invoke(stypy.reporting.localization.Localization(__file__, 966, 36), GetClientSize_265388, *[], **kwargs_265389)
        
        # Assigning a type to the variable 'call_assignment_263032' (line 966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'call_assignment_263032', GetClientSize_call_result_265390)
        
        # Assigning a Call to a Name (line 966):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_265393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, 8), 'int')
        # Processing the call keyword arguments
        kwargs_265394 = {}
        # Getting the type of 'call_assignment_263032' (line 966)
        call_assignment_263032_265391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'call_assignment_263032', False)
        # Obtaining the member '__getitem__' of a type (line 966)
        getitem___265392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 8), call_assignment_263032_265391, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_265395 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___265392, *[int_265393], **kwargs_265394)
        
        # Assigning a type to the variable 'call_assignment_263033' (line 966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'call_assignment_263033', getitem___call_result_265395)
        
        # Assigning a Name to a Attribute (line 966):
        # Getting the type of 'call_assignment_263033' (line 966)
        call_assignment_263033_265396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'call_assignment_263033')
        # Getting the type of 'self' (line 966)
        self_265397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'self')
        # Setting the type of the member '_width' of a type (line 966)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 8), self_265397, '_width', call_assignment_263033_265396)
        
        # Assigning a Call to a Name (line 966):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_265400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, 8), 'int')
        # Processing the call keyword arguments
        kwargs_265401 = {}
        # Getting the type of 'call_assignment_263032' (line 966)
        call_assignment_263032_265398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'call_assignment_263032', False)
        # Obtaining the member '__getitem__' of a type (line 966)
        getitem___265399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 8), call_assignment_263032_265398, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_265402 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___265399, *[int_265400], **kwargs_265401)
        
        # Assigning a type to the variable 'call_assignment_263034' (line 966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'call_assignment_263034', getitem___call_result_265402)
        
        # Assigning a Name to a Attribute (line 966):
        # Getting the type of 'call_assignment_263034' (line 966)
        call_assignment_263034_265403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'call_assignment_263034')
        # Getting the type of 'self' (line 966)
        self_265404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 21), 'self')
        # Setting the type of the member '_height' of a type (line 966)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 21), self_265404, '_height', call_assignment_263034_265403)
        
        # Assigning a Call to a Attribute (line 967):
        
        # Assigning a Call to a Attribute (line 967):
        
        # Call to EmptyBitmap(...): (line 967)
        # Processing the call arguments (line 967)
        # Getting the type of 'self' (line 967)
        self_265407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 38), 'self', False)
        # Obtaining the member '_width' of a type (line 967)
        _width_265408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 38), self_265407, '_width')
        # Getting the type of 'self' (line 967)
        self_265409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 51), 'self', False)
        # Obtaining the member '_height' of a type (line 967)
        _height_265410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 51), self_265409, '_height')
        # Processing the call keyword arguments (line 967)
        kwargs_265411 = {}
        # Getting the type of 'wxc' (line 967)
        wxc_265405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 22), 'wxc', False)
        # Obtaining the member 'EmptyBitmap' of a type (line 967)
        EmptyBitmap_265406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 22), wxc_265405, 'EmptyBitmap')
        # Calling EmptyBitmap(args, kwargs) (line 967)
        EmptyBitmap_call_result_265412 = invoke(stypy.reporting.localization.Localization(__file__, 967, 22), EmptyBitmap_265406, *[_width_265408, _height_265410], **kwargs_265411)
        
        # Getting the type of 'self' (line 967)
        self_265413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 8), 'self')
        # Setting the type of the member 'bitmap' of a type (line 967)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 8), self_265413, 'bitmap', EmptyBitmap_call_result_265412)
        
        # Assigning a Name to a Attribute (line 969):
        
        # Assigning a Name to a Attribute (line 969):
        # Getting the type of 'False' (line 969)
        False_265414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 24), 'False')
        # Getting the type of 'self' (line 969)
        self_265415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 8), 'self')
        # Setting the type of the member '_isDrawn' of a type (line 969)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 969, 8), self_265415, '_isDrawn', False_265414)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 971)
        self_265416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 11), 'self')
        # Obtaining the member '_width' of a type (line 971)
        _width_265417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 11), self_265416, '_width')
        int_265418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, 26), 'int')
        # Applying the binary operator '<=' (line 971)
        result_le_265419 = python_operator(stypy.reporting.localization.Localization(__file__, 971, 11), '<=', _width_265417, int_265418)
        
        
        # Getting the type of 'self' (line 971)
        self_265420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 31), 'self')
        # Obtaining the member '_height' of a type (line 971)
        _height_265421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 31), self_265420, '_height')
        int_265422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, 47), 'int')
        # Applying the binary operator '<=' (line 971)
        result_le_265423 = python_operator(stypy.reporting.localization.Localization(__file__, 971, 31), '<=', _height_265421, int_265422)
        
        # Applying the binary operator 'or' (line 971)
        result_or_keyword_265424 = python_operator(stypy.reporting.localization.Localization(__file__, 971, 11), 'or', result_le_265419, result_le_265423)
        
        # Testing the type of an if condition (line 971)
        if_condition_265425 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 971, 8), result_or_keyword_265424)
        # Assigning a type to the variable 'if_condition_265425' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'if_condition_265425', if_condition_265425)
        # SSA begins for if statement (line 971)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 971)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 974):
        
        # Assigning a Attribute to a Name (line 974):
        # Getting the type of 'self' (line 974)
        self_265426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 17), 'self')
        # Obtaining the member 'figure' of a type (line 974)
        figure_265427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 17), self_265426, 'figure')
        # Obtaining the member 'dpi' of a type (line 974)
        dpi_265428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 17), figure_265427, 'dpi')
        # Assigning a type to the variable 'dpival' (line 974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 8), 'dpival', dpi_265428)
        
        # Assigning a BinOp to a Name (line 975):
        
        # Assigning a BinOp to a Name (line 975):
        # Getting the type of 'self' (line 975)
        self_265429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 16), 'self')
        # Obtaining the member '_width' of a type (line 975)
        _width_265430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 16), self_265429, '_width')
        # Getting the type of 'dpival' (line 975)
        dpival_265431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 30), 'dpival')
        # Applying the binary operator 'div' (line 975)
        result_div_265432 = python_operator(stypy.reporting.localization.Localization(__file__, 975, 16), 'div', _width_265430, dpival_265431)
        
        # Assigning a type to the variable 'winch' (line 975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 8), 'winch', result_div_265432)
        
        # Assigning a BinOp to a Name (line 976):
        
        # Assigning a BinOp to a Name (line 976):
        # Getting the type of 'self' (line 976)
        self_265433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 16), 'self')
        # Obtaining the member '_height' of a type (line 976)
        _height_265434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 16), self_265433, '_height')
        # Getting the type of 'dpival' (line 976)
        dpival_265435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 31), 'dpival')
        # Applying the binary operator 'div' (line 976)
        result_div_265436 = python_operator(stypy.reporting.localization.Localization(__file__, 976, 16), 'div', _height_265434, dpival_265435)
        
        # Assigning a type to the variable 'hinch' (line 976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 8), 'hinch', result_div_265436)
        
        # Call to set_size_inches(...): (line 977)
        # Processing the call arguments (line 977)
        # Getting the type of 'winch' (line 977)
        winch_265440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 36), 'winch', False)
        # Getting the type of 'hinch' (line 977)
        hinch_265441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 43), 'hinch', False)
        # Processing the call keyword arguments (line 977)
        # Getting the type of 'False' (line 977)
        False_265442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 58), 'False', False)
        keyword_265443 = False_265442
        kwargs_265444 = {'forward': keyword_265443}
        # Getting the type of 'self' (line 977)
        self_265437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 8), 'self', False)
        # Obtaining the member 'figure' of a type (line 977)
        figure_265438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 8), self_265437, 'figure')
        # Obtaining the member 'set_size_inches' of a type (line 977)
        set_size_inches_265439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 8), figure_265438, 'set_size_inches')
        # Calling set_size_inches(args, kwargs) (line 977)
        set_size_inches_call_result_265445 = invoke(stypy.reporting.localization.Localization(__file__, 977, 8), set_size_inches_265439, *[winch_265440, hinch_265441], **kwargs_265444)
        
        
        # Call to Refresh(...): (line 982)
        # Processing the call keyword arguments (line 982)
        # Getting the type of 'False' (line 982)
        False_265448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 37), 'False', False)
        keyword_265449 = False_265448
        kwargs_265450 = {'eraseBackground': keyword_265449}
        # Getting the type of 'self' (line 982)
        self_265446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 8), 'self', False)
        # Obtaining the member 'Refresh' of a type (line 982)
        Refresh_265447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 8), self_265446, 'Refresh')
        # Calling Refresh(args, kwargs) (line 982)
        Refresh_call_result_265451 = invoke(stypy.reporting.localization.Localization(__file__, 982, 8), Refresh_265447, *[], **kwargs_265450)
        
        
        # Call to resize_event(...): (line 983)
        # Processing the call arguments (line 983)
        # Getting the type of 'self' (line 983)
        self_265454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 38), 'self', False)
        # Processing the call keyword arguments (line 983)
        kwargs_265455 = {}
        # Getting the type of 'FigureCanvasBase' (line 983)
        FigureCanvasBase_265452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'resize_event' of a type (line 983)
        resize_event_265453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 983, 8), FigureCanvasBase_265452, 'resize_event')
        # Calling resize_event(args, kwargs) (line 983)
        resize_event_call_result_265456 = invoke(stypy.reporting.localization.Localization(__file__, 983, 8), resize_event_265453, *[self_265454], **kwargs_265455)
        
        
        # ################# End of '_onSize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onSize' in the type store
        # Getting the type of 'stypy_return_type' (line 956)
        stypy_return_type_265457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265457)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onSize'
        return stypy_return_type_265457


    @norecursion
    def _get_key(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_key'
        module_type_store = module_type_store.open_function_context('_get_key', 985, 4, False)
        # Assigning a type to the variable 'self' (line 986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._get_key.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._get_key.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._get_key.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._get_key.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._get_key')
        FigureCanvasWx._get_key.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._get_key.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._get_key.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._get_key.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._get_key.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._get_key.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._get_key.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._get_key', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_key', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_key(...)' code ##################

        
        # Assigning a Attribute to a Name (line 987):
        
        # Assigning a Attribute to a Name (line 987):
        # Getting the type of 'evt' (line 987)
        evt_265458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 17), 'evt')
        # Obtaining the member 'KeyCode' of a type (line 987)
        KeyCode_265459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 17), evt_265458, 'KeyCode')
        # Assigning a type to the variable 'keyval' (line 987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 8), 'keyval', KeyCode_265459)
        
        
        # Getting the type of 'keyval' (line 988)
        keyval_265460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 11), 'keyval')
        # Getting the type of 'self' (line 988)
        self_265461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 21), 'self')
        # Obtaining the member 'keyvald' of a type (line 988)
        keyvald_265462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 988, 21), self_265461, 'keyvald')
        # Applying the binary operator 'in' (line 988)
        result_contains_265463 = python_operator(stypy.reporting.localization.Localization(__file__, 988, 11), 'in', keyval_265460, keyvald_265462)
        
        # Testing the type of an if condition (line 988)
        if_condition_265464 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 988, 8), result_contains_265463)
        # Assigning a type to the variable 'if_condition_265464' (line 988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 8), 'if_condition_265464', if_condition_265464)
        # SSA begins for if statement (line 988)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 989):
        
        # Assigning a Subscript to a Name (line 989):
        
        # Obtaining the type of the subscript
        # Getting the type of 'keyval' (line 989)
        keyval_265465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 31), 'keyval')
        # Getting the type of 'self' (line 989)
        self_265466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 18), 'self')
        # Obtaining the member 'keyvald' of a type (line 989)
        keyvald_265467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 989, 18), self_265466, 'keyvald')
        # Obtaining the member '__getitem__' of a type (line 989)
        getitem___265468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 989, 18), keyvald_265467, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 989)
        subscript_call_result_265469 = invoke(stypy.reporting.localization.Localization(__file__, 989, 18), getitem___265468, keyval_265465)
        
        # Assigning a type to the variable 'key' (line 989)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 12), 'key', subscript_call_result_265469)
        # SSA branch for the else part of an if statement (line 988)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'keyval' (line 990)
        keyval_265470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 13), 'keyval')
        int_265471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 990, 22), 'int')
        # Applying the binary operator '<' (line 990)
        result_lt_265472 = python_operator(stypy.reporting.localization.Localization(__file__, 990, 13), '<', keyval_265470, int_265471)
        
        # Testing the type of an if condition (line 990)
        if_condition_265473 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 990, 13), result_lt_265472)
        # Assigning a type to the variable 'if_condition_265473' (line 990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 13), 'if_condition_265473', if_condition_265473)
        # SSA begins for if statement (line 990)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 991):
        
        # Assigning a Call to a Name (line 991):
        
        # Call to chr(...): (line 991)
        # Processing the call arguments (line 991)
        # Getting the type of 'keyval' (line 991)
        keyval_265475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 22), 'keyval', False)
        # Processing the call keyword arguments (line 991)
        kwargs_265476 = {}
        # Getting the type of 'chr' (line 991)
        chr_265474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 18), 'chr', False)
        # Calling chr(args, kwargs) (line 991)
        chr_call_result_265477 = invoke(stypy.reporting.localization.Localization(__file__, 991, 18), chr_265474, *[keyval_265475], **kwargs_265476)
        
        # Assigning a type to the variable 'key' (line 991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 991, 12), 'key', chr_call_result_265477)
        
        
        
        # Call to ShiftDown(...): (line 994)
        # Processing the call keyword arguments (line 994)
        kwargs_265480 = {}
        # Getting the type of 'evt' (line 994)
        evt_265478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 19), 'evt', False)
        # Obtaining the member 'ShiftDown' of a type (line 994)
        ShiftDown_265479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 19), evt_265478, 'ShiftDown')
        # Calling ShiftDown(args, kwargs) (line 994)
        ShiftDown_call_result_265481 = invoke(stypy.reporting.localization.Localization(__file__, 994, 19), ShiftDown_265479, *[], **kwargs_265480)
        
        # Applying the 'not' unary operator (line 994)
        result_not__265482 = python_operator(stypy.reporting.localization.Localization(__file__, 994, 15), 'not', ShiftDown_call_result_265481)
        
        # Testing the type of an if condition (line 994)
        if_condition_265483 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 994, 12), result_not__265482)
        # Assigning a type to the variable 'if_condition_265483' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 12), 'if_condition_265483', if_condition_265483)
        # SSA begins for if statement (line 994)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 995):
        
        # Assigning a Call to a Name (line 995):
        
        # Call to lower(...): (line 995)
        # Processing the call keyword arguments (line 995)
        kwargs_265486 = {}
        # Getting the type of 'key' (line 995)
        key_265484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 22), 'key', False)
        # Obtaining the member 'lower' of a type (line 995)
        lower_265485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 22), key_265484, 'lower')
        # Calling lower(args, kwargs) (line 995)
        lower_call_result_265487 = invoke(stypy.reporting.localization.Localization(__file__, 995, 22), lower_265485, *[], **kwargs_265486)
        
        # Assigning a type to the variable 'key' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 16), 'key', lower_call_result_265487)
        # SSA join for if statement (line 994)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 990)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 997):
        
        # Assigning a Name to a Name (line 997):
        # Getting the type of 'None' (line 997)
        None_265488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 18), 'None')
        # Assigning a type to the variable 'key' (line 997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 12), 'key', None_265488)
        # SSA join for if statement (line 990)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 988)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1000)
        tuple_265489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1000, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1000)
        # Adding element type (line 1000)
        
        # Obtaining an instance of the builtin type 'list' (line 1000)
        list_265490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1000, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1000)
        # Adding element type (line 1000)
        # Getting the type of 'evt' (line 1000)
        evt_265491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 17), 'evt')
        # Obtaining the member 'AltDown' of a type (line 1000)
        AltDown_265492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 17), evt_265491, 'AltDown')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1000, 16), list_265490, AltDown_265492)
        # Adding element type (line 1000)
        unicode_265493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1000, 30), 'unicode', u'alt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1000, 16), list_265490, unicode_265493)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1000, 16), tuple_265489, list_265490)
        # Adding element type (line 1000)
        
        # Obtaining an instance of the builtin type 'list' (line 1001)
        list_265494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1001)
        # Adding element type (line 1001)
        # Getting the type of 'evt' (line 1001)
        evt_265495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 17), 'evt')
        # Obtaining the member 'ControlDown' of a type (line 1001)
        ControlDown_265496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 17), evt_265495, 'ControlDown')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1001, 16), list_265494, ControlDown_265496)
        # Adding element type (line 1001)
        unicode_265497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, 34), 'unicode', u'ctrl')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1001, 16), list_265494, unicode_265497)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1000, 16), tuple_265489, list_265494)
        
        # Testing the type of a for loop iterable (line 999)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 999, 8), tuple_265489)
        # Getting the type of the for loop variable (line 999)
        for_loop_var_265498 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 999, 8), tuple_265489)
        # Assigning a type to the variable 'meth' (line 999)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 999, 8), 'meth', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 999, 8), for_loop_var_265498))
        # Assigning a type to the variable 'prefix' (line 999)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 999, 8), 'prefix', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 999, 8), for_loop_var_265498))
        # SSA begins for a for statement (line 999)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to meth(...): (line 1002)
        # Processing the call keyword arguments (line 1002)
        kwargs_265500 = {}
        # Getting the type of 'meth' (line 1002)
        meth_265499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 15), 'meth', False)
        # Calling meth(args, kwargs) (line 1002)
        meth_call_result_265501 = invoke(stypy.reporting.localization.Localization(__file__, 1002, 15), meth_265499, *[], **kwargs_265500)
        
        # Testing the type of an if condition (line 1002)
        if_condition_265502 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1002, 12), meth_call_result_265501)
        # Assigning a type to the variable 'if_condition_265502' (line 1002)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1002, 12), 'if_condition_265502', if_condition_265502)
        # SSA begins for if statement (line 1002)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1003):
        
        # Assigning a Call to a Name (line 1003):
        
        # Call to format(...): (line 1003)
        # Processing the call arguments (line 1003)
        # Getting the type of 'prefix' (line 1003)
        prefix_265505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 39), 'prefix', False)
        # Getting the type of 'key' (line 1003)
        key_265506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 47), 'key', False)
        # Processing the call keyword arguments (line 1003)
        kwargs_265507 = {}
        unicode_265503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1003, 22), 'unicode', u'{0}+{1}')
        # Obtaining the member 'format' of a type (line 1003)
        format_265504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 22), unicode_265503, 'format')
        # Calling format(args, kwargs) (line 1003)
        format_call_result_265508 = invoke(stypy.reporting.localization.Localization(__file__, 1003, 22), format_265504, *[prefix_265505, key_265506], **kwargs_265507)
        
        # Assigning a type to the variable 'key' (line 1003)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1003, 16), 'key', format_call_result_265508)
        # SSA join for if statement (line 1002)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'key' (line 1005)
        key_265509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 15), 'key')
        # Assigning a type to the variable 'stypy_return_type' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 8), 'stypy_return_type', key_265509)
        
        # ################# End of '_get_key(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_key' in the type store
        # Getting the type of 'stypy_return_type' (line 985)
        stypy_return_type_265510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265510)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_key'
        return stypy_return_type_265510


    @norecursion
    def _onKeyDown(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onKeyDown'
        module_type_store = module_type_store.open_function_context('_onKeyDown', 1007, 4, False)
        # Assigning a type to the variable 'self' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onKeyDown.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onKeyDown.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onKeyDown.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onKeyDown.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onKeyDown')
        FigureCanvasWx._onKeyDown.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onKeyDown.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onKeyDown.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onKeyDown.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onKeyDown.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onKeyDown.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onKeyDown.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onKeyDown', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onKeyDown', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onKeyDown(...)' code ##################

        unicode_265511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1008, 8), 'unicode', u'Capture key press.')
        
        # Assigning a Call to a Name (line 1009):
        
        # Assigning a Call to a Name (line 1009):
        
        # Call to _get_key(...): (line 1009)
        # Processing the call arguments (line 1009)
        # Getting the type of 'evt' (line 1009)
        evt_265514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 28), 'evt', False)
        # Processing the call keyword arguments (line 1009)
        kwargs_265515 = {}
        # Getting the type of 'self' (line 1009)
        self_265512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 14), 'self', False)
        # Obtaining the member '_get_key' of a type (line 1009)
        _get_key_265513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 14), self_265512, '_get_key')
        # Calling _get_key(args, kwargs) (line 1009)
        _get_key_call_result_265516 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 14), _get_key_265513, *[evt_265514], **kwargs_265515)
        
        # Assigning a type to the variable 'key' (line 1009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 8), 'key', _get_key_call_result_265516)
        
        # Call to Skip(...): (line 1010)
        # Processing the call keyword arguments (line 1010)
        kwargs_265519 = {}
        # Getting the type of 'evt' (line 1010)
        evt_265517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1010)
        Skip_265518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 8), evt_265517, 'Skip')
        # Calling Skip(args, kwargs) (line 1010)
        Skip_call_result_265520 = invoke(stypy.reporting.localization.Localization(__file__, 1010, 8), Skip_265518, *[], **kwargs_265519)
        
        
        # Call to key_press_event(...): (line 1011)
        # Processing the call arguments (line 1011)
        # Getting the type of 'self' (line 1011)
        self_265523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 41), 'self', False)
        # Getting the type of 'key' (line 1011)
        key_265524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 47), 'key', False)
        # Processing the call keyword arguments (line 1011)
        # Getting the type of 'evt' (line 1011)
        evt_265525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 61), 'evt', False)
        keyword_265526 = evt_265525
        kwargs_265527 = {'guiEvent': keyword_265526}
        # Getting the type of 'FigureCanvasBase' (line 1011)
        FigureCanvasBase_265521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'key_press_event' of a type (line 1011)
        key_press_event_265522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1011, 8), FigureCanvasBase_265521, 'key_press_event')
        # Calling key_press_event(args, kwargs) (line 1011)
        key_press_event_call_result_265528 = invoke(stypy.reporting.localization.Localization(__file__, 1011, 8), key_press_event_265522, *[self_265523, key_265524], **kwargs_265527)
        
        
        # ################# End of '_onKeyDown(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onKeyDown' in the type store
        # Getting the type of 'stypy_return_type' (line 1007)
        stypy_return_type_265529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265529)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onKeyDown'
        return stypy_return_type_265529


    @norecursion
    def _onKeyUp(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onKeyUp'
        module_type_store = module_type_store.open_function_context('_onKeyUp', 1013, 4, False)
        # Assigning a type to the variable 'self' (line 1014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1014, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onKeyUp.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onKeyUp.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onKeyUp.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onKeyUp.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onKeyUp')
        FigureCanvasWx._onKeyUp.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onKeyUp.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onKeyUp.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onKeyUp.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onKeyUp.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onKeyUp.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onKeyUp.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onKeyUp', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onKeyUp', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onKeyUp(...)' code ##################

        unicode_265530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1014, 8), 'unicode', u'Release key.')
        
        # Assigning a Call to a Name (line 1015):
        
        # Assigning a Call to a Name (line 1015):
        
        # Call to _get_key(...): (line 1015)
        # Processing the call arguments (line 1015)
        # Getting the type of 'evt' (line 1015)
        evt_265533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 28), 'evt', False)
        # Processing the call keyword arguments (line 1015)
        kwargs_265534 = {}
        # Getting the type of 'self' (line 1015)
        self_265531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 14), 'self', False)
        # Obtaining the member '_get_key' of a type (line 1015)
        _get_key_265532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1015, 14), self_265531, '_get_key')
        # Calling _get_key(args, kwargs) (line 1015)
        _get_key_call_result_265535 = invoke(stypy.reporting.localization.Localization(__file__, 1015, 14), _get_key_265532, *[evt_265533], **kwargs_265534)
        
        # Assigning a type to the variable 'key' (line 1015)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1015, 8), 'key', _get_key_call_result_265535)
        
        # Call to Skip(...): (line 1017)
        # Processing the call keyword arguments (line 1017)
        kwargs_265538 = {}
        # Getting the type of 'evt' (line 1017)
        evt_265536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1017)
        Skip_265537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 8), evt_265536, 'Skip')
        # Calling Skip(args, kwargs) (line 1017)
        Skip_call_result_265539 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 8), Skip_265537, *[], **kwargs_265538)
        
        
        # Call to key_release_event(...): (line 1018)
        # Processing the call arguments (line 1018)
        # Getting the type of 'self' (line 1018)
        self_265542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 43), 'self', False)
        # Getting the type of 'key' (line 1018)
        key_265543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 49), 'key', False)
        # Processing the call keyword arguments (line 1018)
        # Getting the type of 'evt' (line 1018)
        evt_265544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 63), 'evt', False)
        keyword_265545 = evt_265544
        kwargs_265546 = {'guiEvent': keyword_265545}
        # Getting the type of 'FigureCanvasBase' (line 1018)
        FigureCanvasBase_265540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'key_release_event' of a type (line 1018)
        key_release_event_265541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1018, 8), FigureCanvasBase_265540, 'key_release_event')
        # Calling key_release_event(args, kwargs) (line 1018)
        key_release_event_call_result_265547 = invoke(stypy.reporting.localization.Localization(__file__, 1018, 8), key_release_event_265541, *[self_265542, key_265543], **kwargs_265546)
        
        
        # ################# End of '_onKeyUp(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onKeyUp' in the type store
        # Getting the type of 'stypy_return_type' (line 1013)
        stypy_return_type_265548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265548)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onKeyUp'
        return stypy_return_type_265548


    @norecursion
    def _set_capture(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 1020)
        True_265549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 35), 'True')
        defaults = [True_265549]
        # Create a new context for function '_set_capture'
        module_type_store = module_type_store.open_function_context('_set_capture', 1020, 4, False)
        # Assigning a type to the variable 'self' (line 1021)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1021, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._set_capture.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._set_capture.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._set_capture.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._set_capture.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._set_capture')
        FigureCanvasWx._set_capture.__dict__.__setitem__('stypy_param_names_list', ['capture'])
        FigureCanvasWx._set_capture.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._set_capture.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._set_capture.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._set_capture.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._set_capture.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._set_capture.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._set_capture', ['capture'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_capture', localization, ['capture'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_capture(...)' code ##################

        unicode_265550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 8), 'unicode', u'control wx mouse capture ')
        
        
        # Call to HasCapture(...): (line 1022)
        # Processing the call keyword arguments (line 1022)
        kwargs_265553 = {}
        # Getting the type of 'self' (line 1022)
        self_265551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 11), 'self', False)
        # Obtaining the member 'HasCapture' of a type (line 1022)
        HasCapture_265552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1022, 11), self_265551, 'HasCapture')
        # Calling HasCapture(args, kwargs) (line 1022)
        HasCapture_call_result_265554 = invoke(stypy.reporting.localization.Localization(__file__, 1022, 11), HasCapture_265552, *[], **kwargs_265553)
        
        # Testing the type of an if condition (line 1022)
        if_condition_265555 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1022, 8), HasCapture_call_result_265554)
        # Assigning a type to the variable 'if_condition_265555' (line 1022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1022, 8), 'if_condition_265555', if_condition_265555)
        # SSA begins for if statement (line 1022)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ReleaseMouse(...): (line 1023)
        # Processing the call keyword arguments (line 1023)
        kwargs_265558 = {}
        # Getting the type of 'self' (line 1023)
        self_265556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 12), 'self', False)
        # Obtaining the member 'ReleaseMouse' of a type (line 1023)
        ReleaseMouse_265557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 12), self_265556, 'ReleaseMouse')
        # Calling ReleaseMouse(args, kwargs) (line 1023)
        ReleaseMouse_call_result_265559 = invoke(stypy.reporting.localization.Localization(__file__, 1023, 12), ReleaseMouse_265557, *[], **kwargs_265558)
        
        # SSA join for if statement (line 1022)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'capture' (line 1024)
        capture_265560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 11), 'capture')
        # Testing the type of an if condition (line 1024)
        if_condition_265561 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1024, 8), capture_265560)
        # Assigning a type to the variable 'if_condition_265561' (line 1024)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1024, 8), 'if_condition_265561', if_condition_265561)
        # SSA begins for if statement (line 1024)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to CaptureMouse(...): (line 1025)
        # Processing the call keyword arguments (line 1025)
        kwargs_265564 = {}
        # Getting the type of 'self' (line 1025)
        self_265562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 12), 'self', False)
        # Obtaining the member 'CaptureMouse' of a type (line 1025)
        CaptureMouse_265563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 12), self_265562, 'CaptureMouse')
        # Calling CaptureMouse(args, kwargs) (line 1025)
        CaptureMouse_call_result_265565 = invoke(stypy.reporting.localization.Localization(__file__, 1025, 12), CaptureMouse_265563, *[], **kwargs_265564)
        
        # SSA join for if statement (line 1024)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_set_capture(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_capture' in the type store
        # Getting the type of 'stypy_return_type' (line 1020)
        stypy_return_type_265566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265566)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_capture'
        return stypy_return_type_265566


    @norecursion
    def _onCaptureLost(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onCaptureLost'
        module_type_store = module_type_store.open_function_context('_onCaptureLost', 1027, 4, False)
        # Assigning a type to the variable 'self' (line 1028)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onCaptureLost.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onCaptureLost.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onCaptureLost.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onCaptureLost.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onCaptureLost')
        FigureCanvasWx._onCaptureLost.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onCaptureLost.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onCaptureLost.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onCaptureLost.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onCaptureLost.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onCaptureLost.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onCaptureLost.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onCaptureLost', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onCaptureLost', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onCaptureLost(...)' code ##################

        unicode_265567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 8), 'unicode', u'Capture changed or lost')
        
        # Call to _set_capture(...): (line 1029)
        # Processing the call arguments (line 1029)
        # Getting the type of 'False' (line 1029)
        False_265570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 26), 'False', False)
        # Processing the call keyword arguments (line 1029)
        kwargs_265571 = {}
        # Getting the type of 'self' (line 1029)
        self_265568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 8), 'self', False)
        # Obtaining the member '_set_capture' of a type (line 1029)
        _set_capture_265569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 8), self_265568, '_set_capture')
        # Calling _set_capture(args, kwargs) (line 1029)
        _set_capture_call_result_265572 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 8), _set_capture_265569, *[False_265570], **kwargs_265571)
        
        
        # ################# End of '_onCaptureLost(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onCaptureLost' in the type store
        # Getting the type of 'stypy_return_type' (line 1027)
        stypy_return_type_265573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265573)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onCaptureLost'
        return stypy_return_type_265573


    @norecursion
    def _onRightButtonDown(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onRightButtonDown'
        module_type_store = module_type_store.open_function_context('_onRightButtonDown', 1031, 4, False)
        # Assigning a type to the variable 'self' (line 1032)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1032, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onRightButtonDown.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onRightButtonDown.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onRightButtonDown.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onRightButtonDown.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onRightButtonDown')
        FigureCanvasWx._onRightButtonDown.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onRightButtonDown.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onRightButtonDown.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onRightButtonDown.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onRightButtonDown.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onRightButtonDown.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onRightButtonDown.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onRightButtonDown', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onRightButtonDown', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onRightButtonDown(...)' code ##################

        unicode_265574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1032, 8), 'unicode', u'Start measuring on an axis.')
        
        # Assigning a Call to a Name (line 1033):
        
        # Assigning a Call to a Name (line 1033):
        
        # Call to GetX(...): (line 1033)
        # Processing the call keyword arguments (line 1033)
        kwargs_265577 = {}
        # Getting the type of 'evt' (line 1033)
        evt_265575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 12), 'evt', False)
        # Obtaining the member 'GetX' of a type (line 1033)
        GetX_265576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1033, 12), evt_265575, 'GetX')
        # Calling GetX(args, kwargs) (line 1033)
        GetX_call_result_265578 = invoke(stypy.reporting.localization.Localization(__file__, 1033, 12), GetX_265576, *[], **kwargs_265577)
        
        # Assigning a type to the variable 'x' (line 1033)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1033, 8), 'x', GetX_call_result_265578)
        
        # Assigning a BinOp to a Name (line 1034):
        
        # Assigning a BinOp to a Name (line 1034):
        # Getting the type of 'self' (line 1034)
        self_265579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 12), 'self')
        # Obtaining the member 'figure' of a type (line 1034)
        figure_265580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 12), self_265579, 'figure')
        # Obtaining the member 'bbox' of a type (line 1034)
        bbox_265581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 12), figure_265580, 'bbox')
        # Obtaining the member 'height' of a type (line 1034)
        height_265582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 12), bbox_265581, 'height')
        
        # Call to GetY(...): (line 1034)
        # Processing the call keyword arguments (line 1034)
        kwargs_265585 = {}
        # Getting the type of 'evt' (line 1034)
        evt_265583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 38), 'evt', False)
        # Obtaining the member 'GetY' of a type (line 1034)
        GetY_265584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 38), evt_265583, 'GetY')
        # Calling GetY(args, kwargs) (line 1034)
        GetY_call_result_265586 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 38), GetY_265584, *[], **kwargs_265585)
        
        # Applying the binary operator '-' (line 1034)
        result_sub_265587 = python_operator(stypy.reporting.localization.Localization(__file__, 1034, 12), '-', height_265582, GetY_call_result_265586)
        
        # Assigning a type to the variable 'y' (line 1034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 8), 'y', result_sub_265587)
        
        # Call to Skip(...): (line 1035)
        # Processing the call keyword arguments (line 1035)
        kwargs_265590 = {}
        # Getting the type of 'evt' (line 1035)
        evt_265588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1035)
        Skip_265589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1035, 8), evt_265588, 'Skip')
        # Calling Skip(args, kwargs) (line 1035)
        Skip_call_result_265591 = invoke(stypy.reporting.localization.Localization(__file__, 1035, 8), Skip_265589, *[], **kwargs_265590)
        
        
        # Call to _set_capture(...): (line 1036)
        # Processing the call arguments (line 1036)
        # Getting the type of 'True' (line 1036)
        True_265594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 26), 'True', False)
        # Processing the call keyword arguments (line 1036)
        kwargs_265595 = {}
        # Getting the type of 'self' (line 1036)
        self_265592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 8), 'self', False)
        # Obtaining the member '_set_capture' of a type (line 1036)
        _set_capture_265593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 8), self_265592, '_set_capture')
        # Calling _set_capture(args, kwargs) (line 1036)
        _set_capture_call_result_265596 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 8), _set_capture_265593, *[True_265594], **kwargs_265595)
        
        
        # Call to button_press_event(...): (line 1037)
        # Processing the call arguments (line 1037)
        # Getting the type of 'self' (line 1037)
        self_265599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 44), 'self', False)
        # Getting the type of 'x' (line 1037)
        x_265600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 50), 'x', False)
        # Getting the type of 'y' (line 1037)
        y_265601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 53), 'y', False)
        int_265602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 56), 'int')
        # Processing the call keyword arguments (line 1037)
        # Getting the type of 'evt' (line 1037)
        evt_265603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 68), 'evt', False)
        keyword_265604 = evt_265603
        kwargs_265605 = {'guiEvent': keyword_265604}
        # Getting the type of 'FigureCanvasBase' (line 1037)
        FigureCanvasBase_265597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'button_press_event' of a type (line 1037)
        button_press_event_265598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 8), FigureCanvasBase_265597, 'button_press_event')
        # Calling button_press_event(args, kwargs) (line 1037)
        button_press_event_call_result_265606 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 8), button_press_event_265598, *[self_265599, x_265600, y_265601, int_265602], **kwargs_265605)
        
        
        # ################# End of '_onRightButtonDown(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onRightButtonDown' in the type store
        # Getting the type of 'stypy_return_type' (line 1031)
        stypy_return_type_265607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265607)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onRightButtonDown'
        return stypy_return_type_265607


    @norecursion
    def _onRightButtonDClick(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onRightButtonDClick'
        module_type_store = module_type_store.open_function_context('_onRightButtonDClick', 1039, 4, False)
        # Assigning a type to the variable 'self' (line 1040)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1040, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onRightButtonDClick.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onRightButtonDClick.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onRightButtonDClick.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onRightButtonDClick.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onRightButtonDClick')
        FigureCanvasWx._onRightButtonDClick.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onRightButtonDClick.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onRightButtonDClick.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onRightButtonDClick.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onRightButtonDClick.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onRightButtonDClick.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onRightButtonDClick.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onRightButtonDClick', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onRightButtonDClick', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onRightButtonDClick(...)' code ##################

        unicode_265608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 8), 'unicode', u'Start measuring on an axis.')
        
        # Assigning a Call to a Name (line 1041):
        
        # Assigning a Call to a Name (line 1041):
        
        # Call to GetX(...): (line 1041)
        # Processing the call keyword arguments (line 1041)
        kwargs_265611 = {}
        # Getting the type of 'evt' (line 1041)
        evt_265609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 12), 'evt', False)
        # Obtaining the member 'GetX' of a type (line 1041)
        GetX_265610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 12), evt_265609, 'GetX')
        # Calling GetX(args, kwargs) (line 1041)
        GetX_call_result_265612 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 12), GetX_265610, *[], **kwargs_265611)
        
        # Assigning a type to the variable 'x' (line 1041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 8), 'x', GetX_call_result_265612)
        
        # Assigning a BinOp to a Name (line 1042):
        
        # Assigning a BinOp to a Name (line 1042):
        # Getting the type of 'self' (line 1042)
        self_265613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 12), 'self')
        # Obtaining the member 'figure' of a type (line 1042)
        figure_265614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 12), self_265613, 'figure')
        # Obtaining the member 'bbox' of a type (line 1042)
        bbox_265615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 12), figure_265614, 'bbox')
        # Obtaining the member 'height' of a type (line 1042)
        height_265616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 12), bbox_265615, 'height')
        
        # Call to GetY(...): (line 1042)
        # Processing the call keyword arguments (line 1042)
        kwargs_265619 = {}
        # Getting the type of 'evt' (line 1042)
        evt_265617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 38), 'evt', False)
        # Obtaining the member 'GetY' of a type (line 1042)
        GetY_265618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 38), evt_265617, 'GetY')
        # Calling GetY(args, kwargs) (line 1042)
        GetY_call_result_265620 = invoke(stypy.reporting.localization.Localization(__file__, 1042, 38), GetY_265618, *[], **kwargs_265619)
        
        # Applying the binary operator '-' (line 1042)
        result_sub_265621 = python_operator(stypy.reporting.localization.Localization(__file__, 1042, 12), '-', height_265616, GetY_call_result_265620)
        
        # Assigning a type to the variable 'y' (line 1042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 8), 'y', result_sub_265621)
        
        # Call to Skip(...): (line 1043)
        # Processing the call keyword arguments (line 1043)
        kwargs_265624 = {}
        # Getting the type of 'evt' (line 1043)
        evt_265622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1043)
        Skip_265623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 8), evt_265622, 'Skip')
        # Calling Skip(args, kwargs) (line 1043)
        Skip_call_result_265625 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 8), Skip_265623, *[], **kwargs_265624)
        
        
        # Call to _set_capture(...): (line 1044)
        # Processing the call arguments (line 1044)
        # Getting the type of 'True' (line 1044)
        True_265628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 26), 'True', False)
        # Processing the call keyword arguments (line 1044)
        kwargs_265629 = {}
        # Getting the type of 'self' (line 1044)
        self_265626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 8), 'self', False)
        # Obtaining the member '_set_capture' of a type (line 1044)
        _set_capture_265627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1044, 8), self_265626, '_set_capture')
        # Calling _set_capture(args, kwargs) (line 1044)
        _set_capture_call_result_265630 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 8), _set_capture_265627, *[True_265628], **kwargs_265629)
        
        
        # Call to button_press_event(...): (line 1045)
        # Processing the call arguments (line 1045)
        # Getting the type of 'self' (line 1045)
        self_265633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 44), 'self', False)
        # Getting the type of 'x' (line 1045)
        x_265634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 50), 'x', False)
        # Getting the type of 'y' (line 1045)
        y_265635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 53), 'y', False)
        int_265636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 56), 'int')
        # Processing the call keyword arguments (line 1045)
        # Getting the type of 'True' (line 1046)
        True_265637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 53), 'True', False)
        keyword_265638 = True_265637
        # Getting the type of 'evt' (line 1046)
        evt_265639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 68), 'evt', False)
        keyword_265640 = evt_265639
        kwargs_265641 = {'guiEvent': keyword_265640, 'dblclick': keyword_265638}
        # Getting the type of 'FigureCanvasBase' (line 1045)
        FigureCanvasBase_265631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'button_press_event' of a type (line 1045)
        button_press_event_265632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 8), FigureCanvasBase_265631, 'button_press_event')
        # Calling button_press_event(args, kwargs) (line 1045)
        button_press_event_call_result_265642 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 8), button_press_event_265632, *[self_265633, x_265634, y_265635, int_265636], **kwargs_265641)
        
        
        # ################# End of '_onRightButtonDClick(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onRightButtonDClick' in the type store
        # Getting the type of 'stypy_return_type' (line 1039)
        stypy_return_type_265643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265643)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onRightButtonDClick'
        return stypy_return_type_265643


    @norecursion
    def _onRightButtonUp(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onRightButtonUp'
        module_type_store = module_type_store.open_function_context('_onRightButtonUp', 1048, 4, False)
        # Assigning a type to the variable 'self' (line 1049)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1049, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onRightButtonUp.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onRightButtonUp.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onRightButtonUp.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onRightButtonUp.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onRightButtonUp')
        FigureCanvasWx._onRightButtonUp.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onRightButtonUp.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onRightButtonUp.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onRightButtonUp.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onRightButtonUp.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onRightButtonUp.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onRightButtonUp.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onRightButtonUp', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onRightButtonUp', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onRightButtonUp(...)' code ##################

        unicode_265644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 8), 'unicode', u'End measuring on an axis.')
        
        # Assigning a Call to a Name (line 1050):
        
        # Assigning a Call to a Name (line 1050):
        
        # Call to GetX(...): (line 1050)
        # Processing the call keyword arguments (line 1050)
        kwargs_265647 = {}
        # Getting the type of 'evt' (line 1050)
        evt_265645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 12), 'evt', False)
        # Obtaining the member 'GetX' of a type (line 1050)
        GetX_265646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 12), evt_265645, 'GetX')
        # Calling GetX(args, kwargs) (line 1050)
        GetX_call_result_265648 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 12), GetX_265646, *[], **kwargs_265647)
        
        # Assigning a type to the variable 'x' (line 1050)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1050, 8), 'x', GetX_call_result_265648)
        
        # Assigning a BinOp to a Name (line 1051):
        
        # Assigning a BinOp to a Name (line 1051):
        # Getting the type of 'self' (line 1051)
        self_265649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'self')
        # Obtaining the member 'figure' of a type (line 1051)
        figure_265650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 12), self_265649, 'figure')
        # Obtaining the member 'bbox' of a type (line 1051)
        bbox_265651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 12), figure_265650, 'bbox')
        # Obtaining the member 'height' of a type (line 1051)
        height_265652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 12), bbox_265651, 'height')
        
        # Call to GetY(...): (line 1051)
        # Processing the call keyword arguments (line 1051)
        kwargs_265655 = {}
        # Getting the type of 'evt' (line 1051)
        evt_265653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 38), 'evt', False)
        # Obtaining the member 'GetY' of a type (line 1051)
        GetY_265654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 38), evt_265653, 'GetY')
        # Calling GetY(args, kwargs) (line 1051)
        GetY_call_result_265656 = invoke(stypy.reporting.localization.Localization(__file__, 1051, 38), GetY_265654, *[], **kwargs_265655)
        
        # Applying the binary operator '-' (line 1051)
        result_sub_265657 = python_operator(stypy.reporting.localization.Localization(__file__, 1051, 12), '-', height_265652, GetY_call_result_265656)
        
        # Assigning a type to the variable 'y' (line 1051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 8), 'y', result_sub_265657)
        
        # Call to Skip(...): (line 1052)
        # Processing the call keyword arguments (line 1052)
        kwargs_265660 = {}
        # Getting the type of 'evt' (line 1052)
        evt_265658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1052)
        Skip_265659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 8), evt_265658, 'Skip')
        # Calling Skip(args, kwargs) (line 1052)
        Skip_call_result_265661 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 8), Skip_265659, *[], **kwargs_265660)
        
        
        # Call to _set_capture(...): (line 1053)
        # Processing the call arguments (line 1053)
        # Getting the type of 'False' (line 1053)
        False_265664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 26), 'False', False)
        # Processing the call keyword arguments (line 1053)
        kwargs_265665 = {}
        # Getting the type of 'self' (line 1053)
        self_265662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 8), 'self', False)
        # Obtaining the member '_set_capture' of a type (line 1053)
        _set_capture_265663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 8), self_265662, '_set_capture')
        # Calling _set_capture(args, kwargs) (line 1053)
        _set_capture_call_result_265666 = invoke(stypy.reporting.localization.Localization(__file__, 1053, 8), _set_capture_265663, *[False_265664], **kwargs_265665)
        
        
        # Call to button_release_event(...): (line 1054)
        # Processing the call arguments (line 1054)
        # Getting the type of 'self' (line 1054)
        self_265669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 46), 'self', False)
        # Getting the type of 'x' (line 1054)
        x_265670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 52), 'x', False)
        # Getting the type of 'y' (line 1054)
        y_265671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 55), 'y', False)
        int_265672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, 58), 'int')
        # Processing the call keyword arguments (line 1054)
        # Getting the type of 'evt' (line 1054)
        evt_265673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 70), 'evt', False)
        keyword_265674 = evt_265673
        kwargs_265675 = {'guiEvent': keyword_265674}
        # Getting the type of 'FigureCanvasBase' (line 1054)
        FigureCanvasBase_265667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'button_release_event' of a type (line 1054)
        button_release_event_265668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 8), FigureCanvasBase_265667, 'button_release_event')
        # Calling button_release_event(args, kwargs) (line 1054)
        button_release_event_call_result_265676 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 8), button_release_event_265668, *[self_265669, x_265670, y_265671, int_265672], **kwargs_265675)
        
        
        # ################# End of '_onRightButtonUp(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onRightButtonUp' in the type store
        # Getting the type of 'stypy_return_type' (line 1048)
        stypy_return_type_265677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265677)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onRightButtonUp'
        return stypy_return_type_265677


    @norecursion
    def _onLeftButtonDown(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onLeftButtonDown'
        module_type_store = module_type_store.open_function_context('_onLeftButtonDown', 1056, 4, False)
        # Assigning a type to the variable 'self' (line 1057)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1057, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onLeftButtonDown.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onLeftButtonDown.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onLeftButtonDown.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onLeftButtonDown.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onLeftButtonDown')
        FigureCanvasWx._onLeftButtonDown.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onLeftButtonDown.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onLeftButtonDown.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onLeftButtonDown.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onLeftButtonDown.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onLeftButtonDown.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onLeftButtonDown.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onLeftButtonDown', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onLeftButtonDown', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onLeftButtonDown(...)' code ##################

        unicode_265678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1057, 8), 'unicode', u'Start measuring on an axis.')
        
        # Assigning a Call to a Name (line 1058):
        
        # Assigning a Call to a Name (line 1058):
        
        # Call to GetX(...): (line 1058)
        # Processing the call keyword arguments (line 1058)
        kwargs_265681 = {}
        # Getting the type of 'evt' (line 1058)
        evt_265679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 12), 'evt', False)
        # Obtaining the member 'GetX' of a type (line 1058)
        GetX_265680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1058, 12), evt_265679, 'GetX')
        # Calling GetX(args, kwargs) (line 1058)
        GetX_call_result_265682 = invoke(stypy.reporting.localization.Localization(__file__, 1058, 12), GetX_265680, *[], **kwargs_265681)
        
        # Assigning a type to the variable 'x' (line 1058)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1058, 8), 'x', GetX_call_result_265682)
        
        # Assigning a BinOp to a Name (line 1059):
        
        # Assigning a BinOp to a Name (line 1059):
        # Getting the type of 'self' (line 1059)
        self_265683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 12), 'self')
        # Obtaining the member 'figure' of a type (line 1059)
        figure_265684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1059, 12), self_265683, 'figure')
        # Obtaining the member 'bbox' of a type (line 1059)
        bbox_265685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1059, 12), figure_265684, 'bbox')
        # Obtaining the member 'height' of a type (line 1059)
        height_265686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1059, 12), bbox_265685, 'height')
        
        # Call to GetY(...): (line 1059)
        # Processing the call keyword arguments (line 1059)
        kwargs_265689 = {}
        # Getting the type of 'evt' (line 1059)
        evt_265687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 38), 'evt', False)
        # Obtaining the member 'GetY' of a type (line 1059)
        GetY_265688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1059, 38), evt_265687, 'GetY')
        # Calling GetY(args, kwargs) (line 1059)
        GetY_call_result_265690 = invoke(stypy.reporting.localization.Localization(__file__, 1059, 38), GetY_265688, *[], **kwargs_265689)
        
        # Applying the binary operator '-' (line 1059)
        result_sub_265691 = python_operator(stypy.reporting.localization.Localization(__file__, 1059, 12), '-', height_265686, GetY_call_result_265690)
        
        # Assigning a type to the variable 'y' (line 1059)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 8), 'y', result_sub_265691)
        
        # Call to Skip(...): (line 1060)
        # Processing the call keyword arguments (line 1060)
        kwargs_265694 = {}
        # Getting the type of 'evt' (line 1060)
        evt_265692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1060)
        Skip_265693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 8), evt_265692, 'Skip')
        # Calling Skip(args, kwargs) (line 1060)
        Skip_call_result_265695 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 8), Skip_265693, *[], **kwargs_265694)
        
        
        # Call to _set_capture(...): (line 1061)
        # Processing the call arguments (line 1061)
        # Getting the type of 'True' (line 1061)
        True_265698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 26), 'True', False)
        # Processing the call keyword arguments (line 1061)
        kwargs_265699 = {}
        # Getting the type of 'self' (line 1061)
        self_265696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 8), 'self', False)
        # Obtaining the member '_set_capture' of a type (line 1061)
        _set_capture_265697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1061, 8), self_265696, '_set_capture')
        # Calling _set_capture(args, kwargs) (line 1061)
        _set_capture_call_result_265700 = invoke(stypy.reporting.localization.Localization(__file__, 1061, 8), _set_capture_265697, *[True_265698], **kwargs_265699)
        
        
        # Call to button_press_event(...): (line 1062)
        # Processing the call arguments (line 1062)
        # Getting the type of 'self' (line 1062)
        self_265703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 44), 'self', False)
        # Getting the type of 'x' (line 1062)
        x_265704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 50), 'x', False)
        # Getting the type of 'y' (line 1062)
        y_265705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 53), 'y', False)
        int_265706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1062, 56), 'int')
        # Processing the call keyword arguments (line 1062)
        # Getting the type of 'evt' (line 1062)
        evt_265707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 68), 'evt', False)
        keyword_265708 = evt_265707
        kwargs_265709 = {'guiEvent': keyword_265708}
        # Getting the type of 'FigureCanvasBase' (line 1062)
        FigureCanvasBase_265701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'button_press_event' of a type (line 1062)
        button_press_event_265702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 8), FigureCanvasBase_265701, 'button_press_event')
        # Calling button_press_event(args, kwargs) (line 1062)
        button_press_event_call_result_265710 = invoke(stypy.reporting.localization.Localization(__file__, 1062, 8), button_press_event_265702, *[self_265703, x_265704, y_265705, int_265706], **kwargs_265709)
        
        
        # ################# End of '_onLeftButtonDown(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onLeftButtonDown' in the type store
        # Getting the type of 'stypy_return_type' (line 1056)
        stypy_return_type_265711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265711)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onLeftButtonDown'
        return stypy_return_type_265711


    @norecursion
    def _onLeftButtonDClick(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onLeftButtonDClick'
        module_type_store = module_type_store.open_function_context('_onLeftButtonDClick', 1064, 4, False)
        # Assigning a type to the variable 'self' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onLeftButtonDClick.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onLeftButtonDClick.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onLeftButtonDClick.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onLeftButtonDClick.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onLeftButtonDClick')
        FigureCanvasWx._onLeftButtonDClick.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onLeftButtonDClick.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onLeftButtonDClick.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onLeftButtonDClick.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onLeftButtonDClick.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onLeftButtonDClick.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onLeftButtonDClick.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onLeftButtonDClick', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onLeftButtonDClick', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onLeftButtonDClick(...)' code ##################

        unicode_265712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1065, 8), 'unicode', u'Start measuring on an axis.')
        
        # Assigning a Call to a Name (line 1066):
        
        # Assigning a Call to a Name (line 1066):
        
        # Call to GetX(...): (line 1066)
        # Processing the call keyword arguments (line 1066)
        kwargs_265715 = {}
        # Getting the type of 'evt' (line 1066)
        evt_265713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 12), 'evt', False)
        # Obtaining the member 'GetX' of a type (line 1066)
        GetX_265714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1066, 12), evt_265713, 'GetX')
        # Calling GetX(args, kwargs) (line 1066)
        GetX_call_result_265716 = invoke(stypy.reporting.localization.Localization(__file__, 1066, 12), GetX_265714, *[], **kwargs_265715)
        
        # Assigning a type to the variable 'x' (line 1066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1066, 8), 'x', GetX_call_result_265716)
        
        # Assigning a BinOp to a Name (line 1067):
        
        # Assigning a BinOp to a Name (line 1067):
        # Getting the type of 'self' (line 1067)
        self_265717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 12), 'self')
        # Obtaining the member 'figure' of a type (line 1067)
        figure_265718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 12), self_265717, 'figure')
        # Obtaining the member 'bbox' of a type (line 1067)
        bbox_265719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 12), figure_265718, 'bbox')
        # Obtaining the member 'height' of a type (line 1067)
        height_265720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 12), bbox_265719, 'height')
        
        # Call to GetY(...): (line 1067)
        # Processing the call keyword arguments (line 1067)
        kwargs_265723 = {}
        # Getting the type of 'evt' (line 1067)
        evt_265721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 38), 'evt', False)
        # Obtaining the member 'GetY' of a type (line 1067)
        GetY_265722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 38), evt_265721, 'GetY')
        # Calling GetY(args, kwargs) (line 1067)
        GetY_call_result_265724 = invoke(stypy.reporting.localization.Localization(__file__, 1067, 38), GetY_265722, *[], **kwargs_265723)
        
        # Applying the binary operator '-' (line 1067)
        result_sub_265725 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 12), '-', height_265720, GetY_call_result_265724)
        
        # Assigning a type to the variable 'y' (line 1067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 8), 'y', result_sub_265725)
        
        # Call to Skip(...): (line 1068)
        # Processing the call keyword arguments (line 1068)
        kwargs_265728 = {}
        # Getting the type of 'evt' (line 1068)
        evt_265726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1068)
        Skip_265727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 8), evt_265726, 'Skip')
        # Calling Skip(args, kwargs) (line 1068)
        Skip_call_result_265729 = invoke(stypy.reporting.localization.Localization(__file__, 1068, 8), Skip_265727, *[], **kwargs_265728)
        
        
        # Call to _set_capture(...): (line 1069)
        # Processing the call arguments (line 1069)
        # Getting the type of 'True' (line 1069)
        True_265732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 26), 'True', False)
        # Processing the call keyword arguments (line 1069)
        kwargs_265733 = {}
        # Getting the type of 'self' (line 1069)
        self_265730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 8), 'self', False)
        # Obtaining the member '_set_capture' of a type (line 1069)
        _set_capture_265731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1069, 8), self_265730, '_set_capture')
        # Calling _set_capture(args, kwargs) (line 1069)
        _set_capture_call_result_265734 = invoke(stypy.reporting.localization.Localization(__file__, 1069, 8), _set_capture_265731, *[True_265732], **kwargs_265733)
        
        
        # Call to button_press_event(...): (line 1070)
        # Processing the call arguments (line 1070)
        # Getting the type of 'self' (line 1070)
        self_265737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 44), 'self', False)
        # Getting the type of 'x' (line 1070)
        x_265738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 50), 'x', False)
        # Getting the type of 'y' (line 1070)
        y_265739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 53), 'y', False)
        int_265740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1070, 56), 'int')
        # Processing the call keyword arguments (line 1070)
        # Getting the type of 'True' (line 1071)
        True_265741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 53), 'True', False)
        keyword_265742 = True_265741
        # Getting the type of 'evt' (line 1071)
        evt_265743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 68), 'evt', False)
        keyword_265744 = evt_265743
        kwargs_265745 = {'guiEvent': keyword_265744, 'dblclick': keyword_265742}
        # Getting the type of 'FigureCanvasBase' (line 1070)
        FigureCanvasBase_265735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'button_press_event' of a type (line 1070)
        button_press_event_265736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 8), FigureCanvasBase_265735, 'button_press_event')
        # Calling button_press_event(args, kwargs) (line 1070)
        button_press_event_call_result_265746 = invoke(stypy.reporting.localization.Localization(__file__, 1070, 8), button_press_event_265736, *[self_265737, x_265738, y_265739, int_265740], **kwargs_265745)
        
        
        # ################# End of '_onLeftButtonDClick(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onLeftButtonDClick' in the type store
        # Getting the type of 'stypy_return_type' (line 1064)
        stypy_return_type_265747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265747)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onLeftButtonDClick'
        return stypy_return_type_265747


    @norecursion
    def _onLeftButtonUp(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onLeftButtonUp'
        module_type_store = module_type_store.open_function_context('_onLeftButtonUp', 1073, 4, False)
        # Assigning a type to the variable 'self' (line 1074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onLeftButtonUp.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onLeftButtonUp.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onLeftButtonUp.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onLeftButtonUp.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onLeftButtonUp')
        FigureCanvasWx._onLeftButtonUp.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onLeftButtonUp.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onLeftButtonUp.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onLeftButtonUp.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onLeftButtonUp.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onLeftButtonUp.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onLeftButtonUp.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onLeftButtonUp', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onLeftButtonUp', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onLeftButtonUp(...)' code ##################

        unicode_265748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1074, 8), 'unicode', u'End measuring on an axis.')
        
        # Assigning a Call to a Name (line 1075):
        
        # Assigning a Call to a Name (line 1075):
        
        # Call to GetX(...): (line 1075)
        # Processing the call keyword arguments (line 1075)
        kwargs_265751 = {}
        # Getting the type of 'evt' (line 1075)
        evt_265749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 12), 'evt', False)
        # Obtaining the member 'GetX' of a type (line 1075)
        GetX_265750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 12), evt_265749, 'GetX')
        # Calling GetX(args, kwargs) (line 1075)
        GetX_call_result_265752 = invoke(stypy.reporting.localization.Localization(__file__, 1075, 12), GetX_265750, *[], **kwargs_265751)
        
        # Assigning a type to the variable 'x' (line 1075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1075, 8), 'x', GetX_call_result_265752)
        
        # Assigning a BinOp to a Name (line 1076):
        
        # Assigning a BinOp to a Name (line 1076):
        # Getting the type of 'self' (line 1076)
        self_265753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 12), 'self')
        # Obtaining the member 'figure' of a type (line 1076)
        figure_265754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 12), self_265753, 'figure')
        # Obtaining the member 'bbox' of a type (line 1076)
        bbox_265755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 12), figure_265754, 'bbox')
        # Obtaining the member 'height' of a type (line 1076)
        height_265756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 12), bbox_265755, 'height')
        
        # Call to GetY(...): (line 1076)
        # Processing the call keyword arguments (line 1076)
        kwargs_265759 = {}
        # Getting the type of 'evt' (line 1076)
        evt_265757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 38), 'evt', False)
        # Obtaining the member 'GetY' of a type (line 1076)
        GetY_265758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 38), evt_265757, 'GetY')
        # Calling GetY(args, kwargs) (line 1076)
        GetY_call_result_265760 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 38), GetY_265758, *[], **kwargs_265759)
        
        # Applying the binary operator '-' (line 1076)
        result_sub_265761 = python_operator(stypy.reporting.localization.Localization(__file__, 1076, 12), '-', height_265756, GetY_call_result_265760)
        
        # Assigning a type to the variable 'y' (line 1076)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 8), 'y', result_sub_265761)
        
        # Call to Skip(...): (line 1078)
        # Processing the call keyword arguments (line 1078)
        kwargs_265764 = {}
        # Getting the type of 'evt' (line 1078)
        evt_265762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1078)
        Skip_265763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 8), evt_265762, 'Skip')
        # Calling Skip(args, kwargs) (line 1078)
        Skip_call_result_265765 = invoke(stypy.reporting.localization.Localization(__file__, 1078, 8), Skip_265763, *[], **kwargs_265764)
        
        
        # Call to _set_capture(...): (line 1079)
        # Processing the call arguments (line 1079)
        # Getting the type of 'False' (line 1079)
        False_265768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 26), 'False', False)
        # Processing the call keyword arguments (line 1079)
        kwargs_265769 = {}
        # Getting the type of 'self' (line 1079)
        self_265766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 8), 'self', False)
        # Obtaining the member '_set_capture' of a type (line 1079)
        _set_capture_265767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1079, 8), self_265766, '_set_capture')
        # Calling _set_capture(args, kwargs) (line 1079)
        _set_capture_call_result_265770 = invoke(stypy.reporting.localization.Localization(__file__, 1079, 8), _set_capture_265767, *[False_265768], **kwargs_265769)
        
        
        # Call to button_release_event(...): (line 1080)
        # Processing the call arguments (line 1080)
        # Getting the type of 'self' (line 1080)
        self_265773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 46), 'self', False)
        # Getting the type of 'x' (line 1080)
        x_265774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 52), 'x', False)
        # Getting the type of 'y' (line 1080)
        y_265775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 55), 'y', False)
        int_265776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 58), 'int')
        # Processing the call keyword arguments (line 1080)
        # Getting the type of 'evt' (line 1080)
        evt_265777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 70), 'evt', False)
        keyword_265778 = evt_265777
        kwargs_265779 = {'guiEvent': keyword_265778}
        # Getting the type of 'FigureCanvasBase' (line 1080)
        FigureCanvasBase_265771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'button_release_event' of a type (line 1080)
        button_release_event_265772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 8), FigureCanvasBase_265771, 'button_release_event')
        # Calling button_release_event(args, kwargs) (line 1080)
        button_release_event_call_result_265780 = invoke(stypy.reporting.localization.Localization(__file__, 1080, 8), button_release_event_265772, *[self_265773, x_265774, y_265775, int_265776], **kwargs_265779)
        
        
        # ################# End of '_onLeftButtonUp(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onLeftButtonUp' in the type store
        # Getting the type of 'stypy_return_type' (line 1073)
        stypy_return_type_265781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265781)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onLeftButtonUp'
        return stypy_return_type_265781


    @norecursion
    def _onMiddleButtonDown(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onMiddleButtonDown'
        module_type_store = module_type_store.open_function_context('_onMiddleButtonDown', 1083, 4, False)
        # Assigning a type to the variable 'self' (line 1084)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1084, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onMiddleButtonDown.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onMiddleButtonDown.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onMiddleButtonDown.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onMiddleButtonDown.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onMiddleButtonDown')
        FigureCanvasWx._onMiddleButtonDown.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onMiddleButtonDown.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onMiddleButtonDown.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onMiddleButtonDown.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onMiddleButtonDown.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onMiddleButtonDown.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onMiddleButtonDown.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onMiddleButtonDown', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onMiddleButtonDown', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onMiddleButtonDown(...)' code ##################

        unicode_265782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1084, 8), 'unicode', u'Start measuring on an axis.')
        
        # Assigning a Call to a Name (line 1085):
        
        # Assigning a Call to a Name (line 1085):
        
        # Call to GetX(...): (line 1085)
        # Processing the call keyword arguments (line 1085)
        kwargs_265785 = {}
        # Getting the type of 'evt' (line 1085)
        evt_265783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 12), 'evt', False)
        # Obtaining the member 'GetX' of a type (line 1085)
        GetX_265784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 12), evt_265783, 'GetX')
        # Calling GetX(args, kwargs) (line 1085)
        GetX_call_result_265786 = invoke(stypy.reporting.localization.Localization(__file__, 1085, 12), GetX_265784, *[], **kwargs_265785)
        
        # Assigning a type to the variable 'x' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 8), 'x', GetX_call_result_265786)
        
        # Assigning a BinOp to a Name (line 1086):
        
        # Assigning a BinOp to a Name (line 1086):
        # Getting the type of 'self' (line 1086)
        self_265787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 12), 'self')
        # Obtaining the member 'figure' of a type (line 1086)
        figure_265788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 12), self_265787, 'figure')
        # Obtaining the member 'bbox' of a type (line 1086)
        bbox_265789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 12), figure_265788, 'bbox')
        # Obtaining the member 'height' of a type (line 1086)
        height_265790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 12), bbox_265789, 'height')
        
        # Call to GetY(...): (line 1086)
        # Processing the call keyword arguments (line 1086)
        kwargs_265793 = {}
        # Getting the type of 'evt' (line 1086)
        evt_265791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 38), 'evt', False)
        # Obtaining the member 'GetY' of a type (line 1086)
        GetY_265792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 38), evt_265791, 'GetY')
        # Calling GetY(args, kwargs) (line 1086)
        GetY_call_result_265794 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 38), GetY_265792, *[], **kwargs_265793)
        
        # Applying the binary operator '-' (line 1086)
        result_sub_265795 = python_operator(stypy.reporting.localization.Localization(__file__, 1086, 12), '-', height_265790, GetY_call_result_265794)
        
        # Assigning a type to the variable 'y' (line 1086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 8), 'y', result_sub_265795)
        
        # Call to Skip(...): (line 1087)
        # Processing the call keyword arguments (line 1087)
        kwargs_265798 = {}
        # Getting the type of 'evt' (line 1087)
        evt_265796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1087)
        Skip_265797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 8), evt_265796, 'Skip')
        # Calling Skip(args, kwargs) (line 1087)
        Skip_call_result_265799 = invoke(stypy.reporting.localization.Localization(__file__, 1087, 8), Skip_265797, *[], **kwargs_265798)
        
        
        # Call to _set_capture(...): (line 1088)
        # Processing the call arguments (line 1088)
        # Getting the type of 'True' (line 1088)
        True_265802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 26), 'True', False)
        # Processing the call keyword arguments (line 1088)
        kwargs_265803 = {}
        # Getting the type of 'self' (line 1088)
        self_265800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 8), 'self', False)
        # Obtaining the member '_set_capture' of a type (line 1088)
        _set_capture_265801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 8), self_265800, '_set_capture')
        # Calling _set_capture(args, kwargs) (line 1088)
        _set_capture_call_result_265804 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 8), _set_capture_265801, *[True_265802], **kwargs_265803)
        
        
        # Call to button_press_event(...): (line 1089)
        # Processing the call arguments (line 1089)
        # Getting the type of 'self' (line 1089)
        self_265807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 44), 'self', False)
        # Getting the type of 'x' (line 1089)
        x_265808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 50), 'x', False)
        # Getting the type of 'y' (line 1089)
        y_265809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 53), 'y', False)
        int_265810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, 56), 'int')
        # Processing the call keyword arguments (line 1089)
        # Getting the type of 'evt' (line 1089)
        evt_265811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 68), 'evt', False)
        keyword_265812 = evt_265811
        kwargs_265813 = {'guiEvent': keyword_265812}
        # Getting the type of 'FigureCanvasBase' (line 1089)
        FigureCanvasBase_265805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'button_press_event' of a type (line 1089)
        button_press_event_265806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1089, 8), FigureCanvasBase_265805, 'button_press_event')
        # Calling button_press_event(args, kwargs) (line 1089)
        button_press_event_call_result_265814 = invoke(stypy.reporting.localization.Localization(__file__, 1089, 8), button_press_event_265806, *[self_265807, x_265808, y_265809, int_265810], **kwargs_265813)
        
        
        # ################# End of '_onMiddleButtonDown(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onMiddleButtonDown' in the type store
        # Getting the type of 'stypy_return_type' (line 1083)
        stypy_return_type_265815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265815)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onMiddleButtonDown'
        return stypy_return_type_265815


    @norecursion
    def _onMiddleButtonDClick(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onMiddleButtonDClick'
        module_type_store = module_type_store.open_function_context('_onMiddleButtonDClick', 1091, 4, False)
        # Assigning a type to the variable 'self' (line 1092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onMiddleButtonDClick.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onMiddleButtonDClick.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onMiddleButtonDClick.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onMiddleButtonDClick.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onMiddleButtonDClick')
        FigureCanvasWx._onMiddleButtonDClick.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onMiddleButtonDClick.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onMiddleButtonDClick.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onMiddleButtonDClick.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onMiddleButtonDClick.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onMiddleButtonDClick.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onMiddleButtonDClick.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onMiddleButtonDClick', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onMiddleButtonDClick', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onMiddleButtonDClick(...)' code ##################

        unicode_265816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1092, 8), 'unicode', u'Start measuring on an axis.')
        
        # Assigning a Call to a Name (line 1093):
        
        # Assigning a Call to a Name (line 1093):
        
        # Call to GetX(...): (line 1093)
        # Processing the call keyword arguments (line 1093)
        kwargs_265819 = {}
        # Getting the type of 'evt' (line 1093)
        evt_265817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 12), 'evt', False)
        # Obtaining the member 'GetX' of a type (line 1093)
        GetX_265818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 12), evt_265817, 'GetX')
        # Calling GetX(args, kwargs) (line 1093)
        GetX_call_result_265820 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 12), GetX_265818, *[], **kwargs_265819)
        
        # Assigning a type to the variable 'x' (line 1093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 8), 'x', GetX_call_result_265820)
        
        # Assigning a BinOp to a Name (line 1094):
        
        # Assigning a BinOp to a Name (line 1094):
        # Getting the type of 'self' (line 1094)
        self_265821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 12), 'self')
        # Obtaining the member 'figure' of a type (line 1094)
        figure_265822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 12), self_265821, 'figure')
        # Obtaining the member 'bbox' of a type (line 1094)
        bbox_265823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 12), figure_265822, 'bbox')
        # Obtaining the member 'height' of a type (line 1094)
        height_265824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 12), bbox_265823, 'height')
        
        # Call to GetY(...): (line 1094)
        # Processing the call keyword arguments (line 1094)
        kwargs_265827 = {}
        # Getting the type of 'evt' (line 1094)
        evt_265825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 38), 'evt', False)
        # Obtaining the member 'GetY' of a type (line 1094)
        GetY_265826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 38), evt_265825, 'GetY')
        # Calling GetY(args, kwargs) (line 1094)
        GetY_call_result_265828 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 38), GetY_265826, *[], **kwargs_265827)
        
        # Applying the binary operator '-' (line 1094)
        result_sub_265829 = python_operator(stypy.reporting.localization.Localization(__file__, 1094, 12), '-', height_265824, GetY_call_result_265828)
        
        # Assigning a type to the variable 'y' (line 1094)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1094, 8), 'y', result_sub_265829)
        
        # Call to Skip(...): (line 1095)
        # Processing the call keyword arguments (line 1095)
        kwargs_265832 = {}
        # Getting the type of 'evt' (line 1095)
        evt_265830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1095)
        Skip_265831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 8), evt_265830, 'Skip')
        # Calling Skip(args, kwargs) (line 1095)
        Skip_call_result_265833 = invoke(stypy.reporting.localization.Localization(__file__, 1095, 8), Skip_265831, *[], **kwargs_265832)
        
        
        # Call to _set_capture(...): (line 1096)
        # Processing the call arguments (line 1096)
        # Getting the type of 'True' (line 1096)
        True_265836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 26), 'True', False)
        # Processing the call keyword arguments (line 1096)
        kwargs_265837 = {}
        # Getting the type of 'self' (line 1096)
        self_265834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 8), 'self', False)
        # Obtaining the member '_set_capture' of a type (line 1096)
        _set_capture_265835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1096, 8), self_265834, '_set_capture')
        # Calling _set_capture(args, kwargs) (line 1096)
        _set_capture_call_result_265838 = invoke(stypy.reporting.localization.Localization(__file__, 1096, 8), _set_capture_265835, *[True_265836], **kwargs_265837)
        
        
        # Call to button_press_event(...): (line 1097)
        # Processing the call arguments (line 1097)
        # Getting the type of 'self' (line 1097)
        self_265841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 44), 'self', False)
        # Getting the type of 'x' (line 1097)
        x_265842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 50), 'x', False)
        # Getting the type of 'y' (line 1097)
        y_265843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 53), 'y', False)
        int_265844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1097, 56), 'int')
        # Processing the call keyword arguments (line 1097)
        # Getting the type of 'True' (line 1098)
        True_265845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 53), 'True', False)
        keyword_265846 = True_265845
        # Getting the type of 'evt' (line 1098)
        evt_265847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 68), 'evt', False)
        keyword_265848 = evt_265847
        kwargs_265849 = {'guiEvent': keyword_265848, 'dblclick': keyword_265846}
        # Getting the type of 'FigureCanvasBase' (line 1097)
        FigureCanvasBase_265839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'button_press_event' of a type (line 1097)
        button_press_event_265840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 8), FigureCanvasBase_265839, 'button_press_event')
        # Calling button_press_event(args, kwargs) (line 1097)
        button_press_event_call_result_265850 = invoke(stypy.reporting.localization.Localization(__file__, 1097, 8), button_press_event_265840, *[self_265841, x_265842, y_265843, int_265844], **kwargs_265849)
        
        
        # ################# End of '_onMiddleButtonDClick(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onMiddleButtonDClick' in the type store
        # Getting the type of 'stypy_return_type' (line 1091)
        stypy_return_type_265851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265851)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onMiddleButtonDClick'
        return stypy_return_type_265851


    @norecursion
    def _onMiddleButtonUp(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onMiddleButtonUp'
        module_type_store = module_type_store.open_function_context('_onMiddleButtonUp', 1100, 4, False)
        # Assigning a type to the variable 'self' (line 1101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1101, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onMiddleButtonUp.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onMiddleButtonUp.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onMiddleButtonUp.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onMiddleButtonUp.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onMiddleButtonUp')
        FigureCanvasWx._onMiddleButtonUp.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onMiddleButtonUp.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onMiddleButtonUp.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onMiddleButtonUp.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onMiddleButtonUp.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onMiddleButtonUp.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onMiddleButtonUp.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onMiddleButtonUp', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onMiddleButtonUp', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onMiddleButtonUp(...)' code ##################

        unicode_265852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 8), 'unicode', u'End measuring on an axis.')
        
        # Assigning a Call to a Name (line 1102):
        
        # Assigning a Call to a Name (line 1102):
        
        # Call to GetX(...): (line 1102)
        # Processing the call keyword arguments (line 1102)
        kwargs_265855 = {}
        # Getting the type of 'evt' (line 1102)
        evt_265853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 12), 'evt', False)
        # Obtaining the member 'GetX' of a type (line 1102)
        GetX_265854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 12), evt_265853, 'GetX')
        # Calling GetX(args, kwargs) (line 1102)
        GetX_call_result_265856 = invoke(stypy.reporting.localization.Localization(__file__, 1102, 12), GetX_265854, *[], **kwargs_265855)
        
        # Assigning a type to the variable 'x' (line 1102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1102, 8), 'x', GetX_call_result_265856)
        
        # Assigning a BinOp to a Name (line 1103):
        
        # Assigning a BinOp to a Name (line 1103):
        # Getting the type of 'self' (line 1103)
        self_265857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 12), 'self')
        # Obtaining the member 'figure' of a type (line 1103)
        figure_265858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 12), self_265857, 'figure')
        # Obtaining the member 'bbox' of a type (line 1103)
        bbox_265859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 12), figure_265858, 'bbox')
        # Obtaining the member 'height' of a type (line 1103)
        height_265860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 12), bbox_265859, 'height')
        
        # Call to GetY(...): (line 1103)
        # Processing the call keyword arguments (line 1103)
        kwargs_265863 = {}
        # Getting the type of 'evt' (line 1103)
        evt_265861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 38), 'evt', False)
        # Obtaining the member 'GetY' of a type (line 1103)
        GetY_265862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 38), evt_265861, 'GetY')
        # Calling GetY(args, kwargs) (line 1103)
        GetY_call_result_265864 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 38), GetY_265862, *[], **kwargs_265863)
        
        # Applying the binary operator '-' (line 1103)
        result_sub_265865 = python_operator(stypy.reporting.localization.Localization(__file__, 1103, 12), '-', height_265860, GetY_call_result_265864)
        
        # Assigning a type to the variable 'y' (line 1103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1103, 8), 'y', result_sub_265865)
        
        # Call to Skip(...): (line 1105)
        # Processing the call keyword arguments (line 1105)
        kwargs_265868 = {}
        # Getting the type of 'evt' (line 1105)
        evt_265866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1105)
        Skip_265867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1105, 8), evt_265866, 'Skip')
        # Calling Skip(args, kwargs) (line 1105)
        Skip_call_result_265869 = invoke(stypy.reporting.localization.Localization(__file__, 1105, 8), Skip_265867, *[], **kwargs_265868)
        
        
        # Call to _set_capture(...): (line 1106)
        # Processing the call arguments (line 1106)
        # Getting the type of 'False' (line 1106)
        False_265872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 26), 'False', False)
        # Processing the call keyword arguments (line 1106)
        kwargs_265873 = {}
        # Getting the type of 'self' (line 1106)
        self_265870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 8), 'self', False)
        # Obtaining the member '_set_capture' of a type (line 1106)
        _set_capture_265871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1106, 8), self_265870, '_set_capture')
        # Calling _set_capture(args, kwargs) (line 1106)
        _set_capture_call_result_265874 = invoke(stypy.reporting.localization.Localization(__file__, 1106, 8), _set_capture_265871, *[False_265872], **kwargs_265873)
        
        
        # Call to button_release_event(...): (line 1107)
        # Processing the call arguments (line 1107)
        # Getting the type of 'self' (line 1107)
        self_265877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 46), 'self', False)
        # Getting the type of 'x' (line 1107)
        x_265878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 52), 'x', False)
        # Getting the type of 'y' (line 1107)
        y_265879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 55), 'y', False)
        int_265880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 58), 'int')
        # Processing the call keyword arguments (line 1107)
        # Getting the type of 'evt' (line 1107)
        evt_265881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 70), 'evt', False)
        keyword_265882 = evt_265881
        kwargs_265883 = {'guiEvent': keyword_265882}
        # Getting the type of 'FigureCanvasBase' (line 1107)
        FigureCanvasBase_265875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'button_release_event' of a type (line 1107)
        button_release_event_265876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 8), FigureCanvasBase_265875, 'button_release_event')
        # Calling button_release_event(args, kwargs) (line 1107)
        button_release_event_call_result_265884 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 8), button_release_event_265876, *[self_265877, x_265878, y_265879, int_265880], **kwargs_265883)
        
        
        # ################# End of '_onMiddleButtonUp(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onMiddleButtonUp' in the type store
        # Getting the type of 'stypy_return_type' (line 1100)
        stypy_return_type_265885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265885)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onMiddleButtonUp'
        return stypy_return_type_265885


    @norecursion
    def _onMouseWheel(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onMouseWheel'
        module_type_store = module_type_store.open_function_context('_onMouseWheel', 1109, 4, False)
        # Assigning a type to the variable 'self' (line 1110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onMouseWheel.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onMouseWheel.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onMouseWheel.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onMouseWheel.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onMouseWheel')
        FigureCanvasWx._onMouseWheel.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onMouseWheel.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onMouseWheel.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onMouseWheel.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onMouseWheel.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onMouseWheel.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onMouseWheel.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onMouseWheel', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onMouseWheel', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onMouseWheel(...)' code ##################

        unicode_265886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1110, 8), 'unicode', u'Translate mouse wheel events into matplotlib events')
        
        # Assigning a Call to a Name (line 1113):
        
        # Assigning a Call to a Name (line 1113):
        
        # Call to GetX(...): (line 1113)
        # Processing the call keyword arguments (line 1113)
        kwargs_265889 = {}
        # Getting the type of 'evt' (line 1113)
        evt_265887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 12), 'evt', False)
        # Obtaining the member 'GetX' of a type (line 1113)
        GetX_265888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1113, 12), evt_265887, 'GetX')
        # Calling GetX(args, kwargs) (line 1113)
        GetX_call_result_265890 = invoke(stypy.reporting.localization.Localization(__file__, 1113, 12), GetX_265888, *[], **kwargs_265889)
        
        # Assigning a type to the variable 'x' (line 1113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 8), 'x', GetX_call_result_265890)
        
        # Assigning a BinOp to a Name (line 1114):
        
        # Assigning a BinOp to a Name (line 1114):
        # Getting the type of 'self' (line 1114)
        self_265891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 12), 'self')
        # Obtaining the member 'figure' of a type (line 1114)
        figure_265892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 12), self_265891, 'figure')
        # Obtaining the member 'bbox' of a type (line 1114)
        bbox_265893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 12), figure_265892, 'bbox')
        # Obtaining the member 'height' of a type (line 1114)
        height_265894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 12), bbox_265893, 'height')
        
        # Call to GetY(...): (line 1114)
        # Processing the call keyword arguments (line 1114)
        kwargs_265897 = {}
        # Getting the type of 'evt' (line 1114)
        evt_265895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 38), 'evt', False)
        # Obtaining the member 'GetY' of a type (line 1114)
        GetY_265896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 38), evt_265895, 'GetY')
        # Calling GetY(args, kwargs) (line 1114)
        GetY_call_result_265898 = invoke(stypy.reporting.localization.Localization(__file__, 1114, 38), GetY_265896, *[], **kwargs_265897)
        
        # Applying the binary operator '-' (line 1114)
        result_sub_265899 = python_operator(stypy.reporting.localization.Localization(__file__, 1114, 12), '-', height_265894, GetY_call_result_265898)
        
        # Assigning a type to the variable 'y' (line 1114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'y', result_sub_265899)
        
        # Assigning a Call to a Name (line 1117):
        
        # Assigning a Call to a Name (line 1117):
        
        # Call to GetWheelDelta(...): (line 1117)
        # Processing the call keyword arguments (line 1117)
        kwargs_265902 = {}
        # Getting the type of 'evt' (line 1117)
        evt_265900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 16), 'evt', False)
        # Obtaining the member 'GetWheelDelta' of a type (line 1117)
        GetWheelDelta_265901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 16), evt_265900, 'GetWheelDelta')
        # Calling GetWheelDelta(args, kwargs) (line 1117)
        GetWheelDelta_call_result_265903 = invoke(stypy.reporting.localization.Localization(__file__, 1117, 16), GetWheelDelta_265901, *[], **kwargs_265902)
        
        # Assigning a type to the variable 'delta' (line 1117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1117, 8), 'delta', GetWheelDelta_call_result_265903)
        
        # Assigning a Call to a Name (line 1118):
        
        # Assigning a Call to a Name (line 1118):
        
        # Call to GetWheelRotation(...): (line 1118)
        # Processing the call keyword arguments (line 1118)
        kwargs_265906 = {}
        # Getting the type of 'evt' (line 1118)
        evt_265904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 19), 'evt', False)
        # Obtaining the member 'GetWheelRotation' of a type (line 1118)
        GetWheelRotation_265905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 19), evt_265904, 'GetWheelRotation')
        # Calling GetWheelRotation(args, kwargs) (line 1118)
        GetWheelRotation_call_result_265907 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 19), GetWheelRotation_265905, *[], **kwargs_265906)
        
        # Assigning a type to the variable 'rotation' (line 1118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 8), 'rotation', GetWheelRotation_call_result_265907)
        
        # Assigning a Call to a Name (line 1119):
        
        # Assigning a Call to a Name (line 1119):
        
        # Call to GetLinesPerAction(...): (line 1119)
        # Processing the call keyword arguments (line 1119)
        kwargs_265910 = {}
        # Getting the type of 'evt' (line 1119)
        evt_265908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 15), 'evt', False)
        # Obtaining the member 'GetLinesPerAction' of a type (line 1119)
        GetLinesPerAction_265909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 15), evt_265908, 'GetLinesPerAction')
        # Calling GetLinesPerAction(args, kwargs) (line 1119)
        GetLinesPerAction_call_result_265911 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 15), GetLinesPerAction_265909, *[], **kwargs_265910)
        
        # Assigning a type to the variable 'rate' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'rate', GetLinesPerAction_call_result_265911)
        
        # Assigning a BinOp to a Name (line 1121):
        
        # Assigning a BinOp to a Name (line 1121):
        # Getting the type of 'rate' (line 1121)
        rate_265912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 15), 'rate')
        
        # Call to float(...): (line 1121)
        # Processing the call arguments (line 1121)
        # Getting the type of 'rotation' (line 1121)
        rotation_265914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 28), 'rotation', False)
        # Processing the call keyword arguments (line 1121)
        kwargs_265915 = {}
        # Getting the type of 'float' (line 1121)
        float_265913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 22), 'float', False)
        # Calling float(args, kwargs) (line 1121)
        float_call_result_265916 = invoke(stypy.reporting.localization.Localization(__file__, 1121, 22), float_265913, *[rotation_265914], **kwargs_265915)
        
        # Applying the binary operator '*' (line 1121)
        result_mul_265917 = python_operator(stypy.reporting.localization.Localization(__file__, 1121, 15), '*', rate_265912, float_call_result_265916)
        
        # Getting the type of 'delta' (line 1121)
        delta_265918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 40), 'delta')
        # Applying the binary operator 'div' (line 1121)
        result_div_265919 = python_operator(stypy.reporting.localization.Localization(__file__, 1121, 38), 'div', result_mul_265917, delta_265918)
        
        # Assigning a type to the variable 'step' (line 1121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1121, 8), 'step', result_div_265919)
        
        # Call to Skip(...): (line 1124)
        # Processing the call keyword arguments (line 1124)
        kwargs_265922 = {}
        # Getting the type of 'evt' (line 1124)
        evt_265920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1124)
        Skip_265921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 8), evt_265920, 'Skip')
        # Calling Skip(args, kwargs) (line 1124)
        Skip_call_result_265923 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 8), Skip_265921, *[], **kwargs_265922)
        
        
        
        # Getting the type of 'wx' (line 1128)
        wx_265924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 11), 'wx')
        # Obtaining the member 'Platform' of a type (line 1128)
        Platform_265925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 11), wx_265924, 'Platform')
        unicode_265926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 26), 'unicode', u'__WXMAC__')
        # Applying the binary operator '==' (line 1128)
        result_eq_265927 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 11), '==', Platform_265925, unicode_265926)
        
        # Testing the type of an if condition (line 1128)
        if_condition_265928 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1128, 8), result_eq_265927)
        # Assigning a type to the variable 'if_condition_265928' (line 1128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 8), 'if_condition_265928', if_condition_265928)
        # SSA begins for if statement (line 1128)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 1129)
        unicode_265929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1129, 33), 'unicode', u'_skipwheelevent')
        # Getting the type of 'self' (line 1129)
        self_265930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 27), 'self')
        
        (may_be_265931, more_types_in_union_265932) = may_not_provide_member(unicode_265929, self_265930)

        if may_be_265931:

            if more_types_in_union_265932:
                # Runtime conditional SSA (line 1129)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 1129)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 12), 'self', remove_member_provider_from_union(self_265930, u'_skipwheelevent'))
            
            # Assigning a Name to a Attribute (line 1130):
            
            # Assigning a Name to a Attribute (line 1130):
            # Getting the type of 'True' (line 1130)
            True_265933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 39), 'True')
            # Getting the type of 'self' (line 1130)
            self_265934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 16), 'self')
            # Setting the type of the member '_skipwheelevent' of a type (line 1130)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 16), self_265934, '_skipwheelevent', True_265933)

            if more_types_in_union_265932:
                # Runtime conditional SSA for else branch (line 1129)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_265931) or more_types_in_union_265932):
            # Assigning a type to the variable 'self' (line 1129)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 12), 'self', remove_not_member_provider_from_union(self_265930, u'_skipwheelevent'))
            
            # Getting the type of 'self' (line 1131)
            self_265935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 17), 'self')
            # Obtaining the member '_skipwheelevent' of a type (line 1131)
            _skipwheelevent_265936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 17), self_265935, '_skipwheelevent')
            # Testing the type of an if condition (line 1131)
            if_condition_265937 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1131, 17), _skipwheelevent_265936)
            # Assigning a type to the variable 'if_condition_265937' (line 1131)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1131, 17), 'if_condition_265937', if_condition_265937)
            # SSA begins for if statement (line 1131)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 1132):
            
            # Assigning a Name to a Attribute (line 1132):
            # Getting the type of 'False' (line 1132)
            False_265938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 39), 'False')
            # Getting the type of 'self' (line 1132)
            self_265939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 16), 'self')
            # Setting the type of the member '_skipwheelevent' of a type (line 1132)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 16), self_265939, '_skipwheelevent', False_265938)
            # Assigning a type to the variable 'stypy_return_type' (line 1133)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1133, 16), 'stypy_return_type', types.NoneType)
            # SSA branch for the else part of an if statement (line 1131)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Attribute (line 1135):
            
            # Assigning a Name to a Attribute (line 1135):
            # Getting the type of 'True' (line 1135)
            True_265940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 39), 'True')
            # Getting the type of 'self' (line 1135)
            self_265941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 16), 'self')
            # Setting the type of the member '_skipwheelevent' of a type (line 1135)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1135, 16), self_265941, '_skipwheelevent', True_265940)
            # SSA join for if statement (line 1131)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_265931 and more_types_in_union_265932):
                # SSA join for if statement (line 1129)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 1128)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to scroll_event(...): (line 1138)
        # Processing the call arguments (line 1138)
        # Getting the type of 'self' (line 1138)
        self_265944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 38), 'self', False)
        # Getting the type of 'x' (line 1138)
        x_265945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 44), 'x', False)
        # Getting the type of 'y' (line 1138)
        y_265946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 47), 'y', False)
        # Getting the type of 'step' (line 1138)
        step_265947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 50), 'step', False)
        # Processing the call keyword arguments (line 1138)
        # Getting the type of 'evt' (line 1138)
        evt_265948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 65), 'evt', False)
        keyword_265949 = evt_265948
        kwargs_265950 = {'guiEvent': keyword_265949}
        # Getting the type of 'FigureCanvasBase' (line 1138)
        FigureCanvasBase_265942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'scroll_event' of a type (line 1138)
        scroll_event_265943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 8), FigureCanvasBase_265942, 'scroll_event')
        # Calling scroll_event(args, kwargs) (line 1138)
        scroll_event_call_result_265951 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 8), scroll_event_265943, *[self_265944, x_265945, y_265946, step_265947], **kwargs_265950)
        
        
        # ################# End of '_onMouseWheel(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onMouseWheel' in the type store
        # Getting the type of 'stypy_return_type' (line 1109)
        stypy_return_type_265952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265952)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onMouseWheel'
        return stypy_return_type_265952


    @norecursion
    def _onMotion(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onMotion'
        module_type_store = module_type_store.open_function_context('_onMotion', 1140, 4, False)
        # Assigning a type to the variable 'self' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onMotion.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onMotion.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onMotion.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onMotion.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onMotion')
        FigureCanvasWx._onMotion.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onMotion.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onMotion.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onMotion.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onMotion.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onMotion.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onMotion.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onMotion', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onMotion', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onMotion(...)' code ##################

        unicode_265953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1141, 8), 'unicode', u'Start measuring on an axis.')
        
        # Assigning a Call to a Name (line 1143):
        
        # Assigning a Call to a Name (line 1143):
        
        # Call to GetX(...): (line 1143)
        # Processing the call keyword arguments (line 1143)
        kwargs_265956 = {}
        # Getting the type of 'evt' (line 1143)
        evt_265954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 12), 'evt', False)
        # Obtaining the member 'GetX' of a type (line 1143)
        GetX_265955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 12), evt_265954, 'GetX')
        # Calling GetX(args, kwargs) (line 1143)
        GetX_call_result_265957 = invoke(stypy.reporting.localization.Localization(__file__, 1143, 12), GetX_265955, *[], **kwargs_265956)
        
        # Assigning a type to the variable 'x' (line 1143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 8), 'x', GetX_call_result_265957)
        
        # Assigning a BinOp to a Name (line 1144):
        
        # Assigning a BinOp to a Name (line 1144):
        # Getting the type of 'self' (line 1144)
        self_265958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 12), 'self')
        # Obtaining the member 'figure' of a type (line 1144)
        figure_265959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 12), self_265958, 'figure')
        # Obtaining the member 'bbox' of a type (line 1144)
        bbox_265960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 12), figure_265959, 'bbox')
        # Obtaining the member 'height' of a type (line 1144)
        height_265961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 12), bbox_265960, 'height')
        
        # Call to GetY(...): (line 1144)
        # Processing the call keyword arguments (line 1144)
        kwargs_265964 = {}
        # Getting the type of 'evt' (line 1144)
        evt_265962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 38), 'evt', False)
        # Obtaining the member 'GetY' of a type (line 1144)
        GetY_265963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 38), evt_265962, 'GetY')
        # Calling GetY(args, kwargs) (line 1144)
        GetY_call_result_265965 = invoke(stypy.reporting.localization.Localization(__file__, 1144, 38), GetY_265963, *[], **kwargs_265964)
        
        # Applying the binary operator '-' (line 1144)
        result_sub_265966 = python_operator(stypy.reporting.localization.Localization(__file__, 1144, 12), '-', height_265961, GetY_call_result_265965)
        
        # Assigning a type to the variable 'y' (line 1144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 8), 'y', result_sub_265966)
        
        # Call to Skip(...): (line 1145)
        # Processing the call keyword arguments (line 1145)
        kwargs_265969 = {}
        # Getting the type of 'evt' (line 1145)
        evt_265967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1145)
        Skip_265968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 8), evt_265967, 'Skip')
        # Calling Skip(args, kwargs) (line 1145)
        Skip_call_result_265970 = invoke(stypy.reporting.localization.Localization(__file__, 1145, 8), Skip_265968, *[], **kwargs_265969)
        
        
        # Call to motion_notify_event(...): (line 1146)
        # Processing the call arguments (line 1146)
        # Getting the type of 'self' (line 1146)
        self_265973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 45), 'self', False)
        # Getting the type of 'x' (line 1146)
        x_265974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 51), 'x', False)
        # Getting the type of 'y' (line 1146)
        y_265975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 54), 'y', False)
        # Processing the call keyword arguments (line 1146)
        # Getting the type of 'evt' (line 1146)
        evt_265976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 66), 'evt', False)
        keyword_265977 = evt_265976
        kwargs_265978 = {'guiEvent': keyword_265977}
        # Getting the type of 'FigureCanvasBase' (line 1146)
        FigureCanvasBase_265971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'motion_notify_event' of a type (line 1146)
        motion_notify_event_265972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 8), FigureCanvasBase_265971, 'motion_notify_event')
        # Calling motion_notify_event(args, kwargs) (line 1146)
        motion_notify_event_call_result_265979 = invoke(stypy.reporting.localization.Localization(__file__, 1146, 8), motion_notify_event_265972, *[self_265973, x_265974, y_265975], **kwargs_265978)
        
        
        # ################# End of '_onMotion(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onMotion' in the type store
        # Getting the type of 'stypy_return_type' (line 1140)
        stypy_return_type_265980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265980)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onMotion'
        return stypy_return_type_265980


    @norecursion
    def _onLeave(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onLeave'
        module_type_store = module_type_store.open_function_context('_onLeave', 1148, 4, False)
        # Assigning a type to the variable 'self' (line 1149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onLeave.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onLeave.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onLeave.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onLeave.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onLeave')
        FigureCanvasWx._onLeave.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onLeave.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onLeave.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onLeave.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onLeave.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onLeave.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onLeave.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onLeave', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onLeave', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onLeave(...)' code ##################

        unicode_265981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1149, 8), 'unicode', u'Mouse has left the window.')
        
        # Call to Skip(...): (line 1151)
        # Processing the call keyword arguments (line 1151)
        kwargs_265984 = {}
        # Getting the type of 'evt' (line 1151)
        evt_265982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1151)
        Skip_265983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1151, 8), evt_265982, 'Skip')
        # Calling Skip(args, kwargs) (line 1151)
        Skip_call_result_265985 = invoke(stypy.reporting.localization.Localization(__file__, 1151, 8), Skip_265983, *[], **kwargs_265984)
        
        
        # Call to leave_notify_event(...): (line 1152)
        # Processing the call arguments (line 1152)
        # Getting the type of 'self' (line 1152)
        self_265988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 44), 'self', False)
        # Processing the call keyword arguments (line 1152)
        # Getting the type of 'evt' (line 1152)
        evt_265989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 59), 'evt', False)
        keyword_265990 = evt_265989
        kwargs_265991 = {'guiEvent': keyword_265990}
        # Getting the type of 'FigureCanvasBase' (line 1152)
        FigureCanvasBase_265986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'leave_notify_event' of a type (line 1152)
        leave_notify_event_265987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 8), FigureCanvasBase_265986, 'leave_notify_event')
        # Calling leave_notify_event(args, kwargs) (line 1152)
        leave_notify_event_call_result_265992 = invoke(stypy.reporting.localization.Localization(__file__, 1152, 8), leave_notify_event_265987, *[self_265988], **kwargs_265991)
        
        
        # ################# End of '_onLeave(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onLeave' in the type store
        # Getting the type of 'stypy_return_type' (line 1148)
        stypy_return_type_265993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265993)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onLeave'
        return stypy_return_type_265993


    @norecursion
    def _onEnter(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onEnter'
        module_type_store = module_type_store.open_function_context('_onEnter', 1154, 4, False)
        # Assigning a type to the variable 'self' (line 1155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasWx._onEnter.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasWx._onEnter.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasWx._onEnter.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasWx._onEnter.__dict__.__setitem__('stypy_function_name', 'FigureCanvasWx._onEnter')
        FigureCanvasWx._onEnter.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureCanvasWx._onEnter.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasWx._onEnter.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasWx._onEnter.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasWx._onEnter.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasWx._onEnter.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasWx._onEnter.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasWx._onEnter', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onEnter', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onEnter(...)' code ##################

        unicode_265994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1155, 8), 'unicode', u'Mouse has entered the window.')
        
        # Call to enter_notify_event(...): (line 1156)
        # Processing the call arguments (line 1156)
        # Getting the type of 'self' (line 1156)
        self_265997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 44), 'self', False)
        # Processing the call keyword arguments (line 1156)
        # Getting the type of 'evt' (line 1156)
        evt_265998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 59), 'evt', False)
        keyword_265999 = evt_265998
        kwargs_266000 = {'guiEvent': keyword_265999}
        # Getting the type of 'FigureCanvasBase' (line 1156)
        FigureCanvasBase_265995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 8), 'FigureCanvasBase', False)
        # Obtaining the member 'enter_notify_event' of a type (line 1156)
        enter_notify_event_265996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1156, 8), FigureCanvasBase_265995, 'enter_notify_event')
        # Calling enter_notify_event(args, kwargs) (line 1156)
        enter_notify_event_call_result_266001 = invoke(stypy.reporting.localization.Localization(__file__, 1156, 8), enter_notify_event_265996, *[self_265997], **kwargs_266000)
        
        
        # ################# End of '_onEnter(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onEnter' in the type store
        # Getting the type of 'stypy_return_type' (line 1154)
        stypy_return_type_266002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_266002)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onEnter'
        return stypy_return_type_266002


# Assigning a type to the variable 'FigureCanvasWx' (line 552)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 0), 'FigureCanvasWx', FigureCanvasWx)

# Assigning a Dict to a Name (line 562):

# Obtaining an instance of the builtin type 'dict' (line 562)
dict_266003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 14), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 562)
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 563)
wx_266004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 8), 'wx')
# Obtaining the member 'WXK_CONTROL' of a type (line 563)
WXK_CONTROL_266005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 8), wx_266004, 'WXK_CONTROL')
unicode_266006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 24), 'unicode', u'control')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_CONTROL_266005, unicode_266006))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 564)
wx_266007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'wx')
# Obtaining the member 'WXK_SHIFT' of a type (line 564)
WXK_SHIFT_266008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 8), wx_266007, 'WXK_SHIFT')
unicode_266009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 564, 22), 'unicode', u'shift')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_SHIFT_266008, unicode_266009))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 565)
wx_266010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'wx')
# Obtaining the member 'WXK_ALT' of a type (line 565)
WXK_ALT_266011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 8), wx_266010, 'WXK_ALT')
unicode_266012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 20), 'unicode', u'alt')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_ALT_266011, unicode_266012))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 566)
wx_266013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 8), 'wx')
# Obtaining the member 'WXK_LEFT' of a type (line 566)
WXK_LEFT_266014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 8), wx_266013, 'WXK_LEFT')
unicode_266015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 566, 21), 'unicode', u'left')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_LEFT_266014, unicode_266015))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 567)
wx_266016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 8), 'wx')
# Obtaining the member 'WXK_UP' of a type (line 567)
WXK_UP_266017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 8), wx_266016, 'WXK_UP')
unicode_266018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 19), 'unicode', u'up')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_UP_266017, unicode_266018))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 568)
wx_266019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'wx')
# Obtaining the member 'WXK_RIGHT' of a type (line 568)
WXK_RIGHT_266020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 8), wx_266019, 'WXK_RIGHT')
unicode_266021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 22), 'unicode', u'right')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_RIGHT_266020, unicode_266021))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 569)
wx_266022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 8), 'wx')
# Obtaining the member 'WXK_DOWN' of a type (line 569)
WXK_DOWN_266023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 8), wx_266022, 'WXK_DOWN')
unicode_266024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 21), 'unicode', u'down')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_DOWN_266023, unicode_266024))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 570)
wx_266025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 8), 'wx')
# Obtaining the member 'WXK_ESCAPE' of a type (line 570)
WXK_ESCAPE_266026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 8), wx_266025, 'WXK_ESCAPE')
unicode_266027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 23), 'unicode', u'escape')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_ESCAPE_266026, unicode_266027))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 571)
wx_266028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 8), 'wx')
# Obtaining the member 'WXK_F1' of a type (line 571)
WXK_F1_266029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 8), wx_266028, 'WXK_F1')
unicode_266030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 571, 19), 'unicode', u'f1')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_F1_266029, unicode_266030))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 572)
wx_266031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'wx')
# Obtaining the member 'WXK_F2' of a type (line 572)
WXK_F2_266032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 8), wx_266031, 'WXK_F2')
unicode_266033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 19), 'unicode', u'f2')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_F2_266032, unicode_266033))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 573)
wx_266034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 8), 'wx')
# Obtaining the member 'WXK_F3' of a type (line 573)
WXK_F3_266035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 8), wx_266034, 'WXK_F3')
unicode_266036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 19), 'unicode', u'f3')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_F3_266035, unicode_266036))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 574)
wx_266037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 8), 'wx')
# Obtaining the member 'WXK_F4' of a type (line 574)
WXK_F4_266038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 8), wx_266037, 'WXK_F4')
unicode_266039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 574, 19), 'unicode', u'f4')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_F4_266038, unicode_266039))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 575)
wx_266040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 8), 'wx')
# Obtaining the member 'WXK_F5' of a type (line 575)
WXK_F5_266041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 8), wx_266040, 'WXK_F5')
unicode_266042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 575, 19), 'unicode', u'f5')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_F5_266041, unicode_266042))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 576)
wx_266043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 8), 'wx')
# Obtaining the member 'WXK_F6' of a type (line 576)
WXK_F6_266044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 8), wx_266043, 'WXK_F6')
unicode_266045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 19), 'unicode', u'f6')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_F6_266044, unicode_266045))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 577)
wx_266046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'wx')
# Obtaining the member 'WXK_F7' of a type (line 577)
WXK_F7_266047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 8), wx_266046, 'WXK_F7')
unicode_266048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 19), 'unicode', u'f7')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_F7_266047, unicode_266048))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 578)
wx_266049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'wx')
# Obtaining the member 'WXK_F8' of a type (line 578)
WXK_F8_266050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 8), wx_266049, 'WXK_F8')
unicode_266051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 19), 'unicode', u'f8')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_F8_266050, unicode_266051))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 579)
wx_266052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 8), 'wx')
# Obtaining the member 'WXK_F9' of a type (line 579)
WXK_F9_266053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 579, 8), wx_266052, 'WXK_F9')
unicode_266054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 19), 'unicode', u'f9')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_F9_266053, unicode_266054))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 580)
wx_266055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 8), 'wx')
# Obtaining the member 'WXK_F10' of a type (line 580)
WXK_F10_266056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 8), wx_266055, 'WXK_F10')
unicode_266057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 580, 20), 'unicode', u'f10')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_F10_266056, unicode_266057))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 581)
wx_266058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 8), 'wx')
# Obtaining the member 'WXK_F11' of a type (line 581)
WXK_F11_266059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 8), wx_266058, 'WXK_F11')
unicode_266060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 20), 'unicode', u'f11')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_F11_266059, unicode_266060))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 582)
wx_266061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 8), 'wx')
# Obtaining the member 'WXK_F12' of a type (line 582)
WXK_F12_266062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 8), wx_266061, 'WXK_F12')
unicode_266063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 20), 'unicode', u'f12')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_F12_266062, unicode_266063))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 583)
wx_266064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 8), 'wx')
# Obtaining the member 'WXK_SCROLL' of a type (line 583)
WXK_SCROLL_266065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 8), wx_266064, 'WXK_SCROLL')
unicode_266066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 583, 23), 'unicode', u'scroll_lock')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_SCROLL_266065, unicode_266066))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 584)
wx_266067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 8), 'wx')
# Obtaining the member 'WXK_PAUSE' of a type (line 584)
WXK_PAUSE_266068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 8), wx_266067, 'WXK_PAUSE')
unicode_266069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 22), 'unicode', u'break')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_PAUSE_266068, unicode_266069))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 585)
wx_266070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 8), 'wx')
# Obtaining the member 'WXK_BACK' of a type (line 585)
WXK_BACK_266071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 8), wx_266070, 'WXK_BACK')
unicode_266072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 21), 'unicode', u'backspace')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_BACK_266071, unicode_266072))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 586)
wx_266073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 8), 'wx')
# Obtaining the member 'WXK_RETURN' of a type (line 586)
WXK_RETURN_266074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 586, 8), wx_266073, 'WXK_RETURN')
unicode_266075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 586, 23), 'unicode', u'enter')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_RETURN_266074, unicode_266075))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 587)
wx_266076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 8), 'wx')
# Obtaining the member 'WXK_INSERT' of a type (line 587)
WXK_INSERT_266077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 8), wx_266076, 'WXK_INSERT')
unicode_266078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 587, 23), 'unicode', u'insert')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_INSERT_266077, unicode_266078))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 588)
wx_266079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 8), 'wx')
# Obtaining the member 'WXK_DELETE' of a type (line 588)
WXK_DELETE_266080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 8), wx_266079, 'WXK_DELETE')
unicode_266081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, 23), 'unicode', u'delete')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_DELETE_266080, unicode_266081))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 589)
wx_266082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 8), 'wx')
# Obtaining the member 'WXK_HOME' of a type (line 589)
WXK_HOME_266083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 8), wx_266082, 'WXK_HOME')
unicode_266084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 589, 21), 'unicode', u'home')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_HOME_266083, unicode_266084))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 590)
wx_266085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 8), 'wx')
# Obtaining the member 'WXK_END' of a type (line 590)
WXK_END_266086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 8), wx_266085, 'WXK_END')
unicode_266087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 20), 'unicode', u'end')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_END_266086, unicode_266087))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 591)
wx_266088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 8), 'wx')
# Obtaining the member 'WXK_PAGEUP' of a type (line 591)
WXK_PAGEUP_266089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 8), wx_266088, 'WXK_PAGEUP')
unicode_266090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 23), 'unicode', u'pageup')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_PAGEUP_266089, unicode_266090))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 592)
wx_266091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 8), 'wx')
# Obtaining the member 'WXK_PAGEDOWN' of a type (line 592)
WXK_PAGEDOWN_266092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 8), wx_266091, 'WXK_PAGEDOWN')
unicode_266093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 25), 'unicode', u'pagedown')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_PAGEDOWN_266092, unicode_266093))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 593)
wx_266094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD0' of a type (line 593)
WXK_NUMPAD0_266095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 8), wx_266094, 'WXK_NUMPAD0')
unicode_266096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 593, 24), 'unicode', u'0')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD0_266095, unicode_266096))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 594)
wx_266097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD1' of a type (line 594)
WXK_NUMPAD1_266098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 8), wx_266097, 'WXK_NUMPAD1')
unicode_266099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 24), 'unicode', u'1')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD1_266098, unicode_266099))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 595)
wx_266100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD2' of a type (line 595)
WXK_NUMPAD2_266101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 8), wx_266100, 'WXK_NUMPAD2')
unicode_266102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 24), 'unicode', u'2')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD2_266101, unicode_266102))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 596)
wx_266103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD3' of a type (line 596)
WXK_NUMPAD3_266104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 8), wx_266103, 'WXK_NUMPAD3')
unicode_266105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 24), 'unicode', u'3')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD3_266104, unicode_266105))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 597)
wx_266106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD4' of a type (line 597)
WXK_NUMPAD4_266107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 8), wx_266106, 'WXK_NUMPAD4')
unicode_266108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 24), 'unicode', u'4')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD4_266107, unicode_266108))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 598)
wx_266109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD5' of a type (line 598)
WXK_NUMPAD5_266110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 8), wx_266109, 'WXK_NUMPAD5')
unicode_266111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 24), 'unicode', u'5')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD5_266110, unicode_266111))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 599)
wx_266112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD6' of a type (line 599)
WXK_NUMPAD6_266113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 8), wx_266112, 'WXK_NUMPAD6')
unicode_266114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 24), 'unicode', u'6')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD6_266113, unicode_266114))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 600)
wx_266115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD7' of a type (line 600)
WXK_NUMPAD7_266116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 8), wx_266115, 'WXK_NUMPAD7')
unicode_266117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 600, 24), 'unicode', u'7')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD7_266116, unicode_266117))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 601)
wx_266118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD8' of a type (line 601)
WXK_NUMPAD8_266119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 8), wx_266118, 'WXK_NUMPAD8')
unicode_266120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 24), 'unicode', u'8')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD8_266119, unicode_266120))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 602)
wx_266121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD9' of a type (line 602)
WXK_NUMPAD9_266122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 8), wx_266121, 'WXK_NUMPAD9')
unicode_266123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 24), 'unicode', u'9')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD9_266122, unicode_266123))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 603)
wx_266124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_ADD' of a type (line 603)
WXK_NUMPAD_ADD_266125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 8), wx_266124, 'WXK_NUMPAD_ADD')
unicode_266126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 27), 'unicode', u'+')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_ADD_266125, unicode_266126))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 604)
wx_266127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_SUBTRACT' of a type (line 604)
WXK_NUMPAD_SUBTRACT_266128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 8), wx_266127, 'WXK_NUMPAD_SUBTRACT')
unicode_266129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, 32), 'unicode', u'-')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_SUBTRACT_266128, unicode_266129))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 605)
wx_266130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_MULTIPLY' of a type (line 605)
WXK_NUMPAD_MULTIPLY_266131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 8), wx_266130, 'WXK_NUMPAD_MULTIPLY')
unicode_266132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 32), 'unicode', u'*')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_MULTIPLY_266131, unicode_266132))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 606)
wx_266133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_DIVIDE' of a type (line 606)
WXK_NUMPAD_DIVIDE_266134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 8), wx_266133, 'WXK_NUMPAD_DIVIDE')
unicode_266135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 30), 'unicode', u'/')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_DIVIDE_266134, unicode_266135))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 607)
wx_266136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_DECIMAL' of a type (line 607)
WXK_NUMPAD_DECIMAL_266137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 8), wx_266136, 'WXK_NUMPAD_DECIMAL')
unicode_266138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 31), 'unicode', u'dec')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_DECIMAL_266137, unicode_266138))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 608)
wx_266139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_ENTER' of a type (line 608)
WXK_NUMPAD_ENTER_266140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 8), wx_266139, 'WXK_NUMPAD_ENTER')
unicode_266141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 608, 29), 'unicode', u'enter')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_ENTER_266140, unicode_266141))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 609)
wx_266142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_UP' of a type (line 609)
WXK_NUMPAD_UP_266143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 8), wx_266142, 'WXK_NUMPAD_UP')
unicode_266144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 26), 'unicode', u'up')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_UP_266143, unicode_266144))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 610)
wx_266145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_RIGHT' of a type (line 610)
WXK_NUMPAD_RIGHT_266146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 8), wx_266145, 'WXK_NUMPAD_RIGHT')
unicode_266147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 29), 'unicode', u'right')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_RIGHT_266146, unicode_266147))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 611)
wx_266148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_DOWN' of a type (line 611)
WXK_NUMPAD_DOWN_266149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 8), wx_266148, 'WXK_NUMPAD_DOWN')
unicode_266150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 28), 'unicode', u'down')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_DOWN_266149, unicode_266150))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 612)
wx_266151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_LEFT' of a type (line 612)
WXK_NUMPAD_LEFT_266152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 8), wx_266151, 'WXK_NUMPAD_LEFT')
unicode_266153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 28), 'unicode', u'left')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_LEFT_266152, unicode_266153))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 613)
wx_266154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_PAGEUP' of a type (line 613)
WXK_NUMPAD_PAGEUP_266155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 8), wx_266154, 'WXK_NUMPAD_PAGEUP')
unicode_266156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 30), 'unicode', u'pageup')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_PAGEUP_266155, unicode_266156))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 614)
wx_266157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_PAGEDOWN' of a type (line 614)
WXK_NUMPAD_PAGEDOWN_266158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 8), wx_266157, 'WXK_NUMPAD_PAGEDOWN')
unicode_266159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 32), 'unicode', u'pagedown')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_PAGEDOWN_266158, unicode_266159))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 615)
wx_266160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_HOME' of a type (line 615)
WXK_NUMPAD_HOME_266161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 8), wx_266160, 'WXK_NUMPAD_HOME')
unicode_266162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 28), 'unicode', u'home')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_HOME_266161, unicode_266162))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 616)
wx_266163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_END' of a type (line 616)
WXK_NUMPAD_END_266164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 8), wx_266163, 'WXK_NUMPAD_END')
unicode_266165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 27), 'unicode', u'end')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_END_266164, unicode_266165))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 617)
wx_266166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_INSERT' of a type (line 617)
WXK_NUMPAD_INSERT_266167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 8), wx_266166, 'WXK_NUMPAD_INSERT')
unicode_266168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 30), 'unicode', u'insert')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_INSERT_266167, unicode_266168))
# Adding element type (key, value) (line 562)
# Getting the type of 'wx' (line 618)
wx_266169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'wx')
# Obtaining the member 'WXK_NUMPAD_DELETE' of a type (line 618)
WXK_NUMPAD_DELETE_266170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 8), wx_266169, 'WXK_NUMPAD_DELETE')
unicode_266171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 618, 30), 'unicode', u'delete')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 14), dict_266003, (WXK_NUMPAD_DELETE_266170, unicode_266171))

# Getting the type of 'FigureCanvasWx'
FigureCanvasWx_266172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasWx')
# Setting the type of the member 'keyvald' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasWx_266172, 'keyvald', dict_266003)

# Assigning a Call to a Name (line 836):

# Call to copy(...): (line 836)
# Processing the call keyword arguments (line 836)
kwargs_266176 = {}
# Getting the type of 'FigureCanvasBase' (line 836)
FigureCanvasBase_266173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 16), 'FigureCanvasBase', False)
# Obtaining the member 'filetypes' of a type (line 836)
filetypes_266174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 16), FigureCanvasBase_266173, 'filetypes')
# Obtaining the member 'copy' of a type (line 836)
copy_266175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 16), filetypes_266174, 'copy')
# Calling copy(args, kwargs) (line 836)
copy_call_result_266177 = invoke(stypy.reporting.localization.Localization(__file__, 836, 16), copy_266175, *[], **kwargs_266176)

# Getting the type of 'FigureCanvasWx'
FigureCanvasWx_266178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasWx')
# Setting the type of the member 'filetypes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasWx_266178, 'filetypes', copy_call_result_266177)

# Assigning a Str to a Subscript (line 837):
unicode_266179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 23), 'unicode', u'Windows bitmap')
# Getting the type of 'FigureCanvasWx'
FigureCanvasWx_266180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasWx')
# Setting the type of the member 'filetypes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasWx_266180, 'filetypes', unicode_266179)

# Assigning a Str to a Subscript (line 838):
unicode_266181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 838, 24), 'unicode', u'JPEG')
# Getting the type of 'FigureCanvasWx'
FigureCanvasWx_266182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasWx')
# Setting the type of the member 'filetypes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasWx_266182, 'filetypes', unicode_266181)

# Assigning a Str to a Subscript (line 839):
unicode_266183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, 23), 'unicode', u'JPEG')
# Getting the type of 'FigureCanvasWx'
FigureCanvasWx_266184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasWx')
# Setting the type of the member 'filetypes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasWx_266184, 'filetypes', unicode_266183)

# Assigning a Str to a Subscript (line 840):
unicode_266185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 23), 'unicode', u'PCX')
# Getting the type of 'FigureCanvasWx'
FigureCanvasWx_266186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasWx')
# Setting the type of the member 'filetypes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasWx_266186, 'filetypes', unicode_266185)

# Assigning a Str to a Subscript (line 841):
unicode_266187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 841, 23), 'unicode', u'Portable Network Graphics')
# Getting the type of 'FigureCanvasWx'
FigureCanvasWx_266188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasWx')
# Setting the type of the member 'filetypes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasWx_266188, 'filetypes', unicode_266187)

# Assigning a Str to a Subscript (line 842):
unicode_266189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, 23), 'unicode', u'Tagged Image Format File')
# Getting the type of 'FigureCanvasWx'
FigureCanvasWx_266190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasWx')
# Setting the type of the member 'filetypes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasWx_266190, 'filetypes', unicode_266189)

# Assigning a Str to a Subscript (line 843):
unicode_266191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 24), 'unicode', u'Tagged Image Format File')
# Getting the type of 'FigureCanvasWx'
FigureCanvasWx_266192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasWx')
# Setting the type of the member 'filetypes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasWx_266192, 'filetypes', unicode_266191)

# Assigning a Str to a Subscript (line 844):
unicode_266193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 23), 'unicode', u'X pixmap')
# Getting the type of 'FigureCanvasWx'
FigureCanvasWx_266194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasWx')
# Setting the type of the member 'filetypes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasWx_266194, 'filetypes', unicode_266193)

# Assigning a Str to a Subscript (line 844):


# Getting the type of '_has_pil' (line 859)
_has_pil_266195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 11), '_has_pil')
# Applying the 'not' unary operator (line 859)
result_not__266196 = python_operator(stypy.reporting.localization.Localization(__file__, 859, 7), 'not', _has_pil_266195)

# Testing the type of an if condition (line 859)
if_condition_266197 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 859, 4), result_not__266196)
# Assigning a type to the variable 'if_condition_266197' (line 859)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 4), 'if_condition_266197', if_condition_266197)
# SSA begins for if statement (line 859)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

@norecursion
def print_jpeg(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'print_jpeg'
    module_type_store = module_type_store.open_function_context('print_jpeg', 860, 8, False)
    
    # Passed parameters checking function
    print_jpeg.stypy_localization = localization
    print_jpeg.stypy_type_of_self = None
    print_jpeg.stypy_type_store = module_type_store
    print_jpeg.stypy_function_name = 'print_jpeg'
    print_jpeg.stypy_param_names_list = ['self', 'filename']
    print_jpeg.stypy_varargs_param_name = 'args'
    print_jpeg.stypy_kwargs_param_name = 'kwargs'
    print_jpeg.stypy_call_defaults = defaults
    print_jpeg.stypy_call_varargs = varargs
    print_jpeg.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'print_jpeg', ['self', 'filename'], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'print_jpeg', localization, ['self', 'filename'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'print_jpeg(...)' code ##################

    
    # Call to _print_image(...): (line 861)
    # Processing the call arguments (line 861)
    # Getting the type of 'filename' (line 861)
    filename_266200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 37), 'filename', False)
    # Getting the type of 'wx' (line 861)
    wx_266201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 47), 'wx', False)
    # Obtaining the member 'BITMAP_TYPE_JPEG' of a type (line 861)
    BITMAP_TYPE_JPEG_266202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 47), wx_266201, 'BITMAP_TYPE_JPEG')
    # Getting the type of 'args' (line 862)
    args_266203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 38), 'args', False)
    # Processing the call keyword arguments (line 861)
    # Getting the type of 'kwargs' (line 862)
    kwargs_266204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 46), 'kwargs', False)
    kwargs_266205 = {'kwargs_266204': kwargs_266204}
    # Getting the type of 'self' (line 861)
    self_266198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 19), 'self', False)
    # Obtaining the member '_print_image' of a type (line 861)
    _print_image_266199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 19), self_266198, '_print_image')
    # Calling _print_image(args, kwargs) (line 861)
    _print_image_call_result_266206 = invoke(stypy.reporting.localization.Localization(__file__, 861, 19), _print_image_266199, *[filename_266200, BITMAP_TYPE_JPEG_266202, args_266203], **kwargs_266205)
    
    # Assigning a type to the variable 'stypy_return_type' (line 861)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 861, 12), 'stypy_return_type', _print_image_call_result_266206)
    
    # ################# End of 'print_jpeg(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'print_jpeg' in the type store
    # Getting the type of 'stypy_return_type' (line 860)
    stypy_return_type_266207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_266207)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'print_jpeg'
    return stypy_return_type_266207

# Assigning a type to the variable 'print_jpeg' (line 860)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 8), 'print_jpeg', print_jpeg)

# Assigning a Name to a Name (line 863):

# Assigning a Name to a Name (line 863):
# Getting the type of 'print_jpeg' (line 863)
print_jpeg_266208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 20), 'print_jpeg')
# Assigning a type to the variable 'print_jpg' (line 863)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 8), 'print_jpg', print_jpeg_266208)
# SSA join for if statement (line 859)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Str to a Subscript (line 843):


# Getting the type of '_has_pil' (line 871)
_has_pil_266209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 11), '_has_pil')
# Applying the 'not' unary operator (line 871)
result_not__266210 = python_operator(stypy.reporting.localization.Localization(__file__, 871, 7), 'not', _has_pil_266209)

# Testing the type of an if condition (line 871)
if_condition_266211 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 871, 4), result_not__266210)
# Assigning a type to the variable 'if_condition_266211' (line 871)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 4), 'if_condition_266211', if_condition_266211)
# SSA begins for if statement (line 871)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

@norecursion
def print_tiff(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'print_tiff'
    module_type_store = module_type_store.open_function_context('print_tiff', 872, 8, False)
    
    # Passed parameters checking function
    print_tiff.stypy_localization = localization
    print_tiff.stypy_type_of_self = None
    print_tiff.stypy_type_store = module_type_store
    print_tiff.stypy_function_name = 'print_tiff'
    print_tiff.stypy_param_names_list = ['self', 'filename']
    print_tiff.stypy_varargs_param_name = 'args'
    print_tiff.stypy_kwargs_param_name = 'kwargs'
    print_tiff.stypy_call_defaults = defaults
    print_tiff.stypy_call_varargs = varargs
    print_tiff.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'print_tiff', ['self', 'filename'], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'print_tiff', localization, ['self', 'filename'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'print_tiff(...)' code ##################

    
    # Call to _print_image(...): (line 873)
    # Processing the call arguments (line 873)
    # Getting the type of 'filename' (line 873)
    filename_266214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 37), 'filename', False)
    # Getting the type of 'wx' (line 873)
    wx_266215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 47), 'wx', False)
    # Obtaining the member 'BITMAP_TYPE_TIF' of a type (line 873)
    BITMAP_TYPE_TIF_266216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 47), wx_266215, 'BITMAP_TYPE_TIF')
    # Getting the type of 'args' (line 874)
    args_266217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 38), 'args', False)
    # Processing the call keyword arguments (line 873)
    # Getting the type of 'kwargs' (line 874)
    kwargs_266218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 46), 'kwargs', False)
    kwargs_266219 = {'kwargs_266218': kwargs_266218}
    # Getting the type of 'self' (line 873)
    self_266212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 19), 'self', False)
    # Obtaining the member '_print_image' of a type (line 873)
    _print_image_266213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 19), self_266212, '_print_image')
    # Calling _print_image(args, kwargs) (line 873)
    _print_image_call_result_266220 = invoke(stypy.reporting.localization.Localization(__file__, 873, 19), _print_image_266213, *[filename_266214, BITMAP_TYPE_TIF_266216, args_266217], **kwargs_266219)
    
    # Assigning a type to the variable 'stypy_return_type' (line 873)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 12), 'stypy_return_type', _print_image_call_result_266220)
    
    # ################# End of 'print_tiff(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'print_tiff' in the type store
    # Getting the type of 'stypy_return_type' (line 872)
    stypy_return_type_266221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 8), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_266221)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'print_tiff'
    return stypy_return_type_266221

# Assigning a type to the variable 'print_tiff' (line 872)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 872, 8), 'print_tiff', print_tiff)

# Assigning a Name to a Name (line 875):

# Assigning a Name to a Name (line 875):
# Getting the type of 'print_tiff' (line 875)
print_tiff_266222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 20), 'print_tiff')
# Assigning a type to the variable 'print_tif' (line 875)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 875, 8), 'print_tif', print_tiff_266222)
# SSA join for if statement (line 871)
module_type_store = module_type_store.join_ssa_context()

# Declaration of the 'FigureFrameWx' class
# Getting the type of 'wx' (line 1167)
wx_266223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 20), 'wx')
# Obtaining the member 'Frame' of a type (line 1167)
Frame_266224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1167, 20), wx_266223, 'Frame')

class FigureFrameWx(Frame_266224, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1168, 4, False)
        # Assigning a type to the variable 'self' (line 1169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureFrameWx.__init__', ['num', 'fig'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['num', 'fig'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        
        # Getting the type of 'wx' (line 1171)
        wx_266225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 11), 'wx')
        # Obtaining the member 'Platform' of a type (line 1171)
        Platform_266226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 11), wx_266225, 'Platform')
        unicode_266227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1171, 26), 'unicode', u'__WXMSW__')
        # Applying the binary operator '==' (line 1171)
        result_eq_266228 = python_operator(stypy.reporting.localization.Localization(__file__, 1171, 11), '==', Platform_266226, unicode_266227)
        
        # Testing the type of an if condition (line 1171)
        if_condition_266229 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1171, 8), result_eq_266228)
        # Assigning a type to the variable 'if_condition_266229' (line 1171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1171, 8), 'if_condition_266229', if_condition_266229)
        # SSA begins for if statement (line 1171)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1172):
        
        # Assigning a Attribute to a Name (line 1172):
        # Getting the type of 'wx' (line 1172)
        wx_266230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 18), 'wx')
        # Obtaining the member 'DefaultPosition' of a type (line 1172)
        DefaultPosition_266231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 18), wx_266230, 'DefaultPosition')
        # Assigning a type to the variable 'pos' (line 1172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1172, 12), 'pos', DefaultPosition_266231)
        # SSA branch for the else part of an if statement (line 1171)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1174):
        
        # Assigning a Call to a Name (line 1174):
        
        # Call to Point(...): (line 1174)
        # Processing the call arguments (line 1174)
        int_266234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, 27), 'int')
        int_266235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, 31), 'int')
        # Processing the call keyword arguments (line 1174)
        kwargs_266236 = {}
        # Getting the type of 'wx' (line 1174)
        wx_266232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 18), 'wx', False)
        # Obtaining the member 'Point' of a type (line 1174)
        Point_266233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1174, 18), wx_266232, 'Point')
        # Calling Point(args, kwargs) (line 1174)
        Point_call_result_266237 = invoke(stypy.reporting.localization.Localization(__file__, 1174, 18), Point_266233, *[int_266234, int_266235], **kwargs_266236)
        
        # Assigning a type to the variable 'pos' (line 1174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1174, 12), 'pos', Point_call_result_266237)
        # SSA join for if statement (line 1171)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Tuple (line 1175):
        
        # Assigning a Subscript to a Name (line 1175):
        
        # Obtaining the type of the subscript
        int_266238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 8), 'int')
        # Getting the type of 'fig' (line 1175)
        fig_266239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 21), 'fig')
        # Obtaining the member 'bbox' of a type (line 1175)
        bbox_266240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 21), fig_266239, 'bbox')
        # Obtaining the member 'bounds' of a type (line 1175)
        bounds_266241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 21), bbox_266240, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1175)
        getitem___266242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 8), bounds_266241, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1175)
        subscript_call_result_266243 = invoke(stypy.reporting.localization.Localization(__file__, 1175, 8), getitem___266242, int_266238)
        
        # Assigning a type to the variable 'tuple_var_assignment_263035' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'tuple_var_assignment_263035', subscript_call_result_266243)
        
        # Assigning a Subscript to a Name (line 1175):
        
        # Obtaining the type of the subscript
        int_266244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 8), 'int')
        # Getting the type of 'fig' (line 1175)
        fig_266245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 21), 'fig')
        # Obtaining the member 'bbox' of a type (line 1175)
        bbox_266246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 21), fig_266245, 'bbox')
        # Obtaining the member 'bounds' of a type (line 1175)
        bounds_266247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 21), bbox_266246, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1175)
        getitem___266248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 8), bounds_266247, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1175)
        subscript_call_result_266249 = invoke(stypy.reporting.localization.Localization(__file__, 1175, 8), getitem___266248, int_266244)
        
        # Assigning a type to the variable 'tuple_var_assignment_263036' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'tuple_var_assignment_263036', subscript_call_result_266249)
        
        # Assigning a Subscript to a Name (line 1175):
        
        # Obtaining the type of the subscript
        int_266250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 8), 'int')
        # Getting the type of 'fig' (line 1175)
        fig_266251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 21), 'fig')
        # Obtaining the member 'bbox' of a type (line 1175)
        bbox_266252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 21), fig_266251, 'bbox')
        # Obtaining the member 'bounds' of a type (line 1175)
        bounds_266253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 21), bbox_266252, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1175)
        getitem___266254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 8), bounds_266253, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1175)
        subscript_call_result_266255 = invoke(stypy.reporting.localization.Localization(__file__, 1175, 8), getitem___266254, int_266250)
        
        # Assigning a type to the variable 'tuple_var_assignment_263037' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'tuple_var_assignment_263037', subscript_call_result_266255)
        
        # Assigning a Subscript to a Name (line 1175):
        
        # Obtaining the type of the subscript
        int_266256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 8), 'int')
        # Getting the type of 'fig' (line 1175)
        fig_266257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 21), 'fig')
        # Obtaining the member 'bbox' of a type (line 1175)
        bbox_266258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 21), fig_266257, 'bbox')
        # Obtaining the member 'bounds' of a type (line 1175)
        bounds_266259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 21), bbox_266258, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 1175)
        getitem___266260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 8), bounds_266259, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1175)
        subscript_call_result_266261 = invoke(stypy.reporting.localization.Localization(__file__, 1175, 8), getitem___266260, int_266256)
        
        # Assigning a type to the variable 'tuple_var_assignment_263038' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'tuple_var_assignment_263038', subscript_call_result_266261)
        
        # Assigning a Name to a Name (line 1175):
        # Getting the type of 'tuple_var_assignment_263035' (line 1175)
        tuple_var_assignment_263035_266262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'tuple_var_assignment_263035')
        # Assigning a type to the variable 'l' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'l', tuple_var_assignment_263035_266262)
        
        # Assigning a Name to a Name (line 1175):
        # Getting the type of 'tuple_var_assignment_263036' (line 1175)
        tuple_var_assignment_263036_266263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'tuple_var_assignment_263036')
        # Assigning a type to the variable 'b' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 11), 'b', tuple_var_assignment_263036_266263)
        
        # Assigning a Name to a Name (line 1175):
        # Getting the type of 'tuple_var_assignment_263037' (line 1175)
        tuple_var_assignment_263037_266264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'tuple_var_assignment_263037')
        # Assigning a type to the variable 'w' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 14), 'w', tuple_var_assignment_263037_266264)
        
        # Assigning a Name to a Name (line 1175):
        # Getting the type of 'tuple_var_assignment_263038' (line 1175)
        tuple_var_assignment_263038_266265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'tuple_var_assignment_263038')
        # Assigning a type to the variable 'h' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 17), 'h', tuple_var_assignment_263038_266265)
        
        # Call to __init__(...): (line 1176)
        # Processing the call arguments (line 1176)
        # Getting the type of 'self' (line 1176)
        self_266269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 26), 'self', False)
        # Processing the call keyword arguments (line 1176)
        # Getting the type of 'None' (line 1176)
        None_266270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 39), 'None', False)
        keyword_266271 = None_266270
        int_266272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, 48), 'int')
        keyword_266273 = int_266272
        # Getting the type of 'pos' (line 1176)
        pos_266274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 56), 'pos', False)
        keyword_266275 = pos_266274
        unicode_266276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1177, 32), 'unicode', u'Figure %d')
        # Getting the type of 'num' (line 1177)
        num_266277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 46), 'num', False)
        # Applying the binary operator '%' (line 1177)
        result_mod_266278 = python_operator(stypy.reporting.localization.Localization(__file__, 1177, 32), '%', unicode_266276, num_266277)
        
        keyword_266279 = result_mod_266278
        kwargs_266280 = {'title': keyword_266279, 'id': keyword_266273, 'parent': keyword_266271, 'pos': keyword_266275}
        # Getting the type of 'wx' (line 1176)
        wx_266266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 8), 'wx', False)
        # Obtaining the member 'Frame' of a type (line 1176)
        Frame_266267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 8), wx_266266, 'Frame')
        # Obtaining the member '__init__' of a type (line 1176)
        init___266268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 8), Frame_266267, '__init__')
        # Calling __init__(args, kwargs) (line 1176)
        init___call_result_266281 = invoke(stypy.reporting.localization.Localization(__file__, 1176, 8), init___266268, *[self_266269], **kwargs_266280)
        
        
        # Call to DEBUG_MSG(...): (line 1179)
        # Processing the call arguments (line 1179)
        unicode_266283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 18), 'unicode', u'__init__()')
        int_266284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 32), 'int')
        # Getting the type of 'self' (line 1179)
        self_266285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 35), 'self', False)
        # Processing the call keyword arguments (line 1179)
        kwargs_266286 = {}
        # Getting the type of 'DEBUG_MSG' (line 1179)
        DEBUG_MSG_266282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 1179)
        DEBUG_MSG_call_result_266287 = invoke(stypy.reporting.localization.Localization(__file__, 1179, 8), DEBUG_MSG_266282, *[unicode_266283, int_266284, self_266285], **kwargs_266286)
        
        
        # Assigning a Name to a Attribute (line 1180):
        
        # Assigning a Name to a Attribute (line 1180):
        # Getting the type of 'num' (line 1180)
        num_266288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 19), 'num')
        # Getting the type of 'self' (line 1180)
        self_266289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 8), 'self')
        # Setting the type of the member 'num' of a type (line 1180)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1180, 8), self_266289, 'num', num_266288)
        
        # Assigning a Call to a Name (line 1182):
        
        # Assigning a Call to a Name (line 1182):
        
        # Call to StatusBarWx(...): (line 1182)
        # Processing the call arguments (line 1182)
        # Getting the type of 'self' (line 1182)
        self_266291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 30), 'self', False)
        # Processing the call keyword arguments (line 1182)
        kwargs_266292 = {}
        # Getting the type of 'StatusBarWx' (line 1182)
        StatusBarWx_266290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 18), 'StatusBarWx', False)
        # Calling StatusBarWx(args, kwargs) (line 1182)
        StatusBarWx_call_result_266293 = invoke(stypy.reporting.localization.Localization(__file__, 1182, 18), StatusBarWx_266290, *[self_266291], **kwargs_266292)
        
        # Assigning a type to the variable 'statbar' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'statbar', StatusBarWx_call_result_266293)
        
        # Call to SetStatusBar(...): (line 1183)
        # Processing the call arguments (line 1183)
        # Getting the type of 'statbar' (line 1183)
        statbar_266296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 26), 'statbar', False)
        # Processing the call keyword arguments (line 1183)
        kwargs_266297 = {}
        # Getting the type of 'self' (line 1183)
        self_266294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 8), 'self', False)
        # Obtaining the member 'SetStatusBar' of a type (line 1183)
        SetStatusBar_266295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 8), self_266294, 'SetStatusBar')
        # Calling SetStatusBar(args, kwargs) (line 1183)
        SetStatusBar_call_result_266298 = invoke(stypy.reporting.localization.Localization(__file__, 1183, 8), SetStatusBar_266295, *[statbar_266296], **kwargs_266297)
        
        
        # Assigning a Call to a Attribute (line 1184):
        
        # Assigning a Call to a Attribute (line 1184):
        
        # Call to get_canvas(...): (line 1184)
        # Processing the call arguments (line 1184)
        # Getting the type of 'fig' (line 1184)
        fig_266301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 38), 'fig', False)
        # Processing the call keyword arguments (line 1184)
        kwargs_266302 = {}
        # Getting the type of 'self' (line 1184)
        self_266299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 22), 'self', False)
        # Obtaining the member 'get_canvas' of a type (line 1184)
        get_canvas_266300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1184, 22), self_266299, 'get_canvas')
        # Calling get_canvas(args, kwargs) (line 1184)
        get_canvas_call_result_266303 = invoke(stypy.reporting.localization.Localization(__file__, 1184, 22), get_canvas_266300, *[fig_266301], **kwargs_266302)
        
        # Getting the type of 'self' (line 1184)
        self_266304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 1184)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1184, 8), self_266304, 'canvas', get_canvas_call_result_266303)
        
        # Call to SetInitialSize(...): (line 1185)
        # Processing the call arguments (line 1185)
        
        # Call to Size(...): (line 1185)
        # Processing the call arguments (line 1185)
        # Getting the type of 'fig' (line 1185)
        fig_266310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 43), 'fig', False)
        # Obtaining the member 'bbox' of a type (line 1185)
        bbox_266311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 43), fig_266310, 'bbox')
        # Obtaining the member 'width' of a type (line 1185)
        width_266312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 43), bbox_266311, 'width')
        # Getting the type of 'fig' (line 1185)
        fig_266313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 59), 'fig', False)
        # Obtaining the member 'bbox' of a type (line 1185)
        bbox_266314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 59), fig_266313, 'bbox')
        # Obtaining the member 'height' of a type (line 1185)
        height_266315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 59), bbox_266314, 'height')
        # Processing the call keyword arguments (line 1185)
        kwargs_266316 = {}
        # Getting the type of 'wx' (line 1185)
        wx_266308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 35), 'wx', False)
        # Obtaining the member 'Size' of a type (line 1185)
        Size_266309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 35), wx_266308, 'Size')
        # Calling Size(args, kwargs) (line 1185)
        Size_call_result_266317 = invoke(stypy.reporting.localization.Localization(__file__, 1185, 35), Size_266309, *[width_266312, height_266315], **kwargs_266316)
        
        # Processing the call keyword arguments (line 1185)
        kwargs_266318 = {}
        # Getting the type of 'self' (line 1185)
        self_266305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1185)
        canvas_266306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 8), self_266305, 'canvas')
        # Obtaining the member 'SetInitialSize' of a type (line 1185)
        SetInitialSize_266307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 8), canvas_266306, 'SetInitialSize')
        # Calling SetInitialSize(args, kwargs) (line 1185)
        SetInitialSize_call_result_266319 = invoke(stypy.reporting.localization.Localization(__file__, 1185, 8), SetInitialSize_266307, *[Size_call_result_266317], **kwargs_266318)
        
        
        # Call to SetFocus(...): (line 1186)
        # Processing the call keyword arguments (line 1186)
        kwargs_266323 = {}
        # Getting the type of 'self' (line 1186)
        self_266320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1186)
        canvas_266321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 8), self_266320, 'canvas')
        # Obtaining the member 'SetFocus' of a type (line 1186)
        SetFocus_266322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 8), canvas_266321, 'SetFocus')
        # Calling SetFocus(args, kwargs) (line 1186)
        SetFocus_call_result_266324 = invoke(stypy.reporting.localization.Localization(__file__, 1186, 8), SetFocus_266322, *[], **kwargs_266323)
        
        
        # Assigning a Call to a Attribute (line 1187):
        
        # Assigning a Call to a Attribute (line 1187):
        
        # Call to BoxSizer(...): (line 1187)
        # Processing the call arguments (line 1187)
        # Getting the type of 'wx' (line 1187)
        wx_266327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 33), 'wx', False)
        # Obtaining the member 'VERTICAL' of a type (line 1187)
        VERTICAL_266328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 33), wx_266327, 'VERTICAL')
        # Processing the call keyword arguments (line 1187)
        kwargs_266329 = {}
        # Getting the type of 'wx' (line 1187)
        wx_266325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 21), 'wx', False)
        # Obtaining the member 'BoxSizer' of a type (line 1187)
        BoxSizer_266326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 21), wx_266325, 'BoxSizer')
        # Calling BoxSizer(args, kwargs) (line 1187)
        BoxSizer_call_result_266330 = invoke(stypy.reporting.localization.Localization(__file__, 1187, 21), BoxSizer_266326, *[VERTICAL_266328], **kwargs_266329)
        
        # Getting the type of 'self' (line 1187)
        self_266331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'self')
        # Setting the type of the member 'sizer' of a type (line 1187)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 8), self_266331, 'sizer', BoxSizer_call_result_266330)
        
        # Call to Add(...): (line 1188)
        # Processing the call arguments (line 1188)
        # Getting the type of 'self' (line 1188)
        self_266335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 23), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1188)
        canvas_266336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 23), self_266335, 'canvas')
        int_266337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1188, 36), 'int')
        # Getting the type of 'wx' (line 1188)
        wx_266338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 39), 'wx', False)
        # Obtaining the member 'TOP' of a type (line 1188)
        TOP_266339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 39), wx_266338, 'TOP')
        # Getting the type of 'wx' (line 1188)
        wx_266340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 48), 'wx', False)
        # Obtaining the member 'LEFT' of a type (line 1188)
        LEFT_266341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 48), wx_266340, 'LEFT')
        # Applying the binary operator '|' (line 1188)
        result_or__266342 = python_operator(stypy.reporting.localization.Localization(__file__, 1188, 39), '|', TOP_266339, LEFT_266341)
        
        # Getting the type of 'wx' (line 1188)
        wx_266343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 58), 'wx', False)
        # Obtaining the member 'EXPAND' of a type (line 1188)
        EXPAND_266344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 58), wx_266343, 'EXPAND')
        # Applying the binary operator '|' (line 1188)
        result_or__266345 = python_operator(stypy.reporting.localization.Localization(__file__, 1188, 56), '|', result_or__266342, EXPAND_266344)
        
        # Processing the call keyword arguments (line 1188)
        kwargs_266346 = {}
        # Getting the type of 'self' (line 1188)
        self_266332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 8), 'self', False)
        # Obtaining the member 'sizer' of a type (line 1188)
        sizer_266333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 8), self_266332, 'sizer')
        # Obtaining the member 'Add' of a type (line 1188)
        Add_266334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 8), sizer_266333, 'Add')
        # Calling Add(args, kwargs) (line 1188)
        Add_call_result_266347 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 8), Add_266334, *[canvas_266336, int_266337, result_or__266345], **kwargs_266346)
        
        
        # Assigning a Call to a Attribute (line 1192):
        
        # Assigning a Call to a Attribute (line 1192):
        
        # Call to _get_toolbar(...): (line 1192)
        # Processing the call arguments (line 1192)
        # Getting the type of 'statbar' (line 1192)
        statbar_266350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 41), 'statbar', False)
        # Processing the call keyword arguments (line 1192)
        kwargs_266351 = {}
        # Getting the type of 'self' (line 1192)
        self_266348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 23), 'self', False)
        # Obtaining the member '_get_toolbar' of a type (line 1192)
        _get_toolbar_266349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1192, 23), self_266348, '_get_toolbar')
        # Calling _get_toolbar(args, kwargs) (line 1192)
        _get_toolbar_call_result_266352 = invoke(stypy.reporting.localization.Localization(__file__, 1192, 23), _get_toolbar_266349, *[statbar_266350], **kwargs_266351)
        
        # Getting the type of 'self' (line 1192)
        self_266353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 8), 'self')
        # Setting the type of the member 'toolbar' of a type (line 1192)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1192, 8), self_266353, 'toolbar', _get_toolbar_call_result_266352)
        
        
        # Getting the type of 'self' (line 1194)
        self_266354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 11), 'self')
        # Obtaining the member 'toolbar' of a type (line 1194)
        toolbar_266355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1194, 11), self_266354, 'toolbar')
        # Getting the type of 'None' (line 1194)
        None_266356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 31), 'None')
        # Applying the binary operator 'isnot' (line 1194)
        result_is_not_266357 = python_operator(stypy.reporting.localization.Localization(__file__, 1194, 11), 'isnot', toolbar_266355, None_266356)
        
        # Testing the type of an if condition (line 1194)
        if_condition_266358 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1194, 8), result_is_not_266357)
        # Assigning a type to the variable 'if_condition_266358' (line 1194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 8), 'if_condition_266358', if_condition_266358)
        # SSA begins for if statement (line 1194)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to Realize(...): (line 1195)
        # Processing the call keyword arguments (line 1195)
        kwargs_266362 = {}
        # Getting the type of 'self' (line 1195)
        self_266359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 12), 'self', False)
        # Obtaining the member 'toolbar' of a type (line 1195)
        toolbar_266360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 12), self_266359, 'toolbar')
        # Obtaining the member 'Realize' of a type (line 1195)
        Realize_266361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 12), toolbar_266360, 'Realize')
        # Calling Realize(args, kwargs) (line 1195)
        Realize_call_result_266363 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 12), Realize_266361, *[], **kwargs_266362)
        
        
        # Getting the type of 'wxc' (line 1198)
        wxc_266364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 15), 'wxc')
        # Obtaining the member 'is_phoenix' of a type (line 1198)
        is_phoenix_266365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 15), wxc_266364, 'is_phoenix')
        # Testing the type of an if condition (line 1198)
        if_condition_266366 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1198, 12), is_phoenix_266365)
        # Assigning a type to the variable 'if_condition_266366' (line 1198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1198, 12), 'if_condition_266366', if_condition_266366)
        # SSA begins for if statement (line 1198)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1199):
        
        # Assigning a Call to a Name:
        
        # Call to GetSize(...): (line 1199)
        # Processing the call keyword arguments (line 1199)
        kwargs_266370 = {}
        # Getting the type of 'self' (line 1199)
        self_266367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 25), 'self', False)
        # Obtaining the member 'toolbar' of a type (line 1199)
        toolbar_266368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 25), self_266367, 'toolbar')
        # Obtaining the member 'GetSize' of a type (line 1199)
        GetSize_266369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 25), toolbar_266368, 'GetSize')
        # Calling GetSize(args, kwargs) (line 1199)
        GetSize_call_result_266371 = invoke(stypy.reporting.localization.Localization(__file__, 1199, 25), GetSize_266369, *[], **kwargs_266370)
        
        # Assigning a type to the variable 'call_assignment_263039' (line 1199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 16), 'call_assignment_263039', GetSize_call_result_266371)
        
        # Assigning a Call to a Name (line 1199):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 16), 'int')
        # Processing the call keyword arguments
        kwargs_266375 = {}
        # Getting the type of 'call_assignment_263039' (line 1199)
        call_assignment_263039_266372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 16), 'call_assignment_263039', False)
        # Obtaining the member '__getitem__' of a type (line 1199)
        getitem___266373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 16), call_assignment_263039_266372, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266376 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266373, *[int_266374], **kwargs_266375)
        
        # Assigning a type to the variable 'call_assignment_263040' (line 1199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 16), 'call_assignment_263040', getitem___call_result_266376)
        
        # Assigning a Name to a Name (line 1199):
        # Getting the type of 'call_assignment_263040' (line 1199)
        call_assignment_263040_266377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 16), 'call_assignment_263040')
        # Assigning a type to the variable 'tw' (line 1199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 16), 'tw', call_assignment_263040_266377)
        
        # Assigning a Call to a Name (line 1199):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 16), 'int')
        # Processing the call keyword arguments
        kwargs_266381 = {}
        # Getting the type of 'call_assignment_263039' (line 1199)
        call_assignment_263039_266378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 16), 'call_assignment_263039', False)
        # Obtaining the member '__getitem__' of a type (line 1199)
        getitem___266379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 16), call_assignment_263039_266378, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266382 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266379, *[int_266380], **kwargs_266381)
        
        # Assigning a type to the variable 'call_assignment_263041' (line 1199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 16), 'call_assignment_263041', getitem___call_result_266382)
        
        # Assigning a Name to a Name (line 1199):
        # Getting the type of 'call_assignment_263041' (line 1199)
        call_assignment_263041_266383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 16), 'call_assignment_263041')
        # Assigning a type to the variable 'th' (line 1199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 20), 'th', call_assignment_263041_266383)
        
        # Assigning a Call to a Tuple (line 1200):
        
        # Assigning a Call to a Name:
        
        # Call to GetSize(...): (line 1200)
        # Processing the call keyword arguments (line 1200)
        kwargs_266387 = {}
        # Getting the type of 'self' (line 1200)
        self_266384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 25), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1200)
        canvas_266385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1200, 25), self_266384, 'canvas')
        # Obtaining the member 'GetSize' of a type (line 1200)
        GetSize_266386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1200, 25), canvas_266385, 'GetSize')
        # Calling GetSize(args, kwargs) (line 1200)
        GetSize_call_result_266388 = invoke(stypy.reporting.localization.Localization(__file__, 1200, 25), GetSize_266386, *[], **kwargs_266387)
        
        # Assigning a type to the variable 'call_assignment_263042' (line 1200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 16), 'call_assignment_263042', GetSize_call_result_266388)
        
        # Assigning a Call to a Name (line 1200):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, 16), 'int')
        # Processing the call keyword arguments
        kwargs_266392 = {}
        # Getting the type of 'call_assignment_263042' (line 1200)
        call_assignment_263042_266389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 16), 'call_assignment_263042', False)
        # Obtaining the member '__getitem__' of a type (line 1200)
        getitem___266390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1200, 16), call_assignment_263042_266389, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266393 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266390, *[int_266391], **kwargs_266392)
        
        # Assigning a type to the variable 'call_assignment_263043' (line 1200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 16), 'call_assignment_263043', getitem___call_result_266393)
        
        # Assigning a Name to a Name (line 1200):
        # Getting the type of 'call_assignment_263043' (line 1200)
        call_assignment_263043_266394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 16), 'call_assignment_263043')
        # Assigning a type to the variable 'fw' (line 1200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 16), 'fw', call_assignment_263043_266394)
        
        # Assigning a Call to a Name (line 1200):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, 16), 'int')
        # Processing the call keyword arguments
        kwargs_266398 = {}
        # Getting the type of 'call_assignment_263042' (line 1200)
        call_assignment_263042_266395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 16), 'call_assignment_263042', False)
        # Obtaining the member '__getitem__' of a type (line 1200)
        getitem___266396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1200, 16), call_assignment_263042_266395, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266399 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266396, *[int_266397], **kwargs_266398)
        
        # Assigning a type to the variable 'call_assignment_263044' (line 1200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 16), 'call_assignment_263044', getitem___call_result_266399)
        
        # Assigning a Name to a Name (line 1200):
        # Getting the type of 'call_assignment_263044' (line 1200)
        call_assignment_263044_266400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 16), 'call_assignment_263044')
        # Assigning a type to the variable 'fh' (line 1200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 20), 'fh', call_assignment_263044_266400)
        # SSA branch for the else part of an if statement (line 1198)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 1202):
        
        # Assigning a Call to a Name:
        
        # Call to GetSizeTuple(...): (line 1202)
        # Processing the call keyword arguments (line 1202)
        kwargs_266404 = {}
        # Getting the type of 'self' (line 1202)
        self_266401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 25), 'self', False)
        # Obtaining the member 'toolbar' of a type (line 1202)
        toolbar_266402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 25), self_266401, 'toolbar')
        # Obtaining the member 'GetSizeTuple' of a type (line 1202)
        GetSizeTuple_266403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 25), toolbar_266402, 'GetSizeTuple')
        # Calling GetSizeTuple(args, kwargs) (line 1202)
        GetSizeTuple_call_result_266405 = invoke(stypy.reporting.localization.Localization(__file__, 1202, 25), GetSizeTuple_266403, *[], **kwargs_266404)
        
        # Assigning a type to the variable 'call_assignment_263045' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 16), 'call_assignment_263045', GetSizeTuple_call_result_266405)
        
        # Assigning a Call to a Name (line 1202):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 16), 'int')
        # Processing the call keyword arguments
        kwargs_266409 = {}
        # Getting the type of 'call_assignment_263045' (line 1202)
        call_assignment_263045_266406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 16), 'call_assignment_263045', False)
        # Obtaining the member '__getitem__' of a type (line 1202)
        getitem___266407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 16), call_assignment_263045_266406, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266410 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266407, *[int_266408], **kwargs_266409)
        
        # Assigning a type to the variable 'call_assignment_263046' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 16), 'call_assignment_263046', getitem___call_result_266410)
        
        # Assigning a Name to a Name (line 1202):
        # Getting the type of 'call_assignment_263046' (line 1202)
        call_assignment_263046_266411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 16), 'call_assignment_263046')
        # Assigning a type to the variable 'tw' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 16), 'tw', call_assignment_263046_266411)
        
        # Assigning a Call to a Name (line 1202):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 16), 'int')
        # Processing the call keyword arguments
        kwargs_266415 = {}
        # Getting the type of 'call_assignment_263045' (line 1202)
        call_assignment_263045_266412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 16), 'call_assignment_263045', False)
        # Obtaining the member '__getitem__' of a type (line 1202)
        getitem___266413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 16), call_assignment_263045_266412, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266416 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266413, *[int_266414], **kwargs_266415)
        
        # Assigning a type to the variable 'call_assignment_263047' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 16), 'call_assignment_263047', getitem___call_result_266416)
        
        # Assigning a Name to a Name (line 1202):
        # Getting the type of 'call_assignment_263047' (line 1202)
        call_assignment_263047_266417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 16), 'call_assignment_263047')
        # Assigning a type to the variable 'th' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 20), 'th', call_assignment_263047_266417)
        
        # Assigning a Call to a Tuple (line 1203):
        
        # Assigning a Call to a Name:
        
        # Call to GetSizeTuple(...): (line 1203)
        # Processing the call keyword arguments (line 1203)
        kwargs_266421 = {}
        # Getting the type of 'self' (line 1203)
        self_266418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 25), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1203)
        canvas_266419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 25), self_266418, 'canvas')
        # Obtaining the member 'GetSizeTuple' of a type (line 1203)
        GetSizeTuple_266420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 25), canvas_266419, 'GetSizeTuple')
        # Calling GetSizeTuple(args, kwargs) (line 1203)
        GetSizeTuple_call_result_266422 = invoke(stypy.reporting.localization.Localization(__file__, 1203, 25), GetSizeTuple_266420, *[], **kwargs_266421)
        
        # Assigning a type to the variable 'call_assignment_263048' (line 1203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 16), 'call_assignment_263048', GetSizeTuple_call_result_266422)
        
        # Assigning a Call to a Name (line 1203):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 16), 'int')
        # Processing the call keyword arguments
        kwargs_266426 = {}
        # Getting the type of 'call_assignment_263048' (line 1203)
        call_assignment_263048_266423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 16), 'call_assignment_263048', False)
        # Obtaining the member '__getitem__' of a type (line 1203)
        getitem___266424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 16), call_assignment_263048_266423, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266427 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266424, *[int_266425], **kwargs_266426)
        
        # Assigning a type to the variable 'call_assignment_263049' (line 1203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 16), 'call_assignment_263049', getitem___call_result_266427)
        
        # Assigning a Name to a Name (line 1203):
        # Getting the type of 'call_assignment_263049' (line 1203)
        call_assignment_263049_266428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 16), 'call_assignment_263049')
        # Assigning a type to the variable 'fw' (line 1203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 16), 'fw', call_assignment_263049_266428)
        
        # Assigning a Call to a Name (line 1203):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 16), 'int')
        # Processing the call keyword arguments
        kwargs_266432 = {}
        # Getting the type of 'call_assignment_263048' (line 1203)
        call_assignment_263048_266429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 16), 'call_assignment_263048', False)
        # Obtaining the member '__getitem__' of a type (line 1203)
        getitem___266430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 16), call_assignment_263048_266429, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266433 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266430, *[int_266431], **kwargs_266432)
        
        # Assigning a type to the variable 'call_assignment_263050' (line 1203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 16), 'call_assignment_263050', getitem___call_result_266433)
        
        # Assigning a Name to a Name (line 1203):
        # Getting the type of 'call_assignment_263050' (line 1203)
        call_assignment_263050_266434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 16), 'call_assignment_263050')
        # Assigning a type to the variable 'fh' (line 1203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 20), 'fh', call_assignment_263050_266434)
        # SSA join for if statement (line 1198)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to SetSize(...): (line 1206)
        # Processing the call arguments (line 1206)
        
        # Call to Size(...): (line 1206)
        # Processing the call arguments (line 1206)
        # Getting the type of 'fw' (line 1206)
        fw_266440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 41), 'fw', False)
        # Getting the type of 'th' (line 1206)
        th_266441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 45), 'th', False)
        # Processing the call keyword arguments (line 1206)
        kwargs_266442 = {}
        # Getting the type of 'wx' (line 1206)
        wx_266438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 33), 'wx', False)
        # Obtaining the member 'Size' of a type (line 1206)
        Size_266439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 33), wx_266438, 'Size')
        # Calling Size(args, kwargs) (line 1206)
        Size_call_result_266443 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 33), Size_266439, *[fw_266440, th_266441], **kwargs_266442)
        
        # Processing the call keyword arguments (line 1206)
        kwargs_266444 = {}
        # Getting the type of 'self' (line 1206)
        self_266435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 12), 'self', False)
        # Obtaining the member 'toolbar' of a type (line 1206)
        toolbar_266436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 12), self_266435, 'toolbar')
        # Obtaining the member 'SetSize' of a type (line 1206)
        SetSize_266437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 12), toolbar_266436, 'SetSize')
        # Calling SetSize(args, kwargs) (line 1206)
        SetSize_call_result_266445 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 12), SetSize_266437, *[Size_call_result_266443], **kwargs_266444)
        
        
        # Call to Add(...): (line 1207)
        # Processing the call arguments (line 1207)
        # Getting the type of 'self' (line 1207)
        self_266449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 27), 'self', False)
        # Obtaining the member 'toolbar' of a type (line 1207)
        toolbar_266450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1207, 27), self_266449, 'toolbar')
        int_266451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1207, 41), 'int')
        # Getting the type of 'wx' (line 1207)
        wx_266452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 44), 'wx', False)
        # Obtaining the member 'LEFT' of a type (line 1207)
        LEFT_266453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1207, 44), wx_266452, 'LEFT')
        # Getting the type of 'wx' (line 1207)
        wx_266454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 54), 'wx', False)
        # Obtaining the member 'EXPAND' of a type (line 1207)
        EXPAND_266455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1207, 54), wx_266454, 'EXPAND')
        # Applying the binary operator '|' (line 1207)
        result_or__266456 = python_operator(stypy.reporting.localization.Localization(__file__, 1207, 44), '|', LEFT_266453, EXPAND_266455)
        
        # Processing the call keyword arguments (line 1207)
        kwargs_266457 = {}
        # Getting the type of 'self' (line 1207)
        self_266446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 12), 'self', False)
        # Obtaining the member 'sizer' of a type (line 1207)
        sizer_266447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1207, 12), self_266446, 'sizer')
        # Obtaining the member 'Add' of a type (line 1207)
        Add_266448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1207, 12), sizer_266447, 'Add')
        # Calling Add(args, kwargs) (line 1207)
        Add_call_result_266458 = invoke(stypy.reporting.localization.Localization(__file__, 1207, 12), Add_266448, *[toolbar_266450, int_266451, result_or__266456], **kwargs_266457)
        
        # SSA join for if statement (line 1194)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to SetSizer(...): (line 1208)
        # Processing the call arguments (line 1208)
        # Getting the type of 'self' (line 1208)
        self_266461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 22), 'self', False)
        # Obtaining the member 'sizer' of a type (line 1208)
        sizer_266462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 22), self_266461, 'sizer')
        # Processing the call keyword arguments (line 1208)
        kwargs_266463 = {}
        # Getting the type of 'self' (line 1208)
        self_266459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 8), 'self', False)
        # Obtaining the member 'SetSizer' of a type (line 1208)
        SetSizer_266460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 8), self_266459, 'SetSizer')
        # Calling SetSizer(args, kwargs) (line 1208)
        SetSizer_call_result_266464 = invoke(stypy.reporting.localization.Localization(__file__, 1208, 8), SetSizer_266460, *[sizer_266462], **kwargs_266463)
        
        
        # Call to Fit(...): (line 1209)
        # Processing the call keyword arguments (line 1209)
        kwargs_266467 = {}
        # Getting the type of 'self' (line 1209)
        self_266465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 8), 'self', False)
        # Obtaining the member 'Fit' of a type (line 1209)
        Fit_266466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1209, 8), self_266465, 'Fit')
        # Calling Fit(args, kwargs) (line 1209)
        Fit_call_result_266468 = invoke(stypy.reporting.localization.Localization(__file__, 1209, 8), Fit_266466, *[], **kwargs_266467)
        
        
        # Call to SetMinSize(...): (line 1211)
        # Processing the call arguments (line 1211)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1211)
        tuple_266472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1211)
        # Adding element type (line 1211)
        int_266473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1211, 32), tuple_266472, int_266473)
        # Adding element type (line 1211)
        int_266474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1211, 32), tuple_266472, int_266474)
        
        # Processing the call keyword arguments (line 1211)
        kwargs_266475 = {}
        # Getting the type of 'self' (line 1211)
        self_266469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1211)
        canvas_266470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1211, 8), self_266469, 'canvas')
        # Obtaining the member 'SetMinSize' of a type (line 1211)
        SetMinSize_266471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1211, 8), canvas_266470, 'SetMinSize')
        # Calling SetMinSize(args, kwargs) (line 1211)
        SetMinSize_call_result_266476 = invoke(stypy.reporting.localization.Localization(__file__, 1211, 8), SetMinSize_266471, *[tuple_266472], **kwargs_266475)
        
        
        # Assigning a Call to a Attribute (line 1222):
        
        # Assigning a Call to a Attribute (line 1222):
        
        # Call to FigureManagerWx(...): (line 1222)
        # Processing the call arguments (line 1222)
        # Getting the type of 'self' (line 1222)
        self_266478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 38), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1222)
        canvas_266479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 38), self_266478, 'canvas')
        # Getting the type of 'num' (line 1222)
        num_266480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 51), 'num', False)
        # Getting the type of 'self' (line 1222)
        self_266481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 56), 'self', False)
        # Processing the call keyword arguments (line 1222)
        kwargs_266482 = {}
        # Getting the type of 'FigureManagerWx' (line 1222)
        FigureManagerWx_266477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 22), 'FigureManagerWx', False)
        # Calling FigureManagerWx(args, kwargs) (line 1222)
        FigureManagerWx_call_result_266483 = invoke(stypy.reporting.localization.Localization(__file__, 1222, 22), FigureManagerWx_266477, *[canvas_266479, num_266480, self_266481], **kwargs_266482)
        
        # Getting the type of 'self' (line 1222)
        self_266484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 8), 'self')
        # Setting the type of the member 'figmgr' of a type (line 1222)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 8), self_266484, 'figmgr', FigureManagerWx_call_result_266483)
        
        # Call to Bind(...): (line 1224)
        # Processing the call arguments (line 1224)
        # Getting the type of 'wx' (line 1224)
        wx_266487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 18), 'wx', False)
        # Obtaining the member 'EVT_CLOSE' of a type (line 1224)
        EVT_CLOSE_266488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 18), wx_266487, 'EVT_CLOSE')
        # Getting the type of 'self' (line 1224)
        self_266489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 32), 'self', False)
        # Obtaining the member '_onClose' of a type (line 1224)
        _onClose_266490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 32), self_266489, '_onClose')
        # Processing the call keyword arguments (line 1224)
        kwargs_266491 = {}
        # Getting the type of 'self' (line 1224)
        self_266485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 1224)
        Bind_266486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 8), self_266485, 'Bind')
        # Calling Bind(args, kwargs) (line 1224)
        Bind_call_result_266492 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 8), Bind_266486, *[EVT_CLOSE_266488, _onClose_266490], **kwargs_266491)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _get_toolbar(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_toolbar'
        module_type_store = module_type_store.open_function_context('_get_toolbar', 1226, 4, False)
        # Assigning a type to the variable 'self' (line 1227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureFrameWx._get_toolbar.__dict__.__setitem__('stypy_localization', localization)
        FigureFrameWx._get_toolbar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureFrameWx._get_toolbar.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureFrameWx._get_toolbar.__dict__.__setitem__('stypy_function_name', 'FigureFrameWx._get_toolbar')
        FigureFrameWx._get_toolbar.__dict__.__setitem__('stypy_param_names_list', ['statbar'])
        FigureFrameWx._get_toolbar.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureFrameWx._get_toolbar.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureFrameWx._get_toolbar.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureFrameWx._get_toolbar.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureFrameWx._get_toolbar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureFrameWx._get_toolbar.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureFrameWx._get_toolbar', ['statbar'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_toolbar', localization, ['statbar'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_toolbar(...)' code ##################

        
        
        
        # Obtaining the type of the subscript
        unicode_266493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 20), 'unicode', u'toolbar')
        # Getting the type of 'rcParams' (line 1227)
        rcParams_266494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 11), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 1227)
        getitem___266495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1227, 11), rcParams_266494, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1227)
        subscript_call_result_266496 = invoke(stypy.reporting.localization.Localization(__file__, 1227, 11), getitem___266495, unicode_266493)
        
        unicode_266497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 34), 'unicode', u'toolbar2')
        # Applying the binary operator '==' (line 1227)
        result_eq_266498 = python_operator(stypy.reporting.localization.Localization(__file__, 1227, 11), '==', subscript_call_result_266496, unicode_266497)
        
        # Testing the type of an if condition (line 1227)
        if_condition_266499 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1227, 8), result_eq_266498)
        # Assigning a type to the variable 'if_condition_266499' (line 1227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 8), 'if_condition_266499', if_condition_266499)
        # SSA begins for if statement (line 1227)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1228):
        
        # Assigning a Call to a Name (line 1228):
        
        # Call to NavigationToolbar2Wx(...): (line 1228)
        # Processing the call arguments (line 1228)
        # Getting the type of 'self' (line 1228)
        self_266501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 43), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1228)
        canvas_266502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1228, 43), self_266501, 'canvas')
        # Processing the call keyword arguments (line 1228)
        kwargs_266503 = {}
        # Getting the type of 'NavigationToolbar2Wx' (line 1228)
        NavigationToolbar2Wx_266500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 22), 'NavigationToolbar2Wx', False)
        # Calling NavigationToolbar2Wx(args, kwargs) (line 1228)
        NavigationToolbar2Wx_call_result_266504 = invoke(stypy.reporting.localization.Localization(__file__, 1228, 22), NavigationToolbar2Wx_266500, *[canvas_266502], **kwargs_266503)
        
        # Assigning a type to the variable 'toolbar' (line 1228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1228, 12), 'toolbar', NavigationToolbar2Wx_call_result_266504)
        
        # Call to set_status_bar(...): (line 1229)
        # Processing the call arguments (line 1229)
        # Getting the type of 'statbar' (line 1229)
        statbar_266507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 35), 'statbar', False)
        # Processing the call keyword arguments (line 1229)
        kwargs_266508 = {}
        # Getting the type of 'toolbar' (line 1229)
        toolbar_266505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 12), 'toolbar', False)
        # Obtaining the member 'set_status_bar' of a type (line 1229)
        set_status_bar_266506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 12), toolbar_266505, 'set_status_bar')
        # Calling set_status_bar(args, kwargs) (line 1229)
        set_status_bar_call_result_266509 = invoke(stypy.reporting.localization.Localization(__file__, 1229, 12), set_status_bar_266506, *[statbar_266507], **kwargs_266508)
        
        # SSA branch for the else part of an if statement (line 1227)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1231):
        
        # Assigning a Name to a Name (line 1231):
        # Getting the type of 'None' (line 1231)
        None_266510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 22), 'None')
        # Assigning a type to the variable 'toolbar' (line 1231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 12), 'toolbar', None_266510)
        # SSA join for if statement (line 1227)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'toolbar' (line 1232)
        toolbar_266511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 15), 'toolbar')
        # Assigning a type to the variable 'stypy_return_type' (line 1232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'stypy_return_type', toolbar_266511)
        
        # ################# End of '_get_toolbar(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_toolbar' in the type store
        # Getting the type of 'stypy_return_type' (line 1226)
        stypy_return_type_266512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_266512)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_toolbar'
        return stypy_return_type_266512


    @norecursion
    def get_canvas(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_canvas'
        module_type_store = module_type_store.open_function_context('get_canvas', 1234, 4, False)
        # Assigning a type to the variable 'self' (line 1235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1235, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureFrameWx.get_canvas.__dict__.__setitem__('stypy_localization', localization)
        FigureFrameWx.get_canvas.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureFrameWx.get_canvas.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureFrameWx.get_canvas.__dict__.__setitem__('stypy_function_name', 'FigureFrameWx.get_canvas')
        FigureFrameWx.get_canvas.__dict__.__setitem__('stypy_param_names_list', ['fig'])
        FigureFrameWx.get_canvas.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureFrameWx.get_canvas.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureFrameWx.get_canvas.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureFrameWx.get_canvas.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureFrameWx.get_canvas.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureFrameWx.get_canvas.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureFrameWx.get_canvas', ['fig'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_canvas', localization, ['fig'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_canvas(...)' code ##################

        
        # Call to FigureCanvasWx(...): (line 1235)
        # Processing the call arguments (line 1235)
        # Getting the type of 'self' (line 1235)
        self_266514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 30), 'self', False)
        int_266515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1235, 36), 'int')
        # Getting the type of 'fig' (line 1235)
        fig_266516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 40), 'fig', False)
        # Processing the call keyword arguments (line 1235)
        kwargs_266517 = {}
        # Getting the type of 'FigureCanvasWx' (line 1235)
        FigureCanvasWx_266513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 15), 'FigureCanvasWx', False)
        # Calling FigureCanvasWx(args, kwargs) (line 1235)
        FigureCanvasWx_call_result_266518 = invoke(stypy.reporting.localization.Localization(__file__, 1235, 15), FigureCanvasWx_266513, *[self_266514, int_266515, fig_266516], **kwargs_266517)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1235, 8), 'stypy_return_type', FigureCanvasWx_call_result_266518)
        
        # ################# End of 'get_canvas(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_canvas' in the type store
        # Getting the type of 'stypy_return_type' (line 1234)
        stypy_return_type_266519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_266519)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_canvas'
        return stypy_return_type_266519


    @norecursion
    def get_figure_manager(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_figure_manager'
        module_type_store = module_type_store.open_function_context('get_figure_manager', 1237, 4, False)
        # Assigning a type to the variable 'self' (line 1238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureFrameWx.get_figure_manager.__dict__.__setitem__('stypy_localization', localization)
        FigureFrameWx.get_figure_manager.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureFrameWx.get_figure_manager.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureFrameWx.get_figure_manager.__dict__.__setitem__('stypy_function_name', 'FigureFrameWx.get_figure_manager')
        FigureFrameWx.get_figure_manager.__dict__.__setitem__('stypy_param_names_list', [])
        FigureFrameWx.get_figure_manager.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureFrameWx.get_figure_manager.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureFrameWx.get_figure_manager.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureFrameWx.get_figure_manager.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureFrameWx.get_figure_manager.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureFrameWx.get_figure_manager.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureFrameWx.get_figure_manager', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_figure_manager', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_figure_manager(...)' code ##################

        
        # Call to DEBUG_MSG(...): (line 1238)
        # Processing the call arguments (line 1238)
        unicode_266521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 18), 'unicode', u'get_figure_manager()')
        int_266522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 42), 'int')
        # Getting the type of 'self' (line 1238)
        self_266523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 45), 'self', False)
        # Processing the call keyword arguments (line 1238)
        kwargs_266524 = {}
        # Getting the type of 'DEBUG_MSG' (line 1238)
        DEBUG_MSG_266520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 1238)
        DEBUG_MSG_call_result_266525 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 8), DEBUG_MSG_266520, *[unicode_266521, int_266522, self_266523], **kwargs_266524)
        
        # Getting the type of 'self' (line 1239)
        self_266526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 15), 'self')
        # Obtaining the member 'figmgr' of a type (line 1239)
        figmgr_266527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 15), self_266526, 'figmgr')
        # Assigning a type to the variable 'stypy_return_type' (line 1239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1239, 8), 'stypy_return_type', figmgr_266527)
        
        # ################# End of 'get_figure_manager(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_figure_manager' in the type store
        # Getting the type of 'stypy_return_type' (line 1237)
        stypy_return_type_266528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_266528)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_figure_manager'
        return stypy_return_type_266528


    @norecursion
    def _onClose(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onClose'
        module_type_store = module_type_store.open_function_context('_onClose', 1241, 4, False)
        # Assigning a type to the variable 'self' (line 1242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureFrameWx._onClose.__dict__.__setitem__('stypy_localization', localization)
        FigureFrameWx._onClose.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureFrameWx._onClose.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureFrameWx._onClose.__dict__.__setitem__('stypy_function_name', 'FigureFrameWx._onClose')
        FigureFrameWx._onClose.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        FigureFrameWx._onClose.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureFrameWx._onClose.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureFrameWx._onClose.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureFrameWx._onClose.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureFrameWx._onClose.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureFrameWx._onClose.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureFrameWx._onClose', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onClose', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onClose(...)' code ##################

        
        # Call to DEBUG_MSG(...): (line 1242)
        # Processing the call arguments (line 1242)
        unicode_266530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1242, 18), 'unicode', u'onClose()')
        int_266531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1242, 31), 'int')
        # Getting the type of 'self' (line 1242)
        self_266532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 34), 'self', False)
        # Processing the call keyword arguments (line 1242)
        kwargs_266533 = {}
        # Getting the type of 'DEBUG_MSG' (line 1242)
        DEBUG_MSG_266529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 1242)
        DEBUG_MSG_call_result_266534 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 8), DEBUG_MSG_266529, *[unicode_266530, int_266531, self_266532], **kwargs_266533)
        
        
        # Call to close_event(...): (line 1243)
        # Processing the call keyword arguments (line 1243)
        kwargs_266538 = {}
        # Getting the type of 'self' (line 1243)
        self_266535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1243)
        canvas_266536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 8), self_266535, 'canvas')
        # Obtaining the member 'close_event' of a type (line 1243)
        close_event_266537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 8), canvas_266536, 'close_event')
        # Calling close_event(args, kwargs) (line 1243)
        close_event_call_result_266539 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 8), close_event_266537, *[], **kwargs_266538)
        
        
        # Call to stop_event_loop(...): (line 1244)
        # Processing the call keyword arguments (line 1244)
        kwargs_266543 = {}
        # Getting the type of 'self' (line 1244)
        self_266540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1244)
        canvas_266541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1244, 8), self_266540, 'canvas')
        # Obtaining the member 'stop_event_loop' of a type (line 1244)
        stop_event_loop_266542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1244, 8), canvas_266541, 'stop_event_loop')
        # Calling stop_event_loop(args, kwargs) (line 1244)
        stop_event_loop_call_result_266544 = invoke(stypy.reporting.localization.Localization(__file__, 1244, 8), stop_event_loop_266542, *[], **kwargs_266543)
        
        
        # Call to destroy(...): (line 1245)
        # Processing the call arguments (line 1245)
        # Getting the type of 'self' (line 1245)
        self_266547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 20), 'self', False)
        # Obtaining the member 'num' of a type (line 1245)
        num_266548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1245, 20), self_266547, 'num')
        # Processing the call keyword arguments (line 1245)
        kwargs_266549 = {}
        # Getting the type of 'Gcf' (line 1245)
        Gcf_266545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 8), 'Gcf', False)
        # Obtaining the member 'destroy' of a type (line 1245)
        destroy_266546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1245, 8), Gcf_266545, 'destroy')
        # Calling destroy(args, kwargs) (line 1245)
        destroy_call_result_266550 = invoke(stypy.reporting.localization.Localization(__file__, 1245, 8), destroy_266546, *[num_266548], **kwargs_266549)
        
        
        # ################# End of '_onClose(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onClose' in the type store
        # Getting the type of 'stypy_return_type' (line 1241)
        stypy_return_type_266551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_266551)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onClose'
        return stypy_return_type_266551


    @norecursion
    def GetToolBar(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'GetToolBar'
        module_type_store = module_type_store.open_function_context('GetToolBar', 1248, 4, False)
        # Assigning a type to the variable 'self' (line 1249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureFrameWx.GetToolBar.__dict__.__setitem__('stypy_localization', localization)
        FigureFrameWx.GetToolBar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureFrameWx.GetToolBar.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureFrameWx.GetToolBar.__dict__.__setitem__('stypy_function_name', 'FigureFrameWx.GetToolBar')
        FigureFrameWx.GetToolBar.__dict__.__setitem__('stypy_param_names_list', [])
        FigureFrameWx.GetToolBar.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureFrameWx.GetToolBar.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureFrameWx.GetToolBar.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureFrameWx.GetToolBar.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureFrameWx.GetToolBar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureFrameWx.GetToolBar.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureFrameWx.GetToolBar', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'GetToolBar', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'GetToolBar(...)' code ##################

        unicode_266552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 8), 'unicode', u"Override wxFrame::GetToolBar as we don't have managed toolbar")
        # Getting the type of 'self' (line 1250)
        self_266553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 15), 'self')
        # Obtaining the member 'toolbar' of a type (line 1250)
        toolbar_266554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1250, 15), self_266553, 'toolbar')
        # Assigning a type to the variable 'stypy_return_type' (line 1250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 8), 'stypy_return_type', toolbar_266554)
        
        # ################# End of 'GetToolBar(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'GetToolBar' in the type store
        # Getting the type of 'stypy_return_type' (line 1248)
        stypy_return_type_266555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_266555)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'GetToolBar'
        return stypy_return_type_266555


    @norecursion
    def Destroy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'Destroy'
        module_type_store = module_type_store.open_function_context('Destroy', 1252, 4, False)
        # Assigning a type to the variable 'self' (line 1253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureFrameWx.Destroy.__dict__.__setitem__('stypy_localization', localization)
        FigureFrameWx.Destroy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureFrameWx.Destroy.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureFrameWx.Destroy.__dict__.__setitem__('stypy_function_name', 'FigureFrameWx.Destroy')
        FigureFrameWx.Destroy.__dict__.__setitem__('stypy_param_names_list', [])
        FigureFrameWx.Destroy.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureFrameWx.Destroy.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureFrameWx.Destroy.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureFrameWx.Destroy.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureFrameWx.Destroy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureFrameWx.Destroy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureFrameWx.Destroy', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'Destroy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'Destroy(...)' code ##################

        
        
        # SSA begins for try-except statement (line 1253)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to mpl_disconnect(...): (line 1254)
        # Processing the call arguments (line 1254)
        # Getting the type of 'self' (line 1254)
        self_266559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 39), 'self', False)
        # Obtaining the member 'toolbar' of a type (line 1254)
        toolbar_266560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1254, 39), self_266559, 'toolbar')
        # Obtaining the member '_idDrag' of a type (line 1254)
        _idDrag_266561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1254, 39), toolbar_266560, '_idDrag')
        # Processing the call keyword arguments (line 1254)
        kwargs_266562 = {}
        # Getting the type of 'self' (line 1254)
        self_266556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1254)
        canvas_266557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1254, 12), self_266556, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 1254)
        mpl_disconnect_266558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1254, 12), canvas_266557, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 1254)
        mpl_disconnect_call_result_266563 = invoke(stypy.reporting.localization.Localization(__file__, 1254, 12), mpl_disconnect_266558, *[_idDrag_266561], **kwargs_266562)
        
        # SSA branch for the except part of a try statement (line 1253)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 1253)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1253)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to IsBeingDeleted(...): (line 1258)
        # Processing the call keyword arguments (line 1258)
        kwargs_266566 = {}
        # Getting the type of 'self' (line 1258)
        self_266564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 15), 'self', False)
        # Obtaining the member 'IsBeingDeleted' of a type (line 1258)
        IsBeingDeleted_266565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1258, 15), self_266564, 'IsBeingDeleted')
        # Calling IsBeingDeleted(args, kwargs) (line 1258)
        IsBeingDeleted_call_result_266567 = invoke(stypy.reporting.localization.Localization(__file__, 1258, 15), IsBeingDeleted_266565, *[], **kwargs_266566)
        
        # Applying the 'not' unary operator (line 1258)
        result_not__266568 = python_operator(stypy.reporting.localization.Localization(__file__, 1258, 11), 'not', IsBeingDeleted_call_result_266567)
        
        # Testing the type of an if condition (line 1258)
        if_condition_266569 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1258, 8), result_not__266568)
        # Assigning a type to the variable 'if_condition_266569' (line 1258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 8), 'if_condition_266569', if_condition_266569)
        # SSA begins for if statement (line 1258)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to Destroy(...): (line 1259)
        # Processing the call arguments (line 1259)
        # Getting the type of 'self' (line 1259)
        self_266573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 29), 'self', False)
        # Getting the type of 'args' (line 1259)
        args_266574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 36), 'args', False)
        # Processing the call keyword arguments (line 1259)
        # Getting the type of 'kwargs' (line 1259)
        kwargs_266575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 44), 'kwargs', False)
        kwargs_266576 = {'kwargs_266575': kwargs_266575}
        # Getting the type of 'wx' (line 1259)
        wx_266570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 12), 'wx', False)
        # Obtaining the member 'Frame' of a type (line 1259)
        Frame_266571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 12), wx_266570, 'Frame')
        # Obtaining the member 'Destroy' of a type (line 1259)
        Destroy_266572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 12), Frame_266571, 'Destroy')
        # Calling Destroy(args, kwargs) (line 1259)
        Destroy_call_result_266577 = invoke(stypy.reporting.localization.Localization(__file__, 1259, 12), Destroy_266572, *[self_266573, args_266574], **kwargs_266576)
        
        
        
        # Getting the type of 'self' (line 1260)
        self_266578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 15), 'self')
        # Obtaining the member 'toolbar' of a type (line 1260)
        toolbar_266579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1260, 15), self_266578, 'toolbar')
        # Getting the type of 'None' (line 1260)
        None_266580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 35), 'None')
        # Applying the binary operator 'isnot' (line 1260)
        result_is_not_266581 = python_operator(stypy.reporting.localization.Localization(__file__, 1260, 15), 'isnot', toolbar_266579, None_266580)
        
        # Testing the type of an if condition (line 1260)
        if_condition_266582 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1260, 12), result_is_not_266581)
        # Assigning a type to the variable 'if_condition_266582' (line 1260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 12), 'if_condition_266582', if_condition_266582)
        # SSA begins for if statement (line 1260)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to Destroy(...): (line 1261)
        # Processing the call keyword arguments (line 1261)
        kwargs_266586 = {}
        # Getting the type of 'self' (line 1261)
        self_266583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 16), 'self', False)
        # Obtaining the member 'toolbar' of a type (line 1261)
        toolbar_266584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 16), self_266583, 'toolbar')
        # Obtaining the member 'Destroy' of a type (line 1261)
        Destroy_266585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 16), toolbar_266584, 'Destroy')
        # Calling Destroy(args, kwargs) (line 1261)
        Destroy_call_result_266587 = invoke(stypy.reporting.localization.Localization(__file__, 1261, 16), Destroy_266585, *[], **kwargs_266586)
        
        # SSA join for if statement (line 1260)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1262):
        
        # Assigning a Call to a Name (line 1262):
        
        # Call to GetApp(...): (line 1262)
        # Processing the call keyword arguments (line 1262)
        kwargs_266590 = {}
        # Getting the type of 'wx' (line 1262)
        wx_266588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 20), 'wx', False)
        # Obtaining the member 'GetApp' of a type (line 1262)
        GetApp_266589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1262, 20), wx_266588, 'GetApp')
        # Calling GetApp(args, kwargs) (line 1262)
        GetApp_call_result_266591 = invoke(stypy.reporting.localization.Localization(__file__, 1262, 20), GetApp_266589, *[], **kwargs_266590)
        
        # Assigning a type to the variable 'wxapp' (line 1262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1262, 12), 'wxapp', GetApp_call_result_266591)
        
        # Getting the type of 'wxapp' (line 1263)
        wxapp_266592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 15), 'wxapp')
        # Testing the type of an if condition (line 1263)
        if_condition_266593 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1263, 12), wxapp_266592)
        # Assigning a type to the variable 'if_condition_266593' (line 1263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 12), 'if_condition_266593', if_condition_266593)
        # SSA begins for if statement (line 1263)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to Yield(...): (line 1264)
        # Processing the call keyword arguments (line 1264)
        kwargs_266596 = {}
        # Getting the type of 'wxapp' (line 1264)
        wxapp_266594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 16), 'wxapp', False)
        # Obtaining the member 'Yield' of a type (line 1264)
        Yield_266595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 16), wxapp_266594, 'Yield')
        # Calling Yield(args, kwargs) (line 1264)
        Yield_call_result_266597 = invoke(stypy.reporting.localization.Localization(__file__, 1264, 16), Yield_266595, *[], **kwargs_266596)
        
        # SSA join for if statement (line 1263)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1258)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'True' (line 1265)
        True_266598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1265, 8), 'stypy_return_type', True_266598)
        
        # ################# End of 'Destroy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'Destroy' in the type store
        # Getting the type of 'stypy_return_type' (line 1252)
        stypy_return_type_266599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_266599)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'Destroy'
        return stypy_return_type_266599


# Assigning a type to the variable 'FigureFrameWx' (line 1167)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1167, 0), 'FigureFrameWx', FigureFrameWx)
# Declaration of the 'FigureManagerWx' class
# Getting the type of 'FigureManagerBase' (line 1268)
FigureManagerBase_266600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 22), 'FigureManagerBase')

class FigureManagerWx(FigureManagerBase_266600, ):
    unicode_266601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1282, (-1)), 'unicode', u'\n    This class contains the FigureCanvas and GUI frame\n\n    It is instantiated by GcfWx whenever a new figure is created. GcfWx is\n    responsible for managing multiple instances of FigureManagerWx.\n\n    Attributes\n    ----------\n    canvas : `FigureCanvas`\n        a FigureCanvasWx(wx.Panel) instance\n    window : wxFrame\n        a wxFrame instance - wxpython.org/Phoenix/docs/html/Frame.html\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1284, 4, False)
        # Assigning a type to the variable 'self' (line 1285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1285, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerWx.__init__', ['canvas', 'num', 'frame'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['canvas', 'num', 'frame'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to DEBUG_MSG(...): (line 1285)
        # Processing the call arguments (line 1285)
        unicode_266603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1285, 18), 'unicode', u'__init__()')
        int_266604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1285, 32), 'int')
        # Getting the type of 'self' (line 1285)
        self_266605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 35), 'self', False)
        # Processing the call keyword arguments (line 1285)
        kwargs_266606 = {}
        # Getting the type of 'DEBUG_MSG' (line 1285)
        DEBUG_MSG_266602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 1285)
        DEBUG_MSG_call_result_266607 = invoke(stypy.reporting.localization.Localization(__file__, 1285, 8), DEBUG_MSG_266602, *[unicode_266603, int_266604, self_266605], **kwargs_266606)
        
        
        # Call to __init__(...): (line 1286)
        # Processing the call arguments (line 1286)
        # Getting the type of 'self' (line 1286)
        self_266610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 35), 'self', False)
        # Getting the type of 'canvas' (line 1286)
        canvas_266611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 41), 'canvas', False)
        # Getting the type of 'num' (line 1286)
        num_266612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 49), 'num', False)
        # Processing the call keyword arguments (line 1286)
        kwargs_266613 = {}
        # Getting the type of 'FigureManagerBase' (line 1286)
        FigureManagerBase_266608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 8), 'FigureManagerBase', False)
        # Obtaining the member '__init__' of a type (line 1286)
        init___266609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1286, 8), FigureManagerBase_266608, '__init__')
        # Calling __init__(args, kwargs) (line 1286)
        init___call_result_266614 = invoke(stypy.reporting.localization.Localization(__file__, 1286, 8), init___266609, *[self_266610, canvas_266611, num_266612], **kwargs_266613)
        
        
        # Assigning a Name to a Attribute (line 1287):
        
        # Assigning a Name to a Attribute (line 1287):
        # Getting the type of 'frame' (line 1287)
        frame_266615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 21), 'frame')
        # Getting the type of 'self' (line 1287)
        self_266616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 8), 'self')
        # Setting the type of the member 'frame' of a type (line 1287)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1287, 8), self_266616, 'frame', frame_266615)
        
        # Assigning a Name to a Attribute (line 1288):
        
        # Assigning a Name to a Attribute (line 1288):
        # Getting the type of 'frame' (line 1288)
        frame_266617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 22), 'frame')
        # Getting the type of 'self' (line 1288)
        self_266618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 8), 'self')
        # Setting the type of the member 'window' of a type (line 1288)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1288, 8), self_266618, 'window', frame_266617)
        
        # Assigning a Call to a Attribute (line 1290):
        
        # Assigning a Call to a Attribute (line 1290):
        
        # Call to GetToolBar(...): (line 1290)
        # Processing the call keyword arguments (line 1290)
        kwargs_266621 = {}
        # Getting the type of 'frame' (line 1290)
        frame_266619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 18), 'frame', False)
        # Obtaining the member 'GetToolBar' of a type (line 1290)
        GetToolBar_266620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1290, 18), frame_266619, 'GetToolBar')
        # Calling GetToolBar(args, kwargs) (line 1290)
        GetToolBar_call_result_266622 = invoke(stypy.reporting.localization.Localization(__file__, 1290, 18), GetToolBar_266620, *[], **kwargs_266621)
        
        # Getting the type of 'self' (line 1290)
        self_266623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 8), 'self')
        # Setting the type of the member 'tb' of a type (line 1290)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1290, 8), self_266623, 'tb', GetToolBar_call_result_266622)
        
        # Assigning a Attribute to a Attribute (line 1291):
        
        # Assigning a Attribute to a Attribute (line 1291):
        # Getting the type of 'self' (line 1291)
        self_266624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 23), 'self')
        # Obtaining the member 'tb' of a type (line 1291)
        tb_266625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 23), self_266624, 'tb')
        # Getting the type of 'self' (line 1291)
        self_266626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 8), 'self')
        # Setting the type of the member 'toolbar' of a type (line 1291)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 8), self_266626, 'toolbar', tb_266625)

        @norecursion
        def notify_axes_change(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'notify_axes_change'
            module_type_store = module_type_store.open_function_context('notify_axes_change', 1293, 8, False)
            
            # Passed parameters checking function
            notify_axes_change.stypy_localization = localization
            notify_axes_change.stypy_type_of_self = None
            notify_axes_change.stypy_type_store = module_type_store
            notify_axes_change.stypy_function_name = 'notify_axes_change'
            notify_axes_change.stypy_param_names_list = ['fig']
            notify_axes_change.stypy_varargs_param_name = None
            notify_axes_change.stypy_kwargs_param_name = None
            notify_axes_change.stypy_call_defaults = defaults
            notify_axes_change.stypy_call_varargs = varargs
            notify_axes_change.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'notify_axes_change', ['fig'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'notify_axes_change', localization, ['fig'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'notify_axes_change(...)' code ##################

            unicode_266627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, 12), 'unicode', u'this will be called whenever the current axes is changed')
            
            
            # Getting the type of 'self' (line 1295)
            self_266628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 15), 'self')
            # Obtaining the member 'tb' of a type (line 1295)
            tb_266629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 15), self_266628, 'tb')
            # Getting the type of 'None' (line 1295)
            None_266630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 30), 'None')
            # Applying the binary operator 'isnot' (line 1295)
            result_is_not_266631 = python_operator(stypy.reporting.localization.Localization(__file__, 1295, 15), 'isnot', tb_266629, None_266630)
            
            # Testing the type of an if condition (line 1295)
            if_condition_266632 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1295, 12), result_is_not_266631)
            # Assigning a type to the variable 'if_condition_266632' (line 1295)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 12), 'if_condition_266632', if_condition_266632)
            # SSA begins for if statement (line 1295)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to update(...): (line 1296)
            # Processing the call keyword arguments (line 1296)
            kwargs_266636 = {}
            # Getting the type of 'self' (line 1296)
            self_266633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 16), 'self', False)
            # Obtaining the member 'tb' of a type (line 1296)
            tb_266634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 16), self_266633, 'tb')
            # Obtaining the member 'update' of a type (line 1296)
            update_266635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 16), tb_266634, 'update')
            # Calling update(args, kwargs) (line 1296)
            update_call_result_266637 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 16), update_266635, *[], **kwargs_266636)
            
            # SSA join for if statement (line 1295)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of 'notify_axes_change(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'notify_axes_change' in the type store
            # Getting the type of 'stypy_return_type' (line 1293)
            stypy_return_type_266638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_266638)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'notify_axes_change'
            return stypy_return_type_266638

        # Assigning a type to the variable 'notify_axes_change' (line 1293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 8), 'notify_axes_change', notify_axes_change)
        
        # Call to add_axobserver(...): (line 1297)
        # Processing the call arguments (line 1297)
        # Getting the type of 'notify_axes_change' (line 1297)
        notify_axes_change_266643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 42), 'notify_axes_change', False)
        # Processing the call keyword arguments (line 1297)
        kwargs_266644 = {}
        # Getting the type of 'self' (line 1297)
        self_266639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1297)
        canvas_266640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 8), self_266639, 'canvas')
        # Obtaining the member 'figure' of a type (line 1297)
        figure_266641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 8), canvas_266640, 'figure')
        # Obtaining the member 'add_axobserver' of a type (line 1297)
        add_axobserver_266642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 8), figure_266641, 'add_axobserver')
        # Calling add_axobserver(args, kwargs) (line 1297)
        add_axobserver_call_result_266645 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 8), add_axobserver_266642, *[notify_axes_change_266643], **kwargs_266644)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def show(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'show'
        module_type_store = module_type_store.open_function_context('show', 1299, 4, False)
        # Assigning a type to the variable 'self' (line 1300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerWx.show.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerWx.show.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerWx.show.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerWx.show.__dict__.__setitem__('stypy_function_name', 'FigureManagerWx.show')
        FigureManagerWx.show.__dict__.__setitem__('stypy_param_names_list', [])
        FigureManagerWx.show.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerWx.show.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerWx.show.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerWx.show.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerWx.show.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerWx.show.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerWx.show', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'show', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'show(...)' code ##################

        
        # Call to Show(...): (line 1300)
        # Processing the call keyword arguments (line 1300)
        kwargs_266649 = {}
        # Getting the type of 'self' (line 1300)
        self_266646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 8), 'self', False)
        # Obtaining the member 'frame' of a type (line 1300)
        frame_266647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1300, 8), self_266646, 'frame')
        # Obtaining the member 'Show' of a type (line 1300)
        Show_266648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1300, 8), frame_266647, 'Show')
        # Calling Show(args, kwargs) (line 1300)
        Show_call_result_266650 = invoke(stypy.reporting.localization.Localization(__file__, 1300, 8), Show_266648, *[], **kwargs_266649)
        
        
        # Call to draw(...): (line 1301)
        # Processing the call keyword arguments (line 1301)
        kwargs_266654 = {}
        # Getting the type of 'self' (line 1301)
        self_266651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1301)
        canvas_266652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 8), self_266651, 'canvas')
        # Obtaining the member 'draw' of a type (line 1301)
        draw_266653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 8), canvas_266652, 'draw')
        # Calling draw(args, kwargs) (line 1301)
        draw_call_result_266655 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 8), draw_266653, *[], **kwargs_266654)
        
        
        # ################# End of 'show(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'show' in the type store
        # Getting the type of 'stypy_return_type' (line 1299)
        stypy_return_type_266656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_266656)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'show'
        return stypy_return_type_266656


    @norecursion
    def destroy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'destroy'
        module_type_store = module_type_store.open_function_context('destroy', 1303, 4, False)
        # Assigning a type to the variable 'self' (line 1304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerWx.destroy.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerWx.destroy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerWx.destroy.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerWx.destroy.__dict__.__setitem__('stypy_function_name', 'FigureManagerWx.destroy')
        FigureManagerWx.destroy.__dict__.__setitem__('stypy_param_names_list', [])
        FigureManagerWx.destroy.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureManagerWx.destroy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerWx.destroy.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerWx.destroy.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerWx.destroy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerWx.destroy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerWx.destroy', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'destroy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'destroy(...)' code ##################

        
        # Call to DEBUG_MSG(...): (line 1304)
        # Processing the call arguments (line 1304)
        unicode_266658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1304, 18), 'unicode', u'destroy()')
        int_266659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1304, 31), 'int')
        # Getting the type of 'self' (line 1304)
        self_266660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 34), 'self', False)
        # Processing the call keyword arguments (line 1304)
        kwargs_266661 = {}
        # Getting the type of 'DEBUG_MSG' (line 1304)
        DEBUG_MSG_266657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 1304)
        DEBUG_MSG_call_result_266662 = invoke(stypy.reporting.localization.Localization(__file__, 1304, 8), DEBUG_MSG_266657, *[unicode_266658, int_266659, self_266660], **kwargs_266661)
        
        
        # Call to Destroy(...): (line 1305)
        # Processing the call keyword arguments (line 1305)
        kwargs_266666 = {}
        # Getting the type of 'self' (line 1305)
        self_266663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 8), 'self', False)
        # Obtaining the member 'frame' of a type (line 1305)
        frame_266664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 8), self_266663, 'frame')
        # Obtaining the member 'Destroy' of a type (line 1305)
        Destroy_266665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 8), frame_266664, 'Destroy')
        # Calling Destroy(args, kwargs) (line 1305)
        Destroy_call_result_266667 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 8), Destroy_266665, *[], **kwargs_266666)
        
        
        # Assigning a Call to a Name (line 1306):
        
        # Assigning a Call to a Name (line 1306):
        
        # Call to GetApp(...): (line 1306)
        # Processing the call keyword arguments (line 1306)
        kwargs_266670 = {}
        # Getting the type of 'wx' (line 1306)
        wx_266668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 16), 'wx', False)
        # Obtaining the member 'GetApp' of a type (line 1306)
        GetApp_266669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1306, 16), wx_266668, 'GetApp')
        # Calling GetApp(args, kwargs) (line 1306)
        GetApp_call_result_266671 = invoke(stypy.reporting.localization.Localization(__file__, 1306, 16), GetApp_266669, *[], **kwargs_266670)
        
        # Assigning a type to the variable 'wxapp' (line 1306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1306, 8), 'wxapp', GetApp_call_result_266671)
        
        # Getting the type of 'wxapp' (line 1307)
        wxapp_266672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 11), 'wxapp')
        # Testing the type of an if condition (line 1307)
        if_condition_266673 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1307, 8), wxapp_266672)
        # Assigning a type to the variable 'if_condition_266673' (line 1307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 8), 'if_condition_266673', if_condition_266673)
        # SSA begins for if statement (line 1307)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to Yield(...): (line 1308)
        # Processing the call keyword arguments (line 1308)
        kwargs_266676 = {}
        # Getting the type of 'wxapp' (line 1308)
        wxapp_266674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 12), 'wxapp', False)
        # Obtaining the member 'Yield' of a type (line 1308)
        Yield_266675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 12), wxapp_266674, 'Yield')
        # Calling Yield(args, kwargs) (line 1308)
        Yield_call_result_266677 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 12), Yield_266675, *[], **kwargs_266676)
        
        # SSA join for if statement (line 1307)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'destroy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'destroy' in the type store
        # Getting the type of 'stypy_return_type' (line 1303)
        stypy_return_type_266678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_266678)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'destroy'
        return stypy_return_type_266678


    @norecursion
    def get_window_title(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_window_title'
        module_type_store = module_type_store.open_function_context('get_window_title', 1310, 4, False)
        # Assigning a type to the variable 'self' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerWx.get_window_title.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerWx.get_window_title.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerWx.get_window_title.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerWx.get_window_title.__dict__.__setitem__('stypy_function_name', 'FigureManagerWx.get_window_title')
        FigureManagerWx.get_window_title.__dict__.__setitem__('stypy_param_names_list', [])
        FigureManagerWx.get_window_title.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerWx.get_window_title.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerWx.get_window_title.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerWx.get_window_title.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerWx.get_window_title.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerWx.get_window_title.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerWx.get_window_title', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_title', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_title(...)' code ##################

        
        # Call to GetTitle(...): (line 1311)
        # Processing the call keyword arguments (line 1311)
        kwargs_266682 = {}
        # Getting the type of 'self' (line 1311)
        self_266679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 15), 'self', False)
        # Obtaining the member 'window' of a type (line 1311)
        window_266680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 15), self_266679, 'window')
        # Obtaining the member 'GetTitle' of a type (line 1311)
        GetTitle_266681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 15), window_266680, 'GetTitle')
        # Calling GetTitle(args, kwargs) (line 1311)
        GetTitle_call_result_266683 = invoke(stypy.reporting.localization.Localization(__file__, 1311, 15), GetTitle_266681, *[], **kwargs_266682)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 8), 'stypy_return_type', GetTitle_call_result_266683)
        
        # ################# End of 'get_window_title(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_title' in the type store
        # Getting the type of 'stypy_return_type' (line 1310)
        stypy_return_type_266684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_266684)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_title'
        return stypy_return_type_266684


    @norecursion
    def set_window_title(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_window_title'
        module_type_store = module_type_store.open_function_context('set_window_title', 1313, 4, False)
        # Assigning a type to the variable 'self' (line 1314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerWx.set_window_title.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerWx.set_window_title.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerWx.set_window_title.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerWx.set_window_title.__dict__.__setitem__('stypy_function_name', 'FigureManagerWx.set_window_title')
        FigureManagerWx.set_window_title.__dict__.__setitem__('stypy_param_names_list', ['title'])
        FigureManagerWx.set_window_title.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerWx.set_window_title.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerWx.set_window_title.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerWx.set_window_title.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerWx.set_window_title.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerWx.set_window_title.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerWx.set_window_title', ['title'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_window_title', localization, ['title'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_window_title(...)' code ##################

        
        # Call to SetTitle(...): (line 1314)
        # Processing the call arguments (line 1314)
        # Getting the type of 'title' (line 1314)
        title_266688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 29), 'title', False)
        # Processing the call keyword arguments (line 1314)
        kwargs_266689 = {}
        # Getting the type of 'self' (line 1314)
        self_266685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 8), 'self', False)
        # Obtaining the member 'window' of a type (line 1314)
        window_266686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 8), self_266685, 'window')
        # Obtaining the member 'SetTitle' of a type (line 1314)
        SetTitle_266687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 8), window_266686, 'SetTitle')
        # Calling SetTitle(args, kwargs) (line 1314)
        SetTitle_call_result_266690 = invoke(stypy.reporting.localization.Localization(__file__, 1314, 8), SetTitle_266687, *[title_266688], **kwargs_266689)
        
        
        # ################# End of 'set_window_title(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_window_title' in the type store
        # Getting the type of 'stypy_return_type' (line 1313)
        stypy_return_type_266691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_266691)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_window_title'
        return stypy_return_type_266691


    @norecursion
    def resize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'resize'
        module_type_store = module_type_store.open_function_context('resize', 1316, 4, False)
        # Assigning a type to the variable 'self' (line 1317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1317, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerWx.resize.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerWx.resize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerWx.resize.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerWx.resize.__dict__.__setitem__('stypy_function_name', 'FigureManagerWx.resize')
        FigureManagerWx.resize.__dict__.__setitem__('stypy_param_names_list', ['width', 'height'])
        FigureManagerWx.resize.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerWx.resize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerWx.resize.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerWx.resize.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerWx.resize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerWx.resize.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerWx.resize', ['width', 'height'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'resize', localization, ['width', 'height'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'resize(...)' code ##################

        unicode_266692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 8), 'unicode', u'Set the canvas size in pixels')
        
        # Call to SetInitialSize(...): (line 1318)
        # Processing the call arguments (line 1318)
        
        # Call to Size(...): (line 1318)
        # Processing the call arguments (line 1318)
        # Getting the type of 'width' (line 1318)
        width_266698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 43), 'width', False)
        # Getting the type of 'height' (line 1318)
        height_266699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 50), 'height', False)
        # Processing the call keyword arguments (line 1318)
        kwargs_266700 = {}
        # Getting the type of 'wx' (line 1318)
        wx_266696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 35), 'wx', False)
        # Obtaining the member 'Size' of a type (line 1318)
        Size_266697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 35), wx_266696, 'Size')
        # Calling Size(args, kwargs) (line 1318)
        Size_call_result_266701 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 35), Size_266697, *[width_266698, height_266699], **kwargs_266700)
        
        # Processing the call keyword arguments (line 1318)
        kwargs_266702 = {}
        # Getting the type of 'self' (line 1318)
        self_266693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1318)
        canvas_266694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 8), self_266693, 'canvas')
        # Obtaining the member 'SetInitialSize' of a type (line 1318)
        SetInitialSize_266695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 8), canvas_266694, 'SetInitialSize')
        # Calling SetInitialSize(args, kwargs) (line 1318)
        SetInitialSize_call_result_266703 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 8), SetInitialSize_266695, *[Size_call_result_266701], **kwargs_266702)
        
        
        # Call to Fit(...): (line 1319)
        # Processing the call arguments (line 1319)
        # Getting the type of 'self' (line 1319)
        self_266710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 35), 'self', False)
        # Obtaining the member 'window' of a type (line 1319)
        window_266711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 35), self_266710, 'window')
        # Processing the call keyword arguments (line 1319)
        kwargs_266712 = {}
        
        # Call to GetSizer(...): (line 1319)
        # Processing the call keyword arguments (line 1319)
        kwargs_266707 = {}
        # Getting the type of 'self' (line 1319)
        self_266704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 8), 'self', False)
        # Obtaining the member 'window' of a type (line 1319)
        window_266705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 8), self_266704, 'window')
        # Obtaining the member 'GetSizer' of a type (line 1319)
        GetSizer_266706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 8), window_266705, 'GetSizer')
        # Calling GetSizer(args, kwargs) (line 1319)
        GetSizer_call_result_266708 = invoke(stypy.reporting.localization.Localization(__file__, 1319, 8), GetSizer_266706, *[], **kwargs_266707)
        
        # Obtaining the member 'Fit' of a type (line 1319)
        Fit_266709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 8), GetSizer_call_result_266708, 'Fit')
        # Calling Fit(args, kwargs) (line 1319)
        Fit_call_result_266713 = invoke(stypy.reporting.localization.Localization(__file__, 1319, 8), Fit_266709, *[window_266711], **kwargs_266712)
        
        
        # ################# End of 'resize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'resize' in the type store
        # Getting the type of 'stypy_return_type' (line 1316)
        stypy_return_type_266714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_266714)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'resize'
        return stypy_return_type_266714


# Assigning a type to the variable 'FigureManagerWx' (line 1268)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1268, 0), 'FigureManagerWx', FigureManagerWx)

# Assigning a Call to a Name (line 1326):

# Assigning a Call to a Name (line 1326):

# Call to NewId(...): (line 1326)
# Processing the call keyword arguments (line 1326)
kwargs_266717 = {}
# Getting the type of 'wx' (line 1326)
wx_266715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 16), 'wx', False)
# Obtaining the member 'NewId' of a type (line 1326)
NewId_266716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1326, 16), wx_266715, 'NewId')
# Calling NewId(args, kwargs) (line 1326)
NewId_call_result_266718 = invoke(stypy.reporting.localization.Localization(__file__, 1326, 16), NewId_266716, *[], **kwargs_266717)

# Assigning a type to the variable '_NTB_AXISMENU' (line 1326)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1326, 0), '_NTB_AXISMENU', NewId_call_result_266718)

# Assigning a Call to a Name (line 1327):

# Assigning a Call to a Name (line 1327):

# Call to NewId(...): (line 1327)
# Processing the call keyword arguments (line 1327)
kwargs_266721 = {}
# Getting the type of 'wx' (line 1327)
wx_266719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 23), 'wx', False)
# Obtaining the member 'NewId' of a type (line 1327)
NewId_266720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 23), wx_266719, 'NewId')
# Calling NewId(args, kwargs) (line 1327)
NewId_call_result_266722 = invoke(stypy.reporting.localization.Localization(__file__, 1327, 23), NewId_266720, *[], **kwargs_266721)

# Assigning a type to the variable '_NTB_AXISMENU_BUTTON' (line 1327)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 0), '_NTB_AXISMENU_BUTTON', NewId_call_result_266722)

# Assigning a Call to a Name (line 1328):

# Assigning a Call to a Name (line 1328):

# Call to NewId(...): (line 1328)
# Processing the call keyword arguments (line 1328)
kwargs_266725 = {}
# Getting the type of 'wx' (line 1328)
wx_266723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 18), 'wx', False)
# Obtaining the member 'NewId' of a type (line 1328)
NewId_266724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1328, 18), wx_266723, 'NewId')
# Calling NewId(args, kwargs) (line 1328)
NewId_call_result_266726 = invoke(stypy.reporting.localization.Localization(__file__, 1328, 18), NewId_266724, *[], **kwargs_266725)

# Assigning a type to the variable '_NTB_X_PAN_LEFT' (line 1328)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 0), '_NTB_X_PAN_LEFT', NewId_call_result_266726)

# Assigning a Call to a Name (line 1329):

# Assigning a Call to a Name (line 1329):

# Call to NewId(...): (line 1329)
# Processing the call keyword arguments (line 1329)
kwargs_266729 = {}
# Getting the type of 'wx' (line 1329)
wx_266727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 19), 'wx', False)
# Obtaining the member 'NewId' of a type (line 1329)
NewId_266728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1329, 19), wx_266727, 'NewId')
# Calling NewId(args, kwargs) (line 1329)
NewId_call_result_266730 = invoke(stypy.reporting.localization.Localization(__file__, 1329, 19), NewId_266728, *[], **kwargs_266729)

# Assigning a type to the variable '_NTB_X_PAN_RIGHT' (line 1329)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 0), '_NTB_X_PAN_RIGHT', NewId_call_result_266730)

# Assigning a Call to a Name (line 1330):

# Assigning a Call to a Name (line 1330):

# Call to NewId(...): (line 1330)
# Processing the call keyword arguments (line 1330)
kwargs_266733 = {}
# Getting the type of 'wx' (line 1330)
wx_266731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 16), 'wx', False)
# Obtaining the member 'NewId' of a type (line 1330)
NewId_266732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1330, 16), wx_266731, 'NewId')
# Calling NewId(args, kwargs) (line 1330)
NewId_call_result_266734 = invoke(stypy.reporting.localization.Localization(__file__, 1330, 16), NewId_266732, *[], **kwargs_266733)

# Assigning a type to the variable '_NTB_X_ZOOMIN' (line 1330)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1330, 0), '_NTB_X_ZOOMIN', NewId_call_result_266734)

# Assigning a Call to a Name (line 1331):

# Assigning a Call to a Name (line 1331):

# Call to NewId(...): (line 1331)
# Processing the call keyword arguments (line 1331)
kwargs_266737 = {}
# Getting the type of 'wx' (line 1331)
wx_266735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 17), 'wx', False)
# Obtaining the member 'NewId' of a type (line 1331)
NewId_266736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1331, 17), wx_266735, 'NewId')
# Calling NewId(args, kwargs) (line 1331)
NewId_call_result_266738 = invoke(stypy.reporting.localization.Localization(__file__, 1331, 17), NewId_266736, *[], **kwargs_266737)

# Assigning a type to the variable '_NTB_X_ZOOMOUT' (line 1331)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1331, 0), '_NTB_X_ZOOMOUT', NewId_call_result_266738)

# Assigning a Call to a Name (line 1332):

# Assigning a Call to a Name (line 1332):

# Call to NewId(...): (line 1332)
# Processing the call keyword arguments (line 1332)
kwargs_266741 = {}
# Getting the type of 'wx' (line 1332)
wx_266739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 16), 'wx', False)
# Obtaining the member 'NewId' of a type (line 1332)
NewId_266740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 16), wx_266739, 'NewId')
# Calling NewId(args, kwargs) (line 1332)
NewId_call_result_266742 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 16), NewId_266740, *[], **kwargs_266741)

# Assigning a type to the variable '_NTB_Y_PAN_UP' (line 1332)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1332, 0), '_NTB_Y_PAN_UP', NewId_call_result_266742)

# Assigning a Call to a Name (line 1333):

# Assigning a Call to a Name (line 1333):

# Call to NewId(...): (line 1333)
# Processing the call keyword arguments (line 1333)
kwargs_266745 = {}
# Getting the type of 'wx' (line 1333)
wx_266743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 18), 'wx', False)
# Obtaining the member 'NewId' of a type (line 1333)
NewId_266744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1333, 18), wx_266743, 'NewId')
# Calling NewId(args, kwargs) (line 1333)
NewId_call_result_266746 = invoke(stypy.reporting.localization.Localization(__file__, 1333, 18), NewId_266744, *[], **kwargs_266745)

# Assigning a type to the variable '_NTB_Y_PAN_DOWN' (line 1333)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 0), '_NTB_Y_PAN_DOWN', NewId_call_result_266746)

# Assigning a Call to a Name (line 1334):

# Assigning a Call to a Name (line 1334):

# Call to NewId(...): (line 1334)
# Processing the call keyword arguments (line 1334)
kwargs_266749 = {}
# Getting the type of 'wx' (line 1334)
wx_266747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 16), 'wx', False)
# Obtaining the member 'NewId' of a type (line 1334)
NewId_266748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 16), wx_266747, 'NewId')
# Calling NewId(args, kwargs) (line 1334)
NewId_call_result_266750 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 16), NewId_266748, *[], **kwargs_266749)

# Assigning a type to the variable '_NTB_Y_ZOOMIN' (line 1334)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 0), '_NTB_Y_ZOOMIN', NewId_call_result_266750)

# Assigning a Call to a Name (line 1335):

# Assigning a Call to a Name (line 1335):

# Call to NewId(...): (line 1335)
# Processing the call keyword arguments (line 1335)
kwargs_266753 = {}
# Getting the type of 'wx' (line 1335)
wx_266751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 17), 'wx', False)
# Obtaining the member 'NewId' of a type (line 1335)
NewId_266752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 17), wx_266751, 'NewId')
# Calling NewId(args, kwargs) (line 1335)
NewId_call_result_266754 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 17), NewId_266752, *[], **kwargs_266753)

# Assigning a type to the variable '_NTB_Y_ZOOMOUT' (line 1335)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1335, 0), '_NTB_Y_ZOOMOUT', NewId_call_result_266754)

# Assigning a Call to a Name (line 1337):

# Assigning a Call to a Name (line 1337):

# Call to NewId(...): (line 1337)
# Processing the call keyword arguments (line 1337)
kwargs_266757 = {}
# Getting the type of 'wx' (line 1337)
wx_266755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 12), 'wx', False)
# Obtaining the member 'NewId' of a type (line 1337)
NewId_266756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1337, 12), wx_266755, 'NewId')
# Calling NewId(args, kwargs) (line 1337)
NewId_call_result_266758 = invoke(stypy.reporting.localization.Localization(__file__, 1337, 12), NewId_266756, *[], **kwargs_266757)

# Assigning a type to the variable '_NTB_SAVE' (line 1337)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 0), '_NTB_SAVE', NewId_call_result_266758)

# Assigning a Call to a Name (line 1338):

# Assigning a Call to a Name (line 1338):

# Call to NewId(...): (line 1338)
# Processing the call keyword arguments (line 1338)
kwargs_266761 = {}
# Getting the type of 'wx' (line 1338)
wx_266759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 13), 'wx', False)
# Obtaining the member 'NewId' of a type (line 1338)
NewId_266760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1338, 13), wx_266759, 'NewId')
# Calling NewId(args, kwargs) (line 1338)
NewId_call_result_266762 = invoke(stypy.reporting.localization.Localization(__file__, 1338, 13), NewId_266760, *[], **kwargs_266761)

# Assigning a type to the variable '_NTB_CLOSE' (line 1338)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1338, 0), '_NTB_CLOSE', NewId_call_result_266762)

@norecursion
def _load_bitmap(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_load_bitmap'
    module_type_store = module_type_store.open_function_context('_load_bitmap', 1341, 0, False)
    
    # Passed parameters checking function
    _load_bitmap.stypy_localization = localization
    _load_bitmap.stypy_type_of_self = None
    _load_bitmap.stypy_type_store = module_type_store
    _load_bitmap.stypy_function_name = '_load_bitmap'
    _load_bitmap.stypy_param_names_list = ['filename']
    _load_bitmap.stypy_varargs_param_name = None
    _load_bitmap.stypy_kwargs_param_name = None
    _load_bitmap.stypy_call_defaults = defaults
    _load_bitmap.stypy_call_varargs = varargs
    _load_bitmap.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_load_bitmap', ['filename'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_load_bitmap', localization, ['filename'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_load_bitmap(...)' code ##################

    unicode_266763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1348, (-1)), 'unicode', u'\n    Load a bitmap file from the backends/images subdirectory in which the\n    matplotlib library is installed. The filename parameter should not\n    contain any path information as this is determined automatically.\n\n    Returns a wx.Bitmap object\n    ')
    
    # Assigning a Call to a Name (line 1350):
    
    # Assigning a Call to a Name (line 1350):
    
    # Call to join(...): (line 1350)
    # Processing the call arguments (line 1350)
    
    # Obtaining the type of the subscript
    unicode_266767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1350, 36), 'unicode', u'datapath')
    # Getting the type of 'rcParams' (line 1350)
    rcParams_266768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 27), 'rcParams', False)
    # Obtaining the member '__getitem__' of a type (line 1350)
    getitem___266769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 27), rcParams_266768, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1350)
    subscript_call_result_266770 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 27), getitem___266769, unicode_266767)
    
    unicode_266771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1350, 49), 'unicode', u'images')
    # Processing the call keyword arguments (line 1350)
    kwargs_266772 = {}
    # Getting the type of 'os' (line 1350)
    os_266764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 14), 'os', False)
    # Obtaining the member 'path' of a type (line 1350)
    path_266765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 14), os_266764, 'path')
    # Obtaining the member 'join' of a type (line 1350)
    join_266766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 14), path_266765, 'join')
    # Calling join(args, kwargs) (line 1350)
    join_call_result_266773 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 14), join_266766, *[subscript_call_result_266770, unicode_266771], **kwargs_266772)
    
    # Assigning a type to the variable 'basedir' (line 1350)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 4), 'basedir', join_call_result_266773)
    
    # Assigning a Call to a Name (line 1352):
    
    # Assigning a Call to a Name (line 1352):
    
    # Call to normpath(...): (line 1352)
    # Processing the call arguments (line 1352)
    
    # Call to join(...): (line 1352)
    # Processing the call arguments (line 1352)
    # Getting the type of 'basedir' (line 1352)
    basedir_266780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 48), 'basedir', False)
    # Getting the type of 'filename' (line 1352)
    filename_266781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 57), 'filename', False)
    # Processing the call keyword arguments (line 1352)
    kwargs_266782 = {}
    # Getting the type of 'os' (line 1352)
    os_266777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 35), 'os', False)
    # Obtaining the member 'path' of a type (line 1352)
    path_266778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1352, 35), os_266777, 'path')
    # Obtaining the member 'join' of a type (line 1352)
    join_266779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1352, 35), path_266778, 'join')
    # Calling join(args, kwargs) (line 1352)
    join_call_result_266783 = invoke(stypy.reporting.localization.Localization(__file__, 1352, 35), join_266779, *[basedir_266780, filename_266781], **kwargs_266782)
    
    # Processing the call keyword arguments (line 1352)
    kwargs_266784 = {}
    # Getting the type of 'os' (line 1352)
    os_266774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 18), 'os', False)
    # Obtaining the member 'path' of a type (line 1352)
    path_266775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1352, 18), os_266774, 'path')
    # Obtaining the member 'normpath' of a type (line 1352)
    normpath_266776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1352, 18), path_266775, 'normpath')
    # Calling normpath(args, kwargs) (line 1352)
    normpath_call_result_266785 = invoke(stypy.reporting.localization.Localization(__file__, 1352, 18), normpath_266776, *[join_call_result_266783], **kwargs_266784)
    
    # Assigning a type to the variable 'bmpFilename' (line 1352)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1352, 4), 'bmpFilename', normpath_call_result_266785)
    
    
    
    # Call to exists(...): (line 1353)
    # Processing the call arguments (line 1353)
    # Getting the type of 'bmpFilename' (line 1353)
    bmpFilename_266789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 26), 'bmpFilename', False)
    # Processing the call keyword arguments (line 1353)
    kwargs_266790 = {}
    # Getting the type of 'os' (line 1353)
    os_266786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 1353)
    path_266787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1353, 11), os_266786, 'path')
    # Obtaining the member 'exists' of a type (line 1353)
    exists_266788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1353, 11), path_266787, 'exists')
    # Calling exists(args, kwargs) (line 1353)
    exists_call_result_266791 = invoke(stypy.reporting.localization.Localization(__file__, 1353, 11), exists_266788, *[bmpFilename_266789], **kwargs_266790)
    
    # Applying the 'not' unary operator (line 1353)
    result_not__266792 = python_operator(stypy.reporting.localization.Localization(__file__, 1353, 7), 'not', exists_call_result_266791)
    
    # Testing the type of an if condition (line 1353)
    if_condition_266793 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1353, 4), result_not__266792)
    # Assigning a type to the variable 'if_condition_266793' (line 1353)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1353, 4), 'if_condition_266793', if_condition_266793)
    # SSA begins for if statement (line 1353)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to IOError(...): (line 1354)
    # Processing the call arguments (line 1354)
    unicode_266795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1354, 22), 'unicode', u'Could not find bitmap file "%s"; dying')
    # Getting the type of 'bmpFilename' (line 1354)
    bmpFilename_266796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 65), 'bmpFilename', False)
    # Applying the binary operator '%' (line 1354)
    result_mod_266797 = python_operator(stypy.reporting.localization.Localization(__file__, 1354, 22), '%', unicode_266795, bmpFilename_266796)
    
    # Processing the call keyword arguments (line 1354)
    kwargs_266798 = {}
    # Getting the type of 'IOError' (line 1354)
    IOError_266794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 14), 'IOError', False)
    # Calling IOError(args, kwargs) (line 1354)
    IOError_call_result_266799 = invoke(stypy.reporting.localization.Localization(__file__, 1354, 14), IOError_266794, *[result_mod_266797], **kwargs_266798)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1354, 8), IOError_call_result_266799, 'raise parameter', BaseException)
    # SSA join for if statement (line 1353)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1356):
    
    # Assigning a Call to a Name (line 1356):
    
    # Call to Bitmap(...): (line 1356)
    # Processing the call arguments (line 1356)
    # Getting the type of 'bmpFilename' (line 1356)
    bmpFilename_266802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 20), 'bmpFilename', False)
    # Processing the call keyword arguments (line 1356)
    kwargs_266803 = {}
    # Getting the type of 'wx' (line 1356)
    wx_266800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 10), 'wx', False)
    # Obtaining the member 'Bitmap' of a type (line 1356)
    Bitmap_266801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1356, 10), wx_266800, 'Bitmap')
    # Calling Bitmap(args, kwargs) (line 1356)
    Bitmap_call_result_266804 = invoke(stypy.reporting.localization.Localization(__file__, 1356, 10), Bitmap_266801, *[bmpFilename_266802], **kwargs_266803)
    
    # Assigning a type to the variable 'bmp' (line 1356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1356, 4), 'bmp', Bitmap_call_result_266804)
    # Getting the type of 'bmp' (line 1357)
    bmp_266805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 11), 'bmp')
    # Assigning a type to the variable 'stypy_return_type' (line 1357)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1357, 4), 'stypy_return_type', bmp_266805)
    
    # ################# End of '_load_bitmap(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_load_bitmap' in the type store
    # Getting the type of 'stypy_return_type' (line 1341)
    stypy_return_type_266806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_266806)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_load_bitmap'
    return stypy_return_type_266806

# Assigning a type to the variable '_load_bitmap' (line 1341)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 0), '_load_bitmap', _load_bitmap)
# Declaration of the 'MenuButtonWx' class
# Getting the type of 'wx' (line 1360)
wx_266807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 19), 'wx')
# Obtaining the member 'Button' of a type (line 1360)
Button_266808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1360, 19), wx_266807, 'Button')

class MenuButtonWx(Button_266808, ):
    unicode_266809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1365, (-1)), 'unicode', u'\n    wxPython does not permit a menu to be incorporated directly into a toolbar.\n    This class simulates the effect by associating a pop-up menu with a button\n    in the toolbar, and managing this as though it were a menu.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1367, 4, False)
        # Assigning a type to the variable 'self' (line 1368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MenuButtonWx.__init__', ['parent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['parent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1369)
        # Processing the call arguments (line 1369)
        # Getting the type of 'self' (line 1369)
        self_266813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 27), 'self', False)
        # Getting the type of 'parent' (line 1369)
        parent_266814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 33), 'parent', False)
        # Getting the type of '_NTB_AXISMENU_BUTTON' (line 1369)
        _NTB_AXISMENU_BUTTON_266815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 41), '_NTB_AXISMENU_BUTTON', False)
        unicode_266816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1369, 63), 'unicode', u'Axes:        ')
        # Processing the call keyword arguments (line 1369)
        # Getting the type of 'wx' (line 1370)
        wx_266817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 33), 'wx', False)
        # Obtaining the member 'BU_EXACTFIT' of a type (line 1370)
        BU_EXACTFIT_266818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 33), wx_266817, 'BU_EXACTFIT')
        keyword_266819 = BU_EXACTFIT_266818
        kwargs_266820 = {'style': keyword_266819}
        # Getting the type of 'wx' (line 1369)
        wx_266810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 8), 'wx', False)
        # Obtaining the member 'Button' of a type (line 1369)
        Button_266811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1369, 8), wx_266810, 'Button')
        # Obtaining the member '__init__' of a type (line 1369)
        init___266812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1369, 8), Button_266811, '__init__')
        # Calling __init__(args, kwargs) (line 1369)
        init___call_result_266821 = invoke(stypy.reporting.localization.Localization(__file__, 1369, 8), init___266812, *[self_266813, parent_266814, _NTB_AXISMENU_BUTTON_266815, unicode_266816], **kwargs_266820)
        
        
        # Assigning a Name to a Attribute (line 1371):
        
        # Assigning a Name to a Attribute (line 1371):
        # Getting the type of 'parent' (line 1371)
        parent_266822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 24), 'parent')
        # Getting the type of 'self' (line 1371)
        self_266823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 8), 'self')
        # Setting the type of the member '_toolbar' of a type (line 1371)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 8), self_266823, '_toolbar', parent_266822)
        
        # Assigning a Call to a Attribute (line 1372):
        
        # Assigning a Call to a Attribute (line 1372):
        
        # Call to Menu(...): (line 1372)
        # Processing the call keyword arguments (line 1372)
        kwargs_266826 = {}
        # Getting the type of 'wx' (line 1372)
        wx_266824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 21), 'wx', False)
        # Obtaining the member 'Menu' of a type (line 1372)
        Menu_266825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1372, 21), wx_266824, 'Menu')
        # Calling Menu(args, kwargs) (line 1372)
        Menu_call_result_266827 = invoke(stypy.reporting.localization.Localization(__file__, 1372, 21), Menu_266825, *[], **kwargs_266826)
        
        # Getting the type of 'self' (line 1372)
        self_266828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 8), 'self')
        # Setting the type of the member '_menu' of a type (line 1372)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1372, 8), self_266828, '_menu', Menu_call_result_266827)
        
        # Assigning a List to a Attribute (line 1373):
        
        # Assigning a List to a Attribute (line 1373):
        
        # Obtaining an instance of the builtin type 'list' (line 1373)
        list_266829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1373, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1373)
        
        # Getting the type of 'self' (line 1373)
        self_266830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 8), 'self')
        # Setting the type of the member '_axisId' of a type (line 1373)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1373, 8), self_266830, '_axisId', list_266829)
        
        # Assigning a Call to a Attribute (line 1375):
        
        # Assigning a Call to a Attribute (line 1375):
        
        # Call to NewId(...): (line 1375)
        # Processing the call keyword arguments (line 1375)
        kwargs_266833 = {}
        # Getting the type of 'wx' (line 1375)
        wx_266831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 22), 'wx', False)
        # Obtaining the member 'NewId' of a type (line 1375)
        NewId_266832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 22), wx_266831, 'NewId')
        # Calling NewId(args, kwargs) (line 1375)
        NewId_call_result_266834 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 22), NewId_266832, *[], **kwargs_266833)
        
        # Getting the type of 'self' (line 1375)
        self_266835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 8), 'self')
        # Setting the type of the member '_allId' of a type (line 1375)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 8), self_266835, '_allId', NewId_call_result_266834)
        
        # Assigning a Call to a Attribute (line 1376):
        
        # Assigning a Call to a Attribute (line 1376):
        
        # Call to NewId(...): (line 1376)
        # Processing the call keyword arguments (line 1376)
        kwargs_266838 = {}
        # Getting the type of 'wx' (line 1376)
        wx_266836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 25), 'wx', False)
        # Obtaining the member 'NewId' of a type (line 1376)
        NewId_266837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 25), wx_266836, 'NewId')
        # Calling NewId(args, kwargs) (line 1376)
        NewId_call_result_266839 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 25), NewId_266837, *[], **kwargs_266838)
        
        # Getting the type of 'self' (line 1376)
        self_266840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 8), 'self')
        # Setting the type of the member '_invertId' of a type (line 1376)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 8), self_266840, '_invertId', NewId_call_result_266839)
        
        # Call to Append(...): (line 1377)
        # Processing the call arguments (line 1377)
        # Getting the type of 'self' (line 1377)
        self_266844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 26), 'self', False)
        # Obtaining the member '_allId' of a type (line 1377)
        _allId_266845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 26), self_266844, '_allId')
        unicode_266846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1377, 39), 'unicode', u'All')
        unicode_266847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1377, 46), 'unicode', u'Select all axes')
        # Getting the type of 'False' (line 1377)
        False_266848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 65), 'False', False)
        # Processing the call keyword arguments (line 1377)
        kwargs_266849 = {}
        # Getting the type of 'self' (line 1377)
        self_266841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 8), 'self', False)
        # Obtaining the member '_menu' of a type (line 1377)
        _menu_266842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 8), self_266841, '_menu')
        # Obtaining the member 'Append' of a type (line 1377)
        Append_266843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 8), _menu_266842, 'Append')
        # Calling Append(args, kwargs) (line 1377)
        Append_call_result_266850 = invoke(stypy.reporting.localization.Localization(__file__, 1377, 8), Append_266843, *[_allId_266845, unicode_266846, unicode_266847, False_266848], **kwargs_266849)
        
        
        # Call to Append(...): (line 1378)
        # Processing the call arguments (line 1378)
        # Getting the type of 'self' (line 1378)
        self_266854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 26), 'self', False)
        # Obtaining the member '_invertId' of a type (line 1378)
        _invertId_266855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 26), self_266854, '_invertId')
        unicode_266856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1378, 42), 'unicode', u'Invert')
        unicode_266857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1378, 52), 'unicode', u'Invert axes selected')
        # Getting the type of 'False' (line 1379)
        False_266858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 26), 'False', False)
        # Processing the call keyword arguments (line 1378)
        kwargs_266859 = {}
        # Getting the type of 'self' (line 1378)
        self_266851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 8), 'self', False)
        # Obtaining the member '_menu' of a type (line 1378)
        _menu_266852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 8), self_266851, '_menu')
        # Obtaining the member 'Append' of a type (line 1378)
        Append_266853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 8), _menu_266852, 'Append')
        # Calling Append(args, kwargs) (line 1378)
        Append_call_result_266860 = invoke(stypy.reporting.localization.Localization(__file__, 1378, 8), Append_266853, *[_invertId_266855, unicode_266856, unicode_266857, False_266858], **kwargs_266859)
        
        
        # Call to AppendSeparator(...): (line 1380)
        # Processing the call keyword arguments (line 1380)
        kwargs_266864 = {}
        # Getting the type of 'self' (line 1380)
        self_266861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 8), 'self', False)
        # Obtaining the member '_menu' of a type (line 1380)
        _menu_266862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1380, 8), self_266861, '_menu')
        # Obtaining the member 'AppendSeparator' of a type (line 1380)
        AppendSeparator_266863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1380, 8), _menu_266862, 'AppendSeparator')
        # Calling AppendSeparator(args, kwargs) (line 1380)
        AppendSeparator_call_result_266865 = invoke(stypy.reporting.localization.Localization(__file__, 1380, 8), AppendSeparator_266863, *[], **kwargs_266864)
        
        
        # Call to Bind(...): (line 1382)
        # Processing the call arguments (line 1382)
        # Getting the type of 'wx' (line 1382)
        wx_266868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 18), 'wx', False)
        # Obtaining the member 'EVT_BUTTON' of a type (line 1382)
        EVT_BUTTON_266869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1382, 18), wx_266868, 'EVT_BUTTON')
        # Getting the type of 'self' (line 1382)
        self_266870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 33), 'self', False)
        # Obtaining the member '_onMenuButton' of a type (line 1382)
        _onMenuButton_266871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1382, 33), self_266870, '_onMenuButton')
        # Processing the call keyword arguments (line 1382)
        # Getting the type of '_NTB_AXISMENU_BUTTON' (line 1382)
        _NTB_AXISMENU_BUTTON_266872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 56), '_NTB_AXISMENU_BUTTON', False)
        keyword_266873 = _NTB_AXISMENU_BUTTON_266872
        kwargs_266874 = {'id': keyword_266873}
        # Getting the type of 'self' (line 1382)
        self_266866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 1382)
        Bind_266867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1382, 8), self_266866, 'Bind')
        # Calling Bind(args, kwargs) (line 1382)
        Bind_call_result_266875 = invoke(stypy.reporting.localization.Localization(__file__, 1382, 8), Bind_266867, *[EVT_BUTTON_266869, _onMenuButton_266871], **kwargs_266874)
        
        
        # Call to Bind(...): (line 1383)
        # Processing the call arguments (line 1383)
        # Getting the type of 'wx' (line 1383)
        wx_266878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 18), 'wx', False)
        # Obtaining the member 'EVT_MENU' of a type (line 1383)
        EVT_MENU_266879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1383, 18), wx_266878, 'EVT_MENU')
        # Getting the type of 'self' (line 1383)
        self_266880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 31), 'self', False)
        # Obtaining the member '_handleSelectAllAxes' of a type (line 1383)
        _handleSelectAllAxes_266881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1383, 31), self_266880, '_handleSelectAllAxes')
        # Processing the call keyword arguments (line 1383)
        # Getting the type of 'self' (line 1383)
        self_266882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 61), 'self', False)
        # Obtaining the member '_allId' of a type (line 1383)
        _allId_266883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1383, 61), self_266882, '_allId')
        keyword_266884 = _allId_266883
        kwargs_266885 = {'id': keyword_266884}
        # Getting the type of 'self' (line 1383)
        self_266876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 1383)
        Bind_266877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1383, 8), self_266876, 'Bind')
        # Calling Bind(args, kwargs) (line 1383)
        Bind_call_result_266886 = invoke(stypy.reporting.localization.Localization(__file__, 1383, 8), Bind_266877, *[EVT_MENU_266879, _handleSelectAllAxes_266881], **kwargs_266885)
        
        
        # Call to Bind(...): (line 1384)
        # Processing the call arguments (line 1384)
        # Getting the type of 'wx' (line 1384)
        wx_266889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 18), 'wx', False)
        # Obtaining the member 'EVT_MENU' of a type (line 1384)
        EVT_MENU_266890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 18), wx_266889, 'EVT_MENU')
        # Getting the type of 'self' (line 1384)
        self_266891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 31), 'self', False)
        # Obtaining the member '_handleInvertAxesSelected' of a type (line 1384)
        _handleInvertAxesSelected_266892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 31), self_266891, '_handleInvertAxesSelected')
        # Processing the call keyword arguments (line 1384)
        # Getting the type of 'self' (line 1385)
        self_266893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 21), 'self', False)
        # Obtaining the member '_invertId' of a type (line 1385)
        _invertId_266894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 21), self_266893, '_invertId')
        keyword_266895 = _invertId_266894
        kwargs_266896 = {'id': keyword_266895}
        # Getting the type of 'self' (line 1384)
        self_266887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 8), 'self', False)
        # Obtaining the member 'Bind' of a type (line 1384)
        Bind_266888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 8), self_266887, 'Bind')
        # Calling Bind(args, kwargs) (line 1384)
        Bind_call_result_266897 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 8), Bind_266888, *[EVT_MENU_266890, _handleInvertAxesSelected_266892], **kwargs_266896)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def Destroy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'Destroy'
        module_type_store = module_type_store.open_function_context('Destroy', 1387, 4, False)
        # Assigning a type to the variable 'self' (line 1388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MenuButtonWx.Destroy.__dict__.__setitem__('stypy_localization', localization)
        MenuButtonWx.Destroy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MenuButtonWx.Destroy.__dict__.__setitem__('stypy_type_store', module_type_store)
        MenuButtonWx.Destroy.__dict__.__setitem__('stypy_function_name', 'MenuButtonWx.Destroy')
        MenuButtonWx.Destroy.__dict__.__setitem__('stypy_param_names_list', [])
        MenuButtonWx.Destroy.__dict__.__setitem__('stypy_varargs_param_name', None)
        MenuButtonWx.Destroy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MenuButtonWx.Destroy.__dict__.__setitem__('stypy_call_defaults', defaults)
        MenuButtonWx.Destroy.__dict__.__setitem__('stypy_call_varargs', varargs)
        MenuButtonWx.Destroy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MenuButtonWx.Destroy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MenuButtonWx.Destroy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'Destroy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'Destroy(...)' code ##################

        
        # Call to Destroy(...): (line 1388)
        # Processing the call keyword arguments (line 1388)
        kwargs_266901 = {}
        # Getting the type of 'self' (line 1388)
        self_266898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 8), 'self', False)
        # Obtaining the member '_menu' of a type (line 1388)
        _menu_266899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 8), self_266898, '_menu')
        # Obtaining the member 'Destroy' of a type (line 1388)
        Destroy_266900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 8), _menu_266899, 'Destroy')
        # Calling Destroy(args, kwargs) (line 1388)
        Destroy_call_result_266902 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 8), Destroy_266900, *[], **kwargs_266901)
        
        
        # Call to Destroy(...): (line 1389)
        # Processing the call keyword arguments (line 1389)
        kwargs_266905 = {}
        # Getting the type of 'self' (line 1389)
        self_266903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 8), 'self', False)
        # Obtaining the member 'Destroy' of a type (line 1389)
        Destroy_266904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1389, 8), self_266903, 'Destroy')
        # Calling Destroy(args, kwargs) (line 1389)
        Destroy_call_result_266906 = invoke(stypy.reporting.localization.Localization(__file__, 1389, 8), Destroy_266904, *[], **kwargs_266905)
        
        
        # ################# End of 'Destroy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'Destroy' in the type store
        # Getting the type of 'stypy_return_type' (line 1387)
        stypy_return_type_266907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_266907)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'Destroy'
        return stypy_return_type_266907


    @norecursion
    def _onMenuButton(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onMenuButton'
        module_type_store = module_type_store.open_function_context('_onMenuButton', 1391, 4, False)
        # Assigning a type to the variable 'self' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MenuButtonWx._onMenuButton.__dict__.__setitem__('stypy_localization', localization)
        MenuButtonWx._onMenuButton.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MenuButtonWx._onMenuButton.__dict__.__setitem__('stypy_type_store', module_type_store)
        MenuButtonWx._onMenuButton.__dict__.__setitem__('stypy_function_name', 'MenuButtonWx._onMenuButton')
        MenuButtonWx._onMenuButton.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        MenuButtonWx._onMenuButton.__dict__.__setitem__('stypy_varargs_param_name', None)
        MenuButtonWx._onMenuButton.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MenuButtonWx._onMenuButton.__dict__.__setitem__('stypy_call_defaults', defaults)
        MenuButtonWx._onMenuButton.__dict__.__setitem__('stypy_call_varargs', varargs)
        MenuButtonWx._onMenuButton.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MenuButtonWx._onMenuButton.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MenuButtonWx._onMenuButton', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onMenuButton', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onMenuButton(...)' code ##################

        unicode_266908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 8), 'unicode', u'Handle menu button pressed.')
        
        # Getting the type of 'wxc' (line 1393)
        wxc_266909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 11), 'wxc')
        # Obtaining the member 'is_phoenix' of a type (line 1393)
        is_phoenix_266910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1393, 11), wxc_266909, 'is_phoenix')
        # Testing the type of an if condition (line 1393)
        if_condition_266911 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1393, 8), is_phoenix_266910)
        # Assigning a type to the variable 'if_condition_266911' (line 1393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 8), 'if_condition_266911', if_condition_266911)
        # SSA begins for if statement (line 1393)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1394):
        
        # Assigning a Call to a Name:
        
        # Call to GetPosition(...): (line 1394)
        # Processing the call keyword arguments (line 1394)
        kwargs_266914 = {}
        # Getting the type of 'self' (line 1394)
        self_266912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 19), 'self', False)
        # Obtaining the member 'GetPosition' of a type (line 1394)
        GetPosition_266913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1394, 19), self_266912, 'GetPosition')
        # Calling GetPosition(args, kwargs) (line 1394)
        GetPosition_call_result_266915 = invoke(stypy.reporting.localization.Localization(__file__, 1394, 19), GetPosition_266913, *[], **kwargs_266914)
        
        # Assigning a type to the variable 'call_assignment_263051' (line 1394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 12), 'call_assignment_263051', GetPosition_call_result_266915)
        
        # Assigning a Call to a Name (line 1394):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 12), 'int')
        # Processing the call keyword arguments
        kwargs_266919 = {}
        # Getting the type of 'call_assignment_263051' (line 1394)
        call_assignment_263051_266916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 12), 'call_assignment_263051', False)
        # Obtaining the member '__getitem__' of a type (line 1394)
        getitem___266917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1394, 12), call_assignment_263051_266916, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266920 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266917, *[int_266918], **kwargs_266919)
        
        # Assigning a type to the variable 'call_assignment_263052' (line 1394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 12), 'call_assignment_263052', getitem___call_result_266920)
        
        # Assigning a Name to a Name (line 1394):
        # Getting the type of 'call_assignment_263052' (line 1394)
        call_assignment_263052_266921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 12), 'call_assignment_263052')
        # Assigning a type to the variable 'x' (line 1394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 12), 'x', call_assignment_263052_266921)
        
        # Assigning a Call to a Name (line 1394):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 12), 'int')
        # Processing the call keyword arguments
        kwargs_266925 = {}
        # Getting the type of 'call_assignment_263051' (line 1394)
        call_assignment_263051_266922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 12), 'call_assignment_263051', False)
        # Obtaining the member '__getitem__' of a type (line 1394)
        getitem___266923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1394, 12), call_assignment_263051_266922, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266926 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266923, *[int_266924], **kwargs_266925)
        
        # Assigning a type to the variable 'call_assignment_263053' (line 1394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 12), 'call_assignment_263053', getitem___call_result_266926)
        
        # Assigning a Name to a Name (line 1394):
        # Getting the type of 'call_assignment_263053' (line 1394)
        call_assignment_263053_266927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 12), 'call_assignment_263053')
        # Assigning a type to the variable 'y' (line 1394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 15), 'y', call_assignment_263053_266927)
        
        # Assigning a Call to a Tuple (line 1395):
        
        # Assigning a Call to a Name:
        
        # Call to GetSize(...): (line 1395)
        # Processing the call keyword arguments (line 1395)
        kwargs_266930 = {}
        # Getting the type of 'self' (line 1395)
        self_266928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 19), 'self', False)
        # Obtaining the member 'GetSize' of a type (line 1395)
        GetSize_266929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1395, 19), self_266928, 'GetSize')
        # Calling GetSize(args, kwargs) (line 1395)
        GetSize_call_result_266931 = invoke(stypy.reporting.localization.Localization(__file__, 1395, 19), GetSize_266929, *[], **kwargs_266930)
        
        # Assigning a type to the variable 'call_assignment_263054' (line 1395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 12), 'call_assignment_263054', GetSize_call_result_266931)
        
        # Assigning a Call to a Name (line 1395):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1395, 12), 'int')
        # Processing the call keyword arguments
        kwargs_266935 = {}
        # Getting the type of 'call_assignment_263054' (line 1395)
        call_assignment_263054_266932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 12), 'call_assignment_263054', False)
        # Obtaining the member '__getitem__' of a type (line 1395)
        getitem___266933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1395, 12), call_assignment_263054_266932, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266936 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266933, *[int_266934], **kwargs_266935)
        
        # Assigning a type to the variable 'call_assignment_263055' (line 1395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 12), 'call_assignment_263055', getitem___call_result_266936)
        
        # Assigning a Name to a Name (line 1395):
        # Getting the type of 'call_assignment_263055' (line 1395)
        call_assignment_263055_266937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 12), 'call_assignment_263055')
        # Assigning a type to the variable 'w' (line 1395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 12), 'w', call_assignment_263055_266937)
        
        # Assigning a Call to a Name (line 1395):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1395, 12), 'int')
        # Processing the call keyword arguments
        kwargs_266941 = {}
        # Getting the type of 'call_assignment_263054' (line 1395)
        call_assignment_263054_266938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 12), 'call_assignment_263054', False)
        # Obtaining the member '__getitem__' of a type (line 1395)
        getitem___266939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1395, 12), call_assignment_263054_266938, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266942 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266939, *[int_266940], **kwargs_266941)
        
        # Assigning a type to the variable 'call_assignment_263056' (line 1395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 12), 'call_assignment_263056', getitem___call_result_266942)
        
        # Assigning a Name to a Name (line 1395):
        # Getting the type of 'call_assignment_263056' (line 1395)
        call_assignment_263056_266943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 12), 'call_assignment_263056')
        # Assigning a type to the variable 'h' (line 1395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 15), 'h', call_assignment_263056_266943)
        # SSA branch for the else part of an if statement (line 1393)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 1397):
        
        # Assigning a Call to a Name:
        
        # Call to GetPositionTuple(...): (line 1397)
        # Processing the call keyword arguments (line 1397)
        kwargs_266946 = {}
        # Getting the type of 'self' (line 1397)
        self_266944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 19), 'self', False)
        # Obtaining the member 'GetPositionTuple' of a type (line 1397)
        GetPositionTuple_266945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 19), self_266944, 'GetPositionTuple')
        # Calling GetPositionTuple(args, kwargs) (line 1397)
        GetPositionTuple_call_result_266947 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 19), GetPositionTuple_266945, *[], **kwargs_266946)
        
        # Assigning a type to the variable 'call_assignment_263057' (line 1397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 12), 'call_assignment_263057', GetPositionTuple_call_result_266947)
        
        # Assigning a Call to a Name (line 1397):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 12), 'int')
        # Processing the call keyword arguments
        kwargs_266951 = {}
        # Getting the type of 'call_assignment_263057' (line 1397)
        call_assignment_263057_266948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 12), 'call_assignment_263057', False)
        # Obtaining the member '__getitem__' of a type (line 1397)
        getitem___266949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 12), call_assignment_263057_266948, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266952 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266949, *[int_266950], **kwargs_266951)
        
        # Assigning a type to the variable 'call_assignment_263058' (line 1397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 12), 'call_assignment_263058', getitem___call_result_266952)
        
        # Assigning a Name to a Name (line 1397):
        # Getting the type of 'call_assignment_263058' (line 1397)
        call_assignment_263058_266953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 12), 'call_assignment_263058')
        # Assigning a type to the variable 'x' (line 1397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 12), 'x', call_assignment_263058_266953)
        
        # Assigning a Call to a Name (line 1397):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 12), 'int')
        # Processing the call keyword arguments
        kwargs_266957 = {}
        # Getting the type of 'call_assignment_263057' (line 1397)
        call_assignment_263057_266954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 12), 'call_assignment_263057', False)
        # Obtaining the member '__getitem__' of a type (line 1397)
        getitem___266955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 12), call_assignment_263057_266954, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266958 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266955, *[int_266956], **kwargs_266957)
        
        # Assigning a type to the variable 'call_assignment_263059' (line 1397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 12), 'call_assignment_263059', getitem___call_result_266958)
        
        # Assigning a Name to a Name (line 1397):
        # Getting the type of 'call_assignment_263059' (line 1397)
        call_assignment_263059_266959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 12), 'call_assignment_263059')
        # Assigning a type to the variable 'y' (line 1397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 15), 'y', call_assignment_263059_266959)
        
        # Assigning a Call to a Tuple (line 1398):
        
        # Assigning a Call to a Name:
        
        # Call to GetSizeTuple(...): (line 1398)
        # Processing the call keyword arguments (line 1398)
        kwargs_266962 = {}
        # Getting the type of 'self' (line 1398)
        self_266960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 19), 'self', False)
        # Obtaining the member 'GetSizeTuple' of a type (line 1398)
        GetSizeTuple_266961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1398, 19), self_266960, 'GetSizeTuple')
        # Calling GetSizeTuple(args, kwargs) (line 1398)
        GetSizeTuple_call_result_266963 = invoke(stypy.reporting.localization.Localization(__file__, 1398, 19), GetSizeTuple_266961, *[], **kwargs_266962)
        
        # Assigning a type to the variable 'call_assignment_263060' (line 1398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 12), 'call_assignment_263060', GetSizeTuple_call_result_266963)
        
        # Assigning a Call to a Name (line 1398):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, 12), 'int')
        # Processing the call keyword arguments
        kwargs_266967 = {}
        # Getting the type of 'call_assignment_263060' (line 1398)
        call_assignment_263060_266964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 12), 'call_assignment_263060', False)
        # Obtaining the member '__getitem__' of a type (line 1398)
        getitem___266965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1398, 12), call_assignment_263060_266964, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266968 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266965, *[int_266966], **kwargs_266967)
        
        # Assigning a type to the variable 'call_assignment_263061' (line 1398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 12), 'call_assignment_263061', getitem___call_result_266968)
        
        # Assigning a Name to a Name (line 1398):
        # Getting the type of 'call_assignment_263061' (line 1398)
        call_assignment_263061_266969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 12), 'call_assignment_263061')
        # Assigning a type to the variable 'w' (line 1398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 12), 'w', call_assignment_263061_266969)
        
        # Assigning a Call to a Name (line 1398):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_266972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, 12), 'int')
        # Processing the call keyword arguments
        kwargs_266973 = {}
        # Getting the type of 'call_assignment_263060' (line 1398)
        call_assignment_263060_266970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 12), 'call_assignment_263060', False)
        # Obtaining the member '__getitem__' of a type (line 1398)
        getitem___266971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1398, 12), call_assignment_263060_266970, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_266974 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___266971, *[int_266972], **kwargs_266973)
        
        # Assigning a type to the variable 'call_assignment_263062' (line 1398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 12), 'call_assignment_263062', getitem___call_result_266974)
        
        # Assigning a Name to a Name (line 1398):
        # Getting the type of 'call_assignment_263062' (line 1398)
        call_assignment_263062_266975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 12), 'call_assignment_263062')
        # Assigning a type to the variable 'h' (line 1398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 15), 'h', call_assignment_263062_266975)
        # SSA join for if statement (line 1393)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to PopupMenuXY(...): (line 1399)
        # Processing the call arguments (line 1399)
        # Getting the type of 'self' (line 1399)
        self_266978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 25), 'self', False)
        # Obtaining the member '_menu' of a type (line 1399)
        _menu_266979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1399, 25), self_266978, '_menu')
        # Getting the type of 'x' (line 1399)
        x_266980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 37), 'x', False)
        # Getting the type of 'y' (line 1399)
        y_266981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 40), 'y', False)
        # Getting the type of 'h' (line 1399)
        h_266982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 44), 'h', False)
        # Applying the binary operator '+' (line 1399)
        result_add_266983 = python_operator(stypy.reporting.localization.Localization(__file__, 1399, 40), '+', y_266981, h_266982)
        
        int_266984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1399, 48), 'int')
        # Applying the binary operator '-' (line 1399)
        result_sub_266985 = python_operator(stypy.reporting.localization.Localization(__file__, 1399, 46), '-', result_add_266983, int_266984)
        
        # Processing the call keyword arguments (line 1399)
        kwargs_266986 = {}
        # Getting the type of 'self' (line 1399)
        self_266976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 8), 'self', False)
        # Obtaining the member 'PopupMenuXY' of a type (line 1399)
        PopupMenuXY_266977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1399, 8), self_266976, 'PopupMenuXY')
        # Calling PopupMenuXY(args, kwargs) (line 1399)
        PopupMenuXY_call_result_266987 = invoke(stypy.reporting.localization.Localization(__file__, 1399, 8), PopupMenuXY_266977, *[_menu_266979, x_266980, result_sub_266985], **kwargs_266986)
        
        
        # Call to Skip(...): (line 1401)
        # Processing the call keyword arguments (line 1401)
        kwargs_266990 = {}
        # Getting the type of 'evt' (line 1401)
        evt_266988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1401)
        Skip_266989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 8), evt_266988, 'Skip')
        # Calling Skip(args, kwargs) (line 1401)
        Skip_call_result_266991 = invoke(stypy.reporting.localization.Localization(__file__, 1401, 8), Skip_266989, *[], **kwargs_266990)
        
        
        # ################# End of '_onMenuButton(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onMenuButton' in the type store
        # Getting the type of 'stypy_return_type' (line 1391)
        stypy_return_type_266992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_266992)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onMenuButton'
        return stypy_return_type_266992


    @norecursion
    def _handleSelectAllAxes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_handleSelectAllAxes'
        module_type_store = module_type_store.open_function_context('_handleSelectAllAxes', 1403, 4, False)
        # Assigning a type to the variable 'self' (line 1404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MenuButtonWx._handleSelectAllAxes.__dict__.__setitem__('stypy_localization', localization)
        MenuButtonWx._handleSelectAllAxes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MenuButtonWx._handleSelectAllAxes.__dict__.__setitem__('stypy_type_store', module_type_store)
        MenuButtonWx._handleSelectAllAxes.__dict__.__setitem__('stypy_function_name', 'MenuButtonWx._handleSelectAllAxes')
        MenuButtonWx._handleSelectAllAxes.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        MenuButtonWx._handleSelectAllAxes.__dict__.__setitem__('stypy_varargs_param_name', None)
        MenuButtonWx._handleSelectAllAxes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MenuButtonWx._handleSelectAllAxes.__dict__.__setitem__('stypy_call_defaults', defaults)
        MenuButtonWx._handleSelectAllAxes.__dict__.__setitem__('stypy_call_varargs', varargs)
        MenuButtonWx._handleSelectAllAxes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MenuButtonWx._handleSelectAllAxes.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MenuButtonWx._handleSelectAllAxes', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_handleSelectAllAxes', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_handleSelectAllAxes(...)' code ##################

        unicode_266993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 8), 'unicode', u"Called when the 'select all axes' menu item is selected.")
        
        
        
        # Call to len(...): (line 1405)
        # Processing the call arguments (line 1405)
        # Getting the type of 'self' (line 1405)
        self_266995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 15), 'self', False)
        # Obtaining the member '_axisId' of a type (line 1405)
        _axisId_266996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 15), self_266995, '_axisId')
        # Processing the call keyword arguments (line 1405)
        kwargs_266997 = {}
        # Getting the type of 'len' (line 1405)
        len_266994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 11), 'len', False)
        # Calling len(args, kwargs) (line 1405)
        len_call_result_266998 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 11), len_266994, *[_axisId_266996], **kwargs_266997)
        
        int_266999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, 32), 'int')
        # Applying the binary operator '==' (line 1405)
        result_eq_267000 = python_operator(stypy.reporting.localization.Localization(__file__, 1405, 11), '==', len_call_result_266998, int_266999)
        
        # Testing the type of an if condition (line 1405)
        if_condition_267001 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1405, 8), result_eq_267000)
        # Assigning a type to the variable 'if_condition_267001' (line 1405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 8), 'if_condition_267001', if_condition_267001)
        # SSA begins for if statement (line 1405)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1406, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1405)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to range(...): (line 1407)
        # Processing the call arguments (line 1407)
        
        # Call to len(...): (line 1407)
        # Processing the call arguments (line 1407)
        # Getting the type of 'self' (line 1407)
        self_267004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 27), 'self', False)
        # Obtaining the member '_axisId' of a type (line 1407)
        _axisId_267005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 27), self_267004, '_axisId')
        # Processing the call keyword arguments (line 1407)
        kwargs_267006 = {}
        # Getting the type of 'len' (line 1407)
        len_267003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 23), 'len', False)
        # Calling len(args, kwargs) (line 1407)
        len_call_result_267007 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 23), len_267003, *[_axisId_267005], **kwargs_267006)
        
        # Processing the call keyword arguments (line 1407)
        kwargs_267008 = {}
        # Getting the type of 'range' (line 1407)
        range_267002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 17), 'range', False)
        # Calling range(args, kwargs) (line 1407)
        range_call_result_267009 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 17), range_267002, *[len_call_result_267007], **kwargs_267008)
        
        # Testing the type of a for loop iterable (line 1407)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1407, 8), range_call_result_267009)
        # Getting the type of the for loop variable (line 1407)
        for_loop_var_267010 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1407, 8), range_call_result_267009)
        # Assigning a type to the variable 'i' (line 1407)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 8), 'i', for_loop_var_267010)
        # SSA begins for a for statement (line 1407)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to Check(...): (line 1408)
        # Processing the call arguments (line 1408)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1408)
        i_267014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 42), 'i', False)
        # Getting the type of 'self' (line 1408)
        self_267015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 29), 'self', False)
        # Obtaining the member '_axisId' of a type (line 1408)
        _axisId_267016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 29), self_267015, '_axisId')
        # Obtaining the member '__getitem__' of a type (line 1408)
        getitem___267017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 29), _axisId_267016, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1408)
        subscript_call_result_267018 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 29), getitem___267017, i_267014)
        
        # Getting the type of 'True' (line 1408)
        True_267019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 46), 'True', False)
        # Processing the call keyword arguments (line 1408)
        kwargs_267020 = {}
        # Getting the type of 'self' (line 1408)
        self_267011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 12), 'self', False)
        # Obtaining the member '_menu' of a type (line 1408)
        _menu_267012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 12), self_267011, '_menu')
        # Obtaining the member 'Check' of a type (line 1408)
        Check_267013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 12), _menu_267012, 'Check')
        # Calling Check(args, kwargs) (line 1408)
        Check_call_result_267021 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 12), Check_267013, *[subscript_call_result_267018, True_267019], **kwargs_267020)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_active(...): (line 1409)
        # Processing the call arguments (line 1409)
        
        # Call to getActiveAxes(...): (line 1409)
        # Processing the call keyword arguments (line 1409)
        kwargs_267027 = {}
        # Getting the type of 'self' (line 1409)
        self_267025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 33), 'self', False)
        # Obtaining the member 'getActiveAxes' of a type (line 1409)
        getActiveAxes_267026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 33), self_267025, 'getActiveAxes')
        # Calling getActiveAxes(args, kwargs) (line 1409)
        getActiveAxes_call_result_267028 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 33), getActiveAxes_267026, *[], **kwargs_267027)
        
        # Processing the call keyword arguments (line 1409)
        kwargs_267029 = {}
        # Getting the type of 'self' (line 1409)
        self_267022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 8), 'self', False)
        # Obtaining the member '_toolbar' of a type (line 1409)
        _toolbar_267023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 8), self_267022, '_toolbar')
        # Obtaining the member 'set_active' of a type (line 1409)
        set_active_267024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 8), _toolbar_267023, 'set_active')
        # Calling set_active(args, kwargs) (line 1409)
        set_active_call_result_267030 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 8), set_active_267024, *[getActiveAxes_call_result_267028], **kwargs_267029)
        
        
        # Call to Skip(...): (line 1410)
        # Processing the call keyword arguments (line 1410)
        kwargs_267033 = {}
        # Getting the type of 'evt' (line 1410)
        evt_267031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1410)
        Skip_267032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1410, 8), evt_267031, 'Skip')
        # Calling Skip(args, kwargs) (line 1410)
        Skip_call_result_267034 = invoke(stypy.reporting.localization.Localization(__file__, 1410, 8), Skip_267032, *[], **kwargs_267033)
        
        
        # ################# End of '_handleSelectAllAxes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_handleSelectAllAxes' in the type store
        # Getting the type of 'stypy_return_type' (line 1403)
        stypy_return_type_267035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267035)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_handleSelectAllAxes'
        return stypy_return_type_267035


    @norecursion
    def _handleInvertAxesSelected(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_handleInvertAxesSelected'
        module_type_store = module_type_store.open_function_context('_handleInvertAxesSelected', 1412, 4, False)
        # Assigning a type to the variable 'self' (line 1413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MenuButtonWx._handleInvertAxesSelected.__dict__.__setitem__('stypy_localization', localization)
        MenuButtonWx._handleInvertAxesSelected.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MenuButtonWx._handleInvertAxesSelected.__dict__.__setitem__('stypy_type_store', module_type_store)
        MenuButtonWx._handleInvertAxesSelected.__dict__.__setitem__('stypy_function_name', 'MenuButtonWx._handleInvertAxesSelected')
        MenuButtonWx._handleInvertAxesSelected.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        MenuButtonWx._handleInvertAxesSelected.__dict__.__setitem__('stypy_varargs_param_name', None)
        MenuButtonWx._handleInvertAxesSelected.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MenuButtonWx._handleInvertAxesSelected.__dict__.__setitem__('stypy_call_defaults', defaults)
        MenuButtonWx._handleInvertAxesSelected.__dict__.__setitem__('stypy_call_varargs', varargs)
        MenuButtonWx._handleInvertAxesSelected.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MenuButtonWx._handleInvertAxesSelected.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MenuButtonWx._handleInvertAxesSelected', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_handleInvertAxesSelected', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_handleInvertAxesSelected(...)' code ##################

        unicode_267036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1413, 8), 'unicode', u'Called when the invert all menu item is selected')
        
        
        
        # Call to len(...): (line 1414)
        # Processing the call arguments (line 1414)
        # Getting the type of 'self' (line 1414)
        self_267038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 15), 'self', False)
        # Obtaining the member '_axisId' of a type (line 1414)
        _axisId_267039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1414, 15), self_267038, '_axisId')
        # Processing the call keyword arguments (line 1414)
        kwargs_267040 = {}
        # Getting the type of 'len' (line 1414)
        len_267037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 11), 'len', False)
        # Calling len(args, kwargs) (line 1414)
        len_call_result_267041 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 11), len_267037, *[_axisId_267039], **kwargs_267040)
        
        int_267042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1414, 32), 'int')
        # Applying the binary operator '==' (line 1414)
        result_eq_267043 = python_operator(stypy.reporting.localization.Localization(__file__, 1414, 11), '==', len_call_result_267041, int_267042)
        
        # Testing the type of an if condition (line 1414)
        if_condition_267044 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1414, 8), result_eq_267043)
        # Assigning a type to the variable 'if_condition_267044' (line 1414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1414, 8), 'if_condition_267044', if_condition_267044)
        # SSA begins for if statement (line 1414)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1415, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1414)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to range(...): (line 1416)
        # Processing the call arguments (line 1416)
        
        # Call to len(...): (line 1416)
        # Processing the call arguments (line 1416)
        # Getting the type of 'self' (line 1416)
        self_267047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 27), 'self', False)
        # Obtaining the member '_axisId' of a type (line 1416)
        _axisId_267048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 27), self_267047, '_axisId')
        # Processing the call keyword arguments (line 1416)
        kwargs_267049 = {}
        # Getting the type of 'len' (line 1416)
        len_267046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 23), 'len', False)
        # Calling len(args, kwargs) (line 1416)
        len_call_result_267050 = invoke(stypy.reporting.localization.Localization(__file__, 1416, 23), len_267046, *[_axisId_267048], **kwargs_267049)
        
        # Processing the call keyword arguments (line 1416)
        kwargs_267051 = {}
        # Getting the type of 'range' (line 1416)
        range_267045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 17), 'range', False)
        # Calling range(args, kwargs) (line 1416)
        range_call_result_267052 = invoke(stypy.reporting.localization.Localization(__file__, 1416, 17), range_267045, *[len_call_result_267050], **kwargs_267051)
        
        # Testing the type of a for loop iterable (line 1416)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1416, 8), range_call_result_267052)
        # Getting the type of the for loop variable (line 1416)
        for_loop_var_267053 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1416, 8), range_call_result_267052)
        # Assigning a type to the variable 'i' (line 1416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 8), 'i', for_loop_var_267053)
        # SSA begins for a for statement (line 1416)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to IsChecked(...): (line 1417)
        # Processing the call arguments (line 1417)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1417)
        i_267057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 49), 'i', False)
        # Getting the type of 'self' (line 1417)
        self_267058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 36), 'self', False)
        # Obtaining the member '_axisId' of a type (line 1417)
        _axisId_267059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 36), self_267058, '_axisId')
        # Obtaining the member '__getitem__' of a type (line 1417)
        getitem___267060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 36), _axisId_267059, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1417)
        subscript_call_result_267061 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 36), getitem___267060, i_267057)
        
        # Processing the call keyword arguments (line 1417)
        kwargs_267062 = {}
        # Getting the type of 'self' (line 1417)
        self_267054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 15), 'self', False)
        # Obtaining the member '_menu' of a type (line 1417)
        _menu_267055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 15), self_267054, '_menu')
        # Obtaining the member 'IsChecked' of a type (line 1417)
        IsChecked_267056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 15), _menu_267055, 'IsChecked')
        # Calling IsChecked(args, kwargs) (line 1417)
        IsChecked_call_result_267063 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 15), IsChecked_267056, *[subscript_call_result_267061], **kwargs_267062)
        
        # Testing the type of an if condition (line 1417)
        if_condition_267064 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1417, 12), IsChecked_call_result_267063)
        # Assigning a type to the variable 'if_condition_267064' (line 1417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 12), 'if_condition_267064', if_condition_267064)
        # SSA begins for if statement (line 1417)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to Check(...): (line 1418)
        # Processing the call arguments (line 1418)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1418)
        i_267068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 46), 'i', False)
        # Getting the type of 'self' (line 1418)
        self_267069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 33), 'self', False)
        # Obtaining the member '_axisId' of a type (line 1418)
        _axisId_267070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 33), self_267069, '_axisId')
        # Obtaining the member '__getitem__' of a type (line 1418)
        getitem___267071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 33), _axisId_267070, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1418)
        subscript_call_result_267072 = invoke(stypy.reporting.localization.Localization(__file__, 1418, 33), getitem___267071, i_267068)
        
        # Getting the type of 'False' (line 1418)
        False_267073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 50), 'False', False)
        # Processing the call keyword arguments (line 1418)
        kwargs_267074 = {}
        # Getting the type of 'self' (line 1418)
        self_267065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 16), 'self', False)
        # Obtaining the member '_menu' of a type (line 1418)
        _menu_267066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 16), self_267065, '_menu')
        # Obtaining the member 'Check' of a type (line 1418)
        Check_267067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 16), _menu_267066, 'Check')
        # Calling Check(args, kwargs) (line 1418)
        Check_call_result_267075 = invoke(stypy.reporting.localization.Localization(__file__, 1418, 16), Check_267067, *[subscript_call_result_267072, False_267073], **kwargs_267074)
        
        # SSA branch for the else part of an if statement (line 1417)
        module_type_store.open_ssa_branch('else')
        
        # Call to Check(...): (line 1420)
        # Processing the call arguments (line 1420)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1420)
        i_267079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 46), 'i', False)
        # Getting the type of 'self' (line 1420)
        self_267080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 33), 'self', False)
        # Obtaining the member '_axisId' of a type (line 1420)
        _axisId_267081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 33), self_267080, '_axisId')
        # Obtaining the member '__getitem__' of a type (line 1420)
        getitem___267082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 33), _axisId_267081, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1420)
        subscript_call_result_267083 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 33), getitem___267082, i_267079)
        
        # Getting the type of 'True' (line 1420)
        True_267084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 50), 'True', False)
        # Processing the call keyword arguments (line 1420)
        kwargs_267085 = {}
        # Getting the type of 'self' (line 1420)
        self_267076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 16), 'self', False)
        # Obtaining the member '_menu' of a type (line 1420)
        _menu_267077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 16), self_267076, '_menu')
        # Obtaining the member 'Check' of a type (line 1420)
        Check_267078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 16), _menu_267077, 'Check')
        # Calling Check(args, kwargs) (line 1420)
        Check_call_result_267086 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 16), Check_267078, *[subscript_call_result_267083, True_267084], **kwargs_267085)
        
        # SSA join for if statement (line 1417)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_active(...): (line 1421)
        # Processing the call arguments (line 1421)
        
        # Call to getActiveAxes(...): (line 1421)
        # Processing the call keyword arguments (line 1421)
        kwargs_267092 = {}
        # Getting the type of 'self' (line 1421)
        self_267090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 33), 'self', False)
        # Obtaining the member 'getActiveAxes' of a type (line 1421)
        getActiveAxes_267091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1421, 33), self_267090, 'getActiveAxes')
        # Calling getActiveAxes(args, kwargs) (line 1421)
        getActiveAxes_call_result_267093 = invoke(stypy.reporting.localization.Localization(__file__, 1421, 33), getActiveAxes_267091, *[], **kwargs_267092)
        
        # Processing the call keyword arguments (line 1421)
        kwargs_267094 = {}
        # Getting the type of 'self' (line 1421)
        self_267087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 8), 'self', False)
        # Obtaining the member '_toolbar' of a type (line 1421)
        _toolbar_267088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1421, 8), self_267087, '_toolbar')
        # Obtaining the member 'set_active' of a type (line 1421)
        set_active_267089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1421, 8), _toolbar_267088, 'set_active')
        # Calling set_active(args, kwargs) (line 1421)
        set_active_call_result_267095 = invoke(stypy.reporting.localization.Localization(__file__, 1421, 8), set_active_267089, *[getActiveAxes_call_result_267093], **kwargs_267094)
        
        
        # Call to Skip(...): (line 1422)
        # Processing the call keyword arguments (line 1422)
        kwargs_267098 = {}
        # Getting the type of 'evt' (line 1422)
        evt_267096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1422)
        Skip_267097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 8), evt_267096, 'Skip')
        # Calling Skip(args, kwargs) (line 1422)
        Skip_call_result_267099 = invoke(stypy.reporting.localization.Localization(__file__, 1422, 8), Skip_267097, *[], **kwargs_267098)
        
        
        # ################# End of '_handleInvertAxesSelected(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_handleInvertAxesSelected' in the type store
        # Getting the type of 'stypy_return_type' (line 1412)
        stypy_return_type_267100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267100)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_handleInvertAxesSelected'
        return stypy_return_type_267100


    @norecursion
    def _onMenuItemSelected(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onMenuItemSelected'
        module_type_store = module_type_store.open_function_context('_onMenuItemSelected', 1424, 4, False)
        # Assigning a type to the variable 'self' (line 1425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MenuButtonWx._onMenuItemSelected.__dict__.__setitem__('stypy_localization', localization)
        MenuButtonWx._onMenuItemSelected.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MenuButtonWx._onMenuItemSelected.__dict__.__setitem__('stypy_type_store', module_type_store)
        MenuButtonWx._onMenuItemSelected.__dict__.__setitem__('stypy_function_name', 'MenuButtonWx._onMenuItemSelected')
        MenuButtonWx._onMenuItemSelected.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        MenuButtonWx._onMenuItemSelected.__dict__.__setitem__('stypy_varargs_param_name', None)
        MenuButtonWx._onMenuItemSelected.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MenuButtonWx._onMenuItemSelected.__dict__.__setitem__('stypy_call_defaults', defaults)
        MenuButtonWx._onMenuItemSelected.__dict__.__setitem__('stypy_call_varargs', varargs)
        MenuButtonWx._onMenuItemSelected.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MenuButtonWx._onMenuItemSelected.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MenuButtonWx._onMenuItemSelected', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onMenuItemSelected', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onMenuItemSelected(...)' code ##################

        unicode_267101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 8), 'unicode', u'Called whenever one of the specific axis menu items is selected')
        
        # Assigning a Call to a Name (line 1426):
        
        # Assigning a Call to a Name (line 1426):
        
        # Call to IsChecked(...): (line 1426)
        # Processing the call arguments (line 1426)
        
        # Call to GetId(...): (line 1426)
        # Processing the call keyword arguments (line 1426)
        kwargs_267107 = {}
        # Getting the type of 'evt' (line 1426)
        evt_267105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 39), 'evt', False)
        # Obtaining the member 'GetId' of a type (line 1426)
        GetId_267106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 39), evt_267105, 'GetId')
        # Calling GetId(args, kwargs) (line 1426)
        GetId_call_result_267108 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 39), GetId_267106, *[], **kwargs_267107)
        
        # Processing the call keyword arguments (line 1426)
        kwargs_267109 = {}
        # Getting the type of 'self' (line 1426)
        self_267102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 18), 'self', False)
        # Obtaining the member '_menu' of a type (line 1426)
        _menu_267103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 18), self_267102, '_menu')
        # Obtaining the member 'IsChecked' of a type (line 1426)
        IsChecked_267104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 18), _menu_267103, 'IsChecked')
        # Calling IsChecked(args, kwargs) (line 1426)
        IsChecked_call_result_267110 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 18), IsChecked_267104, *[GetId_call_result_267108], **kwargs_267109)
        
        # Assigning a type to the variable 'current' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'current', IsChecked_call_result_267110)
        
        # Getting the type of 'current' (line 1427)
        current_267111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 11), 'current')
        # Testing the type of an if condition (line 1427)
        if_condition_267112 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1427, 8), current_267111)
        # Assigning a type to the variable 'if_condition_267112' (line 1427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1427, 8), 'if_condition_267112', if_condition_267112)
        # SSA begins for if statement (line 1427)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1428):
        
        # Assigning a Name to a Name (line 1428):
        # Getting the type of 'False' (line 1428)
        False_267113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 18), 'False')
        # Assigning a type to the variable 'new' (line 1428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1428, 12), 'new', False_267113)
        # SSA branch for the else part of an if statement (line 1427)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1430):
        
        # Assigning a Name to a Name (line 1430):
        # Getting the type of 'True' (line 1430)
        True_267114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 18), 'True')
        # Assigning a type to the variable 'new' (line 1430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1430, 12), 'new', True_267114)
        # SSA join for if statement (line 1427)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to Check(...): (line 1431)
        # Processing the call arguments (line 1431)
        
        # Call to GetId(...): (line 1431)
        # Processing the call keyword arguments (line 1431)
        kwargs_267120 = {}
        # Getting the type of 'evt' (line 1431)
        evt_267118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 25), 'evt', False)
        # Obtaining the member 'GetId' of a type (line 1431)
        GetId_267119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 25), evt_267118, 'GetId')
        # Calling GetId(args, kwargs) (line 1431)
        GetId_call_result_267121 = invoke(stypy.reporting.localization.Localization(__file__, 1431, 25), GetId_267119, *[], **kwargs_267120)
        
        # Getting the type of 'new' (line 1431)
        new_267122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 38), 'new', False)
        # Processing the call keyword arguments (line 1431)
        kwargs_267123 = {}
        # Getting the type of 'self' (line 1431)
        self_267115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 8), 'self', False)
        # Obtaining the member '_menu' of a type (line 1431)
        _menu_267116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 8), self_267115, '_menu')
        # Obtaining the member 'Check' of a type (line 1431)
        Check_267117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 8), _menu_267116, 'Check')
        # Calling Check(args, kwargs) (line 1431)
        Check_call_result_267124 = invoke(stypy.reporting.localization.Localization(__file__, 1431, 8), Check_267117, *[GetId_call_result_267121, new_267122], **kwargs_267123)
        
        
        # Call to set_active(...): (line 1434)
        # Processing the call arguments (line 1434)
        
        # Call to getActiveAxes(...): (line 1434)
        # Processing the call keyword arguments (line 1434)
        kwargs_267130 = {}
        # Getting the type of 'self' (line 1434)
        self_267128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 33), 'self', False)
        # Obtaining the member 'getActiveAxes' of a type (line 1434)
        getActiveAxes_267129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 33), self_267128, 'getActiveAxes')
        # Calling getActiveAxes(args, kwargs) (line 1434)
        getActiveAxes_call_result_267131 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 33), getActiveAxes_267129, *[], **kwargs_267130)
        
        # Processing the call keyword arguments (line 1434)
        kwargs_267132 = {}
        # Getting the type of 'self' (line 1434)
        self_267125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 8), 'self', False)
        # Obtaining the member '_toolbar' of a type (line 1434)
        _toolbar_267126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 8), self_267125, '_toolbar')
        # Obtaining the member 'set_active' of a type (line 1434)
        set_active_267127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 8), _toolbar_267126, 'set_active')
        # Calling set_active(args, kwargs) (line 1434)
        set_active_call_result_267133 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 8), set_active_267127, *[getActiveAxes_call_result_267131], **kwargs_267132)
        
        
        # Call to Skip(...): (line 1435)
        # Processing the call keyword arguments (line 1435)
        kwargs_267136 = {}
        # Getting the type of 'evt' (line 1435)
        evt_267134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 8), 'evt', False)
        # Obtaining the member 'Skip' of a type (line 1435)
        Skip_267135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1435, 8), evt_267134, 'Skip')
        # Calling Skip(args, kwargs) (line 1435)
        Skip_call_result_267137 = invoke(stypy.reporting.localization.Localization(__file__, 1435, 8), Skip_267135, *[], **kwargs_267136)
        
        
        # ################# End of '_onMenuItemSelected(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onMenuItemSelected' in the type store
        # Getting the type of 'stypy_return_type' (line 1424)
        stypy_return_type_267138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267138)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onMenuItemSelected'
        return stypy_return_type_267138


    @norecursion
    def updateAxes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'updateAxes'
        module_type_store = module_type_store.open_function_context('updateAxes', 1437, 4, False)
        # Assigning a type to the variable 'self' (line 1438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1438, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MenuButtonWx.updateAxes.__dict__.__setitem__('stypy_localization', localization)
        MenuButtonWx.updateAxes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MenuButtonWx.updateAxes.__dict__.__setitem__('stypy_type_store', module_type_store)
        MenuButtonWx.updateAxes.__dict__.__setitem__('stypy_function_name', 'MenuButtonWx.updateAxes')
        MenuButtonWx.updateAxes.__dict__.__setitem__('stypy_param_names_list', ['maxAxis'])
        MenuButtonWx.updateAxes.__dict__.__setitem__('stypy_varargs_param_name', None)
        MenuButtonWx.updateAxes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MenuButtonWx.updateAxes.__dict__.__setitem__('stypy_call_defaults', defaults)
        MenuButtonWx.updateAxes.__dict__.__setitem__('stypy_call_varargs', varargs)
        MenuButtonWx.updateAxes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MenuButtonWx.updateAxes.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MenuButtonWx.updateAxes', ['maxAxis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'updateAxes', localization, ['maxAxis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'updateAxes(...)' code ##################

        unicode_267139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1439, (-1)), 'unicode', u'Ensures that there are entries for max_axis axes in the menu\n        (selected by default).')
        
        
        # Getting the type of 'maxAxis' (line 1440)
        maxAxis_267140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 11), 'maxAxis')
        
        # Call to len(...): (line 1440)
        # Processing the call arguments (line 1440)
        # Getting the type of 'self' (line 1440)
        self_267142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 25), 'self', False)
        # Obtaining the member '_axisId' of a type (line 1440)
        _axisId_267143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 25), self_267142, '_axisId')
        # Processing the call keyword arguments (line 1440)
        kwargs_267144 = {}
        # Getting the type of 'len' (line 1440)
        len_267141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 21), 'len', False)
        # Calling len(args, kwargs) (line 1440)
        len_call_result_267145 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 21), len_267141, *[_axisId_267143], **kwargs_267144)
        
        # Applying the binary operator '>' (line 1440)
        result_gt_267146 = python_operator(stypy.reporting.localization.Localization(__file__, 1440, 11), '>', maxAxis_267140, len_call_result_267145)
        
        # Testing the type of an if condition (line 1440)
        if_condition_267147 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1440, 8), result_gt_267146)
        # Assigning a type to the variable 'if_condition_267147' (line 1440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 8), 'if_condition_267147', if_condition_267147)
        # SSA begins for if statement (line 1440)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to range(...): (line 1441)
        # Processing the call arguments (line 1441)
        
        # Call to len(...): (line 1441)
        # Processing the call arguments (line 1441)
        # Getting the type of 'self' (line 1441)
        self_267150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 31), 'self', False)
        # Obtaining the member '_axisId' of a type (line 1441)
        _axisId_267151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1441, 31), self_267150, '_axisId')
        # Processing the call keyword arguments (line 1441)
        kwargs_267152 = {}
        # Getting the type of 'len' (line 1441)
        len_267149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 27), 'len', False)
        # Calling len(args, kwargs) (line 1441)
        len_call_result_267153 = invoke(stypy.reporting.localization.Localization(__file__, 1441, 27), len_267149, *[_axisId_267151], **kwargs_267152)
        
        int_267154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 47), 'int')
        # Applying the binary operator '+' (line 1441)
        result_add_267155 = python_operator(stypy.reporting.localization.Localization(__file__, 1441, 27), '+', len_call_result_267153, int_267154)
        
        # Getting the type of 'maxAxis' (line 1441)
        maxAxis_267156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 50), 'maxAxis', False)
        int_267157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 60), 'int')
        # Applying the binary operator '+' (line 1441)
        result_add_267158 = python_operator(stypy.reporting.localization.Localization(__file__, 1441, 50), '+', maxAxis_267156, int_267157)
        
        int_267159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 63), 'int')
        # Processing the call keyword arguments (line 1441)
        kwargs_267160 = {}
        # Getting the type of 'range' (line 1441)
        range_267148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 21), 'range', False)
        # Calling range(args, kwargs) (line 1441)
        range_call_result_267161 = invoke(stypy.reporting.localization.Localization(__file__, 1441, 21), range_267148, *[result_add_267155, result_add_267158, int_267159], **kwargs_267160)
        
        # Testing the type of a for loop iterable (line 1441)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1441, 12), range_call_result_267161)
        # Getting the type of the for loop variable (line 1441)
        for_loop_var_267162 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1441, 12), range_call_result_267161)
        # Assigning a type to the variable 'i' (line 1441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1441, 12), 'i', for_loop_var_267162)
        # SSA begins for a for statement (line 1441)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1442):
        
        # Assigning a Call to a Name (line 1442):
        
        # Call to NewId(...): (line 1442)
        # Processing the call keyword arguments (line 1442)
        kwargs_267165 = {}
        # Getting the type of 'wx' (line 1442)
        wx_267163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 25), 'wx', False)
        # Obtaining the member 'NewId' of a type (line 1442)
        NewId_267164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1442, 25), wx_267163, 'NewId')
        # Calling NewId(args, kwargs) (line 1442)
        NewId_call_result_267166 = invoke(stypy.reporting.localization.Localization(__file__, 1442, 25), NewId_267164, *[], **kwargs_267165)
        
        # Assigning a type to the variable 'menuId' (line 1442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 16), 'menuId', NewId_call_result_267166)
        
        # Call to append(...): (line 1443)
        # Processing the call arguments (line 1443)
        # Getting the type of 'menuId' (line 1443)
        menuId_267170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 36), 'menuId', False)
        # Processing the call keyword arguments (line 1443)
        kwargs_267171 = {}
        # Getting the type of 'self' (line 1443)
        self_267167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 16), 'self', False)
        # Obtaining the member '_axisId' of a type (line 1443)
        _axisId_267168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1443, 16), self_267167, '_axisId')
        # Obtaining the member 'append' of a type (line 1443)
        append_267169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1443, 16), _axisId_267168, 'append')
        # Calling append(args, kwargs) (line 1443)
        append_call_result_267172 = invoke(stypy.reporting.localization.Localization(__file__, 1443, 16), append_267169, *[menuId_267170], **kwargs_267171)
        
        
        # Call to Append(...): (line 1444)
        # Processing the call arguments (line 1444)
        # Getting the type of 'menuId' (line 1444)
        menuId_267176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 34), 'menuId', False)
        unicode_267177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 42), 'unicode', u'Axis %d')
        # Getting the type of 'i' (line 1444)
        i_267178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 54), 'i', False)
        # Applying the binary operator '%' (line 1444)
        result_mod_267179 = python_operator(stypy.reporting.localization.Localization(__file__, 1444, 42), '%', unicode_267177, i_267178)
        
        unicode_267180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1445, 34), 'unicode', u'Select axis %d')
        # Getting the type of 'i' (line 1445)
        i_267181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 53), 'i', False)
        # Applying the binary operator '%' (line 1445)
        result_mod_267182 = python_operator(stypy.reporting.localization.Localization(__file__, 1445, 34), '%', unicode_267180, i_267181)
        
        # Getting the type of 'True' (line 1446)
        True_267183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 34), 'True', False)
        # Processing the call keyword arguments (line 1444)
        kwargs_267184 = {}
        # Getting the type of 'self' (line 1444)
        self_267173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 16), 'self', False)
        # Obtaining the member '_menu' of a type (line 1444)
        _menu_267174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 16), self_267173, '_menu')
        # Obtaining the member 'Append' of a type (line 1444)
        Append_267175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 16), _menu_267174, 'Append')
        # Calling Append(args, kwargs) (line 1444)
        Append_call_result_267185 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 16), Append_267175, *[menuId_267176, result_mod_267179, result_mod_267182, True_267183], **kwargs_267184)
        
        
        # Call to Check(...): (line 1447)
        # Processing the call arguments (line 1447)
        # Getting the type of 'menuId' (line 1447)
        menuId_267189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 33), 'menuId', False)
        # Getting the type of 'True' (line 1447)
        True_267190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 41), 'True', False)
        # Processing the call keyword arguments (line 1447)
        kwargs_267191 = {}
        # Getting the type of 'self' (line 1447)
        self_267186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 16), 'self', False)
        # Obtaining the member '_menu' of a type (line 1447)
        _menu_267187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 16), self_267186, '_menu')
        # Obtaining the member 'Check' of a type (line 1447)
        Check_267188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 16), _menu_267187, 'Check')
        # Calling Check(args, kwargs) (line 1447)
        Check_call_result_267192 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 16), Check_267188, *[menuId_267189, True_267190], **kwargs_267191)
        
        
        # Call to Bind(...): (line 1448)
        # Processing the call arguments (line 1448)
        # Getting the type of 'wx' (line 1448)
        wx_267195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 26), 'wx', False)
        # Obtaining the member 'EVT_MENU' of a type (line 1448)
        EVT_MENU_267196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1448, 26), wx_267195, 'EVT_MENU')
        # Getting the type of 'self' (line 1448)
        self_267197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 39), 'self', False)
        # Obtaining the member '_onMenuItemSelected' of a type (line 1448)
        _onMenuItemSelected_267198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1448, 39), self_267197, '_onMenuItemSelected')
        # Processing the call keyword arguments (line 1448)
        # Getting the type of 'menuId' (line 1448)
        menuId_267199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 68), 'menuId', False)
        keyword_267200 = menuId_267199
        kwargs_267201 = {'id': keyword_267200}
        # Getting the type of 'self' (line 1448)
        self_267193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 16), 'self', False)
        # Obtaining the member 'Bind' of a type (line 1448)
        Bind_267194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1448, 16), self_267193, 'Bind')
        # Calling Bind(args, kwargs) (line 1448)
        Bind_call_result_267202 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 16), Bind_267194, *[EVT_MENU_267196, _onMenuItemSelected_267198], **kwargs_267201)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1440)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'maxAxis' (line 1449)
        maxAxis_267203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 13), 'maxAxis')
        
        # Call to len(...): (line 1449)
        # Processing the call arguments (line 1449)
        # Getting the type of 'self' (line 1449)
        self_267205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 27), 'self', False)
        # Obtaining the member '_axisId' of a type (line 1449)
        _axisId_267206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1449, 27), self_267205, '_axisId')
        # Processing the call keyword arguments (line 1449)
        kwargs_267207 = {}
        # Getting the type of 'len' (line 1449)
        len_267204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 23), 'len', False)
        # Calling len(args, kwargs) (line 1449)
        len_call_result_267208 = invoke(stypy.reporting.localization.Localization(__file__, 1449, 23), len_267204, *[_axisId_267206], **kwargs_267207)
        
        # Applying the binary operator '<' (line 1449)
        result_lt_267209 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 13), '<', maxAxis_267203, len_call_result_267208)
        
        # Testing the type of an if condition (line 1449)
        if_condition_267210 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1449, 13), result_lt_267209)
        # Assigning a type to the variable 'if_condition_267210' (line 1449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 13), 'if_condition_267210', if_condition_267210)
        # SSA begins for if statement (line 1449)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'maxAxis' (line 1450)
        maxAxis_267211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 39), 'maxAxis')
        slice_267212 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1450, 26), maxAxis_267211, None, None)
        # Getting the type of 'self' (line 1450)
        self_267213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 26), 'self')
        # Obtaining the member '_axisId' of a type (line 1450)
        _axisId_267214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1450, 26), self_267213, '_axisId')
        # Obtaining the member '__getitem__' of a type (line 1450)
        getitem___267215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1450, 26), _axisId_267214, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1450)
        subscript_call_result_267216 = invoke(stypy.reporting.localization.Localization(__file__, 1450, 26), getitem___267215, slice_267212)
        
        # Testing the type of a for loop iterable (line 1450)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1450, 12), subscript_call_result_267216)
        # Getting the type of the for loop variable (line 1450)
        for_loop_var_267217 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1450, 12), subscript_call_result_267216)
        # Assigning a type to the variable 'menuId' (line 1450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1450, 12), 'menuId', for_loop_var_267217)
        # SSA begins for a for statement (line 1450)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to Delete(...): (line 1451)
        # Processing the call arguments (line 1451)
        # Getting the type of 'menuId' (line 1451)
        menuId_267221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 34), 'menuId', False)
        # Processing the call keyword arguments (line 1451)
        kwargs_267222 = {}
        # Getting the type of 'self' (line 1451)
        self_267218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 16), 'self', False)
        # Obtaining the member '_menu' of a type (line 1451)
        _menu_267219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1451, 16), self_267218, '_menu')
        # Obtaining the member 'Delete' of a type (line 1451)
        Delete_267220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1451, 16), _menu_267219, 'Delete')
        # Calling Delete(args, kwargs) (line 1451)
        Delete_call_result_267223 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 16), Delete_267220, *[menuId_267221], **kwargs_267222)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Attribute (line 1452):
        
        # Assigning a Subscript to a Attribute (line 1452):
        
        # Obtaining the type of the subscript
        # Getting the type of 'maxAxis' (line 1452)
        maxAxis_267224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 41), 'maxAxis')
        slice_267225 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1452, 27), None, maxAxis_267224, None)
        # Getting the type of 'self' (line 1452)
        self_267226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 27), 'self')
        # Obtaining the member '_axisId' of a type (line 1452)
        _axisId_267227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1452, 27), self_267226, '_axisId')
        # Obtaining the member '__getitem__' of a type (line 1452)
        getitem___267228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1452, 27), _axisId_267227, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1452)
        subscript_call_result_267229 = invoke(stypy.reporting.localization.Localization(__file__, 1452, 27), getitem___267228, slice_267225)
        
        # Getting the type of 'self' (line 1452)
        self_267230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 12), 'self')
        # Setting the type of the member '_axisId' of a type (line 1452)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1452, 12), self_267230, '_axisId', subscript_call_result_267229)
        # SSA join for if statement (line 1449)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1440)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_active(...): (line 1453)
        # Processing the call arguments (line 1453)
        
        # Call to list(...): (line 1453)
        # Processing the call arguments (line 1453)
        
        # Call to xrange(...): (line 1453)
        # Processing the call arguments (line 1453)
        # Getting the type of 'maxAxis' (line 1453)
        maxAxis_267236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 45), 'maxAxis', False)
        # Processing the call keyword arguments (line 1453)
        kwargs_267237 = {}
        # Getting the type of 'xrange' (line 1453)
        xrange_267235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 38), 'xrange', False)
        # Calling xrange(args, kwargs) (line 1453)
        xrange_call_result_267238 = invoke(stypy.reporting.localization.Localization(__file__, 1453, 38), xrange_267235, *[maxAxis_267236], **kwargs_267237)
        
        # Processing the call keyword arguments (line 1453)
        kwargs_267239 = {}
        # Getting the type of 'list' (line 1453)
        list_267234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 33), 'list', False)
        # Calling list(args, kwargs) (line 1453)
        list_call_result_267240 = invoke(stypy.reporting.localization.Localization(__file__, 1453, 33), list_267234, *[xrange_call_result_267238], **kwargs_267239)
        
        # Processing the call keyword arguments (line 1453)
        kwargs_267241 = {}
        # Getting the type of 'self' (line 1453)
        self_267231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 8), 'self', False)
        # Obtaining the member '_toolbar' of a type (line 1453)
        _toolbar_267232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1453, 8), self_267231, '_toolbar')
        # Obtaining the member 'set_active' of a type (line 1453)
        set_active_267233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1453, 8), _toolbar_267232, 'set_active')
        # Calling set_active(args, kwargs) (line 1453)
        set_active_call_result_267242 = invoke(stypy.reporting.localization.Localization(__file__, 1453, 8), set_active_267233, *[list_call_result_267240], **kwargs_267241)
        
        
        # ################# End of 'updateAxes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'updateAxes' in the type store
        # Getting the type of 'stypy_return_type' (line 1437)
        stypy_return_type_267243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267243)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'updateAxes'
        return stypy_return_type_267243


    @norecursion
    def getActiveAxes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'getActiveAxes'
        module_type_store = module_type_store.open_function_context('getActiveAxes', 1455, 4, False)
        # Assigning a type to the variable 'self' (line 1456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MenuButtonWx.getActiveAxes.__dict__.__setitem__('stypy_localization', localization)
        MenuButtonWx.getActiveAxes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MenuButtonWx.getActiveAxes.__dict__.__setitem__('stypy_type_store', module_type_store)
        MenuButtonWx.getActiveAxes.__dict__.__setitem__('stypy_function_name', 'MenuButtonWx.getActiveAxes')
        MenuButtonWx.getActiveAxes.__dict__.__setitem__('stypy_param_names_list', [])
        MenuButtonWx.getActiveAxes.__dict__.__setitem__('stypy_varargs_param_name', None)
        MenuButtonWx.getActiveAxes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MenuButtonWx.getActiveAxes.__dict__.__setitem__('stypy_call_defaults', defaults)
        MenuButtonWx.getActiveAxes.__dict__.__setitem__('stypy_call_varargs', varargs)
        MenuButtonWx.getActiveAxes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MenuButtonWx.getActiveAxes.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MenuButtonWx.getActiveAxes', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'getActiveAxes', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'getActiveAxes(...)' code ##################

        unicode_267244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1456, 8), 'unicode', u'Return a list of the selected axes.')
        
        # Assigning a List to a Name (line 1457):
        
        # Assigning a List to a Name (line 1457):
        
        # Obtaining an instance of the builtin type 'list' (line 1457)
        list_267245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1457, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1457)
        
        # Assigning a type to the variable 'active' (line 1457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1457, 8), 'active', list_267245)
        
        
        # Call to range(...): (line 1458)
        # Processing the call arguments (line 1458)
        
        # Call to len(...): (line 1458)
        # Processing the call arguments (line 1458)
        # Getting the type of 'self' (line 1458)
        self_267248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 27), 'self', False)
        # Obtaining the member '_axisId' of a type (line 1458)
        _axisId_267249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 27), self_267248, '_axisId')
        # Processing the call keyword arguments (line 1458)
        kwargs_267250 = {}
        # Getting the type of 'len' (line 1458)
        len_267247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 23), 'len', False)
        # Calling len(args, kwargs) (line 1458)
        len_call_result_267251 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 23), len_267247, *[_axisId_267249], **kwargs_267250)
        
        # Processing the call keyword arguments (line 1458)
        kwargs_267252 = {}
        # Getting the type of 'range' (line 1458)
        range_267246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 17), 'range', False)
        # Calling range(args, kwargs) (line 1458)
        range_call_result_267253 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 17), range_267246, *[len_call_result_267251], **kwargs_267252)
        
        # Testing the type of a for loop iterable (line 1458)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1458, 8), range_call_result_267253)
        # Getting the type of the for loop variable (line 1458)
        for_loop_var_267254 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1458, 8), range_call_result_267253)
        # Assigning a type to the variable 'i' (line 1458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 8), 'i', for_loop_var_267254)
        # SSA begins for a for statement (line 1458)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to IsChecked(...): (line 1459)
        # Processing the call arguments (line 1459)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1459)
        i_267258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 49), 'i', False)
        # Getting the type of 'self' (line 1459)
        self_267259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 36), 'self', False)
        # Obtaining the member '_axisId' of a type (line 1459)
        _axisId_267260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 36), self_267259, '_axisId')
        # Obtaining the member '__getitem__' of a type (line 1459)
        getitem___267261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 36), _axisId_267260, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1459)
        subscript_call_result_267262 = invoke(stypy.reporting.localization.Localization(__file__, 1459, 36), getitem___267261, i_267258)
        
        # Processing the call keyword arguments (line 1459)
        kwargs_267263 = {}
        # Getting the type of 'self' (line 1459)
        self_267255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 15), 'self', False)
        # Obtaining the member '_menu' of a type (line 1459)
        _menu_267256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 15), self_267255, '_menu')
        # Obtaining the member 'IsChecked' of a type (line 1459)
        IsChecked_267257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 15), _menu_267256, 'IsChecked')
        # Calling IsChecked(args, kwargs) (line 1459)
        IsChecked_call_result_267264 = invoke(stypy.reporting.localization.Localization(__file__, 1459, 15), IsChecked_267257, *[subscript_call_result_267262], **kwargs_267263)
        
        # Testing the type of an if condition (line 1459)
        if_condition_267265 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1459, 12), IsChecked_call_result_267264)
        # Assigning a type to the variable 'if_condition_267265' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 12), 'if_condition_267265', if_condition_267265)
        # SSA begins for if statement (line 1459)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1460)
        # Processing the call arguments (line 1460)
        # Getting the type of 'i' (line 1460)
        i_267268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 30), 'i', False)
        # Processing the call keyword arguments (line 1460)
        kwargs_267269 = {}
        # Getting the type of 'active' (line 1460)
        active_267266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 16), 'active', False)
        # Obtaining the member 'append' of a type (line 1460)
        append_267267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 16), active_267266, 'append')
        # Calling append(args, kwargs) (line 1460)
        append_call_result_267270 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 16), append_267267, *[i_267268], **kwargs_267269)
        
        # SSA join for if statement (line 1459)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'active' (line 1461)
        active_267271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 15), 'active')
        # Assigning a type to the variable 'stypy_return_type' (line 1461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1461, 8), 'stypy_return_type', active_267271)
        
        # ################# End of 'getActiveAxes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'getActiveAxes' in the type store
        # Getting the type of 'stypy_return_type' (line 1455)
        stypy_return_type_267272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267272)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'getActiveAxes'
        return stypy_return_type_267272


    @norecursion
    def updateButtonText(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'updateButtonText'
        module_type_store = module_type_store.open_function_context('updateButtonText', 1463, 4, False)
        # Assigning a type to the variable 'self' (line 1464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MenuButtonWx.updateButtonText.__dict__.__setitem__('stypy_localization', localization)
        MenuButtonWx.updateButtonText.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MenuButtonWx.updateButtonText.__dict__.__setitem__('stypy_type_store', module_type_store)
        MenuButtonWx.updateButtonText.__dict__.__setitem__('stypy_function_name', 'MenuButtonWx.updateButtonText')
        MenuButtonWx.updateButtonText.__dict__.__setitem__('stypy_param_names_list', ['lst'])
        MenuButtonWx.updateButtonText.__dict__.__setitem__('stypy_varargs_param_name', None)
        MenuButtonWx.updateButtonText.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MenuButtonWx.updateButtonText.__dict__.__setitem__('stypy_call_defaults', defaults)
        MenuButtonWx.updateButtonText.__dict__.__setitem__('stypy_call_varargs', varargs)
        MenuButtonWx.updateButtonText.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MenuButtonWx.updateButtonText.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MenuButtonWx.updateButtonText', ['lst'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'updateButtonText', localization, ['lst'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'updateButtonText(...)' code ##################

        unicode_267273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, 8), 'unicode', u'Update the list of selected axes in the menu button')
        
        # Assigning a Str to a Name (line 1465):
        
        # Assigning a Str to a Name (line 1465):
        unicode_267274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1465, 19), 'unicode', u'')
        # Assigning a type to the variable 'axis_txt' (line 1465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1465, 8), 'axis_txt', unicode_267274)
        
        # Getting the type of 'lst' (line 1466)
        lst_267275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 17), 'lst')
        # Testing the type of a for loop iterable (line 1466)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1466, 8), lst_267275)
        # Getting the type of the for loop variable (line 1466)
        for_loop_var_267276 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1466, 8), lst_267275)
        # Assigning a type to the variable 'e' (line 1466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 8), 'e', for_loop_var_267276)
        # SSA begins for a for statement (line 1466)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'axis_txt' (line 1467)
        axis_txt_267277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 12), 'axis_txt')
        unicode_267278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 24), 'unicode', u'%d,')
        # Getting the type of 'e' (line 1467)
        e_267279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 33), 'e')
        int_267280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 37), 'int')
        # Applying the binary operator '+' (line 1467)
        result_add_267281 = python_operator(stypy.reporting.localization.Localization(__file__, 1467, 33), '+', e_267279, int_267280)
        
        # Applying the binary operator '%' (line 1467)
        result_mod_267282 = python_operator(stypy.reporting.localization.Localization(__file__, 1467, 24), '%', unicode_267278, result_add_267281)
        
        # Applying the binary operator '+=' (line 1467)
        result_iadd_267283 = python_operator(stypy.reporting.localization.Localization(__file__, 1467, 12), '+=', axis_txt_267277, result_mod_267282)
        # Assigning a type to the variable 'axis_txt' (line 1467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1467, 12), 'axis_txt', result_iadd_267283)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to SetLabel(...): (line 1469)
        # Processing the call arguments (line 1469)
        unicode_267286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 22), 'unicode', u'Axes: %s')
        
        # Obtaining the type of the subscript
        int_267287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 45), 'int')
        slice_267288 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1469, 35), None, int_267287, None)
        # Getting the type of 'axis_txt' (line 1469)
        axis_txt_267289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 35), 'axis_txt', False)
        # Obtaining the member '__getitem__' of a type (line 1469)
        getitem___267290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 35), axis_txt_267289, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1469)
        subscript_call_result_267291 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 35), getitem___267290, slice_267288)
        
        # Applying the binary operator '%' (line 1469)
        result_mod_267292 = python_operator(stypy.reporting.localization.Localization(__file__, 1469, 22), '%', unicode_267286, subscript_call_result_267291)
        
        # Processing the call keyword arguments (line 1469)
        kwargs_267293 = {}
        # Getting the type of 'self' (line 1469)
        self_267284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 8), 'self', False)
        # Obtaining the member 'SetLabel' of a type (line 1469)
        SetLabel_267285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 8), self_267284, 'SetLabel')
        # Calling SetLabel(args, kwargs) (line 1469)
        SetLabel_call_result_267294 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 8), SetLabel_267285, *[result_mod_267292], **kwargs_267293)
        
        
        # ################# End of 'updateButtonText(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'updateButtonText' in the type store
        # Getting the type of 'stypy_return_type' (line 1463)
        stypy_return_type_267295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267295)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'updateButtonText'
        return stypy_return_type_267295


# Assigning a type to the variable 'MenuButtonWx' (line 1360)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1360, 0), 'MenuButtonWx', MenuButtonWx)

# Assigning a Dict to a Name (line 1472):

# Assigning a Dict to a Name (line 1472):

# Obtaining an instance of the builtin type 'dict' (line 1472)
dict_267296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 10), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1472)
# Adding element type (key, value) (line 1472)
# Getting the type of 'cursors' (line 1473)
cursors_267297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 4), 'cursors')
# Obtaining the member 'MOVE' of a type (line 1473)
MOVE_267298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 4), cursors_267297, 'MOVE')
# Getting the type of 'wx' (line 1473)
wx_267299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 18), 'wx')
# Obtaining the member 'CURSOR_HAND' of a type (line 1473)
CURSOR_HAND_267300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 18), wx_267299, 'CURSOR_HAND')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 10), dict_267296, (MOVE_267298, CURSOR_HAND_267300))
# Adding element type (key, value) (line 1472)
# Getting the type of 'cursors' (line 1474)
cursors_267301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 4), 'cursors')
# Obtaining the member 'HAND' of a type (line 1474)
HAND_267302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1474, 4), cursors_267301, 'HAND')
# Getting the type of 'wx' (line 1474)
wx_267303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 18), 'wx')
# Obtaining the member 'CURSOR_HAND' of a type (line 1474)
CURSOR_HAND_267304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1474, 18), wx_267303, 'CURSOR_HAND')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 10), dict_267296, (HAND_267302, CURSOR_HAND_267304))
# Adding element type (key, value) (line 1472)
# Getting the type of 'cursors' (line 1475)
cursors_267305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 4), 'cursors')
# Obtaining the member 'POINTER' of a type (line 1475)
POINTER_267306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 4), cursors_267305, 'POINTER')
# Getting the type of 'wx' (line 1475)
wx_267307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 21), 'wx')
# Obtaining the member 'CURSOR_ARROW' of a type (line 1475)
CURSOR_ARROW_267308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 21), wx_267307, 'CURSOR_ARROW')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 10), dict_267296, (POINTER_267306, CURSOR_ARROW_267308))
# Adding element type (key, value) (line 1472)
# Getting the type of 'cursors' (line 1476)
cursors_267309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 4), 'cursors')
# Obtaining the member 'SELECT_REGION' of a type (line 1476)
SELECT_REGION_267310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1476, 4), cursors_267309, 'SELECT_REGION')
# Getting the type of 'wx' (line 1476)
wx_267311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 27), 'wx')
# Obtaining the member 'CURSOR_CROSS' of a type (line 1476)
CURSOR_CROSS_267312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1476, 27), wx_267311, 'CURSOR_CROSS')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 10), dict_267296, (SELECT_REGION_267310, CURSOR_CROSS_267312))
# Adding element type (key, value) (line 1472)
# Getting the type of 'cursors' (line 1477)
cursors_267313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 4), 'cursors')
# Obtaining the member 'WAIT' of a type (line 1477)
WAIT_267314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 4), cursors_267313, 'WAIT')
# Getting the type of 'wx' (line 1477)
wx_267315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 18), 'wx')
# Obtaining the member 'CURSOR_WAIT' of a type (line 1477)
CURSOR_WAIT_267316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 18), wx_267315, 'CURSOR_WAIT')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 10), dict_267296, (WAIT_267314, CURSOR_WAIT_267316))

# Assigning a type to the variable 'cursord' (line 1472)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 0), 'cursord', dict_267296)
# Declaration of the 'SubplotToolWX' class
# Getting the type of 'wx' (line 1481)
wx_267317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 20), 'wx')
# Obtaining the member 'Frame' of a type (line 1481)
Frame_267318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 20), wx_267317, 'Frame')

class SubplotToolWX(Frame_267318, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1482, 4, False)
        # Assigning a type to the variable 'self' (line 1483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SubplotToolWX.__init__', ['targetfig'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['targetfig'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1483)
        # Processing the call arguments (line 1483)
        # Getting the type of 'self' (line 1483)
        self_267322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 26), 'self', False)
        # Getting the type of 'None' (line 1483)
        None_267323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 32), 'None', False)
        int_267324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, 38), 'int')
        unicode_267325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, 42), 'unicode', u'Configure subplots')
        # Processing the call keyword arguments (line 1483)
        kwargs_267326 = {}
        # Getting the type of 'wx' (line 1483)
        wx_267319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 8), 'wx', False)
        # Obtaining the member 'Frame' of a type (line 1483)
        Frame_267320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 8), wx_267319, 'Frame')
        # Obtaining the member '__init__' of a type (line 1483)
        init___267321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 8), Frame_267320, '__init__')
        # Calling __init__(args, kwargs) (line 1483)
        init___call_result_267327 = invoke(stypy.reporting.localization.Localization(__file__, 1483, 8), init___267321, *[self_267322, None_267323, int_267324, unicode_267325], **kwargs_267326)
        
        
        # Assigning a Call to a Name (line 1485):
        
        # Assigning a Call to a Name (line 1485):
        
        # Call to Figure(...): (line 1485)
        # Processing the call arguments (line 1485)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1485)
        tuple_267329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1485, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1485)
        # Adding element type (line 1485)
        int_267330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1485, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1485, 26), tuple_267329, int_267330)
        # Adding element type (line 1485)
        int_267331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1485, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1485, 26), tuple_267329, int_267331)
        
        # Processing the call keyword arguments (line 1485)
        kwargs_267332 = {}
        # Getting the type of 'Figure' (line 1485)
        Figure_267328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 18), 'Figure', False)
        # Calling Figure(args, kwargs) (line 1485)
        Figure_call_result_267333 = invoke(stypy.reporting.localization.Localization(__file__, 1485, 18), Figure_267328, *[tuple_267329], **kwargs_267332)
        
        # Assigning a type to the variable 'toolfig' (line 1485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 8), 'toolfig', Figure_call_result_267333)
        
        # Assigning a Call to a Name (line 1486):
        
        # Assigning a Call to a Name (line 1486):
        
        # Call to FigureCanvasWx(...): (line 1486)
        # Processing the call arguments (line 1486)
        # Getting the type of 'self' (line 1486)
        self_267335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 32), 'self', False)
        int_267336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1486, 38), 'int')
        # Getting the type of 'toolfig' (line 1486)
        toolfig_267337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 42), 'toolfig', False)
        # Processing the call keyword arguments (line 1486)
        kwargs_267338 = {}
        # Getting the type of 'FigureCanvasWx' (line 1486)
        FigureCanvasWx_267334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 17), 'FigureCanvasWx', False)
        # Calling FigureCanvasWx(args, kwargs) (line 1486)
        FigureCanvasWx_call_result_267339 = invoke(stypy.reporting.localization.Localization(__file__, 1486, 17), FigureCanvasWx_267334, *[self_267335, int_267336, toolfig_267337], **kwargs_267338)
        
        # Assigning a type to the variable 'canvas' (line 1486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 8), 'canvas', FigureCanvasWx_call_result_267339)
        
        # Assigning a Call to a Name (line 1489):
        
        # Assigning a Call to a Name (line 1489):
        
        # Call to FigureManager(...): (line 1489)
        # Processing the call arguments (line 1489)
        # Getting the type of 'canvas' (line 1489)
        canvas_267341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 31), 'canvas', False)
        int_267342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1489, 39), 'int')
        # Getting the type of 'self' (line 1489)
        self_267343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 42), 'self', False)
        # Processing the call keyword arguments (line 1489)
        kwargs_267344 = {}
        # Getting the type of 'FigureManager' (line 1489)
        FigureManager_267340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 17), 'FigureManager', False)
        # Calling FigureManager(args, kwargs) (line 1489)
        FigureManager_call_result_267345 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 17), FigureManager_267340, *[canvas_267341, int_267342, self_267343], **kwargs_267344)
        
        # Assigning a type to the variable 'figmgr' (line 1489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 8), 'figmgr', FigureManager_call_result_267345)
        
        # Assigning a Call to a Name (line 1492):
        
        # Assigning a Call to a Name (line 1492):
        
        # Call to BoxSizer(...): (line 1492)
        # Processing the call arguments (line 1492)
        # Getting the type of 'wx' (line 1492)
        wx_267348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 28), 'wx', False)
        # Obtaining the member 'VERTICAL' of a type (line 1492)
        VERTICAL_267349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1492, 28), wx_267348, 'VERTICAL')
        # Processing the call keyword arguments (line 1492)
        kwargs_267350 = {}
        # Getting the type of 'wx' (line 1492)
        wx_267346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 16), 'wx', False)
        # Obtaining the member 'BoxSizer' of a type (line 1492)
        BoxSizer_267347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1492, 16), wx_267346, 'BoxSizer')
        # Calling BoxSizer(args, kwargs) (line 1492)
        BoxSizer_call_result_267351 = invoke(stypy.reporting.localization.Localization(__file__, 1492, 16), BoxSizer_267347, *[VERTICAL_267349], **kwargs_267350)
        
        # Assigning a type to the variable 'sizer' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'sizer', BoxSizer_call_result_267351)
        
        # Call to Add(...): (line 1494)
        # Processing the call arguments (line 1494)
        # Getting the type of 'canvas' (line 1494)
        canvas_267354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 18), 'canvas', False)
        int_267355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1494, 26), 'int')
        # Getting the type of 'wx' (line 1494)
        wx_267356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 29), 'wx', False)
        # Obtaining the member 'LEFT' of a type (line 1494)
        LEFT_267357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 29), wx_267356, 'LEFT')
        # Getting the type of 'wx' (line 1494)
        wx_267358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 39), 'wx', False)
        # Obtaining the member 'TOP' of a type (line 1494)
        TOP_267359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 39), wx_267358, 'TOP')
        # Applying the binary operator '|' (line 1494)
        result_or__267360 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 29), '|', LEFT_267357, TOP_267359)
        
        # Getting the type of 'wx' (line 1494)
        wx_267361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 48), 'wx', False)
        # Obtaining the member 'GROW' of a type (line 1494)
        GROW_267362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 48), wx_267361, 'GROW')
        # Applying the binary operator '|' (line 1494)
        result_or__267363 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 46), '|', result_or__267360, GROW_267362)
        
        # Processing the call keyword arguments (line 1494)
        kwargs_267364 = {}
        # Getting the type of 'sizer' (line 1494)
        sizer_267352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 8), 'sizer', False)
        # Obtaining the member 'Add' of a type (line 1494)
        Add_267353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 8), sizer_267352, 'Add')
        # Calling Add(args, kwargs) (line 1494)
        Add_call_result_267365 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 8), Add_267353, *[canvas_267354, int_267355, result_or__267363], **kwargs_267364)
        
        
        # Call to SetSizer(...): (line 1495)
        # Processing the call arguments (line 1495)
        # Getting the type of 'sizer' (line 1495)
        sizer_267368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 22), 'sizer', False)
        # Processing the call keyword arguments (line 1495)
        kwargs_267369 = {}
        # Getting the type of 'self' (line 1495)
        self_267366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 8), 'self', False)
        # Obtaining the member 'SetSizer' of a type (line 1495)
        SetSizer_267367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1495, 8), self_267366, 'SetSizer')
        # Calling SetSizer(args, kwargs) (line 1495)
        SetSizer_call_result_267370 = invoke(stypy.reporting.localization.Localization(__file__, 1495, 8), SetSizer_267367, *[sizer_267368], **kwargs_267369)
        
        
        # Call to Fit(...): (line 1496)
        # Processing the call keyword arguments (line 1496)
        kwargs_267373 = {}
        # Getting the type of 'self' (line 1496)
        self_267371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 8), 'self', False)
        # Obtaining the member 'Fit' of a type (line 1496)
        Fit_267372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 8), self_267371, 'Fit')
        # Calling Fit(args, kwargs) (line 1496)
        Fit_call_result_267374 = invoke(stypy.reporting.localization.Localization(__file__, 1496, 8), Fit_267372, *[], **kwargs_267373)
        
        
        # Assigning a Call to a Name (line 1497):
        
        # Assigning a Call to a Name (line 1497):
        
        # Call to SubplotTool(...): (line 1497)
        # Processing the call arguments (line 1497)
        # Getting the type of 'targetfig' (line 1497)
        targetfig_267376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 27), 'targetfig', False)
        # Getting the type of 'toolfig' (line 1497)
        toolfig_267377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 38), 'toolfig', False)
        # Processing the call keyword arguments (line 1497)
        kwargs_267378 = {}
        # Getting the type of 'SubplotTool' (line 1497)
        SubplotTool_267375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 15), 'SubplotTool', False)
        # Calling SubplotTool(args, kwargs) (line 1497)
        SubplotTool_call_result_267379 = invoke(stypy.reporting.localization.Localization(__file__, 1497, 15), SubplotTool_267375, *[targetfig_267376, toolfig_267377], **kwargs_267378)
        
        # Assigning a type to the variable 'tool' (line 1497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'tool', SubplotTool_call_result_267379)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'SubplotToolWX' (line 1481)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 0), 'SubplotToolWX', SubplotToolWX)
# Declaration of the 'NavigationToolbar2Wx' class
# Getting the type of 'NavigationToolbar2' (line 1500)
NavigationToolbar2_267380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 27), 'NavigationToolbar2')
# Getting the type of 'wx' (line 1500)
wx_267381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 47), 'wx')
# Obtaining the member 'ToolBar' of a type (line 1500)
ToolBar_267382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 47), wx_267381, 'ToolBar')

class NavigationToolbar2Wx(NavigationToolbar2_267380, ToolBar_267382, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1501, 4, False)
        # Assigning a type to the variable 'self' (line 1502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1502, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.__init__', ['canvas'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['canvas'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1502)
        # Processing the call arguments (line 1502)
        # Getting the type of 'self' (line 1502)
        self_267386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 28), 'self', False)
        
        # Call to GetParent(...): (line 1502)
        # Processing the call keyword arguments (line 1502)
        kwargs_267389 = {}
        # Getting the type of 'canvas' (line 1502)
        canvas_267387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 34), 'canvas', False)
        # Obtaining the member 'GetParent' of a type (line 1502)
        GetParent_267388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1502, 34), canvas_267387, 'GetParent')
        # Calling GetParent(args, kwargs) (line 1502)
        GetParent_call_result_267390 = invoke(stypy.reporting.localization.Localization(__file__, 1502, 34), GetParent_267388, *[], **kwargs_267389)
        
        int_267391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1502, 54), 'int')
        # Processing the call keyword arguments (line 1502)
        kwargs_267392 = {}
        # Getting the type of 'wx' (line 1502)
        wx_267383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 8), 'wx', False)
        # Obtaining the member 'ToolBar' of a type (line 1502)
        ToolBar_267384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1502, 8), wx_267383, 'ToolBar')
        # Obtaining the member '__init__' of a type (line 1502)
        init___267385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1502, 8), ToolBar_267384, '__init__')
        # Calling __init__(args, kwargs) (line 1502)
        init___call_result_267393 = invoke(stypy.reporting.localization.Localization(__file__, 1502, 8), init___267385, *[self_267386, GetParent_call_result_267390, int_267391], **kwargs_267392)
        
        
        # Call to __init__(...): (line 1503)
        # Processing the call arguments (line 1503)
        # Getting the type of 'self' (line 1503)
        self_267396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 36), 'self', False)
        # Getting the type of 'canvas' (line 1503)
        canvas_267397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 42), 'canvas', False)
        # Processing the call keyword arguments (line 1503)
        kwargs_267398 = {}
        # Getting the type of 'NavigationToolbar2' (line 1503)
        NavigationToolbar2_267394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 8), 'NavigationToolbar2', False)
        # Obtaining the member '__init__' of a type (line 1503)
        init___267395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1503, 8), NavigationToolbar2_267394, '__init__')
        # Calling __init__(args, kwargs) (line 1503)
        init___call_result_267399 = invoke(stypy.reporting.localization.Localization(__file__, 1503, 8), init___267395, *[self_267396, canvas_267397], **kwargs_267398)
        
        
        # Assigning a Name to a Attribute (line 1504):
        
        # Assigning a Name to a Attribute (line 1504):
        # Getting the type of 'canvas' (line 1504)
        canvas_267400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 22), 'canvas')
        # Getting the type of 'self' (line 1504)
        self_267401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 1504)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1504, 8), self_267401, 'canvas', canvas_267400)
        
        # Assigning a Name to a Attribute (line 1505):
        
        # Assigning a Name to a Attribute (line 1505):
        # Getting the type of 'True' (line 1505)
        True_267402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 21), 'True')
        # Getting the type of 'self' (line 1505)
        self_267403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 8), 'self')
        # Setting the type of the member '_idle' of a type (line 1505)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1505, 8), self_267403, '_idle', True_267402)
        
        # Assigning a Name to a Attribute (line 1506):
        
        # Assigning a Name to a Attribute (line 1506):
        # Getting the type of 'None' (line 1506)
        None_267404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 23), 'None')
        # Getting the type of 'self' (line 1506)
        self_267405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 8), 'self')
        # Setting the type of the member 'statbar' of a type (line 1506)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 8), self_267405, 'statbar', None_267404)
        
        # Assigning a Name to a Attribute (line 1507):
        
        # Assigning a Name to a Attribute (line 1507):
        # Getting the type of 'None' (line 1507)
        None_267406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 28), 'None')
        # Getting the type of 'self' (line 1507)
        self_267407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'self')
        # Setting the type of the member 'prevZoomRect' of a type (line 1507)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 8), self_267407, 'prevZoomRect', None_267406)
        
        # Assigning a Compare to a Attribute (line 1512):
        
        # Assigning a Compare to a Attribute (line 1512):
        
        unicode_267408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, 25), 'unicode', u'wxMac')
        # Getting the type of 'wx' (line 1512)
        wx_267409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 36), 'wx')
        # Obtaining the member 'PlatformInfo' of a type (line 1512)
        PlatformInfo_267410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 36), wx_267409, 'PlatformInfo')
        # Applying the binary operator 'in' (line 1512)
        result_contains_267411 = python_operator(stypy.reporting.localization.Localization(__file__, 1512, 25), 'in', unicode_267408, PlatformInfo_267410)
        
        # Getting the type of 'self' (line 1512)
        self_267412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 8), 'self')
        # Setting the type of the member 'retinaFix' of a type (line 1512)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 8), self_267412, 'retinaFix', result_contains_267411)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_canvas(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_canvas'
        module_type_store = module_type_store.open_function_context('get_canvas', 1514, 4, False)
        # Assigning a type to the variable 'self' (line 1515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1515, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx.get_canvas.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx.get_canvas.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx.get_canvas.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx.get_canvas.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx.get_canvas')
        NavigationToolbar2Wx.get_canvas.__dict__.__setitem__('stypy_param_names_list', ['frame', 'fig'])
        NavigationToolbar2Wx.get_canvas.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2Wx.get_canvas.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx.get_canvas.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx.get_canvas.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx.get_canvas.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx.get_canvas.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.get_canvas', ['frame', 'fig'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_canvas', localization, ['frame', 'fig'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_canvas(...)' code ##################

        
        # Call to FigureCanvasWx(...): (line 1515)
        # Processing the call arguments (line 1515)
        # Getting the type of 'frame' (line 1515)
        frame_267414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 30), 'frame', False)
        int_267415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1515, 37), 'int')
        # Getting the type of 'fig' (line 1515)
        fig_267416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 41), 'fig', False)
        # Processing the call keyword arguments (line 1515)
        kwargs_267417 = {}
        # Getting the type of 'FigureCanvasWx' (line 1515)
        FigureCanvasWx_267413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 15), 'FigureCanvasWx', False)
        # Calling FigureCanvasWx(args, kwargs) (line 1515)
        FigureCanvasWx_call_result_267418 = invoke(stypy.reporting.localization.Localization(__file__, 1515, 15), FigureCanvasWx_267413, *[frame_267414, int_267415, fig_267416], **kwargs_267417)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1515, 8), 'stypy_return_type', FigureCanvasWx_call_result_267418)
        
        # ################# End of 'get_canvas(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_canvas' in the type store
        # Getting the type of 'stypy_return_type' (line 1514)
        stypy_return_type_267419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267419)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_canvas'
        return stypy_return_type_267419


    @norecursion
    def _init_toolbar(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_init_toolbar'
        module_type_store = module_type_store.open_function_context('_init_toolbar', 1517, 4, False)
        # Assigning a type to the variable 'self' (line 1518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1518, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx._init_toolbar.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx._init_toolbar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx._init_toolbar.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx._init_toolbar.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx._init_toolbar')
        NavigationToolbar2Wx._init_toolbar.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2Wx._init_toolbar.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2Wx._init_toolbar.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx._init_toolbar.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx._init_toolbar.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx._init_toolbar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx._init_toolbar.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx._init_toolbar', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_init_toolbar', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_init_toolbar(...)' code ##################

        
        # Call to DEBUG_MSG(...): (line 1518)
        # Processing the call arguments (line 1518)
        unicode_267421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1518, 18), 'unicode', u'_init_toolbar')
        int_267422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1518, 35), 'int')
        # Getting the type of 'self' (line 1518)
        self_267423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 38), 'self', False)
        # Processing the call keyword arguments (line 1518)
        kwargs_267424 = {}
        # Getting the type of 'DEBUG_MSG' (line 1518)
        DEBUG_MSG_267420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 8), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 1518)
        DEBUG_MSG_call_result_267425 = invoke(stypy.reporting.localization.Localization(__file__, 1518, 8), DEBUG_MSG_267420, *[unicode_267421, int_267422, self_267423], **kwargs_267424)
        
        
        # Assigning a Call to a Attribute (line 1520):
        
        # Assigning a Call to a Attribute (line 1520):
        
        # Call to GetParent(...): (line 1520)
        # Processing the call keyword arguments (line 1520)
        kwargs_267429 = {}
        # Getting the type of 'self' (line 1520)
        self_267426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 23), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1520)
        canvas_267427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 23), self_267426, 'canvas')
        # Obtaining the member 'GetParent' of a type (line 1520)
        GetParent_267428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 23), canvas_267427, 'GetParent')
        # Calling GetParent(args, kwargs) (line 1520)
        GetParent_call_result_267430 = invoke(stypy.reporting.localization.Localization(__file__, 1520, 23), GetParent_267428, *[], **kwargs_267429)
        
        # Getting the type of 'self' (line 1520)
        self_267431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 8), 'self')
        # Setting the type of the member '_parent' of a type (line 1520)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 8), self_267431, '_parent', GetParent_call_result_267430)
        
        # Assigning a Dict to a Attribute (line 1522):
        
        # Assigning a Dict to a Attribute (line 1522):
        
        # Obtaining an instance of the builtin type 'dict' (line 1522)
        dict_267432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1522, 22), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1522)
        
        # Getting the type of 'self' (line 1522)
        self_267433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 8), 'self')
        # Setting the type of the member 'wx_ids' of a type (line 1522)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1522, 8), self_267433, 'wx_ids', dict_267432)
        
        # Getting the type of 'self' (line 1523)
        self_267434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 56), 'self')
        # Obtaining the member 'toolitems' of a type (line 1523)
        toolitems_267435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1523, 56), self_267434, 'toolitems')
        # Testing the type of a for loop iterable (line 1523)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1523, 8), toolitems_267435)
        # Getting the type of the for loop variable (line 1523)
        for_loop_var_267436 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1523, 8), toolitems_267435)
        # Assigning a type to the variable 'text' (line 1523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 8), 'text', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1523, 8), for_loop_var_267436))
        # Assigning a type to the variable 'tooltip_text' (line 1523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 8), 'tooltip_text', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1523, 8), for_loop_var_267436))
        # Assigning a type to the variable 'image_file' (line 1523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 8), 'image_file', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1523, 8), for_loop_var_267436))
        # Assigning a type to the variable 'callback' (line 1523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 8), 'callback', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1523, 8), for_loop_var_267436))
        # SSA begins for a for statement (line 1523)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 1524)
        # Getting the type of 'text' (line 1524)
        text_267437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 15), 'text')
        # Getting the type of 'None' (line 1524)
        None_267438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 23), 'None')
        
        (may_be_267439, more_types_in_union_267440) = may_be_none(text_267437, None_267438)

        if may_be_267439:

            if more_types_in_union_267440:
                # Runtime conditional SSA (line 1524)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to AddSeparator(...): (line 1525)
            # Processing the call keyword arguments (line 1525)
            kwargs_267443 = {}
            # Getting the type of 'self' (line 1525)
            self_267441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 16), 'self', False)
            # Obtaining the member 'AddSeparator' of a type (line 1525)
            AddSeparator_267442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1525, 16), self_267441, 'AddSeparator')
            # Calling AddSeparator(args, kwargs) (line 1525)
            AddSeparator_call_result_267444 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 16), AddSeparator_267442, *[], **kwargs_267443)
            

            if more_types_in_union_267440:
                # SSA join for if statement (line 1524)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Subscript (line 1527):
        
        # Assigning a Call to a Subscript (line 1527):
        
        # Call to NewId(...): (line 1527)
        # Processing the call keyword arguments (line 1527)
        kwargs_267447 = {}
        # Getting the type of 'wx' (line 1527)
        wx_267445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 32), 'wx', False)
        # Obtaining the member 'NewId' of a type (line 1527)
        NewId_267446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 32), wx_267445, 'NewId')
        # Calling NewId(args, kwargs) (line 1527)
        NewId_call_result_267448 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 32), NewId_267446, *[], **kwargs_267447)
        
        # Getting the type of 'self' (line 1527)
        self_267449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'self')
        # Obtaining the member 'wx_ids' of a type (line 1527)
        wx_ids_267450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 12), self_267449, 'wx_ids')
        # Getting the type of 'text' (line 1527)
        text_267451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 24), 'text')
        # Storing an element on a container (line 1527)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1527, 12), wx_ids_267450, (text_267451, NewId_call_result_267448))
        
        # Call to _AddTool(...): (line 1528)
        # Processing the call arguments (line 1528)
        # Getting the type of 'self' (line 1528)
        self_267454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 25), 'self', False)
        # Getting the type of 'self' (line 1528)
        self_267455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 31), 'self', False)
        # Obtaining the member 'wx_ids' of a type (line 1528)
        wx_ids_267456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 31), self_267455, 'wx_ids')
        # Getting the type of 'text' (line 1528)
        text_267457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 44), 'text', False)
        
        # Call to _load_bitmap(...): (line 1529)
        # Processing the call arguments (line 1529)
        # Getting the type of 'image_file' (line 1529)
        image_file_267459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 37), 'image_file', False)
        unicode_267460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1529, 50), 'unicode', u'.png')
        # Applying the binary operator '+' (line 1529)
        result_add_267461 = python_operator(stypy.reporting.localization.Localization(__file__, 1529, 37), '+', image_file_267459, unicode_267460)
        
        # Processing the call keyword arguments (line 1529)
        kwargs_267462 = {}
        # Getting the type of '_load_bitmap' (line 1529)
        _load_bitmap_267458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 24), '_load_bitmap', False)
        # Calling _load_bitmap(args, kwargs) (line 1529)
        _load_bitmap_call_result_267463 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 24), _load_bitmap_267458, *[result_add_267461], **kwargs_267462)
        
        # Getting the type of 'tooltip_text' (line 1530)
        tooltip_text_267464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 24), 'tooltip_text', False)
        # Processing the call keyword arguments (line 1528)
        kwargs_267465 = {}
        # Getting the type of 'wxc' (line 1528)
        wxc_267452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 12), 'wxc', False)
        # Obtaining the member '_AddTool' of a type (line 1528)
        _AddTool_267453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 12), wxc_267452, '_AddTool')
        # Calling _AddTool(args, kwargs) (line 1528)
        _AddTool_call_result_267466 = invoke(stypy.reporting.localization.Localization(__file__, 1528, 12), _AddTool_267453, *[self_267454, wx_ids_267456, text_267457, _load_bitmap_call_result_267463, tooltip_text_267464], **kwargs_267465)
        
        
        # Call to Bind(...): (line 1532)
        # Processing the call arguments (line 1532)
        # Getting the type of 'wx' (line 1532)
        wx_267469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 22), 'wx', False)
        # Obtaining the member 'EVT_TOOL' of a type (line 1532)
        EVT_TOOL_267470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 22), wx_267469, 'EVT_TOOL')
        
        # Call to getattr(...): (line 1532)
        # Processing the call arguments (line 1532)
        # Getting the type of 'self' (line 1532)
        self_267472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 43), 'self', False)
        # Getting the type of 'callback' (line 1532)
        callback_267473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 49), 'callback', False)
        # Processing the call keyword arguments (line 1532)
        kwargs_267474 = {}
        # Getting the type of 'getattr' (line 1532)
        getattr_267471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 35), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1532)
        getattr_call_result_267475 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 35), getattr_267471, *[self_267472, callback_267473], **kwargs_267474)
        
        # Processing the call keyword arguments (line 1532)
        
        # Obtaining the type of the subscript
        # Getting the type of 'text' (line 1533)
        text_267476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 37), 'text', False)
        # Getting the type of 'self' (line 1533)
        self_267477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 25), 'self', False)
        # Obtaining the member 'wx_ids' of a type (line 1533)
        wx_ids_267478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 25), self_267477, 'wx_ids')
        # Obtaining the member '__getitem__' of a type (line 1533)
        getitem___267479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 25), wx_ids_267478, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1533)
        subscript_call_result_267480 = invoke(stypy.reporting.localization.Localization(__file__, 1533, 25), getitem___267479, text_267476)
        
        keyword_267481 = subscript_call_result_267480
        kwargs_267482 = {'id': keyword_267481}
        # Getting the type of 'self' (line 1532)
        self_267467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 12), 'self', False)
        # Obtaining the member 'Bind' of a type (line 1532)
        Bind_267468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 12), self_267467, 'Bind')
        # Calling Bind(args, kwargs) (line 1532)
        Bind_call_result_267483 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 12), Bind_267468, *[EVT_TOOL_267470, getattr_call_result_267475], **kwargs_267482)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to Realize(...): (line 1535)
        # Processing the call keyword arguments (line 1535)
        kwargs_267486 = {}
        # Getting the type of 'self' (line 1535)
        self_267484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 8), 'self', False)
        # Obtaining the member 'Realize' of a type (line 1535)
        Realize_267485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 8), self_267484, 'Realize')
        # Calling Realize(args, kwargs) (line 1535)
        Realize_call_result_267487 = invoke(stypy.reporting.localization.Localization(__file__, 1535, 8), Realize_267485, *[], **kwargs_267486)
        
        
        # ################# End of '_init_toolbar(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_init_toolbar' in the type store
        # Getting the type of 'stypy_return_type' (line 1517)
        stypy_return_type_267488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267488)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_init_toolbar'
        return stypy_return_type_267488


    @norecursion
    def zoom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'zoom'
        module_type_store = module_type_store.open_function_context('zoom', 1537, 4, False)
        # Assigning a type to the variable 'self' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx.zoom.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx.zoom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx.zoom.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx.zoom.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx.zoom')
        NavigationToolbar2Wx.zoom.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2Wx.zoom.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        NavigationToolbar2Wx.zoom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx.zoom.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx.zoom.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx.zoom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx.zoom.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.zoom', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'zoom', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'zoom(...)' code ##################

        
        # Call to ToggleTool(...): (line 1538)
        # Processing the call arguments (line 1538)
        
        # Obtaining the type of the subscript
        unicode_267491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 36), 'unicode', u'Pan')
        # Getting the type of 'self' (line 1538)
        self_267492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 24), 'self', False)
        # Obtaining the member 'wx_ids' of a type (line 1538)
        wx_ids_267493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 24), self_267492, 'wx_ids')
        # Obtaining the member '__getitem__' of a type (line 1538)
        getitem___267494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 24), wx_ids_267493, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1538)
        subscript_call_result_267495 = invoke(stypy.reporting.localization.Localization(__file__, 1538, 24), getitem___267494, unicode_267491)
        
        # Getting the type of 'False' (line 1538)
        False_267496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 44), 'False', False)
        # Processing the call keyword arguments (line 1538)
        kwargs_267497 = {}
        # Getting the type of 'self' (line 1538)
        self_267489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 8), 'self', False)
        # Obtaining the member 'ToggleTool' of a type (line 1538)
        ToggleTool_267490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 8), self_267489, 'ToggleTool')
        # Calling ToggleTool(args, kwargs) (line 1538)
        ToggleTool_call_result_267498 = invoke(stypy.reporting.localization.Localization(__file__, 1538, 8), ToggleTool_267490, *[subscript_call_result_267495, False_267496], **kwargs_267497)
        
        
        # Call to zoom(...): (line 1539)
        # Processing the call arguments (line 1539)
        # Getting the type of 'self' (line 1539)
        self_267501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 32), 'self', False)
        # Getting the type of 'args' (line 1539)
        args_267502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 39), 'args', False)
        # Processing the call keyword arguments (line 1539)
        kwargs_267503 = {}
        # Getting the type of 'NavigationToolbar2' (line 1539)
        NavigationToolbar2_267499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 8), 'NavigationToolbar2', False)
        # Obtaining the member 'zoom' of a type (line 1539)
        zoom_267500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 8), NavigationToolbar2_267499, 'zoom')
        # Calling zoom(args, kwargs) (line 1539)
        zoom_call_result_267504 = invoke(stypy.reporting.localization.Localization(__file__, 1539, 8), zoom_267500, *[self_267501, args_267502], **kwargs_267503)
        
        
        # ################# End of 'zoom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'zoom' in the type store
        # Getting the type of 'stypy_return_type' (line 1537)
        stypy_return_type_267505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267505)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'zoom'
        return stypy_return_type_267505


    @norecursion
    def pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pan'
        module_type_store = module_type_store.open_function_context('pan', 1541, 4, False)
        # Assigning a type to the variable 'self' (line 1542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx.pan.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx.pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx.pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx.pan.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx.pan')
        NavigationToolbar2Wx.pan.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2Wx.pan.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        NavigationToolbar2Wx.pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx.pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx.pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx.pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx.pan.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.pan', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pan', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pan(...)' code ##################

        
        # Call to ToggleTool(...): (line 1542)
        # Processing the call arguments (line 1542)
        
        # Obtaining the type of the subscript
        unicode_267508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1542, 36), 'unicode', u'Zoom')
        # Getting the type of 'self' (line 1542)
        self_267509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 24), 'self', False)
        # Obtaining the member 'wx_ids' of a type (line 1542)
        wx_ids_267510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 24), self_267509, 'wx_ids')
        # Obtaining the member '__getitem__' of a type (line 1542)
        getitem___267511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 24), wx_ids_267510, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1542)
        subscript_call_result_267512 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 24), getitem___267511, unicode_267508)
        
        # Getting the type of 'False' (line 1542)
        False_267513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 45), 'False', False)
        # Processing the call keyword arguments (line 1542)
        kwargs_267514 = {}
        # Getting the type of 'self' (line 1542)
        self_267506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 8), 'self', False)
        # Obtaining the member 'ToggleTool' of a type (line 1542)
        ToggleTool_267507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 8), self_267506, 'ToggleTool')
        # Calling ToggleTool(args, kwargs) (line 1542)
        ToggleTool_call_result_267515 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 8), ToggleTool_267507, *[subscript_call_result_267512, False_267513], **kwargs_267514)
        
        
        # Call to pan(...): (line 1543)
        # Processing the call arguments (line 1543)
        # Getting the type of 'self' (line 1543)
        self_267518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 31), 'self', False)
        # Getting the type of 'args' (line 1543)
        args_267519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 38), 'args', False)
        # Processing the call keyword arguments (line 1543)
        kwargs_267520 = {}
        # Getting the type of 'NavigationToolbar2' (line 1543)
        NavigationToolbar2_267516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 8), 'NavigationToolbar2', False)
        # Obtaining the member 'pan' of a type (line 1543)
        pan_267517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 8), NavigationToolbar2_267516, 'pan')
        # Calling pan(args, kwargs) (line 1543)
        pan_call_result_267521 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 8), pan_267517, *[self_267518, args_267519], **kwargs_267520)
        
        
        # ################# End of 'pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pan' in the type store
        # Getting the type of 'stypy_return_type' (line 1541)
        stypy_return_type_267522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267522)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pan'
        return stypy_return_type_267522


    @norecursion
    def configure_subplots(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'configure_subplots'
        module_type_store = module_type_store.open_function_context('configure_subplots', 1545, 4, False)
        # Assigning a type to the variable 'self' (line 1546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx.configure_subplots.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx.configure_subplots.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx.configure_subplots.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx.configure_subplots.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx.configure_subplots')
        NavigationToolbar2Wx.configure_subplots.__dict__.__setitem__('stypy_param_names_list', ['evt'])
        NavigationToolbar2Wx.configure_subplots.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2Wx.configure_subplots.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx.configure_subplots.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx.configure_subplots.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx.configure_subplots.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx.configure_subplots.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.configure_subplots', ['evt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'configure_subplots', localization, ['evt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'configure_subplots(...)' code ##################

        
        # Assigning a Call to a Name (line 1546):
        
        # Assigning a Call to a Name (line 1546):
        
        # Call to Frame(...): (line 1546)
        # Processing the call arguments (line 1546)
        # Getting the type of 'None' (line 1546)
        None_267525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 25), 'None', False)
        int_267526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1546, 31), 'int')
        unicode_267527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1546, 35), 'unicode', u'Configure subplots')
        # Processing the call keyword arguments (line 1546)
        kwargs_267528 = {}
        # Getting the type of 'wx' (line 1546)
        wx_267523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 16), 'wx', False)
        # Obtaining the member 'Frame' of a type (line 1546)
        Frame_267524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1546, 16), wx_267523, 'Frame')
        # Calling Frame(args, kwargs) (line 1546)
        Frame_call_result_267529 = invoke(stypy.reporting.localization.Localization(__file__, 1546, 16), Frame_267524, *[None_267525, int_267526, unicode_267527], **kwargs_267528)
        
        # Assigning a type to the variable 'frame' (line 1546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 8), 'frame', Frame_call_result_267529)
        
        # Assigning a Call to a Name (line 1548):
        
        # Assigning a Call to a Name (line 1548):
        
        # Call to Figure(...): (line 1548)
        # Processing the call arguments (line 1548)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1548)
        tuple_267531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1548)
        # Adding element type (line 1548)
        int_267532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1548, 26), tuple_267531, int_267532)
        # Adding element type (line 1548)
        int_267533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1548, 26), tuple_267531, int_267533)
        
        # Processing the call keyword arguments (line 1548)
        kwargs_267534 = {}
        # Getting the type of 'Figure' (line 1548)
        Figure_267530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 18), 'Figure', False)
        # Calling Figure(args, kwargs) (line 1548)
        Figure_call_result_267535 = invoke(stypy.reporting.localization.Localization(__file__, 1548, 18), Figure_267530, *[tuple_267531], **kwargs_267534)
        
        # Assigning a type to the variable 'toolfig' (line 1548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1548, 8), 'toolfig', Figure_call_result_267535)
        
        # Assigning a Call to a Name (line 1549):
        
        # Assigning a Call to a Name (line 1549):
        
        # Call to get_canvas(...): (line 1549)
        # Processing the call arguments (line 1549)
        # Getting the type of 'frame' (line 1549)
        frame_267538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 33), 'frame', False)
        # Getting the type of 'toolfig' (line 1549)
        toolfig_267539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 40), 'toolfig', False)
        # Processing the call keyword arguments (line 1549)
        kwargs_267540 = {}
        # Getting the type of 'self' (line 1549)
        self_267536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 17), 'self', False)
        # Obtaining the member 'get_canvas' of a type (line 1549)
        get_canvas_267537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1549, 17), self_267536, 'get_canvas')
        # Calling get_canvas(args, kwargs) (line 1549)
        get_canvas_call_result_267541 = invoke(stypy.reporting.localization.Localization(__file__, 1549, 17), get_canvas_267537, *[frame_267538, toolfig_267539], **kwargs_267540)
        
        # Assigning a type to the variable 'canvas' (line 1549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1549, 8), 'canvas', get_canvas_call_result_267541)
        
        # Assigning a Call to a Name (line 1552):
        
        # Assigning a Call to a Name (line 1552):
        
        # Call to FigureManager(...): (line 1552)
        # Processing the call arguments (line 1552)
        # Getting the type of 'canvas' (line 1552)
        canvas_267543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 31), 'canvas', False)
        int_267544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1552, 39), 'int')
        # Getting the type of 'frame' (line 1552)
        frame_267545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 42), 'frame', False)
        # Processing the call keyword arguments (line 1552)
        kwargs_267546 = {}
        # Getting the type of 'FigureManager' (line 1552)
        FigureManager_267542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 17), 'FigureManager', False)
        # Calling FigureManager(args, kwargs) (line 1552)
        FigureManager_call_result_267547 = invoke(stypy.reporting.localization.Localization(__file__, 1552, 17), FigureManager_267542, *[canvas_267543, int_267544, frame_267545], **kwargs_267546)
        
        # Assigning a type to the variable 'figmgr' (line 1552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1552, 8), 'figmgr', FigureManager_call_result_267547)
        
        # Assigning a Call to a Name (line 1555):
        
        # Assigning a Call to a Name (line 1555):
        
        # Call to BoxSizer(...): (line 1555)
        # Processing the call arguments (line 1555)
        # Getting the type of 'wx' (line 1555)
        wx_267550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 28), 'wx', False)
        # Obtaining the member 'VERTICAL' of a type (line 1555)
        VERTICAL_267551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1555, 28), wx_267550, 'VERTICAL')
        # Processing the call keyword arguments (line 1555)
        kwargs_267552 = {}
        # Getting the type of 'wx' (line 1555)
        wx_267548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 16), 'wx', False)
        # Obtaining the member 'BoxSizer' of a type (line 1555)
        BoxSizer_267549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1555, 16), wx_267548, 'BoxSizer')
        # Calling BoxSizer(args, kwargs) (line 1555)
        BoxSizer_call_result_267553 = invoke(stypy.reporting.localization.Localization(__file__, 1555, 16), BoxSizer_267549, *[VERTICAL_267551], **kwargs_267552)
        
        # Assigning a type to the variable 'sizer' (line 1555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1555, 8), 'sizer', BoxSizer_call_result_267553)
        
        # Call to Add(...): (line 1557)
        # Processing the call arguments (line 1557)
        # Getting the type of 'canvas' (line 1557)
        canvas_267556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 18), 'canvas', False)
        int_267557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1557, 26), 'int')
        # Getting the type of 'wx' (line 1557)
        wx_267558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 29), 'wx', False)
        # Obtaining the member 'LEFT' of a type (line 1557)
        LEFT_267559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1557, 29), wx_267558, 'LEFT')
        # Getting the type of 'wx' (line 1557)
        wx_267560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 39), 'wx', False)
        # Obtaining the member 'TOP' of a type (line 1557)
        TOP_267561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1557, 39), wx_267560, 'TOP')
        # Applying the binary operator '|' (line 1557)
        result_or__267562 = python_operator(stypy.reporting.localization.Localization(__file__, 1557, 29), '|', LEFT_267559, TOP_267561)
        
        # Getting the type of 'wx' (line 1557)
        wx_267563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 48), 'wx', False)
        # Obtaining the member 'GROW' of a type (line 1557)
        GROW_267564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1557, 48), wx_267563, 'GROW')
        # Applying the binary operator '|' (line 1557)
        result_or__267565 = python_operator(stypy.reporting.localization.Localization(__file__, 1557, 46), '|', result_or__267562, GROW_267564)
        
        # Processing the call keyword arguments (line 1557)
        kwargs_267566 = {}
        # Getting the type of 'sizer' (line 1557)
        sizer_267554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 8), 'sizer', False)
        # Obtaining the member 'Add' of a type (line 1557)
        Add_267555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1557, 8), sizer_267554, 'Add')
        # Calling Add(args, kwargs) (line 1557)
        Add_call_result_267567 = invoke(stypy.reporting.localization.Localization(__file__, 1557, 8), Add_267555, *[canvas_267556, int_267557, result_or__267565], **kwargs_267566)
        
        
        # Call to SetSizer(...): (line 1558)
        # Processing the call arguments (line 1558)
        # Getting the type of 'sizer' (line 1558)
        sizer_267570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 23), 'sizer', False)
        # Processing the call keyword arguments (line 1558)
        kwargs_267571 = {}
        # Getting the type of 'frame' (line 1558)
        frame_267568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 8), 'frame', False)
        # Obtaining the member 'SetSizer' of a type (line 1558)
        SetSizer_267569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1558, 8), frame_267568, 'SetSizer')
        # Calling SetSizer(args, kwargs) (line 1558)
        SetSizer_call_result_267572 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 8), SetSizer_267569, *[sizer_267570], **kwargs_267571)
        
        
        # Call to Fit(...): (line 1559)
        # Processing the call keyword arguments (line 1559)
        kwargs_267575 = {}
        # Getting the type of 'frame' (line 1559)
        frame_267573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 8), 'frame', False)
        # Obtaining the member 'Fit' of a type (line 1559)
        Fit_267574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1559, 8), frame_267573, 'Fit')
        # Calling Fit(args, kwargs) (line 1559)
        Fit_call_result_267576 = invoke(stypy.reporting.localization.Localization(__file__, 1559, 8), Fit_267574, *[], **kwargs_267575)
        
        
        # Assigning a Call to a Name (line 1560):
        
        # Assigning a Call to a Name (line 1560):
        
        # Call to SubplotTool(...): (line 1560)
        # Processing the call arguments (line 1560)
        # Getting the type of 'self' (line 1560)
        self_267578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 27), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1560)
        canvas_267579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1560, 27), self_267578, 'canvas')
        # Obtaining the member 'figure' of a type (line 1560)
        figure_267580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1560, 27), canvas_267579, 'figure')
        # Getting the type of 'toolfig' (line 1560)
        toolfig_267581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 47), 'toolfig', False)
        # Processing the call keyword arguments (line 1560)
        kwargs_267582 = {}
        # Getting the type of 'SubplotTool' (line 1560)
        SubplotTool_267577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 15), 'SubplotTool', False)
        # Calling SubplotTool(args, kwargs) (line 1560)
        SubplotTool_call_result_267583 = invoke(stypy.reporting.localization.Localization(__file__, 1560, 15), SubplotTool_267577, *[figure_267580, toolfig_267581], **kwargs_267582)
        
        # Assigning a type to the variable 'tool' (line 1560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1560, 8), 'tool', SubplotTool_call_result_267583)
        
        # Call to Show(...): (line 1561)
        # Processing the call keyword arguments (line 1561)
        kwargs_267586 = {}
        # Getting the type of 'frame' (line 1561)
        frame_267584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 8), 'frame', False)
        # Obtaining the member 'Show' of a type (line 1561)
        Show_267585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1561, 8), frame_267584, 'Show')
        # Calling Show(args, kwargs) (line 1561)
        Show_call_result_267587 = invoke(stypy.reporting.localization.Localization(__file__, 1561, 8), Show_267585, *[], **kwargs_267586)
        
        
        # ################# End of 'configure_subplots(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'configure_subplots' in the type store
        # Getting the type of 'stypy_return_type' (line 1545)
        stypy_return_type_267588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267588)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'configure_subplots'
        return stypy_return_type_267588


    @norecursion
    def save_figure(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'save_figure'
        module_type_store = module_type_store.open_function_context('save_figure', 1563, 4, False)
        # Assigning a type to the variable 'self' (line 1564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1564, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx.save_figure.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx.save_figure.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx.save_figure.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx.save_figure.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx.save_figure')
        NavigationToolbar2Wx.save_figure.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2Wx.save_figure.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        NavigationToolbar2Wx.save_figure.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx.save_figure.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx.save_figure.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx.save_figure.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx.save_figure.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.save_figure', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'save_figure', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'save_figure(...)' code ##################

        
        # Assigning a Call to a Tuple (line 1565):
        
        # Assigning a Call to a Name:
        
        # Call to _get_imagesave_wildcards(...): (line 1565)
        # Processing the call keyword arguments (line 1565)
        kwargs_267592 = {}
        # Getting the type of 'self' (line 1565)
        self_267589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 40), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1565)
        canvas_267590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 40), self_267589, 'canvas')
        # Obtaining the member '_get_imagesave_wildcards' of a type (line 1565)
        _get_imagesave_wildcards_267591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 40), canvas_267590, '_get_imagesave_wildcards')
        # Calling _get_imagesave_wildcards(args, kwargs) (line 1565)
        _get_imagesave_wildcards_call_result_267593 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 40), _get_imagesave_wildcards_267591, *[], **kwargs_267592)
        
        # Assigning a type to the variable 'call_assignment_263063' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'call_assignment_263063', _get_imagesave_wildcards_call_result_267593)
        
        # Assigning a Call to a Name (line 1565):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_267596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 8), 'int')
        # Processing the call keyword arguments
        kwargs_267597 = {}
        # Getting the type of 'call_assignment_263063' (line 1565)
        call_assignment_263063_267594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'call_assignment_263063', False)
        # Obtaining the member '__getitem__' of a type (line 1565)
        getitem___267595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 8), call_assignment_263063_267594, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_267598 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___267595, *[int_267596], **kwargs_267597)
        
        # Assigning a type to the variable 'call_assignment_263064' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'call_assignment_263064', getitem___call_result_267598)
        
        # Assigning a Name to a Name (line 1565):
        # Getting the type of 'call_assignment_263064' (line 1565)
        call_assignment_263064_267599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'call_assignment_263064')
        # Assigning a type to the variable 'filetypes' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'filetypes', call_assignment_263064_267599)
        
        # Assigning a Call to a Name (line 1565):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_267602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 8), 'int')
        # Processing the call keyword arguments
        kwargs_267603 = {}
        # Getting the type of 'call_assignment_263063' (line 1565)
        call_assignment_263063_267600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'call_assignment_263063', False)
        # Obtaining the member '__getitem__' of a type (line 1565)
        getitem___267601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 8), call_assignment_263063_267600, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_267604 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___267601, *[int_267602], **kwargs_267603)
        
        # Assigning a type to the variable 'call_assignment_263065' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'call_assignment_263065', getitem___call_result_267604)
        
        # Assigning a Name to a Name (line 1565):
        # Getting the type of 'call_assignment_263065' (line 1565)
        call_assignment_263065_267605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'call_assignment_263065')
        # Assigning a type to the variable 'exts' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 19), 'exts', call_assignment_263065_267605)
        
        # Assigning a Call to a Name (line 1565):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_267608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 8), 'int')
        # Processing the call keyword arguments
        kwargs_267609 = {}
        # Getting the type of 'call_assignment_263063' (line 1565)
        call_assignment_263063_267606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'call_assignment_263063', False)
        # Obtaining the member '__getitem__' of a type (line 1565)
        getitem___267607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 8), call_assignment_263063_267606, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_267610 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___267607, *[int_267608], **kwargs_267609)
        
        # Assigning a type to the variable 'call_assignment_263066' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'call_assignment_263066', getitem___call_result_267610)
        
        # Assigning a Name to a Name (line 1565):
        # Getting the type of 'call_assignment_263066' (line 1565)
        call_assignment_263066_267611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'call_assignment_263066')
        # Assigning a type to the variable 'filter_index' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 25), 'filter_index', call_assignment_263066_267611)
        
        # Assigning a Call to a Name (line 1566):
        
        # Assigning a Call to a Name (line 1566):
        
        # Call to get_default_filename(...): (line 1566)
        # Processing the call keyword arguments (line 1566)
        kwargs_267615 = {}
        # Getting the type of 'self' (line 1566)
        self_267612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 23), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1566)
        canvas_267613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 23), self_267612, 'canvas')
        # Obtaining the member 'get_default_filename' of a type (line 1566)
        get_default_filename_267614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 23), canvas_267613, 'get_default_filename')
        # Calling get_default_filename(args, kwargs) (line 1566)
        get_default_filename_call_result_267616 = invoke(stypy.reporting.localization.Localization(__file__, 1566, 23), get_default_filename_267614, *[], **kwargs_267615)
        
        # Assigning a type to the variable 'default_file' (line 1566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1566, 8), 'default_file', get_default_filename_call_result_267616)
        
        # Assigning a Call to a Name (line 1567):
        
        # Assigning a Call to a Name (line 1567):
        
        # Call to FileDialog(...): (line 1567)
        # Processing the call arguments (line 1567)
        # Getting the type of 'self' (line 1567)
        self_267619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 28), 'self', False)
        # Obtaining the member '_parent' of a type (line 1567)
        _parent_267620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 28), self_267619, '_parent')
        unicode_267621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1567, 42), 'unicode', u'Save to file')
        unicode_267622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1567, 58), 'unicode', u'')
        # Getting the type of 'default_file' (line 1567)
        default_file_267623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 62), 'default_file', False)
        # Getting the type of 'filetypes' (line 1568)
        filetypes_267624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 28), 'filetypes', False)
        # Getting the type of 'wx' (line 1569)
        wx_267625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 28), 'wx', False)
        # Obtaining the member 'FD_SAVE' of a type (line 1569)
        FD_SAVE_267626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1569, 28), wx_267625, 'FD_SAVE')
        # Getting the type of 'wx' (line 1569)
        wx_267627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 41), 'wx', False)
        # Obtaining the member 'FD_OVERWRITE_PROMPT' of a type (line 1569)
        FD_OVERWRITE_PROMPT_267628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1569, 41), wx_267627, 'FD_OVERWRITE_PROMPT')
        # Applying the binary operator '|' (line 1569)
        result_or__267629 = python_operator(stypy.reporting.localization.Localization(__file__, 1569, 28), '|', FD_SAVE_267626, FD_OVERWRITE_PROMPT_267628)
        
        # Processing the call keyword arguments (line 1567)
        kwargs_267630 = {}
        # Getting the type of 'wx' (line 1567)
        wx_267617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 14), 'wx', False)
        # Obtaining the member 'FileDialog' of a type (line 1567)
        FileDialog_267618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 14), wx_267617, 'FileDialog')
        # Calling FileDialog(args, kwargs) (line 1567)
        FileDialog_call_result_267631 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 14), FileDialog_267618, *[_parent_267620, unicode_267621, unicode_267622, default_file_267623, filetypes_267624, result_or__267629], **kwargs_267630)
        
        # Assigning a type to the variable 'dlg' (line 1567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1567, 8), 'dlg', FileDialog_call_result_267631)
        
        # Call to SetFilterIndex(...): (line 1570)
        # Processing the call arguments (line 1570)
        # Getting the type of 'filter_index' (line 1570)
        filter_index_267634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 27), 'filter_index', False)
        # Processing the call keyword arguments (line 1570)
        kwargs_267635 = {}
        # Getting the type of 'dlg' (line 1570)
        dlg_267632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 8), 'dlg', False)
        # Obtaining the member 'SetFilterIndex' of a type (line 1570)
        SetFilterIndex_267633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1570, 8), dlg_267632, 'SetFilterIndex')
        # Calling SetFilterIndex(args, kwargs) (line 1570)
        SetFilterIndex_call_result_267636 = invoke(stypy.reporting.localization.Localization(__file__, 1570, 8), SetFilterIndex_267633, *[filter_index_267634], **kwargs_267635)
        
        
        
        
        # Call to ShowModal(...): (line 1571)
        # Processing the call keyword arguments (line 1571)
        kwargs_267639 = {}
        # Getting the type of 'dlg' (line 1571)
        dlg_267637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 11), 'dlg', False)
        # Obtaining the member 'ShowModal' of a type (line 1571)
        ShowModal_267638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 11), dlg_267637, 'ShowModal')
        # Calling ShowModal(args, kwargs) (line 1571)
        ShowModal_call_result_267640 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 11), ShowModal_267638, *[], **kwargs_267639)
        
        # Getting the type of 'wx' (line 1571)
        wx_267641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 30), 'wx')
        # Obtaining the member 'ID_OK' of a type (line 1571)
        ID_OK_267642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 30), wx_267641, 'ID_OK')
        # Applying the binary operator '==' (line 1571)
        result_eq_267643 = python_operator(stypy.reporting.localization.Localization(__file__, 1571, 11), '==', ShowModal_call_result_267640, ID_OK_267642)
        
        # Testing the type of an if condition (line 1571)
        if_condition_267644 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1571, 8), result_eq_267643)
        # Assigning a type to the variable 'if_condition_267644' (line 1571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 8), 'if_condition_267644', if_condition_267644)
        # SSA begins for if statement (line 1571)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1572):
        
        # Assigning a Call to a Name (line 1572):
        
        # Call to GetDirectory(...): (line 1572)
        # Processing the call keyword arguments (line 1572)
        kwargs_267647 = {}
        # Getting the type of 'dlg' (line 1572)
        dlg_267645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 22), 'dlg', False)
        # Obtaining the member 'GetDirectory' of a type (line 1572)
        GetDirectory_267646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1572, 22), dlg_267645, 'GetDirectory')
        # Calling GetDirectory(args, kwargs) (line 1572)
        GetDirectory_call_result_267648 = invoke(stypy.reporting.localization.Localization(__file__, 1572, 22), GetDirectory_267646, *[], **kwargs_267647)
        
        # Assigning a type to the variable 'dirname' (line 1572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1572, 12), 'dirname', GetDirectory_call_result_267648)
        
        # Assigning a Call to a Name (line 1573):
        
        # Assigning a Call to a Name (line 1573):
        
        # Call to GetFilename(...): (line 1573)
        # Processing the call keyword arguments (line 1573)
        kwargs_267651 = {}
        # Getting the type of 'dlg' (line 1573)
        dlg_267649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 23), 'dlg', False)
        # Obtaining the member 'GetFilename' of a type (line 1573)
        GetFilename_267650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 23), dlg_267649, 'GetFilename')
        # Calling GetFilename(args, kwargs) (line 1573)
        GetFilename_call_result_267652 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 23), GetFilename_267650, *[], **kwargs_267651)
        
        # Assigning a type to the variable 'filename' (line 1573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 12), 'filename', GetFilename_call_result_267652)
        
        # Call to DEBUG_MSG(...): (line 1574)
        # Processing the call arguments (line 1574)
        unicode_267654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1575, 16), 'unicode', u'Save file dir:%s name:%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1576)
        tuple_267655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1576, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1576)
        # Adding element type (line 1576)
        # Getting the type of 'dirname' (line 1576)
        dirname_267656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 17), 'dirname', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1576, 17), tuple_267655, dirname_267656)
        # Adding element type (line 1576)
        # Getting the type of 'filename' (line 1576)
        filename_267657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 26), 'filename', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1576, 17), tuple_267655, filename_267657)
        
        # Applying the binary operator '%' (line 1575)
        result_mod_267658 = python_operator(stypy.reporting.localization.Localization(__file__, 1575, 16), '%', unicode_267654, tuple_267655)
        
        int_267659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1576, 37), 'int')
        # Getting the type of 'self' (line 1576)
        self_267660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 40), 'self', False)
        # Processing the call keyword arguments (line 1574)
        kwargs_267661 = {}
        # Getting the type of 'DEBUG_MSG' (line 1574)
        DEBUG_MSG_267653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 12), 'DEBUG_MSG', False)
        # Calling DEBUG_MSG(args, kwargs) (line 1574)
        DEBUG_MSG_call_result_267662 = invoke(stypy.reporting.localization.Localization(__file__, 1574, 12), DEBUG_MSG_267653, *[result_mod_267658, int_267659, self_267660], **kwargs_267661)
        
        
        # Assigning a Subscript to a Name (line 1577):
        
        # Assigning a Subscript to a Name (line 1577):
        
        # Obtaining the type of the subscript
        
        # Call to GetFilterIndex(...): (line 1577)
        # Processing the call keyword arguments (line 1577)
        kwargs_267665 = {}
        # Getting the type of 'dlg' (line 1577)
        dlg_267663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 26), 'dlg', False)
        # Obtaining the member 'GetFilterIndex' of a type (line 1577)
        GetFilterIndex_267664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 26), dlg_267663, 'GetFilterIndex')
        # Calling GetFilterIndex(args, kwargs) (line 1577)
        GetFilterIndex_call_result_267666 = invoke(stypy.reporting.localization.Localization(__file__, 1577, 26), GetFilterIndex_267664, *[], **kwargs_267665)
        
        # Getting the type of 'exts' (line 1577)
        exts_267667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 21), 'exts')
        # Obtaining the member '__getitem__' of a type (line 1577)
        getitem___267668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 21), exts_267667, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1577)
        subscript_call_result_267669 = invoke(stypy.reporting.localization.Localization(__file__, 1577, 21), getitem___267668, GetFilterIndex_call_result_267666)
        
        # Assigning a type to the variable 'format' (line 1577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 12), 'format', subscript_call_result_267669)
        
        # Assigning a Call to a Tuple (line 1578):
        
        # Assigning a Call to a Name:
        
        # Call to splitext(...): (line 1578)
        # Processing the call arguments (line 1578)
        # Getting the type of 'filename' (line 1578)
        filename_267673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 45), 'filename', False)
        # Processing the call keyword arguments (line 1578)
        kwargs_267674 = {}
        # Getting the type of 'os' (line 1578)
        os_267670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 28), 'os', False)
        # Obtaining the member 'path' of a type (line 1578)
        path_267671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1578, 28), os_267670, 'path')
        # Obtaining the member 'splitext' of a type (line 1578)
        splitext_267672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1578, 28), path_267671, 'splitext')
        # Calling splitext(args, kwargs) (line 1578)
        splitext_call_result_267675 = invoke(stypy.reporting.localization.Localization(__file__, 1578, 28), splitext_267672, *[filename_267673], **kwargs_267674)
        
        # Assigning a type to the variable 'call_assignment_263067' (line 1578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 12), 'call_assignment_263067', splitext_call_result_267675)
        
        # Assigning a Call to a Name (line 1578):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_267678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1578, 12), 'int')
        # Processing the call keyword arguments
        kwargs_267679 = {}
        # Getting the type of 'call_assignment_263067' (line 1578)
        call_assignment_263067_267676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 12), 'call_assignment_263067', False)
        # Obtaining the member '__getitem__' of a type (line 1578)
        getitem___267677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1578, 12), call_assignment_263067_267676, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_267680 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___267677, *[int_267678], **kwargs_267679)
        
        # Assigning a type to the variable 'call_assignment_263068' (line 1578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 12), 'call_assignment_263068', getitem___call_result_267680)
        
        # Assigning a Name to a Name (line 1578):
        # Getting the type of 'call_assignment_263068' (line 1578)
        call_assignment_263068_267681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 12), 'call_assignment_263068')
        # Assigning a type to the variable 'basename' (line 1578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 12), 'basename', call_assignment_263068_267681)
        
        # Assigning a Call to a Name (line 1578):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_267684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1578, 12), 'int')
        # Processing the call keyword arguments
        kwargs_267685 = {}
        # Getting the type of 'call_assignment_263067' (line 1578)
        call_assignment_263067_267682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 12), 'call_assignment_263067', False)
        # Obtaining the member '__getitem__' of a type (line 1578)
        getitem___267683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1578, 12), call_assignment_263067_267682, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_267686 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___267683, *[int_267684], **kwargs_267685)
        
        # Assigning a type to the variable 'call_assignment_263069' (line 1578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 12), 'call_assignment_263069', getitem___call_result_267686)
        
        # Assigning a Name to a Name (line 1578):
        # Getting the type of 'call_assignment_263069' (line 1578)
        call_assignment_263069_267687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 12), 'call_assignment_263069')
        # Assigning a type to the variable 'ext' (line 1578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 22), 'ext', call_assignment_263069_267687)
        
        
        # Call to startswith(...): (line 1579)
        # Processing the call arguments (line 1579)
        unicode_267690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1579, 30), 'unicode', u'.')
        # Processing the call keyword arguments (line 1579)
        kwargs_267691 = {}
        # Getting the type of 'ext' (line 1579)
        ext_267688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 15), 'ext', False)
        # Obtaining the member 'startswith' of a type (line 1579)
        startswith_267689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1579, 15), ext_267688, 'startswith')
        # Calling startswith(args, kwargs) (line 1579)
        startswith_call_result_267692 = invoke(stypy.reporting.localization.Localization(__file__, 1579, 15), startswith_267689, *[unicode_267690], **kwargs_267691)
        
        # Testing the type of an if condition (line 1579)
        if_condition_267693 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1579, 12), startswith_call_result_267692)
        # Assigning a type to the variable 'if_condition_267693' (line 1579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1579, 12), 'if_condition_267693', if_condition_267693)
        # SSA begins for if statement (line 1579)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1580):
        
        # Assigning a Subscript to a Name (line 1580):
        
        # Obtaining the type of the subscript
        int_267694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, 26), 'int')
        slice_267695 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1580, 22), int_267694, None, None)
        # Getting the type of 'ext' (line 1580)
        ext_267696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 22), 'ext')
        # Obtaining the member '__getitem__' of a type (line 1580)
        getitem___267697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1580, 22), ext_267696, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1580)
        subscript_call_result_267698 = invoke(stypy.reporting.localization.Localization(__file__, 1580, 22), getitem___267697, slice_267695)
        
        # Assigning a type to the variable 'ext' (line 1580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1580, 16), 'ext', subscript_call_result_267698)
        # SSA join for if statement (line 1579)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'ext' (line 1581)
        ext_267699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 15), 'ext')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1581)
        tuple_267700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1581)
        # Adding element type (line 1581)
        unicode_267701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 23), 'unicode', u'svg')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1581, 23), tuple_267700, unicode_267701)
        # Adding element type (line 1581)
        unicode_267702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 30), 'unicode', u'pdf')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1581, 23), tuple_267700, unicode_267702)
        # Adding element type (line 1581)
        unicode_267703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 37), 'unicode', u'ps')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1581, 23), tuple_267700, unicode_267703)
        # Adding element type (line 1581)
        unicode_267704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 43), 'unicode', u'eps')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1581, 23), tuple_267700, unicode_267704)
        # Adding element type (line 1581)
        unicode_267705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 50), 'unicode', u'png')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1581, 23), tuple_267700, unicode_267705)
        
        # Applying the binary operator 'in' (line 1581)
        result_contains_267706 = python_operator(stypy.reporting.localization.Localization(__file__, 1581, 15), 'in', ext_267699, tuple_267700)
        
        
        # Getting the type of 'format' (line 1581)
        format_267707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 61), 'format')
        # Getting the type of 'ext' (line 1581)
        ext_267708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 71), 'ext')
        # Applying the binary operator '!=' (line 1581)
        result_ne_267709 = python_operator(stypy.reporting.localization.Localization(__file__, 1581, 61), '!=', format_267707, ext_267708)
        
        # Applying the binary operator 'and' (line 1581)
        result_and_keyword_267710 = python_operator(stypy.reporting.localization.Localization(__file__, 1581, 15), 'and', result_contains_267706, result_ne_267709)
        
        # Testing the type of an if condition (line 1581)
        if_condition_267711 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1581, 12), result_and_keyword_267710)
        # Assigning a type to the variable 'if_condition_267711' (line 1581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 12), 'if_condition_267711', if_condition_267711)
        # SSA begins for if statement (line 1581)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1584)
        # Processing the call arguments (line 1584)
        unicode_267714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1585, 20), 'unicode', u'extension %s did not match the selected image type %s; going with %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1587)
        tuple_267715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1587, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1587)
        # Adding element type (line 1587)
        # Getting the type of 'ext' (line 1587)
        ext_267716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 21), 'ext', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1587, 21), tuple_267715, ext_267716)
        # Adding element type (line 1587)
        # Getting the type of 'format' (line 1587)
        format_267717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 26), 'format', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1587, 21), tuple_267715, format_267717)
        # Adding element type (line 1587)
        # Getting the type of 'ext' (line 1587)
        ext_267718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 34), 'ext', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1587, 21), tuple_267715, ext_267718)
        
        # Applying the binary operator '%' (line 1585)
        result_mod_267719 = python_operator(stypy.reporting.localization.Localization(__file__, 1585, 20), '%', unicode_267714, tuple_267715)
        
        # Processing the call keyword arguments (line 1584)
        int_267720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1587, 51), 'int')
        keyword_267721 = int_267720
        kwargs_267722 = {'stacklevel': keyword_267721}
        # Getting the type of 'warnings' (line 1584)
        warnings_267712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1584)
        warn_267713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1584, 16), warnings_267712, 'warn')
        # Calling warn(args, kwargs) (line 1584)
        warn_call_result_267723 = invoke(stypy.reporting.localization.Localization(__file__, 1584, 16), warn_267713, *[result_mod_267719], **kwargs_267722)
        
        
        # Assigning a Name to a Name (line 1588):
        
        # Assigning a Name to a Name (line 1588):
        # Getting the type of 'ext' (line 1588)
        ext_267724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 25), 'ext')
        # Assigning a type to the variable 'format' (line 1588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1588, 16), 'format', ext_267724)
        # SSA join for if statement (line 1581)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 1589)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to savefig(...): (line 1590)
        # Processing the call arguments (line 1590)
        
        # Call to join(...): (line 1591)
        # Processing the call arguments (line 1591)
        # Getting the type of 'dirname' (line 1591)
        dirname_267732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 33), 'dirname', False)
        # Getting the type of 'filename' (line 1591)
        filename_267733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 42), 'filename', False)
        # Processing the call keyword arguments (line 1591)
        kwargs_267734 = {}
        # Getting the type of 'os' (line 1591)
        os_267729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 20), 'os', False)
        # Obtaining the member 'path' of a type (line 1591)
        path_267730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1591, 20), os_267729, 'path')
        # Obtaining the member 'join' of a type (line 1591)
        join_267731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1591, 20), path_267730, 'join')
        # Calling join(args, kwargs) (line 1591)
        join_call_result_267735 = invoke(stypy.reporting.localization.Localization(__file__, 1591, 20), join_267731, *[dirname_267732, filename_267733], **kwargs_267734)
        
        # Processing the call keyword arguments (line 1590)
        # Getting the type of 'format' (line 1591)
        format_267736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 60), 'format', False)
        keyword_267737 = format_267736
        kwargs_267738 = {'format': keyword_267737}
        # Getting the type of 'self' (line 1590)
        self_267725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1590)
        canvas_267726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1590, 16), self_267725, 'canvas')
        # Obtaining the member 'figure' of a type (line 1590)
        figure_267727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1590, 16), canvas_267726, 'figure')
        # Obtaining the member 'savefig' of a type (line 1590)
        savefig_267728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1590, 16), figure_267727, 'savefig')
        # Calling savefig(args, kwargs) (line 1590)
        savefig_call_result_267739 = invoke(stypy.reporting.localization.Localization(__file__, 1590, 16), savefig_267728, *[join_call_result_267735], **kwargs_267738)
        
        # SSA branch for the except part of a try statement (line 1589)
        # SSA branch for the except 'Exception' branch of a try statement (line 1589)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'Exception' (line 1592)
        Exception_267740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 19), 'Exception')
        # Assigning a type to the variable 'e' (line 1592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1592, 12), 'e', Exception_267740)
        
        # Call to error_msg_wx(...): (line 1593)
        # Processing the call arguments (line 1593)
        
        # Call to str(...): (line 1593)
        # Processing the call arguments (line 1593)
        # Getting the type of 'e' (line 1593)
        e_267743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 33), 'e', False)
        # Processing the call keyword arguments (line 1593)
        kwargs_267744 = {}
        # Getting the type of 'str' (line 1593)
        str_267742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 29), 'str', False)
        # Calling str(args, kwargs) (line 1593)
        str_call_result_267745 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 29), str_267742, *[e_267743], **kwargs_267744)
        
        # Processing the call keyword arguments (line 1593)
        kwargs_267746 = {}
        # Getting the type of 'error_msg_wx' (line 1593)
        error_msg_wx_267741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'error_msg_wx', False)
        # Calling error_msg_wx(args, kwargs) (line 1593)
        error_msg_wx_call_result_267747 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 16), error_msg_wx_267741, *[str_call_result_267745], **kwargs_267746)
        
        # SSA join for try-except statement (line 1589)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1571)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'save_figure(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'save_figure' in the type store
        # Getting the type of 'stypy_return_type' (line 1563)
        stypy_return_type_267748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267748)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'save_figure'
        return stypy_return_type_267748


    @norecursion
    def set_cursor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_cursor'
        module_type_store = module_type_store.open_function_context('set_cursor', 1595, 4, False)
        # Assigning a type to the variable 'self' (line 1596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx.set_cursor.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx.set_cursor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx.set_cursor.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx.set_cursor.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx.set_cursor')
        NavigationToolbar2Wx.set_cursor.__dict__.__setitem__('stypy_param_names_list', ['cursor'])
        NavigationToolbar2Wx.set_cursor.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2Wx.set_cursor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx.set_cursor.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx.set_cursor.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx.set_cursor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx.set_cursor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.set_cursor', ['cursor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_cursor', localization, ['cursor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_cursor(...)' code ##################

        
        # Assigning a Call to a Name (line 1596):
        
        # Assigning a Call to a Name (line 1596):
        
        # Call to Cursor(...): (line 1596)
        # Processing the call arguments (line 1596)
        
        # Obtaining the type of the subscript
        # Getting the type of 'cursor' (line 1596)
        cursor_267751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 36), 'cursor', False)
        # Getting the type of 'cursord' (line 1596)
        cursord_267752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 28), 'cursord', False)
        # Obtaining the member '__getitem__' of a type (line 1596)
        getitem___267753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 28), cursord_267752, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1596)
        subscript_call_result_267754 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 28), getitem___267753, cursor_267751)
        
        # Processing the call keyword arguments (line 1596)
        kwargs_267755 = {}
        # Getting the type of 'wxc' (line 1596)
        wxc_267749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 17), 'wxc', False)
        # Obtaining the member 'Cursor' of a type (line 1596)
        Cursor_267750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 17), wxc_267749, 'Cursor')
        # Calling Cursor(args, kwargs) (line 1596)
        Cursor_call_result_267756 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 17), Cursor_267750, *[subscript_call_result_267754], **kwargs_267755)
        
        # Assigning a type to the variable 'cursor' (line 1596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 8), 'cursor', Cursor_call_result_267756)
        
        # Call to SetCursor(...): (line 1597)
        # Processing the call arguments (line 1597)
        # Getting the type of 'cursor' (line 1597)
        cursor_267760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 30), 'cursor', False)
        # Processing the call keyword arguments (line 1597)
        kwargs_267761 = {}
        # Getting the type of 'self' (line 1597)
        self_267757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1597)
        canvas_267758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1597, 8), self_267757, 'canvas')
        # Obtaining the member 'SetCursor' of a type (line 1597)
        SetCursor_267759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1597, 8), canvas_267758, 'SetCursor')
        # Calling SetCursor(args, kwargs) (line 1597)
        SetCursor_call_result_267762 = invoke(stypy.reporting.localization.Localization(__file__, 1597, 8), SetCursor_267759, *[cursor_267760], **kwargs_267761)
        
        
        # Call to Update(...): (line 1598)
        # Processing the call keyword arguments (line 1598)
        kwargs_267766 = {}
        # Getting the type of 'self' (line 1598)
        self_267763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1598)
        canvas_267764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1598, 8), self_267763, 'canvas')
        # Obtaining the member 'Update' of a type (line 1598)
        Update_267765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1598, 8), canvas_267764, 'Update')
        # Calling Update(args, kwargs) (line 1598)
        Update_call_result_267767 = invoke(stypy.reporting.localization.Localization(__file__, 1598, 8), Update_267765, *[], **kwargs_267766)
        
        
        # ################# End of 'set_cursor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_cursor' in the type store
        # Getting the type of 'stypy_return_type' (line 1595)
        stypy_return_type_267768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267768)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_cursor'
        return stypy_return_type_267768


    @norecursion
    def release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'release'
        module_type_store = module_type_store.open_function_context('release', 1600, 4, False)
        # Assigning a type to the variable 'self' (line 1601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx.release')
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'release(...)' code ##################

        
        
        # SSA begins for try-except statement (line 1601)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        # Deleting a member
        # Getting the type of 'self' (line 1602)
        self_267769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 12), 'self')
        module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 1602, 12), self_267769, 'lastrect')
        # SSA branch for the except part of a try statement (line 1601)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 1601)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1601)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'release' in the type store
        # Getting the type of 'stypy_return_type' (line 1600)
        stypy_return_type_267770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267770)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'release'
        return stypy_return_type_267770


    @norecursion
    def dynamic_update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'dynamic_update'
        module_type_store = module_type_store.open_function_context('dynamic_update', 1606, 4, False)
        # Assigning a type to the variable 'self' (line 1607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1607, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx.dynamic_update.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx.dynamic_update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx.dynamic_update.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx.dynamic_update.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx.dynamic_update')
        NavigationToolbar2Wx.dynamic_update.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2Wx.dynamic_update.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2Wx.dynamic_update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx.dynamic_update.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx.dynamic_update.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx.dynamic_update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx.dynamic_update.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.dynamic_update', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'dynamic_update', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'dynamic_update(...)' code ##################

        
        # Assigning a Attribute to a Name (line 1608):
        
        # Assigning a Attribute to a Name (line 1608):
        # Getting the type of 'self' (line 1608)
        self_267771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 12), 'self')
        # Obtaining the member '_idle' of a type (line 1608)
        _idle_267772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1608, 12), self_267771, '_idle')
        # Assigning a type to the variable 'd' (line 1608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1608, 8), 'd', _idle_267772)
        
        # Assigning a Name to a Attribute (line 1609):
        
        # Assigning a Name to a Attribute (line 1609):
        # Getting the type of 'False' (line 1609)
        False_267773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 21), 'False')
        # Getting the type of 'self' (line 1609)
        self_267774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 8), 'self')
        # Setting the type of the member '_idle' of a type (line 1609)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1609, 8), self_267774, '_idle', False_267773)
        
        # Getting the type of 'd' (line 1610)
        d_267775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 11), 'd')
        # Testing the type of an if condition (line 1610)
        if_condition_267776 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1610, 8), d_267775)
        # Assigning a type to the variable 'if_condition_267776' (line 1610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1610, 8), 'if_condition_267776', if_condition_267776)
        # SSA begins for if statement (line 1610)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 1611)
        # Processing the call keyword arguments (line 1611)
        kwargs_267780 = {}
        # Getting the type of 'self' (line 1611)
        self_267777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1611)
        canvas_267778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1611, 12), self_267777, 'canvas')
        # Obtaining the member 'draw' of a type (line 1611)
        draw_267779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1611, 12), canvas_267778, 'draw')
        # Calling draw(args, kwargs) (line 1611)
        draw_call_result_267781 = invoke(stypy.reporting.localization.Localization(__file__, 1611, 12), draw_267779, *[], **kwargs_267780)
        
        
        # Assigning a Name to a Attribute (line 1612):
        
        # Assigning a Name to a Attribute (line 1612):
        # Getting the type of 'True' (line 1612)
        True_267782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 25), 'True')
        # Getting the type of 'self' (line 1612)
        self_267783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 12), 'self')
        # Setting the type of the member '_idle' of a type (line 1612)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1612, 12), self_267783, '_idle', True_267782)
        # SSA join for if statement (line 1610)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'dynamic_update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'dynamic_update' in the type store
        # Getting the type of 'stypy_return_type' (line 1606)
        stypy_return_type_267784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267784)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'dynamic_update'
        return stypy_return_type_267784


    @norecursion
    def press(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'press'
        module_type_store = module_type_store.open_function_context('press', 1614, 4, False)
        # Assigning a type to the variable 'self' (line 1615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx.press.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx.press.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx.press.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx.press.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx.press')
        NavigationToolbar2Wx.press.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2Wx.press.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2Wx.press.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx.press.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx.press.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx.press.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx.press.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.press', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'press', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'press(...)' code ##################

        
        
        # Getting the type of 'self' (line 1615)
        self_267785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 11), 'self')
        # Obtaining the member '_active' of a type (line 1615)
        _active_267786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1615, 11), self_267785, '_active')
        unicode_267787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1615, 27), 'unicode', u'ZOOM')
        # Applying the binary operator '==' (line 1615)
        result_eq_267788 = python_operator(stypy.reporting.localization.Localization(__file__, 1615, 11), '==', _active_267786, unicode_267787)
        
        # Testing the type of an if condition (line 1615)
        if_condition_267789 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1615, 8), result_eq_267788)
        # Assigning a type to the variable 'if_condition_267789' (line 1615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 8), 'if_condition_267789', if_condition_267789)
        # SSA begins for if statement (line 1615)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 1616)
        self_267790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 19), 'self')
        # Obtaining the member 'retinaFix' of a type (line 1616)
        retinaFix_267791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1616, 19), self_267790, 'retinaFix')
        # Applying the 'not' unary operator (line 1616)
        result_not__267792 = python_operator(stypy.reporting.localization.Localization(__file__, 1616, 15), 'not', retinaFix_267791)
        
        # Testing the type of an if condition (line 1616)
        if_condition_267793 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1616, 12), result_not__267792)
        # Assigning a type to the variable 'if_condition_267793' (line 1616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1616, 12), 'if_condition_267793', if_condition_267793)
        # SSA begins for if statement (line 1616)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1617):
        
        # Assigning a Call to a Attribute (line 1617):
        
        # Call to Overlay(...): (line 1617)
        # Processing the call keyword arguments (line 1617)
        kwargs_267796 = {}
        # Getting the type of 'wx' (line 1617)
        wx_267794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 33), 'wx', False)
        # Obtaining the member 'Overlay' of a type (line 1617)
        Overlay_267795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1617, 33), wx_267794, 'Overlay')
        # Calling Overlay(args, kwargs) (line 1617)
        Overlay_call_result_267797 = invoke(stypy.reporting.localization.Localization(__file__, 1617, 33), Overlay_267795, *[], **kwargs_267796)
        
        # Getting the type of 'self' (line 1617)
        self_267798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 16), 'self')
        # Setting the type of the member 'wxoverlay' of a type (line 1617)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1617, 16), self_267798, 'wxoverlay', Overlay_call_result_267797)
        # SSA branch for the else part of an if statement (line 1616)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'event' (line 1619)
        event_267799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 19), 'event')
        # Obtaining the member 'inaxes' of a type (line 1619)
        inaxes_267800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1619, 19), event_267799, 'inaxes')
        # Getting the type of 'None' (line 1619)
        None_267801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 39), 'None')
        # Applying the binary operator 'isnot' (line 1619)
        result_is_not_267802 = python_operator(stypy.reporting.localization.Localization(__file__, 1619, 19), 'isnot', inaxes_267800, None_267801)
        
        # Testing the type of an if condition (line 1619)
        if_condition_267803 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1619, 16), result_is_not_267802)
        # Assigning a type to the variable 'if_condition_267803' (line 1619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1619, 16), 'if_condition_267803', if_condition_267803)
        # SSA begins for if statement (line 1619)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1620):
        
        # Assigning a Call to a Attribute (line 1620):
        
        # Call to copy_from_bbox(...): (line 1620)
        # Processing the call arguments (line 1620)
        # Getting the type of 'event' (line 1621)
        event_267807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 24), 'event', False)
        # Obtaining the member 'inaxes' of a type (line 1621)
        inaxes_267808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1621, 24), event_267807, 'inaxes')
        # Obtaining the member 'bbox' of a type (line 1621)
        bbox_267809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1621, 24), inaxes_267808, 'bbox')
        # Processing the call keyword arguments (line 1620)
        kwargs_267810 = {}
        # Getting the type of 'self' (line 1620)
        self_267804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 44), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1620)
        canvas_267805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1620, 44), self_267804, 'canvas')
        # Obtaining the member 'copy_from_bbox' of a type (line 1620)
        copy_from_bbox_267806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1620, 44), canvas_267805, 'copy_from_bbox')
        # Calling copy_from_bbox(args, kwargs) (line 1620)
        copy_from_bbox_call_result_267811 = invoke(stypy.reporting.localization.Localization(__file__, 1620, 44), copy_from_bbox_267806, *[bbox_267809], **kwargs_267810)
        
        # Getting the type of 'self' (line 1620)
        self_267812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 20), 'self')
        # Setting the type of the member 'savedRetinaImage' of a type (line 1620)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1620, 20), self_267812, 'savedRetinaImage', copy_from_bbox_call_result_267811)
        
        # Assigning a Attribute to a Attribute (line 1622):
        
        # Assigning a Attribute to a Attribute (line 1622):
        # Getting the type of 'event' (line 1622)
        event_267813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 38), 'event')
        # Obtaining the member 'xdata' of a type (line 1622)
        xdata_267814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 38), event_267813, 'xdata')
        # Getting the type of 'self' (line 1622)
        self_267815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 20), 'self')
        # Setting the type of the member 'zoomStartX' of a type (line 1622)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 20), self_267815, 'zoomStartX', xdata_267814)
        
        # Assigning a Attribute to a Attribute (line 1623):
        
        # Assigning a Attribute to a Attribute (line 1623):
        # Getting the type of 'event' (line 1623)
        event_267816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 38), 'event')
        # Obtaining the member 'ydata' of a type (line 1623)
        ydata_267817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1623, 38), event_267816, 'ydata')
        # Getting the type of 'self' (line 1623)
        self_267818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 20), 'self')
        # Setting the type of the member 'zoomStartY' of a type (line 1623)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1623, 20), self_267818, 'zoomStartY', ydata_267817)
        
        # Assigning a Attribute to a Attribute (line 1624):
        
        # Assigning a Attribute to a Attribute (line 1624):
        # Getting the type of 'event' (line 1624)
        event_267819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1624, 36), 'event')
        # Obtaining the member 'inaxes' of a type (line 1624)
        inaxes_267820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1624, 36), event_267819, 'inaxes')
        # Getting the type of 'self' (line 1624)
        self_267821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1624, 20), 'self')
        # Setting the type of the member 'zoomAxes' of a type (line 1624)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1624, 20), self_267821, 'zoomAxes', inaxes_267820)
        # SSA join for if statement (line 1619)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1616)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1615)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'press(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'press' in the type store
        # Getting the type of 'stypy_return_type' (line 1614)
        stypy_return_type_267822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267822)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'press'
        return stypy_return_type_267822


    @norecursion
    def release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'release'
        module_type_store = module_type_store.open_function_context('release', 1626, 4, False)
        # Assigning a type to the variable 'self' (line 1627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1627, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx.release')
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx.release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'release(...)' code ##################

        
        
        # Getting the type of 'self' (line 1627)
        self_267823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 11), 'self')
        # Obtaining the member '_active' of a type (line 1627)
        _active_267824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1627, 11), self_267823, '_active')
        unicode_267825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1627, 27), 'unicode', u'ZOOM')
        # Applying the binary operator '==' (line 1627)
        result_eq_267826 = python_operator(stypy.reporting.localization.Localization(__file__, 1627, 11), '==', _active_267824, unicode_267825)
        
        # Testing the type of an if condition (line 1627)
        if_condition_267827 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1627, 8), result_eq_267826)
        # Assigning a type to the variable 'if_condition_267827' (line 1627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1627, 8), 'if_condition_267827', if_condition_267827)
        # SSA begins for if statement (line 1627)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 1630)
        self_267828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 19), 'self')
        # Obtaining the member 'retinaFix' of a type (line 1630)
        retinaFix_267829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1630, 19), self_267828, 'retinaFix')
        # Applying the 'not' unary operator (line 1630)
        result_not__267830 = python_operator(stypy.reporting.localization.Localization(__file__, 1630, 15), 'not', retinaFix_267829)
        
        # Testing the type of an if condition (line 1630)
        if_condition_267831 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1630, 12), result_not__267830)
        # Assigning a type to the variable 'if_condition_267831' (line 1630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1630, 12), 'if_condition_267831', if_condition_267831)
        # SSA begins for if statement (line 1630)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to Reset(...): (line 1631)
        # Processing the call keyword arguments (line 1631)
        kwargs_267835 = {}
        # Getting the type of 'self' (line 1631)
        self_267832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 16), 'self', False)
        # Obtaining the member 'wxoverlay' of a type (line 1631)
        wxoverlay_267833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1631, 16), self_267832, 'wxoverlay')
        # Obtaining the member 'Reset' of a type (line 1631)
        Reset_267834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1631, 16), wxoverlay_267833, 'Reset')
        # Calling Reset(args, kwargs) (line 1631)
        Reset_call_result_267836 = invoke(stypy.reporting.localization.Localization(__file__, 1631, 16), Reset_267834, *[], **kwargs_267835)
        
        # Deleting a member
        # Getting the type of 'self' (line 1632)
        self_267837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 16), 'self')
        module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 1632, 16), self_267837, 'wxoverlay')
        # SSA branch for the else part of an if statement (line 1630)
        module_type_store.open_ssa_branch('else')
        # Deleting a member
        # Getting the type of 'self' (line 1634)
        self_267838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 16), 'self')
        module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 1634, 16), self_267838, 'savedRetinaImage')
        
        # Getting the type of 'self' (line 1635)
        self_267839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 19), 'self')
        # Obtaining the member 'prevZoomRect' of a type (line 1635)
        prevZoomRect_267840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1635, 19), self_267839, 'prevZoomRect')
        # Testing the type of an if condition (line 1635)
        if_condition_267841 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1635, 16), prevZoomRect_267840)
        # Assigning a type to the variable 'if_condition_267841' (line 1635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1635, 16), 'if_condition_267841', if_condition_267841)
        # SSA begins for if statement (line 1635)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to remove(...): (line 1636)
        # Processing the call keyword arguments (line 1636)
        kwargs_267849 = {}
        
        # Call to pop(...): (line 1636)
        # Processing the call arguments (line 1636)
        int_267845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1636, 42), 'int')
        # Processing the call keyword arguments (line 1636)
        kwargs_267846 = {}
        # Getting the type of 'self' (line 1636)
        self_267842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 20), 'self', False)
        # Obtaining the member 'prevZoomRect' of a type (line 1636)
        prevZoomRect_267843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1636, 20), self_267842, 'prevZoomRect')
        # Obtaining the member 'pop' of a type (line 1636)
        pop_267844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1636, 20), prevZoomRect_267843, 'pop')
        # Calling pop(args, kwargs) (line 1636)
        pop_call_result_267847 = invoke(stypy.reporting.localization.Localization(__file__, 1636, 20), pop_267844, *[int_267845], **kwargs_267846)
        
        # Obtaining the member 'remove' of a type (line 1636)
        remove_267848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1636, 20), pop_call_result_267847, 'remove')
        # Calling remove(args, kwargs) (line 1636)
        remove_call_result_267850 = invoke(stypy.reporting.localization.Localization(__file__, 1636, 20), remove_267848, *[], **kwargs_267849)
        
        
        # Assigning a Name to a Attribute (line 1637):
        
        # Assigning a Name to a Attribute (line 1637):
        # Getting the type of 'None' (line 1637)
        None_267851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 40), 'None')
        # Getting the type of 'self' (line 1637)
        self_267852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 20), 'self')
        # Setting the type of the member 'prevZoomRect' of a type (line 1637)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1637, 20), self_267852, 'prevZoomRect', None_267851)
        # SSA join for if statement (line 1635)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1638)
        self_267853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 19), 'self')
        # Obtaining the member 'zoomAxes' of a type (line 1638)
        zoomAxes_267854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 19), self_267853, 'zoomAxes')
        # Testing the type of an if condition (line 1638)
        if_condition_267855 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1638, 16), zoomAxes_267854)
        # Assigning a type to the variable 'if_condition_267855' (line 1638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1638, 16), 'if_condition_267855', if_condition_267855)
        # SSA begins for if statement (line 1638)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1639):
        
        # Assigning a Name to a Attribute (line 1639):
        # Getting the type of 'None' (line 1639)
        None_267856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 36), 'None')
        # Getting the type of 'self' (line 1639)
        self_267857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 20), 'self')
        # Setting the type of the member 'zoomAxes' of a type (line 1639)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1639, 20), self_267857, 'zoomAxes', None_267856)
        # SSA join for if statement (line 1638)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1630)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1627)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'release' in the type store
        # Getting the type of 'stypy_return_type' (line 1626)
        stypy_return_type_267858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267858)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'release'
        return stypy_return_type_267858


    @norecursion
    def draw_rubberband(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_rubberband'
        module_type_store = module_type_store.open_function_context('draw_rubberband', 1641, 4, False)
        # Assigning a type to the variable 'self' (line 1642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1642, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx.draw_rubberband.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx.draw_rubberband.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx.draw_rubberband.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx.draw_rubberband.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx.draw_rubberband')
        NavigationToolbar2Wx.draw_rubberband.__dict__.__setitem__('stypy_param_names_list', ['event', 'x0', 'y0', 'x1', 'y1'])
        NavigationToolbar2Wx.draw_rubberband.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2Wx.draw_rubberband.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx.draw_rubberband.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx.draw_rubberband.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx.draw_rubberband.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx.draw_rubberband.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.draw_rubberband', ['event', 'x0', 'y0', 'x1', 'y1'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_rubberband', localization, ['event', 'x0', 'y0', 'x1', 'y1'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_rubberband(...)' code ##################

        
        # Getting the type of 'self' (line 1642)
        self_267859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 11), 'self')
        # Obtaining the member 'retinaFix' of a type (line 1642)
        retinaFix_267860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1642, 11), self_267859, 'retinaFix')
        # Testing the type of an if condition (line 1642)
        if_condition_267861 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1642, 8), retinaFix_267860)
        # Assigning a type to the variable 'if_condition_267861' (line 1642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1642, 8), 'if_condition_267861', if_condition_267861)
        # SSA begins for if statement (line 1642)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1644):
        
        # Assigning a Str to a Name (line 1644):
        unicode_267862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1644, 30), 'unicode', u'#C0C0FF')
        # Assigning a type to the variable 'rubberBandColor' (line 1644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1644, 12), 'rubberBandColor', unicode_267862)
        
        # Getting the type of 'self' (line 1645)
        self_267863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 15), 'self')
        # Obtaining the member 'prevZoomRect' of a type (line 1645)
        prevZoomRect_267864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1645, 15), self_267863, 'prevZoomRect')
        # Testing the type of an if condition (line 1645)
        if_condition_267865 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1645, 12), prevZoomRect_267864)
        # Assigning a type to the variable 'if_condition_267865' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 12), 'if_condition_267865', if_condition_267865)
        # SSA begins for if statement (line 1645)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to remove(...): (line 1646)
        # Processing the call keyword arguments (line 1646)
        kwargs_267873 = {}
        
        # Call to pop(...): (line 1646)
        # Processing the call arguments (line 1646)
        int_267869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 38), 'int')
        # Processing the call keyword arguments (line 1646)
        kwargs_267870 = {}
        # Getting the type of 'self' (line 1646)
        self_267866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 16), 'self', False)
        # Obtaining the member 'prevZoomRect' of a type (line 1646)
        prevZoomRect_267867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1646, 16), self_267866, 'prevZoomRect')
        # Obtaining the member 'pop' of a type (line 1646)
        pop_267868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1646, 16), prevZoomRect_267867, 'pop')
        # Calling pop(args, kwargs) (line 1646)
        pop_call_result_267871 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 16), pop_267868, *[int_267869], **kwargs_267870)
        
        # Obtaining the member 'remove' of a type (line 1646)
        remove_267872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1646, 16), pop_call_result_267871, 'remove')
        # Calling remove(args, kwargs) (line 1646)
        remove_call_result_267874 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 16), remove_267872, *[], **kwargs_267873)
        
        # SSA join for if statement (line 1645)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to restore_region(...): (line 1647)
        # Processing the call arguments (line 1647)
        # Getting the type of 'self' (line 1647)
        self_267878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 39), 'self', False)
        # Obtaining the member 'savedRetinaImage' of a type (line 1647)
        savedRetinaImage_267879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1647, 39), self_267878, 'savedRetinaImage')
        # Processing the call keyword arguments (line 1647)
        kwargs_267880 = {}
        # Getting the type of 'self' (line 1647)
        self_267875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1647)
        canvas_267876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1647, 12), self_267875, 'canvas')
        # Obtaining the member 'restore_region' of a type (line 1647)
        restore_region_267877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1647, 12), canvas_267876, 'restore_region')
        # Calling restore_region(args, kwargs) (line 1647)
        restore_region_call_result_267881 = invoke(stypy.reporting.localization.Localization(__file__, 1647, 12), restore_region_267877, *[savedRetinaImage_267879], **kwargs_267880)
        
        
        # Assigning a Tuple to a Tuple (line 1648):
        
        # Assigning a Attribute to a Name (line 1648):
        # Getting the type of 'self' (line 1648)
        self_267882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 21), 'self')
        # Obtaining the member 'zoomStartX' of a type (line 1648)
        zoomStartX_267883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 21), self_267882, 'zoomStartX')
        # Assigning a type to the variable 'tuple_assignment_263070' (line 1648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 12), 'tuple_assignment_263070', zoomStartX_267883)
        
        # Assigning a Attribute to a Name (line 1648):
        # Getting the type of 'event' (line 1648)
        event_267884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 38), 'event')
        # Obtaining the member 'xdata' of a type (line 1648)
        xdata_267885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 38), event_267884, 'xdata')
        # Assigning a type to the variable 'tuple_assignment_263071' (line 1648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 12), 'tuple_assignment_263071', xdata_267885)
        
        # Assigning a Name to a Name (line 1648):
        # Getting the type of 'tuple_assignment_263070' (line 1648)
        tuple_assignment_263070_267886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 12), 'tuple_assignment_263070')
        # Assigning a type to the variable 'X0' (line 1648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 12), 'X0', tuple_assignment_263070_267886)
        
        # Assigning a Name to a Name (line 1648):
        # Getting the type of 'tuple_assignment_263071' (line 1648)
        tuple_assignment_263071_267887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 12), 'tuple_assignment_263071')
        # Assigning a type to the variable 'X1' (line 1648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 16), 'X1', tuple_assignment_263071_267887)
        
        # Assigning a Tuple to a Tuple (line 1649):
        
        # Assigning a Attribute to a Name (line 1649):
        # Getting the type of 'self' (line 1649)
        self_267888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 21), 'self')
        # Obtaining the member 'zoomStartY' of a type (line 1649)
        zoomStartY_267889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 21), self_267888, 'zoomStartY')
        # Assigning a type to the variable 'tuple_assignment_263072' (line 1649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1649, 12), 'tuple_assignment_263072', zoomStartY_267889)
        
        # Assigning a Attribute to a Name (line 1649):
        # Getting the type of 'event' (line 1649)
        event_267890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 38), 'event')
        # Obtaining the member 'ydata' of a type (line 1649)
        ydata_267891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 38), event_267890, 'ydata')
        # Assigning a type to the variable 'tuple_assignment_263073' (line 1649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1649, 12), 'tuple_assignment_263073', ydata_267891)
        
        # Assigning a Name to a Name (line 1649):
        # Getting the type of 'tuple_assignment_263072' (line 1649)
        tuple_assignment_263072_267892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 12), 'tuple_assignment_263072')
        # Assigning a type to the variable 'Y0' (line 1649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1649, 12), 'Y0', tuple_assignment_263072_267892)
        
        # Assigning a Name to a Name (line 1649):
        # Getting the type of 'tuple_assignment_263073' (line 1649)
        tuple_assignment_263073_267893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 12), 'tuple_assignment_263073')
        # Assigning a type to the variable 'Y1' (line 1649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1649, 16), 'Y1', tuple_assignment_263073_267893)
        
        # Assigning a Tuple to a Name (line 1650):
        
        # Assigning a Tuple to a Name (line 1650):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1650)
        tuple_267894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1650, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1650)
        # Adding element type (line 1650)
        # Getting the type of 'X0' (line 1650)
        X0_267895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 21), 'X0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1650, 21), tuple_267894, X0_267895)
        # Adding element type (line 1650)
        # Getting the type of 'X0' (line 1650)
        X0_267896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 25), 'X0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1650, 21), tuple_267894, X0_267896)
        # Adding element type (line 1650)
        # Getting the type of 'X1' (line 1650)
        X1_267897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 29), 'X1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1650, 21), tuple_267894, X1_267897)
        # Adding element type (line 1650)
        # Getting the type of 'X1' (line 1650)
        X1_267898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 33), 'X1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1650, 21), tuple_267894, X1_267898)
        # Adding element type (line 1650)
        # Getting the type of 'X0' (line 1650)
        X0_267899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 37), 'X0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1650, 21), tuple_267894, X0_267899)
        
        # Assigning a type to the variable 'lineX' (line 1650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1650, 12), 'lineX', tuple_267894)
        
        # Assigning a Tuple to a Name (line 1651):
        
        # Assigning a Tuple to a Name (line 1651):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1651)
        tuple_267900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1651, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1651)
        # Adding element type (line 1651)
        # Getting the type of 'Y0' (line 1651)
        Y0_267901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 21), 'Y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1651, 21), tuple_267900, Y0_267901)
        # Adding element type (line 1651)
        # Getting the type of 'Y1' (line 1651)
        Y1_267902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 25), 'Y1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1651, 21), tuple_267900, Y1_267902)
        # Adding element type (line 1651)
        # Getting the type of 'Y1' (line 1651)
        Y1_267903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 29), 'Y1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1651, 21), tuple_267900, Y1_267903)
        # Adding element type (line 1651)
        # Getting the type of 'Y0' (line 1651)
        Y0_267904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 33), 'Y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1651, 21), tuple_267900, Y0_267904)
        # Adding element type (line 1651)
        # Getting the type of 'Y0' (line 1651)
        Y0_267905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 37), 'Y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1651, 21), tuple_267900, Y0_267905)
        
        # Assigning a type to the variable 'lineY' (line 1651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 12), 'lineY', tuple_267900)
        
        # Assigning a Call to a Attribute (line 1652):
        
        # Assigning a Call to a Attribute (line 1652):
        
        # Call to plot(...): (line 1652)
        # Processing the call arguments (line 1652)
        # Getting the type of 'lineX' (line 1653)
        lineX_267909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 16), 'lineX', False)
        # Getting the type of 'lineY' (line 1653)
        lineY_267910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 23), 'lineY', False)
        unicode_267911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1653, 30), 'unicode', u'-')
        # Processing the call keyword arguments (line 1652)
        # Getting the type of 'rubberBandColor' (line 1653)
        rubberBandColor_267912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 41), 'rubberBandColor', False)
        keyword_267913 = rubberBandColor_267912
        kwargs_267914 = {'color': keyword_267913}
        # Getting the type of 'self' (line 1652)
        self_267906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 32), 'self', False)
        # Obtaining the member 'zoomAxes' of a type (line 1652)
        zoomAxes_267907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 32), self_267906, 'zoomAxes')
        # Obtaining the member 'plot' of a type (line 1652)
        plot_267908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 32), zoomAxes_267907, 'plot')
        # Calling plot(args, kwargs) (line 1652)
        plot_call_result_267915 = invoke(stypy.reporting.localization.Localization(__file__, 1652, 32), plot_267908, *[lineX_267909, lineY_267910, unicode_267911], **kwargs_267914)
        
        # Getting the type of 'self' (line 1652)
        self_267916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 12), 'self')
        # Setting the type of the member 'prevZoomRect' of a type (line 1652)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 12), self_267916, 'prevZoomRect', plot_call_result_267915)
        
        # Call to draw_artist(...): (line 1654)
        # Processing the call arguments (line 1654)
        
        # Obtaining the type of the subscript
        int_267920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1654, 56), 'int')
        # Getting the type of 'self' (line 1654)
        self_267921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 38), 'self', False)
        # Obtaining the member 'prevZoomRect' of a type (line 1654)
        prevZoomRect_267922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 38), self_267921, 'prevZoomRect')
        # Obtaining the member '__getitem__' of a type (line 1654)
        getitem___267923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 38), prevZoomRect_267922, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1654)
        subscript_call_result_267924 = invoke(stypy.reporting.localization.Localization(__file__, 1654, 38), getitem___267923, int_267920)
        
        # Processing the call keyword arguments (line 1654)
        kwargs_267925 = {}
        # Getting the type of 'self' (line 1654)
        self_267917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 12), 'self', False)
        # Obtaining the member 'zoomAxes' of a type (line 1654)
        zoomAxes_267918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 12), self_267917, 'zoomAxes')
        # Obtaining the member 'draw_artist' of a type (line 1654)
        draw_artist_267919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 12), zoomAxes_267918, 'draw_artist')
        # Calling draw_artist(args, kwargs) (line 1654)
        draw_artist_call_result_267926 = invoke(stypy.reporting.localization.Localization(__file__, 1654, 12), draw_artist_267919, *[subscript_call_result_267924], **kwargs_267925)
        
        
        # Call to blit(...): (line 1655)
        # Processing the call arguments (line 1655)
        # Getting the type of 'self' (line 1655)
        self_267930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 29), 'self', False)
        # Obtaining the member 'zoomAxes' of a type (line 1655)
        zoomAxes_267931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 29), self_267930, 'zoomAxes')
        # Obtaining the member 'bbox' of a type (line 1655)
        bbox_267932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 29), zoomAxes_267931, 'bbox')
        # Processing the call keyword arguments (line 1655)
        kwargs_267933 = {}
        # Getting the type of 'self' (line 1655)
        self_267927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1655)
        canvas_267928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 12), self_267927, 'canvas')
        # Obtaining the member 'blit' of a type (line 1655)
        blit_267929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 12), canvas_267928, 'blit')
        # Calling blit(args, kwargs) (line 1655)
        blit_call_result_267934 = invoke(stypy.reporting.localization.Localization(__file__, 1655, 12), blit_267929, *[bbox_267932], **kwargs_267933)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1642)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1660):
        
        # Assigning a Call to a Name (line 1660):
        
        # Call to ClientDC(...): (line 1660)
        # Processing the call arguments (line 1660)
        # Getting the type of 'self' (line 1660)
        self_267937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 25), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1660)
        canvas_267938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1660, 25), self_267937, 'canvas')
        # Processing the call keyword arguments (line 1660)
        kwargs_267939 = {}
        # Getting the type of 'wx' (line 1660)
        wx_267935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 13), 'wx', False)
        # Obtaining the member 'ClientDC' of a type (line 1660)
        ClientDC_267936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1660, 13), wx_267935, 'ClientDC')
        # Calling ClientDC(args, kwargs) (line 1660)
        ClientDC_call_result_267940 = invoke(stypy.reporting.localization.Localization(__file__, 1660, 13), ClientDC_267936, *[canvas_267938], **kwargs_267939)
        
        # Assigning a type to the variable 'dc' (line 1660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1660, 8), 'dc', ClientDC_call_result_267940)
        
        # Assigning a Call to a Name (line 1661):
        
        # Assigning a Call to a Name (line 1661):
        
        # Call to DCOverlay(...): (line 1661)
        # Processing the call arguments (line 1661)
        # Getting the type of 'self' (line 1661)
        self_267943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 27), 'self', False)
        # Obtaining the member 'wxoverlay' of a type (line 1661)
        wxoverlay_267944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1661, 27), self_267943, 'wxoverlay')
        # Getting the type of 'dc' (line 1661)
        dc_267945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 43), 'dc', False)
        # Processing the call keyword arguments (line 1661)
        kwargs_267946 = {}
        # Getting the type of 'wx' (line 1661)
        wx_267941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 14), 'wx', False)
        # Obtaining the member 'DCOverlay' of a type (line 1661)
        DCOverlay_267942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1661, 14), wx_267941, 'DCOverlay')
        # Calling DCOverlay(args, kwargs) (line 1661)
        DCOverlay_call_result_267947 = invoke(stypy.reporting.localization.Localization(__file__, 1661, 14), DCOverlay_267942, *[wxoverlay_267944, dc_267945], **kwargs_267946)
        
        # Assigning a type to the variable 'odc' (line 1661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1661, 8), 'odc', DCOverlay_call_result_267947)
        
        # Call to Clear(...): (line 1662)
        # Processing the call keyword arguments (line 1662)
        kwargs_267950 = {}
        # Getting the type of 'odc' (line 1662)
        odc_267948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 8), 'odc', False)
        # Obtaining the member 'Clear' of a type (line 1662)
        Clear_267949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1662, 8), odc_267948, 'Clear')
        # Calling Clear(args, kwargs) (line 1662)
        Clear_call_result_267951 = invoke(stypy.reporting.localization.Localization(__file__, 1662, 8), Clear_267949, *[], **kwargs_267950)
        
        
        
        unicode_267952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 11), 'unicode', u'wxMac')
        # Getting the type of 'wx' (line 1667)
        wx_267953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 26), 'wx')
        # Obtaining the member 'PlatformInfo' of a type (line 1667)
        PlatformInfo_267954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 26), wx_267953, 'PlatformInfo')
        # Applying the binary operator 'notin' (line 1667)
        result_contains_267955 = python_operator(stypy.reporting.localization.Localization(__file__, 1667, 11), 'notin', unicode_267952, PlatformInfo_267954)
        
        # Testing the type of an if condition (line 1667)
        if_condition_267956 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1667, 8), result_contains_267955)
        # Assigning a type to the variable 'if_condition_267956' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'if_condition_267956', if_condition_267956)
        # SSA begins for if statement (line 1667)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1668):
        
        # Assigning a Call to a Name (line 1668):
        
        # Call to GCDC(...): (line 1668)
        # Processing the call arguments (line 1668)
        # Getting the type of 'dc' (line 1668)
        dc_267959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 25), 'dc', False)
        # Processing the call keyword arguments (line 1668)
        kwargs_267960 = {}
        # Getting the type of 'wx' (line 1668)
        wx_267957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 17), 'wx', False)
        # Obtaining the member 'GCDC' of a type (line 1668)
        GCDC_267958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 17), wx_267957, 'GCDC')
        # Calling GCDC(args, kwargs) (line 1668)
        GCDC_call_result_267961 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 17), GCDC_267958, *[dc_267959], **kwargs_267960)
        
        # Assigning a type to the variable 'dc' (line 1668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 12), 'dc', GCDC_call_result_267961)
        # SSA join for if statement (line 1667)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 1670):
        
        # Assigning a Attribute to a Name (line 1670):
        # Getting the type of 'self' (line 1670)
        self_267962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 17), 'self')
        # Obtaining the member 'canvas' of a type (line 1670)
        canvas_267963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 17), self_267962, 'canvas')
        # Obtaining the member 'figure' of a type (line 1670)
        figure_267964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 17), canvas_267963, 'figure')
        # Obtaining the member 'bbox' of a type (line 1670)
        bbox_267965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 17), figure_267964, 'bbox')
        # Obtaining the member 'height' of a type (line 1670)
        height_267966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 17), bbox_267965, 'height')
        # Assigning a type to the variable 'height' (line 1670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'height', height_267966)
        
        # Assigning a BinOp to a Name (line 1671):
        
        # Assigning a BinOp to a Name (line 1671):
        # Getting the type of 'height' (line 1671)
        height_267967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 13), 'height')
        # Getting the type of 'y1' (line 1671)
        y1_267968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 22), 'y1')
        # Applying the binary operator '-' (line 1671)
        result_sub_267969 = python_operator(stypy.reporting.localization.Localization(__file__, 1671, 13), '-', height_267967, y1_267968)
        
        # Assigning a type to the variable 'y1' (line 1671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 8), 'y1', result_sub_267969)
        
        # Assigning a BinOp to a Name (line 1672):
        
        # Assigning a BinOp to a Name (line 1672):
        # Getting the type of 'height' (line 1672)
        height_267970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 13), 'height')
        # Getting the type of 'y0' (line 1672)
        y0_267971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 22), 'y0')
        # Applying the binary operator '-' (line 1672)
        result_sub_267972 = python_operator(stypy.reporting.localization.Localization(__file__, 1672, 13), '-', height_267970, y0_267971)
        
        # Assigning a type to the variable 'y0' (line 1672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1672, 8), 'y0', result_sub_267972)
        
        
        # Getting the type of 'y1' (line 1674)
        y1_267973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 11), 'y1')
        # Getting the type of 'y0' (line 1674)
        y0_267974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 16), 'y0')
        # Applying the binary operator '<' (line 1674)
        result_lt_267975 = python_operator(stypy.reporting.localization.Localization(__file__, 1674, 11), '<', y1_267973, y0_267974)
        
        # Testing the type of an if condition (line 1674)
        if_condition_267976 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1674, 8), result_lt_267975)
        # Assigning a type to the variable 'if_condition_267976' (line 1674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 8), 'if_condition_267976', if_condition_267976)
        # SSA begins for if statement (line 1674)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1675):
        
        # Assigning a Name to a Name (line 1675):
        # Getting the type of 'y1' (line 1675)
        y1_267977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 21), 'y1')
        # Assigning a type to the variable 'tuple_assignment_263074' (line 1675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'tuple_assignment_263074', y1_267977)
        
        # Assigning a Name to a Name (line 1675):
        # Getting the type of 'y0' (line 1675)
        y0_267978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 25), 'y0')
        # Assigning a type to the variable 'tuple_assignment_263075' (line 1675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'tuple_assignment_263075', y0_267978)
        
        # Assigning a Name to a Name (line 1675):
        # Getting the type of 'tuple_assignment_263074' (line 1675)
        tuple_assignment_263074_267979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'tuple_assignment_263074')
        # Assigning a type to the variable 'y0' (line 1675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'y0', tuple_assignment_263074_267979)
        
        # Assigning a Name to a Name (line 1675):
        # Getting the type of 'tuple_assignment_263075' (line 1675)
        tuple_assignment_263075_267980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), 'tuple_assignment_263075')
        # Assigning a type to the variable 'y1' (line 1675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 16), 'y1', tuple_assignment_263075_267980)
        # SSA join for if statement (line 1674)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x1' (line 1676)
        x1_267981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 11), 'x1')
        # Getting the type of 'y0' (line 1676)
        y0_267982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 16), 'y0')
        # Applying the binary operator '<' (line 1676)
        result_lt_267983 = python_operator(stypy.reporting.localization.Localization(__file__, 1676, 11), '<', x1_267981, y0_267982)
        
        # Testing the type of an if condition (line 1676)
        if_condition_267984 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1676, 8), result_lt_267983)
        # Assigning a type to the variable 'if_condition_267984' (line 1676)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 8), 'if_condition_267984', if_condition_267984)
        # SSA begins for if statement (line 1676)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1677):
        
        # Assigning a Name to a Name (line 1677):
        # Getting the type of 'x1' (line 1677)
        x1_267985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 21), 'x1')
        # Assigning a type to the variable 'tuple_assignment_263076' (line 1677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 12), 'tuple_assignment_263076', x1_267985)
        
        # Assigning a Name to a Name (line 1677):
        # Getting the type of 'x0' (line 1677)
        x0_267986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 25), 'x0')
        # Assigning a type to the variable 'tuple_assignment_263077' (line 1677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 12), 'tuple_assignment_263077', x0_267986)
        
        # Assigning a Name to a Name (line 1677):
        # Getting the type of 'tuple_assignment_263076' (line 1677)
        tuple_assignment_263076_267987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 12), 'tuple_assignment_263076')
        # Assigning a type to the variable 'x0' (line 1677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 12), 'x0', tuple_assignment_263076_267987)
        
        # Assigning a Name to a Name (line 1677):
        # Getting the type of 'tuple_assignment_263077' (line 1677)
        tuple_assignment_263077_267988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 12), 'tuple_assignment_263077')
        # Assigning a type to the variable 'x1' (line 1677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 16), 'x1', tuple_assignment_263077_267988)
        # SSA join for if statement (line 1676)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1679):
        
        # Assigning a BinOp to a Name (line 1679):
        # Getting the type of 'x1' (line 1679)
        x1_267989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 12), 'x1')
        # Getting the type of 'x0' (line 1679)
        x0_267990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 17), 'x0')
        # Applying the binary operator '-' (line 1679)
        result_sub_267991 = python_operator(stypy.reporting.localization.Localization(__file__, 1679, 12), '-', x1_267989, x0_267990)
        
        # Assigning a type to the variable 'w' (line 1679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 8), 'w', result_sub_267991)
        
        # Assigning a BinOp to a Name (line 1680):
        
        # Assigning a BinOp to a Name (line 1680):
        # Getting the type of 'y1' (line 1680)
        y1_267992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 12), 'y1')
        # Getting the type of 'y0' (line 1680)
        y0_267993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 17), 'y0')
        # Applying the binary operator '-' (line 1680)
        result_sub_267994 = python_operator(stypy.reporting.localization.Localization(__file__, 1680, 12), '-', y1_267992, y0_267993)
        
        # Assigning a type to the variable 'h' (line 1680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1680, 8), 'h', result_sub_267994)
        
        # Assigning a Call to a Name (line 1681):
        
        # Assigning a Call to a Name (line 1681):
        
        # Call to Rect(...): (line 1681)
        # Processing the call arguments (line 1681)
        # Getting the type of 'x0' (line 1681)
        x0_267997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 23), 'x0', False)
        # Getting the type of 'y0' (line 1681)
        y0_267998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 27), 'y0', False)
        # Getting the type of 'w' (line 1681)
        w_267999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 31), 'w', False)
        # Getting the type of 'h' (line 1681)
        h_268000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 34), 'h', False)
        # Processing the call keyword arguments (line 1681)
        kwargs_268001 = {}
        # Getting the type of 'wx' (line 1681)
        wx_267995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 15), 'wx', False)
        # Obtaining the member 'Rect' of a type (line 1681)
        Rect_267996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 15), wx_267995, 'Rect')
        # Calling Rect(args, kwargs) (line 1681)
        Rect_call_result_268002 = invoke(stypy.reporting.localization.Localization(__file__, 1681, 15), Rect_267996, *[x0_267997, y0_267998, w_267999, h_268000], **kwargs_268001)
        
        # Assigning a type to the variable 'rect' (line 1681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 8), 'rect', Rect_call_result_268002)
        
        # Assigning a Str to a Name (line 1683):
        
        # Assigning a Str to a Name (line 1683):
        unicode_268003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1683, 26), 'unicode', u'#C0C0FF')
        # Assigning a type to the variable 'rubberBandColor' (line 1683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1683, 8), 'rubberBandColor', unicode_268003)
        
        # Assigning a Call to a Name (line 1686):
        
        # Assigning a Call to a Name (line 1686):
        
        # Call to NamedColour(...): (line 1686)
        # Processing the call arguments (line 1686)
        # Getting the type of 'rubberBandColor' (line 1686)
        rubberBandColor_268006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 32), 'rubberBandColor', False)
        # Processing the call keyword arguments (line 1686)
        kwargs_268007 = {}
        # Getting the type of 'wxc' (line 1686)
        wxc_268004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 16), 'wxc', False)
        # Obtaining the member 'NamedColour' of a type (line 1686)
        NamedColour_268005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 16), wxc_268004, 'NamedColour')
        # Calling NamedColour(args, kwargs) (line 1686)
        NamedColour_call_result_268008 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 16), NamedColour_268005, *[rubberBandColor_268006], **kwargs_268007)
        
        # Assigning a type to the variable 'color' (line 1686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 8), 'color', NamedColour_call_result_268008)
        
        # Call to SetPen(...): (line 1687)
        # Processing the call arguments (line 1687)
        
        # Call to Pen(...): (line 1687)
        # Processing the call arguments (line 1687)
        # Getting the type of 'color' (line 1687)
        color_268013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 25), 'color', False)
        int_268014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1687, 32), 'int')
        # Processing the call keyword arguments (line 1687)
        kwargs_268015 = {}
        # Getting the type of 'wx' (line 1687)
        wx_268011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 18), 'wx', False)
        # Obtaining the member 'Pen' of a type (line 1687)
        Pen_268012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1687, 18), wx_268011, 'Pen')
        # Calling Pen(args, kwargs) (line 1687)
        Pen_call_result_268016 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 18), Pen_268012, *[color_268013, int_268014], **kwargs_268015)
        
        # Processing the call keyword arguments (line 1687)
        kwargs_268017 = {}
        # Getting the type of 'dc' (line 1687)
        dc_268009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 8), 'dc', False)
        # Obtaining the member 'SetPen' of a type (line 1687)
        SetPen_268010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1687, 8), dc_268009, 'SetPen')
        # Calling SetPen(args, kwargs) (line 1687)
        SetPen_call_result_268018 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 8), SetPen_268010, *[Pen_call_result_268016], **kwargs_268017)
        
        
        # Assigning a Call to a Tuple (line 1690):
        
        # Assigning a Call to a Name:
        
        # Call to Get(...): (line 1690)
        # Processing the call arguments (line 1690)
        # Getting the type of 'True' (line 1690)
        True_268021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 31), 'True', False)
        # Processing the call keyword arguments (line 1690)
        kwargs_268022 = {}
        # Getting the type of 'color' (line 1690)
        color_268019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 21), 'color', False)
        # Obtaining the member 'Get' of a type (line 1690)
        Get_268020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 21), color_268019, 'Get')
        # Calling Get(args, kwargs) (line 1690)
        Get_call_result_268023 = invoke(stypy.reporting.localization.Localization(__file__, 1690, 21), Get_268020, *[True_268021], **kwargs_268022)
        
        # Assigning a type to the variable 'call_assignment_263078' (line 1690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'call_assignment_263078', Get_call_result_268023)
        
        # Assigning a Call to a Name (line 1690):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_268026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1690, 8), 'int')
        # Processing the call keyword arguments
        kwargs_268027 = {}
        # Getting the type of 'call_assignment_263078' (line 1690)
        call_assignment_263078_268024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'call_assignment_263078', False)
        # Obtaining the member '__getitem__' of a type (line 1690)
        getitem___268025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 8), call_assignment_263078_268024, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_268028 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___268025, *[int_268026], **kwargs_268027)
        
        # Assigning a type to the variable 'call_assignment_263079' (line 1690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'call_assignment_263079', getitem___call_result_268028)
        
        # Assigning a Name to a Name (line 1690):
        # Getting the type of 'call_assignment_263079' (line 1690)
        call_assignment_263079_268029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'call_assignment_263079')
        # Assigning a type to the variable 'r' (line 1690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'r', call_assignment_263079_268029)
        
        # Assigning a Call to a Name (line 1690):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_268032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1690, 8), 'int')
        # Processing the call keyword arguments
        kwargs_268033 = {}
        # Getting the type of 'call_assignment_263078' (line 1690)
        call_assignment_263078_268030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'call_assignment_263078', False)
        # Obtaining the member '__getitem__' of a type (line 1690)
        getitem___268031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 8), call_assignment_263078_268030, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_268034 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___268031, *[int_268032], **kwargs_268033)
        
        # Assigning a type to the variable 'call_assignment_263080' (line 1690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'call_assignment_263080', getitem___call_result_268034)
        
        # Assigning a Name to a Name (line 1690):
        # Getting the type of 'call_assignment_263080' (line 1690)
        call_assignment_263080_268035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'call_assignment_263080')
        # Assigning a type to the variable 'g' (line 1690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 11), 'g', call_assignment_263080_268035)
        
        # Assigning a Call to a Name (line 1690):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_268038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1690, 8), 'int')
        # Processing the call keyword arguments
        kwargs_268039 = {}
        # Getting the type of 'call_assignment_263078' (line 1690)
        call_assignment_263078_268036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'call_assignment_263078', False)
        # Obtaining the member '__getitem__' of a type (line 1690)
        getitem___268037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 8), call_assignment_263078_268036, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_268040 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___268037, *[int_268038], **kwargs_268039)
        
        # Assigning a type to the variable 'call_assignment_263081' (line 1690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'call_assignment_263081', getitem___call_result_268040)
        
        # Assigning a Name to a Name (line 1690):
        # Getting the type of 'call_assignment_263081' (line 1690)
        call_assignment_263081_268041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'call_assignment_263081')
        # Assigning a type to the variable 'b' (line 1690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 14), 'b', call_assignment_263081_268041)
        
        # Assigning a Call to a Name (line 1690):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_268044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1690, 8), 'int')
        # Processing the call keyword arguments
        kwargs_268045 = {}
        # Getting the type of 'call_assignment_263078' (line 1690)
        call_assignment_263078_268042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'call_assignment_263078', False)
        # Obtaining the member '__getitem__' of a type (line 1690)
        getitem___268043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 8), call_assignment_263078_268042, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_268046 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___268043, *[int_268044], **kwargs_268045)
        
        # Assigning a type to the variable 'call_assignment_263082' (line 1690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'call_assignment_263082', getitem___call_result_268046)
        
        # Assigning a Name to a Name (line 1690):
        # Getting the type of 'call_assignment_263082' (line 1690)
        call_assignment_263082_268047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'call_assignment_263082')
        # Assigning a type to the variable 'a' (line 1690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 17), 'a', call_assignment_263082_268047)
        
        # Call to Set(...): (line 1691)
        # Processing the call arguments (line 1691)
        # Getting the type of 'r' (line 1691)
        r_268050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 18), 'r', False)
        # Getting the type of 'g' (line 1691)
        g_268051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 21), 'g', False)
        # Getting the type of 'b' (line 1691)
        b_268052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 24), 'b', False)
        int_268053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1691, 27), 'int')
        # Processing the call keyword arguments (line 1691)
        kwargs_268054 = {}
        # Getting the type of 'color' (line 1691)
        color_268048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 8), 'color', False)
        # Obtaining the member 'Set' of a type (line 1691)
        Set_268049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1691, 8), color_268048, 'Set')
        # Calling Set(args, kwargs) (line 1691)
        Set_call_result_268055 = invoke(stypy.reporting.localization.Localization(__file__, 1691, 8), Set_268049, *[r_268050, g_268051, b_268052, int_268053], **kwargs_268054)
        
        
        # Call to SetBrush(...): (line 1692)
        # Processing the call arguments (line 1692)
        
        # Call to Brush(...): (line 1692)
        # Processing the call arguments (line 1692)
        # Getting the type of 'color' (line 1692)
        color_268060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 29), 'color', False)
        # Processing the call keyword arguments (line 1692)
        kwargs_268061 = {}
        # Getting the type of 'wx' (line 1692)
        wx_268058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 20), 'wx', False)
        # Obtaining the member 'Brush' of a type (line 1692)
        Brush_268059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1692, 20), wx_268058, 'Brush')
        # Calling Brush(args, kwargs) (line 1692)
        Brush_call_result_268062 = invoke(stypy.reporting.localization.Localization(__file__, 1692, 20), Brush_268059, *[color_268060], **kwargs_268061)
        
        # Processing the call keyword arguments (line 1692)
        kwargs_268063 = {}
        # Getting the type of 'dc' (line 1692)
        dc_268056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 8), 'dc', False)
        # Obtaining the member 'SetBrush' of a type (line 1692)
        SetBrush_268057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1692, 8), dc_268056, 'SetBrush')
        # Calling SetBrush(args, kwargs) (line 1692)
        SetBrush_call_result_268064 = invoke(stypy.reporting.localization.Localization(__file__, 1692, 8), SetBrush_268057, *[Brush_call_result_268062], **kwargs_268063)
        
        
        # Getting the type of 'wxc' (line 1693)
        wxc_268065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 11), 'wxc')
        # Obtaining the member 'is_phoenix' of a type (line 1693)
        is_phoenix_268066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 11), wxc_268065, 'is_phoenix')
        # Testing the type of an if condition (line 1693)
        if_condition_268067 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1693, 8), is_phoenix_268066)
        # Assigning a type to the variable 'if_condition_268067' (line 1693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 8), 'if_condition_268067', if_condition_268067)
        # SSA begins for if statement (line 1693)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to DrawRectangle(...): (line 1694)
        # Processing the call arguments (line 1694)
        # Getting the type of 'rect' (line 1694)
        rect_268070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 29), 'rect', False)
        # Processing the call keyword arguments (line 1694)
        kwargs_268071 = {}
        # Getting the type of 'dc' (line 1694)
        dc_268068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 12), 'dc', False)
        # Obtaining the member 'DrawRectangle' of a type (line 1694)
        DrawRectangle_268069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1694, 12), dc_268068, 'DrawRectangle')
        # Calling DrawRectangle(args, kwargs) (line 1694)
        DrawRectangle_call_result_268072 = invoke(stypy.reporting.localization.Localization(__file__, 1694, 12), DrawRectangle_268069, *[rect_268070], **kwargs_268071)
        
        # SSA branch for the else part of an if statement (line 1693)
        module_type_store.open_ssa_branch('else')
        
        # Call to DrawRectangleRect(...): (line 1696)
        # Processing the call arguments (line 1696)
        # Getting the type of 'rect' (line 1696)
        rect_268075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 33), 'rect', False)
        # Processing the call keyword arguments (line 1696)
        kwargs_268076 = {}
        # Getting the type of 'dc' (line 1696)
        dc_268073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 12), 'dc', False)
        # Obtaining the member 'DrawRectangleRect' of a type (line 1696)
        DrawRectangleRect_268074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1696, 12), dc_268073, 'DrawRectangleRect')
        # Calling DrawRectangleRect(args, kwargs) (line 1696)
        DrawRectangleRect_call_result_268077 = invoke(stypy.reporting.localization.Localization(__file__, 1696, 12), DrawRectangleRect_268074, *[rect_268075], **kwargs_268076)
        
        # SSA join for if statement (line 1693)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'draw_rubberband(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_rubberband' in the type store
        # Getting the type of 'stypy_return_type' (line 1641)
        stypy_return_type_268078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268078)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_rubberband'
        return stypy_return_type_268078


    @norecursion
    def set_status_bar(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_status_bar'
        module_type_store = module_type_store.open_function_context('set_status_bar', 1698, 4, False)
        # Assigning a type to the variable 'self' (line 1699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1699, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx.set_status_bar.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx.set_status_bar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx.set_status_bar.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx.set_status_bar.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx.set_status_bar')
        NavigationToolbar2Wx.set_status_bar.__dict__.__setitem__('stypy_param_names_list', ['statbar'])
        NavigationToolbar2Wx.set_status_bar.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2Wx.set_status_bar.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx.set_status_bar.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx.set_status_bar.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx.set_status_bar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx.set_status_bar.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.set_status_bar', ['statbar'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_status_bar', localization, ['statbar'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_status_bar(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1699):
        
        # Assigning a Name to a Attribute (line 1699):
        # Getting the type of 'statbar' (line 1699)
        statbar_268079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 23), 'statbar')
        # Getting the type of 'self' (line 1699)
        self_268080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 8), 'self')
        # Setting the type of the member 'statbar' of a type (line 1699)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1699, 8), self_268080, 'statbar', statbar_268079)
        
        # ################# End of 'set_status_bar(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_status_bar' in the type store
        # Getting the type of 'stypy_return_type' (line 1698)
        stypy_return_type_268081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268081)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_status_bar'
        return stypy_return_type_268081


    @norecursion
    def set_message(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_message'
        module_type_store = module_type_store.open_function_context('set_message', 1701, 4, False)
        # Assigning a type to the variable 'self' (line 1702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1702, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx.set_message.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx.set_message.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx.set_message.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx.set_message.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx.set_message')
        NavigationToolbar2Wx.set_message.__dict__.__setitem__('stypy_param_names_list', ['s'])
        NavigationToolbar2Wx.set_message.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2Wx.set_message.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx.set_message.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx.set_message.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx.set_message.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx.set_message.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.set_message', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_message', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_message(...)' code ##################

        
        
        # Getting the type of 'self' (line 1702)
        self_268082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 11), 'self')
        # Obtaining the member 'statbar' of a type (line 1702)
        statbar_268083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 11), self_268082, 'statbar')
        # Getting the type of 'None' (line 1702)
        None_268084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 31), 'None')
        # Applying the binary operator 'isnot' (line 1702)
        result_is_not_268085 = python_operator(stypy.reporting.localization.Localization(__file__, 1702, 11), 'isnot', statbar_268083, None_268084)
        
        # Testing the type of an if condition (line 1702)
        if_condition_268086 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1702, 8), result_is_not_268085)
        # Assigning a type to the variable 'if_condition_268086' (line 1702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1702, 8), 'if_condition_268086', if_condition_268086)
        # SSA begins for if statement (line 1702)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_function(...): (line 1703)
        # Processing the call arguments (line 1703)
        # Getting the type of 's' (line 1703)
        s_268090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 38), 's', False)
        # Processing the call keyword arguments (line 1703)
        kwargs_268091 = {}
        # Getting the type of 'self' (line 1703)
        self_268087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 12), 'self', False)
        # Obtaining the member 'statbar' of a type (line 1703)
        statbar_268088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 12), self_268087, 'statbar')
        # Obtaining the member 'set_function' of a type (line 1703)
        set_function_268089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 12), statbar_268088, 'set_function')
        # Calling set_function(args, kwargs) (line 1703)
        set_function_call_result_268092 = invoke(stypy.reporting.localization.Localization(__file__, 1703, 12), set_function_268089, *[s_268090], **kwargs_268091)
        
        # SSA join for if statement (line 1702)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_message(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_message' in the type store
        # Getting the type of 'stypy_return_type' (line 1701)
        stypy_return_type_268093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268093)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_message'
        return stypy_return_type_268093


    @norecursion
    def set_history_buttons(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_history_buttons'
        module_type_store = module_type_store.open_function_context('set_history_buttons', 1705, 4, False)
        # Assigning a type to the variable 'self' (line 1706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1706, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2Wx.set_history_buttons.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2Wx.set_history_buttons.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2Wx.set_history_buttons.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2Wx.set_history_buttons.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2Wx.set_history_buttons')
        NavigationToolbar2Wx.set_history_buttons.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2Wx.set_history_buttons.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2Wx.set_history_buttons.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2Wx.set_history_buttons.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2Wx.set_history_buttons.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2Wx.set_history_buttons.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2Wx.set_history_buttons.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2Wx.set_history_buttons', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_history_buttons', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_history_buttons(...)' code ##################

        
        # Assigning a Compare to a Name (line 1706):
        
        # Assigning a Compare to a Name (line 1706):
        
        # Getting the type of 'self' (line 1706)
        self_268094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 24), 'self')
        # Obtaining the member '_views' of a type (line 1706)
        _views_268095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 24), self_268094, '_views')
        # Obtaining the member '_pos' of a type (line 1706)
        _pos_268096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 24), _views_268095, '_pos')
        int_268097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1706, 43), 'int')
        # Applying the binary operator '>' (line 1706)
        result_gt_268098 = python_operator(stypy.reporting.localization.Localization(__file__, 1706, 24), '>', _pos_268096, int_268097)
        
        # Assigning a type to the variable 'can_backward' (line 1706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1706, 8), 'can_backward', result_gt_268098)
        
        # Assigning a Compare to a Name (line 1707):
        
        # Assigning a Compare to a Name (line 1707):
        
        # Getting the type of 'self' (line 1707)
        self_268099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 23), 'self')
        # Obtaining the member '_views' of a type (line 1707)
        _views_268100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1707, 23), self_268099, '_views')
        # Obtaining the member '_pos' of a type (line 1707)
        _pos_268101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1707, 23), _views_268100, '_pos')
        
        # Call to len(...): (line 1707)
        # Processing the call arguments (line 1707)
        # Getting the type of 'self' (line 1707)
        self_268103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 46), 'self', False)
        # Obtaining the member '_views' of a type (line 1707)
        _views_268104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1707, 46), self_268103, '_views')
        # Obtaining the member '_elements' of a type (line 1707)
        _elements_268105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1707, 46), _views_268104, '_elements')
        # Processing the call keyword arguments (line 1707)
        kwargs_268106 = {}
        # Getting the type of 'len' (line 1707)
        len_268102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 42), 'len', False)
        # Calling len(args, kwargs) (line 1707)
        len_call_result_268107 = invoke(stypy.reporting.localization.Localization(__file__, 1707, 42), len_268102, *[_elements_268105], **kwargs_268106)
        
        int_268108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1707, 71), 'int')
        # Applying the binary operator '-' (line 1707)
        result_sub_268109 = python_operator(stypy.reporting.localization.Localization(__file__, 1707, 42), '-', len_call_result_268107, int_268108)
        
        # Applying the binary operator '<' (line 1707)
        result_lt_268110 = python_operator(stypy.reporting.localization.Localization(__file__, 1707, 23), '<', _pos_268101, result_sub_268109)
        
        # Assigning a type to the variable 'can_forward' (line 1707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1707, 8), 'can_forward', result_lt_268110)
        
        # Call to EnableTool(...): (line 1708)
        # Processing the call arguments (line 1708)
        
        # Obtaining the type of the subscript
        unicode_268113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1708, 36), 'unicode', u'Back')
        # Getting the type of 'self' (line 1708)
        self_268114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 24), 'self', False)
        # Obtaining the member 'wx_ids' of a type (line 1708)
        wx_ids_268115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 24), self_268114, 'wx_ids')
        # Obtaining the member '__getitem__' of a type (line 1708)
        getitem___268116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 24), wx_ids_268115, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1708)
        subscript_call_result_268117 = invoke(stypy.reporting.localization.Localization(__file__, 1708, 24), getitem___268116, unicode_268113)
        
        # Getting the type of 'can_backward' (line 1708)
        can_backward_268118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 45), 'can_backward', False)
        # Processing the call keyword arguments (line 1708)
        kwargs_268119 = {}
        # Getting the type of 'self' (line 1708)
        self_268111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 8), 'self', False)
        # Obtaining the member 'EnableTool' of a type (line 1708)
        EnableTool_268112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 8), self_268111, 'EnableTool')
        # Calling EnableTool(args, kwargs) (line 1708)
        EnableTool_call_result_268120 = invoke(stypy.reporting.localization.Localization(__file__, 1708, 8), EnableTool_268112, *[subscript_call_result_268117, can_backward_268118], **kwargs_268119)
        
        
        # Call to EnableTool(...): (line 1709)
        # Processing the call arguments (line 1709)
        
        # Obtaining the type of the subscript
        unicode_268123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, 36), 'unicode', u'Forward')
        # Getting the type of 'self' (line 1709)
        self_268124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 24), 'self', False)
        # Obtaining the member 'wx_ids' of a type (line 1709)
        wx_ids_268125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1709, 24), self_268124, 'wx_ids')
        # Obtaining the member '__getitem__' of a type (line 1709)
        getitem___268126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1709, 24), wx_ids_268125, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1709)
        subscript_call_result_268127 = invoke(stypy.reporting.localization.Localization(__file__, 1709, 24), getitem___268126, unicode_268123)
        
        # Getting the type of 'can_forward' (line 1709)
        can_forward_268128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 48), 'can_forward', False)
        # Processing the call keyword arguments (line 1709)
        kwargs_268129 = {}
        # Getting the type of 'self' (line 1709)
        self_268121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 8), 'self', False)
        # Obtaining the member 'EnableTool' of a type (line 1709)
        EnableTool_268122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1709, 8), self_268121, 'EnableTool')
        # Calling EnableTool(args, kwargs) (line 1709)
        EnableTool_call_result_268130 = invoke(stypy.reporting.localization.Localization(__file__, 1709, 8), EnableTool_268122, *[subscript_call_result_268127, can_forward_268128], **kwargs_268129)
        
        
        # ################# End of 'set_history_buttons(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_history_buttons' in the type store
        # Getting the type of 'stypy_return_type' (line 1705)
        stypy_return_type_268131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268131)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_history_buttons'
        return stypy_return_type_268131


# Assigning a type to the variable 'NavigationToolbar2Wx' (line 1500)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 0), 'NavigationToolbar2Wx', NavigationToolbar2Wx)
# Declaration of the 'StatusBarWx' class
# Getting the type of 'wx' (line 1712)
wx_268132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 18), 'wx')
# Obtaining the member 'StatusBar' of a type (line 1712)
StatusBar_268133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1712, 18), wx_268132, 'StatusBar')

class StatusBarWx(StatusBar_268133, ):
    unicode_268134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1717, (-1)), 'unicode', u'\n    A status bar is added to _FigureFrame to allow measurements and the\n    previously selected scroll function to be displayed as a user\n    convenience.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1719, 4, False)
        # Assigning a type to the variable 'self' (line 1720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StatusBarWx.__init__', ['parent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['parent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1720)
        # Processing the call arguments (line 1720)
        # Getting the type of 'self' (line 1720)
        self_268138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 30), 'self', False)
        # Getting the type of 'parent' (line 1720)
        parent_268139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 36), 'parent', False)
        int_268140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 44), 'int')
        # Processing the call keyword arguments (line 1720)
        kwargs_268141 = {}
        # Getting the type of 'wx' (line 1720)
        wx_268135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 8), 'wx', False)
        # Obtaining the member 'StatusBar' of a type (line 1720)
        StatusBar_268136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1720, 8), wx_268135, 'StatusBar')
        # Obtaining the member '__init__' of a type (line 1720)
        init___268137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1720, 8), StatusBar_268136, '__init__')
        # Calling __init__(args, kwargs) (line 1720)
        init___call_result_268142 = invoke(stypy.reporting.localization.Localization(__file__, 1720, 8), init___268137, *[self_268138, parent_268139, int_268140], **kwargs_268141)
        
        
        # Call to SetFieldsCount(...): (line 1721)
        # Processing the call arguments (line 1721)
        int_268145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 28), 'int')
        # Processing the call keyword arguments (line 1721)
        kwargs_268146 = {}
        # Getting the type of 'self' (line 1721)
        self_268143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 8), 'self', False)
        # Obtaining the member 'SetFieldsCount' of a type (line 1721)
        SetFieldsCount_268144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1721, 8), self_268143, 'SetFieldsCount')
        # Calling SetFieldsCount(args, kwargs) (line 1721)
        SetFieldsCount_call_result_268147 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 8), SetFieldsCount_268144, *[int_268145], **kwargs_268146)
        
        
        # Call to SetStatusText(...): (line 1722)
        # Processing the call arguments (line 1722)
        unicode_268150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 27), 'unicode', u'None')
        int_268151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 35), 'int')
        # Processing the call keyword arguments (line 1722)
        kwargs_268152 = {}
        # Getting the type of 'self' (line 1722)
        self_268148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 8), 'self', False)
        # Obtaining the member 'SetStatusText' of a type (line 1722)
        SetStatusText_268149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1722, 8), self_268148, 'SetStatusText')
        # Calling SetStatusText(args, kwargs) (line 1722)
        SetStatusText_call_result_268153 = invoke(stypy.reporting.localization.Localization(__file__, 1722, 8), SetStatusText_268149, *[unicode_268150, int_268151], **kwargs_268152)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_function(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_function'
        module_type_store = module_type_store.open_function_context('set_function', 1726, 4, False)
        # Assigning a type to the variable 'self' (line 1727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StatusBarWx.set_function.__dict__.__setitem__('stypy_localization', localization)
        StatusBarWx.set_function.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StatusBarWx.set_function.__dict__.__setitem__('stypy_type_store', module_type_store)
        StatusBarWx.set_function.__dict__.__setitem__('stypy_function_name', 'StatusBarWx.set_function')
        StatusBarWx.set_function.__dict__.__setitem__('stypy_param_names_list', ['string'])
        StatusBarWx.set_function.__dict__.__setitem__('stypy_varargs_param_name', None)
        StatusBarWx.set_function.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StatusBarWx.set_function.__dict__.__setitem__('stypy_call_defaults', defaults)
        StatusBarWx.set_function.__dict__.__setitem__('stypy_call_varargs', varargs)
        StatusBarWx.set_function.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StatusBarWx.set_function.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StatusBarWx.set_function', ['string'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_function', localization, ['string'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_function(...)' code ##################

        
        # Call to SetStatusText(...): (line 1727)
        # Processing the call arguments (line 1727)
        unicode_268156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1727, 27), 'unicode', u'%s')
        # Getting the type of 'string' (line 1727)
        string_268157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 34), 'string', False)
        # Applying the binary operator '%' (line 1727)
        result_mod_268158 = python_operator(stypy.reporting.localization.Localization(__file__, 1727, 27), '%', unicode_268156, string_268157)
        
        int_268159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1727, 42), 'int')
        # Processing the call keyword arguments (line 1727)
        kwargs_268160 = {}
        # Getting the type of 'self' (line 1727)
        self_268154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 8), 'self', False)
        # Obtaining the member 'SetStatusText' of a type (line 1727)
        SetStatusText_268155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1727, 8), self_268154, 'SetStatusText')
        # Calling SetStatusText(args, kwargs) (line 1727)
        SetStatusText_call_result_268161 = invoke(stypy.reporting.localization.Localization(__file__, 1727, 8), SetStatusText_268155, *[result_mod_268158, int_268159], **kwargs_268160)
        
        
        # ################# End of 'set_function(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_function' in the type store
        # Getting the type of 'stypy_return_type' (line 1726)
        stypy_return_type_268162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268162)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_function'
        return stypy_return_type_268162


# Assigning a type to the variable 'StatusBarWx' (line 1712)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1712, 0), 'StatusBarWx', StatusBarWx)
# Declaration of the 'PrintoutWx' class
# Getting the type of 'wx' (line 1735)
wx_268163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 17), 'wx')
# Obtaining the member 'Printout' of a type (line 1735)
Printout_268164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1735, 17), wx_268163, 'Printout')

class PrintoutWx(Printout_268164, ):
    unicode_268165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1740, (-1)), 'unicode', u"\n    Simple wrapper around wx Printout class -- all the real work\n    here is scaling the matplotlib canvas bitmap to the current\n    printer's definition.\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_268166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1742, 37), 'float')
        float_268167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1742, 49), 'float')
        unicode_268168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1742, 60), 'unicode', u'matplotlib')
        defaults = [float_268166, float_268167, unicode_268168]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1742, 4, False)
        # Assigning a type to the variable 'self' (line 1743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PrintoutWx.__init__', ['canvas', 'width', 'margin', 'title'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['canvas', 'width', 'margin', 'title'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1743)
        # Processing the call arguments (line 1743)
        # Getting the type of 'self' (line 1743)
        self_268172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 29), 'self', False)
        # Processing the call keyword arguments (line 1743)
        # Getting the type of 'title' (line 1743)
        title_268173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 41), 'title', False)
        keyword_268174 = title_268173
        kwargs_268175 = {'title': keyword_268174}
        # Getting the type of 'wx' (line 1743)
        wx_268169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 8), 'wx', False)
        # Obtaining the member 'Printout' of a type (line 1743)
        Printout_268170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 8), wx_268169, 'Printout')
        # Obtaining the member '__init__' of a type (line 1743)
        init___268171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 8), Printout_268170, '__init__')
        # Calling __init__(args, kwargs) (line 1743)
        init___call_result_268176 = invoke(stypy.reporting.localization.Localization(__file__, 1743, 8), init___268171, *[self_268172], **kwargs_268175)
        
        
        # Assigning a Name to a Attribute (line 1744):
        
        # Assigning a Name to a Attribute (line 1744):
        # Getting the type of 'canvas' (line 1744)
        canvas_268177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 22), 'canvas')
        # Getting the type of 'self' (line 1744)
        self_268178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 1744)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1744, 8), self_268178, 'canvas', canvas_268177)
        
        # Assigning a Name to a Attribute (line 1746):
        
        # Assigning a Name to a Attribute (line 1746):
        # Getting the type of 'width' (line 1746)
        width_268179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 21), 'width')
        # Getting the type of 'self' (line 1746)
        self_268180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 8), 'self')
        # Setting the type of the member 'width' of a type (line 1746)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1746, 8), self_268180, 'width', width_268179)
        
        # Assigning a Name to a Attribute (line 1747):
        
        # Assigning a Name to a Attribute (line 1747):
        # Getting the type of 'margin' (line 1747)
        margin_268181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 22), 'margin')
        # Getting the type of 'self' (line 1747)
        self_268182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 8), 'self')
        # Setting the type of the member 'margin' of a type (line 1747)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1747, 8), self_268182, 'margin', margin_268181)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def HasPage(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'HasPage'
        module_type_store = module_type_store.open_function_context('HasPage', 1749, 4, False)
        # Assigning a type to the variable 'self' (line 1750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1750, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PrintoutWx.HasPage.__dict__.__setitem__('stypy_localization', localization)
        PrintoutWx.HasPage.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PrintoutWx.HasPage.__dict__.__setitem__('stypy_type_store', module_type_store)
        PrintoutWx.HasPage.__dict__.__setitem__('stypy_function_name', 'PrintoutWx.HasPage')
        PrintoutWx.HasPage.__dict__.__setitem__('stypy_param_names_list', ['page'])
        PrintoutWx.HasPage.__dict__.__setitem__('stypy_varargs_param_name', None)
        PrintoutWx.HasPage.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PrintoutWx.HasPage.__dict__.__setitem__('stypy_call_defaults', defaults)
        PrintoutWx.HasPage.__dict__.__setitem__('stypy_call_varargs', varargs)
        PrintoutWx.HasPage.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PrintoutWx.HasPage.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PrintoutWx.HasPage', ['page'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'HasPage', localization, ['page'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'HasPage(...)' code ##################

        
        # Getting the type of 'page' (line 1751)
        page_268183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 15), 'page')
        int_268184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1751, 23), 'int')
        # Applying the binary operator '==' (line 1751)
        result_eq_268185 = python_operator(stypy.reporting.localization.Localization(__file__, 1751, 15), '==', page_268183, int_268184)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1751, 8), 'stypy_return_type', result_eq_268185)
        
        # ################# End of 'HasPage(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'HasPage' in the type store
        # Getting the type of 'stypy_return_type' (line 1749)
        stypy_return_type_268186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268186)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'HasPage'
        return stypy_return_type_268186


    @norecursion
    def GetPageInfo(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'GetPageInfo'
        module_type_store = module_type_store.open_function_context('GetPageInfo', 1753, 4, False)
        # Assigning a type to the variable 'self' (line 1754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PrintoutWx.GetPageInfo.__dict__.__setitem__('stypy_localization', localization)
        PrintoutWx.GetPageInfo.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PrintoutWx.GetPageInfo.__dict__.__setitem__('stypy_type_store', module_type_store)
        PrintoutWx.GetPageInfo.__dict__.__setitem__('stypy_function_name', 'PrintoutWx.GetPageInfo')
        PrintoutWx.GetPageInfo.__dict__.__setitem__('stypy_param_names_list', [])
        PrintoutWx.GetPageInfo.__dict__.__setitem__('stypy_varargs_param_name', None)
        PrintoutWx.GetPageInfo.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PrintoutWx.GetPageInfo.__dict__.__setitem__('stypy_call_defaults', defaults)
        PrintoutWx.GetPageInfo.__dict__.__setitem__('stypy_call_varargs', varargs)
        PrintoutWx.GetPageInfo.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PrintoutWx.GetPageInfo.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PrintoutWx.GetPageInfo', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'GetPageInfo', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'GetPageInfo(...)' code ##################

        
        # Obtaining an instance of the builtin type 'tuple' (line 1754)
        tuple_268187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1754, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1754)
        # Adding element type (line 1754)
        int_268188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1754, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1754, 16), tuple_268187, int_268188)
        # Adding element type (line 1754)
        int_268189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1754, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1754, 16), tuple_268187, int_268189)
        # Adding element type (line 1754)
        int_268190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1754, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1754, 16), tuple_268187, int_268190)
        # Adding element type (line 1754)
        int_268191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1754, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1754, 16), tuple_268187, int_268191)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 8), 'stypy_return_type', tuple_268187)
        
        # ################# End of 'GetPageInfo(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'GetPageInfo' in the type store
        # Getting the type of 'stypy_return_type' (line 1753)
        stypy_return_type_268192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268192)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'GetPageInfo'
        return stypy_return_type_268192


    @norecursion
    def OnPrintPage(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'OnPrintPage'
        module_type_store = module_type_store.open_function_context('OnPrintPage', 1756, 4, False)
        # Assigning a type to the variable 'self' (line 1757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1757, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PrintoutWx.OnPrintPage.__dict__.__setitem__('stypy_localization', localization)
        PrintoutWx.OnPrintPage.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PrintoutWx.OnPrintPage.__dict__.__setitem__('stypy_type_store', module_type_store)
        PrintoutWx.OnPrintPage.__dict__.__setitem__('stypy_function_name', 'PrintoutWx.OnPrintPage')
        PrintoutWx.OnPrintPage.__dict__.__setitem__('stypy_param_names_list', ['page'])
        PrintoutWx.OnPrintPage.__dict__.__setitem__('stypy_varargs_param_name', None)
        PrintoutWx.OnPrintPage.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PrintoutWx.OnPrintPage.__dict__.__setitem__('stypy_call_defaults', defaults)
        PrintoutWx.OnPrintPage.__dict__.__setitem__('stypy_call_varargs', varargs)
        PrintoutWx.OnPrintPage.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PrintoutWx.OnPrintPage.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PrintoutWx.OnPrintPage', ['page'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'OnPrintPage', localization, ['page'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'OnPrintPage(...)' code ##################

        
        # Call to draw(...): (line 1757)
        # Processing the call keyword arguments (line 1757)
        kwargs_268196 = {}
        # Getting the type of 'self' (line 1757)
        self_268193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1757)
        canvas_268194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1757, 8), self_268193, 'canvas')
        # Obtaining the member 'draw' of a type (line 1757)
        draw_268195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1757, 8), canvas_268194, 'draw')
        # Calling draw(args, kwargs) (line 1757)
        draw_call_result_268197 = invoke(stypy.reporting.localization.Localization(__file__, 1757, 8), draw_268195, *[], **kwargs_268196)
        
        
        # Assigning a Call to a Name (line 1759):
        
        # Assigning a Call to a Name (line 1759):
        
        # Call to GetDC(...): (line 1759)
        # Processing the call keyword arguments (line 1759)
        kwargs_268200 = {}
        # Getting the type of 'self' (line 1759)
        self_268198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 13), 'self', False)
        # Obtaining the member 'GetDC' of a type (line 1759)
        GetDC_268199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1759, 13), self_268198, 'GetDC')
        # Calling GetDC(args, kwargs) (line 1759)
        GetDC_call_result_268201 = invoke(stypy.reporting.localization.Localization(__file__, 1759, 13), GetDC_268199, *[], **kwargs_268200)
        
        # Assigning a type to the variable 'dc' (line 1759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1759, 8), 'dc', GetDC_call_result_268201)
        
        # Assigning a Call to a Tuple (line 1760):
        
        # Assigning a Call to a Name:
        
        # Call to GetPPIPrinter(...): (line 1760)
        # Processing the call keyword arguments (line 1760)
        kwargs_268204 = {}
        # Getting the type of 'self' (line 1760)
        self_268202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 21), 'self', False)
        # Obtaining the member 'GetPPIPrinter' of a type (line 1760)
        GetPPIPrinter_268203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1760, 21), self_268202, 'GetPPIPrinter')
        # Calling GetPPIPrinter(args, kwargs) (line 1760)
        GetPPIPrinter_call_result_268205 = invoke(stypy.reporting.localization.Localization(__file__, 1760, 21), GetPPIPrinter_268203, *[], **kwargs_268204)
        
        # Assigning a type to the variable 'call_assignment_263083' (line 1760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 8), 'call_assignment_263083', GetPPIPrinter_call_result_268205)
        
        # Assigning a Call to a Name (line 1760):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_268208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1760, 8), 'int')
        # Processing the call keyword arguments
        kwargs_268209 = {}
        # Getting the type of 'call_assignment_263083' (line 1760)
        call_assignment_263083_268206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 8), 'call_assignment_263083', False)
        # Obtaining the member '__getitem__' of a type (line 1760)
        getitem___268207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1760, 8), call_assignment_263083_268206, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_268210 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___268207, *[int_268208], **kwargs_268209)
        
        # Assigning a type to the variable 'call_assignment_263084' (line 1760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 8), 'call_assignment_263084', getitem___call_result_268210)
        
        # Assigning a Name to a Name (line 1760):
        # Getting the type of 'call_assignment_263084' (line 1760)
        call_assignment_263084_268211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 8), 'call_assignment_263084')
        # Assigning a type to the variable 'ppw' (line 1760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 9), 'ppw', call_assignment_263084_268211)
        
        # Assigning a Call to a Name (line 1760):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_268214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1760, 8), 'int')
        # Processing the call keyword arguments
        kwargs_268215 = {}
        # Getting the type of 'call_assignment_263083' (line 1760)
        call_assignment_263083_268212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 8), 'call_assignment_263083', False)
        # Obtaining the member '__getitem__' of a type (line 1760)
        getitem___268213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1760, 8), call_assignment_263083_268212, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_268216 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___268213, *[int_268214], **kwargs_268215)
        
        # Assigning a type to the variable 'call_assignment_263085' (line 1760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 8), 'call_assignment_263085', getitem___call_result_268216)
        
        # Assigning a Name to a Name (line 1760):
        # Getting the type of 'call_assignment_263085' (line 1760)
        call_assignment_263085_268217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 8), 'call_assignment_263085')
        # Assigning a type to the variable 'pph' (line 1760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 14), 'pph', call_assignment_263085_268217)
        
        # Assigning a Call to a Tuple (line 1761):
        
        # Assigning a Call to a Name:
        
        # Call to GetPageSizePixels(...): (line 1761)
        # Processing the call keyword arguments (line 1761)
        kwargs_268220 = {}
        # Getting the type of 'self' (line 1761)
        self_268218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 21), 'self', False)
        # Obtaining the member 'GetPageSizePixels' of a type (line 1761)
        GetPageSizePixels_268219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1761, 21), self_268218, 'GetPageSizePixels')
        # Calling GetPageSizePixels(args, kwargs) (line 1761)
        GetPageSizePixels_call_result_268221 = invoke(stypy.reporting.localization.Localization(__file__, 1761, 21), GetPageSizePixels_268219, *[], **kwargs_268220)
        
        # Assigning a type to the variable 'call_assignment_263086' (line 1761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1761, 8), 'call_assignment_263086', GetPageSizePixels_call_result_268221)
        
        # Assigning a Call to a Name (line 1761):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_268224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1761, 8), 'int')
        # Processing the call keyword arguments
        kwargs_268225 = {}
        # Getting the type of 'call_assignment_263086' (line 1761)
        call_assignment_263086_268222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 8), 'call_assignment_263086', False)
        # Obtaining the member '__getitem__' of a type (line 1761)
        getitem___268223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1761, 8), call_assignment_263086_268222, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_268226 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___268223, *[int_268224], **kwargs_268225)
        
        # Assigning a type to the variable 'call_assignment_263087' (line 1761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1761, 8), 'call_assignment_263087', getitem___call_result_268226)
        
        # Assigning a Name to a Name (line 1761):
        # Getting the type of 'call_assignment_263087' (line 1761)
        call_assignment_263087_268227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 8), 'call_assignment_263087')
        # Assigning a type to the variable 'pgw' (line 1761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1761, 9), 'pgw', call_assignment_263087_268227)
        
        # Assigning a Call to a Name (line 1761):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_268230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1761, 8), 'int')
        # Processing the call keyword arguments
        kwargs_268231 = {}
        # Getting the type of 'call_assignment_263086' (line 1761)
        call_assignment_263086_268228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 8), 'call_assignment_263086', False)
        # Obtaining the member '__getitem__' of a type (line 1761)
        getitem___268229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1761, 8), call_assignment_263086_268228, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_268232 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___268229, *[int_268230], **kwargs_268231)
        
        # Assigning a type to the variable 'call_assignment_263088' (line 1761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1761, 8), 'call_assignment_263088', getitem___call_result_268232)
        
        # Assigning a Name to a Name (line 1761):
        # Getting the type of 'call_assignment_263088' (line 1761)
        call_assignment_263088_268233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 8), 'call_assignment_263088')
        # Assigning a type to the variable 'pgh' (line 1761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1761, 14), 'pgh', call_assignment_263088_268233)
        
        # Assigning a Call to a Tuple (line 1762):
        
        # Assigning a Call to a Name:
        
        # Call to GetSize(...): (line 1762)
        # Processing the call keyword arguments (line 1762)
        kwargs_268236 = {}
        # Getting the type of 'dc' (line 1762)
        dc_268234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 21), 'dc', False)
        # Obtaining the member 'GetSize' of a type (line 1762)
        GetSize_268235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 21), dc_268234, 'GetSize')
        # Calling GetSize(args, kwargs) (line 1762)
        GetSize_call_result_268237 = invoke(stypy.reporting.localization.Localization(__file__, 1762, 21), GetSize_268235, *[], **kwargs_268236)
        
        # Assigning a type to the variable 'call_assignment_263089' (line 1762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'call_assignment_263089', GetSize_call_result_268237)
        
        # Assigning a Call to a Name (line 1762):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_268240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1762, 8), 'int')
        # Processing the call keyword arguments
        kwargs_268241 = {}
        # Getting the type of 'call_assignment_263089' (line 1762)
        call_assignment_263089_268238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'call_assignment_263089', False)
        # Obtaining the member '__getitem__' of a type (line 1762)
        getitem___268239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 8), call_assignment_263089_268238, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_268242 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___268239, *[int_268240], **kwargs_268241)
        
        # Assigning a type to the variable 'call_assignment_263090' (line 1762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'call_assignment_263090', getitem___call_result_268242)
        
        # Assigning a Name to a Name (line 1762):
        # Getting the type of 'call_assignment_263090' (line 1762)
        call_assignment_263090_268243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'call_assignment_263090')
        # Assigning a type to the variable 'dcw' (line 1762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 9), 'dcw', call_assignment_263090_268243)
        
        # Assigning a Call to a Name (line 1762):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_268246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1762, 8), 'int')
        # Processing the call keyword arguments
        kwargs_268247 = {}
        # Getting the type of 'call_assignment_263089' (line 1762)
        call_assignment_263089_268244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'call_assignment_263089', False)
        # Obtaining the member '__getitem__' of a type (line 1762)
        getitem___268245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 8), call_assignment_263089_268244, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_268248 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___268245, *[int_268246], **kwargs_268247)
        
        # Assigning a type to the variable 'call_assignment_263091' (line 1762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'call_assignment_263091', getitem___call_result_268248)
        
        # Assigning a Name to a Name (line 1762):
        # Getting the type of 'call_assignment_263091' (line 1762)
        call_assignment_263091_268249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'call_assignment_263091')
        # Assigning a type to the variable 'dch' (line 1762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 14), 'dch', call_assignment_263091_268249)
        
        # Getting the type of 'wxc' (line 1763)
        wxc_268250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 11), 'wxc')
        # Obtaining the member 'is_phoenix' of a type (line 1763)
        is_phoenix_268251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1763, 11), wxc_268250, 'is_phoenix')
        # Testing the type of an if condition (line 1763)
        if_condition_268252 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1763, 8), is_phoenix_268251)
        # Assigning a type to the variable 'if_condition_268252' (line 1763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 8), 'if_condition_268252', if_condition_268252)
        # SSA begins for if statement (line 1763)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1764):
        
        # Assigning a Call to a Name:
        
        # Call to GetSize(...): (line 1764)
        # Processing the call keyword arguments (line 1764)
        kwargs_268256 = {}
        # Getting the type of 'self' (line 1764)
        self_268253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 25), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1764)
        canvas_268254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1764, 25), self_268253, 'canvas')
        # Obtaining the member 'GetSize' of a type (line 1764)
        GetSize_268255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1764, 25), canvas_268254, 'GetSize')
        # Calling GetSize(args, kwargs) (line 1764)
        GetSize_call_result_268257 = invoke(stypy.reporting.localization.Localization(__file__, 1764, 25), GetSize_268255, *[], **kwargs_268256)
        
        # Assigning a type to the variable 'call_assignment_263092' (line 1764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1764, 12), 'call_assignment_263092', GetSize_call_result_268257)
        
        # Assigning a Call to a Name (line 1764):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_268260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1764, 12), 'int')
        # Processing the call keyword arguments
        kwargs_268261 = {}
        # Getting the type of 'call_assignment_263092' (line 1764)
        call_assignment_263092_268258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 12), 'call_assignment_263092', False)
        # Obtaining the member '__getitem__' of a type (line 1764)
        getitem___268259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1764, 12), call_assignment_263092_268258, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_268262 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___268259, *[int_268260], **kwargs_268261)
        
        # Assigning a type to the variable 'call_assignment_263093' (line 1764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1764, 12), 'call_assignment_263093', getitem___call_result_268262)
        
        # Assigning a Name to a Name (line 1764):
        # Getting the type of 'call_assignment_263093' (line 1764)
        call_assignment_263093_268263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 12), 'call_assignment_263093')
        # Assigning a type to the variable 'grw' (line 1764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1764, 13), 'grw', call_assignment_263093_268263)
        
        # Assigning a Call to a Name (line 1764):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_268266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1764, 12), 'int')
        # Processing the call keyword arguments
        kwargs_268267 = {}
        # Getting the type of 'call_assignment_263092' (line 1764)
        call_assignment_263092_268264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 12), 'call_assignment_263092', False)
        # Obtaining the member '__getitem__' of a type (line 1764)
        getitem___268265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1764, 12), call_assignment_263092_268264, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_268268 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___268265, *[int_268266], **kwargs_268267)
        
        # Assigning a type to the variable 'call_assignment_263094' (line 1764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1764, 12), 'call_assignment_263094', getitem___call_result_268268)
        
        # Assigning a Name to a Name (line 1764):
        # Getting the type of 'call_assignment_263094' (line 1764)
        call_assignment_263094_268269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 12), 'call_assignment_263094')
        # Assigning a type to the variable 'grh' (line 1764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1764, 18), 'grh', call_assignment_263094_268269)
        # SSA branch for the else part of an if statement (line 1763)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 1766):
        
        # Assigning a Call to a Name:
        
        # Call to GetSizeTuple(...): (line 1766)
        # Processing the call keyword arguments (line 1766)
        kwargs_268273 = {}
        # Getting the type of 'self' (line 1766)
        self_268270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 25), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1766)
        canvas_268271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1766, 25), self_268270, 'canvas')
        # Obtaining the member 'GetSizeTuple' of a type (line 1766)
        GetSizeTuple_268272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1766, 25), canvas_268271, 'GetSizeTuple')
        # Calling GetSizeTuple(args, kwargs) (line 1766)
        GetSizeTuple_call_result_268274 = invoke(stypy.reporting.localization.Localization(__file__, 1766, 25), GetSizeTuple_268272, *[], **kwargs_268273)
        
        # Assigning a type to the variable 'call_assignment_263095' (line 1766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1766, 12), 'call_assignment_263095', GetSizeTuple_call_result_268274)
        
        # Assigning a Call to a Name (line 1766):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_268277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, 12), 'int')
        # Processing the call keyword arguments
        kwargs_268278 = {}
        # Getting the type of 'call_assignment_263095' (line 1766)
        call_assignment_263095_268275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 12), 'call_assignment_263095', False)
        # Obtaining the member '__getitem__' of a type (line 1766)
        getitem___268276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1766, 12), call_assignment_263095_268275, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_268279 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___268276, *[int_268277], **kwargs_268278)
        
        # Assigning a type to the variable 'call_assignment_263096' (line 1766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1766, 12), 'call_assignment_263096', getitem___call_result_268279)
        
        # Assigning a Name to a Name (line 1766):
        # Getting the type of 'call_assignment_263096' (line 1766)
        call_assignment_263096_268280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 12), 'call_assignment_263096')
        # Assigning a type to the variable 'grw' (line 1766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1766, 13), 'grw', call_assignment_263096_268280)
        
        # Assigning a Call to a Name (line 1766):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_268283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, 12), 'int')
        # Processing the call keyword arguments
        kwargs_268284 = {}
        # Getting the type of 'call_assignment_263095' (line 1766)
        call_assignment_263095_268281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 12), 'call_assignment_263095', False)
        # Obtaining the member '__getitem__' of a type (line 1766)
        getitem___268282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1766, 12), call_assignment_263095_268281, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_268285 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___268282, *[int_268283], **kwargs_268284)
        
        # Assigning a type to the variable 'call_assignment_263097' (line 1766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1766, 12), 'call_assignment_263097', getitem___call_result_268285)
        
        # Assigning a Name to a Name (line 1766):
        # Getting the type of 'call_assignment_263097' (line 1766)
        call_assignment_263097_268286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 12), 'call_assignment_263097')
        # Assigning a type to the variable 'grh' (line 1766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1766, 18), 'grh', call_assignment_263097_268286)
        # SSA join for if statement (line 1763)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1771):
        
        # Assigning a Call to a Name (line 1771):
        
        # Call to get_facecolor(...): (line 1771)
        # Processing the call keyword arguments (line 1771)
        kwargs_268291 = {}
        # Getting the type of 'self' (line 1771)
        self_268287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 18), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1771)
        canvas_268288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 18), self_268287, 'canvas')
        # Obtaining the member 'figure' of a type (line 1771)
        figure_268289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 18), canvas_268288, 'figure')
        # Obtaining the member 'get_facecolor' of a type (line 1771)
        get_facecolor_268290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 18), figure_268289, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 1771)
        get_facecolor_call_result_268292 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 18), get_facecolor_268290, *[], **kwargs_268291)
        
        # Assigning a type to the variable 'bgcolor' (line 1771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1771, 8), 'bgcolor', get_facecolor_call_result_268292)
        
        # Assigning a Attribute to a Name (line 1772):
        
        # Assigning a Attribute to a Name (line 1772):
        # Getting the type of 'self' (line 1772)
        self_268293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 18), 'self')
        # Obtaining the member 'canvas' of a type (line 1772)
        canvas_268294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1772, 18), self_268293, 'canvas')
        # Obtaining the member 'figure' of a type (line 1772)
        figure_268295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1772, 18), canvas_268294, 'figure')
        # Obtaining the member 'dpi' of a type (line 1772)
        dpi_268296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1772, 18), figure_268295, 'dpi')
        # Assigning a type to the variable 'fig_dpi' (line 1772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1772, 8), 'fig_dpi', dpi_268296)
        
        # Assigning a BinOp to a Name (line 1775):
        
        # Assigning a BinOp to a Name (line 1775):
        
        # Call to float(...): (line 1775)
        # Processing the call arguments (line 1775)
        # Getting the type of 'ppw' (line 1775)
        ppw_268298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 23), 'ppw', False)
        # Processing the call keyword arguments (line 1775)
        kwargs_268299 = {}
        # Getting the type of 'float' (line 1775)
        float_268297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 17), 'float', False)
        # Calling float(args, kwargs) (line 1775)
        float_call_result_268300 = invoke(stypy.reporting.localization.Localization(__file__, 1775, 17), float_268297, *[ppw_268298], **kwargs_268299)
        
        # Getting the type of 'fig_dpi' (line 1775)
        fig_dpi_268301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 30), 'fig_dpi')
        # Applying the binary operator 'div' (line 1775)
        result_div_268302 = python_operator(stypy.reporting.localization.Localization(__file__, 1775, 17), 'div', float_call_result_268300, fig_dpi_268301)
        
        # Assigning a type to the variable 'vscale' (line 1775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 8), 'vscale', result_div_268302)
        
        # Assigning a Name to a Attribute (line 1778):
        
        # Assigning a Name to a Attribute (line 1778):
        # Getting the type of 'ppw' (line 1778)
        ppw_268303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 33), 'ppw')
        # Getting the type of 'self' (line 1778)
        self_268304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'self')
        # Obtaining the member 'canvas' of a type (line 1778)
        canvas_268305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 8), self_268304, 'canvas')
        # Obtaining the member 'figure' of a type (line 1778)
        figure_268306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 8), canvas_268305, 'figure')
        # Setting the type of the member 'dpi' of a type (line 1778)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 8), figure_268306, 'dpi', ppw_268303)
        
        # Call to set_facecolor(...): (line 1779)
        # Processing the call arguments (line 1779)
        unicode_268311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1779, 41), 'unicode', u'#FFFFFF')
        # Processing the call keyword arguments (line 1779)
        kwargs_268312 = {}
        # Getting the type of 'self' (line 1779)
        self_268307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1779)
        canvas_268308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1779, 8), self_268307, 'canvas')
        # Obtaining the member 'figure' of a type (line 1779)
        figure_268309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1779, 8), canvas_268308, 'figure')
        # Obtaining the member 'set_facecolor' of a type (line 1779)
        set_facecolor_268310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1779, 8), figure_268309, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 1779)
        set_facecolor_call_result_268313 = invoke(stypy.reporting.localization.Localization(__file__, 1779, 8), set_facecolor_268310, *[unicode_268311], **kwargs_268312)
        
        
        # Assigning a Call to a Name (line 1781):
        
        # Assigning a Call to a Name (line 1781):
        
        # Call to RendererWx(...): (line 1781)
        # Processing the call arguments (line 1781)
        # Getting the type of 'self' (line 1781)
        self_268315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 30), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1781)
        canvas_268316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 30), self_268315, 'canvas')
        # Obtaining the member 'bitmap' of a type (line 1781)
        bitmap_268317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 30), canvas_268316, 'bitmap')
        # Getting the type of 'self' (line 1781)
        self_268318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 50), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1781)
        canvas_268319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 50), self_268318, 'canvas')
        # Obtaining the member 'figure' of a type (line 1781)
        figure_268320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 50), canvas_268319, 'figure')
        # Obtaining the member 'dpi' of a type (line 1781)
        dpi_268321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 50), figure_268320, 'dpi')
        # Processing the call keyword arguments (line 1781)
        kwargs_268322 = {}
        # Getting the type of 'RendererWx' (line 1781)
        RendererWx_268314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 19), 'RendererWx', False)
        # Calling RendererWx(args, kwargs) (line 1781)
        RendererWx_call_result_268323 = invoke(stypy.reporting.localization.Localization(__file__, 1781, 19), RendererWx_268314, *[bitmap_268317, dpi_268321], **kwargs_268322)
        
        # Assigning a type to the variable 'renderer' (line 1781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1781, 8), 'renderer', RendererWx_call_result_268323)
        
        # Call to draw(...): (line 1782)
        # Processing the call arguments (line 1782)
        # Getting the type of 'renderer' (line 1782)
        renderer_268328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 32), 'renderer', False)
        # Processing the call keyword arguments (line 1782)
        kwargs_268329 = {}
        # Getting the type of 'self' (line 1782)
        self_268324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1782)
        canvas_268325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 8), self_268324, 'canvas')
        # Obtaining the member 'figure' of a type (line 1782)
        figure_268326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 8), canvas_268325, 'figure')
        # Obtaining the member 'draw' of a type (line 1782)
        draw_268327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 8), figure_268326, 'draw')
        # Calling draw(args, kwargs) (line 1782)
        draw_call_result_268330 = invoke(stypy.reporting.localization.Localization(__file__, 1782, 8), draw_268327, *[renderer_268328], **kwargs_268329)
        
        
        # Call to SetWidth(...): (line 1783)
        # Processing the call arguments (line 1783)
        
        # Call to int(...): (line 1784)
        # Processing the call arguments (line 1784)
        
        # Call to GetWidth(...): (line 1784)
        # Processing the call keyword arguments (line 1784)
        kwargs_268340 = {}
        # Getting the type of 'self' (line 1784)
        self_268336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1784)
        canvas_268337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 16), self_268336, 'canvas')
        # Obtaining the member 'bitmap' of a type (line 1784)
        bitmap_268338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 16), canvas_268337, 'bitmap')
        # Obtaining the member 'GetWidth' of a type (line 1784)
        GetWidth_268339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 16), bitmap_268338, 'GetWidth')
        # Calling GetWidth(args, kwargs) (line 1784)
        GetWidth_call_result_268341 = invoke(stypy.reporting.localization.Localization(__file__, 1784, 16), GetWidth_268339, *[], **kwargs_268340)
        
        # Getting the type of 'vscale' (line 1784)
        vscale_268342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 48), 'vscale', False)
        # Applying the binary operator '*' (line 1784)
        result_mul_268343 = python_operator(stypy.reporting.localization.Localization(__file__, 1784, 16), '*', GetWidth_call_result_268341, vscale_268342)
        
        # Processing the call keyword arguments (line 1784)
        kwargs_268344 = {}
        # Getting the type of 'int' (line 1784)
        int_268335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 12), 'int', False)
        # Calling int(args, kwargs) (line 1784)
        int_call_result_268345 = invoke(stypy.reporting.localization.Localization(__file__, 1784, 12), int_268335, *[result_mul_268343], **kwargs_268344)
        
        # Processing the call keyword arguments (line 1783)
        kwargs_268346 = {}
        # Getting the type of 'self' (line 1783)
        self_268331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1783)
        canvas_268332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1783, 8), self_268331, 'canvas')
        # Obtaining the member 'bitmap' of a type (line 1783)
        bitmap_268333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1783, 8), canvas_268332, 'bitmap')
        # Obtaining the member 'SetWidth' of a type (line 1783)
        SetWidth_268334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1783, 8), bitmap_268333, 'SetWidth')
        # Calling SetWidth(args, kwargs) (line 1783)
        SetWidth_call_result_268347 = invoke(stypy.reporting.localization.Localization(__file__, 1783, 8), SetWidth_268334, *[int_call_result_268345], **kwargs_268346)
        
        
        # Call to SetHeight(...): (line 1785)
        # Processing the call arguments (line 1785)
        
        # Call to int(...): (line 1786)
        # Processing the call arguments (line 1786)
        
        # Call to GetHeight(...): (line 1786)
        # Processing the call keyword arguments (line 1786)
        kwargs_268357 = {}
        # Getting the type of 'self' (line 1786)
        self_268353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1786)
        canvas_268354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1786, 16), self_268353, 'canvas')
        # Obtaining the member 'bitmap' of a type (line 1786)
        bitmap_268355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1786, 16), canvas_268354, 'bitmap')
        # Obtaining the member 'GetHeight' of a type (line 1786)
        GetHeight_268356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1786, 16), bitmap_268355, 'GetHeight')
        # Calling GetHeight(args, kwargs) (line 1786)
        GetHeight_call_result_268358 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 16), GetHeight_268356, *[], **kwargs_268357)
        
        # Getting the type of 'vscale' (line 1786)
        vscale_268359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 49), 'vscale', False)
        # Applying the binary operator '*' (line 1786)
        result_mul_268360 = python_operator(stypy.reporting.localization.Localization(__file__, 1786, 16), '*', GetHeight_call_result_268358, vscale_268359)
        
        # Processing the call keyword arguments (line 1786)
        kwargs_268361 = {}
        # Getting the type of 'int' (line 1786)
        int_268352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 12), 'int', False)
        # Calling int(args, kwargs) (line 1786)
        int_call_result_268362 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 12), int_268352, *[result_mul_268360], **kwargs_268361)
        
        # Processing the call keyword arguments (line 1785)
        kwargs_268363 = {}
        # Getting the type of 'self' (line 1785)
        self_268348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1785)
        canvas_268349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1785, 8), self_268348, 'canvas')
        # Obtaining the member 'bitmap' of a type (line 1785)
        bitmap_268350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1785, 8), canvas_268349, 'bitmap')
        # Obtaining the member 'SetHeight' of a type (line 1785)
        SetHeight_268351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1785, 8), bitmap_268350, 'SetHeight')
        # Calling SetHeight(args, kwargs) (line 1785)
        SetHeight_call_result_268364 = invoke(stypy.reporting.localization.Localization(__file__, 1785, 8), SetHeight_268351, *[int_call_result_268362], **kwargs_268363)
        
        
        # Call to draw(...): (line 1787)
        # Processing the call keyword arguments (line 1787)
        kwargs_268368 = {}
        # Getting the type of 'self' (line 1787)
        self_268365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1787)
        canvas_268366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 8), self_268365, 'canvas')
        # Obtaining the member 'draw' of a type (line 1787)
        draw_268367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 8), canvas_268366, 'draw')
        # Calling draw(args, kwargs) (line 1787)
        draw_call_result_268369 = invoke(stypy.reporting.localization.Localization(__file__, 1787, 8), draw_268367, *[], **kwargs_268368)
        
        
        # Assigning a Num to a Name (line 1790):
        
        # Assigning a Num to a Name (line 1790):
        float_268370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1790, 21), 'float')
        # Assigning a type to the variable 'page_scale' (line 1790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 8), 'page_scale', float_268370)
        
        
        # Call to IsPreview(...): (line 1791)
        # Processing the call keyword arguments (line 1791)
        kwargs_268373 = {}
        # Getting the type of 'self' (line 1791)
        self_268371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 11), 'self', False)
        # Obtaining the member 'IsPreview' of a type (line 1791)
        IsPreview_268372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1791, 11), self_268371, 'IsPreview')
        # Calling IsPreview(args, kwargs) (line 1791)
        IsPreview_call_result_268374 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 11), IsPreview_268372, *[], **kwargs_268373)
        
        # Testing the type of an if condition (line 1791)
        if_condition_268375 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1791, 8), IsPreview_call_result_268374)
        # Assigning a type to the variable 'if_condition_268375' (line 1791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1791, 8), 'if_condition_268375', if_condition_268375)
        # SSA begins for if statement (line 1791)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1792):
        
        # Assigning a BinOp to a Name (line 1792):
        
        # Call to float(...): (line 1792)
        # Processing the call arguments (line 1792)
        # Getting the type of 'dcw' (line 1792)
        dcw_268377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 31), 'dcw', False)
        # Processing the call keyword arguments (line 1792)
        kwargs_268378 = {}
        # Getting the type of 'float' (line 1792)
        float_268376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 25), 'float', False)
        # Calling float(args, kwargs) (line 1792)
        float_call_result_268379 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 25), float_268376, *[dcw_268377], **kwargs_268378)
        
        # Getting the type of 'pgw' (line 1792)
        pgw_268380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 38), 'pgw')
        # Applying the binary operator 'div' (line 1792)
        result_div_268381 = python_operator(stypy.reporting.localization.Localization(__file__, 1792, 25), 'div', float_call_result_268379, pgw_268380)
        
        # Assigning a type to the variable 'page_scale' (line 1792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1792, 12), 'page_scale', result_div_268381)
        # SSA join for if statement (line 1791)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1795):
        
        # Assigning a Call to a Name (line 1795):
        
        # Call to int(...): (line 1795)
        # Processing the call arguments (line 1795)
        # Getting the type of 'self' (line 1795)
        self_268383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 25), 'self', False)
        # Obtaining the member 'margin' of a type (line 1795)
        margin_268384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1795, 25), self_268383, 'margin')
        # Getting the type of 'pph' (line 1795)
        pph_268385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 39), 'pph', False)
        # Applying the binary operator '*' (line 1795)
        result_mul_268386 = python_operator(stypy.reporting.localization.Localization(__file__, 1795, 25), '*', margin_268384, pph_268385)
        
        # Getting the type of 'page_scale' (line 1795)
        page_scale_268387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 45), 'page_scale', False)
        # Applying the binary operator '*' (line 1795)
        result_mul_268388 = python_operator(stypy.reporting.localization.Localization(__file__, 1795, 43), '*', result_mul_268386, page_scale_268387)
        
        # Processing the call keyword arguments (line 1795)
        kwargs_268389 = {}
        # Getting the type of 'int' (line 1795)
        int_268382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 21), 'int', False)
        # Calling int(args, kwargs) (line 1795)
        int_call_result_268390 = invoke(stypy.reporting.localization.Localization(__file__, 1795, 21), int_268382, *[result_mul_268388], **kwargs_268389)
        
        # Assigning a type to the variable 'top_margin' (line 1795)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 8), 'top_margin', int_call_result_268390)
        
        # Assigning a Call to a Name (line 1796):
        
        # Assigning a Call to a Name (line 1796):
        
        # Call to int(...): (line 1796)
        # Processing the call arguments (line 1796)
        # Getting the type of 'self' (line 1796)
        self_268392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 26), 'self', False)
        # Obtaining the member 'margin' of a type (line 1796)
        margin_268393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1796, 26), self_268392, 'margin')
        # Getting the type of 'ppw' (line 1796)
        ppw_268394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 40), 'ppw', False)
        # Applying the binary operator '*' (line 1796)
        result_mul_268395 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 26), '*', margin_268393, ppw_268394)
        
        # Getting the type of 'page_scale' (line 1796)
        page_scale_268396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 46), 'page_scale', False)
        # Applying the binary operator '*' (line 1796)
        result_mul_268397 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 44), '*', result_mul_268395, page_scale_268396)
        
        # Processing the call keyword arguments (line 1796)
        kwargs_268398 = {}
        # Getting the type of 'int' (line 1796)
        int_268391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 22), 'int', False)
        # Calling int(args, kwargs) (line 1796)
        int_call_result_268399 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 22), int_268391, *[result_mul_268397], **kwargs_268398)
        
        # Assigning a type to the variable 'left_margin' (line 1796)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1796, 8), 'left_margin', int_call_result_268399)
        
        # Assigning a BinOp to a Name (line 1800):
        
        # Assigning a BinOp to a Name (line 1800):
        # Getting the type of 'self' (line 1800)
        self_268400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 22), 'self')
        # Obtaining the member 'width' of a type (line 1800)
        width_268401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1800, 22), self_268400, 'width')
        # Getting the type of 'fig_dpi' (line 1800)
        fig_dpi_268402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 35), 'fig_dpi')
        # Applying the binary operator '*' (line 1800)
        result_mul_268403 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 22), '*', width_268401, fig_dpi_268402)
        
        # Getting the type of 'page_scale' (line 1800)
        page_scale_268404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 45), 'page_scale')
        # Applying the binary operator '*' (line 1800)
        result_mul_268405 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 43), '*', result_mul_268403, page_scale_268404)
        
        
        # Call to float(...): (line 1800)
        # Processing the call arguments (line 1800)
        # Getting the type of 'grw' (line 1800)
        grw_268407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 65), 'grw', False)
        # Processing the call keyword arguments (line 1800)
        kwargs_268408 = {}
        # Getting the type of 'float' (line 1800)
        float_268406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 59), 'float', False)
        # Calling float(args, kwargs) (line 1800)
        float_call_result_268409 = invoke(stypy.reporting.localization.Localization(__file__, 1800, 59), float_268406, *[grw_268407], **kwargs_268408)
        
        # Applying the binary operator 'div' (line 1800)
        result_div_268410 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 21), 'div', result_mul_268405, float_call_result_268409)
        
        # Assigning a type to the variable 'user_scale' (line 1800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 8), 'user_scale', result_div_268410)
        
        # Call to SetDeviceOrigin(...): (line 1802)
        # Processing the call arguments (line 1802)
        # Getting the type of 'left_margin' (line 1802)
        left_margin_268413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 27), 'left_margin', False)
        # Getting the type of 'top_margin' (line 1802)
        top_margin_268414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 40), 'top_margin', False)
        # Processing the call keyword arguments (line 1802)
        kwargs_268415 = {}
        # Getting the type of 'dc' (line 1802)
        dc_268411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 8), 'dc', False)
        # Obtaining the member 'SetDeviceOrigin' of a type (line 1802)
        SetDeviceOrigin_268412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 8), dc_268411, 'SetDeviceOrigin')
        # Calling SetDeviceOrigin(args, kwargs) (line 1802)
        SetDeviceOrigin_call_result_268416 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 8), SetDeviceOrigin_268412, *[left_margin_268413, top_margin_268414], **kwargs_268415)
        
        
        # Call to SetUserScale(...): (line 1803)
        # Processing the call arguments (line 1803)
        # Getting the type of 'user_scale' (line 1803)
        user_scale_268419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 24), 'user_scale', False)
        # Getting the type of 'user_scale' (line 1803)
        user_scale_268420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 36), 'user_scale', False)
        # Processing the call keyword arguments (line 1803)
        kwargs_268421 = {}
        # Getting the type of 'dc' (line 1803)
        dc_268417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 8), 'dc', False)
        # Obtaining the member 'SetUserScale' of a type (line 1803)
        SetUserScale_268418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1803, 8), dc_268417, 'SetUserScale')
        # Calling SetUserScale(args, kwargs) (line 1803)
        SetUserScale_call_result_268422 = invoke(stypy.reporting.localization.Localization(__file__, 1803, 8), SetUserScale_268418, *[user_scale_268419, user_scale_268420], **kwargs_268421)
        
        
        
        # SSA begins for try-except statement (line 1806)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to DrawBitmap(...): (line 1807)
        # Processing the call arguments (line 1807)
        # Getting the type of 'self' (line 1807)
        self_268425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 26), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1807)
        canvas_268426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 26), self_268425, 'canvas')
        # Obtaining the member 'bitmap' of a type (line 1807)
        bitmap_268427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 26), canvas_268426, 'bitmap')
        int_268428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 46), 'int')
        int_268429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 49), 'int')
        # Processing the call keyword arguments (line 1807)
        kwargs_268430 = {}
        # Getting the type of 'dc' (line 1807)
        dc_268423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 12), 'dc', False)
        # Obtaining the member 'DrawBitmap' of a type (line 1807)
        DrawBitmap_268424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 12), dc_268423, 'DrawBitmap')
        # Calling DrawBitmap(args, kwargs) (line 1807)
        DrawBitmap_call_result_268431 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 12), DrawBitmap_268424, *[bitmap_268427, int_268428, int_268429], **kwargs_268430)
        
        # SSA branch for the except part of a try statement (line 1806)
        # SSA branch for the except '<any exception>' branch of a try statement (line 1806)
        module_type_store.open_ssa_branch('except')
        
        
        # SSA begins for try-except statement (line 1809)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to DrawBitmap(...): (line 1810)
        # Processing the call arguments (line 1810)
        # Getting the type of 'self' (line 1810)
        self_268434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 30), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1810)
        canvas_268435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1810, 30), self_268434, 'canvas')
        # Obtaining the member 'bitmap' of a type (line 1810)
        bitmap_268436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1810, 30), canvas_268435, 'bitmap')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1810)
        tuple_268437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 51), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1810)
        # Adding element type (line 1810)
        int_268438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 51), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 51), tuple_268437, int_268438)
        # Adding element type (line 1810)
        int_268439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 54), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 51), tuple_268437, int_268439)
        
        # Processing the call keyword arguments (line 1810)
        kwargs_268440 = {}
        # Getting the type of 'dc' (line 1810)
        dc_268432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 16), 'dc', False)
        # Obtaining the member 'DrawBitmap' of a type (line 1810)
        DrawBitmap_268433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1810, 16), dc_268432, 'DrawBitmap')
        # Calling DrawBitmap(args, kwargs) (line 1810)
        DrawBitmap_call_result_268441 = invoke(stypy.reporting.localization.Localization(__file__, 1810, 16), DrawBitmap_268433, *[bitmap_268436, tuple_268437], **kwargs_268440)
        
        # SSA branch for the except part of a try statement (line 1809)
        # SSA branch for the except '<any exception>' branch of a try statement (line 1809)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1809)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for try-except statement (line 1806)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_facecolor(...): (line 1815)
        # Processing the call arguments (line 1815)
        # Getting the type of 'bgcolor' (line 1815)
        bgcolor_268446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 41), 'bgcolor', False)
        # Processing the call keyword arguments (line 1815)
        kwargs_268447 = {}
        # Getting the type of 'self' (line 1815)
        self_268442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1815)
        canvas_268443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 8), self_268442, 'canvas')
        # Obtaining the member 'figure' of a type (line 1815)
        figure_268444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 8), canvas_268443, 'figure')
        # Obtaining the member 'set_facecolor' of a type (line 1815)
        set_facecolor_268445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 8), figure_268444, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 1815)
        set_facecolor_call_result_268448 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 8), set_facecolor_268445, *[bgcolor_268446], **kwargs_268447)
        
        
        # Assigning a Name to a Attribute (line 1816):
        
        # Assigning a Name to a Attribute (line 1816):
        # Getting the type of 'fig_dpi' (line 1816)
        fig_dpi_268449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 33), 'fig_dpi')
        # Getting the type of 'self' (line 1816)
        self_268450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 8), 'self')
        # Obtaining the member 'canvas' of a type (line 1816)
        canvas_268451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1816, 8), self_268450, 'canvas')
        # Obtaining the member 'figure' of a type (line 1816)
        figure_268452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1816, 8), canvas_268451, 'figure')
        # Setting the type of the member 'dpi' of a type (line 1816)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1816, 8), figure_268452, 'dpi', fig_dpi_268449)
        
        # Call to draw(...): (line 1817)
        # Processing the call keyword arguments (line 1817)
        kwargs_268456 = {}
        # Getting the type of 'self' (line 1817)
        self_268453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1817)
        canvas_268454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 8), self_268453, 'canvas')
        # Obtaining the member 'draw' of a type (line 1817)
        draw_268455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 8), canvas_268454, 'draw')
        # Calling draw(args, kwargs) (line 1817)
        draw_call_result_268457 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 8), draw_268455, *[], **kwargs_268456)
        
        # Getting the type of 'True' (line 1818)
        True_268458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1818, 8), 'stypy_return_type', True_268458)
        
        # ################# End of 'OnPrintPage(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'OnPrintPage' in the type store
        # Getting the type of 'stypy_return_type' (line 1756)
        stypy_return_type_268459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268459)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'OnPrintPage'
        return stypy_return_type_268459


# Assigning a type to the variable 'PrintoutWx' (line 1735)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 0), 'PrintoutWx', PrintoutWx)

# Assigning a Name to a Name (line 1827):

# Assigning a Name to a Name (line 1827):
# Getting the type of 'NavigationToolbar2Wx' (line 1827)
NavigationToolbar2Wx_268460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 10), 'NavigationToolbar2Wx')
# Assigning a type to the variable 'Toolbar' (line 1827)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 0), 'Toolbar', NavigationToolbar2Wx_268460)
# Declaration of the '_BackendWx' class
# Getting the type of '_Backend' (line 1831)
_Backend_268461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 17), '_Backend')

class _BackendWx(_Backend_268461, ):
    
    # Assigning a Name to a Name (line 1832):
    
    # Assigning a Name to a Name (line 1833):
    
    # Assigning a Name to a Name (line 1834):

    @staticmethod
    @norecursion
    def trigger_manager_draw(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'trigger_manager_draw'
        module_type_store = module_type_store.open_function_context('trigger_manager_draw', 1836, 4, False)
        
        # Passed parameters checking function
        _BackendWx.trigger_manager_draw.__dict__.__setitem__('stypy_localization', localization)
        _BackendWx.trigger_manager_draw.__dict__.__setitem__('stypy_type_of_self', None)
        _BackendWx.trigger_manager_draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BackendWx.trigger_manager_draw.__dict__.__setitem__('stypy_function_name', 'trigger_manager_draw')
        _BackendWx.trigger_manager_draw.__dict__.__setitem__('stypy_param_names_list', ['manager'])
        _BackendWx.trigger_manager_draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        _BackendWx.trigger_manager_draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _BackendWx.trigger_manager_draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BackendWx.trigger_manager_draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BackendWx.trigger_manager_draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BackendWx.trigger_manager_draw.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, 'trigger_manager_draw', ['manager'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'trigger_manager_draw', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'trigger_manager_draw(...)' code ##################

        
        # Call to draw_idle(...): (line 1838)
        # Processing the call keyword arguments (line 1838)
        kwargs_268465 = {}
        # Getting the type of 'manager' (line 1838)
        manager_268462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 8), 'manager', False)
        # Obtaining the member 'canvas' of a type (line 1838)
        canvas_268463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1838, 8), manager_268462, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 1838)
        draw_idle_268464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1838, 8), canvas_268463, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 1838)
        draw_idle_call_result_268466 = invoke(stypy.reporting.localization.Localization(__file__, 1838, 8), draw_idle_268464, *[], **kwargs_268465)
        
        
        # ################# End of 'trigger_manager_draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'trigger_manager_draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1836)
        stypy_return_type_268467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268467)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'trigger_manager_draw'
        return stypy_return_type_268467


    @norecursion
    def new_figure_manager(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_figure_manager'
        module_type_store = module_type_store.open_function_context('new_figure_manager', 1840, 4, False)
        # Assigning a type to the variable 'self' (line 1841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _BackendWx.new_figure_manager.__dict__.__setitem__('stypy_localization', localization)
        _BackendWx.new_figure_manager.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _BackendWx.new_figure_manager.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BackendWx.new_figure_manager.__dict__.__setitem__('stypy_function_name', '_BackendWx.new_figure_manager')
        _BackendWx.new_figure_manager.__dict__.__setitem__('stypy_param_names_list', ['num'])
        _BackendWx.new_figure_manager.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _BackendWx.new_figure_manager.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _BackendWx.new_figure_manager.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BackendWx.new_figure_manager.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BackendWx.new_figure_manager.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BackendWx.new_figure_manager.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_BackendWx.new_figure_manager', ['num'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_figure_manager', localization, ['num'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_figure_manager(...)' code ##################

        
        # Assigning a Call to a Name (line 1843):
        
        # Assigning a Call to a Name (line 1843):
        
        # Call to GetApp(...): (line 1843)
        # Processing the call keyword arguments (line 1843)
        kwargs_268470 = {}
        # Getting the type of 'wx' (line 1843)
        wx_268468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 16), 'wx', False)
        # Obtaining the member 'GetApp' of a type (line 1843)
        GetApp_268469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1843, 16), wx_268468, 'GetApp')
        # Calling GetApp(args, kwargs) (line 1843)
        GetApp_call_result_268471 = invoke(stypy.reporting.localization.Localization(__file__, 1843, 16), GetApp_268469, *[], **kwargs_268470)
        
        # Assigning a type to the variable 'wxapp' (line 1843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1843, 8), 'wxapp', GetApp_call_result_268471)
        
        # Type idiom detected: calculating its left and rigth part (line 1844)
        # Getting the type of 'wxapp' (line 1844)
        wxapp_268472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 11), 'wxapp')
        # Getting the type of 'None' (line 1844)
        None_268473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 20), 'None')
        
        (may_be_268474, more_types_in_union_268475) = may_be_none(wxapp_268472, None_268473)

        if may_be_268474:

            if more_types_in_union_268475:
                # Runtime conditional SSA (line 1844)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1845):
            
            # Assigning a Call to a Name (line 1845):
            
            # Call to App(...): (line 1845)
            # Processing the call arguments (line 1845)
            # Getting the type of 'False' (line 1845)
            False_268478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 27), 'False', False)
            # Processing the call keyword arguments (line 1845)
            kwargs_268479 = {}
            # Getting the type of 'wx' (line 1845)
            wx_268476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 20), 'wx', False)
            # Obtaining the member 'App' of a type (line 1845)
            App_268477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 20), wx_268476, 'App')
            # Calling App(args, kwargs) (line 1845)
            App_call_result_268480 = invoke(stypy.reporting.localization.Localization(__file__, 1845, 20), App_268477, *[False_268478], **kwargs_268479)
            
            # Assigning a type to the variable 'wxapp' (line 1845)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1845, 12), 'wxapp', App_call_result_268480)
            
            # Call to SetExitOnFrameDelete(...): (line 1846)
            # Processing the call arguments (line 1846)
            # Getting the type of 'True' (line 1846)
            True_268483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 39), 'True', False)
            # Processing the call keyword arguments (line 1846)
            kwargs_268484 = {}
            # Getting the type of 'wxapp' (line 1846)
            wxapp_268481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 12), 'wxapp', False)
            # Obtaining the member 'SetExitOnFrameDelete' of a type (line 1846)
            SetExitOnFrameDelete_268482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1846, 12), wxapp_268481, 'SetExitOnFrameDelete')
            # Calling SetExitOnFrameDelete(args, kwargs) (line 1846)
            SetExitOnFrameDelete_call_result_268485 = invoke(stypy.reporting.localization.Localization(__file__, 1846, 12), SetExitOnFrameDelete_268482, *[True_268483], **kwargs_268484)
            
            
            # Assigning a Name to a Attribute (line 1849):
            
            # Assigning a Name to a Attribute (line 1849):
            # Getting the type of 'wxapp' (line 1849)
            wxapp_268486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 35), 'wxapp')
            # Getting the type of '_BackendWx' (line 1849)
            _BackendWx_268487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), '_BackendWx')
            # Setting the type of the member '_theWxApp' of a type (line 1849)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 12), _BackendWx_268487, '_theWxApp', wxapp_268486)

            if more_types_in_union_268475:
                # SSA join for if statement (line 1844)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to new_figure_manager(...): (line 1850)
        # Processing the call arguments (line 1850)
        # Getting the type of 'num' (line 1850)
        num_268494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 57), 'num', False)
        # Getting the type of 'args' (line 1850)
        args_268495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 63), 'args', False)
        # Processing the call keyword arguments (line 1850)
        # Getting the type of 'kwargs' (line 1850)
        kwargs_268496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 71), 'kwargs', False)
        kwargs_268497 = {'kwargs_268496': kwargs_268496}
        
        # Call to super(...): (line 1850)
        # Processing the call arguments (line 1850)
        # Getting the type of '_BackendWx' (line 1850)
        _BackendWx_268489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 21), '_BackendWx', False)
        # Getting the type of 'cls' (line 1850)
        cls_268490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 33), 'cls', False)
        # Processing the call keyword arguments (line 1850)
        kwargs_268491 = {}
        # Getting the type of 'super' (line 1850)
        super_268488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 15), 'super', False)
        # Calling super(args, kwargs) (line 1850)
        super_call_result_268492 = invoke(stypy.reporting.localization.Localization(__file__, 1850, 15), super_268488, *[_BackendWx_268489, cls_268490], **kwargs_268491)
        
        # Obtaining the member 'new_figure_manager' of a type (line 1850)
        new_figure_manager_268493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1850, 15), super_call_result_268492, 'new_figure_manager')
        # Calling new_figure_manager(args, kwargs) (line 1850)
        new_figure_manager_call_result_268498 = invoke(stypy.reporting.localization.Localization(__file__, 1850, 15), new_figure_manager_268493, *[num_268494, args_268495], **kwargs_268497)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1850)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1850, 8), 'stypy_return_type', new_figure_manager_call_result_268498)
        
        # ################# End of 'new_figure_manager(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_figure_manager' in the type store
        # Getting the type of 'stypy_return_type' (line 1840)
        stypy_return_type_268499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268499)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_figure_manager'
        return stypy_return_type_268499


    @norecursion
    def new_figure_manager_given_figure(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_figure_manager_given_figure'
        module_type_store = module_type_store.open_function_context('new_figure_manager_given_figure', 1852, 4, False)
        # Assigning a type to the variable 'self' (line 1853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1853, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _BackendWx.new_figure_manager_given_figure.__dict__.__setitem__('stypy_localization', localization)
        _BackendWx.new_figure_manager_given_figure.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _BackendWx.new_figure_manager_given_figure.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BackendWx.new_figure_manager_given_figure.__dict__.__setitem__('stypy_function_name', '_BackendWx.new_figure_manager_given_figure')
        _BackendWx.new_figure_manager_given_figure.__dict__.__setitem__('stypy_param_names_list', ['num', 'figure'])
        _BackendWx.new_figure_manager_given_figure.__dict__.__setitem__('stypy_varargs_param_name', None)
        _BackendWx.new_figure_manager_given_figure.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _BackendWx.new_figure_manager_given_figure.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BackendWx.new_figure_manager_given_figure.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BackendWx.new_figure_manager_given_figure.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BackendWx.new_figure_manager_given_figure.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_BackendWx.new_figure_manager_given_figure', ['num', 'figure'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_figure_manager_given_figure', localization, ['num', 'figure'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_figure_manager_given_figure(...)' code ##################

        
        # Assigning a Call to a Name (line 1854):
        
        # Assigning a Call to a Name (line 1854):
        
        # Call to _frame_class(...): (line 1854)
        # Processing the call arguments (line 1854)
        # Getting the type of 'num' (line 1854)
        num_268502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 33), 'num', False)
        # Getting the type of 'figure' (line 1854)
        figure_268503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 38), 'figure', False)
        # Processing the call keyword arguments (line 1854)
        kwargs_268504 = {}
        # Getting the type of 'cls' (line 1854)
        cls_268500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 16), 'cls', False)
        # Obtaining the member '_frame_class' of a type (line 1854)
        _frame_class_268501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 16), cls_268500, '_frame_class')
        # Calling _frame_class(args, kwargs) (line 1854)
        _frame_class_call_result_268505 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 16), _frame_class_268501, *[num_268502, figure_268503], **kwargs_268504)
        
        # Assigning a type to the variable 'frame' (line 1854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 8), 'frame', _frame_class_call_result_268505)
        
        # Assigning a Call to a Name (line 1855):
        
        # Assigning a Call to a Name (line 1855):
        
        # Call to get_figure_manager(...): (line 1855)
        # Processing the call keyword arguments (line 1855)
        kwargs_268508 = {}
        # Getting the type of 'frame' (line 1855)
        frame_268506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 17), 'frame', False)
        # Obtaining the member 'get_figure_manager' of a type (line 1855)
        get_figure_manager_268507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1855, 17), frame_268506, 'get_figure_manager')
        # Calling get_figure_manager(args, kwargs) (line 1855)
        get_figure_manager_call_result_268509 = invoke(stypy.reporting.localization.Localization(__file__, 1855, 17), get_figure_manager_268507, *[], **kwargs_268508)
        
        # Assigning a type to the variable 'figmgr' (line 1855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1855, 8), 'figmgr', get_figure_manager_call_result_268509)
        
        
        # Call to is_interactive(...): (line 1856)
        # Processing the call keyword arguments (line 1856)
        kwargs_268512 = {}
        # Getting the type of 'matplotlib' (line 1856)
        matplotlib_268510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 11), 'matplotlib', False)
        # Obtaining the member 'is_interactive' of a type (line 1856)
        is_interactive_268511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 11), matplotlib_268510, 'is_interactive')
        # Calling is_interactive(args, kwargs) (line 1856)
        is_interactive_call_result_268513 = invoke(stypy.reporting.localization.Localization(__file__, 1856, 11), is_interactive_268511, *[], **kwargs_268512)
        
        # Testing the type of an if condition (line 1856)
        if_condition_268514 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1856, 8), is_interactive_call_result_268513)
        # Assigning a type to the variable 'if_condition_268514' (line 1856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1856, 8), 'if_condition_268514', if_condition_268514)
        # SSA begins for if statement (line 1856)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to Show(...): (line 1857)
        # Processing the call keyword arguments (line 1857)
        kwargs_268518 = {}
        # Getting the type of 'figmgr' (line 1857)
        figmgr_268515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 12), 'figmgr', False)
        # Obtaining the member 'frame' of a type (line 1857)
        frame_268516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1857, 12), figmgr_268515, 'frame')
        # Obtaining the member 'Show' of a type (line 1857)
        Show_268517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1857, 12), frame_268516, 'Show')
        # Calling Show(args, kwargs) (line 1857)
        Show_call_result_268519 = invoke(stypy.reporting.localization.Localization(__file__, 1857, 12), Show_268517, *[], **kwargs_268518)
        
        
        # Call to draw_idle(...): (line 1858)
        # Processing the call keyword arguments (line 1858)
        kwargs_268523 = {}
        # Getting the type of 'figure' (line 1858)
        figure_268520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 12), 'figure', False)
        # Obtaining the member 'canvas' of a type (line 1858)
        canvas_268521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1858, 12), figure_268520, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 1858)
        draw_idle_268522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1858, 12), canvas_268521, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 1858)
        draw_idle_call_result_268524 = invoke(stypy.reporting.localization.Localization(__file__, 1858, 12), draw_idle_268522, *[], **kwargs_268523)
        
        # SSA join for if statement (line 1856)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'figmgr' (line 1859)
        figmgr_268525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 15), 'figmgr')
        # Assigning a type to the variable 'stypy_return_type' (line 1859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1859, 8), 'stypy_return_type', figmgr_268525)
        
        # ################# End of 'new_figure_manager_given_figure(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_figure_manager_given_figure' in the type store
        # Getting the type of 'stypy_return_type' (line 1852)
        stypy_return_type_268526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268526)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_figure_manager_given_figure'
        return stypy_return_type_268526


    @staticmethod
    @norecursion
    def mainloop(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mainloop'
        module_type_store = module_type_store.open_function_context('mainloop', 1861, 4, False)
        
        # Passed parameters checking function
        _BackendWx.mainloop.__dict__.__setitem__('stypy_localization', localization)
        _BackendWx.mainloop.__dict__.__setitem__('stypy_type_of_self', None)
        _BackendWx.mainloop.__dict__.__setitem__('stypy_type_store', module_type_store)
        _BackendWx.mainloop.__dict__.__setitem__('stypy_function_name', 'mainloop')
        _BackendWx.mainloop.__dict__.__setitem__('stypy_param_names_list', [])
        _BackendWx.mainloop.__dict__.__setitem__('stypy_varargs_param_name', None)
        _BackendWx.mainloop.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _BackendWx.mainloop.__dict__.__setitem__('stypy_call_defaults', defaults)
        _BackendWx.mainloop.__dict__.__setitem__('stypy_call_varargs', varargs)
        _BackendWx.mainloop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _BackendWx.mainloop.__dict__.__setitem__('stypy_declared_arg_number', 0)
        arguments = process_argument_values(localization, None, module_type_store, 'mainloop', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mainloop', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mainloop(...)' code ##################

        
        
        
        # Call to IsMainLoopRunning(...): (line 1863)
        # Processing the call keyword arguments (line 1863)
        kwargs_268530 = {}
        # Getting the type of 'wx' (line 1863)
        wx_268527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 15), 'wx', False)
        # Obtaining the member 'App' of a type (line 1863)
        App_268528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1863, 15), wx_268527, 'App')
        # Obtaining the member 'IsMainLoopRunning' of a type (line 1863)
        IsMainLoopRunning_268529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1863, 15), App_268528, 'IsMainLoopRunning')
        # Calling IsMainLoopRunning(args, kwargs) (line 1863)
        IsMainLoopRunning_call_result_268531 = invoke(stypy.reporting.localization.Localization(__file__, 1863, 15), IsMainLoopRunning_268529, *[], **kwargs_268530)
        
        # Applying the 'not' unary operator (line 1863)
        result_not__268532 = python_operator(stypy.reporting.localization.Localization(__file__, 1863, 11), 'not', IsMainLoopRunning_call_result_268531)
        
        # Testing the type of an if condition (line 1863)
        if_condition_268533 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1863, 8), result_not__268532)
        # Assigning a type to the variable 'if_condition_268533' (line 1863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1863, 8), 'if_condition_268533', if_condition_268533)
        # SSA begins for if statement (line 1863)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1864):
        
        # Assigning a Call to a Name (line 1864):
        
        # Call to GetApp(...): (line 1864)
        # Processing the call keyword arguments (line 1864)
        kwargs_268536 = {}
        # Getting the type of 'wx' (line 1864)
        wx_268534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 20), 'wx', False)
        # Obtaining the member 'GetApp' of a type (line 1864)
        GetApp_268535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1864, 20), wx_268534, 'GetApp')
        # Calling GetApp(args, kwargs) (line 1864)
        GetApp_call_result_268537 = invoke(stypy.reporting.localization.Localization(__file__, 1864, 20), GetApp_268535, *[], **kwargs_268536)
        
        # Assigning a type to the variable 'wxapp' (line 1864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1864, 12), 'wxapp', GetApp_call_result_268537)
        
        # Type idiom detected: calculating its left and rigth part (line 1865)
        # Getting the type of 'wxapp' (line 1865)
        wxapp_268538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 12), 'wxapp')
        # Getting the type of 'None' (line 1865)
        None_268539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 28), 'None')
        
        (may_be_268540, more_types_in_union_268541) = may_not_be_none(wxapp_268538, None_268539)

        if may_be_268540:

            if more_types_in_union_268541:
                # Runtime conditional SSA (line 1865)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to MainLoop(...): (line 1866)
            # Processing the call keyword arguments (line 1866)
            kwargs_268544 = {}
            # Getting the type of 'wxapp' (line 1866)
            wxapp_268542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 16), 'wxapp', False)
            # Obtaining the member 'MainLoop' of a type (line 1866)
            MainLoop_268543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 16), wxapp_268542, 'MainLoop')
            # Calling MainLoop(args, kwargs) (line 1866)
            MainLoop_call_result_268545 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 16), MainLoop_268543, *[], **kwargs_268544)
            

            if more_types_in_union_268541:
                # SSA join for if statement (line 1865)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 1863)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'mainloop(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mainloop' in the type store
        # Getting the type of 'stypy_return_type' (line 1861)
        stypy_return_type_268546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268546)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mainloop'
        return stypy_return_type_268546


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1830, 0, False)
        # Assigning a type to the variable 'self' (line 1831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1831, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_BackendWx.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_BackendWx' (line 1830)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1830, 0), '_BackendWx', _BackendWx)

# Assigning a Name to a Name (line 1832):
# Getting the type of 'FigureCanvasWx' (line 1832)
FigureCanvasWx_268547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 19), 'FigureCanvasWx')
# Getting the type of '_BackendWx'
_BackendWx_268548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_BackendWx')
# Setting the type of the member 'FigureCanvas' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _BackendWx_268548, 'FigureCanvas', FigureCanvasWx_268547)

# Assigning a Name to a Name (line 1833):
# Getting the type of 'FigureManagerWx' (line 1833)
FigureManagerWx_268549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 20), 'FigureManagerWx')
# Getting the type of '_BackendWx'
_BackendWx_268550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_BackendWx')
# Setting the type of the member 'FigureManager' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _BackendWx_268550, 'FigureManager', FigureManagerWx_268549)

# Assigning a Name to a Name (line 1834):
# Getting the type of 'FigureFrameWx' (line 1834)
FigureFrameWx_268551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 19), 'FigureFrameWx')
# Getting the type of '_BackendWx'
_BackendWx_268552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_BackendWx')
# Setting the type of the member '_frame_class' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _BackendWx_268552, '_frame_class', FigureFrameWx_268551)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
