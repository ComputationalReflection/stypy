
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: Abstract base classes define the primitives that renderers and
3: graphics contexts must implement to serve as a matplotlib backend
4: 
5: :class:`RendererBase`
6:     An abstract base class to handle drawing/rendering operations.
7: 
8: :class:`FigureCanvasBase`
9:     The abstraction layer that separates the
10:     :class:`matplotlib.figure.Figure` from the backend specific
11:     details like a user interface drawing area
12: 
13: :class:`GraphicsContextBase`
14:     An abstract base class that provides color, line styles, etc...
15: 
16: :class:`Event`
17:     The base class for all of the matplotlib event
18:     handling.  Derived classes such as :class:`KeyEvent` and
19:     :class:`MouseEvent` store the meta data like keys and buttons
20:     pressed, x and y locations in pixel and
21:     :class:`~matplotlib.axes.Axes` coordinates.
22: 
23: :class:`ShowBase`
24:     The base class for the Show class of each interactive backend;
25:     the 'show' callable is then set to Show.__call__, inherited from
26:     ShowBase.
27: 
28: :class:`ToolContainerBase`
29:      The base class for the Toolbar class of each interactive backend.
30: 
31: :class:`StatusbarBase`
32:     The base class for the messaging area.
33: '''
34: 
35: from __future__ import (absolute_import, division, print_function,
36:                         unicode_literals)
37: 
38: import six
39: from six.moves import xrange
40: 
41: from contextlib import contextmanager
42: from functools import partial
43: import importlib
44: import io
45: import os
46: import sys
47: import time
48: import warnings
49: 
50: import numpy as np
51: import matplotlib.cbook as cbook
52: import matplotlib.colors as colors
53: import matplotlib.transforms as transforms
54: import matplotlib.widgets as widgets
55: from matplotlib import rcParams
56: from matplotlib import is_interactive
57: from matplotlib import get_backend
58: from matplotlib import lines
59: from matplotlib._pylab_helpers import Gcf
60: 
61: from matplotlib.transforms import Bbox, TransformedBbox, Affine2D
62: 
63: import matplotlib.tight_bbox as tight_bbox
64: import matplotlib.textpath as textpath
65: from matplotlib.path import Path
66: from matplotlib.cbook import mplDeprecation, warn_deprecated
67: import matplotlib.backend_tools as tools
68: 
69: try:
70:     from PIL import Image
71:     _has_pil = True
72:     del Image
73: except ImportError:
74:     _has_pil = False
75: 
76: 
77: _default_filetypes = {
78:     'ps': 'Postscript',
79:     'eps': 'Encapsulated Postscript',
80:     'pdf': 'Portable Document Format',
81:     'pgf': 'PGF code for LaTeX',
82:     'png': 'Portable Network Graphics',
83:     'raw': 'Raw RGBA bitmap',
84:     'rgba': 'Raw RGBA bitmap',
85:     'svg': 'Scalable Vector Graphics',
86:     'svgz': 'Scalable Vector Graphics'
87: }
88: 
89: 
90: _default_backends = {
91:     'ps': 'matplotlib.backends.backend_ps',
92:     'eps': 'matplotlib.backends.backend_ps',
93:     'pdf': 'matplotlib.backends.backend_pdf',
94:     'pgf': 'matplotlib.backends.backend_pgf',
95:     'png': 'matplotlib.backends.backend_agg',
96:     'raw': 'matplotlib.backends.backend_agg',
97:     'rgba': 'matplotlib.backends.backend_agg',
98:     'svg': 'matplotlib.backends.backend_svg',
99:     'svgz': 'matplotlib.backends.backend_svg',
100: }
101: 
102: 
103: def register_backend(format, backend, description=None):
104:     '''
105:     Register a backend for saving to a given file format.
106: 
107:     Parameters
108:     ----------
109:     format : str
110:         File extension
111: 
112:     backend : module string or canvas class
113:         Backend for handling file output
114: 
115:     description : str, optional
116:         Description of the file type.  Defaults to an empty string
117:     '''
118:     if description is None:
119:         description = ''
120:     _default_backends[format] = backend
121:     _default_filetypes[format] = description
122: 
123: 
124: def get_registered_canvas_class(format):
125:     '''
126:     Return the registered default canvas for given file format.
127:     Handles deferred import of required backend.
128:     '''
129:     if format not in _default_backends:
130:         return None
131:     backend_class = _default_backends[format]
132:     if isinstance(backend_class, six.string_types):
133:         backend_class = importlib.import_module(backend_class).FigureCanvas
134:         _default_backends[format] = backend_class
135:     return backend_class
136: 
137: 
138: class _Backend(object):
139:     # A backend can be defined by using the following pattern:
140:     #
141:     # @_Backend.export
142:     # class FooBackend(_Backend):
143:     #     # override the attributes and methods documented below.
144: 
145:     # The following attributes and methods must be overridden by subclasses.
146: 
147:     # The `FigureCanvas` and `FigureManager` classes must be defined.
148:     FigureCanvas = None
149:     FigureManager = None
150: 
151:     # The following methods must be left as None for non-interactive backends.
152:     # For interactive backends, `trigger_manager_draw` should be a function
153:     # taking a manager as argument and triggering a canvas draw, and `mainloop`
154:     # should be a function taking no argument and starting the backend main
155:     # loop.
156:     trigger_manager_draw = None
157:     mainloop = None
158: 
159:     # The following methods will be automatically defined and exported, but
160:     # can be overridden.
161: 
162:     @classmethod
163:     def new_figure_manager(cls, num, *args, **kwargs):
164:         '''Create a new figure manager instance.
165:         '''
166:         # This import needs to happen here due to circular imports.
167:         from matplotlib.figure import Figure
168:         fig_cls = kwargs.pop('FigureClass', Figure)
169:         fig = fig_cls(*args, **kwargs)
170:         return cls.new_figure_manager_given_figure(num, fig)
171: 
172:     @classmethod
173:     def new_figure_manager_given_figure(cls, num, figure):
174:         '''Create a new figure manager instance for the given figure.
175:         '''
176:         canvas = cls.FigureCanvas(figure)
177:         manager = cls.FigureManager(canvas, num)
178:         return manager
179: 
180:     @classmethod
181:     def draw_if_interactive(cls):
182:         if cls.trigger_manager_draw is not None and is_interactive():
183:             manager = Gcf.get_active()
184:             if manager:
185:                 cls.trigger_manager_draw(manager)
186: 
187:     @classmethod
188:     def show(cls, block=None):
189:         '''Show all figures.
190: 
191:         `show` blocks by calling `mainloop` if *block* is ``True``, or if it
192:         is ``None`` and we are neither in IPython's ``%pylab`` mode, nor in
193:         `interactive` mode.
194:         '''
195:         if cls.mainloop is None:
196:             return
197:         managers = Gcf.get_all_fig_managers()
198:         if not managers:
199:             return
200:         for manager in managers:
201:             manager.show()
202:         if block is None:
203:             # Hack: Are we in IPython's pylab mode?
204:             from matplotlib import pyplot
205:             try:
206:                 # IPython versions >= 0.10 tack the _needmain attribute onto
207:                 # pyplot.show, and always set it to False, when in %pylab mode.
208:                 ipython_pylab = not pyplot.show._needmain
209:             except AttributeError:
210:                 ipython_pylab = False
211:             block = not ipython_pylab and not is_interactive()
212:             # TODO: The above is a hack to get the WebAgg backend working with
213:             # ipython's `%pylab` mode until proper integration is implemented.
214:             if get_backend() == "WebAgg":
215:                 block = True
216:         if block:
217:             cls.mainloop()
218: 
219:     # This method is the one actually exporting the required methods.
220: 
221:     @staticmethod
222:     def export(cls):
223:         for name in ["FigureCanvas",
224:                      "FigureManager",
225:                      "new_figure_manager",
226:                      "new_figure_manager_given_figure",
227:                      "draw_if_interactive",
228:                      "show"]:
229:             setattr(sys.modules[cls.__module__], name, getattr(cls, name))
230: 
231:         # For back-compatibility, generate a shim `Show` class.
232: 
233:         class Show(ShowBase):
234:             def mainloop(self):
235:                 return cls.mainloop()
236: 
237:         setattr(sys.modules[cls.__module__], "Show", Show)
238:         return cls
239: 
240: 
241: class ShowBase(_Backend):
242:     '''
243:     Simple base class to generate a show() callable in backends.
244: 
245:     Subclass must override mainloop() method.
246:     '''
247: 
248:     def __call__(self, block=None):
249:         return self.show(block=block)
250: 
251: 
252: class RendererBase(object):
253:     '''An abstract base class to handle drawing/rendering operations.
254: 
255:     The following methods must be implemented in the backend for full
256:     functionality (though just implementing :meth:`draw_path` alone would
257:     give a highly capable backend):
258: 
259:     * :meth:`draw_path`
260:     * :meth:`draw_image`
261:     * :meth:`draw_gouraud_triangle`
262: 
263:     The following methods *should* be implemented in the backend for
264:     optimization reasons:
265: 
266:     * :meth:`draw_text`
267:     * :meth:`draw_markers`
268:     * :meth:`draw_path_collection`
269:     * :meth:`draw_quad_mesh`
270: 
271:     '''
272:     def __init__(self):
273:         self._texmanager = None
274:         self._text2path = textpath.TextToPath()
275: 
276:     def open_group(self, s, gid=None):
277:         '''
278:         Open a grouping element with label *s*. If *gid* is given, use
279:         *gid* as the id of the group. Is only currently used by
280:         :mod:`~matplotlib.backends.backend_svg`.
281:         '''
282: 
283:     def close_group(self, s):
284:         '''
285:         Close a grouping element with label *s*
286:         Is only currently used by :mod:`~matplotlib.backends.backend_svg`
287:         '''
288: 
289:     def draw_path(self, gc, path, transform, rgbFace=None):
290:         '''
291:         Draws a :class:`~matplotlib.path.Path` instance using the
292:         given affine transform.
293:         '''
294:         raise NotImplementedError
295: 
296:     def draw_markers(self, gc, marker_path, marker_trans, path,
297:                      trans, rgbFace=None):
298:         '''
299:         Draws a marker at each of the vertices in path.  This includes
300:         all vertices, including control points on curves.  To avoid
301:         that behavior, those vertices should be removed before calling
302:         this function.
303: 
304:         This provides a fallback implementation of draw_markers that
305:         makes multiple calls to :meth:`draw_path`.  Some backends may
306:         want to override this method in order to draw the marker only
307:         once and reuse it multiple times.
308: 
309:         Parameters
310:         ----------
311:         gc : `GraphicsContextBase`
312:             The graphics context
313: 
314:         marker_trans : `matplotlib.transforms.Transform`
315:             An affine transform applied to the marker.
316: 
317:         trans : `matplotlib.transforms.Transform`
318:             An affine transform applied to the path.
319: 
320:         '''
321:         for vertices, codes in path.iter_segments(trans, simplify=False):
322:             if len(vertices):
323:                 x, y = vertices[-2:]
324:                 self.draw_path(gc, marker_path,
325:                                marker_trans +
326:                                transforms.Affine2D().translate(x, y),
327:                                rgbFace)
328: 
329:     def draw_path_collection(self, gc, master_transform, paths, all_transforms,
330:                              offsets, offsetTrans, facecolors, edgecolors,
331:                              linewidths, linestyles, antialiaseds, urls,
332:                              offset_position):
333:         '''
334:         Draws a collection of paths selecting drawing properties from
335:         the lists *facecolors*, *edgecolors*, *linewidths*,
336:         *linestyles* and *antialiaseds*. *offsets* is a list of
337:         offsets to apply to each of the paths.  The offsets in
338:         *offsets* are first transformed by *offsetTrans* before being
339:         applied.  *offset_position* may be either "screen" or "data"
340:         depending on the space that the offsets are in.
341: 
342:         This provides a fallback implementation of
343:         :meth:`draw_path_collection` that makes multiple calls to
344:         :meth:`draw_path`.  Some backends may want to override this in
345:         order to render each set of path data only once, and then
346:         reference that path multiple times with the different offsets,
347:         colors, styles etc.  The generator methods
348:         :meth:`_iter_collection_raw_paths` and
349:         :meth:`_iter_collection` are provided to help with (and
350:         standardize) the implementation across backends.  It is highly
351:         recommended to use those generators, so that changes to the
352:         behavior of :meth:`draw_path_collection` can be made globally.
353:         '''
354:         path_ids = []
355:         for path, transform in self._iter_collection_raw_paths(
356:                 master_transform, paths, all_transforms):
357:             path_ids.append((path, transforms.Affine2D(transform)))
358: 
359:         for xo, yo, path_id, gc0, rgbFace in self._iter_collection(
360:                 gc, master_transform, all_transforms, path_ids, offsets,
361:                 offsetTrans, facecolors, edgecolors, linewidths, linestyles,
362:                 antialiaseds, urls, offset_position):
363:             path, transform = path_id
364:             transform = transforms.Affine2D(
365:                             transform.get_matrix()).translate(xo, yo)
366:             self.draw_path(gc0, path, transform, rgbFace)
367: 
368:     def draw_quad_mesh(self, gc, master_transform, meshWidth, meshHeight,
369:                        coordinates, offsets, offsetTrans, facecolors,
370:                        antialiased, edgecolors):
371:         '''
372:         This provides a fallback implementation of
373:         :meth:`draw_quad_mesh` that generates paths and then calls
374:         :meth:`draw_path_collection`.
375:         '''
376: 
377:         from matplotlib.collections import QuadMesh
378:         paths = QuadMesh.convert_mesh_to_paths(
379:             meshWidth, meshHeight, coordinates)
380: 
381:         if edgecolors is None:
382:             edgecolors = facecolors
383:         linewidths = np.array([gc.get_linewidth()], float)
384: 
385:         return self.draw_path_collection(
386:             gc, master_transform, paths, [], offsets, offsetTrans, facecolors,
387:             edgecolors, linewidths, [], [antialiased], [None], 'screen')
388: 
389:     def draw_gouraud_triangle(self, gc, points, colors, transform):
390:         '''
391:         Draw a Gouraud-shaded triangle.
392: 
393:         Parameters
394:         ----------
395:         points : array_like, shape=(3, 2)
396:             Array of (x, y) points for the triangle.
397: 
398:         colors : array_like, shape=(3, 4)
399:             RGBA colors for each point of the triangle.
400: 
401:         transform : `matplotlib.transforms.Transform`
402:             An affine transform to apply to the points.
403: 
404:         '''
405:         raise NotImplementedError
406: 
407:     def draw_gouraud_triangles(self, gc, triangles_array, colors_array,
408:                                transform):
409:         '''
410:         Draws a series of Gouraud triangles.
411: 
412:         Parameters
413:         ----------
414:         points : array_like, shape=(N, 3, 2)
415:             Array of *N* (x, y) points for the triangles.
416: 
417:         colors : array_like, shape=(N, 3, 4)
418:             Array of *N* RGBA colors for each point of the triangles.
419: 
420:         transform : `matplotlib.transforms.Transform`
421:             An affine transform to apply to the points.
422:         '''
423:         transform = transform.frozen()
424:         for tri, col in zip(triangles_array, colors_array):
425:             self.draw_gouraud_triangle(gc, tri, col, transform)
426: 
427:     def _iter_collection_raw_paths(self, master_transform, paths,
428:                                    all_transforms):
429:         '''
430:         This is a helper method (along with :meth:`_iter_collection`) to make
431:         it easier to write a space-efficient :meth:`draw_path_collection`
432:         implementation in a backend.
433: 
434:         This method yields all of the base path/transform
435:         combinations, given a master transform, a list of paths and
436:         list of transforms.
437: 
438:         The arguments should be exactly what is passed in to
439:         :meth:`draw_path_collection`.
440: 
441:         The backend should take each yielded path and transform and
442:         create an object that can be referenced (reused) later.
443:         '''
444:         Npaths = len(paths)
445:         Ntransforms = len(all_transforms)
446:         N = max(Npaths, Ntransforms)
447: 
448:         if Npaths == 0:
449:             return
450: 
451:         transform = transforms.IdentityTransform()
452:         for i in xrange(N):
453:             path = paths[i % Npaths]
454:             if Ntransforms:
455:                 transform = Affine2D(all_transforms[i % Ntransforms])
456:             yield path, transform + master_transform
457: 
458:     def _iter_collection_uses_per_path(self, paths, all_transforms,
459:                                        offsets, facecolors, edgecolors):
460:         '''
461:         Compute how many times each raw path object returned by
462:         _iter_collection_raw_paths would be used when calling
463:         _iter_collection. This is intended for the backend to decide
464:         on the tradeoff between using the paths in-line and storing
465:         them once and reusing. Rounds up in case the number of uses
466:         is not the same for every path.
467:         '''
468:         Npaths = len(paths)
469:         if Npaths == 0 or (len(facecolors) == 0 and len(edgecolors) == 0):
470:             return 0
471:         Npath_ids = max(Npaths, len(all_transforms))
472:         N = max(Npath_ids, len(offsets))
473:         return (N + Npath_ids - 1) // Npath_ids
474: 
475:     def _iter_collection(self, gc, master_transform, all_transforms,
476:                          path_ids, offsets, offsetTrans, facecolors,
477:                          edgecolors, linewidths, linestyles,
478:                          antialiaseds, urls, offset_position):
479:         '''
480:         This is a helper method (along with
481:         :meth:`_iter_collection_raw_paths`) to make it easier to write
482:         a space-efficient :meth:`draw_path_collection` implementation in a
483:         backend.
484: 
485:         This method yields all of the path, offset and graphics
486:         context combinations to draw the path collection.  The caller
487:         should already have looped over the results of
488:         :meth:`_iter_collection_raw_paths` to draw this collection.
489: 
490:         The arguments should be the same as that passed into
491:         :meth:`draw_path_collection`, with the exception of
492:         *path_ids*, which is a list of arbitrary objects that the
493:         backend will use to reference one of the paths created in the
494:         :meth:`_iter_collection_raw_paths` stage.
495: 
496:         Each yielded result is of the form::
497: 
498:            xo, yo, path_id, gc, rgbFace
499: 
500:         where *xo*, *yo* is an offset; *path_id* is one of the elements of
501:         *path_ids*; *gc* is a graphics context and *rgbFace* is a color to
502:         use for filling the path.
503:         '''
504:         Ntransforms = len(all_transforms)
505:         Npaths = len(path_ids)
506:         Noffsets = len(offsets)
507:         N = max(Npaths, Noffsets)
508:         Nfacecolors = len(facecolors)
509:         Nedgecolors = len(edgecolors)
510:         Nlinewidths = len(linewidths)
511:         Nlinestyles = len(linestyles)
512:         Naa = len(antialiaseds)
513:         Nurls = len(urls)
514: 
515:         if (Nfacecolors == 0 and Nedgecolors == 0) or Npaths == 0:
516:             return
517:         if Noffsets:
518:             toffsets = offsetTrans.transform(offsets)
519: 
520:         gc0 = self.new_gc()
521:         gc0.copy_properties(gc)
522: 
523:         if Nfacecolors == 0:
524:             rgbFace = None
525: 
526:         if Nedgecolors == 0:
527:             gc0.set_linewidth(0.0)
528: 
529:         xo, yo = 0, 0
530:         for i in xrange(N):
531:             path_id = path_ids[i % Npaths]
532:             if Noffsets:
533:                 xo, yo = toffsets[i % Noffsets]
534:                 if offset_position == 'data':
535:                     if Ntransforms:
536:                         transform = (
537:                             Affine2D(all_transforms[i % Ntransforms]) +
538:                             master_transform)
539:                     else:
540:                         transform = master_transform
541:                     xo, yo = transform.transform_point((xo, yo))
542:                     xp, yp = transform.transform_point((0, 0))
543:                     xo = -(xp - xo)
544:                     yo = -(yp - yo)
545:             if not (np.isfinite(xo) and np.isfinite(yo)):
546:                 continue
547:             if Nfacecolors:
548:                 rgbFace = facecolors[i % Nfacecolors]
549:             if Nedgecolors:
550:                 if Nlinewidths:
551:                     gc0.set_linewidth(linewidths[i % Nlinewidths])
552:                 if Nlinestyles:
553:                     gc0.set_dashes(*linestyles[i % Nlinestyles])
554:                 fg = edgecolors[i % Nedgecolors]
555:                 if len(fg) == 4:
556:                     if fg[3] == 0.0:
557:                         gc0.set_linewidth(0)
558:                     else:
559:                         gc0.set_foreground(fg)
560:                 else:
561:                     gc0.set_foreground(fg)
562:             if rgbFace is not None and len(rgbFace) == 4:
563:                 if rgbFace[3] == 0:
564:                     rgbFace = None
565:             gc0.set_antialiased(antialiaseds[i % Naa])
566:             if Nurls:
567:                 gc0.set_url(urls[i % Nurls])
568: 
569:             yield xo, yo, path_id, gc0, rgbFace
570:         gc0.restore()
571: 
572:     def get_image_magnification(self):
573:         '''
574:         Get the factor by which to magnify images passed to :meth:`draw_image`.
575:         Allows a backend to have images at a different resolution to other
576:         artists.
577:         '''
578:         return 1.0
579: 
580:     def draw_image(self, gc, x, y, im, transform=None):
581:         '''
582:         Draw an RGBA image.
583: 
584:         Parameters
585:         ----------
586:         gc : `GraphicsContextBase`
587:             a graphics context with clipping information.
588: 
589:         x : scalar
590:             the distance in physical units (i.e., dots or pixels) from the left
591:             hand side of the canvas.
592: 
593:         y : scalar
594:             the distance in physical units (i.e., dots or pixels) from the
595:             bottom side of the canvas.
596: 
597:         im : array_like, shape=(N, M, 4), dtype=np.uint8
598:             An array of RGBA pixels.
599: 
600:         transform : `matplotlib.transforms.Affine2DBase`
601:             If and only if the concrete backend is written such that
602:             :meth:`option_scale_image` returns ``True``, an affine
603:             transformation *may* be passed to :meth:`draw_image`. It takes the
604:             form of a :class:`~matplotlib.transforms.Affine2DBase` instance.
605:             The translation vector of the transformation is given in physical
606:             units (i.e., dots or pixels). Note that the transformation does not
607:             override `x` and `y`, and has to be applied *before* translating
608:             the result by `x` and `y` (this can be accomplished by adding `x`
609:             and `y` to the translation vector defined by `transform`).
610:         '''
611:         raise NotImplementedError
612: 
613:     def option_image_nocomposite(self):
614:         '''
615:         override this method for renderers that do not necessarily always
616:         want to rescale and composite raster images. (like SVG, PDF, or PS)
617:         '''
618:         return False
619: 
620:     def option_scale_image(self):
621:         '''
622:         override this method for renderers that support arbitrary affine
623:         transformations in :meth:`draw_image` (most vector backends).
624:         '''
625:         return False
626: 
627:     def draw_tex(self, gc, x, y, s, prop, angle, ismath='TeX!', mtext=None):
628:         '''
629:         '''
630:         self._draw_text_as_path(gc, x, y, s, prop, angle, ismath="TeX")
631: 
632:     def draw_text(self, gc, x, y, s, prop, angle, ismath=False, mtext=None):
633:         '''
634:         Draw the text instance
635: 
636:         Parameters
637:         ----------
638:         gc : `GraphicsContextBase`
639:             the graphics context
640: 
641:         x : scalar
642:             the x location of the text in display coords
643: 
644:         y : scalar
645:             the y location of the text baseline in display coords
646: 
647:         s : str
648:             the text string
649: 
650:         prop : `matplotlib.font_manager.FontProperties`
651:             font properties
652: 
653:         angle : scalar
654:             the rotation angle in degrees
655: 
656:         mtext : `matplotlib.text.Text`
657:             the original text object to be rendered
658: 
659:         Notes
660:         -----
661:         **backend implementers note**
662: 
663:         When you are trying to determine if you have gotten your bounding box
664:         right (which is what enables the text layout/alignment to work
665:         properly), it helps to change the line in text.py::
666: 
667:             if 0: bbox_artist(self, renderer)
668: 
669:         to if 1, and then the actual bounding box will be plotted along with
670:         your text.
671:         '''
672: 
673:         self._draw_text_as_path(gc, x, y, s, prop, angle, ismath)
674: 
675:     def _get_text_path_transform(self, x, y, s, prop, angle, ismath):
676:         '''
677:         return the text path and transform
678: 
679:         Parameters
680:         ----------
681:         prop : `matplotlib.font_manager.FontProperties`
682:           font property
683: 
684:         s : str
685:           text to be converted
686: 
687:         usetex : bool
688:           If True, use matplotlib usetex mode.
689: 
690:         ismath : bool
691:           If True, use mathtext parser. If "TeX", use *usetex* mode.
692:         '''
693: 
694:         text2path = self._text2path
695:         fontsize = self.points_to_pixels(prop.get_size_in_points())
696: 
697:         if ismath == "TeX":
698:             verts, codes = text2path.get_text_path(prop, s, ismath=False,
699:                                                    usetex=True)
700:         else:
701:             verts, codes = text2path.get_text_path(prop, s, ismath=ismath,
702:                                                    usetex=False)
703: 
704:         path = Path(verts, codes)
705:         angle = np.deg2rad(angle)
706:         if self.flipy():
707:             transform = Affine2D().scale(fontsize / text2path.FONT_SCALE,
708:                                          fontsize / text2path.FONT_SCALE)
709:             transform = transform.rotate(angle).translate(x, self.height - y)
710:         else:
711:             transform = Affine2D().scale(fontsize / text2path.FONT_SCALE,
712:                                          fontsize / text2path.FONT_SCALE)
713:             transform = transform.rotate(angle).translate(x, y)
714: 
715:         return path, transform
716: 
717:     def _draw_text_as_path(self, gc, x, y, s, prop, angle, ismath):
718:         '''
719:         draw the text by converting them to paths using textpath module.
720: 
721:         Parameters
722:         ----------
723:         prop : `matplotlib.font_manager.FontProperties`
724:           font property
725: 
726:         s : str
727:           text to be converted
728: 
729:         usetex : bool
730:           If True, use matplotlib usetex mode.
731: 
732:         ismath : bool
733:           If True, use mathtext parser. If "TeX", use *usetex* mode.
734:         '''
735:         path, transform = self._get_text_path_transform(
736:             x, y, s, prop, angle, ismath)
737:         color = gc.get_rgb()
738: 
739:         gc.set_linewidth(0.0)
740:         self.draw_path(gc, path, transform, rgbFace=color)
741: 
742:     def get_text_width_height_descent(self, s, prop, ismath):
743:         '''
744:         Get the width, height, and descent (offset from the bottom
745:         to the baseline), in display coords, of the string *s* with
746:         :class:`~matplotlib.font_manager.FontProperties` *prop*
747:         '''
748:         if ismath == 'TeX':
749:             # todo: handle props
750:             size = prop.get_size_in_points()
751:             texmanager = self._text2path.get_texmanager()
752:             fontsize = prop.get_size_in_points()
753:             w, h, d = texmanager.get_text_width_height_descent(
754:                 s, fontsize, renderer=self)
755:             return w, h, d
756: 
757:         dpi = self.points_to_pixels(72)
758:         if ismath:
759:             dims = self._text2path.mathtext_parser.parse(s, dpi, prop)
760:             return dims[0:3]  # return width, height, descent
761: 
762:         flags = self._text2path._get_hinting_flag()
763:         font = self._text2path._get_font(prop)
764:         size = prop.get_size_in_points()
765:         font.set_size(size, dpi)
766:         # the width and height of unrotated string
767:         font.set_text(s, 0.0, flags=flags)
768:         w, h = font.get_width_height()
769:         d = font.get_descent()
770:         w /= 64.0  # convert from subpixels
771:         h /= 64.0
772:         d /= 64.0
773:         return w, h, d
774: 
775:     def flipy(self):
776:         '''
777:         Return true if y small numbers are top for renderer Is used
778:         for drawing text (:mod:`matplotlib.text`) and images
779:         (:mod:`matplotlib.image`) only
780:         '''
781:         return True
782: 
783:     def get_canvas_width_height(self):
784:         'return the canvas width and height in display coords'
785:         return 1, 1
786: 
787:     def get_texmanager(self):
788:         '''
789:         return the :class:`matplotlib.texmanager.TexManager` instance
790:         '''
791:         if self._texmanager is None:
792:             from matplotlib.texmanager import TexManager
793:             self._texmanager = TexManager()
794:         return self._texmanager
795: 
796:     def new_gc(self):
797:         '''
798:         Return an instance of a :class:`GraphicsContextBase`
799:         '''
800:         return GraphicsContextBase()
801: 
802:     def points_to_pixels(self, points):
803:         '''
804:         Convert points to display units
805: 
806:         You need to override this function (unless your backend
807:         doesn't have a dpi, e.g., postscript or svg).  Some imaging
808:         systems assume some value for pixels per inch::
809: 
810:             points to pixels = points * pixels_per_inch/72.0 * dpi/72.0
811: 
812:         Parameters
813:         ----------
814:         points : scalar or array_like
815:             a float or a numpy array of float
816: 
817:         Returns
818:         -------
819:         Points converted to pixels
820:         '''
821:         return points
822: 
823:     def strip_math(self, s):
824:         return cbook.strip_math(s)
825: 
826:     def start_rasterizing(self):
827:         '''
828:         Used in MixedModeRenderer. Switch to the raster renderer.
829:         '''
830: 
831:     def stop_rasterizing(self):
832:         '''
833:         Used in MixedModeRenderer. Switch back to the vector renderer
834:         and draw the contents of the raster renderer as an image on
835:         the vector renderer.
836:         '''
837: 
838:     def start_filter(self):
839:         '''
840:         Used in AggRenderer. Switch to a temporary renderer for image
841:         filtering effects.
842:         '''
843: 
844:     def stop_filter(self, filter_func):
845:         '''
846:         Used in AggRenderer. Switch back to the original renderer.
847:         The contents of the temporary renderer is processed with the
848:         *filter_func* and is drawn on the original renderer as an
849:         image.
850:         '''
851: 
852: 
853: class GraphicsContextBase(object):
854:     '''
855:     An abstract base class that provides color, line styles, etc...
856:     '''
857: 
858:     def __init__(self):
859:         self._alpha = 1.0
860:         self._forced_alpha = False  # if True, _alpha overrides A from RGBA
861:         self._antialiased = 1  # use 0,1 not True, False for extension code
862:         self._capstyle = 'butt'
863:         self._cliprect = None
864:         self._clippath = None
865:         self._dashes = None, None
866:         self._joinstyle = 'round'
867:         self._linestyle = 'solid'
868:         self._linewidth = 1
869:         self._rgb = (0.0, 0.0, 0.0, 1.0)
870:         self._hatch = None
871:         self._hatch_color = colors.to_rgba(rcParams['hatch.color'])
872:         self._hatch_linewidth = rcParams['hatch.linewidth']
873:         self._url = None
874:         self._gid = None
875:         self._snap = None
876:         self._sketch = None
877: 
878:     def copy_properties(self, gc):
879:         'Copy properties from gc to self'
880:         self._alpha = gc._alpha
881:         self._forced_alpha = gc._forced_alpha
882:         self._antialiased = gc._antialiased
883:         self._capstyle = gc._capstyle
884:         self._cliprect = gc._cliprect
885:         self._clippath = gc._clippath
886:         self._dashes = gc._dashes
887:         self._joinstyle = gc._joinstyle
888:         self._linestyle = gc._linestyle
889:         self._linewidth = gc._linewidth
890:         self._rgb = gc._rgb
891:         self._hatch = gc._hatch
892:         self._hatch_color = gc._hatch_color
893:         self._hatch_linewidth = gc._hatch_linewidth
894:         self._url = gc._url
895:         self._gid = gc._gid
896:         self._snap = gc._snap
897:         self._sketch = gc._sketch
898: 
899:     def restore(self):
900:         '''
901:         Restore the graphics context from the stack - needed only
902:         for backends that save graphics contexts on a stack
903:         '''
904: 
905:     def get_alpha(self):
906:         '''
907:         Return the alpha value used for blending - not supported on
908:         all backends
909:         '''
910:         return self._alpha
911: 
912:     def get_antialiased(self):
913:         "Return true if the object should try to do antialiased rendering"
914:         return self._antialiased
915: 
916:     def get_capstyle(self):
917:         '''
918:         Return the capstyle as a string in ('butt', 'round', 'projecting')
919:         '''
920:         return self._capstyle
921: 
922:     def get_clip_rectangle(self):
923:         '''
924:         Return the clip rectangle as a :class:`~matplotlib.transforms.Bbox`
925:         instance
926:         '''
927:         return self._cliprect
928: 
929:     def get_clip_path(self):
930:         '''
931:         Return the clip path in the form (path, transform), where path
932:         is a :class:`~matplotlib.path.Path` instance, and transform is
933:         an affine transform to apply to the path before clipping.
934:         '''
935:         if self._clippath is not None:
936:             return self._clippath.get_transformed_path_and_affine()
937:         return None, None
938: 
939:     def get_dashes(self):
940:         '''
941:         Return the dash information as an offset dashlist tuple.
942: 
943:         The dash list is a even size list that gives the ink on, ink
944:         off in pixels.
945: 
946:         See p107 of to PostScript `BLUEBOOK
947:         <https://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF>`_
948:         for more info.
949: 
950:         Default value is None
951:         '''
952:         return self._dashes
953: 
954:     def get_forced_alpha(self):
955:         '''
956:         Return whether the value given by get_alpha() should be used to
957:         override any other alpha-channel values.
958:         '''
959:         return self._forced_alpha
960: 
961:     def get_joinstyle(self):
962:         '''
963:         Return the line join style as one of ('miter', 'round', 'bevel')
964:         '''
965:         return self._joinstyle
966: 
967:     @cbook.deprecated("2.1")
968:     def get_linestyle(self):
969:         '''
970:         Return the linestyle: one of ('solid', 'dashed', 'dashdot',
971:         'dotted').
972:         '''
973:         return self._linestyle
974: 
975:     def get_linewidth(self):
976:         '''
977:         Return the line width in points as a scalar
978:         '''
979:         return self._linewidth
980: 
981:     def get_rgb(self):
982:         '''
983:         returns a tuple of three or four floats from 0-1.
984:         '''
985:         return self._rgb
986: 
987:     def get_url(self):
988:         '''
989:         returns a url if one is set, None otherwise
990:         '''
991:         return self._url
992: 
993:     def get_gid(self):
994:         '''
995:         Return the object identifier if one is set, None otherwise.
996:         '''
997:         return self._gid
998: 
999:     def get_snap(self):
1000:         '''
1001:         returns the snap setting which may be:
1002: 
1003:           * True: snap vertices to the nearest pixel center
1004: 
1005:           * False: leave vertices as-is
1006: 
1007:           * None: (auto) If the path contains only rectilinear line
1008:             segments, round to the nearest pixel center
1009:         '''
1010:         return self._snap
1011: 
1012:     def set_alpha(self, alpha):
1013:         '''
1014:         Set the alpha value used for blending - not supported on all backends.
1015:         If ``alpha=None`` (the default), the alpha components of the
1016:         foreground and fill colors will be used to set their respective
1017:         transparencies (where applicable); otherwise, ``alpha`` will override
1018:         them.
1019:         '''
1020:         if alpha is not None:
1021:             self._alpha = alpha
1022:             self._forced_alpha = True
1023:         else:
1024:             self._alpha = 1.0
1025:             self._forced_alpha = False
1026:         self.set_foreground(self._rgb, isRGBA=True)
1027: 
1028:     def set_antialiased(self, b):
1029:         '''
1030:         True if object should be drawn with antialiased rendering
1031:         '''
1032: 
1033:         # use 0, 1 to make life easier on extension code trying to read the gc
1034:         if b:
1035:             self._antialiased = 1
1036:         else:
1037:             self._antialiased = 0
1038: 
1039:     def set_capstyle(self, cs):
1040:         '''
1041:         Set the capstyle as a string in ('butt', 'round', 'projecting')
1042:         '''
1043:         if cs in ('butt', 'round', 'projecting'):
1044:             self._capstyle = cs
1045:         else:
1046:             raise ValueError('Unrecognized cap style.  Found %s' % cs)
1047: 
1048:     def set_clip_rectangle(self, rectangle):
1049:         '''
1050:         Set the clip rectangle with sequence (left, bottom, width, height)
1051:         '''
1052:         self._cliprect = rectangle
1053: 
1054:     def set_clip_path(self, path):
1055:         '''
1056:         Set the clip path and transformation.  Path should be a
1057:         :class:`~matplotlib.transforms.TransformedPath` instance.
1058:         '''
1059:         if path is not None and not isinstance(path,
1060:                 transforms.TransformedPath):
1061:             msg = ("Path should be a matplotlib.transforms.TransformedPath"
1062:                    "instance.")
1063:             raise ValueError(msg)
1064:         self._clippath = path
1065: 
1066:     def set_dashes(self, dash_offset, dash_list):
1067:         '''
1068:         Set the dash style for the gc.
1069: 
1070:         Parameters
1071:         ----------
1072:         dash_offset : float
1073:             is the offset (usually 0).
1074: 
1075:         dash_list : array_like
1076:             specifies the on-off sequence as points.
1077:             ``(None, None)`` specifies a solid line
1078: 
1079:         '''
1080:         if dash_list is not None:
1081:             dl = np.asarray(dash_list)
1082:             if np.any(dl < 0.0):
1083:                 raise ValueError("All values in the dash list must be positive")
1084:         self._dashes = dash_offset, dash_list
1085: 
1086:     def set_foreground(self, fg, isRGBA=False):
1087:         '''
1088:         Set the foreground color.  fg can be a MATLAB format string, a
1089:         html hex color string, an rgb or rgba unit tuple, or a float between 0
1090:         and 1.  In the latter case, grayscale is used.
1091: 
1092:         If you know fg is rgba, set ``isRGBA=True`` for efficiency.
1093:         '''
1094:         if self._forced_alpha and isRGBA:
1095:             self._rgb = fg[:3] + (self._alpha,)
1096:         elif self._forced_alpha:
1097:             self._rgb = colors.to_rgba(fg, self._alpha)
1098:         elif isRGBA:
1099:             self._rgb = fg
1100:         else:
1101:             self._rgb = colors.to_rgba(fg)
1102: 
1103:     def set_joinstyle(self, js):
1104:         '''
1105:         Set the join style to be one of ('miter', 'round', 'bevel')
1106:         '''
1107:         if js in ('miter', 'round', 'bevel'):
1108:             self._joinstyle = js
1109:         else:
1110:             raise ValueError('Unrecognized join style.  Found %s' % js)
1111: 
1112:     def set_linewidth(self, w):
1113:         '''
1114:         Set the linewidth in points
1115:         '''
1116:         self._linewidth = float(w)
1117: 
1118:     @cbook.deprecated("2.1")
1119:     def set_linestyle(self, style):
1120:         '''
1121:         Set the linestyle to be one of ('solid', 'dashed', 'dashdot',
1122:         'dotted'). These are defined in the rcParams
1123:         `lines.dashed_pattern`, `lines.dashdot_pattern` and
1124:         `lines.dotted_pattern`.  One may also specify customized dash
1125:         styles by providing a tuple of (offset, dash pairs).
1126:         '''
1127:         self._linestyle = style
1128: 
1129:     def set_url(self, url):
1130:         '''
1131:         Sets the url for links in compatible backends
1132:         '''
1133:         self._url = url
1134: 
1135:     def set_gid(self, id):
1136:         '''
1137:         Sets the id.
1138:         '''
1139:         self._gid = id
1140: 
1141:     def set_snap(self, snap):
1142:         '''
1143:         Sets the snap setting which may be:
1144: 
1145:           * True: snap vertices to the nearest pixel center
1146: 
1147:           * False: leave vertices as-is
1148: 
1149:           * None: (auto) If the path contains only rectilinear line
1150:             segments, round to the nearest pixel center
1151:         '''
1152:         self._snap = snap
1153: 
1154:     def set_hatch(self, hatch):
1155:         '''
1156:         Sets the hatch style for filling
1157:         '''
1158:         self._hatch = hatch
1159: 
1160:     def get_hatch(self):
1161:         '''
1162:         Gets the current hatch style
1163:         '''
1164:         return self._hatch
1165: 
1166:     def get_hatch_path(self, density=6.0):
1167:         '''
1168:         Returns a Path for the current hatch.
1169:         '''
1170:         hatch = self.get_hatch()
1171:         if hatch is None:
1172:             return None
1173:         return Path.hatch(hatch, density)
1174: 
1175:     def get_hatch_color(self):
1176:         '''
1177:         Gets the color to use for hatching.
1178:         '''
1179:         return self._hatch_color
1180: 
1181:     def set_hatch_color(self, hatch_color):
1182:         '''
1183:         sets the color to use for hatching.
1184:         '''
1185:         self._hatch_color = hatch_color
1186: 
1187:     def get_hatch_linewidth(self):
1188:         '''
1189:         Gets the linewidth to use for hatching.
1190:         '''
1191:         return self._hatch_linewidth
1192: 
1193:     def get_sketch_params(self):
1194:         '''
1195:         Returns the sketch parameters for the artist.
1196: 
1197:         Returns
1198:         -------
1199:         sketch_params : tuple or `None`
1200: 
1201:         A 3-tuple with the following elements:
1202: 
1203:           * `scale`: The amplitude of the wiggle perpendicular to the
1204:             source line.
1205: 
1206:           * `length`: The length of the wiggle along the line.
1207: 
1208:           * `randomness`: The scale factor by which the length is
1209:             shrunken or expanded.
1210: 
1211:         May return `None` if no sketch parameters were set.
1212:         '''
1213:         return self._sketch
1214: 
1215:     def set_sketch_params(self, scale=None, length=None, randomness=None):
1216:         '''
1217:         Sets the sketch parameters.
1218: 
1219:         Parameters
1220:         ----------
1221: 
1222:         scale : float, optional
1223:             The amplitude of the wiggle perpendicular to the source
1224:             line, in pixels.  If scale is `None`, or not provided, no
1225:             sketch filter will be provided.
1226: 
1227:         length : float, optional
1228:              The length of the wiggle along the line, in pixels
1229:              (default 128)
1230: 
1231:         randomness : float, optional
1232:             The scale factor by which the length is shrunken or
1233:             expanded (default 16)
1234:         '''
1235:         self._sketch = (
1236:             None if scale is None
1237:             else (scale, length or 128., randomness or 16.))
1238: 
1239: 
1240: class TimerBase(object):
1241:     '''
1242:     A base class for providing timer events, useful for things animations.
1243:     Backends need to implement a few specific methods in order to use their
1244:     own timing mechanisms so that the timer events are integrated into their
1245:     event loops.
1246: 
1247:     Mandatory functions that must be implemented:
1248: 
1249:         * `_timer_start`: Contains backend-specific code for starting
1250:           the timer
1251: 
1252:         * `_timer_stop`: Contains backend-specific code for stopping
1253:           the timer
1254: 
1255:     Optional overrides:
1256: 
1257:         * `_timer_set_single_shot`: Code for setting the timer to
1258:           single shot operating mode, if supported by the timer
1259:           object. If not, the `Timer` class itself will store the flag
1260:           and the `_on_timer` method should be overridden to support
1261:           such behavior.
1262: 
1263:         * `_timer_set_interval`: Code for setting the interval on the
1264:           timer, if there is a method for doing so on the timer
1265:           object.
1266: 
1267:         * `_on_timer`: This is the internal function that any timer
1268:           object should call, which will handle the task of running
1269:           all callbacks that have been set.
1270: 
1271:     Attributes
1272:     ----------
1273:     interval : scalar
1274:         The time between timer events in milliseconds. Default is 1000 ms.
1275: 
1276:     single_shot : bool
1277:         Boolean flag indicating whether this timer should operate as single
1278:         shot (run once and then stop). Defaults to `False`.
1279: 
1280:     callbacks : list
1281:         Stores list of (func, args) tuples that will be called upon timer
1282:         events. This list can be manipulated directly, or the functions
1283:         `add_callback` and `remove_callback` can be used.
1284: 
1285:     '''
1286:     def __init__(self, interval=None, callbacks=None):
1287:         #Initialize empty callbacks list and setup default settings if necssary
1288:         if callbacks is None:
1289:             self.callbacks = []
1290:         else:
1291:             self.callbacks = callbacks[:]  # Create a copy
1292: 
1293:         if interval is None:
1294:             self._interval = 1000
1295:         else:
1296:             self._interval = interval
1297: 
1298:         self._single = False
1299: 
1300:         # Default attribute for holding the GUI-specific timer object
1301:         self._timer = None
1302: 
1303:     def __del__(self):
1304:         'Need to stop timer and possibly disconnect timer.'
1305:         self._timer_stop()
1306: 
1307:     def start(self, interval=None):
1308:         '''
1309:         Start the timer object. `interval` is optional and will be used
1310:         to reset the timer interval first if provided.
1311:         '''
1312:         if interval is not None:
1313:             self._set_interval(interval)
1314:         self._timer_start()
1315: 
1316:     def stop(self):
1317:         '''
1318:         Stop the timer.
1319:         '''
1320:         self._timer_stop()
1321: 
1322:     def _timer_start(self):
1323:         pass
1324: 
1325:     def _timer_stop(self):
1326:         pass
1327: 
1328:     def _get_interval(self):
1329:         return self._interval
1330: 
1331:     def _set_interval(self, interval):
1332:         # Force to int since none of the backends actually support fractional
1333:         # milliseconds, and some error or give warnings.
1334:         interval = int(interval)
1335:         self._interval = interval
1336:         self._timer_set_interval()
1337: 
1338:     interval = property(_get_interval, _set_interval)
1339: 
1340:     def _get_single_shot(self):
1341:         return self._single
1342: 
1343:     def _set_single_shot(self, ss=True):
1344:         self._single = ss
1345:         self._timer_set_single_shot()
1346: 
1347:     single_shot = property(_get_single_shot, _set_single_shot)
1348: 
1349:     def add_callback(self, func, *args, **kwargs):
1350:         '''
1351:         Register `func` to be called by timer when the event fires. Any
1352:         additional arguments provided will be passed to `func`.
1353:         '''
1354:         self.callbacks.append((func, args, kwargs))
1355: 
1356:     def remove_callback(self, func, *args, **kwargs):
1357:         '''
1358:         Remove `func` from list of callbacks. `args` and `kwargs` are optional
1359:         and used to distinguish between copies of the same function registered
1360:         to be called with different arguments.
1361:         '''
1362:         if args or kwargs:
1363:             self.callbacks.remove((func, args, kwargs))
1364:         else:
1365:             funcs = [c[0] for c in self.callbacks]
1366:             if func in funcs:
1367:                 self.callbacks.pop(funcs.index(func))
1368: 
1369:     def _timer_set_interval(self):
1370:         '''Used to set interval on underlying timer object.'''
1371: 
1372:     def _timer_set_single_shot(self):
1373:         '''Used to set single shot on underlying timer object.'''
1374: 
1375:     def _on_timer(self):
1376:         '''
1377:         Runs all function that have been registered as callbacks. Functions
1378:         can return False (or 0) if they should not be called any more. If there
1379:         are no callbacks, the timer is automatically stopped.
1380:         '''
1381:         for func, args, kwargs in self.callbacks:
1382:             ret = func(*args, **kwargs)
1383:             # docstring above explains why we use `if ret == False` here,
1384:             # instead of `if not ret`.
1385:             if ret == False:
1386:                 self.callbacks.remove((func, args, kwargs))
1387: 
1388:         if len(self.callbacks) == 0:
1389:             self.stop()
1390: 
1391: 
1392: class Event(object):
1393:     '''
1394:     A matplotlib event.  Attach additional attributes as defined in
1395:     :meth:`FigureCanvasBase.mpl_connect`.  The following attributes
1396:     are defined and shown with their default values
1397: 
1398:     Attributes
1399:     ----------
1400:     name : str
1401:         the event name
1402: 
1403:     canvas : `FigureCanvasBase`
1404:         the backend-specific canvas instance generating the event
1405: 
1406:     guiEvent
1407:         the GUI event that triggered the matplotlib event
1408: 
1409:     '''
1410:     def __init__(self, name, canvas, guiEvent=None):
1411:         self.name = name
1412:         self.canvas = canvas
1413:         self.guiEvent = guiEvent
1414: 
1415: 
1416: @cbook.deprecated("2.1")
1417: class IdleEvent(Event):
1418:     '''
1419:     An event triggered by the GUI backend when it is idle -- useful
1420:     for passive animation
1421:     '''
1422: 
1423: 
1424: class DrawEvent(Event):
1425:     '''
1426:     An event triggered by a draw operation on the canvas
1427: 
1428:     In addition to the :class:`Event` attributes, the following event
1429:     attributes are defined:
1430: 
1431:     Attributes
1432:     ----------
1433:     renderer : `RendererBase`
1434:         the renderer for the draw event
1435: 
1436:     '''
1437:     def __init__(self, name, canvas, renderer):
1438:         Event.__init__(self, name, canvas)
1439:         self.renderer = renderer
1440: 
1441: 
1442: class ResizeEvent(Event):
1443:     '''
1444:     An event triggered by a canvas resize
1445: 
1446:     In addition to the :class:`Event` attributes, the following event
1447:     attributes are defined:
1448: 
1449:     Attributes
1450:     ----------
1451:     width : scalar
1452:         width of the canvas in pixels
1453: 
1454:     height : scalar
1455:         height of the canvas in pixels
1456: 
1457:     '''
1458:     def __init__(self, name, canvas):
1459:         Event.__init__(self, name, canvas)
1460:         self.width, self.height = canvas.get_width_height()
1461: 
1462: 
1463: class CloseEvent(Event):
1464:     '''
1465:     An event triggered by a figure being closed
1466: 
1467:     '''
1468:     def __init__(self, name, canvas, guiEvent=None):
1469:         Event.__init__(self, name, canvas, guiEvent)
1470: 
1471: 
1472: class LocationEvent(Event):
1473:     '''
1474:     An event that has a screen location
1475: 
1476:     The following additional attributes are defined and shown with
1477:     their default values.
1478: 
1479:     In addition to the :class:`Event` attributes, the following
1480:     event attributes are defined:
1481: 
1482:     Attributes
1483:     ----------
1484:     x : scalar
1485:         x position - pixels from left of canvas
1486: 
1487:     y : scalar
1488:         y position - pixels from bottom of canvas
1489: 
1490:     inaxes : bool
1491:         the :class:`~matplotlib.axes.Axes` instance if mouse is over axes
1492: 
1493:     xdata : scalar
1494:         x coord of mouse in data coords
1495: 
1496:     ydata : scalar
1497:         y coord of mouse in data coords
1498: 
1499:     '''
1500:     x = None       # x position - pixels from left of canvas
1501:     y = None       # y position - pixels from right of canvas
1502:     inaxes = None  # the Axes instance if mouse us over axes
1503:     xdata = None   # x coord of mouse in data coords
1504:     ydata = None   # y coord of mouse in data coords
1505: 
1506:     # the last event that was triggered before this one
1507:     lastevent = None
1508: 
1509:     def __init__(self, name, canvas, x, y, guiEvent=None):
1510:         '''
1511:         *x*, *y* in figure coords, 0,0 = bottom, left
1512:         '''
1513:         Event.__init__(self, name, canvas, guiEvent=guiEvent)
1514:         self.x = x
1515:         self.y = y
1516: 
1517:         if x is None or y is None:
1518:             # cannot check if event was in axes if no x,y info
1519:             self.inaxes = None
1520:             self._update_enter_leave()
1521:             return
1522: 
1523:         # Find all axes containing the mouse
1524:         if self.canvas.mouse_grabber is None:
1525:             axes_list = [a for a in self.canvas.figure.get_axes()
1526:                          if a.in_axes(self)]
1527:         else:
1528:             axes_list = [self.canvas.mouse_grabber]
1529: 
1530:         if axes_list:  # Use highest zorder.
1531:             self.inaxes = max(axes_list, key=lambda x: x.zorder)
1532:         else:  # None found.
1533:             self.inaxes = None
1534:             self._update_enter_leave()
1535:             return
1536: 
1537:         try:
1538:             trans = self.inaxes.transData.inverted()
1539:             xdata, ydata = trans.transform_point((x, y))
1540:         except ValueError:
1541:             self.xdata = None
1542:             self.ydata = None
1543:         else:
1544:             self.xdata = xdata
1545:             self.ydata = ydata
1546: 
1547:         self._update_enter_leave()
1548: 
1549:     def _update_enter_leave(self):
1550:         'process the figure/axes enter leave events'
1551:         if LocationEvent.lastevent is not None:
1552:             last = LocationEvent.lastevent
1553:             if last.inaxes != self.inaxes:
1554:                 # process axes enter/leave events
1555:                 try:
1556:                     if last.inaxes is not None:
1557:                         last.canvas.callbacks.process('axes_leave_event', last)
1558:                 except:
1559:                     pass
1560:                     # See ticket 2901582.
1561:                     # I think this is a valid exception to the rule
1562:                     # against catching all exceptions; if anything goes
1563:                     # wrong, we simply want to move on and process the
1564:                     # current event.
1565:                 if self.inaxes is not None:
1566:                     self.canvas.callbacks.process('axes_enter_event', self)
1567: 
1568:         else:
1569:             # process a figure enter event
1570:             if self.inaxes is not None:
1571:                 self.canvas.callbacks.process('axes_enter_event', self)
1572: 
1573:         LocationEvent.lastevent = self
1574: 
1575: 
1576: class MouseEvent(LocationEvent):
1577:     '''
1578:     A mouse event ('button_press_event',
1579:                    'button_release_event',
1580:                    'scroll_event',
1581:                    'motion_notify_event').
1582: 
1583:     In addition to the :class:`Event` and :class:`LocationEvent`
1584:     attributes, the following attributes are defined:
1585: 
1586:     Attributes
1587:     ----------
1588:     button : None, scalar, or str
1589:         button pressed None, 1, 2, 3, 'up', 'down' (up and down are used
1590:         for scroll events).  Note that in the nbagg backend, both the
1591:         middle and right clicks return 3 since right clicking will bring
1592:         up the context menu in some browsers.
1593: 
1594:     key : None, or str
1595:         the key depressed when the mouse event triggered (see
1596:         :class:`KeyEvent`)
1597: 
1598:     step : scalar
1599:         number of scroll steps (positive for 'up', negative for 'down')
1600: 
1601:     Examples
1602:     --------
1603:     Usage::
1604: 
1605:         def on_press(event):
1606:             print('you pressed', event.button, event.xdata, event.ydata)
1607: 
1608:         cid = fig.canvas.mpl_connect('button_press_event', on_press)
1609: 
1610:     '''
1611:     x = None         # x position - pixels from left of canvas
1612:     y = None         # y position - pixels from right of canvas
1613:     button = None    # button pressed None, 1, 2, 3
1614:     dblclick = None  # whether or not the event is the result of a double click
1615:     inaxes = None    # the Axes instance if mouse us over axes
1616:     xdata = None     # x coord of mouse in data coords
1617:     ydata = None     # y coord of mouse in data coords
1618:     step = None      # scroll steps for scroll events
1619: 
1620:     def __init__(self, name, canvas, x, y, button=None, key=None,
1621:                  step=0, dblclick=False, guiEvent=None):
1622:         '''
1623:         x, y in figure coords, 0,0 = bottom, left
1624:         button pressed None, 1, 2, 3, 'up', 'down'
1625:         '''
1626:         LocationEvent.__init__(self, name, canvas, x, y, guiEvent=guiEvent)
1627:         self.button = button
1628:         self.key = key
1629:         self.step = step
1630:         self.dblclick = dblclick
1631: 
1632:     def __str__(self):
1633:         return ("MPL MouseEvent: xy=(%d,%d) xydata=(%s,%s) button=%s " +
1634:                 "dblclick=%s inaxes=%s") % (self.x, self.y, self.xdata,
1635:                                             self.ydata, self.button,
1636:                                             self.dblclick, self.inaxes)
1637: 
1638: 
1639: class PickEvent(Event):
1640:     '''
1641:     a pick event, fired when the user picks a location on the canvas
1642:     sufficiently close to an artist.
1643: 
1644:     Attrs: all the :class:`Event` attributes plus
1645: 
1646:     Attributes
1647:     ----------
1648:     mouseevent : `MouseEvent`
1649:         the mouse event that generated the pick
1650: 
1651:     artist : `matplotlib.artist.Artist`
1652:         the picked artist
1653: 
1654:     other
1655:         extra class dependent attrs -- e.g., a
1656:         :class:`~matplotlib.lines.Line2D` pick may define different
1657:         extra attributes than a
1658:         :class:`~matplotlib.collections.PatchCollection` pick event
1659: 
1660:     Examples
1661:     --------
1662:     Usage::
1663: 
1664:         ax.plot(np.rand(100), 'o', picker=5)  # 5 points tolerance
1665: 
1666:         def on_pick(event):
1667:             line = event.artist
1668:             xdata, ydata = line.get_data()
1669:             ind = event.ind
1670:             print('on pick line:', np.array([xdata[ind], ydata[ind]]).T)
1671: 
1672:         cid = fig.canvas.mpl_connect('pick_event', on_pick)
1673: 
1674:     '''
1675:     def __init__(self, name, canvas, mouseevent, artist,
1676:                  guiEvent=None, **kwargs):
1677:         Event.__init__(self, name, canvas, guiEvent)
1678:         self.mouseevent = mouseevent
1679:         self.artist = artist
1680:         self.__dict__.update(kwargs)
1681: 
1682: 
1683: class KeyEvent(LocationEvent):
1684:     '''
1685:     A key event (key press, key release).
1686: 
1687:     Attach additional attributes as defined in
1688:     :meth:`FigureCanvasBase.mpl_connect`.
1689: 
1690:     In addition to the :class:`Event` and :class:`LocationEvent`
1691:     attributes, the following attributes are defined:
1692: 
1693:     Attributes
1694:     ----------
1695:     key : None or str
1696:         the key(s) pressed. Could be **None**, a single case sensitive ascii
1697:         character ("g", "G", "#", etc.), a special key
1698:         ("control", "shift", "f1", "up", etc.) or a
1699:         combination of the above (e.g., "ctrl+alt+g", "ctrl+alt+G").
1700: 
1701:     Notes
1702:     -----
1703:     Modifier keys will be prefixed to the pressed key and will be in the order
1704:     "ctrl", "alt", "super". The exception to this rule is when the pressed key
1705:     is itself a modifier key, therefore "ctrl+alt" and "alt+control" can both
1706:     be valid key values.
1707: 
1708:     Examples
1709:     --------
1710:     Usage::
1711: 
1712:         def on_key(event):
1713:             print('you pressed', event.key, event.xdata, event.ydata)
1714: 
1715:         cid = fig.canvas.mpl_connect('key_press_event', on_key)
1716: 
1717:     '''
1718:     def __init__(self, name, canvas, key, x=0, y=0, guiEvent=None):
1719:         LocationEvent.__init__(self, name, canvas, x, y, guiEvent=guiEvent)
1720:         self.key = key
1721: 
1722: 
1723: class FigureCanvasBase(object):
1724:     '''
1725:     The canvas the figure renders into.
1726: 
1727:     Public attributes
1728: 
1729:     Attributes
1730:     ----------
1731:     figure : `matplotlib.figure.Figure`
1732:         A high-level figure instance
1733: 
1734:     '''
1735:     events = [
1736:         'resize_event',
1737:         'draw_event',
1738:         'key_press_event',
1739:         'key_release_event',
1740:         'button_press_event',
1741:         'button_release_event',
1742:         'scroll_event',
1743:         'motion_notify_event',
1744:         'pick_event',
1745:         'idle_event',
1746:         'figure_enter_event',
1747:         'figure_leave_event',
1748:         'axes_enter_event',
1749:         'axes_leave_event',
1750:         'close_event'
1751:     ]
1752: 
1753:     supports_blit = True
1754:     fixed_dpi = None
1755: 
1756:     filetypes = _default_filetypes
1757:     if _has_pil:
1758:         # JPEG support
1759:         register_backend('jpg', 'matplotlib.backends.backend_agg',
1760:                          'Joint Photographic Experts Group')
1761:         register_backend('jpeg', 'matplotlib.backends.backend_agg',
1762:                          'Joint Photographic Experts Group')
1763:         # TIFF support
1764:         register_backend('tif', 'matplotlib.backends.backend_agg',
1765:                          'Tagged Image File Format')
1766:         register_backend('tiff', 'matplotlib.backends.backend_agg',
1767:                          'Tagged Image File Format')
1768: 
1769:     def __init__(self, figure):
1770:         self._is_idle_drawing = True
1771:         self._is_saving = False
1772:         figure.set_canvas(self)
1773:         self.figure = figure
1774:         # a dictionary from event name to a dictionary that maps cid->func
1775:         self.callbacks = cbook.CallbackRegistry()
1776:         self.widgetlock = widgets.LockDraw()
1777:         self._button = None  # the button pressed
1778:         self._key = None  # the key pressed
1779:         self._lastx, self._lasty = None, None
1780:         self.button_pick_id = self.mpl_connect('button_press_event', self.pick)
1781:         self.scroll_pick_id = self.mpl_connect('scroll_event', self.pick)
1782:         self.mouse_grabber = None  # the axes currently grabbing mouse
1783:         self.toolbar = None  # NavigationToolbar2 will set me
1784:         self._is_idle_drawing = False
1785: 
1786:     @contextmanager
1787:     def _idle_draw_cntx(self):
1788:         self._is_idle_drawing = True
1789:         yield
1790:         self._is_idle_drawing = False
1791: 
1792:     def is_saving(self):
1793:         '''
1794:         Returns whether the renderer is in the process of saving
1795:         to a file, rather than rendering for an on-screen buffer.
1796:         '''
1797:         return self._is_saving
1798: 
1799:     def onRemove(self, ev):
1800:         '''
1801:         Mouse event processor which removes the top artist
1802:         under the cursor.  Connect this to the 'mouse_press_event'
1803:         using::
1804: 
1805:             canvas.mpl_connect('mouse_press_event',canvas.onRemove)
1806:         '''
1807:         # Find the top artist under the cursor
1808:         under = sorted(self.figure.hitlist(ev), key=lambda x: x.zorder)
1809:         h = None
1810:         if under:
1811:             h = under[-1]
1812: 
1813:         # Try deleting that artist, or its parent if you
1814:         # can't delete the artist
1815:         while h:
1816:             if h.remove():
1817:                 self.draw_idle()
1818:                 break
1819:             parent = None
1820:             for p in under:
1821:                 if h in p.get_children():
1822:                     parent = p
1823:                     break
1824:             h = parent
1825: 
1826:     def pick(self, mouseevent):
1827:         if not self.widgetlock.locked():
1828:             self.figure.pick(mouseevent)
1829: 
1830:     def blit(self, bbox=None):
1831:         '''Blit the canvas in bbox (default entire canvas).'''
1832: 
1833:     def resize(self, w, h):
1834:         '''Set the canvas size in pixels.'''
1835: 
1836:     def draw_event(self, renderer):
1837:         '''Pass a `DrawEvent` to all functions connected to ``draw_event``.'''
1838:         s = 'draw_event'
1839:         event = DrawEvent(s, self, renderer)
1840:         self.callbacks.process(s, event)
1841: 
1842:     def resize_event(self):
1843:         '''Pass a `ResizeEvent` to all functions connected to ``resize_event``.
1844:         '''
1845:         s = 'resize_event'
1846:         event = ResizeEvent(s, self)
1847:         self.callbacks.process(s, event)
1848:         self.draw_idle()
1849: 
1850:     def close_event(self, guiEvent=None):
1851:         '''Pass a `CloseEvent` to all functions connected to ``close_event``.
1852:         '''
1853:         s = 'close_event'
1854:         try:
1855:             event = CloseEvent(s, self, guiEvent=guiEvent)
1856:             self.callbacks.process(s, event)
1857:         except (TypeError, AttributeError):
1858:             pass
1859:             # Suppress the TypeError when the python session is being killed.
1860:             # It may be that a better solution would be a mechanism to
1861:             # disconnect all callbacks upon shutdown.
1862:             # AttributeError occurs on OSX with qt4agg upon exiting
1863:             # with an open window; 'callbacks' attribute no longer exists.
1864: 
1865:     def key_press_event(self, key, guiEvent=None):
1866:         '''Pass a `KeyEvent` to all functions connected to ``key_press_event``.
1867:         '''
1868:         self._key = key
1869:         s = 'key_press_event'
1870:         event = KeyEvent(
1871:             s, self, key, self._lastx, self._lasty, guiEvent=guiEvent)
1872:         self.callbacks.process(s, event)
1873: 
1874:     def key_release_event(self, key, guiEvent=None):
1875:         '''
1876:         Pass a `KeyEvent` to all functions connected to ``key_release_event``.
1877:         '''
1878:         s = 'key_release_event'
1879:         event = KeyEvent(
1880:             s, self, key, self._lastx, self._lasty, guiEvent=guiEvent)
1881:         self.callbacks.process(s, event)
1882:         self._key = None
1883: 
1884:     def pick_event(self, mouseevent, artist, **kwargs):
1885:         '''
1886:         This method will be called by artists who are picked and will
1887:         fire off :class:`PickEvent` callbacks registered listeners
1888:         '''
1889:         s = 'pick_event'
1890:         event = PickEvent(s, self, mouseevent, artist,
1891:                           guiEvent=mouseevent.guiEvent,
1892:                           **kwargs)
1893:         self.callbacks.process(s, event)
1894: 
1895:     def scroll_event(self, x, y, step, guiEvent=None):
1896:         '''
1897:         Backend derived classes should call this function on any
1898:         scroll wheel event.  x,y are the canvas coords: 0,0 is lower,
1899:         left.  button and key are as defined in MouseEvent.
1900: 
1901:         This method will be call all functions connected to the
1902:         'scroll_event' with a :class:`MouseEvent` instance.
1903:         '''
1904:         if step >= 0:
1905:             self._button = 'up'
1906:         else:
1907:             self._button = 'down'
1908:         s = 'scroll_event'
1909:         mouseevent = MouseEvent(s, self, x, y, self._button, self._key,
1910:                                 step=step, guiEvent=guiEvent)
1911:         self.callbacks.process(s, mouseevent)
1912: 
1913:     def button_press_event(self, x, y, button, dblclick=False, guiEvent=None):
1914:         '''
1915:         Backend derived classes should call this function on any mouse
1916:         button press.  x,y are the canvas coords: 0,0 is lower, left.
1917:         button and key are as defined in :class:`MouseEvent`.
1918: 
1919:         This method will be call all functions connected to the
1920:         'button_press_event' with a :class:`MouseEvent` instance.
1921:         '''
1922:         self._button = button
1923:         s = 'button_press_event'
1924:         mouseevent = MouseEvent(s, self, x, y, button, self._key,
1925:                                 dblclick=dblclick, guiEvent=guiEvent)
1926:         self.callbacks.process(s, mouseevent)
1927: 
1928:     def button_release_event(self, x, y, button, guiEvent=None):
1929:         '''
1930:         Backend derived classes should call this function on any mouse
1931:         button release.
1932: 
1933:         This method will call all functions connected to the
1934:         'button_release_event' with a :class:`MouseEvent` instance.
1935: 
1936:         Parameters
1937:         ----------
1938:         x : scalar
1939:             the canvas coordinates where 0=left
1940: 
1941:         y : scalar
1942:             the canvas coordinates where 0=bottom
1943: 
1944:         guiEvent
1945:             the native UI event that generated the mpl event
1946: 
1947:         '''
1948:         s = 'button_release_event'
1949:         event = MouseEvent(s, self, x, y, button, self._key, guiEvent=guiEvent)
1950:         self.callbacks.process(s, event)
1951:         self._button = None
1952: 
1953:     def motion_notify_event(self, x, y, guiEvent=None):
1954:         '''
1955:         Backend derived classes should call this function on any
1956:         motion-notify-event.
1957: 
1958:         This method will call all functions connected to the
1959:         'motion_notify_event' with a :class:`MouseEvent` instance.
1960: 
1961:         Parameters
1962:         ----------
1963:         x : scalar
1964:             the canvas coordinates where 0=left
1965: 
1966:         y : scalar
1967:             the canvas coordinates where 0=bottom
1968: 
1969:         guiEvent
1970:             the native UI event that generated the mpl event
1971: 
1972:         '''
1973:         self._lastx, self._lasty = x, y
1974:         s = 'motion_notify_event'
1975:         event = MouseEvent(s, self, x, y, self._button, self._key,
1976:                            guiEvent=guiEvent)
1977:         self.callbacks.process(s, event)
1978: 
1979:     def leave_notify_event(self, guiEvent=None):
1980:         '''
1981:         Backend derived classes should call this function when leaving
1982:         canvas
1983: 
1984:         Parameters
1985:         ----------
1986:         guiEvent
1987:             the native UI event that generated the mpl event
1988: 
1989:         '''
1990: 
1991:         self.callbacks.process('figure_leave_event', LocationEvent.lastevent)
1992:         LocationEvent.lastevent = None
1993:         self._lastx, self._lasty = None, None
1994: 
1995:     def enter_notify_event(self, guiEvent=None, xy=None):
1996:         '''
1997:         Backend derived classes should call this function when entering
1998:         canvas
1999: 
2000:         Parameters
2001:         ----------
2002:         guiEvent
2003:             the native UI event that generated the mpl event
2004:         xy : tuple of 2 scalars
2005:             the coordinate location of the pointer when the canvas is
2006:             entered
2007: 
2008:         '''
2009:         if xy is not None:
2010:             x, y = xy
2011:             self._lastx, self._lasty = x, y
2012: 
2013:         event = Event('figure_enter_event', self, guiEvent)
2014:         self.callbacks.process('figure_enter_event', event)
2015: 
2016:     @cbook.deprecated("2.1")
2017:     def idle_event(self, guiEvent=None):
2018:         '''Called when GUI is idle.'''
2019:         s = 'idle_event'
2020:         event = IdleEvent(s, self, guiEvent=guiEvent)
2021:         self.callbacks.process(s, event)
2022: 
2023:     def grab_mouse(self, ax):
2024:         '''
2025:         Set the child axes which are currently grabbing the mouse events.
2026:         Usually called by the widgets themselves.
2027:         It is an error to call this if the mouse is already grabbed by
2028:         another axes.
2029:         '''
2030:         if self.mouse_grabber not in (None, ax):
2031:             raise RuntimeError("Another Axes already grabs mouse input")
2032:         self.mouse_grabber = ax
2033: 
2034:     def release_mouse(self, ax):
2035:         '''
2036:         Release the mouse grab held by the axes, ax.
2037:         Usually called by the widgets.
2038:         It is ok to call this even if you ax doesn't have the mouse
2039:         grab currently.
2040:         '''
2041:         if self.mouse_grabber is ax:
2042:             self.mouse_grabber = None
2043: 
2044:     def draw(self, *args, **kwargs):
2045:         '''Render the :class:`~matplotlib.figure.Figure`.'''
2046: 
2047:     def draw_idle(self, *args, **kwargs):
2048:         '''
2049:         :meth:`draw` only if idle; defaults to draw but backends can override
2050:         '''
2051:         if not self._is_idle_drawing:
2052:             with self._idle_draw_cntx():
2053:                 self.draw(*args, **kwargs)
2054: 
2055:     def draw_cursor(self, event):
2056:         '''
2057:         Draw a cursor in the event.axes if inaxes is not None.  Use
2058:         native GUI drawing for efficiency if possible
2059:         '''
2060: 
2061:     def get_width_height(self):
2062:         '''
2063:         Return the figure width and height in points or pixels
2064:         (depending on the backend), truncated to integers
2065:         '''
2066:         return int(self.figure.bbox.width), int(self.figure.bbox.height)
2067: 
2068:     @classmethod
2069:     def get_supported_filetypes(cls):
2070:         '''Return dict of savefig file formats supported by this backend'''
2071:         return cls.filetypes
2072: 
2073:     @classmethod
2074:     def get_supported_filetypes_grouped(cls):
2075:         '''Return a dict of savefig file formats supported by this backend,
2076:         where the keys are a file type name, such as 'Joint Photographic
2077:         Experts Group', and the values are a list of filename extensions used
2078:         for that filetype, such as ['jpg', 'jpeg'].'''
2079:         groupings = {}
2080:         for ext, name in six.iteritems(cls.filetypes):
2081:             groupings.setdefault(name, []).append(ext)
2082:             groupings[name].sort()
2083:         return groupings
2084: 
2085:     def _get_output_canvas(self, format):
2086:         '''Return a canvas that is suitable for saving figures to a specified
2087:         file format. If necessary, this function will switch to a registered
2088:         backend that supports the format.
2089:         '''
2090:         method_name = 'print_%s' % format
2091: 
2092:         # check if this canvas supports the requested format
2093:         if hasattr(self, method_name):
2094:             return self
2095: 
2096:         # check if there is a default canvas for the requested format
2097:         canvas_class = get_registered_canvas_class(format)
2098:         if canvas_class:
2099:             return self.switch_backends(canvas_class)
2100: 
2101:         # else report error for unsupported format
2102:         formats = sorted(self.get_supported_filetypes())
2103:         raise ValueError('Format "%s" is not supported.\n'
2104:                          'Supported formats: '
2105:                          '%s.' % (format, ', '.join(formats)))
2106: 
2107:     def print_figure(self, filename, dpi=None, facecolor=None, edgecolor=None,
2108:                      orientation='portrait', format=None, **kwargs):
2109:         '''
2110:         Render the figure to hardcopy. Set the figure patch face and edge
2111:         colors.  This is useful because some of the GUIs have a gray figure
2112:         face color background and you'll probably want to override this on
2113:         hardcopy.
2114: 
2115:         Parameters
2116:         ----------
2117:         filename
2118:             can also be a file object on image backends
2119: 
2120:         orientation : {'landscape', 'portrait'}, optional
2121:             only currently applies to PostScript printing.
2122: 
2123:         dpi : scalar, optional
2124:             the dots per inch to save the figure in; if None, use savefig.dpi
2125: 
2126:         facecolor : color spec or None, optional
2127:             the facecolor of the figure; if None, defaults to savefig.facecolor
2128: 
2129:         edgecolor : color spec or None, optional
2130:             the edgecolor of the figure; if None, defaults to savefig.edgecolor
2131: 
2132:         format : str, optional
2133:             when set, forcibly set the file format to save to
2134: 
2135:         bbox_inches : str or `~matplotlib.transforms.Bbox`, optional
2136:             Bbox in inches. Only the given portion of the figure is
2137:             saved. If 'tight', try to figure out the tight bbox of
2138:             the figure. If None, use savefig.bbox
2139: 
2140:         pad_inches : scalar, optional
2141:             Amount of padding around the figure when bbox_inches is
2142:             'tight'. If None, use savefig.pad_inches
2143: 
2144:         bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional
2145:             A list of extra artists that will be considered when the
2146:             tight bbox is calculated.
2147: 
2148:         '''
2149:         self._is_saving = True
2150: 
2151:         if format is None:
2152:             # get format from filename, or from backend's default filetype
2153:             if isinstance(filename, six.string_types):
2154:                 format = os.path.splitext(filename)[1][1:]
2155:             if format is None or format == '':
2156:                 format = self.get_default_filetype()
2157:                 if isinstance(filename, six.string_types):
2158:                     filename = filename.rstrip('.') + '.' + format
2159:         format = format.lower()
2160: 
2161:         # get canvas object and print method for format
2162:         canvas = self._get_output_canvas(format)
2163:         print_method = getattr(canvas, 'print_%s' % format)
2164: 
2165:         if dpi is None:
2166:             dpi = rcParams['savefig.dpi']
2167: 
2168:         if dpi == 'figure':
2169:             dpi = getattr(self.figure, '_original_dpi', self.figure.dpi)
2170: 
2171:         if facecolor is None:
2172:             facecolor = rcParams['savefig.facecolor']
2173:         if edgecolor is None:
2174:             edgecolor = rcParams['savefig.edgecolor']
2175: 
2176:         origDPI = self.figure.dpi
2177:         origfacecolor = self.figure.get_facecolor()
2178:         origedgecolor = self.figure.get_edgecolor()
2179: 
2180:         self.figure.dpi = dpi
2181:         self.figure.set_facecolor(facecolor)
2182:         self.figure.set_edgecolor(edgecolor)
2183: 
2184:         bbox_inches = kwargs.pop("bbox_inches", None)
2185:         if bbox_inches is None:
2186:             bbox_inches = rcParams['savefig.bbox']
2187: 
2188:         if bbox_inches:
2189:             # call adjust_bbox to save only the given area
2190:             if bbox_inches == "tight":
2191:                 # when bbox_inches == "tight", it saves the figure
2192:                 # twice. The first save command is just to estimate
2193:                 # the bounding box of the figure. A stringIO object is
2194:                 # used as a temporary file object, but it causes a
2195:                 # problem for some backends (ps backend with
2196:                 # usetex=True) if they expect a filename, not a
2197:                 # file-like object. As I think it is best to change
2198:                 # the backend to support file-like object, i'm going
2199:                 # to leave it as it is. However, a better solution
2200:                 # than stringIO seems to be needed. -JJL
2201:                 result = print_method(
2202:                     io.BytesIO(),
2203:                     dpi=dpi,
2204:                     facecolor=facecolor,
2205:                     edgecolor=edgecolor,
2206:                     orientation=orientation,
2207:                     dryrun=True,
2208:                     **kwargs)
2209:                 renderer = self.figure._cachedRenderer
2210:                 bbox_inches = self.figure.get_tightbbox(renderer)
2211: 
2212:                 bbox_artists = kwargs.pop("bbox_extra_artists", None)
2213:                 if bbox_artists is None:
2214:                     bbox_artists = self.figure.get_default_bbox_extra_artists()
2215: 
2216:                 bbox_filtered = []
2217:                 for a in bbox_artists:
2218:                     bbox = a.get_window_extent(renderer)
2219:                     if a.get_clip_on():
2220:                         clip_box = a.get_clip_box()
2221:                         if clip_box is not None:
2222:                             bbox = Bbox.intersection(bbox, clip_box)
2223:                         clip_path = a.get_clip_path()
2224:                         if clip_path is not None and bbox is not None:
2225:                             clip_path = clip_path.get_fully_transformed_path()
2226:                             bbox = Bbox.intersection(bbox,
2227:                                                      clip_path.get_extents())
2228:                     if bbox is not None and (bbox.width != 0 or
2229:                                              bbox.height != 0):
2230:                         bbox_filtered.append(bbox)
2231: 
2232:                 if bbox_filtered:
2233:                     _bbox = Bbox.union(bbox_filtered)
2234:                     trans = Affine2D().scale(1.0 / self.figure.dpi)
2235:                     bbox_extra = TransformedBbox(_bbox, trans)
2236:                     bbox_inches = Bbox.union([bbox_inches, bbox_extra])
2237: 
2238:                 pad = kwargs.pop("pad_inches", None)
2239:                 if pad is None:
2240:                     pad = rcParams['savefig.pad_inches']
2241: 
2242:                 bbox_inches = bbox_inches.padded(pad)
2243: 
2244:             restore_bbox = tight_bbox.adjust_bbox(self.figure, bbox_inches,
2245:                                                   canvas.fixed_dpi)
2246: 
2247:             _bbox_inches_restore = (bbox_inches, restore_bbox)
2248:         else:
2249:             _bbox_inches_restore = None
2250: 
2251:         try:
2252:             result = print_method(
2253:                 filename,
2254:                 dpi=dpi,
2255:                 facecolor=facecolor,
2256:                 edgecolor=edgecolor,
2257:                 orientation=orientation,
2258:                 bbox_inches_restore=_bbox_inches_restore,
2259:                 **kwargs)
2260:         finally:
2261:             if bbox_inches and restore_bbox:
2262:                 restore_bbox()
2263: 
2264:             self.figure.dpi = origDPI
2265:             self.figure.set_facecolor(origfacecolor)
2266:             self.figure.set_edgecolor(origedgecolor)
2267:             self.figure.set_canvas(self)
2268:             self._is_saving = False
2269:             #self.figure.canvas.draw() ## seems superfluous
2270:         return result
2271: 
2272:     @classmethod
2273:     def get_default_filetype(cls):
2274:         '''
2275:         Get the default savefig file format as specified in rcParam
2276:         ``savefig.format``. Returned string excludes period. Overridden
2277:         in backends that only support a single file type.
2278:         '''
2279:         return rcParams['savefig.format']
2280: 
2281:     def get_window_title(self):
2282:         '''
2283:         Get the title text of the window containing the figure.
2284:         Return None if there is no window (e.g., a PS backend).
2285:         '''
2286:         if hasattr(self, "manager"):
2287:             return self.manager.get_window_title()
2288: 
2289:     def set_window_title(self, title):
2290:         '''
2291:         Set the title text of the window containing the figure.  Note that
2292:         this has no effect if there is no window (e.g., a PS backend).
2293:         '''
2294:         if hasattr(self, "manager"):
2295:             self.manager.set_window_title(title)
2296: 
2297:     def get_default_filename(self):
2298:         '''
2299:         Return a string, which includes extension, suitable for use as
2300:         a default filename.
2301:         '''
2302:         default_basename = self.get_window_title() or 'image'
2303:         default_basename = default_basename.replace(' ', '_')
2304:         default_filetype = self.get_default_filetype()
2305:         default_filename = default_basename + '.' + default_filetype
2306: 
2307:         save_dir = os.path.expanduser(rcParams['savefig.directory'])
2308: 
2309:         # ensure non-existing filename in save dir
2310:         i = 1
2311:         while os.path.isfile(os.path.join(save_dir, default_filename)):
2312:             # attach numerical count to basename
2313:             default_filename = '{0}-{1}.{2}'.format(default_basename, i, default_filetype)
2314:             i += 1
2315: 
2316:         return default_filename
2317: 
2318:     def switch_backends(self, FigureCanvasClass):
2319:         '''
2320:         Instantiate an instance of FigureCanvasClass
2321: 
2322:         This is used for backend switching, e.g., to instantiate a
2323:         FigureCanvasPS from a FigureCanvasGTK.  Note, deep copying is
2324:         not done, so any changes to one of the instances (e.g., setting
2325:         figure size or line props), will be reflected in the other
2326:         '''
2327:         newCanvas = FigureCanvasClass(self.figure)
2328:         newCanvas._is_saving = self._is_saving
2329:         return newCanvas
2330: 
2331:     def mpl_connect(self, s, func):
2332:         '''
2333:         Connect event with string *s* to *func*.  The signature of *func* is::
2334: 
2335:           def func(event)
2336: 
2337:         where event is a :class:`matplotlib.backend_bases.Event`.  The
2338:         following events are recognized
2339: 
2340:         - 'button_press_event'
2341:         - 'button_release_event'
2342:         - 'draw_event'
2343:         - 'key_press_event'
2344:         - 'key_release_event'
2345:         - 'motion_notify_event'
2346:         - 'pick_event'
2347:         - 'resize_event'
2348:         - 'scroll_event'
2349:         - 'figure_enter_event',
2350:         - 'figure_leave_event',
2351:         - 'axes_enter_event',
2352:         - 'axes_leave_event'
2353:         - 'close_event'
2354: 
2355:         For the location events (button and key press/release), if the
2356:         mouse is over the axes, the variable ``event.inaxes`` will be
2357:         set to the :class:`~matplotlib.axes.Axes` the event occurs is
2358:         over, and additionally, the variables ``event.xdata`` and
2359:         ``event.ydata`` will be defined.  This is the mouse location
2360:         in data coords.  See
2361:         :class:`~matplotlib.backend_bases.KeyEvent` and
2362:         :class:`~matplotlib.backend_bases.MouseEvent` for more info.
2363: 
2364:         Return value is a connection id that can be used with
2365:         :meth:`~matplotlib.backend_bases.Event.mpl_disconnect`.
2366: 
2367:         Examples
2368:         --------
2369:         Usage::
2370: 
2371:             def on_press(event):
2372:                 print('you pressed', event.button, event.xdata, event.ydata)
2373: 
2374:             cid = canvas.mpl_connect('button_press_event', on_press)
2375: 
2376:         '''
2377:         if s == 'idle_event':
2378:             warn_deprecated(1.5,
2379:                 "idle_event is only implemented for the wx backend, and will "
2380:                 "be removed in matplotlib 2.1. Use the animations module "
2381:                 "instead.")
2382: 
2383:         return self.callbacks.connect(s, func)
2384: 
2385:     def mpl_disconnect(self, cid):
2386:         '''
2387:         Disconnect callback id cid
2388: 
2389:         Examples
2390:         --------
2391:         Usage::
2392: 
2393:             cid = canvas.mpl_connect('button_press_event', on_press)
2394:             #...later
2395:             canvas.mpl_disconnect(cid)
2396:         '''
2397:         return self.callbacks.disconnect(cid)
2398: 
2399:     def new_timer(self, *args, **kwargs):
2400:         '''
2401:         Creates a new backend-specific subclass of
2402:         :class:`backend_bases.Timer`. This is useful for getting periodic
2403:         events through the backend's native event loop. Implemented only for
2404:         backends with GUIs.
2405: 
2406:         Other Parameters
2407:         ----------------
2408:         interval : scalar
2409:             Timer interval in milliseconds
2410:         callbacks : list
2411:             Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``
2412:             will be executed by the timer every *interval*.
2413: 
2414:         '''
2415:         return TimerBase(*args, **kwargs)
2416: 
2417:     def flush_events(self):
2418:         '''Flush the GUI events for the figure.
2419: 
2420:         Interactive backends need to reimplement this method.
2421:         '''
2422: 
2423:     def start_event_loop(self, timeout=0):
2424:         '''Start a blocking event loop.
2425: 
2426:         Such an event loop is used by interactive functions, such as `ginput`
2427:         and `waitforbuttonpress`, to wait for events.
2428: 
2429:         The event loop blocks until a callback function triggers
2430:         `stop_event_loop`, or *timeout* is reached.
2431: 
2432:         If *timeout* is negative, never timeout.
2433: 
2434:         Only interactive backends need to reimplement this method and it relies
2435:         on `flush_events` being properly implemented.
2436: 
2437:         Interactive backends should implement this in a more native way.
2438:         '''
2439:         if timeout <= 0:
2440:             timeout = np.inf
2441:         timestep = 0.01
2442:         counter = 0
2443:         self._looping = True
2444:         while self._looping and counter * timestep < timeout:
2445:             self.flush_events()
2446:             time.sleep(timestep)
2447:             counter += 1
2448: 
2449:     def stop_event_loop(self):
2450:         '''Stop the current blocking event loop.
2451: 
2452:         Interactive backends need to reimplement this to match
2453:         `start_event_loop`
2454:         '''
2455:         self._looping = False
2456: 
2457:     start_event_loop_default = cbook.deprecated(
2458:         "2.1", name="start_event_loop_default")(start_event_loop)
2459:     stop_event_loop_default = cbook.deprecated(
2460:         "2.1", name="stop_event_loop_default")(stop_event_loop)
2461: 
2462: 
2463: def key_press_handler(event, canvas, toolbar=None):
2464:     '''
2465:     Implement the default mpl key bindings for the canvas and toolbar
2466:     described at :ref:`key-event-handling`
2467: 
2468:     Parameters
2469:     ----------
2470:     event : :class:`KeyEvent`
2471:         a key press/release event
2472:     canvas : :class:`FigureCanvasBase`
2473:         the backend-specific canvas instance
2474:     toolbar : :class:`NavigationToolbar2`
2475:         the navigation cursor toolbar
2476: 
2477:     '''
2478:     # these bindings happen whether you are over an axes or not
2479: 
2480:     if event.key is None:
2481:         return
2482: 
2483:     # Load key-mappings from your matplotlibrc file.
2484:     fullscreen_keys = rcParams['keymap.fullscreen']
2485:     home_keys = rcParams['keymap.home']
2486:     back_keys = rcParams['keymap.back']
2487:     forward_keys = rcParams['keymap.forward']
2488:     pan_keys = rcParams['keymap.pan']
2489:     zoom_keys = rcParams['keymap.zoom']
2490:     save_keys = rcParams['keymap.save']
2491:     quit_keys = rcParams['keymap.quit']
2492:     grid_keys = rcParams['keymap.grid']
2493:     grid_minor_keys = rcParams['keymap.grid_minor']
2494:     toggle_yscale_keys = rcParams['keymap.yscale']
2495:     toggle_xscale_keys = rcParams['keymap.xscale']
2496:     all_keys = rcParams['keymap.all_axes']
2497: 
2498:     # toggle fullscreen mode ('f', 'ctrl + f')
2499:     if event.key in fullscreen_keys:
2500:         try:
2501:             canvas.manager.full_screen_toggle()
2502:         except AttributeError:
2503:             pass
2504: 
2505:     # quit the figure (default key 'ctrl+w')
2506:     if event.key in quit_keys:
2507:         Gcf.destroy_fig(canvas.figure)
2508: 
2509:     if toolbar is not None:
2510:         # home or reset mnemonic  (default key 'h', 'home' and 'r')
2511:         if event.key in home_keys:
2512:             toolbar.home()
2513:         # forward / backward keys to enable left handed quick navigation
2514:         # (default key for backward: 'left', 'backspace' and 'c')
2515:         elif event.key in back_keys:
2516:             toolbar.back()
2517:         # (default key for forward: 'right' and 'v')
2518:         elif event.key in forward_keys:
2519:             toolbar.forward()
2520:         # pan mnemonic (default key 'p')
2521:         elif event.key in pan_keys:
2522:             toolbar.pan()
2523:             toolbar._set_cursor(event)
2524:         # zoom mnemonic (default key 'o')
2525:         elif event.key in zoom_keys:
2526:             toolbar.zoom()
2527:             toolbar._set_cursor(event)
2528:         # saving current figure (default key 's')
2529:         elif event.key in save_keys:
2530:             toolbar.save_figure()
2531: 
2532:     if event.inaxes is None:
2533:         return
2534: 
2535:     # these bindings require the mouse to be over an axes to trigger
2536:     def _get_uniform_gridstate(ticks):
2537:         # Return True/False if all grid lines are on or off, None if they are
2538:         # not all in the same state.
2539:         if all(tick.gridOn for tick in ticks):
2540:             return True
2541:         elif not any(tick.gridOn for tick in ticks):
2542:             return False
2543:         else:
2544:             return None
2545: 
2546:     ax = event.inaxes
2547:     # toggle major grids in current axes (default key 'g')
2548:     # Both here and below (for 'G'), we do nothing if *any* grid (major or
2549:     # minor, x or y) is not in a uniform state, to avoid messing up user
2550:     # customization.
2551:     if (event.key in grid_keys
2552:             # Exclude minor grids not in a uniform state.
2553:             and None not in [_get_uniform_gridstate(ax.xaxis.minorTicks),
2554:                              _get_uniform_gridstate(ax.yaxis.minorTicks)]):
2555:         x_state = _get_uniform_gridstate(ax.xaxis.majorTicks)
2556:         y_state = _get_uniform_gridstate(ax.yaxis.majorTicks)
2557:         cycle = [(False, False), (True, False), (True, True), (False, True)]
2558:         try:
2559:             x_state, y_state = (
2560:                 cycle[(cycle.index((x_state, y_state)) + 1) % len(cycle)])
2561:         except ValueError:
2562:             # Exclude major grids not in a uniform state.
2563:             pass
2564:         else:
2565:             # If turning major grids off, also turn minor grids off.
2566:             ax.grid(x_state, which="major" if x_state else "both", axis="x")
2567:             ax.grid(y_state, which="major" if y_state else "both", axis="y")
2568:             canvas.draw_idle()
2569:     # toggle major and minor grids in current axes (default key 'G')
2570:     if (event.key in grid_minor_keys
2571:             # Exclude major grids not in a uniform state.
2572:             and None not in [_get_uniform_gridstate(ax.xaxis.majorTicks),
2573:                              _get_uniform_gridstate(ax.yaxis.majorTicks)]):
2574:         x_state = _get_uniform_gridstate(ax.xaxis.minorTicks)
2575:         y_state = _get_uniform_gridstate(ax.yaxis.minorTicks)
2576:         cycle = [(False, False), (True, False), (True, True), (False, True)]
2577:         try:
2578:             x_state, y_state = (
2579:                 cycle[(cycle.index((x_state, y_state)) + 1) % len(cycle)])
2580:         except ValueError:
2581:             # Exclude minor grids not in a uniform state.
2582:             pass
2583:         else:
2584:             ax.grid(x_state, which="both", axis="x")
2585:             ax.grid(y_state, which="both", axis="y")
2586:             canvas.draw_idle()
2587:     # toggle scaling of y-axes between 'log and 'linear' (default key 'l')
2588:     elif event.key in toggle_yscale_keys:
2589:         scale = ax.get_yscale()
2590:         if scale == 'log':
2591:             ax.set_yscale('linear')
2592:             ax.figure.canvas.draw_idle()
2593:         elif scale == 'linear':
2594:             try:
2595:                 ax.set_yscale('log')
2596:             except ValueError as exc:
2597:                 warnings.warn(str(exc))
2598:                 ax.set_yscale('linear')
2599:             ax.figure.canvas.draw_idle()
2600:     # toggle scaling of x-axes between 'log and 'linear' (default key 'k')
2601:     elif event.key in toggle_xscale_keys:
2602:         scalex = ax.get_xscale()
2603:         if scalex == 'log':
2604:             ax.set_xscale('linear')
2605:             ax.figure.canvas.draw_idle()
2606:         elif scalex == 'linear':
2607:             try:
2608:                 ax.set_xscale('log')
2609:             except ValueError:
2610:                 warnings.warn(str(exc))
2611:                 ax.set_xscale('linear')
2612:             ax.figure.canvas.draw_idle()
2613: 
2614:     elif (event.key.isdigit() and event.key != '0') or event.key in all_keys:
2615:         # keys in list 'all' enables all axes (default key 'a'),
2616:         # otherwise if key is a number only enable this particular axes
2617:         # if it was the axes, where the event was raised
2618:         if not (event.key in all_keys):
2619:             n = int(event.key) - 1
2620:         for i, a in enumerate(canvas.figure.get_axes()):
2621:             # consider axes, in which the event was raised
2622:             # FIXME: Why only this axes?
2623:             if event.x is not None and event.y is not None \
2624:                     and a.in_axes(event):
2625:                 if event.key in all_keys:
2626:                     a.set_navigate(True)
2627:                 else:
2628:                     a.set_navigate(i == n)
2629: 
2630: 
2631: class NonGuiException(Exception):
2632:     pass
2633: 
2634: 
2635: class FigureManagerBase(object):
2636:     '''
2637:     Helper class for pyplot mode, wraps everything up into a neat bundle
2638: 
2639:     Attributes
2640:     ----------
2641:     canvas : :class:`FigureCanvasBase`
2642:         The backend-specific canvas instance
2643: 
2644:     num : int or str
2645:         The figure number
2646: 
2647:     '''
2648:     def __init__(self, canvas, num):
2649:         self.canvas = canvas
2650:         canvas.manager = self  # store a pointer to parent
2651:         self.num = num
2652: 
2653:         self.key_press_handler_id = None
2654:         '''
2655:         The returned id from connecting the default key handler via
2656:         :meth:`FigureCanvasBase.mpl_connect`.
2657: 
2658:         To disable default key press handling::
2659: 
2660:             manager, canvas = figure.canvas.manager, figure.canvas
2661:             canvas.mpl_disconnect(manager.key_press_handler_id)
2662: 
2663:         '''
2664:         if rcParams['toolbar'] != 'toolmanager':
2665:             self.key_press_handler_id = self.canvas.mpl_connect(
2666:                 'key_press_event',
2667:                 self.key_press)
2668: 
2669:     def show(self):
2670:         '''
2671:         For GUI backends, show the figure window and redraw.
2672:         For non-GUI backends, raise an exception to be caught
2673:         by :meth:`~matplotlib.figure.Figure.show`, for an
2674:         optional warning.
2675:         '''
2676:         raise NonGuiException()
2677: 
2678:     def destroy(self):
2679:         pass
2680: 
2681:     def full_screen_toggle(self):
2682:         pass
2683: 
2684:     def resize(self, w, h):
2685:         '''"For GUI backends, resize the window (in pixels).'''
2686: 
2687:     def key_press(self, event):
2688:         '''
2689:         Implement the default mpl key bindings defined at
2690:         :ref:`key-event-handling`
2691:         '''
2692:         if rcParams['toolbar'] != 'toolmanager':
2693:             key_press_handler(event, self.canvas, self.canvas.toolbar)
2694: 
2695:     def show_popup(self, msg):
2696:         '''Display message in a popup -- GUI only.'''
2697: 
2698:     def get_window_title(self):
2699:         '''Get the title text of the window containing the figure.
2700: 
2701:         Return None for non-GUI (e.g., PS) backends.
2702:         '''
2703:         return 'image'
2704: 
2705:     def set_window_title(self, title):
2706:         '''Set the title text of the window containing the figure.
2707: 
2708:         This has no effect for non-GUI (e.g., PS) backends.
2709:         '''
2710: 
2711: 
2712: cursors = tools.cursors
2713: 
2714: 
2715: class NavigationToolbar2(object):
2716:     '''
2717:     Base class for the navigation cursor, version 2
2718: 
2719:     backends must implement a canvas that handles connections for
2720:     'button_press_event' and 'button_release_event'.  See
2721:     :meth:`FigureCanvasBase.mpl_connect` for more information
2722: 
2723: 
2724:     They must also define
2725: 
2726:       :meth:`save_figure`
2727:          save the current figure
2728: 
2729:       :meth:`set_cursor`
2730:          if you want the pointer icon to change
2731: 
2732:       :meth:`_init_toolbar`
2733:          create your toolbar widget
2734: 
2735:       :meth:`draw_rubberband` (optional)
2736:          draw the zoom to rect "rubberband" rectangle
2737: 
2738:       :meth:`press`  (optional)
2739:          whenever a mouse button is pressed, you'll be notified with
2740:          the event
2741: 
2742:       :meth:`release` (optional)
2743:          whenever a mouse button is released, you'll be notified with
2744:          the event
2745: 
2746:       :meth:`set_message` (optional)
2747:          display message
2748: 
2749:       :meth:`set_history_buttons` (optional)
2750:          you can change the history back / forward buttons to
2751:          indicate disabled / enabled state.
2752: 
2753:     That's it, we'll do the rest!
2754:     '''
2755: 
2756:     # list of toolitems to add to the toolbar, format is:
2757:     # (
2758:     #   text, # the text of the button (often not visible to users)
2759:     #   tooltip_text, # the tooltip shown on hover (where possible)
2760:     #   image_file, # name of the image for the button (without the extension)
2761:     #   name_of_method, # name of the method in NavigationToolbar2 to call
2762:     # )
2763:     toolitems = (
2764:         ('Home', 'Reset original view', 'home', 'home'),
2765:         ('Back', 'Back to  previous view', 'back', 'back'),
2766:         ('Forward', 'Forward to next view', 'forward', 'forward'),
2767:         (None, None, None, None),
2768:         ('Pan', 'Pan axes with left mouse, zoom with right', 'move', 'pan'),
2769:         ('Zoom', 'Zoom to rectangle', 'zoom_to_rect', 'zoom'),
2770:         ('Subplots', 'Configure subplots', 'subplots', 'configure_subplots'),
2771:         (None, None, None, None),
2772:         ('Save', 'Save the figure', 'filesave', 'save_figure'),
2773:       )
2774: 
2775:     def __init__(self, canvas):
2776:         self.canvas = canvas
2777:         canvas.toolbar = self
2778:         # a dict from axes index to a list of view limits
2779:         self._views = cbook.Stack()
2780:         self._positions = cbook.Stack()  # stack of subplot positions
2781:         self._xypress = None  # the location and axis info at the time
2782:                               # of the press
2783:         self._idPress = None
2784:         self._idRelease = None
2785:         self._active = None
2786:         # This cursor will be set after the initial draw.
2787:         self._lastCursor = cursors.POINTER
2788:         self._init_toolbar()
2789:         self._idDrag = self.canvas.mpl_connect(
2790:             'motion_notify_event', self.mouse_move)
2791: 
2792:         self._ids_zoom = []
2793:         self._zoom_mode = None
2794: 
2795:         self._button_pressed = None  # determined by the button pressed
2796:                                      # at start
2797: 
2798:         self.mode = ''  # a mode string for the status bar
2799:         self.set_history_buttons()
2800: 
2801:         @partial(canvas.mpl_connect, 'draw_event')
2802:         def define_home(event):
2803:             self.push_current()
2804:             # The decorator sets `define_home` to the callback cid, so we can
2805:             # disconnect it after the first use.
2806:             canvas.mpl_disconnect(define_home)
2807: 
2808:     def set_message(self, s):
2809:         '''Display a message on toolbar or in status bar.'''
2810: 
2811:     def back(self, *args):
2812:         '''move back up the view lim stack'''
2813:         self._views.back()
2814:         self._positions.back()
2815:         self.set_history_buttons()
2816:         self._update_view()
2817: 
2818:     @cbook.deprecated("2.1", alternative="canvas.draw_idle")
2819:     def dynamic_update(self):
2820:         self.canvas.draw_idle()
2821: 
2822:     def draw_rubberband(self, event, x0, y0, x1, y1):
2823:         '''Draw a rectangle rubberband to indicate zoom limits.
2824: 
2825:         Note that it is not guaranteed that ``x0 <= x1`` and ``y0 <= y1``.
2826:         '''
2827: 
2828:     def remove_rubberband(self):
2829:         '''Remove the rubberband.'''
2830: 
2831:     def forward(self, *args):
2832:         '''Move forward in the view lim stack.'''
2833:         self._views.forward()
2834:         self._positions.forward()
2835:         self.set_history_buttons()
2836:         self._update_view()
2837: 
2838:     def home(self, *args):
2839:         '''Restore the original view.'''
2840:         self._views.home()
2841:         self._positions.home()
2842:         self.set_history_buttons()
2843:         self._update_view()
2844: 
2845:     def _init_toolbar(self):
2846:         '''
2847:         This is where you actually build the GUI widgets (called by
2848:         __init__).  The icons ``home.xpm``, ``back.xpm``, ``forward.xpm``,
2849:         ``hand.xpm``, ``zoom_to_rect.xpm`` and ``filesave.xpm`` are standard
2850:         across backends (there are ppm versions in CVS also).
2851: 
2852:         You just need to set the callbacks
2853: 
2854:         home         : self.home
2855:         back         : self.back
2856:         forward      : self.forward
2857:         hand         : self.pan
2858:         zoom_to_rect : self.zoom
2859:         filesave     : self.save_figure
2860: 
2861:         You only need to define the last one - the others are in the base
2862:         class implementation.
2863: 
2864:         '''
2865:         raise NotImplementedError
2866: 
2867:     def _set_cursor(self, event):
2868:         if not event.inaxes or not self._active:
2869:             if self._lastCursor != cursors.POINTER:
2870:                 self.set_cursor(cursors.POINTER)
2871:                 self._lastCursor = cursors.POINTER
2872:         else:
2873:             if (self._active == 'ZOOM'
2874:                     and self._lastCursor != cursors.SELECT_REGION):
2875:                 self.set_cursor(cursors.SELECT_REGION)
2876:                 self._lastCursor = cursors.SELECT_REGION
2877:             elif (self._active == 'PAN' and
2878:                   self._lastCursor != cursors.MOVE):
2879:                 self.set_cursor(cursors.MOVE)
2880:                 self._lastCursor = cursors.MOVE
2881: 
2882:     def mouse_move(self, event):
2883:         self._set_cursor(event)
2884: 
2885:         if event.inaxes and event.inaxes.get_navigate():
2886: 
2887:             try:
2888:                 s = event.inaxes.format_coord(event.xdata, event.ydata)
2889:             except (ValueError, OverflowError):
2890:                 pass
2891:             else:
2892:                 artists = [a for a in event.inaxes.mouseover_set
2893:                            if a.contains(event) and a.get_visible()]
2894: 
2895:                 if artists:
2896:                     a = max(artists, key=lambda x: x.zorder)
2897:                     if a is not event.inaxes.patch:
2898:                         data = a.get_cursor_data(event)
2899:                         if data is not None:
2900:                             s += ' [%s]' % a.format_cursor_data(data)
2901: 
2902:                 if len(self.mode):
2903:                     self.set_message('%s, %s' % (self.mode, s))
2904:                 else:
2905:                     self.set_message(s)
2906:         else:
2907:             self.set_message(self.mode)
2908: 
2909:     def pan(self, *args):
2910:         '''Activate the pan/zoom tool. pan with left button, zoom with right'''
2911:         # set the pointer icon and button press funcs to the
2912:         # appropriate callbacks
2913: 
2914:         if self._active == 'PAN':
2915:             self._active = None
2916:         else:
2917:             self._active = 'PAN'
2918:         if self._idPress is not None:
2919:             self._idPress = self.canvas.mpl_disconnect(self._idPress)
2920:             self.mode = ''
2921: 
2922:         if self._idRelease is not None:
2923:             self._idRelease = self.canvas.mpl_disconnect(self._idRelease)
2924:             self.mode = ''
2925: 
2926:         if self._active:
2927:             self._idPress = self.canvas.mpl_connect(
2928:                 'button_press_event', self.press_pan)
2929:             self._idRelease = self.canvas.mpl_connect(
2930:                 'button_release_event', self.release_pan)
2931:             self.mode = 'pan/zoom'
2932:             self.canvas.widgetlock(self)
2933:         else:
2934:             self.canvas.widgetlock.release(self)
2935: 
2936:         for a in self.canvas.figure.get_axes():
2937:             a.set_navigate_mode(self._active)
2938: 
2939:         self.set_message(self.mode)
2940: 
2941:     def press(self, event):
2942:         '''Called whenver a mouse button is pressed.'''
2943: 
2944:     def press_pan(self, event):
2945:         '''Callback for mouse button press in pan/zoom mode.'''
2946: 
2947:         if event.button == 1:
2948:             self._button_pressed = 1
2949:         elif event.button == 3:
2950:             self._button_pressed = 3
2951:         else:
2952:             self._button_pressed = None
2953:             return
2954: 
2955:         x, y = event.x, event.y
2956:         self._xypress = []
2957:         for i, a in enumerate(self.canvas.figure.get_axes()):
2958:             if (x is not None and y is not None and a.in_axes(event) and
2959:                     a.get_navigate() and a.can_pan()):
2960:                 a.start_pan(x, y, event.button)
2961:                 self._xypress.append((a, i))
2962:                 self.canvas.mpl_disconnect(self._idDrag)
2963:                 self._idDrag = self.canvas.mpl_connect('motion_notify_event',
2964:                                                        self.drag_pan)
2965: 
2966:         self.press(event)
2967: 
2968:     def press_zoom(self, event):
2969:         '''Callback for mouse button press in zoom to rect mode.'''
2970:         # If we're already in the middle of a zoom, pressing another
2971:         # button works to "cancel"
2972:         if self._ids_zoom != []:
2973:             for zoom_id in self._ids_zoom:
2974:                 self.canvas.mpl_disconnect(zoom_id)
2975:             self.release(event)
2976:             self.draw()
2977:             self._xypress = None
2978:             self._button_pressed = None
2979:             self._ids_zoom = []
2980:             return
2981: 
2982:         if event.button == 1:
2983:             self._button_pressed = 1
2984:         elif event.button == 3:
2985:             self._button_pressed = 3
2986:         else:
2987:             self._button_pressed = None
2988:             return
2989: 
2990:         x, y = event.x, event.y
2991:         self._xypress = []
2992:         for i, a in enumerate(self.canvas.figure.get_axes()):
2993:             if (x is not None and y is not None and a.in_axes(event) and
2994:                     a.get_navigate() and a.can_zoom()):
2995:                 self._xypress.append((x, y, a, i, a._get_view()))
2996: 
2997:         id1 = self.canvas.mpl_connect('motion_notify_event', self.drag_zoom)
2998:         id2 = self.canvas.mpl_connect('key_press_event',
2999:                                       self._switch_on_zoom_mode)
3000:         id3 = self.canvas.mpl_connect('key_release_event',
3001:                                       self._switch_off_zoom_mode)
3002: 
3003:         self._ids_zoom = id1, id2, id3
3004:         self._zoom_mode = event.key
3005: 
3006:         self.press(event)
3007: 
3008:     def _switch_on_zoom_mode(self, event):
3009:         self._zoom_mode = event.key
3010:         self.mouse_move(event)
3011: 
3012:     def _switch_off_zoom_mode(self, event):
3013:         self._zoom_mode = None
3014:         self.mouse_move(event)
3015: 
3016:     def push_current(self):
3017:         '''Push the current view limits and position onto the stack.'''
3018:         views = []
3019:         pos = []
3020:         for a in self.canvas.figure.get_axes():
3021:             views.append(a._get_view())
3022:             # Store both the original and modified positions
3023:             pos.append((
3024:                 a.get_position(True).frozen(),
3025:                 a.get_position().frozen()))
3026:         self._views.push(views)
3027:         self._positions.push(pos)
3028:         self.set_history_buttons()
3029: 
3030:     def release(self, event):
3031:         '''Callback for mouse button release.'''
3032: 
3033:     def release_pan(self, event):
3034:         '''Callback for mouse button release in pan/zoom mode.'''
3035: 
3036:         if self._button_pressed is None:
3037:             return
3038:         self.canvas.mpl_disconnect(self._idDrag)
3039:         self._idDrag = self.canvas.mpl_connect(
3040:             'motion_notify_event', self.mouse_move)
3041:         for a, ind in self._xypress:
3042:             a.end_pan()
3043:         if not self._xypress:
3044:             return
3045:         self._xypress = []
3046:         self._button_pressed = None
3047:         self.push_current()
3048:         self.release(event)
3049:         self.draw()
3050: 
3051:     def drag_pan(self, event):
3052:         '''Callback for dragging in pan/zoom mode.'''
3053:         for a, ind in self._xypress:
3054:             #safer to use the recorded button at the press than current button:
3055:             #multiple button can get pressed during motion...
3056:             a.drag_pan(self._button_pressed, event.key, event.x, event.y)
3057:         self.canvas.draw_idle()
3058: 
3059:     def drag_zoom(self, event):
3060:         '''Callback for dragging in zoom mode.'''
3061:         if self._xypress:
3062:             x, y = event.x, event.y
3063:             lastx, lasty, a, ind, view = self._xypress[0]
3064:             (x1, y1), (x2, y2) = np.clip(
3065:                 [[lastx, lasty], [x, y]], a.bbox.min, a.bbox.max)
3066:             if self._zoom_mode == "x":
3067:                 y1, y2 = a.bbox.intervaly
3068:             elif self._zoom_mode == "y":
3069:                 x1, x2 = a.bbox.intervalx
3070:             self.draw_rubberband(event, x1, y1, x2, y2)
3071: 
3072:     def release_zoom(self, event):
3073:         '''Callback for mouse button release in zoom to rect mode.'''
3074:         for zoom_id in self._ids_zoom:
3075:             self.canvas.mpl_disconnect(zoom_id)
3076:         self._ids_zoom = []
3077: 
3078:         self.remove_rubberband()
3079: 
3080:         if not self._xypress:
3081:             return
3082: 
3083:         last_a = []
3084: 
3085:         for cur_xypress in self._xypress:
3086:             x, y = event.x, event.y
3087:             lastx, lasty, a, ind, view = cur_xypress
3088:             # ignore singular clicks - 5 pixels is a threshold
3089:             # allows the user to "cancel" a zoom action
3090:             # by zooming by less than 5 pixels
3091:             if ((abs(x - lastx) < 5 and self._zoom_mode!="y") or
3092:                     (abs(y - lasty) < 5 and self._zoom_mode!="x")):
3093:                 self._xypress = None
3094:                 self.release(event)
3095:                 self.draw()
3096:                 return
3097: 
3098:             # detect twinx,y axes and avoid double zooming
3099:             twinx, twiny = False, False
3100:             if last_a:
3101:                 for la in last_a:
3102:                     if a.get_shared_x_axes().joined(a, la):
3103:                         twinx = True
3104:                     if a.get_shared_y_axes().joined(a, la):
3105:                         twiny = True
3106:             last_a.append(a)
3107: 
3108:             if self._button_pressed == 1:
3109:                 direction = 'in'
3110:             elif self._button_pressed == 3:
3111:                 direction = 'out'
3112:             else:
3113:                 continue
3114: 
3115:             a._set_view_from_bbox((lastx, lasty, x, y), direction,
3116:                                   self._zoom_mode, twinx, twiny)
3117: 
3118:         self.draw()
3119:         self._xypress = None
3120:         self._button_pressed = None
3121: 
3122:         self._zoom_mode = None
3123: 
3124:         self.push_current()
3125:         self.release(event)
3126: 
3127:     def draw(self):
3128:         '''Redraw the canvases, update the locators.'''
3129:         for a in self.canvas.figure.get_axes():
3130:             xaxis = getattr(a, 'xaxis', None)
3131:             yaxis = getattr(a, 'yaxis', None)
3132:             locators = []
3133:             if xaxis is not None:
3134:                 locators.append(xaxis.get_major_locator())
3135:                 locators.append(xaxis.get_minor_locator())
3136:             if yaxis is not None:
3137:                 locators.append(yaxis.get_major_locator())
3138:                 locators.append(yaxis.get_minor_locator())
3139: 
3140:             for loc in locators:
3141:                 loc.refresh()
3142:         self.canvas.draw_idle()
3143: 
3144:     def _update_view(self):
3145:         '''Update the viewlim and position from the view and
3146:         position stack for each axes.
3147:         '''
3148: 
3149:         views = self._views()
3150:         if views is None:
3151:             return
3152:         pos = self._positions()
3153:         if pos is None:
3154:             return
3155:         for i, a in enumerate(self.canvas.figure.get_axes()):
3156:             a._set_view(views[i])
3157:             # Restore both the original and modified positions
3158:             a.set_position(pos[i][0], 'original')
3159:             a.set_position(pos[i][1], 'active')
3160: 
3161:         self.canvas.draw_idle()
3162: 
3163:     def save_figure(self, *args):
3164:         '''Save the current figure.'''
3165:         raise NotImplementedError
3166: 
3167:     def set_cursor(self, cursor):
3168:         '''Set the current cursor to one of the :class:`Cursors` enums values.
3169: 
3170:         If required by the backend, this method should trigger an update in
3171:         the backend event loop after the cursor is set, as this method may be
3172:         called e.g. before a long-running task during which the GUI is not
3173:         updated.
3174:         '''
3175: 
3176:     def update(self):
3177:         '''Reset the axes stack.'''
3178:         self._views.clear()
3179:         self._positions.clear()
3180:         self.set_history_buttons()
3181: 
3182:     def zoom(self, *args):
3183:         '''Activate zoom to rect mode.'''
3184:         if self._active == 'ZOOM':
3185:             self._active = None
3186:         else:
3187:             self._active = 'ZOOM'
3188: 
3189:         if self._idPress is not None:
3190:             self._idPress = self.canvas.mpl_disconnect(self._idPress)
3191:             self.mode = ''
3192: 
3193:         if self._idRelease is not None:
3194:             self._idRelease = self.canvas.mpl_disconnect(self._idRelease)
3195:             self.mode = ''
3196: 
3197:         if self._active:
3198:             self._idPress = self.canvas.mpl_connect('button_press_event',
3199:                                                     self.press_zoom)
3200:             self._idRelease = self.canvas.mpl_connect('button_release_event',
3201:                                                       self.release_zoom)
3202:             self.mode = 'zoom rect'
3203:             self.canvas.widgetlock(self)
3204:         else:
3205:             self.canvas.widgetlock.release(self)
3206: 
3207:         for a in self.canvas.figure.get_axes():
3208:             a.set_navigate_mode(self._active)
3209: 
3210:         self.set_message(self.mode)
3211: 
3212:     def set_history_buttons(self):
3213:         '''Enable or disable the back/forward button.'''
3214: 
3215: 
3216: class ToolContainerBase(object):
3217:     '''
3218:     Base class for all tool containers, e.g. toolbars.
3219: 
3220:     Attributes
3221:     ----------
3222:     toolmanager : `ToolManager`
3223:         The tools with which this `ToolContainer` wants to communicate.
3224:     '''
3225: 
3226:     def __init__(self, toolmanager):
3227:         self.toolmanager = toolmanager
3228:         self.toolmanager.toolmanager_connect('tool_removed_event',
3229:                                              self._remove_tool_cbk)
3230: 
3231:     def _tool_toggled_cbk(self, event):
3232:         '''
3233:         Captures the 'tool_trigger_[name]'
3234: 
3235:         This only gets used for toggled tools
3236:         '''
3237:         self.toggle_toolitem(event.tool.name, event.tool.toggled)
3238: 
3239:     def add_tool(self, tool, group, position=-1):
3240:         '''
3241:         Adds a tool to this container
3242: 
3243:         Parameters
3244:         ----------
3245:         tool : tool_like
3246:             The tool to add, see `ToolManager.get_tool`.
3247:         group : str
3248:             The name of the group to add this tool to.
3249:         position : int (optional)
3250:             The position within the group to place this tool.  Defaults to end.
3251:         '''
3252:         tool = self.toolmanager.get_tool(tool)
3253:         image = self._get_image_filename(tool.image)
3254:         toggle = getattr(tool, 'toggled', None) is not None
3255:         self.add_toolitem(tool.name, group, position,
3256:                           image, tool.description, toggle)
3257:         if toggle:
3258:             self.toolmanager.toolmanager_connect('tool_trigger_%s' % tool.name,
3259:                                                  self._tool_toggled_cbk)
3260:             # If initially toggled
3261:             if tool.toggled:
3262:                 self.toggle_toolitem(tool.name, True)
3263: 
3264:     def _remove_tool_cbk(self, event):
3265:         '''Captures the 'tool_removed_event' signal and removes the tool.'''
3266:         self.remove_toolitem(event.tool.name)
3267: 
3268:     def _get_image_filename(self, image):
3269:         '''Find the image based on its name.'''
3270:         # TODO: better search for images, they are not always in the
3271:         # datapath
3272:         basedir = os.path.join(rcParams['datapath'], 'images')
3273:         if image is not None:
3274:             fname = os.path.join(basedir, image)
3275:         else:
3276:             fname = None
3277:         return fname
3278: 
3279:     def trigger_tool(self, name):
3280:         '''
3281:         Trigger the tool
3282: 
3283:         Parameters
3284:         ----------
3285:         name : String
3286:             Name (id) of the tool triggered from within the container
3287:         '''
3288:         self.toolmanager.trigger_tool(name, sender=self)
3289: 
3290:     def add_toolitem(self, name, group, position, image, description, toggle):
3291:         '''
3292:         Add a toolitem to the container
3293: 
3294:         This method must get implemented per backend
3295: 
3296:         The callback associated with the button click event,
3297:         must be **EXACTLY** `self.trigger_tool(name)`
3298: 
3299:         Parameters
3300:         ----------
3301:         name : string
3302:             Name of the tool to add, this gets used as the tool's ID and as the
3303:             default label of the buttons
3304:         group : String
3305:             Name of the group that this tool belongs to
3306:         position : Int
3307:             Position of the tool within its group, if -1 it goes at the End
3308:         image_file : String
3309:             Filename of the image for the button or `None`
3310:         description : String
3311:             Description of the tool, used for the tooltips
3312:         toggle : Bool
3313:             * `True` : The button is a toggle (change the pressed/unpressed
3314:               state between consecutive clicks)
3315:             * `False` : The button is a normal button (returns to unpressed
3316:               state after release)
3317:         '''
3318:         raise NotImplementedError
3319: 
3320:     def toggle_toolitem(self, name, toggled):
3321:         '''
3322:         Toggle the toolitem without firing event
3323: 
3324:         Parameters
3325:         ----------
3326:         name : String
3327:             Id of the tool to toggle
3328:         toggled : bool
3329:             Whether to set this tool as toggled or not.
3330:         '''
3331:         raise NotImplementedError
3332: 
3333:     def remove_toolitem(self, name):
3334:         '''
3335:         Remove a toolitem from the `ToolContainer`
3336: 
3337:         This method must get implemented per backend
3338: 
3339:         Called when `ToolManager` emits a `tool_removed_event`
3340: 
3341:         Parameters
3342:         ----------
3343:         name : string
3344:             Name of the tool to remove
3345:         '''
3346:         raise NotImplementedError
3347: 
3348: 
3349: class StatusbarBase(object):
3350:     '''Base class for the statusbar'''
3351:     def __init__(self, toolmanager):
3352:         self.toolmanager = toolmanager
3353:         self.toolmanager.toolmanager_connect('tool_message_event',
3354:                                              self._message_cbk)
3355: 
3356:     def _message_cbk(self, event):
3357:         '''Captures the 'tool_message_event' and set the message'''
3358:         self.set_message(event.message)
3359: 
3360:     def set_message(self, s):
3361:         '''
3362:         Display a message on toolbar or in status bar
3363: 
3364:         Parameters
3365:         ----------
3366:         s : str
3367:             Message text
3368:         '''
3369:         pass
3370: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_13773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, (-1)), 'unicode', u"\nAbstract base classes define the primitives that renderers and\ngraphics contexts must implement to serve as a matplotlib backend\n\n:class:`RendererBase`\n    An abstract base class to handle drawing/rendering operations.\n\n:class:`FigureCanvasBase`\n    The abstraction layer that separates the\n    :class:`matplotlib.figure.Figure` from the backend specific\n    details like a user interface drawing area\n\n:class:`GraphicsContextBase`\n    An abstract base class that provides color, line styles, etc...\n\n:class:`Event`\n    The base class for all of the matplotlib event\n    handling.  Derived classes such as :class:`KeyEvent` and\n    :class:`MouseEvent` store the meta data like keys and buttons\n    pressed, x and y locations in pixel and\n    :class:`~matplotlib.axes.Axes` coordinates.\n\n:class:`ShowBase`\n    The base class for the Show class of each interactive backend;\n    the 'show' callable is then set to Show.__call__, inherited from\n    ShowBase.\n\n:class:`ToolContainerBase`\n     The base class for the Toolbar class of each interactive backend.\n\n:class:`StatusbarBase`\n    The base class for the messaging area.\n")
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 38, 0))

# 'import six' statement (line 38)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13774 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'six')

if (type(import_13774) is not StypyTypeError):

    if (import_13774 != 'pyd_module'):
        __import__(import_13774)
        sys_modules_13775 = sys.modules[import_13774]
        import_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'six', sys_modules_13775.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'six', import_13774)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 39, 0))

# 'from six.moves import xrange' statement (line 39)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13776 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'six.moves')

if (type(import_13776) is not StypyTypeError):

    if (import_13776 != 'pyd_module'):
        __import__(import_13776)
        sys_modules_13777 = sys.modules[import_13776]
        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'six.moves', sys_modules_13777.module_type_store, module_type_store, ['xrange'])
        nest_module(stypy.reporting.localization.Localization(__file__, 39, 0), __file__, sys_modules_13777, sys_modules_13777.module_type_store, module_type_store)
    else:
        from six.moves import xrange

        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'six.moves', None, module_type_store, ['xrange'], [xrange])

else:
    # Assigning a type to the variable 'six.moves' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'six.moves', import_13776)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 41, 0))

# 'from contextlib import contextmanager' statement (line 41)
try:
    from contextlib import contextmanager

except:
    contextmanager = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'contextlib', None, module_type_store, ['contextmanager'], [contextmanager])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 42, 0))

# 'from functools import partial' statement (line 42)
try:
    from functools import partial

except:
    partial = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'functools', None, module_type_store, ['partial'], [partial])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 43, 0))

# 'import importlib' statement (line 43)
import importlib

import_module(stypy.reporting.localization.Localization(__file__, 43, 0), 'importlib', importlib, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 44, 0))

# 'import io' statement (line 44)
import io

import_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'io', io, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 45, 0))

# 'import os' statement (line 45)
import os

import_module(stypy.reporting.localization.Localization(__file__, 45, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 46, 0))

# 'import sys' statement (line 46)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 46, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 47, 0))

# 'import time' statement (line 47)
import time

import_module(stypy.reporting.localization.Localization(__file__, 47, 0), 'time', time, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 48, 0))

# 'import warnings' statement (line 48)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 48, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 50, 0))

# 'import numpy' statement (line 50)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13778 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 50, 0), 'numpy')

if (type(import_13778) is not StypyTypeError):

    if (import_13778 != 'pyd_module'):
        __import__(import_13778)
        sys_modules_13779 = sys.modules[import_13778]
        import_module(stypy.reporting.localization.Localization(__file__, 50, 0), 'np', sys_modules_13779.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 50, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 50)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 0), 'numpy', import_13778)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 51, 0))

# 'import matplotlib.cbook' statement (line 51)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13780 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 51, 0), 'matplotlib.cbook')

if (type(import_13780) is not StypyTypeError):

    if (import_13780 != 'pyd_module'):
        __import__(import_13780)
        sys_modules_13781 = sys.modules[import_13780]
        import_module(stypy.reporting.localization.Localization(__file__, 51, 0), 'cbook', sys_modules_13781.module_type_store, module_type_store)
    else:
        import matplotlib.cbook as cbook

        import_module(stypy.reporting.localization.Localization(__file__, 51, 0), 'cbook', matplotlib.cbook, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 51)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'matplotlib.cbook', import_13780)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 52, 0))

# 'import matplotlib.colors' statement (line 52)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13782 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 52, 0), 'matplotlib.colors')

if (type(import_13782) is not StypyTypeError):

    if (import_13782 != 'pyd_module'):
        __import__(import_13782)
        sys_modules_13783 = sys.modules[import_13782]
        import_module(stypy.reporting.localization.Localization(__file__, 52, 0), 'colors', sys_modules_13783.module_type_store, module_type_store)
    else:
        import matplotlib.colors as colors

        import_module(stypy.reporting.localization.Localization(__file__, 52, 0), 'colors', matplotlib.colors, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.colors' (line 52)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 0), 'matplotlib.colors', import_13782)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 53, 0))

# 'import matplotlib.transforms' statement (line 53)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13784 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 53, 0), 'matplotlib.transforms')

if (type(import_13784) is not StypyTypeError):

    if (import_13784 != 'pyd_module'):
        __import__(import_13784)
        sys_modules_13785 = sys.modules[import_13784]
        import_module(stypy.reporting.localization.Localization(__file__, 53, 0), 'transforms', sys_modules_13785.module_type_store, module_type_store)
    else:
        import matplotlib.transforms as transforms

        import_module(stypy.reporting.localization.Localization(__file__, 53, 0), 'transforms', matplotlib.transforms, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 53)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 0), 'matplotlib.transforms', import_13784)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 54, 0))

# 'import matplotlib.widgets' statement (line 54)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13786 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 54, 0), 'matplotlib.widgets')

if (type(import_13786) is not StypyTypeError):

    if (import_13786 != 'pyd_module'):
        __import__(import_13786)
        sys_modules_13787 = sys.modules[import_13786]
        import_module(stypy.reporting.localization.Localization(__file__, 54, 0), 'widgets', sys_modules_13787.module_type_store, module_type_store)
    else:
        import matplotlib.widgets as widgets

        import_module(stypy.reporting.localization.Localization(__file__, 54, 0), 'widgets', matplotlib.widgets, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.widgets' (line 54)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 54, 0), 'matplotlib.widgets', import_13786)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 55, 0))

# 'from matplotlib import rcParams' statement (line 55)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13788 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 55, 0), 'matplotlib')

if (type(import_13788) is not StypyTypeError):

    if (import_13788 != 'pyd_module'):
        __import__(import_13788)
        sys_modules_13789 = sys.modules[import_13788]
        import_from_module(stypy.reporting.localization.Localization(__file__, 55, 0), 'matplotlib', sys_modules_13789.module_type_store, module_type_store, ['rcParams'])
        nest_module(stypy.reporting.localization.Localization(__file__, 55, 0), __file__, sys_modules_13789, sys_modules_13789.module_type_store, module_type_store)
    else:
        from matplotlib import rcParams

        import_from_module(stypy.reporting.localization.Localization(__file__, 55, 0), 'matplotlib', None, module_type_store, ['rcParams'], [rcParams])

else:
    # Assigning a type to the variable 'matplotlib' (line 55)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 55, 0), 'matplotlib', import_13788)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 56, 0))

# 'from matplotlib import is_interactive' statement (line 56)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13790 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 56, 0), 'matplotlib')

if (type(import_13790) is not StypyTypeError):

    if (import_13790 != 'pyd_module'):
        __import__(import_13790)
        sys_modules_13791 = sys.modules[import_13790]
        import_from_module(stypy.reporting.localization.Localization(__file__, 56, 0), 'matplotlib', sys_modules_13791.module_type_store, module_type_store, ['is_interactive'])
        nest_module(stypy.reporting.localization.Localization(__file__, 56, 0), __file__, sys_modules_13791, sys_modules_13791.module_type_store, module_type_store)
    else:
        from matplotlib import is_interactive

        import_from_module(stypy.reporting.localization.Localization(__file__, 56, 0), 'matplotlib', None, module_type_store, ['is_interactive'], [is_interactive])

else:
    # Assigning a type to the variable 'matplotlib' (line 56)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 0), 'matplotlib', import_13790)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 57, 0))

# 'from matplotlib import get_backend' statement (line 57)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13792 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 57, 0), 'matplotlib')

if (type(import_13792) is not StypyTypeError):

    if (import_13792 != 'pyd_module'):
        __import__(import_13792)
        sys_modules_13793 = sys.modules[import_13792]
        import_from_module(stypy.reporting.localization.Localization(__file__, 57, 0), 'matplotlib', sys_modules_13793.module_type_store, module_type_store, ['get_backend'])
        nest_module(stypy.reporting.localization.Localization(__file__, 57, 0), __file__, sys_modules_13793, sys_modules_13793.module_type_store, module_type_store)
    else:
        from matplotlib import get_backend

        import_from_module(stypy.reporting.localization.Localization(__file__, 57, 0), 'matplotlib', None, module_type_store, ['get_backend'], [get_backend])

else:
    # Assigning a type to the variable 'matplotlib' (line 57)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 0), 'matplotlib', import_13792)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 58, 0))

# 'from matplotlib import lines' statement (line 58)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13794 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 58, 0), 'matplotlib')

if (type(import_13794) is not StypyTypeError):

    if (import_13794 != 'pyd_module'):
        __import__(import_13794)
        sys_modules_13795 = sys.modules[import_13794]
        import_from_module(stypy.reporting.localization.Localization(__file__, 58, 0), 'matplotlib', sys_modules_13795.module_type_store, module_type_store, ['lines'])
        nest_module(stypy.reporting.localization.Localization(__file__, 58, 0), __file__, sys_modules_13795, sys_modules_13795.module_type_store, module_type_store)
    else:
        from matplotlib import lines

        import_from_module(stypy.reporting.localization.Localization(__file__, 58, 0), 'matplotlib', None, module_type_store, ['lines'], [lines])

else:
    # Assigning a type to the variable 'matplotlib' (line 58)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 58, 0), 'matplotlib', import_13794)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 59, 0))

# 'from matplotlib._pylab_helpers import Gcf' statement (line 59)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13796 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 59, 0), 'matplotlib._pylab_helpers')

if (type(import_13796) is not StypyTypeError):

    if (import_13796 != 'pyd_module'):
        __import__(import_13796)
        sys_modules_13797 = sys.modules[import_13796]
        import_from_module(stypy.reporting.localization.Localization(__file__, 59, 0), 'matplotlib._pylab_helpers', sys_modules_13797.module_type_store, module_type_store, ['Gcf'])
        nest_module(stypy.reporting.localization.Localization(__file__, 59, 0), __file__, sys_modules_13797, sys_modules_13797.module_type_store, module_type_store)
    else:
        from matplotlib._pylab_helpers import Gcf

        import_from_module(stypy.reporting.localization.Localization(__file__, 59, 0), 'matplotlib._pylab_helpers', None, module_type_store, ['Gcf'], [Gcf])

else:
    # Assigning a type to the variable 'matplotlib._pylab_helpers' (line 59)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 59, 0), 'matplotlib._pylab_helpers', import_13796)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 61, 0))

# 'from matplotlib.transforms import Bbox, TransformedBbox, Affine2D' statement (line 61)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13798 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 61, 0), 'matplotlib.transforms')

if (type(import_13798) is not StypyTypeError):

    if (import_13798 != 'pyd_module'):
        __import__(import_13798)
        sys_modules_13799 = sys.modules[import_13798]
        import_from_module(stypy.reporting.localization.Localization(__file__, 61, 0), 'matplotlib.transforms', sys_modules_13799.module_type_store, module_type_store, ['Bbox', 'TransformedBbox', 'Affine2D'])
        nest_module(stypy.reporting.localization.Localization(__file__, 61, 0), __file__, sys_modules_13799, sys_modules_13799.module_type_store, module_type_store)
    else:
        from matplotlib.transforms import Bbox, TransformedBbox, Affine2D

        import_from_module(stypy.reporting.localization.Localization(__file__, 61, 0), 'matplotlib.transforms', None, module_type_store, ['Bbox', 'TransformedBbox', 'Affine2D'], [Bbox, TransformedBbox, Affine2D])

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 61)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 61, 0), 'matplotlib.transforms', import_13798)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 63, 0))

# 'import matplotlib.tight_bbox' statement (line 63)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13800 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 63, 0), 'matplotlib.tight_bbox')

if (type(import_13800) is not StypyTypeError):

    if (import_13800 != 'pyd_module'):
        __import__(import_13800)
        sys_modules_13801 = sys.modules[import_13800]
        import_module(stypy.reporting.localization.Localization(__file__, 63, 0), 'tight_bbox', sys_modules_13801.module_type_store, module_type_store)
    else:
        import matplotlib.tight_bbox as tight_bbox

        import_module(stypy.reporting.localization.Localization(__file__, 63, 0), 'tight_bbox', matplotlib.tight_bbox, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.tight_bbox' (line 63)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 63, 0), 'matplotlib.tight_bbox', import_13800)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 64, 0))

# 'import matplotlib.textpath' statement (line 64)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13802 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 64, 0), 'matplotlib.textpath')

if (type(import_13802) is not StypyTypeError):

    if (import_13802 != 'pyd_module'):
        __import__(import_13802)
        sys_modules_13803 = sys.modules[import_13802]
        import_module(stypy.reporting.localization.Localization(__file__, 64, 0), 'textpath', sys_modules_13803.module_type_store, module_type_store)
    else:
        import matplotlib.textpath as textpath

        import_module(stypy.reporting.localization.Localization(__file__, 64, 0), 'textpath', matplotlib.textpath, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.textpath' (line 64)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 64, 0), 'matplotlib.textpath', import_13802)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 65, 0))

# 'from matplotlib.path import Path' statement (line 65)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13804 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 65, 0), 'matplotlib.path')

if (type(import_13804) is not StypyTypeError):

    if (import_13804 != 'pyd_module'):
        __import__(import_13804)
        sys_modules_13805 = sys.modules[import_13804]
        import_from_module(stypy.reporting.localization.Localization(__file__, 65, 0), 'matplotlib.path', sys_modules_13805.module_type_store, module_type_store, ['Path'])
        nest_module(stypy.reporting.localization.Localization(__file__, 65, 0), __file__, sys_modules_13805, sys_modules_13805.module_type_store, module_type_store)
    else:
        from matplotlib.path import Path

        import_from_module(stypy.reporting.localization.Localization(__file__, 65, 0), 'matplotlib.path', None, module_type_store, ['Path'], [Path])

else:
    # Assigning a type to the variable 'matplotlib.path' (line 65)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 65, 0), 'matplotlib.path', import_13804)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 66, 0))

# 'from matplotlib.cbook import mplDeprecation, warn_deprecated' statement (line 66)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13806 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 66, 0), 'matplotlib.cbook')

if (type(import_13806) is not StypyTypeError):

    if (import_13806 != 'pyd_module'):
        __import__(import_13806)
        sys_modules_13807 = sys.modules[import_13806]
        import_from_module(stypy.reporting.localization.Localization(__file__, 66, 0), 'matplotlib.cbook', sys_modules_13807.module_type_store, module_type_store, ['mplDeprecation', 'warn_deprecated'])
        nest_module(stypy.reporting.localization.Localization(__file__, 66, 0), __file__, sys_modules_13807, sys_modules_13807.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import mplDeprecation, warn_deprecated

        import_from_module(stypy.reporting.localization.Localization(__file__, 66, 0), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation', 'warn_deprecated'], [mplDeprecation, warn_deprecated])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 66)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 66, 0), 'matplotlib.cbook', import_13806)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 67, 0))

# 'import matplotlib.backend_tools' statement (line 67)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13808 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 67, 0), 'matplotlib.backend_tools')

if (type(import_13808) is not StypyTypeError):

    if (import_13808 != 'pyd_module'):
        __import__(import_13808)
        sys_modules_13809 = sys.modules[import_13808]
        import_module(stypy.reporting.localization.Localization(__file__, 67, 0), 'tools', sys_modules_13809.module_type_store, module_type_store)
    else:
        import matplotlib.backend_tools as tools

        import_module(stypy.reporting.localization.Localization(__file__, 67, 0), 'tools', matplotlib.backend_tools, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.backend_tools' (line 67)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 67, 0), 'matplotlib.backend_tools', import_13808)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')



# SSA begins for try-except statement (line 69)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 70, 4))

# 'from PIL import Image' statement (line 70)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_13810 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 70, 4), 'PIL')

if (type(import_13810) is not StypyTypeError):

    if (import_13810 != 'pyd_module'):
        __import__(import_13810)
        sys_modules_13811 = sys.modules[import_13810]
        import_from_module(stypy.reporting.localization.Localization(__file__, 70, 4), 'PIL', sys_modules_13811.module_type_store, module_type_store, ['Image'])
        nest_module(stypy.reporting.localization.Localization(__file__, 70, 4), __file__, sys_modules_13811, sys_modules_13811.module_type_store, module_type_store)
    else:
        from PIL import Image

        import_from_module(stypy.reporting.localization.Localization(__file__, 70, 4), 'PIL', None, module_type_store, ['Image'], [Image])

else:
    # Assigning a type to the variable 'PIL' (line 70)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 4), 'PIL', import_13810)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')


# Assigning a Name to a Name (line 71):

# Assigning a Name to a Name (line 71):

# Assigning a Name to a Name (line 71):
# Getting the type of 'True' (line 71)
True_13812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 15), 'True')
# Assigning a type to the variable '_has_pil' (line 71)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 71, 4), '_has_pil', True_13812)
# Deleting a member
module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 72, 4), module_type_store, 'Image')
# SSA branch for the except part of a try statement (line 69)
# SSA branch for the except 'ImportError' branch of a try statement (line 69)
module_type_store.open_ssa_branch('except')

# Assigning a Name to a Name (line 74):

# Assigning a Name to a Name (line 74):

# Assigning a Name to a Name (line 74):
# Getting the type of 'False' (line 74)
False_13813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 15), 'False')
# Assigning a type to the variable '_has_pil' (line 74)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 74, 4), '_has_pil', False_13813)
# SSA join for try-except statement (line 69)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Dict to a Name (line 77):

# Assigning a Dict to a Name (line 77):

# Assigning a Dict to a Name (line 77):

# Obtaining an instance of the builtin type 'dict' (line 77)
dict_13814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 21), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 77)
# Adding element type (key, value) (line 77)
unicode_13815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 4), 'unicode', u'ps')
unicode_13816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 10), 'unicode', u'Postscript')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 21), dict_13814, (unicode_13815, unicode_13816))
# Adding element type (key, value) (line 77)
unicode_13817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 4), 'unicode', u'eps')
unicode_13818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 11), 'unicode', u'Encapsulated Postscript')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 21), dict_13814, (unicode_13817, unicode_13818))
# Adding element type (key, value) (line 77)
unicode_13819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 80, 4), 'unicode', u'pdf')
unicode_13820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 80, 11), 'unicode', u'Portable Document Format')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 21), dict_13814, (unicode_13819, unicode_13820))
# Adding element type (key, value) (line 77)
unicode_13821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 4), 'unicode', u'pgf')
unicode_13822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 11), 'unicode', u'PGF code for LaTeX')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 21), dict_13814, (unicode_13821, unicode_13822))
# Adding element type (key, value) (line 77)
unicode_13823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 82, 4), 'unicode', u'png')
unicode_13824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 82, 11), 'unicode', u'Portable Network Graphics')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 21), dict_13814, (unicode_13823, unicode_13824))
# Adding element type (key, value) (line 77)
unicode_13825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 83, 4), 'unicode', u'raw')
unicode_13826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 83, 11), 'unicode', u'Raw RGBA bitmap')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 21), dict_13814, (unicode_13825, unicode_13826))
# Adding element type (key, value) (line 77)
unicode_13827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 4), 'unicode', u'rgba')
unicode_13828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 12), 'unicode', u'Raw RGBA bitmap')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 21), dict_13814, (unicode_13827, unicode_13828))
# Adding element type (key, value) (line 77)
unicode_13829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 4), 'unicode', u'svg')
unicode_13830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 11), 'unicode', u'Scalable Vector Graphics')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 21), dict_13814, (unicode_13829, unicode_13830))
# Adding element type (key, value) (line 77)
unicode_13831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 4), 'unicode', u'svgz')
unicode_13832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 12), 'unicode', u'Scalable Vector Graphics')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 21), dict_13814, (unicode_13831, unicode_13832))

# Assigning a type to the variable '_default_filetypes' (line 77)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 0), '_default_filetypes', dict_13814)

# Assigning a Dict to a Name (line 90):

# Assigning a Dict to a Name (line 90):

# Assigning a Dict to a Name (line 90):

# Obtaining an instance of the builtin type 'dict' (line 90)
dict_13833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 20), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 90)
# Adding element type (key, value) (line 90)
unicode_13834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 4), 'unicode', u'ps')
unicode_13835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 10), 'unicode', u'matplotlib.backends.backend_ps')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 20), dict_13833, (unicode_13834, unicode_13835))
# Adding element type (key, value) (line 90)
unicode_13836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 92, 4), 'unicode', u'eps')
unicode_13837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 92, 11), 'unicode', u'matplotlib.backends.backend_ps')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 20), dict_13833, (unicode_13836, unicode_13837))
# Adding element type (key, value) (line 90)
unicode_13838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 4), 'unicode', u'pdf')
unicode_13839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 11), 'unicode', u'matplotlib.backends.backend_pdf')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 20), dict_13833, (unicode_13838, unicode_13839))
# Adding element type (key, value) (line 90)
unicode_13840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 4), 'unicode', u'pgf')
unicode_13841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 11), 'unicode', u'matplotlib.backends.backend_pgf')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 20), dict_13833, (unicode_13840, unicode_13841))
# Adding element type (key, value) (line 90)
unicode_13842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 4), 'unicode', u'png')
unicode_13843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 11), 'unicode', u'matplotlib.backends.backend_agg')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 20), dict_13833, (unicode_13842, unicode_13843))
# Adding element type (key, value) (line 90)
unicode_13844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 4), 'unicode', u'raw')
unicode_13845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 11), 'unicode', u'matplotlib.backends.backend_agg')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 20), dict_13833, (unicode_13844, unicode_13845))
# Adding element type (key, value) (line 90)
unicode_13846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 4), 'unicode', u'rgba')
unicode_13847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 12), 'unicode', u'matplotlib.backends.backend_agg')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 20), dict_13833, (unicode_13846, unicode_13847))
# Adding element type (key, value) (line 90)
unicode_13848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 4), 'unicode', u'svg')
unicode_13849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 11), 'unicode', u'matplotlib.backends.backend_svg')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 20), dict_13833, (unicode_13848, unicode_13849))
# Adding element type (key, value) (line 90)
unicode_13850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 4), 'unicode', u'svgz')
unicode_13851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 12), 'unicode', u'matplotlib.backends.backend_svg')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 90, 20), dict_13833, (unicode_13850, unicode_13851))

# Assigning a type to the variable '_default_backends' (line 90)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 90, 0), '_default_backends', dict_13833)

@norecursion
def register_backend(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 103)
    None_13852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 50), 'None')
    defaults = [None_13852]
    # Create a new context for function 'register_backend'
    module_type_store = module_type_store.open_function_context('register_backend', 103, 0, False)
    
    # Passed parameters checking function
    register_backend.stypy_localization = localization
    register_backend.stypy_type_of_self = None
    register_backend.stypy_type_store = module_type_store
    register_backend.stypy_function_name = 'register_backend'
    register_backend.stypy_param_names_list = ['format', 'backend', 'description']
    register_backend.stypy_varargs_param_name = None
    register_backend.stypy_kwargs_param_name = None
    register_backend.stypy_call_defaults = defaults
    register_backend.stypy_call_varargs = varargs
    register_backend.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'register_backend', ['format', 'backend', 'description'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'register_backend', localization, ['format', 'backend', 'description'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'register_backend(...)' code ##################

    unicode_13853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, (-1)), 'unicode', u'\n    Register a backend for saving to a given file format.\n\n    Parameters\n    ----------\n    format : str\n        File extension\n\n    backend : module string or canvas class\n        Backend for handling file output\n\n    description : str, optional\n        Description of the file type.  Defaults to an empty string\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 118)
    # Getting the type of 'description' (line 118)
    description_13854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 7), 'description')
    # Getting the type of 'None' (line 118)
    None_13855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 22), 'None')
    
    (may_be_13856, more_types_in_union_13857) = may_be_none(description_13854, None_13855)

    if may_be_13856:

        if more_types_in_union_13857:
            # Runtime conditional SSA (line 118)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Str to a Name (line 119):
        
        # Assigning a Str to a Name (line 119):
        
        # Assigning a Str to a Name (line 119):
        unicode_13858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 22), 'unicode', u'')
        # Assigning a type to the variable 'description' (line 119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 8), 'description', unicode_13858)

        if more_types_in_union_13857:
            # SSA join for if statement (line 118)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Subscript (line 120):
    
    # Assigning a Name to a Subscript (line 120):
    
    # Assigning a Name to a Subscript (line 120):
    # Getting the type of 'backend' (line 120)
    backend_13859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 32), 'backend')
    # Getting the type of '_default_backends' (line 120)
    _default_backends_13860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 4), '_default_backends')
    # Getting the type of 'format' (line 120)
    format_13861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 22), 'format')
    # Storing an element on a container (line 120)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 120, 4), _default_backends_13860, (format_13861, backend_13859))
    
    # Assigning a Name to a Subscript (line 121):
    
    # Assigning a Name to a Subscript (line 121):
    
    # Assigning a Name to a Subscript (line 121):
    # Getting the type of 'description' (line 121)
    description_13862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 33), 'description')
    # Getting the type of '_default_filetypes' (line 121)
    _default_filetypes_13863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 4), '_default_filetypes')
    # Getting the type of 'format' (line 121)
    format_13864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 23), 'format')
    # Storing an element on a container (line 121)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 121, 4), _default_filetypes_13863, (format_13864, description_13862))
    
    # ################# End of 'register_backend(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'register_backend' in the type store
    # Getting the type of 'stypy_return_type' (line 103)
    stypy_return_type_13865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_13865)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'register_backend'
    return stypy_return_type_13865

# Assigning a type to the variable 'register_backend' (line 103)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 0), 'register_backend', register_backend)

@norecursion
def get_registered_canvas_class(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_registered_canvas_class'
    module_type_store = module_type_store.open_function_context('get_registered_canvas_class', 124, 0, False)
    
    # Passed parameters checking function
    get_registered_canvas_class.stypy_localization = localization
    get_registered_canvas_class.stypy_type_of_self = None
    get_registered_canvas_class.stypy_type_store = module_type_store
    get_registered_canvas_class.stypy_function_name = 'get_registered_canvas_class'
    get_registered_canvas_class.stypy_param_names_list = ['format']
    get_registered_canvas_class.stypy_varargs_param_name = None
    get_registered_canvas_class.stypy_kwargs_param_name = None
    get_registered_canvas_class.stypy_call_defaults = defaults
    get_registered_canvas_class.stypy_call_varargs = varargs
    get_registered_canvas_class.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_registered_canvas_class', ['format'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_registered_canvas_class', localization, ['format'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_registered_canvas_class(...)' code ##################

    unicode_13866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 128, (-1)), 'unicode', u'\n    Return the registered default canvas for given file format.\n    Handles deferred import of required backend.\n    ')
    
    
    # Getting the type of 'format' (line 129)
    format_13867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 7), 'format')
    # Getting the type of '_default_backends' (line 129)
    _default_backends_13868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 21), '_default_backends')
    # Applying the binary operator 'notin' (line 129)
    result_contains_13869 = python_operator(stypy.reporting.localization.Localization(__file__, 129, 7), 'notin', format_13867, _default_backends_13868)
    
    # Testing the type of an if condition (line 129)
    if_condition_13870 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 129, 4), result_contains_13869)
    # Assigning a type to the variable 'if_condition_13870' (line 129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 4), 'if_condition_13870', if_condition_13870)
    # SSA begins for if statement (line 129)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'None' (line 130)
    None_13871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 15), 'None')
    # Assigning a type to the variable 'stypy_return_type' (line 130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'stypy_return_type', None_13871)
    # SSA join for if statement (line 129)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 131):
    
    # Assigning a Subscript to a Name (line 131):
    
    # Assigning a Subscript to a Name (line 131):
    
    # Obtaining the type of the subscript
    # Getting the type of 'format' (line 131)
    format_13872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 38), 'format')
    # Getting the type of '_default_backends' (line 131)
    _default_backends_13873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 20), '_default_backends')
    # Obtaining the member '__getitem__' of a type (line 131)
    getitem___13874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 20), _default_backends_13873, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 131)
    subscript_call_result_13875 = invoke(stypy.reporting.localization.Localization(__file__, 131, 20), getitem___13874, format_13872)
    
    # Assigning a type to the variable 'backend_class' (line 131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 131, 4), 'backend_class', subscript_call_result_13875)
    
    
    # Call to isinstance(...): (line 132)
    # Processing the call arguments (line 132)
    # Getting the type of 'backend_class' (line 132)
    backend_class_13877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 18), 'backend_class', False)
    # Getting the type of 'six' (line 132)
    six_13878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 33), 'six', False)
    # Obtaining the member 'string_types' of a type (line 132)
    string_types_13879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 33), six_13878, 'string_types')
    # Processing the call keyword arguments (line 132)
    kwargs_13880 = {}
    # Getting the type of 'isinstance' (line 132)
    isinstance_13876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 132)
    isinstance_call_result_13881 = invoke(stypy.reporting.localization.Localization(__file__, 132, 7), isinstance_13876, *[backend_class_13877, string_types_13879], **kwargs_13880)
    
    # Testing the type of an if condition (line 132)
    if_condition_13882 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 132, 4), isinstance_call_result_13881)
    # Assigning a type to the variable 'if_condition_13882' (line 132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 4), 'if_condition_13882', if_condition_13882)
    # SSA begins for if statement (line 132)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 133):
    
    # Assigning a Attribute to a Name (line 133):
    
    # Assigning a Attribute to a Name (line 133):
    
    # Call to import_module(...): (line 133)
    # Processing the call arguments (line 133)
    # Getting the type of 'backend_class' (line 133)
    backend_class_13885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 48), 'backend_class', False)
    # Processing the call keyword arguments (line 133)
    kwargs_13886 = {}
    # Getting the type of 'importlib' (line 133)
    importlib_13883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 24), 'importlib', False)
    # Obtaining the member 'import_module' of a type (line 133)
    import_module_13884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 24), importlib_13883, 'import_module')
    # Calling import_module(args, kwargs) (line 133)
    import_module_call_result_13887 = invoke(stypy.reporting.localization.Localization(__file__, 133, 24), import_module_13884, *[backend_class_13885], **kwargs_13886)
    
    # Obtaining the member 'FigureCanvas' of a type (line 133)
    FigureCanvas_13888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 24), import_module_call_result_13887, 'FigureCanvas')
    # Assigning a type to the variable 'backend_class' (line 133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 8), 'backend_class', FigureCanvas_13888)
    
    # Assigning a Name to a Subscript (line 134):
    
    # Assigning a Name to a Subscript (line 134):
    
    # Assigning a Name to a Subscript (line 134):
    # Getting the type of 'backend_class' (line 134)
    backend_class_13889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 36), 'backend_class')
    # Getting the type of '_default_backends' (line 134)
    _default_backends_13890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 8), '_default_backends')
    # Getting the type of 'format' (line 134)
    format_13891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 26), 'format')
    # Storing an element on a container (line 134)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 134, 8), _default_backends_13890, (format_13891, backend_class_13889))
    # SSA join for if statement (line 132)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'backend_class' (line 135)
    backend_class_13892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 11), 'backend_class')
    # Assigning a type to the variable 'stypy_return_type' (line 135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 135, 4), 'stypy_return_type', backend_class_13892)
    
    # ################# End of 'get_registered_canvas_class(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_registered_canvas_class' in the type store
    # Getting the type of 'stypy_return_type' (line 124)
    stypy_return_type_13893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_13893)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_registered_canvas_class'
    return stypy_return_type_13893

# Assigning a type to the variable 'get_registered_canvas_class' (line 124)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 0), 'get_registered_canvas_class', get_registered_canvas_class)
# Declaration of the '_Backend' class

class _Backend(object, ):
    
    # Assigning a Name to a Name (line 148):
    
    # Assigning a Name to a Name (line 148):
    
    # Assigning a Name to a Name (line 149):
    
    # Assigning a Name to a Name (line 149):
    
    # Assigning a Name to a Name (line 156):
    
    # Assigning a Name to a Name (line 156):
    
    # Assigning a Name to a Name (line 157):
    
    # Assigning a Name to a Name (line 157):

    @norecursion
    def new_figure_manager(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_figure_manager'
        module_type_store = module_type_store.open_function_context('new_figure_manager', 162, 4, False)
        # Assigning a type to the variable 'self' (line 163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _Backend.new_figure_manager.__dict__.__setitem__('stypy_localization', localization)
        _Backend.new_figure_manager.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _Backend.new_figure_manager.__dict__.__setitem__('stypy_type_store', module_type_store)
        _Backend.new_figure_manager.__dict__.__setitem__('stypy_function_name', '_Backend.new_figure_manager')
        _Backend.new_figure_manager.__dict__.__setitem__('stypy_param_names_list', ['num'])
        _Backend.new_figure_manager.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _Backend.new_figure_manager.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _Backend.new_figure_manager.__dict__.__setitem__('stypy_call_defaults', defaults)
        _Backend.new_figure_manager.__dict__.__setitem__('stypy_call_varargs', varargs)
        _Backend.new_figure_manager.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _Backend.new_figure_manager.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_Backend.new_figure_manager', ['num'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_figure_manager', localization, ['num'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_figure_manager(...)' code ##################

        unicode_13894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, (-1)), 'unicode', u'Create a new figure manager instance.\n        ')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 167, 8))
        
        # 'from matplotlib.figure import Figure' statement (line 167)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_13895 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 167, 8), 'matplotlib.figure')

        if (type(import_13895) is not StypyTypeError):

            if (import_13895 != 'pyd_module'):
                __import__(import_13895)
                sys_modules_13896 = sys.modules[import_13895]
                import_from_module(stypy.reporting.localization.Localization(__file__, 167, 8), 'matplotlib.figure', sys_modules_13896.module_type_store, module_type_store, ['Figure'])
                nest_module(stypy.reporting.localization.Localization(__file__, 167, 8), __file__, sys_modules_13896, sys_modules_13896.module_type_store, module_type_store)
            else:
                from matplotlib.figure import Figure

                import_from_module(stypy.reporting.localization.Localization(__file__, 167, 8), 'matplotlib.figure', None, module_type_store, ['Figure'], [Figure])

        else:
            # Assigning a type to the variable 'matplotlib.figure' (line 167)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'matplotlib.figure', import_13895)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Assigning a Call to a Name (line 168):
        
        # Assigning a Call to a Name (line 168):
        
        # Assigning a Call to a Name (line 168):
        
        # Call to pop(...): (line 168)
        # Processing the call arguments (line 168)
        unicode_13899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 168, 29), 'unicode', u'FigureClass')
        # Getting the type of 'Figure' (line 168)
        Figure_13900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 44), 'Figure', False)
        # Processing the call keyword arguments (line 168)
        kwargs_13901 = {}
        # Getting the type of 'kwargs' (line 168)
        kwargs_13897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 18), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 168)
        pop_13898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 18), kwargs_13897, 'pop')
        # Calling pop(args, kwargs) (line 168)
        pop_call_result_13902 = invoke(stypy.reporting.localization.Localization(__file__, 168, 18), pop_13898, *[unicode_13899, Figure_13900], **kwargs_13901)
        
        # Assigning a type to the variable 'fig_cls' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 8), 'fig_cls', pop_call_result_13902)
        
        # Assigning a Call to a Name (line 169):
        
        # Assigning a Call to a Name (line 169):
        
        # Assigning a Call to a Name (line 169):
        
        # Call to fig_cls(...): (line 169)
        # Getting the type of 'args' (line 169)
        args_13904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 23), 'args', False)
        # Processing the call keyword arguments (line 169)
        # Getting the type of 'kwargs' (line 169)
        kwargs_13905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 31), 'kwargs', False)
        kwargs_13906 = {'kwargs_13905': kwargs_13905}
        # Getting the type of 'fig_cls' (line 169)
        fig_cls_13903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 14), 'fig_cls', False)
        # Calling fig_cls(args, kwargs) (line 169)
        fig_cls_call_result_13907 = invoke(stypy.reporting.localization.Localization(__file__, 169, 14), fig_cls_13903, *[args_13904], **kwargs_13906)
        
        # Assigning a type to the variable 'fig' (line 169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 8), 'fig', fig_cls_call_result_13907)
        
        # Call to new_figure_manager_given_figure(...): (line 170)
        # Processing the call arguments (line 170)
        # Getting the type of 'num' (line 170)
        num_13910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 51), 'num', False)
        # Getting the type of 'fig' (line 170)
        fig_13911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 56), 'fig', False)
        # Processing the call keyword arguments (line 170)
        kwargs_13912 = {}
        # Getting the type of 'cls' (line 170)
        cls_13908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 15), 'cls', False)
        # Obtaining the member 'new_figure_manager_given_figure' of a type (line 170)
        new_figure_manager_given_figure_13909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 170, 15), cls_13908, 'new_figure_manager_given_figure')
        # Calling new_figure_manager_given_figure(args, kwargs) (line 170)
        new_figure_manager_given_figure_call_result_13913 = invoke(stypy.reporting.localization.Localization(__file__, 170, 15), new_figure_manager_given_figure_13909, *[num_13910, fig_13911], **kwargs_13912)
        
        # Assigning a type to the variable 'stypy_return_type' (line 170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 170, 8), 'stypy_return_type', new_figure_manager_given_figure_call_result_13913)
        
        # ################# End of 'new_figure_manager(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_figure_manager' in the type store
        # Getting the type of 'stypy_return_type' (line 162)
        stypy_return_type_13914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13914)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_figure_manager'
        return stypy_return_type_13914


    @norecursion
    def new_figure_manager_given_figure(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_figure_manager_given_figure'
        module_type_store = module_type_store.open_function_context('new_figure_manager_given_figure', 172, 4, False)
        # Assigning a type to the variable 'self' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _Backend.new_figure_manager_given_figure.__dict__.__setitem__('stypy_localization', localization)
        _Backend.new_figure_manager_given_figure.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _Backend.new_figure_manager_given_figure.__dict__.__setitem__('stypy_type_store', module_type_store)
        _Backend.new_figure_manager_given_figure.__dict__.__setitem__('stypy_function_name', '_Backend.new_figure_manager_given_figure')
        _Backend.new_figure_manager_given_figure.__dict__.__setitem__('stypy_param_names_list', ['num', 'figure'])
        _Backend.new_figure_manager_given_figure.__dict__.__setitem__('stypy_varargs_param_name', None)
        _Backend.new_figure_manager_given_figure.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _Backend.new_figure_manager_given_figure.__dict__.__setitem__('stypy_call_defaults', defaults)
        _Backend.new_figure_manager_given_figure.__dict__.__setitem__('stypy_call_varargs', varargs)
        _Backend.new_figure_manager_given_figure.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _Backend.new_figure_manager_given_figure.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_Backend.new_figure_manager_given_figure', ['num', 'figure'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_figure_manager_given_figure', localization, ['num', 'figure'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_figure_manager_given_figure(...)' code ##################

        unicode_13915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, (-1)), 'unicode', u'Create a new figure manager instance for the given figure.\n        ')
        
        # Assigning a Call to a Name (line 176):
        
        # Assigning a Call to a Name (line 176):
        
        # Assigning a Call to a Name (line 176):
        
        # Call to FigureCanvas(...): (line 176)
        # Processing the call arguments (line 176)
        # Getting the type of 'figure' (line 176)
        figure_13918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 34), 'figure', False)
        # Processing the call keyword arguments (line 176)
        kwargs_13919 = {}
        # Getting the type of 'cls' (line 176)
        cls_13916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 17), 'cls', False)
        # Obtaining the member 'FigureCanvas' of a type (line 176)
        FigureCanvas_13917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 17), cls_13916, 'FigureCanvas')
        # Calling FigureCanvas(args, kwargs) (line 176)
        FigureCanvas_call_result_13920 = invoke(stypy.reporting.localization.Localization(__file__, 176, 17), FigureCanvas_13917, *[figure_13918], **kwargs_13919)
        
        # Assigning a type to the variable 'canvas' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), 'canvas', FigureCanvas_call_result_13920)
        
        # Assigning a Call to a Name (line 177):
        
        # Assigning a Call to a Name (line 177):
        
        # Assigning a Call to a Name (line 177):
        
        # Call to FigureManager(...): (line 177)
        # Processing the call arguments (line 177)
        # Getting the type of 'canvas' (line 177)
        canvas_13923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 36), 'canvas', False)
        # Getting the type of 'num' (line 177)
        num_13924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 44), 'num', False)
        # Processing the call keyword arguments (line 177)
        kwargs_13925 = {}
        # Getting the type of 'cls' (line 177)
        cls_13921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 18), 'cls', False)
        # Obtaining the member 'FigureManager' of a type (line 177)
        FigureManager_13922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 177, 18), cls_13921, 'FigureManager')
        # Calling FigureManager(args, kwargs) (line 177)
        FigureManager_call_result_13926 = invoke(stypy.reporting.localization.Localization(__file__, 177, 18), FigureManager_13922, *[canvas_13923, num_13924], **kwargs_13925)
        
        # Assigning a type to the variable 'manager' (line 177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 8), 'manager', FigureManager_call_result_13926)
        # Getting the type of 'manager' (line 178)
        manager_13927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 15), 'manager')
        # Assigning a type to the variable 'stypy_return_type' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 8), 'stypy_return_type', manager_13927)
        
        # ################# End of 'new_figure_manager_given_figure(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_figure_manager_given_figure' in the type store
        # Getting the type of 'stypy_return_type' (line 172)
        stypy_return_type_13928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13928)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_figure_manager_given_figure'
        return stypy_return_type_13928


    @norecursion
    def draw_if_interactive(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_if_interactive'
        module_type_store = module_type_store.open_function_context('draw_if_interactive', 180, 4, False)
        # Assigning a type to the variable 'self' (line 181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _Backend.draw_if_interactive.__dict__.__setitem__('stypy_localization', localization)
        _Backend.draw_if_interactive.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _Backend.draw_if_interactive.__dict__.__setitem__('stypy_type_store', module_type_store)
        _Backend.draw_if_interactive.__dict__.__setitem__('stypy_function_name', '_Backend.draw_if_interactive')
        _Backend.draw_if_interactive.__dict__.__setitem__('stypy_param_names_list', [])
        _Backend.draw_if_interactive.__dict__.__setitem__('stypy_varargs_param_name', None)
        _Backend.draw_if_interactive.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _Backend.draw_if_interactive.__dict__.__setitem__('stypy_call_defaults', defaults)
        _Backend.draw_if_interactive.__dict__.__setitem__('stypy_call_varargs', varargs)
        _Backend.draw_if_interactive.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _Backend.draw_if_interactive.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_Backend.draw_if_interactive', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_if_interactive', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_if_interactive(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'cls' (line 182)
        cls_13929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 11), 'cls')
        # Obtaining the member 'trigger_manager_draw' of a type (line 182)
        trigger_manager_draw_13930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 182, 11), cls_13929, 'trigger_manager_draw')
        # Getting the type of 'None' (line 182)
        None_13931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 43), 'None')
        # Applying the binary operator 'isnot' (line 182)
        result_is_not_13932 = python_operator(stypy.reporting.localization.Localization(__file__, 182, 11), 'isnot', trigger_manager_draw_13930, None_13931)
        
        
        # Call to is_interactive(...): (line 182)
        # Processing the call keyword arguments (line 182)
        kwargs_13934 = {}
        # Getting the type of 'is_interactive' (line 182)
        is_interactive_13933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 52), 'is_interactive', False)
        # Calling is_interactive(args, kwargs) (line 182)
        is_interactive_call_result_13935 = invoke(stypy.reporting.localization.Localization(__file__, 182, 52), is_interactive_13933, *[], **kwargs_13934)
        
        # Applying the binary operator 'and' (line 182)
        result_and_keyword_13936 = python_operator(stypy.reporting.localization.Localization(__file__, 182, 11), 'and', result_is_not_13932, is_interactive_call_result_13935)
        
        # Testing the type of an if condition (line 182)
        if_condition_13937 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 182, 8), result_and_keyword_13936)
        # Assigning a type to the variable 'if_condition_13937' (line 182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 182, 8), 'if_condition_13937', if_condition_13937)
        # SSA begins for if statement (line 182)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 183):
        
        # Assigning a Call to a Name (line 183):
        
        # Assigning a Call to a Name (line 183):
        
        # Call to get_active(...): (line 183)
        # Processing the call keyword arguments (line 183)
        kwargs_13940 = {}
        # Getting the type of 'Gcf' (line 183)
        Gcf_13938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 22), 'Gcf', False)
        # Obtaining the member 'get_active' of a type (line 183)
        get_active_13939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 22), Gcf_13938, 'get_active')
        # Calling get_active(args, kwargs) (line 183)
        get_active_call_result_13941 = invoke(stypy.reporting.localization.Localization(__file__, 183, 22), get_active_13939, *[], **kwargs_13940)
        
        # Assigning a type to the variable 'manager' (line 183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 12), 'manager', get_active_call_result_13941)
        
        # Getting the type of 'manager' (line 184)
        manager_13942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 15), 'manager')
        # Testing the type of an if condition (line 184)
        if_condition_13943 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 184, 12), manager_13942)
        # Assigning a type to the variable 'if_condition_13943' (line 184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 12), 'if_condition_13943', if_condition_13943)
        # SSA begins for if statement (line 184)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to trigger_manager_draw(...): (line 185)
        # Processing the call arguments (line 185)
        # Getting the type of 'manager' (line 185)
        manager_13946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 41), 'manager', False)
        # Processing the call keyword arguments (line 185)
        kwargs_13947 = {}
        # Getting the type of 'cls' (line 185)
        cls_13944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 16), 'cls', False)
        # Obtaining the member 'trigger_manager_draw' of a type (line 185)
        trigger_manager_draw_13945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 16), cls_13944, 'trigger_manager_draw')
        # Calling trigger_manager_draw(args, kwargs) (line 185)
        trigger_manager_draw_call_result_13948 = invoke(stypy.reporting.localization.Localization(__file__, 185, 16), trigger_manager_draw_13945, *[manager_13946], **kwargs_13947)
        
        # SSA join for if statement (line 184)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 182)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'draw_if_interactive(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_if_interactive' in the type store
        # Getting the type of 'stypy_return_type' (line 180)
        stypy_return_type_13949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13949)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_if_interactive'
        return stypy_return_type_13949


    @norecursion
    def show(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 188)
        None_13950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 24), 'None')
        defaults = [None_13950]
        # Create a new context for function 'show'
        module_type_store = module_type_store.open_function_context('show', 187, 4, False)
        # Assigning a type to the variable 'self' (line 188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _Backend.show.__dict__.__setitem__('stypy_localization', localization)
        _Backend.show.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _Backend.show.__dict__.__setitem__('stypy_type_store', module_type_store)
        _Backend.show.__dict__.__setitem__('stypy_function_name', '_Backend.show')
        _Backend.show.__dict__.__setitem__('stypy_param_names_list', ['block'])
        _Backend.show.__dict__.__setitem__('stypy_varargs_param_name', None)
        _Backend.show.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _Backend.show.__dict__.__setitem__('stypy_call_defaults', defaults)
        _Backend.show.__dict__.__setitem__('stypy_call_varargs', varargs)
        _Backend.show.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _Backend.show.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_Backend.show', ['block'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'show', localization, ['block'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'show(...)' code ##################

        unicode_13951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, (-1)), 'unicode', u"Show all figures.\n\n        `show` blocks by calling `mainloop` if *block* is ``True``, or if it\n        is ``None`` and we are neither in IPython's ``%pylab`` mode, nor in\n        `interactive` mode.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 195)
        # Getting the type of 'cls' (line 195)
        cls_13952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 11), 'cls')
        # Obtaining the member 'mainloop' of a type (line 195)
        mainloop_13953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 11), cls_13952, 'mainloop')
        # Getting the type of 'None' (line 195)
        None_13954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 27), 'None')
        
        (may_be_13955, more_types_in_union_13956) = may_be_none(mainloop_13953, None_13954)

        if may_be_13955:

            if more_types_in_union_13956:
                # Runtime conditional SSA (line 195)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 196)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 196, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_13956:
                # SSA join for if statement (line 195)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 197):
        
        # Assigning a Call to a Name (line 197):
        
        # Assigning a Call to a Name (line 197):
        
        # Call to get_all_fig_managers(...): (line 197)
        # Processing the call keyword arguments (line 197)
        kwargs_13959 = {}
        # Getting the type of 'Gcf' (line 197)
        Gcf_13957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 19), 'Gcf', False)
        # Obtaining the member 'get_all_fig_managers' of a type (line 197)
        get_all_fig_managers_13958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 197, 19), Gcf_13957, 'get_all_fig_managers')
        # Calling get_all_fig_managers(args, kwargs) (line 197)
        get_all_fig_managers_call_result_13960 = invoke(stypy.reporting.localization.Localization(__file__, 197, 19), get_all_fig_managers_13958, *[], **kwargs_13959)
        
        # Assigning a type to the variable 'managers' (line 197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 8), 'managers', get_all_fig_managers_call_result_13960)
        
        
        # Getting the type of 'managers' (line 198)
        managers_13961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 15), 'managers')
        # Applying the 'not' unary operator (line 198)
        result_not__13962 = python_operator(stypy.reporting.localization.Localization(__file__, 198, 11), 'not', managers_13961)
        
        # Testing the type of an if condition (line 198)
        if_condition_13963 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 198, 8), result_not__13962)
        # Assigning a type to the variable 'if_condition_13963' (line 198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 8), 'if_condition_13963', if_condition_13963)
        # SSA begins for if statement (line 198)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 198)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'managers' (line 200)
        managers_13964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 23), 'managers')
        # Testing the type of a for loop iterable (line 200)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 200, 8), managers_13964)
        # Getting the type of the for loop variable (line 200)
        for_loop_var_13965 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 200, 8), managers_13964)
        # Assigning a type to the variable 'manager' (line 200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 200, 8), 'manager', for_loop_var_13965)
        # SSA begins for a for statement (line 200)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to show(...): (line 201)
        # Processing the call keyword arguments (line 201)
        kwargs_13968 = {}
        # Getting the type of 'manager' (line 201)
        manager_13966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 12), 'manager', False)
        # Obtaining the member 'show' of a type (line 201)
        show_13967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 12), manager_13966, 'show')
        # Calling show(args, kwargs) (line 201)
        show_call_result_13969 = invoke(stypy.reporting.localization.Localization(__file__, 201, 12), show_13967, *[], **kwargs_13968)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 202)
        # Getting the type of 'block' (line 202)
        block_13970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 11), 'block')
        # Getting the type of 'None' (line 202)
        None_13971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 20), 'None')
        
        (may_be_13972, more_types_in_union_13973) = may_be_none(block_13970, None_13971)

        if may_be_13972:

            if more_types_in_union_13973:
                # Runtime conditional SSA (line 202)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 204, 12))
            
            # 'from matplotlib import pyplot' statement (line 204)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
            import_13974 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 204, 12), 'matplotlib')

            if (type(import_13974) is not StypyTypeError):

                if (import_13974 != 'pyd_module'):
                    __import__(import_13974)
                    sys_modules_13975 = sys.modules[import_13974]
                    import_from_module(stypy.reporting.localization.Localization(__file__, 204, 12), 'matplotlib', sys_modules_13975.module_type_store, module_type_store, ['pyplot'])
                    nest_module(stypy.reporting.localization.Localization(__file__, 204, 12), __file__, sys_modules_13975, sys_modules_13975.module_type_store, module_type_store)
                else:
                    from matplotlib import pyplot

                    import_from_module(stypy.reporting.localization.Localization(__file__, 204, 12), 'matplotlib', None, module_type_store, ['pyplot'], [pyplot])

            else:
                # Assigning a type to the variable 'matplotlib' (line 204)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 12), 'matplotlib', import_13974)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
            
            
            
            # SSA begins for try-except statement (line 205)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a UnaryOp to a Name (line 208):
            
            # Assigning a UnaryOp to a Name (line 208):
            
            # Assigning a UnaryOp to a Name (line 208):
            
            # Getting the type of 'pyplot' (line 208)
            pyplot_13976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 36), 'pyplot')
            # Obtaining the member 'show' of a type (line 208)
            show_13977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 36), pyplot_13976, 'show')
            # Obtaining the member '_needmain' of a type (line 208)
            _needmain_13978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 36), show_13977, '_needmain')
            # Applying the 'not' unary operator (line 208)
            result_not__13979 = python_operator(stypy.reporting.localization.Localization(__file__, 208, 32), 'not', _needmain_13978)
            
            # Assigning a type to the variable 'ipython_pylab' (line 208)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 16), 'ipython_pylab', result_not__13979)
            # SSA branch for the except part of a try statement (line 205)
            # SSA branch for the except 'AttributeError' branch of a try statement (line 205)
            module_type_store.open_ssa_branch('except')
            
            # Assigning a Name to a Name (line 210):
            
            # Assigning a Name to a Name (line 210):
            
            # Assigning a Name to a Name (line 210):
            # Getting the type of 'False' (line 210)
            False_13980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 32), 'False')
            # Assigning a type to the variable 'ipython_pylab' (line 210)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 16), 'ipython_pylab', False_13980)
            # SSA join for try-except statement (line 205)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a BoolOp to a Name (line 211):
            
            # Assigning a BoolOp to a Name (line 211):
            
            # Assigning a BoolOp to a Name (line 211):
            
            # Evaluating a boolean operation
            
            # Getting the type of 'ipython_pylab' (line 211)
            ipython_pylab_13981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 24), 'ipython_pylab')
            # Applying the 'not' unary operator (line 211)
            result_not__13982 = python_operator(stypy.reporting.localization.Localization(__file__, 211, 20), 'not', ipython_pylab_13981)
            
            
            
            # Call to is_interactive(...): (line 211)
            # Processing the call keyword arguments (line 211)
            kwargs_13984 = {}
            # Getting the type of 'is_interactive' (line 211)
            is_interactive_13983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 46), 'is_interactive', False)
            # Calling is_interactive(args, kwargs) (line 211)
            is_interactive_call_result_13985 = invoke(stypy.reporting.localization.Localization(__file__, 211, 46), is_interactive_13983, *[], **kwargs_13984)
            
            # Applying the 'not' unary operator (line 211)
            result_not__13986 = python_operator(stypy.reporting.localization.Localization(__file__, 211, 42), 'not', is_interactive_call_result_13985)
            
            # Applying the binary operator 'and' (line 211)
            result_and_keyword_13987 = python_operator(stypy.reporting.localization.Localization(__file__, 211, 20), 'and', result_not__13982, result_not__13986)
            
            # Assigning a type to the variable 'block' (line 211)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 12), 'block', result_and_keyword_13987)
            
            
            
            # Call to get_backend(...): (line 214)
            # Processing the call keyword arguments (line 214)
            kwargs_13989 = {}
            # Getting the type of 'get_backend' (line 214)
            get_backend_13988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 15), 'get_backend', False)
            # Calling get_backend(args, kwargs) (line 214)
            get_backend_call_result_13990 = invoke(stypy.reporting.localization.Localization(__file__, 214, 15), get_backend_13988, *[], **kwargs_13989)
            
            unicode_13991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 32), 'unicode', u'WebAgg')
            # Applying the binary operator '==' (line 214)
            result_eq_13992 = python_operator(stypy.reporting.localization.Localization(__file__, 214, 15), '==', get_backend_call_result_13990, unicode_13991)
            
            # Testing the type of an if condition (line 214)
            if_condition_13993 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 214, 12), result_eq_13992)
            # Assigning a type to the variable 'if_condition_13993' (line 214)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'if_condition_13993', if_condition_13993)
            # SSA begins for if statement (line 214)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Name (line 215):
            
            # Assigning a Name to a Name (line 215):
            
            # Assigning a Name to a Name (line 215):
            # Getting the type of 'True' (line 215)
            True_13994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 24), 'True')
            # Assigning a type to the variable 'block' (line 215)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 16), 'block', True_13994)
            # SSA join for if statement (line 214)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_13973:
                # SSA join for if statement (line 202)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'block' (line 216)
        block_13995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 11), 'block')
        # Testing the type of an if condition (line 216)
        if_condition_13996 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 216, 8), block_13995)
        # Assigning a type to the variable 'if_condition_13996' (line 216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 8), 'if_condition_13996', if_condition_13996)
        # SSA begins for if statement (line 216)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to mainloop(...): (line 217)
        # Processing the call keyword arguments (line 217)
        kwargs_13999 = {}
        # Getting the type of 'cls' (line 217)
        cls_13997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 12), 'cls', False)
        # Obtaining the member 'mainloop' of a type (line 217)
        mainloop_13998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 12), cls_13997, 'mainloop')
        # Calling mainloop(args, kwargs) (line 217)
        mainloop_call_result_14000 = invoke(stypy.reporting.localization.Localization(__file__, 217, 12), mainloop_13998, *[], **kwargs_13999)
        
        # SSA join for if statement (line 216)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'show(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'show' in the type store
        # Getting the type of 'stypy_return_type' (line 187)
        stypy_return_type_14001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14001)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'show'
        return stypy_return_type_14001


    @staticmethod
    @norecursion
    def export(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'export'
        module_type_store = module_type_store.open_function_context('export', 221, 4, False)
        
        # Passed parameters checking function
        _Backend.export.__dict__.__setitem__('stypy_localization', localization)
        _Backend.export.__dict__.__setitem__('stypy_type_of_self', None)
        _Backend.export.__dict__.__setitem__('stypy_type_store', module_type_store)
        _Backend.export.__dict__.__setitem__('stypy_function_name', 'export')
        _Backend.export.__dict__.__setitem__('stypy_param_names_list', ['cls'])
        _Backend.export.__dict__.__setitem__('stypy_varargs_param_name', None)
        _Backend.export.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _Backend.export.__dict__.__setitem__('stypy_call_defaults', defaults)
        _Backend.export.__dict__.__setitem__('stypy_call_varargs', varargs)
        _Backend.export.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _Backend.export.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, 'export', ['cls'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'export', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'export(...)' code ##################

        
        
        # Obtaining an instance of the builtin type 'list' (line 223)
        list_14002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 223)
        # Adding element type (line 223)
        unicode_14003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 21), 'unicode', u'FigureCanvas')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 223, 20), list_14002, unicode_14003)
        # Adding element type (line 223)
        unicode_14004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 21), 'unicode', u'FigureManager')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 223, 20), list_14002, unicode_14004)
        # Adding element type (line 223)
        unicode_14005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 21), 'unicode', u'new_figure_manager')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 223, 20), list_14002, unicode_14005)
        # Adding element type (line 223)
        unicode_14006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 21), 'unicode', u'new_figure_manager_given_figure')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 223, 20), list_14002, unicode_14006)
        # Adding element type (line 223)
        unicode_14007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 21), 'unicode', u'draw_if_interactive')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 223, 20), list_14002, unicode_14007)
        # Adding element type (line 223)
        unicode_14008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 21), 'unicode', u'show')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 223, 20), list_14002, unicode_14008)
        
        # Testing the type of a for loop iterable (line 223)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 223, 8), list_14002)
        # Getting the type of the for loop variable (line 223)
        for_loop_var_14009 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 223, 8), list_14002)
        # Assigning a type to the variable 'name' (line 223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 223, 8), 'name', for_loop_var_14009)
        # SSA begins for a for statement (line 223)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to setattr(...): (line 229)
        # Processing the call arguments (line 229)
        
        # Obtaining the type of the subscript
        # Getting the type of 'cls' (line 229)
        cls_14011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 32), 'cls', False)
        # Obtaining the member '__module__' of a type (line 229)
        module___14012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 32), cls_14011, '__module__')
        # Getting the type of 'sys' (line 229)
        sys_14013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 20), 'sys', False)
        # Obtaining the member 'modules' of a type (line 229)
        modules_14014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 20), sys_14013, 'modules')
        # Obtaining the member '__getitem__' of a type (line 229)
        getitem___14015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 20), modules_14014, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 229)
        subscript_call_result_14016 = invoke(stypy.reporting.localization.Localization(__file__, 229, 20), getitem___14015, module___14012)
        
        # Getting the type of 'name' (line 229)
        name_14017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 49), 'name', False)
        
        # Call to getattr(...): (line 229)
        # Processing the call arguments (line 229)
        # Getting the type of 'cls' (line 229)
        cls_14019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 63), 'cls', False)
        # Getting the type of 'name' (line 229)
        name_14020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 68), 'name', False)
        # Processing the call keyword arguments (line 229)
        kwargs_14021 = {}
        # Getting the type of 'getattr' (line 229)
        getattr_14018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 55), 'getattr', False)
        # Calling getattr(args, kwargs) (line 229)
        getattr_call_result_14022 = invoke(stypy.reporting.localization.Localization(__file__, 229, 55), getattr_14018, *[cls_14019, name_14020], **kwargs_14021)
        
        # Processing the call keyword arguments (line 229)
        kwargs_14023 = {}
        # Getting the type of 'setattr' (line 229)
        setattr_14010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 12), 'setattr', False)
        # Calling setattr(args, kwargs) (line 229)
        setattr_call_result_14024 = invoke(stypy.reporting.localization.Localization(__file__, 229, 12), setattr_14010, *[subscript_call_result_14016, name_14017, getattr_call_result_14022], **kwargs_14023)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Declaration of the 'Show' class
        # Getting the type of 'ShowBase' (line 233)
        ShowBase_14025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 19), 'ShowBase')

        class Show(ShowBase_14025, ):

            @norecursion
            def mainloop(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'mainloop'
                module_type_store = module_type_store.open_function_context('mainloop', 234, 12, False)
                # Assigning a type to the variable 'self' (line 235)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 235, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Show.mainloop.__dict__.__setitem__('stypy_localization', localization)
                Show.mainloop.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Show.mainloop.__dict__.__setitem__('stypy_type_store', module_type_store)
                Show.mainloop.__dict__.__setitem__('stypy_function_name', 'Show.mainloop')
                Show.mainloop.__dict__.__setitem__('stypy_param_names_list', [])
                Show.mainloop.__dict__.__setitem__('stypy_varargs_param_name', None)
                Show.mainloop.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Show.mainloop.__dict__.__setitem__('stypy_call_defaults', defaults)
                Show.mainloop.__dict__.__setitem__('stypy_call_varargs', varargs)
                Show.mainloop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Show.mainloop.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Show.mainloop', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'mainloop', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'mainloop(...)' code ##################

                
                # Call to mainloop(...): (line 235)
                # Processing the call keyword arguments (line 235)
                kwargs_14028 = {}
                # Getting the type of 'cls' (line 235)
                cls_14026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 23), 'cls', False)
                # Obtaining the member 'mainloop' of a type (line 235)
                mainloop_14027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 23), cls_14026, 'mainloop')
                # Calling mainloop(args, kwargs) (line 235)
                mainloop_call_result_14029 = invoke(stypy.reporting.localization.Localization(__file__, 235, 23), mainloop_14027, *[], **kwargs_14028)
                
                # Assigning a type to the variable 'stypy_return_type' (line 235)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 235, 16), 'stypy_return_type', mainloop_call_result_14029)
                
                # ################# End of 'mainloop(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'mainloop' in the type store
                # Getting the type of 'stypy_return_type' (line 234)
                stypy_return_type_14030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_14030)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'mainloop'
                return stypy_return_type_14030

        
        # Assigning a type to the variable 'Show' (line 233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'Show', Show)
        
        # Call to setattr(...): (line 237)
        # Processing the call arguments (line 237)
        
        # Obtaining the type of the subscript
        # Getting the type of 'cls' (line 237)
        cls_14032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 28), 'cls', False)
        # Obtaining the member '__module__' of a type (line 237)
        module___14033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 28), cls_14032, '__module__')
        # Getting the type of 'sys' (line 237)
        sys_14034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 16), 'sys', False)
        # Obtaining the member 'modules' of a type (line 237)
        modules_14035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 16), sys_14034, 'modules')
        # Obtaining the member '__getitem__' of a type (line 237)
        getitem___14036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 16), modules_14035, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 237)
        subscript_call_result_14037 = invoke(stypy.reporting.localization.Localization(__file__, 237, 16), getitem___14036, module___14033)
        
        unicode_14038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 45), 'unicode', u'Show')
        # Getting the type of 'Show' (line 237)
        Show_14039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 53), 'Show', False)
        # Processing the call keyword arguments (line 237)
        kwargs_14040 = {}
        # Getting the type of 'setattr' (line 237)
        setattr_14031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 8), 'setattr', False)
        # Calling setattr(args, kwargs) (line 237)
        setattr_call_result_14041 = invoke(stypy.reporting.localization.Localization(__file__, 237, 8), setattr_14031, *[subscript_call_result_14037, unicode_14038, Show_14039], **kwargs_14040)
        
        # Getting the type of 'cls' (line 238)
        cls_14042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 15), 'cls')
        # Assigning a type to the variable 'stypy_return_type' (line 238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 8), 'stypy_return_type', cls_14042)
        
        # ################# End of 'export(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'export' in the type store
        # Getting the type of 'stypy_return_type' (line 221)
        stypy_return_type_14043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14043)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'export'
        return stypy_return_type_14043


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 138, 0, False)
        # Assigning a type to the variable 'self' (line 139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_Backend.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_Backend' (line 138)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 138, 0), '_Backend', _Backend)

# Assigning a Name to a Name (line 148):
# Getting the type of 'None' (line 148)
None_14044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 19), 'None')
# Getting the type of '_Backend'
_Backend_14045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_Backend')
# Setting the type of the member 'FigureCanvas' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _Backend_14045, 'FigureCanvas', None_14044)

# Assigning a Name to a Name (line 149):
# Getting the type of 'None' (line 149)
None_14046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 20), 'None')
# Getting the type of '_Backend'
_Backend_14047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_Backend')
# Setting the type of the member 'FigureManager' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _Backend_14047, 'FigureManager', None_14046)

# Assigning a Name to a Name (line 156):
# Getting the type of 'None' (line 156)
None_14048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 27), 'None')
# Getting the type of '_Backend'
_Backend_14049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_Backend')
# Setting the type of the member 'trigger_manager_draw' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _Backend_14049, 'trigger_manager_draw', None_14048)

# Assigning a Name to a Name (line 157):
# Getting the type of 'None' (line 157)
None_14050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 15), 'None')
# Getting the type of '_Backend'
_Backend_14051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_Backend')
# Setting the type of the member 'mainloop' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _Backend_14051, 'mainloop', None_14050)
# Declaration of the 'ShowBase' class
# Getting the type of '_Backend' (line 241)
_Backend_14052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 15), '_Backend')

class ShowBase(_Backend_14052, ):
    unicode_14053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, (-1)), 'unicode', u'\n    Simple base class to generate a show() callable in backends.\n\n    Subclass must override mainloop() method.\n    ')

    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 248)
        None_14054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 29), 'None')
        defaults = [None_14054]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 248, 4, False)
        # Assigning a type to the variable 'self' (line 249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ShowBase.__call__.__dict__.__setitem__('stypy_localization', localization)
        ShowBase.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ShowBase.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        ShowBase.__call__.__dict__.__setitem__('stypy_function_name', 'ShowBase.__call__')
        ShowBase.__call__.__dict__.__setitem__('stypy_param_names_list', ['block'])
        ShowBase.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        ShowBase.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ShowBase.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        ShowBase.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        ShowBase.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ShowBase.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ShowBase.__call__', ['block'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['block'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Call to show(...): (line 249)
        # Processing the call keyword arguments (line 249)
        # Getting the type of 'block' (line 249)
        block_14057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 31), 'block', False)
        keyword_14058 = block_14057
        kwargs_14059 = {'block': keyword_14058}
        # Getting the type of 'self' (line 249)
        self_14055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 15), 'self', False)
        # Obtaining the member 'show' of a type (line 249)
        show_14056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 15), self_14055, 'show')
        # Calling show(args, kwargs) (line 249)
        show_call_result_14060 = invoke(stypy.reporting.localization.Localization(__file__, 249, 15), show_14056, *[], **kwargs_14059)
        
        # Assigning a type to the variable 'stypy_return_type' (line 249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 8), 'stypy_return_type', show_call_result_14060)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 248)
        stypy_return_type_14061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14061)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_14061


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 241, 0, False)
        # Assigning a type to the variable 'self' (line 242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ShowBase.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ShowBase' (line 241)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 0), 'ShowBase', ShowBase)
# Declaration of the 'RendererBase' class

class RendererBase(object, ):
    unicode_14062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, (-1)), 'unicode', u'An abstract base class to handle drawing/rendering operations.\n\n    The following methods must be implemented in the backend for full\n    functionality (though just implementing :meth:`draw_path` alone would\n    give a highly capable backend):\n\n    * :meth:`draw_path`\n    * :meth:`draw_image`\n    * :meth:`draw_gouraud_triangle`\n\n    The following methods *should* be implemented in the backend for\n    optimization reasons:\n\n    * :meth:`draw_text`\n    * :meth:`draw_markers`\n    * :meth:`draw_path_collection`\n    * :meth:`draw_quad_mesh`\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 272, 4, False)
        # Assigning a type to the variable 'self' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 273):
        
        # Assigning a Name to a Attribute (line 273):
        
        # Assigning a Name to a Attribute (line 273):
        # Getting the type of 'None' (line 273)
        None_14063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 27), 'None')
        # Getting the type of 'self' (line 273)
        self_14064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'self')
        # Setting the type of the member '_texmanager' of a type (line 273)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 8), self_14064, '_texmanager', None_14063)
        
        # Assigning a Call to a Attribute (line 274):
        
        # Assigning a Call to a Attribute (line 274):
        
        # Assigning a Call to a Attribute (line 274):
        
        # Call to TextToPath(...): (line 274)
        # Processing the call keyword arguments (line 274)
        kwargs_14067 = {}
        # Getting the type of 'textpath' (line 274)
        textpath_14065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 26), 'textpath', False)
        # Obtaining the member 'TextToPath' of a type (line 274)
        TextToPath_14066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 26), textpath_14065, 'TextToPath')
        # Calling TextToPath(args, kwargs) (line 274)
        TextToPath_call_result_14068 = invoke(stypy.reporting.localization.Localization(__file__, 274, 26), TextToPath_14066, *[], **kwargs_14067)
        
        # Getting the type of 'self' (line 274)
        self_14069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 8), 'self')
        # Setting the type of the member '_text2path' of a type (line 274)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 8), self_14069, '_text2path', TextToPath_call_result_14068)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def open_group(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 276)
        None_14070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 32), 'None')
        defaults = [None_14070]
        # Create a new context for function 'open_group'
        module_type_store = module_type_store.open_function_context('open_group', 276, 4, False)
        # Assigning a type to the variable 'self' (line 277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.open_group.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.open_group.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.open_group.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.open_group.__dict__.__setitem__('stypy_function_name', 'RendererBase.open_group')
        RendererBase.open_group.__dict__.__setitem__('stypy_param_names_list', ['s', 'gid'])
        RendererBase.open_group.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.open_group.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.open_group.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.open_group.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.open_group.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.open_group.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.open_group', ['s', 'gid'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'open_group', localization, ['s', 'gid'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'open_group(...)' code ##################

        unicode_14071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, (-1)), 'unicode', u'\n        Open a grouping element with label *s*. If *gid* is given, use\n        *gid* as the id of the group. Is only currently used by\n        :mod:`~matplotlib.backends.backend_svg`.\n        ')
        
        # ################# End of 'open_group(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'open_group' in the type store
        # Getting the type of 'stypy_return_type' (line 276)
        stypy_return_type_14072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14072)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'open_group'
        return stypy_return_type_14072


    @norecursion
    def close_group(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'close_group'
        module_type_store = module_type_store.open_function_context('close_group', 283, 4, False)
        # Assigning a type to the variable 'self' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.close_group.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.close_group.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.close_group.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.close_group.__dict__.__setitem__('stypy_function_name', 'RendererBase.close_group')
        RendererBase.close_group.__dict__.__setitem__('stypy_param_names_list', ['s'])
        RendererBase.close_group.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.close_group.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.close_group.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.close_group.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.close_group.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.close_group.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.close_group', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'close_group', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'close_group(...)' code ##################

        unicode_14073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, (-1)), 'unicode', u'\n        Close a grouping element with label *s*\n        Is only currently used by :mod:`~matplotlib.backends.backend_svg`\n        ')
        
        # ################# End of 'close_group(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'close_group' in the type store
        # Getting the type of 'stypy_return_type' (line 283)
        stypy_return_type_14074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14074)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'close_group'
        return stypy_return_type_14074


    @norecursion
    def draw_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 289)
        None_14075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 53), 'None')
        defaults = [None_14075]
        # Create a new context for function 'draw_path'
        module_type_store = module_type_store.open_function_context('draw_path', 289, 4, False)
        # Assigning a type to the variable 'self' (line 290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.draw_path.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.draw_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.draw_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.draw_path.__dict__.__setitem__('stypy_function_name', 'RendererBase.draw_path')
        RendererBase.draw_path.__dict__.__setitem__('stypy_param_names_list', ['gc', 'path', 'transform', 'rgbFace'])
        RendererBase.draw_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.draw_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.draw_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.draw_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.draw_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.draw_path.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.draw_path', ['gc', 'path', 'transform', 'rgbFace'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_path', localization, ['gc', 'path', 'transform', 'rgbFace'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_path(...)' code ##################

        unicode_14076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, (-1)), 'unicode', u'\n        Draws a :class:`~matplotlib.path.Path` instance using the\n        given affine transform.\n        ')
        # Getting the type of 'NotImplementedError' (line 294)
        NotImplementedError_14077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 14), 'NotImplementedError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 294, 8), NotImplementedError_14077, 'raise parameter', BaseException)
        
        # ################# End of 'draw_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_path' in the type store
        # Getting the type of 'stypy_return_type' (line 289)
        stypy_return_type_14078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14078)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_path'
        return stypy_return_type_14078


    @norecursion
    def draw_markers(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 297)
        None_14079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 36), 'None')
        defaults = [None_14079]
        # Create a new context for function 'draw_markers'
        module_type_store = module_type_store.open_function_context('draw_markers', 296, 4, False)
        # Assigning a type to the variable 'self' (line 297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.draw_markers.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.draw_markers.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.draw_markers.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.draw_markers.__dict__.__setitem__('stypy_function_name', 'RendererBase.draw_markers')
        RendererBase.draw_markers.__dict__.__setitem__('stypy_param_names_list', ['gc', 'marker_path', 'marker_trans', 'path', 'trans', 'rgbFace'])
        RendererBase.draw_markers.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.draw_markers.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.draw_markers.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.draw_markers.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.draw_markers.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.draw_markers.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.draw_markers', ['gc', 'marker_path', 'marker_trans', 'path', 'trans', 'rgbFace'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_markers', localization, ['gc', 'marker_path', 'marker_trans', 'path', 'trans', 'rgbFace'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_markers(...)' code ##################

        unicode_14080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 320, (-1)), 'unicode', u'\n        Draws a marker at each of the vertices in path.  This includes\n        all vertices, including control points on curves.  To avoid\n        that behavior, those vertices should be removed before calling\n        this function.\n\n        This provides a fallback implementation of draw_markers that\n        makes multiple calls to :meth:`draw_path`.  Some backends may\n        want to override this method in order to draw the marker only\n        once and reuse it multiple times.\n\n        Parameters\n        ----------\n        gc : `GraphicsContextBase`\n            The graphics context\n\n        marker_trans : `matplotlib.transforms.Transform`\n            An affine transform applied to the marker.\n\n        trans : `matplotlib.transforms.Transform`\n            An affine transform applied to the path.\n\n        ')
        
        
        # Call to iter_segments(...): (line 321)
        # Processing the call arguments (line 321)
        # Getting the type of 'trans' (line 321)
        trans_14083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 50), 'trans', False)
        # Processing the call keyword arguments (line 321)
        # Getting the type of 'False' (line 321)
        False_14084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 66), 'False', False)
        keyword_14085 = False_14084
        kwargs_14086 = {'simplify': keyword_14085}
        # Getting the type of 'path' (line 321)
        path_14081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 31), 'path', False)
        # Obtaining the member 'iter_segments' of a type (line 321)
        iter_segments_14082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 31), path_14081, 'iter_segments')
        # Calling iter_segments(args, kwargs) (line 321)
        iter_segments_call_result_14087 = invoke(stypy.reporting.localization.Localization(__file__, 321, 31), iter_segments_14082, *[trans_14083], **kwargs_14086)
        
        # Testing the type of a for loop iterable (line 321)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 321, 8), iter_segments_call_result_14087)
        # Getting the type of the for loop variable (line 321)
        for_loop_var_14088 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 321, 8), iter_segments_call_result_14087)
        # Assigning a type to the variable 'vertices' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 8), 'vertices', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 321, 8), for_loop_var_14088))
        # Assigning a type to the variable 'codes' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 8), 'codes', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 321, 8), for_loop_var_14088))
        # SSA begins for a for statement (line 321)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to len(...): (line 322)
        # Processing the call arguments (line 322)
        # Getting the type of 'vertices' (line 322)
        vertices_14090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 19), 'vertices', False)
        # Processing the call keyword arguments (line 322)
        kwargs_14091 = {}
        # Getting the type of 'len' (line 322)
        len_14089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 15), 'len', False)
        # Calling len(args, kwargs) (line 322)
        len_call_result_14092 = invoke(stypy.reporting.localization.Localization(__file__, 322, 15), len_14089, *[vertices_14090], **kwargs_14091)
        
        # Testing the type of an if condition (line 322)
        if_condition_14093 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 322, 12), len_call_result_14092)
        # Assigning a type to the variable 'if_condition_14093' (line 322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 12), 'if_condition_14093', if_condition_14093)
        # SSA begins for if statement (line 322)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Tuple (line 323):
        
        # Assigning a Subscript to a Name (line 323):
        
        # Assigning a Subscript to a Name (line 323):
        
        # Obtaining the type of the subscript
        int_14094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 16), 'int')
        
        # Obtaining the type of the subscript
        int_14095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 32), 'int')
        slice_14096 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 323, 23), int_14095, None, None)
        # Getting the type of 'vertices' (line 323)
        vertices_14097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 23), 'vertices')
        # Obtaining the member '__getitem__' of a type (line 323)
        getitem___14098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 23), vertices_14097, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 323)
        subscript_call_result_14099 = invoke(stypy.reporting.localization.Localization(__file__, 323, 23), getitem___14098, slice_14096)
        
        # Obtaining the member '__getitem__' of a type (line 323)
        getitem___14100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 16), subscript_call_result_14099, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 323)
        subscript_call_result_14101 = invoke(stypy.reporting.localization.Localization(__file__, 323, 16), getitem___14100, int_14094)
        
        # Assigning a type to the variable 'tuple_var_assignment_13692' (line 323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 323, 16), 'tuple_var_assignment_13692', subscript_call_result_14101)
        
        # Assigning a Subscript to a Name (line 323):
        
        # Assigning a Subscript to a Name (line 323):
        
        # Obtaining the type of the subscript
        int_14102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 16), 'int')
        
        # Obtaining the type of the subscript
        int_14103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 32), 'int')
        slice_14104 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 323, 23), int_14103, None, None)
        # Getting the type of 'vertices' (line 323)
        vertices_14105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 23), 'vertices')
        # Obtaining the member '__getitem__' of a type (line 323)
        getitem___14106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 23), vertices_14105, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 323)
        subscript_call_result_14107 = invoke(stypy.reporting.localization.Localization(__file__, 323, 23), getitem___14106, slice_14104)
        
        # Obtaining the member '__getitem__' of a type (line 323)
        getitem___14108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 16), subscript_call_result_14107, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 323)
        subscript_call_result_14109 = invoke(stypy.reporting.localization.Localization(__file__, 323, 16), getitem___14108, int_14102)
        
        # Assigning a type to the variable 'tuple_var_assignment_13693' (line 323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 323, 16), 'tuple_var_assignment_13693', subscript_call_result_14109)
        
        # Assigning a Name to a Name (line 323):
        
        # Assigning a Name to a Name (line 323):
        # Getting the type of 'tuple_var_assignment_13692' (line 323)
        tuple_var_assignment_13692_14110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 16), 'tuple_var_assignment_13692')
        # Assigning a type to the variable 'x' (line 323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 323, 16), 'x', tuple_var_assignment_13692_14110)
        
        # Assigning a Name to a Name (line 323):
        
        # Assigning a Name to a Name (line 323):
        # Getting the type of 'tuple_var_assignment_13693' (line 323)
        tuple_var_assignment_13693_14111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 16), 'tuple_var_assignment_13693')
        # Assigning a type to the variable 'y' (line 323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 323, 19), 'y', tuple_var_assignment_13693_14111)
        
        # Call to draw_path(...): (line 324)
        # Processing the call arguments (line 324)
        # Getting the type of 'gc' (line 324)
        gc_14114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 31), 'gc', False)
        # Getting the type of 'marker_path' (line 324)
        marker_path_14115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 35), 'marker_path', False)
        # Getting the type of 'marker_trans' (line 325)
        marker_trans_14116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 31), 'marker_trans', False)
        
        # Call to translate(...): (line 326)
        # Processing the call arguments (line 326)
        # Getting the type of 'x' (line 326)
        x_14122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 63), 'x', False)
        # Getting the type of 'y' (line 326)
        y_14123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 66), 'y', False)
        # Processing the call keyword arguments (line 326)
        kwargs_14124 = {}
        
        # Call to Affine2D(...): (line 326)
        # Processing the call keyword arguments (line 326)
        kwargs_14119 = {}
        # Getting the type of 'transforms' (line 326)
        transforms_14117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 31), 'transforms', False)
        # Obtaining the member 'Affine2D' of a type (line 326)
        Affine2D_14118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 31), transforms_14117, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 326)
        Affine2D_call_result_14120 = invoke(stypy.reporting.localization.Localization(__file__, 326, 31), Affine2D_14118, *[], **kwargs_14119)
        
        # Obtaining the member 'translate' of a type (line 326)
        translate_14121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 31), Affine2D_call_result_14120, 'translate')
        # Calling translate(args, kwargs) (line 326)
        translate_call_result_14125 = invoke(stypy.reporting.localization.Localization(__file__, 326, 31), translate_14121, *[x_14122, y_14123], **kwargs_14124)
        
        # Applying the binary operator '+' (line 325)
        result_add_14126 = python_operator(stypy.reporting.localization.Localization(__file__, 325, 31), '+', marker_trans_14116, translate_call_result_14125)
        
        # Getting the type of 'rgbFace' (line 327)
        rgbFace_14127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 31), 'rgbFace', False)
        # Processing the call keyword arguments (line 324)
        kwargs_14128 = {}
        # Getting the type of 'self' (line 324)
        self_14112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 16), 'self', False)
        # Obtaining the member 'draw_path' of a type (line 324)
        draw_path_14113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 16), self_14112, 'draw_path')
        # Calling draw_path(args, kwargs) (line 324)
        draw_path_call_result_14129 = invoke(stypy.reporting.localization.Localization(__file__, 324, 16), draw_path_14113, *[gc_14114, marker_path_14115, result_add_14126, rgbFace_14127], **kwargs_14128)
        
        # SSA join for if statement (line 322)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'draw_markers(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_markers' in the type store
        # Getting the type of 'stypy_return_type' (line 296)
        stypy_return_type_14130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14130)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_markers'
        return stypy_return_type_14130


    @norecursion
    def draw_path_collection(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_path_collection'
        module_type_store = module_type_store.open_function_context('draw_path_collection', 329, 4, False)
        # Assigning a type to the variable 'self' (line 330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.draw_path_collection.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.draw_path_collection.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.draw_path_collection.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.draw_path_collection.__dict__.__setitem__('stypy_function_name', 'RendererBase.draw_path_collection')
        RendererBase.draw_path_collection.__dict__.__setitem__('stypy_param_names_list', ['gc', 'master_transform', 'paths', 'all_transforms', 'offsets', 'offsetTrans', 'facecolors', 'edgecolors', 'linewidths', 'linestyles', 'antialiaseds', 'urls', 'offset_position'])
        RendererBase.draw_path_collection.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.draw_path_collection.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.draw_path_collection.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.draw_path_collection.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.draw_path_collection.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.draw_path_collection.__dict__.__setitem__('stypy_declared_arg_number', 14)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.draw_path_collection', ['gc', 'master_transform', 'paths', 'all_transforms', 'offsets', 'offsetTrans', 'facecolors', 'edgecolors', 'linewidths', 'linestyles', 'antialiaseds', 'urls', 'offset_position'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_path_collection', localization, ['gc', 'master_transform', 'paths', 'all_transforms', 'offsets', 'offsetTrans', 'facecolors', 'edgecolors', 'linewidths', 'linestyles', 'antialiaseds', 'urls', 'offset_position'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_path_collection(...)' code ##################

        unicode_14131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 353, (-1)), 'unicode', u'\n        Draws a collection of paths selecting drawing properties from\n        the lists *facecolors*, *edgecolors*, *linewidths*,\n        *linestyles* and *antialiaseds*. *offsets* is a list of\n        offsets to apply to each of the paths.  The offsets in\n        *offsets* are first transformed by *offsetTrans* before being\n        applied.  *offset_position* may be either "screen" or "data"\n        depending on the space that the offsets are in.\n\n        This provides a fallback implementation of\n        :meth:`draw_path_collection` that makes multiple calls to\n        :meth:`draw_path`.  Some backends may want to override this in\n        order to render each set of path data only once, and then\n        reference that path multiple times with the different offsets,\n        colors, styles etc.  The generator methods\n        :meth:`_iter_collection_raw_paths` and\n        :meth:`_iter_collection` are provided to help with (and\n        standardize) the implementation across backends.  It is highly\n        recommended to use those generators, so that changes to the\n        behavior of :meth:`draw_path_collection` can be made globally.\n        ')
        
        # Assigning a List to a Name (line 354):
        
        # Assigning a List to a Name (line 354):
        
        # Assigning a List to a Name (line 354):
        
        # Obtaining an instance of the builtin type 'list' (line 354)
        list_14132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 354)
        
        # Assigning a type to the variable 'path_ids' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 8), 'path_ids', list_14132)
        
        
        # Call to _iter_collection_raw_paths(...): (line 355)
        # Processing the call arguments (line 355)
        # Getting the type of 'master_transform' (line 356)
        master_transform_14135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 16), 'master_transform', False)
        # Getting the type of 'paths' (line 356)
        paths_14136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 34), 'paths', False)
        # Getting the type of 'all_transforms' (line 356)
        all_transforms_14137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 41), 'all_transforms', False)
        # Processing the call keyword arguments (line 355)
        kwargs_14138 = {}
        # Getting the type of 'self' (line 355)
        self_14133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 31), 'self', False)
        # Obtaining the member '_iter_collection_raw_paths' of a type (line 355)
        _iter_collection_raw_paths_14134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 31), self_14133, '_iter_collection_raw_paths')
        # Calling _iter_collection_raw_paths(args, kwargs) (line 355)
        _iter_collection_raw_paths_call_result_14139 = invoke(stypy.reporting.localization.Localization(__file__, 355, 31), _iter_collection_raw_paths_14134, *[master_transform_14135, paths_14136, all_transforms_14137], **kwargs_14138)
        
        # Testing the type of a for loop iterable (line 355)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 355, 8), _iter_collection_raw_paths_call_result_14139)
        # Getting the type of the for loop variable (line 355)
        for_loop_var_14140 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 355, 8), _iter_collection_raw_paths_call_result_14139)
        # Assigning a type to the variable 'path' (line 355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 8), 'path', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 355, 8), for_loop_var_14140))
        # Assigning a type to the variable 'transform' (line 355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 8), 'transform', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 355, 8), for_loop_var_14140))
        # SSA begins for a for statement (line 355)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 357)
        # Processing the call arguments (line 357)
        
        # Obtaining an instance of the builtin type 'tuple' (line 357)
        tuple_14143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 357, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 357)
        # Adding element type (line 357)
        # Getting the type of 'path' (line 357)
        path_14144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 29), 'path', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 357, 29), tuple_14143, path_14144)
        # Adding element type (line 357)
        
        # Call to Affine2D(...): (line 357)
        # Processing the call arguments (line 357)
        # Getting the type of 'transform' (line 357)
        transform_14147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 55), 'transform', False)
        # Processing the call keyword arguments (line 357)
        kwargs_14148 = {}
        # Getting the type of 'transforms' (line 357)
        transforms_14145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 35), 'transforms', False)
        # Obtaining the member 'Affine2D' of a type (line 357)
        Affine2D_14146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 357, 35), transforms_14145, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 357)
        Affine2D_call_result_14149 = invoke(stypy.reporting.localization.Localization(__file__, 357, 35), Affine2D_14146, *[transform_14147], **kwargs_14148)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 357, 29), tuple_14143, Affine2D_call_result_14149)
        
        # Processing the call keyword arguments (line 357)
        kwargs_14150 = {}
        # Getting the type of 'path_ids' (line 357)
        path_ids_14141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 12), 'path_ids', False)
        # Obtaining the member 'append' of a type (line 357)
        append_14142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 357, 12), path_ids_14141, 'append')
        # Calling append(args, kwargs) (line 357)
        append_call_result_14151 = invoke(stypy.reporting.localization.Localization(__file__, 357, 12), append_14142, *[tuple_14143], **kwargs_14150)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to _iter_collection(...): (line 359)
        # Processing the call arguments (line 359)
        # Getting the type of 'gc' (line 360)
        gc_14154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 16), 'gc', False)
        # Getting the type of 'master_transform' (line 360)
        master_transform_14155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 20), 'master_transform', False)
        # Getting the type of 'all_transforms' (line 360)
        all_transforms_14156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 38), 'all_transforms', False)
        # Getting the type of 'path_ids' (line 360)
        path_ids_14157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 54), 'path_ids', False)
        # Getting the type of 'offsets' (line 360)
        offsets_14158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 64), 'offsets', False)
        # Getting the type of 'offsetTrans' (line 361)
        offsetTrans_14159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 16), 'offsetTrans', False)
        # Getting the type of 'facecolors' (line 361)
        facecolors_14160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 29), 'facecolors', False)
        # Getting the type of 'edgecolors' (line 361)
        edgecolors_14161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 41), 'edgecolors', False)
        # Getting the type of 'linewidths' (line 361)
        linewidths_14162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 53), 'linewidths', False)
        # Getting the type of 'linestyles' (line 361)
        linestyles_14163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 65), 'linestyles', False)
        # Getting the type of 'antialiaseds' (line 362)
        antialiaseds_14164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 16), 'antialiaseds', False)
        # Getting the type of 'urls' (line 362)
        urls_14165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 30), 'urls', False)
        # Getting the type of 'offset_position' (line 362)
        offset_position_14166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 36), 'offset_position', False)
        # Processing the call keyword arguments (line 359)
        kwargs_14167 = {}
        # Getting the type of 'self' (line 359)
        self_14152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 45), 'self', False)
        # Obtaining the member '_iter_collection' of a type (line 359)
        _iter_collection_14153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 45), self_14152, '_iter_collection')
        # Calling _iter_collection(args, kwargs) (line 359)
        _iter_collection_call_result_14168 = invoke(stypy.reporting.localization.Localization(__file__, 359, 45), _iter_collection_14153, *[gc_14154, master_transform_14155, all_transforms_14156, path_ids_14157, offsets_14158, offsetTrans_14159, facecolors_14160, edgecolors_14161, linewidths_14162, linestyles_14163, antialiaseds_14164, urls_14165, offset_position_14166], **kwargs_14167)
        
        # Testing the type of a for loop iterable (line 359)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 359, 8), _iter_collection_call_result_14168)
        # Getting the type of the for loop variable (line 359)
        for_loop_var_14169 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 359, 8), _iter_collection_call_result_14168)
        # Assigning a type to the variable 'xo' (line 359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 8), 'xo', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 359, 8), for_loop_var_14169))
        # Assigning a type to the variable 'yo' (line 359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 8), 'yo', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 359, 8), for_loop_var_14169))
        # Assigning a type to the variable 'path_id' (line 359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 8), 'path_id', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 359, 8), for_loop_var_14169))
        # Assigning a type to the variable 'gc0' (line 359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 8), 'gc0', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 359, 8), for_loop_var_14169))
        # Assigning a type to the variable 'rgbFace' (line 359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 8), 'rgbFace', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 359, 8), for_loop_var_14169))
        # SSA begins for a for statement (line 359)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Name to a Tuple (line 363):
        
        # Assigning a Subscript to a Name (line 363):
        
        # Assigning a Subscript to a Name (line 363):
        
        # Obtaining the type of the subscript
        int_14170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 363, 12), 'int')
        # Getting the type of 'path_id' (line 363)
        path_id_14171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 30), 'path_id')
        # Obtaining the member '__getitem__' of a type (line 363)
        getitem___14172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 12), path_id_14171, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 363)
        subscript_call_result_14173 = invoke(stypy.reporting.localization.Localization(__file__, 363, 12), getitem___14172, int_14170)
        
        # Assigning a type to the variable 'tuple_var_assignment_13694' (line 363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 12), 'tuple_var_assignment_13694', subscript_call_result_14173)
        
        # Assigning a Subscript to a Name (line 363):
        
        # Assigning a Subscript to a Name (line 363):
        
        # Obtaining the type of the subscript
        int_14174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 363, 12), 'int')
        # Getting the type of 'path_id' (line 363)
        path_id_14175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 30), 'path_id')
        # Obtaining the member '__getitem__' of a type (line 363)
        getitem___14176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 12), path_id_14175, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 363)
        subscript_call_result_14177 = invoke(stypy.reporting.localization.Localization(__file__, 363, 12), getitem___14176, int_14174)
        
        # Assigning a type to the variable 'tuple_var_assignment_13695' (line 363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 12), 'tuple_var_assignment_13695', subscript_call_result_14177)
        
        # Assigning a Name to a Name (line 363):
        
        # Assigning a Name to a Name (line 363):
        # Getting the type of 'tuple_var_assignment_13694' (line 363)
        tuple_var_assignment_13694_14178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 12), 'tuple_var_assignment_13694')
        # Assigning a type to the variable 'path' (line 363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 12), 'path', tuple_var_assignment_13694_14178)
        
        # Assigning a Name to a Name (line 363):
        
        # Assigning a Name to a Name (line 363):
        # Getting the type of 'tuple_var_assignment_13695' (line 363)
        tuple_var_assignment_13695_14179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 12), 'tuple_var_assignment_13695')
        # Assigning a type to the variable 'transform' (line 363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 18), 'transform', tuple_var_assignment_13695_14179)
        
        # Assigning a Call to a Name (line 364):
        
        # Assigning a Call to a Name (line 364):
        
        # Assigning a Call to a Name (line 364):
        
        # Call to translate(...): (line 364)
        # Processing the call arguments (line 364)
        # Getting the type of 'xo' (line 365)
        xo_14189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 62), 'xo', False)
        # Getting the type of 'yo' (line 365)
        yo_14190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 66), 'yo', False)
        # Processing the call keyword arguments (line 364)
        kwargs_14191 = {}
        
        # Call to Affine2D(...): (line 364)
        # Processing the call arguments (line 364)
        
        # Call to get_matrix(...): (line 365)
        # Processing the call keyword arguments (line 365)
        kwargs_14184 = {}
        # Getting the type of 'transform' (line 365)
        transform_14182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 28), 'transform', False)
        # Obtaining the member 'get_matrix' of a type (line 365)
        get_matrix_14183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 28), transform_14182, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 365)
        get_matrix_call_result_14185 = invoke(stypy.reporting.localization.Localization(__file__, 365, 28), get_matrix_14183, *[], **kwargs_14184)
        
        # Processing the call keyword arguments (line 364)
        kwargs_14186 = {}
        # Getting the type of 'transforms' (line 364)
        transforms_14180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 24), 'transforms', False)
        # Obtaining the member 'Affine2D' of a type (line 364)
        Affine2D_14181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 24), transforms_14180, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 364)
        Affine2D_call_result_14187 = invoke(stypy.reporting.localization.Localization(__file__, 364, 24), Affine2D_14181, *[get_matrix_call_result_14185], **kwargs_14186)
        
        # Obtaining the member 'translate' of a type (line 364)
        translate_14188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 24), Affine2D_call_result_14187, 'translate')
        # Calling translate(args, kwargs) (line 364)
        translate_call_result_14192 = invoke(stypy.reporting.localization.Localization(__file__, 364, 24), translate_14188, *[xo_14189, yo_14190], **kwargs_14191)
        
        # Assigning a type to the variable 'transform' (line 364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 12), 'transform', translate_call_result_14192)
        
        # Call to draw_path(...): (line 366)
        # Processing the call arguments (line 366)
        # Getting the type of 'gc0' (line 366)
        gc0_14195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 27), 'gc0', False)
        # Getting the type of 'path' (line 366)
        path_14196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 32), 'path', False)
        # Getting the type of 'transform' (line 366)
        transform_14197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 38), 'transform', False)
        # Getting the type of 'rgbFace' (line 366)
        rgbFace_14198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 49), 'rgbFace', False)
        # Processing the call keyword arguments (line 366)
        kwargs_14199 = {}
        # Getting the type of 'self' (line 366)
        self_14193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 12), 'self', False)
        # Obtaining the member 'draw_path' of a type (line 366)
        draw_path_14194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 12), self_14193, 'draw_path')
        # Calling draw_path(args, kwargs) (line 366)
        draw_path_call_result_14200 = invoke(stypy.reporting.localization.Localization(__file__, 366, 12), draw_path_14194, *[gc0_14195, path_14196, transform_14197, rgbFace_14198], **kwargs_14199)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'draw_path_collection(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_path_collection' in the type store
        # Getting the type of 'stypy_return_type' (line 329)
        stypy_return_type_14201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14201)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_path_collection'
        return stypy_return_type_14201


    @norecursion
    def draw_quad_mesh(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_quad_mesh'
        module_type_store = module_type_store.open_function_context('draw_quad_mesh', 368, 4, False)
        # Assigning a type to the variable 'self' (line 369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 369, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.draw_quad_mesh.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.draw_quad_mesh.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.draw_quad_mesh.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.draw_quad_mesh.__dict__.__setitem__('stypy_function_name', 'RendererBase.draw_quad_mesh')
        RendererBase.draw_quad_mesh.__dict__.__setitem__('stypy_param_names_list', ['gc', 'master_transform', 'meshWidth', 'meshHeight', 'coordinates', 'offsets', 'offsetTrans', 'facecolors', 'antialiased', 'edgecolors'])
        RendererBase.draw_quad_mesh.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.draw_quad_mesh.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.draw_quad_mesh.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.draw_quad_mesh.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.draw_quad_mesh.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.draw_quad_mesh.__dict__.__setitem__('stypy_declared_arg_number', 11)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.draw_quad_mesh', ['gc', 'master_transform', 'meshWidth', 'meshHeight', 'coordinates', 'offsets', 'offsetTrans', 'facecolors', 'antialiased', 'edgecolors'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_quad_mesh', localization, ['gc', 'master_transform', 'meshWidth', 'meshHeight', 'coordinates', 'offsets', 'offsetTrans', 'facecolors', 'antialiased', 'edgecolors'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_quad_mesh(...)' code ##################

        unicode_14202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, (-1)), 'unicode', u'\n        This provides a fallback implementation of\n        :meth:`draw_quad_mesh` that generates paths and then calls\n        :meth:`draw_path_collection`.\n        ')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 377, 8))
        
        # 'from matplotlib.collections import QuadMesh' statement (line 377)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_14203 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 377, 8), 'matplotlib.collections')

        if (type(import_14203) is not StypyTypeError):

            if (import_14203 != 'pyd_module'):
                __import__(import_14203)
                sys_modules_14204 = sys.modules[import_14203]
                import_from_module(stypy.reporting.localization.Localization(__file__, 377, 8), 'matplotlib.collections', sys_modules_14204.module_type_store, module_type_store, ['QuadMesh'])
                nest_module(stypy.reporting.localization.Localization(__file__, 377, 8), __file__, sys_modules_14204, sys_modules_14204.module_type_store, module_type_store)
            else:
                from matplotlib.collections import QuadMesh

                import_from_module(stypy.reporting.localization.Localization(__file__, 377, 8), 'matplotlib.collections', None, module_type_store, ['QuadMesh'], [QuadMesh])

        else:
            # Assigning a type to the variable 'matplotlib.collections' (line 377)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'matplotlib.collections', import_14203)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Assigning a Call to a Name (line 378):
        
        # Assigning a Call to a Name (line 378):
        
        # Assigning a Call to a Name (line 378):
        
        # Call to convert_mesh_to_paths(...): (line 378)
        # Processing the call arguments (line 378)
        # Getting the type of 'meshWidth' (line 379)
        meshWidth_14207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 12), 'meshWidth', False)
        # Getting the type of 'meshHeight' (line 379)
        meshHeight_14208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 23), 'meshHeight', False)
        # Getting the type of 'coordinates' (line 379)
        coordinates_14209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 35), 'coordinates', False)
        # Processing the call keyword arguments (line 378)
        kwargs_14210 = {}
        # Getting the type of 'QuadMesh' (line 378)
        QuadMesh_14205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 16), 'QuadMesh', False)
        # Obtaining the member 'convert_mesh_to_paths' of a type (line 378)
        convert_mesh_to_paths_14206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 16), QuadMesh_14205, 'convert_mesh_to_paths')
        # Calling convert_mesh_to_paths(args, kwargs) (line 378)
        convert_mesh_to_paths_call_result_14211 = invoke(stypy.reporting.localization.Localization(__file__, 378, 16), convert_mesh_to_paths_14206, *[meshWidth_14207, meshHeight_14208, coordinates_14209], **kwargs_14210)
        
        # Assigning a type to the variable 'paths' (line 378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 8), 'paths', convert_mesh_to_paths_call_result_14211)
        
        # Type idiom detected: calculating its left and rigth part (line 381)
        # Getting the type of 'edgecolors' (line 381)
        edgecolors_14212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 11), 'edgecolors')
        # Getting the type of 'None' (line 381)
        None_14213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 25), 'None')
        
        (may_be_14214, more_types_in_union_14215) = may_be_none(edgecolors_14212, None_14213)

        if may_be_14214:

            if more_types_in_union_14215:
                # Runtime conditional SSA (line 381)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 382):
            
            # Assigning a Name to a Name (line 382):
            
            # Assigning a Name to a Name (line 382):
            # Getting the type of 'facecolors' (line 382)
            facecolors_14216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 25), 'facecolors')
            # Assigning a type to the variable 'edgecolors' (line 382)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 12), 'edgecolors', facecolors_14216)

            if more_types_in_union_14215:
                # SSA join for if statement (line 381)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 383):
        
        # Assigning a Call to a Name (line 383):
        
        # Assigning a Call to a Name (line 383):
        
        # Call to array(...): (line 383)
        # Processing the call arguments (line 383)
        
        # Obtaining an instance of the builtin type 'list' (line 383)
        list_14219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 383, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 383)
        # Adding element type (line 383)
        
        # Call to get_linewidth(...): (line 383)
        # Processing the call keyword arguments (line 383)
        kwargs_14222 = {}
        # Getting the type of 'gc' (line 383)
        gc_14220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 31), 'gc', False)
        # Obtaining the member 'get_linewidth' of a type (line 383)
        get_linewidth_14221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 31), gc_14220, 'get_linewidth')
        # Calling get_linewidth(args, kwargs) (line 383)
        get_linewidth_call_result_14223 = invoke(stypy.reporting.localization.Localization(__file__, 383, 31), get_linewidth_14221, *[], **kwargs_14222)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 383, 30), list_14219, get_linewidth_call_result_14223)
        
        # Getting the type of 'float' (line 383)
        float_14224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 52), 'float', False)
        # Processing the call keyword arguments (line 383)
        kwargs_14225 = {}
        # Getting the type of 'np' (line 383)
        np_14217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 21), 'np', False)
        # Obtaining the member 'array' of a type (line 383)
        array_14218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 21), np_14217, 'array')
        # Calling array(args, kwargs) (line 383)
        array_call_result_14226 = invoke(stypy.reporting.localization.Localization(__file__, 383, 21), array_14218, *[list_14219, float_14224], **kwargs_14225)
        
        # Assigning a type to the variable 'linewidths' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 8), 'linewidths', array_call_result_14226)
        
        # Call to draw_path_collection(...): (line 385)
        # Processing the call arguments (line 385)
        # Getting the type of 'gc' (line 386)
        gc_14229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'gc', False)
        # Getting the type of 'master_transform' (line 386)
        master_transform_14230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 16), 'master_transform', False)
        # Getting the type of 'paths' (line 386)
        paths_14231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 34), 'paths', False)
        
        # Obtaining an instance of the builtin type 'list' (line 386)
        list_14232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 41), 'list')
        # Adding type elements to the builtin type 'list' instance (line 386)
        
        # Getting the type of 'offsets' (line 386)
        offsets_14233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 45), 'offsets', False)
        # Getting the type of 'offsetTrans' (line 386)
        offsetTrans_14234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 54), 'offsetTrans', False)
        # Getting the type of 'facecolors' (line 386)
        facecolors_14235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 67), 'facecolors', False)
        # Getting the type of 'edgecolors' (line 387)
        edgecolors_14236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 12), 'edgecolors', False)
        # Getting the type of 'linewidths' (line 387)
        linewidths_14237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 24), 'linewidths', False)
        
        # Obtaining an instance of the builtin type 'list' (line 387)
        list_14238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 387)
        
        
        # Obtaining an instance of the builtin type 'list' (line 387)
        list_14239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 40), 'list')
        # Adding type elements to the builtin type 'list' instance (line 387)
        # Adding element type (line 387)
        # Getting the type of 'antialiased' (line 387)
        antialiased_14240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 41), 'antialiased', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 387, 40), list_14239, antialiased_14240)
        
        
        # Obtaining an instance of the builtin type 'list' (line 387)
        list_14241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 55), 'list')
        # Adding type elements to the builtin type 'list' instance (line 387)
        # Adding element type (line 387)
        # Getting the type of 'None' (line 387)
        None_14242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 56), 'None', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 387, 55), list_14241, None_14242)
        
        unicode_14243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 63), 'unicode', u'screen')
        # Processing the call keyword arguments (line 385)
        kwargs_14244 = {}
        # Getting the type of 'self' (line 385)
        self_14227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 15), 'self', False)
        # Obtaining the member 'draw_path_collection' of a type (line 385)
        draw_path_collection_14228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 15), self_14227, 'draw_path_collection')
        # Calling draw_path_collection(args, kwargs) (line 385)
        draw_path_collection_call_result_14245 = invoke(stypy.reporting.localization.Localization(__file__, 385, 15), draw_path_collection_14228, *[gc_14229, master_transform_14230, paths_14231, list_14232, offsets_14233, offsetTrans_14234, facecolors_14235, edgecolors_14236, linewidths_14237, list_14238, list_14239, list_14241, unicode_14243], **kwargs_14244)
        
        # Assigning a type to the variable 'stypy_return_type' (line 385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 8), 'stypy_return_type', draw_path_collection_call_result_14245)
        
        # ################# End of 'draw_quad_mesh(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_quad_mesh' in the type store
        # Getting the type of 'stypy_return_type' (line 368)
        stypy_return_type_14246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14246)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_quad_mesh'
        return stypy_return_type_14246


    @norecursion
    def draw_gouraud_triangle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_gouraud_triangle'
        module_type_store = module_type_store.open_function_context('draw_gouraud_triangle', 389, 4, False)
        # Assigning a type to the variable 'self' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.draw_gouraud_triangle.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.draw_gouraud_triangle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.draw_gouraud_triangle.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.draw_gouraud_triangle.__dict__.__setitem__('stypy_function_name', 'RendererBase.draw_gouraud_triangle')
        RendererBase.draw_gouraud_triangle.__dict__.__setitem__('stypy_param_names_list', ['gc', 'points', 'colors', 'transform'])
        RendererBase.draw_gouraud_triangle.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.draw_gouraud_triangle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.draw_gouraud_triangle.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.draw_gouraud_triangle.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.draw_gouraud_triangle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.draw_gouraud_triangle.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.draw_gouraud_triangle', ['gc', 'points', 'colors', 'transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_gouraud_triangle', localization, ['gc', 'points', 'colors', 'transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_gouraud_triangle(...)' code ##################

        unicode_14247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, (-1)), 'unicode', u'\n        Draw a Gouraud-shaded triangle.\n\n        Parameters\n        ----------\n        points : array_like, shape=(3, 2)\n            Array of (x, y) points for the triangle.\n\n        colors : array_like, shape=(3, 4)\n            RGBA colors for each point of the triangle.\n\n        transform : `matplotlib.transforms.Transform`\n            An affine transform to apply to the points.\n\n        ')
        # Getting the type of 'NotImplementedError' (line 405)
        NotImplementedError_14248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 14), 'NotImplementedError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 405, 8), NotImplementedError_14248, 'raise parameter', BaseException)
        
        # ################# End of 'draw_gouraud_triangle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_gouraud_triangle' in the type store
        # Getting the type of 'stypy_return_type' (line 389)
        stypy_return_type_14249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14249)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_gouraud_triangle'
        return stypy_return_type_14249


    @norecursion
    def draw_gouraud_triangles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_gouraud_triangles'
        module_type_store = module_type_store.open_function_context('draw_gouraud_triangles', 407, 4, False)
        # Assigning a type to the variable 'self' (line 408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.draw_gouraud_triangles.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.draw_gouraud_triangles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.draw_gouraud_triangles.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.draw_gouraud_triangles.__dict__.__setitem__('stypy_function_name', 'RendererBase.draw_gouraud_triangles')
        RendererBase.draw_gouraud_triangles.__dict__.__setitem__('stypy_param_names_list', ['gc', 'triangles_array', 'colors_array', 'transform'])
        RendererBase.draw_gouraud_triangles.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.draw_gouraud_triangles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.draw_gouraud_triangles.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.draw_gouraud_triangles.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.draw_gouraud_triangles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.draw_gouraud_triangles.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.draw_gouraud_triangles', ['gc', 'triangles_array', 'colors_array', 'transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_gouraud_triangles', localization, ['gc', 'triangles_array', 'colors_array', 'transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_gouraud_triangles(...)' code ##################

        unicode_14250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 422, (-1)), 'unicode', u'\n        Draws a series of Gouraud triangles.\n\n        Parameters\n        ----------\n        points : array_like, shape=(N, 3, 2)\n            Array of *N* (x, y) points for the triangles.\n\n        colors : array_like, shape=(N, 3, 4)\n            Array of *N* RGBA colors for each point of the triangles.\n\n        transform : `matplotlib.transforms.Transform`\n            An affine transform to apply to the points.\n        ')
        
        # Assigning a Call to a Name (line 423):
        
        # Assigning a Call to a Name (line 423):
        
        # Assigning a Call to a Name (line 423):
        
        # Call to frozen(...): (line 423)
        # Processing the call keyword arguments (line 423)
        kwargs_14253 = {}
        # Getting the type of 'transform' (line 423)
        transform_14251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 20), 'transform', False)
        # Obtaining the member 'frozen' of a type (line 423)
        frozen_14252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 20), transform_14251, 'frozen')
        # Calling frozen(args, kwargs) (line 423)
        frozen_call_result_14254 = invoke(stypy.reporting.localization.Localization(__file__, 423, 20), frozen_14252, *[], **kwargs_14253)
        
        # Assigning a type to the variable 'transform' (line 423)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 8), 'transform', frozen_call_result_14254)
        
        
        # Call to zip(...): (line 424)
        # Processing the call arguments (line 424)
        # Getting the type of 'triangles_array' (line 424)
        triangles_array_14256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 28), 'triangles_array', False)
        # Getting the type of 'colors_array' (line 424)
        colors_array_14257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 45), 'colors_array', False)
        # Processing the call keyword arguments (line 424)
        kwargs_14258 = {}
        # Getting the type of 'zip' (line 424)
        zip_14255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 24), 'zip', False)
        # Calling zip(args, kwargs) (line 424)
        zip_call_result_14259 = invoke(stypy.reporting.localization.Localization(__file__, 424, 24), zip_14255, *[triangles_array_14256, colors_array_14257], **kwargs_14258)
        
        # Testing the type of a for loop iterable (line 424)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 424, 8), zip_call_result_14259)
        # Getting the type of the for loop variable (line 424)
        for_loop_var_14260 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 424, 8), zip_call_result_14259)
        # Assigning a type to the variable 'tri' (line 424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 424, 8), 'tri', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 424, 8), for_loop_var_14260))
        # Assigning a type to the variable 'col' (line 424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 424, 8), 'col', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 424, 8), for_loop_var_14260))
        # SSA begins for a for statement (line 424)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to draw_gouraud_triangle(...): (line 425)
        # Processing the call arguments (line 425)
        # Getting the type of 'gc' (line 425)
        gc_14263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 39), 'gc', False)
        # Getting the type of 'tri' (line 425)
        tri_14264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 43), 'tri', False)
        # Getting the type of 'col' (line 425)
        col_14265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 48), 'col', False)
        # Getting the type of 'transform' (line 425)
        transform_14266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 53), 'transform', False)
        # Processing the call keyword arguments (line 425)
        kwargs_14267 = {}
        # Getting the type of 'self' (line 425)
        self_14261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 12), 'self', False)
        # Obtaining the member 'draw_gouraud_triangle' of a type (line 425)
        draw_gouraud_triangle_14262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 12), self_14261, 'draw_gouraud_triangle')
        # Calling draw_gouraud_triangle(args, kwargs) (line 425)
        draw_gouraud_triangle_call_result_14268 = invoke(stypy.reporting.localization.Localization(__file__, 425, 12), draw_gouraud_triangle_14262, *[gc_14263, tri_14264, col_14265, transform_14266], **kwargs_14267)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'draw_gouraud_triangles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_gouraud_triangles' in the type store
        # Getting the type of 'stypy_return_type' (line 407)
        stypy_return_type_14269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14269)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_gouraud_triangles'
        return stypy_return_type_14269


    @norecursion
    def _iter_collection_raw_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_iter_collection_raw_paths'
        module_type_store = module_type_store.open_function_context('_iter_collection_raw_paths', 427, 4, False)
        # Assigning a type to the variable 'self' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase._iter_collection_raw_paths.__dict__.__setitem__('stypy_localization', localization)
        RendererBase._iter_collection_raw_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase._iter_collection_raw_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase._iter_collection_raw_paths.__dict__.__setitem__('stypy_function_name', 'RendererBase._iter_collection_raw_paths')
        RendererBase._iter_collection_raw_paths.__dict__.__setitem__('stypy_param_names_list', ['master_transform', 'paths', 'all_transforms'])
        RendererBase._iter_collection_raw_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase._iter_collection_raw_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase._iter_collection_raw_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase._iter_collection_raw_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase._iter_collection_raw_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase._iter_collection_raw_paths.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase._iter_collection_raw_paths', ['master_transform', 'paths', 'all_transforms'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_iter_collection_raw_paths', localization, ['master_transform', 'paths', 'all_transforms'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_iter_collection_raw_paths(...)' code ##################

        unicode_14270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 443, (-1)), 'unicode', u'\n        This is a helper method (along with :meth:`_iter_collection`) to make\n        it easier to write a space-efficient :meth:`draw_path_collection`\n        implementation in a backend.\n\n        This method yields all of the base path/transform\n        combinations, given a master transform, a list of paths and\n        list of transforms.\n\n        The arguments should be exactly what is passed in to\n        :meth:`draw_path_collection`.\n\n        The backend should take each yielded path and transform and\n        create an object that can be referenced (reused) later.\n        ')
        
        # Assigning a Call to a Name (line 444):
        
        # Assigning a Call to a Name (line 444):
        
        # Assigning a Call to a Name (line 444):
        
        # Call to len(...): (line 444)
        # Processing the call arguments (line 444)
        # Getting the type of 'paths' (line 444)
        paths_14272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 21), 'paths', False)
        # Processing the call keyword arguments (line 444)
        kwargs_14273 = {}
        # Getting the type of 'len' (line 444)
        len_14271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 17), 'len', False)
        # Calling len(args, kwargs) (line 444)
        len_call_result_14274 = invoke(stypy.reporting.localization.Localization(__file__, 444, 17), len_14271, *[paths_14272], **kwargs_14273)
        
        # Assigning a type to the variable 'Npaths' (line 444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'Npaths', len_call_result_14274)
        
        # Assigning a Call to a Name (line 445):
        
        # Assigning a Call to a Name (line 445):
        
        # Assigning a Call to a Name (line 445):
        
        # Call to len(...): (line 445)
        # Processing the call arguments (line 445)
        # Getting the type of 'all_transforms' (line 445)
        all_transforms_14276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 26), 'all_transforms', False)
        # Processing the call keyword arguments (line 445)
        kwargs_14277 = {}
        # Getting the type of 'len' (line 445)
        len_14275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 22), 'len', False)
        # Calling len(args, kwargs) (line 445)
        len_call_result_14278 = invoke(stypy.reporting.localization.Localization(__file__, 445, 22), len_14275, *[all_transforms_14276], **kwargs_14277)
        
        # Assigning a type to the variable 'Ntransforms' (line 445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 8), 'Ntransforms', len_call_result_14278)
        
        # Assigning a Call to a Name (line 446):
        
        # Assigning a Call to a Name (line 446):
        
        # Assigning a Call to a Name (line 446):
        
        # Call to max(...): (line 446)
        # Processing the call arguments (line 446)
        # Getting the type of 'Npaths' (line 446)
        Npaths_14280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 16), 'Npaths', False)
        # Getting the type of 'Ntransforms' (line 446)
        Ntransforms_14281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 24), 'Ntransforms', False)
        # Processing the call keyword arguments (line 446)
        kwargs_14282 = {}
        # Getting the type of 'max' (line 446)
        max_14279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 12), 'max', False)
        # Calling max(args, kwargs) (line 446)
        max_call_result_14283 = invoke(stypy.reporting.localization.Localization(__file__, 446, 12), max_14279, *[Npaths_14280, Ntransforms_14281], **kwargs_14282)
        
        # Assigning a type to the variable 'N' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 8), 'N', max_call_result_14283)
        
        
        # Getting the type of 'Npaths' (line 448)
        Npaths_14284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 11), 'Npaths')
        int_14285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 21), 'int')
        # Applying the binary operator '==' (line 448)
        result_eq_14286 = python_operator(stypy.reporting.localization.Localization(__file__, 448, 11), '==', Npaths_14284, int_14285)
        
        # Testing the type of an if condition (line 448)
        if_condition_14287 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 448, 8), result_eq_14286)
        # Assigning a type to the variable 'if_condition_14287' (line 448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 8), 'if_condition_14287', if_condition_14287)
        # SSA begins for if statement (line 448)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 449, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 448)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 451):
        
        # Assigning a Call to a Name (line 451):
        
        # Assigning a Call to a Name (line 451):
        
        # Call to IdentityTransform(...): (line 451)
        # Processing the call keyword arguments (line 451)
        kwargs_14290 = {}
        # Getting the type of 'transforms' (line 451)
        transforms_14288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 20), 'transforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 451)
        IdentityTransform_14289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 451, 20), transforms_14288, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 451)
        IdentityTransform_call_result_14291 = invoke(stypy.reporting.localization.Localization(__file__, 451, 20), IdentityTransform_14289, *[], **kwargs_14290)
        
        # Assigning a type to the variable 'transform' (line 451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 8), 'transform', IdentityTransform_call_result_14291)
        
        
        # Call to xrange(...): (line 452)
        # Processing the call arguments (line 452)
        # Getting the type of 'N' (line 452)
        N_14293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 24), 'N', False)
        # Processing the call keyword arguments (line 452)
        kwargs_14294 = {}
        # Getting the type of 'xrange' (line 452)
        xrange_14292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 17), 'xrange', False)
        # Calling xrange(args, kwargs) (line 452)
        xrange_call_result_14295 = invoke(stypy.reporting.localization.Localization(__file__, 452, 17), xrange_14292, *[N_14293], **kwargs_14294)
        
        # Testing the type of a for loop iterable (line 452)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 452, 8), xrange_call_result_14295)
        # Getting the type of the for loop variable (line 452)
        for_loop_var_14296 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 452, 8), xrange_call_result_14295)
        # Assigning a type to the variable 'i' (line 452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 8), 'i', for_loop_var_14296)
        # SSA begins for a for statement (line 452)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 453):
        
        # Assigning a Subscript to a Name (line 453):
        
        # Assigning a Subscript to a Name (line 453):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 453)
        i_14297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 25), 'i')
        # Getting the type of 'Npaths' (line 453)
        Npaths_14298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 29), 'Npaths')
        # Applying the binary operator '%' (line 453)
        result_mod_14299 = python_operator(stypy.reporting.localization.Localization(__file__, 453, 25), '%', i_14297, Npaths_14298)
        
        # Getting the type of 'paths' (line 453)
        paths_14300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 19), 'paths')
        # Obtaining the member '__getitem__' of a type (line 453)
        getitem___14301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 19), paths_14300, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 453)
        subscript_call_result_14302 = invoke(stypy.reporting.localization.Localization(__file__, 453, 19), getitem___14301, result_mod_14299)
        
        # Assigning a type to the variable 'path' (line 453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 12), 'path', subscript_call_result_14302)
        
        # Getting the type of 'Ntransforms' (line 454)
        Ntransforms_14303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 15), 'Ntransforms')
        # Testing the type of an if condition (line 454)
        if_condition_14304 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 454, 12), Ntransforms_14303)
        # Assigning a type to the variable 'if_condition_14304' (line 454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 454, 12), 'if_condition_14304', if_condition_14304)
        # SSA begins for if statement (line 454)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 455):
        
        # Assigning a Call to a Name (line 455):
        
        # Assigning a Call to a Name (line 455):
        
        # Call to Affine2D(...): (line 455)
        # Processing the call arguments (line 455)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 455)
        i_14306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 52), 'i', False)
        # Getting the type of 'Ntransforms' (line 455)
        Ntransforms_14307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 56), 'Ntransforms', False)
        # Applying the binary operator '%' (line 455)
        result_mod_14308 = python_operator(stypy.reporting.localization.Localization(__file__, 455, 52), '%', i_14306, Ntransforms_14307)
        
        # Getting the type of 'all_transforms' (line 455)
        all_transforms_14309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 37), 'all_transforms', False)
        # Obtaining the member '__getitem__' of a type (line 455)
        getitem___14310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 37), all_transforms_14309, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 455)
        subscript_call_result_14311 = invoke(stypy.reporting.localization.Localization(__file__, 455, 37), getitem___14310, result_mod_14308)
        
        # Processing the call keyword arguments (line 455)
        kwargs_14312 = {}
        # Getting the type of 'Affine2D' (line 455)
        Affine2D_14305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 28), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 455)
        Affine2D_call_result_14313 = invoke(stypy.reporting.localization.Localization(__file__, 455, 28), Affine2D_14305, *[subscript_call_result_14311], **kwargs_14312)
        
        # Assigning a type to the variable 'transform' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 16), 'transform', Affine2D_call_result_14313)
        # SSA join for if statement (line 454)
        module_type_store = module_type_store.join_ssa_context()
        
        # Creating a generator
        
        # Obtaining an instance of the builtin type 'tuple' (line 456)
        tuple_14314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 456, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 456)
        # Adding element type (line 456)
        # Getting the type of 'path' (line 456)
        path_14315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 18), 'path')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 456, 18), tuple_14314, path_14315)
        # Adding element type (line 456)
        # Getting the type of 'transform' (line 456)
        transform_14316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 24), 'transform')
        # Getting the type of 'master_transform' (line 456)
        master_transform_14317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 36), 'master_transform')
        # Applying the binary operator '+' (line 456)
        result_add_14318 = python_operator(stypy.reporting.localization.Localization(__file__, 456, 24), '+', transform_14316, master_transform_14317)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 456, 18), tuple_14314, result_add_14318)
        
        GeneratorType_14319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 456, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 456, 12), GeneratorType_14319, tuple_14314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 12), 'stypy_return_type', GeneratorType_14319)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_iter_collection_raw_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_iter_collection_raw_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 427)
        stypy_return_type_14320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14320)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_iter_collection_raw_paths'
        return stypy_return_type_14320


    @norecursion
    def _iter_collection_uses_per_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_iter_collection_uses_per_path'
        module_type_store = module_type_store.open_function_context('_iter_collection_uses_per_path', 458, 4, False)
        # Assigning a type to the variable 'self' (line 459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 459, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase._iter_collection_uses_per_path.__dict__.__setitem__('stypy_localization', localization)
        RendererBase._iter_collection_uses_per_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase._iter_collection_uses_per_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase._iter_collection_uses_per_path.__dict__.__setitem__('stypy_function_name', 'RendererBase._iter_collection_uses_per_path')
        RendererBase._iter_collection_uses_per_path.__dict__.__setitem__('stypy_param_names_list', ['paths', 'all_transforms', 'offsets', 'facecolors', 'edgecolors'])
        RendererBase._iter_collection_uses_per_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase._iter_collection_uses_per_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase._iter_collection_uses_per_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase._iter_collection_uses_per_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase._iter_collection_uses_per_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase._iter_collection_uses_per_path.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase._iter_collection_uses_per_path', ['paths', 'all_transforms', 'offsets', 'facecolors', 'edgecolors'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_iter_collection_uses_per_path', localization, ['paths', 'all_transforms', 'offsets', 'facecolors', 'edgecolors'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_iter_collection_uses_per_path(...)' code ##################

        unicode_14321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, (-1)), 'unicode', u'\n        Compute how many times each raw path object returned by\n        _iter_collection_raw_paths would be used when calling\n        _iter_collection. This is intended for the backend to decide\n        on the tradeoff between using the paths in-line and storing\n        them once and reusing. Rounds up in case the number of uses\n        is not the same for every path.\n        ')
        
        # Assigning a Call to a Name (line 468):
        
        # Assigning a Call to a Name (line 468):
        
        # Assigning a Call to a Name (line 468):
        
        # Call to len(...): (line 468)
        # Processing the call arguments (line 468)
        # Getting the type of 'paths' (line 468)
        paths_14323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 21), 'paths', False)
        # Processing the call keyword arguments (line 468)
        kwargs_14324 = {}
        # Getting the type of 'len' (line 468)
        len_14322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 17), 'len', False)
        # Calling len(args, kwargs) (line 468)
        len_call_result_14325 = invoke(stypy.reporting.localization.Localization(__file__, 468, 17), len_14322, *[paths_14323], **kwargs_14324)
        
        # Assigning a type to the variable 'Npaths' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 8), 'Npaths', len_call_result_14325)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'Npaths' (line 469)
        Npaths_14326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 11), 'Npaths')
        int_14327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 21), 'int')
        # Applying the binary operator '==' (line 469)
        result_eq_14328 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 11), '==', Npaths_14326, int_14327)
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 469)
        # Processing the call arguments (line 469)
        # Getting the type of 'facecolors' (line 469)
        facecolors_14330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 31), 'facecolors', False)
        # Processing the call keyword arguments (line 469)
        kwargs_14331 = {}
        # Getting the type of 'len' (line 469)
        len_14329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 27), 'len', False)
        # Calling len(args, kwargs) (line 469)
        len_call_result_14332 = invoke(stypy.reporting.localization.Localization(__file__, 469, 27), len_14329, *[facecolors_14330], **kwargs_14331)
        
        int_14333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 46), 'int')
        # Applying the binary operator '==' (line 469)
        result_eq_14334 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 27), '==', len_call_result_14332, int_14333)
        
        
        
        # Call to len(...): (line 469)
        # Processing the call arguments (line 469)
        # Getting the type of 'edgecolors' (line 469)
        edgecolors_14336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 56), 'edgecolors', False)
        # Processing the call keyword arguments (line 469)
        kwargs_14337 = {}
        # Getting the type of 'len' (line 469)
        len_14335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 52), 'len', False)
        # Calling len(args, kwargs) (line 469)
        len_call_result_14338 = invoke(stypy.reporting.localization.Localization(__file__, 469, 52), len_14335, *[edgecolors_14336], **kwargs_14337)
        
        int_14339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 71), 'int')
        # Applying the binary operator '==' (line 469)
        result_eq_14340 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 52), '==', len_call_result_14338, int_14339)
        
        # Applying the binary operator 'and' (line 469)
        result_and_keyword_14341 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 27), 'and', result_eq_14334, result_eq_14340)
        
        # Applying the binary operator 'or' (line 469)
        result_or_keyword_14342 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 11), 'or', result_eq_14328, result_and_keyword_14341)
        
        # Testing the type of an if condition (line 469)
        if_condition_14343 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 469, 8), result_or_keyword_14342)
        # Assigning a type to the variable 'if_condition_14343' (line 469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'if_condition_14343', if_condition_14343)
        # SSA begins for if statement (line 469)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        int_14344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 19), 'int')
        # Assigning a type to the variable 'stypy_return_type' (line 470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 12), 'stypy_return_type', int_14344)
        # SSA join for if statement (line 469)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 471):
        
        # Assigning a Call to a Name (line 471):
        
        # Assigning a Call to a Name (line 471):
        
        # Call to max(...): (line 471)
        # Processing the call arguments (line 471)
        # Getting the type of 'Npaths' (line 471)
        Npaths_14346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 24), 'Npaths', False)
        
        # Call to len(...): (line 471)
        # Processing the call arguments (line 471)
        # Getting the type of 'all_transforms' (line 471)
        all_transforms_14348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 36), 'all_transforms', False)
        # Processing the call keyword arguments (line 471)
        kwargs_14349 = {}
        # Getting the type of 'len' (line 471)
        len_14347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 32), 'len', False)
        # Calling len(args, kwargs) (line 471)
        len_call_result_14350 = invoke(stypy.reporting.localization.Localization(__file__, 471, 32), len_14347, *[all_transforms_14348], **kwargs_14349)
        
        # Processing the call keyword arguments (line 471)
        kwargs_14351 = {}
        # Getting the type of 'max' (line 471)
        max_14345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 20), 'max', False)
        # Calling max(args, kwargs) (line 471)
        max_call_result_14352 = invoke(stypy.reporting.localization.Localization(__file__, 471, 20), max_14345, *[Npaths_14346, len_call_result_14350], **kwargs_14351)
        
        # Assigning a type to the variable 'Npath_ids' (line 471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 8), 'Npath_ids', max_call_result_14352)
        
        # Assigning a Call to a Name (line 472):
        
        # Assigning a Call to a Name (line 472):
        
        # Assigning a Call to a Name (line 472):
        
        # Call to max(...): (line 472)
        # Processing the call arguments (line 472)
        # Getting the type of 'Npath_ids' (line 472)
        Npath_ids_14354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 16), 'Npath_ids', False)
        
        # Call to len(...): (line 472)
        # Processing the call arguments (line 472)
        # Getting the type of 'offsets' (line 472)
        offsets_14356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 31), 'offsets', False)
        # Processing the call keyword arguments (line 472)
        kwargs_14357 = {}
        # Getting the type of 'len' (line 472)
        len_14355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 27), 'len', False)
        # Calling len(args, kwargs) (line 472)
        len_call_result_14358 = invoke(stypy.reporting.localization.Localization(__file__, 472, 27), len_14355, *[offsets_14356], **kwargs_14357)
        
        # Processing the call keyword arguments (line 472)
        kwargs_14359 = {}
        # Getting the type of 'max' (line 472)
        max_14353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 12), 'max', False)
        # Calling max(args, kwargs) (line 472)
        max_call_result_14360 = invoke(stypy.reporting.localization.Localization(__file__, 472, 12), max_14353, *[Npath_ids_14354, len_call_result_14358], **kwargs_14359)
        
        # Assigning a type to the variable 'N' (line 472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 8), 'N', max_call_result_14360)
        # Getting the type of 'N' (line 473)
        N_14361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 16), 'N')
        # Getting the type of 'Npath_ids' (line 473)
        Npath_ids_14362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 20), 'Npath_ids')
        # Applying the binary operator '+' (line 473)
        result_add_14363 = python_operator(stypy.reporting.localization.Localization(__file__, 473, 16), '+', N_14361, Npath_ids_14362)
        
        int_14364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 32), 'int')
        # Applying the binary operator '-' (line 473)
        result_sub_14365 = python_operator(stypy.reporting.localization.Localization(__file__, 473, 30), '-', result_add_14363, int_14364)
        
        # Getting the type of 'Npath_ids' (line 473)
        Npath_ids_14366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 38), 'Npath_ids')
        # Applying the binary operator '//' (line 473)
        result_floordiv_14367 = python_operator(stypy.reporting.localization.Localization(__file__, 473, 15), '//', result_sub_14365, Npath_ids_14366)
        
        # Assigning a type to the variable 'stypy_return_type' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'stypy_return_type', result_floordiv_14367)
        
        # ################# End of '_iter_collection_uses_per_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_iter_collection_uses_per_path' in the type store
        # Getting the type of 'stypy_return_type' (line 458)
        stypy_return_type_14368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14368)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_iter_collection_uses_per_path'
        return stypy_return_type_14368


    @norecursion
    def _iter_collection(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_iter_collection'
        module_type_store = module_type_store.open_function_context('_iter_collection', 475, 4, False)
        # Assigning a type to the variable 'self' (line 476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase._iter_collection.__dict__.__setitem__('stypy_localization', localization)
        RendererBase._iter_collection.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase._iter_collection.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase._iter_collection.__dict__.__setitem__('stypy_function_name', 'RendererBase._iter_collection')
        RendererBase._iter_collection.__dict__.__setitem__('stypy_param_names_list', ['gc', 'master_transform', 'all_transforms', 'path_ids', 'offsets', 'offsetTrans', 'facecolors', 'edgecolors', 'linewidths', 'linestyles', 'antialiaseds', 'urls', 'offset_position'])
        RendererBase._iter_collection.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase._iter_collection.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase._iter_collection.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase._iter_collection.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase._iter_collection.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase._iter_collection.__dict__.__setitem__('stypy_declared_arg_number', 14)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase._iter_collection', ['gc', 'master_transform', 'all_transforms', 'path_ids', 'offsets', 'offsetTrans', 'facecolors', 'edgecolors', 'linewidths', 'linestyles', 'antialiaseds', 'urls', 'offset_position'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_iter_collection', localization, ['gc', 'master_transform', 'all_transforms', 'path_ids', 'offsets', 'offsetTrans', 'facecolors', 'edgecolors', 'linewidths', 'linestyles', 'antialiaseds', 'urls', 'offset_position'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_iter_collection(...)' code ##################

        unicode_14369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, (-1)), 'unicode', u'\n        This is a helper method (along with\n        :meth:`_iter_collection_raw_paths`) to make it easier to write\n        a space-efficient :meth:`draw_path_collection` implementation in a\n        backend.\n\n        This method yields all of the path, offset and graphics\n        context combinations to draw the path collection.  The caller\n        should already have looped over the results of\n        :meth:`_iter_collection_raw_paths` to draw this collection.\n\n        The arguments should be the same as that passed into\n        :meth:`draw_path_collection`, with the exception of\n        *path_ids*, which is a list of arbitrary objects that the\n        backend will use to reference one of the paths created in the\n        :meth:`_iter_collection_raw_paths` stage.\n\n        Each yielded result is of the form::\n\n           xo, yo, path_id, gc, rgbFace\n\n        where *xo*, *yo* is an offset; *path_id* is one of the elements of\n        *path_ids*; *gc* is a graphics context and *rgbFace* is a color to\n        use for filling the path.\n        ')
        
        # Assigning a Call to a Name (line 504):
        
        # Assigning a Call to a Name (line 504):
        
        # Assigning a Call to a Name (line 504):
        
        # Call to len(...): (line 504)
        # Processing the call arguments (line 504)
        # Getting the type of 'all_transforms' (line 504)
        all_transforms_14371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 26), 'all_transforms', False)
        # Processing the call keyword arguments (line 504)
        kwargs_14372 = {}
        # Getting the type of 'len' (line 504)
        len_14370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 22), 'len', False)
        # Calling len(args, kwargs) (line 504)
        len_call_result_14373 = invoke(stypy.reporting.localization.Localization(__file__, 504, 22), len_14370, *[all_transforms_14371], **kwargs_14372)
        
        # Assigning a type to the variable 'Ntransforms' (line 504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 504, 8), 'Ntransforms', len_call_result_14373)
        
        # Assigning a Call to a Name (line 505):
        
        # Assigning a Call to a Name (line 505):
        
        # Assigning a Call to a Name (line 505):
        
        # Call to len(...): (line 505)
        # Processing the call arguments (line 505)
        # Getting the type of 'path_ids' (line 505)
        path_ids_14375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 21), 'path_ids', False)
        # Processing the call keyword arguments (line 505)
        kwargs_14376 = {}
        # Getting the type of 'len' (line 505)
        len_14374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 17), 'len', False)
        # Calling len(args, kwargs) (line 505)
        len_call_result_14377 = invoke(stypy.reporting.localization.Localization(__file__, 505, 17), len_14374, *[path_ids_14375], **kwargs_14376)
        
        # Assigning a type to the variable 'Npaths' (line 505)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 505, 8), 'Npaths', len_call_result_14377)
        
        # Assigning a Call to a Name (line 506):
        
        # Assigning a Call to a Name (line 506):
        
        # Assigning a Call to a Name (line 506):
        
        # Call to len(...): (line 506)
        # Processing the call arguments (line 506)
        # Getting the type of 'offsets' (line 506)
        offsets_14379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 23), 'offsets', False)
        # Processing the call keyword arguments (line 506)
        kwargs_14380 = {}
        # Getting the type of 'len' (line 506)
        len_14378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 19), 'len', False)
        # Calling len(args, kwargs) (line 506)
        len_call_result_14381 = invoke(stypy.reporting.localization.Localization(__file__, 506, 19), len_14378, *[offsets_14379], **kwargs_14380)
        
        # Assigning a type to the variable 'Noffsets' (line 506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 506, 8), 'Noffsets', len_call_result_14381)
        
        # Assigning a Call to a Name (line 507):
        
        # Assigning a Call to a Name (line 507):
        
        # Assigning a Call to a Name (line 507):
        
        # Call to max(...): (line 507)
        # Processing the call arguments (line 507)
        # Getting the type of 'Npaths' (line 507)
        Npaths_14383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 16), 'Npaths', False)
        # Getting the type of 'Noffsets' (line 507)
        Noffsets_14384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 24), 'Noffsets', False)
        # Processing the call keyword arguments (line 507)
        kwargs_14385 = {}
        # Getting the type of 'max' (line 507)
        max_14382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 12), 'max', False)
        # Calling max(args, kwargs) (line 507)
        max_call_result_14386 = invoke(stypy.reporting.localization.Localization(__file__, 507, 12), max_14382, *[Npaths_14383, Noffsets_14384], **kwargs_14385)
        
        # Assigning a type to the variable 'N' (line 507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 507, 8), 'N', max_call_result_14386)
        
        # Assigning a Call to a Name (line 508):
        
        # Assigning a Call to a Name (line 508):
        
        # Assigning a Call to a Name (line 508):
        
        # Call to len(...): (line 508)
        # Processing the call arguments (line 508)
        # Getting the type of 'facecolors' (line 508)
        facecolors_14388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 26), 'facecolors', False)
        # Processing the call keyword arguments (line 508)
        kwargs_14389 = {}
        # Getting the type of 'len' (line 508)
        len_14387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 22), 'len', False)
        # Calling len(args, kwargs) (line 508)
        len_call_result_14390 = invoke(stypy.reporting.localization.Localization(__file__, 508, 22), len_14387, *[facecolors_14388], **kwargs_14389)
        
        # Assigning a type to the variable 'Nfacecolors' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'Nfacecolors', len_call_result_14390)
        
        # Assigning a Call to a Name (line 509):
        
        # Assigning a Call to a Name (line 509):
        
        # Assigning a Call to a Name (line 509):
        
        # Call to len(...): (line 509)
        # Processing the call arguments (line 509)
        # Getting the type of 'edgecolors' (line 509)
        edgecolors_14392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 26), 'edgecolors', False)
        # Processing the call keyword arguments (line 509)
        kwargs_14393 = {}
        # Getting the type of 'len' (line 509)
        len_14391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 22), 'len', False)
        # Calling len(args, kwargs) (line 509)
        len_call_result_14394 = invoke(stypy.reporting.localization.Localization(__file__, 509, 22), len_14391, *[edgecolors_14392], **kwargs_14393)
        
        # Assigning a type to the variable 'Nedgecolors' (line 509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 8), 'Nedgecolors', len_call_result_14394)
        
        # Assigning a Call to a Name (line 510):
        
        # Assigning a Call to a Name (line 510):
        
        # Assigning a Call to a Name (line 510):
        
        # Call to len(...): (line 510)
        # Processing the call arguments (line 510)
        # Getting the type of 'linewidths' (line 510)
        linewidths_14396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 26), 'linewidths', False)
        # Processing the call keyword arguments (line 510)
        kwargs_14397 = {}
        # Getting the type of 'len' (line 510)
        len_14395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 22), 'len', False)
        # Calling len(args, kwargs) (line 510)
        len_call_result_14398 = invoke(stypy.reporting.localization.Localization(__file__, 510, 22), len_14395, *[linewidths_14396], **kwargs_14397)
        
        # Assigning a type to the variable 'Nlinewidths' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'Nlinewidths', len_call_result_14398)
        
        # Assigning a Call to a Name (line 511):
        
        # Assigning a Call to a Name (line 511):
        
        # Assigning a Call to a Name (line 511):
        
        # Call to len(...): (line 511)
        # Processing the call arguments (line 511)
        # Getting the type of 'linestyles' (line 511)
        linestyles_14400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 26), 'linestyles', False)
        # Processing the call keyword arguments (line 511)
        kwargs_14401 = {}
        # Getting the type of 'len' (line 511)
        len_14399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 22), 'len', False)
        # Calling len(args, kwargs) (line 511)
        len_call_result_14402 = invoke(stypy.reporting.localization.Localization(__file__, 511, 22), len_14399, *[linestyles_14400], **kwargs_14401)
        
        # Assigning a type to the variable 'Nlinestyles' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'Nlinestyles', len_call_result_14402)
        
        # Assigning a Call to a Name (line 512):
        
        # Assigning a Call to a Name (line 512):
        
        # Assigning a Call to a Name (line 512):
        
        # Call to len(...): (line 512)
        # Processing the call arguments (line 512)
        # Getting the type of 'antialiaseds' (line 512)
        antialiaseds_14404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 18), 'antialiaseds', False)
        # Processing the call keyword arguments (line 512)
        kwargs_14405 = {}
        # Getting the type of 'len' (line 512)
        len_14403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 14), 'len', False)
        # Calling len(args, kwargs) (line 512)
        len_call_result_14406 = invoke(stypy.reporting.localization.Localization(__file__, 512, 14), len_14403, *[antialiaseds_14404], **kwargs_14405)
        
        # Assigning a type to the variable 'Naa' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 8), 'Naa', len_call_result_14406)
        
        # Assigning a Call to a Name (line 513):
        
        # Assigning a Call to a Name (line 513):
        
        # Assigning a Call to a Name (line 513):
        
        # Call to len(...): (line 513)
        # Processing the call arguments (line 513)
        # Getting the type of 'urls' (line 513)
        urls_14408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 20), 'urls', False)
        # Processing the call keyword arguments (line 513)
        kwargs_14409 = {}
        # Getting the type of 'len' (line 513)
        len_14407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 16), 'len', False)
        # Calling len(args, kwargs) (line 513)
        len_call_result_14410 = invoke(stypy.reporting.localization.Localization(__file__, 513, 16), len_14407, *[urls_14408], **kwargs_14409)
        
        # Assigning a type to the variable 'Nurls' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 8), 'Nurls', len_call_result_14410)
        
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        # Getting the type of 'Nfacecolors' (line 515)
        Nfacecolors_14411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 12), 'Nfacecolors')
        int_14412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 27), 'int')
        # Applying the binary operator '==' (line 515)
        result_eq_14413 = python_operator(stypy.reporting.localization.Localization(__file__, 515, 12), '==', Nfacecolors_14411, int_14412)
        
        
        # Getting the type of 'Nedgecolors' (line 515)
        Nedgecolors_14414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 33), 'Nedgecolors')
        int_14415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 48), 'int')
        # Applying the binary operator '==' (line 515)
        result_eq_14416 = python_operator(stypy.reporting.localization.Localization(__file__, 515, 33), '==', Nedgecolors_14414, int_14415)
        
        # Applying the binary operator 'and' (line 515)
        result_and_keyword_14417 = python_operator(stypy.reporting.localization.Localization(__file__, 515, 12), 'and', result_eq_14413, result_eq_14416)
        
        
        # Getting the type of 'Npaths' (line 515)
        Npaths_14418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 54), 'Npaths')
        int_14419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 64), 'int')
        # Applying the binary operator '==' (line 515)
        result_eq_14420 = python_operator(stypy.reporting.localization.Localization(__file__, 515, 54), '==', Npaths_14418, int_14419)
        
        # Applying the binary operator 'or' (line 515)
        result_or_keyword_14421 = python_operator(stypy.reporting.localization.Localization(__file__, 515, 11), 'or', result_and_keyword_14417, result_eq_14420)
        
        # Testing the type of an if condition (line 515)
        if_condition_14422 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 515, 8), result_or_keyword_14421)
        # Assigning a type to the variable 'if_condition_14422' (line 515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 8), 'if_condition_14422', if_condition_14422)
        # SSA begins for if statement (line 515)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 515)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'Noffsets' (line 517)
        Noffsets_14423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 11), 'Noffsets')
        # Testing the type of an if condition (line 517)
        if_condition_14424 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 517, 8), Noffsets_14423)
        # Assigning a type to the variable 'if_condition_14424' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 8), 'if_condition_14424', if_condition_14424)
        # SSA begins for if statement (line 517)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 518):
        
        # Assigning a Call to a Name (line 518):
        
        # Assigning a Call to a Name (line 518):
        
        # Call to transform(...): (line 518)
        # Processing the call arguments (line 518)
        # Getting the type of 'offsets' (line 518)
        offsets_14427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 45), 'offsets', False)
        # Processing the call keyword arguments (line 518)
        kwargs_14428 = {}
        # Getting the type of 'offsetTrans' (line 518)
        offsetTrans_14425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 23), 'offsetTrans', False)
        # Obtaining the member 'transform' of a type (line 518)
        transform_14426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 23), offsetTrans_14425, 'transform')
        # Calling transform(args, kwargs) (line 518)
        transform_call_result_14429 = invoke(stypy.reporting.localization.Localization(__file__, 518, 23), transform_14426, *[offsets_14427], **kwargs_14428)
        
        # Assigning a type to the variable 'toffsets' (line 518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 12), 'toffsets', transform_call_result_14429)
        # SSA join for if statement (line 517)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 520):
        
        # Assigning a Call to a Name (line 520):
        
        # Assigning a Call to a Name (line 520):
        
        # Call to new_gc(...): (line 520)
        # Processing the call keyword arguments (line 520)
        kwargs_14432 = {}
        # Getting the type of 'self' (line 520)
        self_14430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 14), 'self', False)
        # Obtaining the member 'new_gc' of a type (line 520)
        new_gc_14431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 14), self_14430, 'new_gc')
        # Calling new_gc(args, kwargs) (line 520)
        new_gc_call_result_14433 = invoke(stypy.reporting.localization.Localization(__file__, 520, 14), new_gc_14431, *[], **kwargs_14432)
        
        # Assigning a type to the variable 'gc0' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 8), 'gc0', new_gc_call_result_14433)
        
        # Call to copy_properties(...): (line 521)
        # Processing the call arguments (line 521)
        # Getting the type of 'gc' (line 521)
        gc_14436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 28), 'gc', False)
        # Processing the call keyword arguments (line 521)
        kwargs_14437 = {}
        # Getting the type of 'gc0' (line 521)
        gc0_14434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 8), 'gc0', False)
        # Obtaining the member 'copy_properties' of a type (line 521)
        copy_properties_14435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 8), gc0_14434, 'copy_properties')
        # Calling copy_properties(args, kwargs) (line 521)
        copy_properties_call_result_14438 = invoke(stypy.reporting.localization.Localization(__file__, 521, 8), copy_properties_14435, *[gc_14436], **kwargs_14437)
        
        
        
        # Getting the type of 'Nfacecolors' (line 523)
        Nfacecolors_14439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 11), 'Nfacecolors')
        int_14440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 26), 'int')
        # Applying the binary operator '==' (line 523)
        result_eq_14441 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 11), '==', Nfacecolors_14439, int_14440)
        
        # Testing the type of an if condition (line 523)
        if_condition_14442 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 523, 8), result_eq_14441)
        # Assigning a type to the variable 'if_condition_14442' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'if_condition_14442', if_condition_14442)
        # SSA begins for if statement (line 523)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 524):
        
        # Assigning a Name to a Name (line 524):
        
        # Assigning a Name to a Name (line 524):
        # Getting the type of 'None' (line 524)
        None_14443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 22), 'None')
        # Assigning a type to the variable 'rgbFace' (line 524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 12), 'rgbFace', None_14443)
        # SSA join for if statement (line 523)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'Nedgecolors' (line 526)
        Nedgecolors_14444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 11), 'Nedgecolors')
        int_14445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 26), 'int')
        # Applying the binary operator '==' (line 526)
        result_eq_14446 = python_operator(stypy.reporting.localization.Localization(__file__, 526, 11), '==', Nedgecolors_14444, int_14445)
        
        # Testing the type of an if condition (line 526)
        if_condition_14447 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 526, 8), result_eq_14446)
        # Assigning a type to the variable 'if_condition_14447' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'if_condition_14447', if_condition_14447)
        # SSA begins for if statement (line 526)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_linewidth(...): (line 527)
        # Processing the call arguments (line 527)
        float_14450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 527, 30), 'float')
        # Processing the call keyword arguments (line 527)
        kwargs_14451 = {}
        # Getting the type of 'gc0' (line 527)
        gc0_14448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 12), 'gc0', False)
        # Obtaining the member 'set_linewidth' of a type (line 527)
        set_linewidth_14449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 12), gc0_14448, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 527)
        set_linewidth_call_result_14452 = invoke(stypy.reporting.localization.Localization(__file__, 527, 12), set_linewidth_14449, *[float_14450], **kwargs_14451)
        
        # SSA join for if statement (line 526)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 529):
        
        # Assigning a Num to a Name (line 529):
        
        # Assigning a Num to a Name (line 529):
        int_14453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 17), 'int')
        # Assigning a type to the variable 'tuple_assignment_13696' (line 529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 8), 'tuple_assignment_13696', int_14453)
        
        # Assigning a Num to a Name (line 529):
        
        # Assigning a Num to a Name (line 529):
        int_14454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 20), 'int')
        # Assigning a type to the variable 'tuple_assignment_13697' (line 529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 8), 'tuple_assignment_13697', int_14454)
        
        # Assigning a Name to a Name (line 529):
        
        # Assigning a Name to a Name (line 529):
        # Getting the type of 'tuple_assignment_13696' (line 529)
        tuple_assignment_13696_14455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 8), 'tuple_assignment_13696')
        # Assigning a type to the variable 'xo' (line 529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 8), 'xo', tuple_assignment_13696_14455)
        
        # Assigning a Name to a Name (line 529):
        
        # Assigning a Name to a Name (line 529):
        # Getting the type of 'tuple_assignment_13697' (line 529)
        tuple_assignment_13697_14456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 8), 'tuple_assignment_13697')
        # Assigning a type to the variable 'yo' (line 529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 12), 'yo', tuple_assignment_13697_14456)
        
        
        # Call to xrange(...): (line 530)
        # Processing the call arguments (line 530)
        # Getting the type of 'N' (line 530)
        N_14458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 24), 'N', False)
        # Processing the call keyword arguments (line 530)
        kwargs_14459 = {}
        # Getting the type of 'xrange' (line 530)
        xrange_14457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 17), 'xrange', False)
        # Calling xrange(args, kwargs) (line 530)
        xrange_call_result_14460 = invoke(stypy.reporting.localization.Localization(__file__, 530, 17), xrange_14457, *[N_14458], **kwargs_14459)
        
        # Testing the type of a for loop iterable (line 530)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 530, 8), xrange_call_result_14460)
        # Getting the type of the for loop variable (line 530)
        for_loop_var_14461 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 530, 8), xrange_call_result_14460)
        # Assigning a type to the variable 'i' (line 530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 8), 'i', for_loop_var_14461)
        # SSA begins for a for statement (line 530)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 531):
        
        # Assigning a Subscript to a Name (line 531):
        
        # Assigning a Subscript to a Name (line 531):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 531)
        i_14462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 31), 'i')
        # Getting the type of 'Npaths' (line 531)
        Npaths_14463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 35), 'Npaths')
        # Applying the binary operator '%' (line 531)
        result_mod_14464 = python_operator(stypy.reporting.localization.Localization(__file__, 531, 31), '%', i_14462, Npaths_14463)
        
        # Getting the type of 'path_ids' (line 531)
        path_ids_14465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 22), 'path_ids')
        # Obtaining the member '__getitem__' of a type (line 531)
        getitem___14466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 22), path_ids_14465, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 531)
        subscript_call_result_14467 = invoke(stypy.reporting.localization.Localization(__file__, 531, 22), getitem___14466, result_mod_14464)
        
        # Assigning a type to the variable 'path_id' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 12), 'path_id', subscript_call_result_14467)
        
        # Getting the type of 'Noffsets' (line 532)
        Noffsets_14468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 15), 'Noffsets')
        # Testing the type of an if condition (line 532)
        if_condition_14469 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 532, 12), Noffsets_14468)
        # Assigning a type to the variable 'if_condition_14469' (line 532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 12), 'if_condition_14469', if_condition_14469)
        # SSA begins for if statement (line 532)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Tuple (line 533):
        
        # Assigning a Subscript to a Name (line 533):
        
        # Assigning a Subscript to a Name (line 533):
        
        # Obtaining the type of the subscript
        int_14470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 16), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 533)
        i_14471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 34), 'i')
        # Getting the type of 'Noffsets' (line 533)
        Noffsets_14472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 38), 'Noffsets')
        # Applying the binary operator '%' (line 533)
        result_mod_14473 = python_operator(stypy.reporting.localization.Localization(__file__, 533, 34), '%', i_14471, Noffsets_14472)
        
        # Getting the type of 'toffsets' (line 533)
        toffsets_14474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 25), 'toffsets')
        # Obtaining the member '__getitem__' of a type (line 533)
        getitem___14475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 25), toffsets_14474, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 533)
        subscript_call_result_14476 = invoke(stypy.reporting.localization.Localization(__file__, 533, 25), getitem___14475, result_mod_14473)
        
        # Obtaining the member '__getitem__' of a type (line 533)
        getitem___14477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 16), subscript_call_result_14476, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 533)
        subscript_call_result_14478 = invoke(stypy.reporting.localization.Localization(__file__, 533, 16), getitem___14477, int_14470)
        
        # Assigning a type to the variable 'tuple_var_assignment_13698' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 16), 'tuple_var_assignment_13698', subscript_call_result_14478)
        
        # Assigning a Subscript to a Name (line 533):
        
        # Assigning a Subscript to a Name (line 533):
        
        # Obtaining the type of the subscript
        int_14479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 16), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 533)
        i_14480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 34), 'i')
        # Getting the type of 'Noffsets' (line 533)
        Noffsets_14481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 38), 'Noffsets')
        # Applying the binary operator '%' (line 533)
        result_mod_14482 = python_operator(stypy.reporting.localization.Localization(__file__, 533, 34), '%', i_14480, Noffsets_14481)
        
        # Getting the type of 'toffsets' (line 533)
        toffsets_14483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 25), 'toffsets')
        # Obtaining the member '__getitem__' of a type (line 533)
        getitem___14484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 25), toffsets_14483, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 533)
        subscript_call_result_14485 = invoke(stypy.reporting.localization.Localization(__file__, 533, 25), getitem___14484, result_mod_14482)
        
        # Obtaining the member '__getitem__' of a type (line 533)
        getitem___14486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 16), subscript_call_result_14485, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 533)
        subscript_call_result_14487 = invoke(stypy.reporting.localization.Localization(__file__, 533, 16), getitem___14486, int_14479)
        
        # Assigning a type to the variable 'tuple_var_assignment_13699' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 16), 'tuple_var_assignment_13699', subscript_call_result_14487)
        
        # Assigning a Name to a Name (line 533):
        
        # Assigning a Name to a Name (line 533):
        # Getting the type of 'tuple_var_assignment_13698' (line 533)
        tuple_var_assignment_13698_14488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 16), 'tuple_var_assignment_13698')
        # Assigning a type to the variable 'xo' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 16), 'xo', tuple_var_assignment_13698_14488)
        
        # Assigning a Name to a Name (line 533):
        
        # Assigning a Name to a Name (line 533):
        # Getting the type of 'tuple_var_assignment_13699' (line 533)
        tuple_var_assignment_13699_14489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 16), 'tuple_var_assignment_13699')
        # Assigning a type to the variable 'yo' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 20), 'yo', tuple_var_assignment_13699_14489)
        
        
        # Getting the type of 'offset_position' (line 534)
        offset_position_14490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 19), 'offset_position')
        unicode_14491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 38), 'unicode', u'data')
        # Applying the binary operator '==' (line 534)
        result_eq_14492 = python_operator(stypy.reporting.localization.Localization(__file__, 534, 19), '==', offset_position_14490, unicode_14491)
        
        # Testing the type of an if condition (line 534)
        if_condition_14493 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 534, 16), result_eq_14492)
        # Assigning a type to the variable 'if_condition_14493' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 16), 'if_condition_14493', if_condition_14493)
        # SSA begins for if statement (line 534)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'Ntransforms' (line 535)
        Ntransforms_14494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 23), 'Ntransforms')
        # Testing the type of an if condition (line 535)
        if_condition_14495 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 535, 20), Ntransforms_14494)
        # Assigning a type to the variable 'if_condition_14495' (line 535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 20), 'if_condition_14495', if_condition_14495)
        # SSA begins for if statement (line 535)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 536):
        
        # Assigning a BinOp to a Name (line 536):
        
        # Assigning a BinOp to a Name (line 536):
        
        # Call to Affine2D(...): (line 537)
        # Processing the call arguments (line 537)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 537)
        i_14497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 52), 'i', False)
        # Getting the type of 'Ntransforms' (line 537)
        Ntransforms_14498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 56), 'Ntransforms', False)
        # Applying the binary operator '%' (line 537)
        result_mod_14499 = python_operator(stypy.reporting.localization.Localization(__file__, 537, 52), '%', i_14497, Ntransforms_14498)
        
        # Getting the type of 'all_transforms' (line 537)
        all_transforms_14500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 37), 'all_transforms', False)
        # Obtaining the member '__getitem__' of a type (line 537)
        getitem___14501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 37), all_transforms_14500, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 537)
        subscript_call_result_14502 = invoke(stypy.reporting.localization.Localization(__file__, 537, 37), getitem___14501, result_mod_14499)
        
        # Processing the call keyword arguments (line 537)
        kwargs_14503 = {}
        # Getting the type of 'Affine2D' (line 537)
        Affine2D_14496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 28), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 537)
        Affine2D_call_result_14504 = invoke(stypy.reporting.localization.Localization(__file__, 537, 28), Affine2D_14496, *[subscript_call_result_14502], **kwargs_14503)
        
        # Getting the type of 'master_transform' (line 538)
        master_transform_14505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 28), 'master_transform')
        # Applying the binary operator '+' (line 537)
        result_add_14506 = python_operator(stypy.reporting.localization.Localization(__file__, 537, 28), '+', Affine2D_call_result_14504, master_transform_14505)
        
        # Assigning a type to the variable 'transform' (line 536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 536, 24), 'transform', result_add_14506)
        # SSA branch for the else part of an if statement (line 535)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 540):
        
        # Assigning a Name to a Name (line 540):
        
        # Assigning a Name to a Name (line 540):
        # Getting the type of 'master_transform' (line 540)
        master_transform_14507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 36), 'master_transform')
        # Assigning a type to the variable 'transform' (line 540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 24), 'transform', master_transform_14507)
        # SSA join for if statement (line 535)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 541):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 541)
        # Processing the call arguments (line 541)
        
        # Obtaining an instance of the builtin type 'tuple' (line 541)
        tuple_14510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 56), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 541)
        # Adding element type (line 541)
        # Getting the type of 'xo' (line 541)
        xo_14511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 56), 'xo', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 541, 56), tuple_14510, xo_14511)
        # Adding element type (line 541)
        # Getting the type of 'yo' (line 541)
        yo_14512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 60), 'yo', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 541, 56), tuple_14510, yo_14512)
        
        # Processing the call keyword arguments (line 541)
        kwargs_14513 = {}
        # Getting the type of 'transform' (line 541)
        transform_14508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 29), 'transform', False)
        # Obtaining the member 'transform_point' of a type (line 541)
        transform_point_14509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 29), transform_14508, 'transform_point')
        # Calling transform_point(args, kwargs) (line 541)
        transform_point_call_result_14514 = invoke(stypy.reporting.localization.Localization(__file__, 541, 29), transform_point_14509, *[tuple_14510], **kwargs_14513)
        
        # Assigning a type to the variable 'call_assignment_13700' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 20), 'call_assignment_13700', transform_point_call_result_14514)
        
        # Assigning a Call to a Name (line 541):
        
        # Assigning a Call to a Name (line 541):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_14517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 20), 'int')
        # Processing the call keyword arguments
        kwargs_14518 = {}
        # Getting the type of 'call_assignment_13700' (line 541)
        call_assignment_13700_14515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 20), 'call_assignment_13700', False)
        # Obtaining the member '__getitem__' of a type (line 541)
        getitem___14516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 20), call_assignment_13700_14515, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_14519 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___14516, *[int_14517], **kwargs_14518)
        
        # Assigning a type to the variable 'call_assignment_13701' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 20), 'call_assignment_13701', getitem___call_result_14519)
        
        # Assigning a Name to a Name (line 541):
        
        # Assigning a Name to a Name (line 541):
        # Getting the type of 'call_assignment_13701' (line 541)
        call_assignment_13701_14520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 20), 'call_assignment_13701')
        # Assigning a type to the variable 'xo' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 20), 'xo', call_assignment_13701_14520)
        
        # Assigning a Call to a Name (line 541):
        
        # Assigning a Call to a Name (line 541):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_14523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 20), 'int')
        # Processing the call keyword arguments
        kwargs_14524 = {}
        # Getting the type of 'call_assignment_13700' (line 541)
        call_assignment_13700_14521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 20), 'call_assignment_13700', False)
        # Obtaining the member '__getitem__' of a type (line 541)
        getitem___14522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 20), call_assignment_13700_14521, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_14525 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___14522, *[int_14523], **kwargs_14524)
        
        # Assigning a type to the variable 'call_assignment_13702' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 20), 'call_assignment_13702', getitem___call_result_14525)
        
        # Assigning a Name to a Name (line 541):
        
        # Assigning a Name to a Name (line 541):
        # Getting the type of 'call_assignment_13702' (line 541)
        call_assignment_13702_14526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 20), 'call_assignment_13702')
        # Assigning a type to the variable 'yo' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 24), 'yo', call_assignment_13702_14526)
        
        # Assigning a Call to a Tuple (line 542):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 542)
        # Processing the call arguments (line 542)
        
        # Obtaining an instance of the builtin type 'tuple' (line 542)
        tuple_14529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 56), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 542)
        # Adding element type (line 542)
        int_14530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 56), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 542, 56), tuple_14529, int_14530)
        # Adding element type (line 542)
        int_14531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 59), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 542, 56), tuple_14529, int_14531)
        
        # Processing the call keyword arguments (line 542)
        kwargs_14532 = {}
        # Getting the type of 'transform' (line 542)
        transform_14527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 29), 'transform', False)
        # Obtaining the member 'transform_point' of a type (line 542)
        transform_point_14528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 29), transform_14527, 'transform_point')
        # Calling transform_point(args, kwargs) (line 542)
        transform_point_call_result_14533 = invoke(stypy.reporting.localization.Localization(__file__, 542, 29), transform_point_14528, *[tuple_14529], **kwargs_14532)
        
        # Assigning a type to the variable 'call_assignment_13703' (line 542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 20), 'call_assignment_13703', transform_point_call_result_14533)
        
        # Assigning a Call to a Name (line 542):
        
        # Assigning a Call to a Name (line 542):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_14536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 20), 'int')
        # Processing the call keyword arguments
        kwargs_14537 = {}
        # Getting the type of 'call_assignment_13703' (line 542)
        call_assignment_13703_14534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 20), 'call_assignment_13703', False)
        # Obtaining the member '__getitem__' of a type (line 542)
        getitem___14535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 20), call_assignment_13703_14534, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_14538 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___14535, *[int_14536], **kwargs_14537)
        
        # Assigning a type to the variable 'call_assignment_13704' (line 542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 20), 'call_assignment_13704', getitem___call_result_14538)
        
        # Assigning a Name to a Name (line 542):
        
        # Assigning a Name to a Name (line 542):
        # Getting the type of 'call_assignment_13704' (line 542)
        call_assignment_13704_14539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 20), 'call_assignment_13704')
        # Assigning a type to the variable 'xp' (line 542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 20), 'xp', call_assignment_13704_14539)
        
        # Assigning a Call to a Name (line 542):
        
        # Assigning a Call to a Name (line 542):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_14542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 20), 'int')
        # Processing the call keyword arguments
        kwargs_14543 = {}
        # Getting the type of 'call_assignment_13703' (line 542)
        call_assignment_13703_14540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 20), 'call_assignment_13703', False)
        # Obtaining the member '__getitem__' of a type (line 542)
        getitem___14541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 20), call_assignment_13703_14540, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_14544 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___14541, *[int_14542], **kwargs_14543)
        
        # Assigning a type to the variable 'call_assignment_13705' (line 542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 20), 'call_assignment_13705', getitem___call_result_14544)
        
        # Assigning a Name to a Name (line 542):
        
        # Assigning a Name to a Name (line 542):
        # Getting the type of 'call_assignment_13705' (line 542)
        call_assignment_13705_14545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 20), 'call_assignment_13705')
        # Assigning a type to the variable 'yp' (line 542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 24), 'yp', call_assignment_13705_14545)
        
        # Assigning a UnaryOp to a Name (line 543):
        
        # Assigning a UnaryOp to a Name (line 543):
        
        # Assigning a UnaryOp to a Name (line 543):
        
        # Getting the type of 'xp' (line 543)
        xp_14546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 27), 'xp')
        # Getting the type of 'xo' (line 543)
        xo_14547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 32), 'xo')
        # Applying the binary operator '-' (line 543)
        result_sub_14548 = python_operator(stypy.reporting.localization.Localization(__file__, 543, 27), '-', xp_14546, xo_14547)
        
        # Applying the 'usub' unary operator (line 543)
        result___neg___14549 = python_operator(stypy.reporting.localization.Localization(__file__, 543, 25), 'usub', result_sub_14548)
        
        # Assigning a type to the variable 'xo' (line 543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 20), 'xo', result___neg___14549)
        
        # Assigning a UnaryOp to a Name (line 544):
        
        # Assigning a UnaryOp to a Name (line 544):
        
        # Assigning a UnaryOp to a Name (line 544):
        
        # Getting the type of 'yp' (line 544)
        yp_14550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 27), 'yp')
        # Getting the type of 'yo' (line 544)
        yo_14551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 32), 'yo')
        # Applying the binary operator '-' (line 544)
        result_sub_14552 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 27), '-', yp_14550, yo_14551)
        
        # Applying the 'usub' unary operator (line 544)
        result___neg___14553 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 25), 'usub', result_sub_14552)
        
        # Assigning a type to the variable 'yo' (line 544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 20), 'yo', result___neg___14553)
        # SSA join for if statement (line 534)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 532)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Evaluating a boolean operation
        
        # Call to isfinite(...): (line 545)
        # Processing the call arguments (line 545)
        # Getting the type of 'xo' (line 545)
        xo_14556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 32), 'xo', False)
        # Processing the call keyword arguments (line 545)
        kwargs_14557 = {}
        # Getting the type of 'np' (line 545)
        np_14554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 20), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 545)
        isfinite_14555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 20), np_14554, 'isfinite')
        # Calling isfinite(args, kwargs) (line 545)
        isfinite_call_result_14558 = invoke(stypy.reporting.localization.Localization(__file__, 545, 20), isfinite_14555, *[xo_14556], **kwargs_14557)
        
        
        # Call to isfinite(...): (line 545)
        # Processing the call arguments (line 545)
        # Getting the type of 'yo' (line 545)
        yo_14561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 52), 'yo', False)
        # Processing the call keyword arguments (line 545)
        kwargs_14562 = {}
        # Getting the type of 'np' (line 545)
        np_14559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 40), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 545)
        isfinite_14560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 40), np_14559, 'isfinite')
        # Calling isfinite(args, kwargs) (line 545)
        isfinite_call_result_14563 = invoke(stypy.reporting.localization.Localization(__file__, 545, 40), isfinite_14560, *[yo_14561], **kwargs_14562)
        
        # Applying the binary operator 'and' (line 545)
        result_and_keyword_14564 = python_operator(stypy.reporting.localization.Localization(__file__, 545, 20), 'and', isfinite_call_result_14558, isfinite_call_result_14563)
        
        # Applying the 'not' unary operator (line 545)
        result_not__14565 = python_operator(stypy.reporting.localization.Localization(__file__, 545, 15), 'not', result_and_keyword_14564)
        
        # Testing the type of an if condition (line 545)
        if_condition_14566 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 545, 12), result_not__14565)
        # Assigning a type to the variable 'if_condition_14566' (line 545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 545, 12), 'if_condition_14566', if_condition_14566)
        # SSA begins for if statement (line 545)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 545)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'Nfacecolors' (line 547)
        Nfacecolors_14567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 15), 'Nfacecolors')
        # Testing the type of an if condition (line 547)
        if_condition_14568 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 547, 12), Nfacecolors_14567)
        # Assigning a type to the variable 'if_condition_14568' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'if_condition_14568', if_condition_14568)
        # SSA begins for if statement (line 547)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 548):
        
        # Assigning a Subscript to a Name (line 548):
        
        # Assigning a Subscript to a Name (line 548):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 548)
        i_14569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 37), 'i')
        # Getting the type of 'Nfacecolors' (line 548)
        Nfacecolors_14570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 41), 'Nfacecolors')
        # Applying the binary operator '%' (line 548)
        result_mod_14571 = python_operator(stypy.reporting.localization.Localization(__file__, 548, 37), '%', i_14569, Nfacecolors_14570)
        
        # Getting the type of 'facecolors' (line 548)
        facecolors_14572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 26), 'facecolors')
        # Obtaining the member '__getitem__' of a type (line 548)
        getitem___14573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 26), facecolors_14572, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 548)
        subscript_call_result_14574 = invoke(stypy.reporting.localization.Localization(__file__, 548, 26), getitem___14573, result_mod_14571)
        
        # Assigning a type to the variable 'rgbFace' (line 548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 16), 'rgbFace', subscript_call_result_14574)
        # SSA join for if statement (line 547)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'Nedgecolors' (line 549)
        Nedgecolors_14575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 15), 'Nedgecolors')
        # Testing the type of an if condition (line 549)
        if_condition_14576 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 549, 12), Nedgecolors_14575)
        # Assigning a type to the variable 'if_condition_14576' (line 549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'if_condition_14576', if_condition_14576)
        # SSA begins for if statement (line 549)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'Nlinewidths' (line 550)
        Nlinewidths_14577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 19), 'Nlinewidths')
        # Testing the type of an if condition (line 550)
        if_condition_14578 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 550, 16), Nlinewidths_14577)
        # Assigning a type to the variable 'if_condition_14578' (line 550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 16), 'if_condition_14578', if_condition_14578)
        # SSA begins for if statement (line 550)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_linewidth(...): (line 551)
        # Processing the call arguments (line 551)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 551)
        i_14581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 49), 'i', False)
        # Getting the type of 'Nlinewidths' (line 551)
        Nlinewidths_14582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 53), 'Nlinewidths', False)
        # Applying the binary operator '%' (line 551)
        result_mod_14583 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 49), '%', i_14581, Nlinewidths_14582)
        
        # Getting the type of 'linewidths' (line 551)
        linewidths_14584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 38), 'linewidths', False)
        # Obtaining the member '__getitem__' of a type (line 551)
        getitem___14585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 38), linewidths_14584, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 551)
        subscript_call_result_14586 = invoke(stypy.reporting.localization.Localization(__file__, 551, 38), getitem___14585, result_mod_14583)
        
        # Processing the call keyword arguments (line 551)
        kwargs_14587 = {}
        # Getting the type of 'gc0' (line 551)
        gc0_14579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 20), 'gc0', False)
        # Obtaining the member 'set_linewidth' of a type (line 551)
        set_linewidth_14580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 20), gc0_14579, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 551)
        set_linewidth_call_result_14588 = invoke(stypy.reporting.localization.Localization(__file__, 551, 20), set_linewidth_14580, *[subscript_call_result_14586], **kwargs_14587)
        
        # SSA join for if statement (line 550)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'Nlinestyles' (line 552)
        Nlinestyles_14589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 19), 'Nlinestyles')
        # Testing the type of an if condition (line 552)
        if_condition_14590 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 552, 16), Nlinestyles_14589)
        # Assigning a type to the variable 'if_condition_14590' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 16), 'if_condition_14590', if_condition_14590)
        # SSA begins for if statement (line 552)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_dashes(...): (line 553)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 553)
        i_14593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 47), 'i', False)
        # Getting the type of 'Nlinestyles' (line 553)
        Nlinestyles_14594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 51), 'Nlinestyles', False)
        # Applying the binary operator '%' (line 553)
        result_mod_14595 = python_operator(stypy.reporting.localization.Localization(__file__, 553, 47), '%', i_14593, Nlinestyles_14594)
        
        # Getting the type of 'linestyles' (line 553)
        linestyles_14596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 36), 'linestyles', False)
        # Obtaining the member '__getitem__' of a type (line 553)
        getitem___14597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 36), linestyles_14596, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 553)
        subscript_call_result_14598 = invoke(stypy.reporting.localization.Localization(__file__, 553, 36), getitem___14597, result_mod_14595)
        
        # Processing the call keyword arguments (line 553)
        kwargs_14599 = {}
        # Getting the type of 'gc0' (line 553)
        gc0_14591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 20), 'gc0', False)
        # Obtaining the member 'set_dashes' of a type (line 553)
        set_dashes_14592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 20), gc0_14591, 'set_dashes')
        # Calling set_dashes(args, kwargs) (line 553)
        set_dashes_call_result_14600 = invoke(stypy.reporting.localization.Localization(__file__, 553, 20), set_dashes_14592, *[subscript_call_result_14598], **kwargs_14599)
        
        # SSA join for if statement (line 552)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 554):
        
        # Assigning a Subscript to a Name (line 554):
        
        # Assigning a Subscript to a Name (line 554):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 554)
        i_14601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 32), 'i')
        # Getting the type of 'Nedgecolors' (line 554)
        Nedgecolors_14602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 36), 'Nedgecolors')
        # Applying the binary operator '%' (line 554)
        result_mod_14603 = python_operator(stypy.reporting.localization.Localization(__file__, 554, 32), '%', i_14601, Nedgecolors_14602)
        
        # Getting the type of 'edgecolors' (line 554)
        edgecolors_14604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 21), 'edgecolors')
        # Obtaining the member '__getitem__' of a type (line 554)
        getitem___14605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 21), edgecolors_14604, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 554)
        subscript_call_result_14606 = invoke(stypy.reporting.localization.Localization(__file__, 554, 21), getitem___14605, result_mod_14603)
        
        # Assigning a type to the variable 'fg' (line 554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 16), 'fg', subscript_call_result_14606)
        
        
        
        # Call to len(...): (line 555)
        # Processing the call arguments (line 555)
        # Getting the type of 'fg' (line 555)
        fg_14608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 23), 'fg', False)
        # Processing the call keyword arguments (line 555)
        kwargs_14609 = {}
        # Getting the type of 'len' (line 555)
        len_14607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 19), 'len', False)
        # Calling len(args, kwargs) (line 555)
        len_call_result_14610 = invoke(stypy.reporting.localization.Localization(__file__, 555, 19), len_14607, *[fg_14608], **kwargs_14609)
        
        int_14611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 555, 30), 'int')
        # Applying the binary operator '==' (line 555)
        result_eq_14612 = python_operator(stypy.reporting.localization.Localization(__file__, 555, 19), '==', len_call_result_14610, int_14611)
        
        # Testing the type of an if condition (line 555)
        if_condition_14613 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 555, 16), result_eq_14612)
        # Assigning a type to the variable 'if_condition_14613' (line 555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 16), 'if_condition_14613', if_condition_14613)
        # SSA begins for if statement (line 555)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Obtaining the type of the subscript
        int_14614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 26), 'int')
        # Getting the type of 'fg' (line 556)
        fg_14615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 23), 'fg')
        # Obtaining the member '__getitem__' of a type (line 556)
        getitem___14616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 23), fg_14615, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 556)
        subscript_call_result_14617 = invoke(stypy.reporting.localization.Localization(__file__, 556, 23), getitem___14616, int_14614)
        
        float_14618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 32), 'float')
        # Applying the binary operator '==' (line 556)
        result_eq_14619 = python_operator(stypy.reporting.localization.Localization(__file__, 556, 23), '==', subscript_call_result_14617, float_14618)
        
        # Testing the type of an if condition (line 556)
        if_condition_14620 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 556, 20), result_eq_14619)
        # Assigning a type to the variable 'if_condition_14620' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 20), 'if_condition_14620', if_condition_14620)
        # SSA begins for if statement (line 556)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_linewidth(...): (line 557)
        # Processing the call arguments (line 557)
        int_14623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 42), 'int')
        # Processing the call keyword arguments (line 557)
        kwargs_14624 = {}
        # Getting the type of 'gc0' (line 557)
        gc0_14621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 24), 'gc0', False)
        # Obtaining the member 'set_linewidth' of a type (line 557)
        set_linewidth_14622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 24), gc0_14621, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 557)
        set_linewidth_call_result_14625 = invoke(stypy.reporting.localization.Localization(__file__, 557, 24), set_linewidth_14622, *[int_14623], **kwargs_14624)
        
        # SSA branch for the else part of an if statement (line 556)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_foreground(...): (line 559)
        # Processing the call arguments (line 559)
        # Getting the type of 'fg' (line 559)
        fg_14628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 43), 'fg', False)
        # Processing the call keyword arguments (line 559)
        kwargs_14629 = {}
        # Getting the type of 'gc0' (line 559)
        gc0_14626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 24), 'gc0', False)
        # Obtaining the member 'set_foreground' of a type (line 559)
        set_foreground_14627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 24), gc0_14626, 'set_foreground')
        # Calling set_foreground(args, kwargs) (line 559)
        set_foreground_call_result_14630 = invoke(stypy.reporting.localization.Localization(__file__, 559, 24), set_foreground_14627, *[fg_14628], **kwargs_14629)
        
        # SSA join for if statement (line 556)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 555)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_foreground(...): (line 561)
        # Processing the call arguments (line 561)
        # Getting the type of 'fg' (line 561)
        fg_14633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 39), 'fg', False)
        # Processing the call keyword arguments (line 561)
        kwargs_14634 = {}
        # Getting the type of 'gc0' (line 561)
        gc0_14631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 20), 'gc0', False)
        # Obtaining the member 'set_foreground' of a type (line 561)
        set_foreground_14632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 20), gc0_14631, 'set_foreground')
        # Calling set_foreground(args, kwargs) (line 561)
        set_foreground_call_result_14635 = invoke(stypy.reporting.localization.Localization(__file__, 561, 20), set_foreground_14632, *[fg_14633], **kwargs_14634)
        
        # SSA join for if statement (line 555)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 549)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'rgbFace' (line 562)
        rgbFace_14636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 15), 'rgbFace')
        # Getting the type of 'None' (line 562)
        None_14637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 30), 'None')
        # Applying the binary operator 'isnot' (line 562)
        result_is_not_14638 = python_operator(stypy.reporting.localization.Localization(__file__, 562, 15), 'isnot', rgbFace_14636, None_14637)
        
        
        
        # Call to len(...): (line 562)
        # Processing the call arguments (line 562)
        # Getting the type of 'rgbFace' (line 562)
        rgbFace_14640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 43), 'rgbFace', False)
        # Processing the call keyword arguments (line 562)
        kwargs_14641 = {}
        # Getting the type of 'len' (line 562)
        len_14639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 39), 'len', False)
        # Calling len(args, kwargs) (line 562)
        len_call_result_14642 = invoke(stypy.reporting.localization.Localization(__file__, 562, 39), len_14639, *[rgbFace_14640], **kwargs_14641)
        
        int_14643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 55), 'int')
        # Applying the binary operator '==' (line 562)
        result_eq_14644 = python_operator(stypy.reporting.localization.Localization(__file__, 562, 39), '==', len_call_result_14642, int_14643)
        
        # Applying the binary operator 'and' (line 562)
        result_and_keyword_14645 = python_operator(stypy.reporting.localization.Localization(__file__, 562, 15), 'and', result_is_not_14638, result_eq_14644)
        
        # Testing the type of an if condition (line 562)
        if_condition_14646 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 562, 12), result_and_keyword_14645)
        # Assigning a type to the variable 'if_condition_14646' (line 562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 12), 'if_condition_14646', if_condition_14646)
        # SSA begins for if statement (line 562)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Obtaining the type of the subscript
        int_14647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 27), 'int')
        # Getting the type of 'rgbFace' (line 563)
        rgbFace_14648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 19), 'rgbFace')
        # Obtaining the member '__getitem__' of a type (line 563)
        getitem___14649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 19), rgbFace_14648, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 563)
        subscript_call_result_14650 = invoke(stypy.reporting.localization.Localization(__file__, 563, 19), getitem___14649, int_14647)
        
        int_14651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 33), 'int')
        # Applying the binary operator '==' (line 563)
        result_eq_14652 = python_operator(stypy.reporting.localization.Localization(__file__, 563, 19), '==', subscript_call_result_14650, int_14651)
        
        # Testing the type of an if condition (line 563)
        if_condition_14653 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 563, 16), result_eq_14652)
        # Assigning a type to the variable 'if_condition_14653' (line 563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 563, 16), 'if_condition_14653', if_condition_14653)
        # SSA begins for if statement (line 563)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 564):
        
        # Assigning a Name to a Name (line 564):
        
        # Assigning a Name to a Name (line 564):
        # Getting the type of 'None' (line 564)
        None_14654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 30), 'None')
        # Assigning a type to the variable 'rgbFace' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 20), 'rgbFace', None_14654)
        # SSA join for if statement (line 563)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 562)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_antialiased(...): (line 565)
        # Processing the call arguments (line 565)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 565)
        i_14657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 45), 'i', False)
        # Getting the type of 'Naa' (line 565)
        Naa_14658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 49), 'Naa', False)
        # Applying the binary operator '%' (line 565)
        result_mod_14659 = python_operator(stypy.reporting.localization.Localization(__file__, 565, 45), '%', i_14657, Naa_14658)
        
        # Getting the type of 'antialiaseds' (line 565)
        antialiaseds_14660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 32), 'antialiaseds', False)
        # Obtaining the member '__getitem__' of a type (line 565)
        getitem___14661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 32), antialiaseds_14660, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 565)
        subscript_call_result_14662 = invoke(stypy.reporting.localization.Localization(__file__, 565, 32), getitem___14661, result_mod_14659)
        
        # Processing the call keyword arguments (line 565)
        kwargs_14663 = {}
        # Getting the type of 'gc0' (line 565)
        gc0_14655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 12), 'gc0', False)
        # Obtaining the member 'set_antialiased' of a type (line 565)
        set_antialiased_14656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 12), gc0_14655, 'set_antialiased')
        # Calling set_antialiased(args, kwargs) (line 565)
        set_antialiased_call_result_14664 = invoke(stypy.reporting.localization.Localization(__file__, 565, 12), set_antialiased_14656, *[subscript_call_result_14662], **kwargs_14663)
        
        
        # Getting the type of 'Nurls' (line 566)
        Nurls_14665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 15), 'Nurls')
        # Testing the type of an if condition (line 566)
        if_condition_14666 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 566, 12), Nurls_14665)
        # Assigning a type to the variable 'if_condition_14666' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 12), 'if_condition_14666', if_condition_14666)
        # SSA begins for if statement (line 566)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_url(...): (line 567)
        # Processing the call arguments (line 567)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 567)
        i_14669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 33), 'i', False)
        # Getting the type of 'Nurls' (line 567)
        Nurls_14670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 37), 'Nurls', False)
        # Applying the binary operator '%' (line 567)
        result_mod_14671 = python_operator(stypy.reporting.localization.Localization(__file__, 567, 33), '%', i_14669, Nurls_14670)
        
        # Getting the type of 'urls' (line 567)
        urls_14672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 28), 'urls', False)
        # Obtaining the member '__getitem__' of a type (line 567)
        getitem___14673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 28), urls_14672, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 567)
        subscript_call_result_14674 = invoke(stypy.reporting.localization.Localization(__file__, 567, 28), getitem___14673, result_mod_14671)
        
        # Processing the call keyword arguments (line 567)
        kwargs_14675 = {}
        # Getting the type of 'gc0' (line 567)
        gc0_14667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 16), 'gc0', False)
        # Obtaining the member 'set_url' of a type (line 567)
        set_url_14668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 16), gc0_14667, 'set_url')
        # Calling set_url(args, kwargs) (line 567)
        set_url_call_result_14676 = invoke(stypy.reporting.localization.Localization(__file__, 567, 16), set_url_14668, *[subscript_call_result_14674], **kwargs_14675)
        
        # SSA join for if statement (line 566)
        module_type_store = module_type_store.join_ssa_context()
        
        # Creating a generator
        
        # Obtaining an instance of the builtin type 'tuple' (line 569)
        tuple_14677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 569)
        # Adding element type (line 569)
        # Getting the type of 'xo' (line 569)
        xo_14678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 18), 'xo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 569, 18), tuple_14677, xo_14678)
        # Adding element type (line 569)
        # Getting the type of 'yo' (line 569)
        yo_14679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 22), 'yo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 569, 18), tuple_14677, yo_14679)
        # Adding element type (line 569)
        # Getting the type of 'path_id' (line 569)
        path_id_14680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 26), 'path_id')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 569, 18), tuple_14677, path_id_14680)
        # Adding element type (line 569)
        # Getting the type of 'gc0' (line 569)
        gc0_14681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 35), 'gc0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 569, 18), tuple_14677, gc0_14681)
        # Adding element type (line 569)
        # Getting the type of 'rgbFace' (line 569)
        rgbFace_14682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 40), 'rgbFace')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 569, 18), tuple_14677, rgbFace_14682)
        
        GeneratorType_14683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 569, 12), GeneratorType_14683, tuple_14677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 12), 'stypy_return_type', GeneratorType_14683)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to restore(...): (line 570)
        # Processing the call keyword arguments (line 570)
        kwargs_14686 = {}
        # Getting the type of 'gc0' (line 570)
        gc0_14684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 8), 'gc0', False)
        # Obtaining the member 'restore' of a type (line 570)
        restore_14685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 8), gc0_14684, 'restore')
        # Calling restore(args, kwargs) (line 570)
        restore_call_result_14687 = invoke(stypy.reporting.localization.Localization(__file__, 570, 8), restore_14685, *[], **kwargs_14686)
        
        
        # ################# End of '_iter_collection(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_iter_collection' in the type store
        # Getting the type of 'stypy_return_type' (line 475)
        stypy_return_type_14688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14688)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_iter_collection'
        return stypy_return_type_14688


    @norecursion
    def get_image_magnification(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_image_magnification'
        module_type_store = module_type_store.open_function_context('get_image_magnification', 572, 4, False)
        # Assigning a type to the variable 'self' (line 573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.get_image_magnification.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.get_image_magnification.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.get_image_magnification.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.get_image_magnification.__dict__.__setitem__('stypy_function_name', 'RendererBase.get_image_magnification')
        RendererBase.get_image_magnification.__dict__.__setitem__('stypy_param_names_list', [])
        RendererBase.get_image_magnification.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.get_image_magnification.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.get_image_magnification.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.get_image_magnification.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.get_image_magnification.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.get_image_magnification.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.get_image_magnification', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_image_magnification', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_image_magnification(...)' code ##################

        unicode_14689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, (-1)), 'unicode', u'\n        Get the factor by which to magnify images passed to :meth:`draw_image`.\n        Allows a backend to have images at a different resolution to other\n        artists.\n        ')
        float_14690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 15), 'float')
        # Assigning a type to the variable 'stypy_return_type' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'stypy_return_type', float_14690)
        
        # ################# End of 'get_image_magnification(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_image_magnification' in the type store
        # Getting the type of 'stypy_return_type' (line 572)
        stypy_return_type_14691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14691)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_image_magnification'
        return stypy_return_type_14691


    @norecursion
    def draw_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 580)
        None_14692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 49), 'None')
        defaults = [None_14692]
        # Create a new context for function 'draw_image'
        module_type_store = module_type_store.open_function_context('draw_image', 580, 4, False)
        # Assigning a type to the variable 'self' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.draw_image.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.draw_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.draw_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.draw_image.__dict__.__setitem__('stypy_function_name', 'RendererBase.draw_image')
        RendererBase.draw_image.__dict__.__setitem__('stypy_param_names_list', ['gc', 'x', 'y', 'im', 'transform'])
        RendererBase.draw_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.draw_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.draw_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.draw_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.draw_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.draw_image.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.draw_image', ['gc', 'x', 'y', 'im', 'transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_image', localization, ['gc', 'x', 'y', 'im', 'transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_image(...)' code ##################

        unicode_14693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, (-1)), 'unicode', u'\n        Draw an RGBA image.\n\n        Parameters\n        ----------\n        gc : `GraphicsContextBase`\n            a graphics context with clipping information.\n\n        x : scalar\n            the distance in physical units (i.e., dots or pixels) from the left\n            hand side of the canvas.\n\n        y : scalar\n            the distance in physical units (i.e., dots or pixels) from the\n            bottom side of the canvas.\n\n        im : array_like, shape=(N, M, 4), dtype=np.uint8\n            An array of RGBA pixels.\n\n        transform : `matplotlib.transforms.Affine2DBase`\n            If and only if the concrete backend is written such that\n            :meth:`option_scale_image` returns ``True``, an affine\n            transformation *may* be passed to :meth:`draw_image`. It takes the\n            form of a :class:`~matplotlib.transforms.Affine2DBase` instance.\n            The translation vector of the transformation is given in physical\n            units (i.e., dots or pixels). Note that the transformation does not\n            override `x` and `y`, and has to be applied *before* translating\n            the result by `x` and `y` (this can be accomplished by adding `x`\n            and `y` to the translation vector defined by `transform`).\n        ')
        # Getting the type of 'NotImplementedError' (line 611)
        NotImplementedError_14694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 14), 'NotImplementedError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 611, 8), NotImplementedError_14694, 'raise parameter', BaseException)
        
        # ################# End of 'draw_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_image' in the type store
        # Getting the type of 'stypy_return_type' (line 580)
        stypy_return_type_14695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14695)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_image'
        return stypy_return_type_14695


    @norecursion
    def option_image_nocomposite(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'option_image_nocomposite'
        module_type_store = module_type_store.open_function_context('option_image_nocomposite', 613, 4, False)
        # Assigning a type to the variable 'self' (line 614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.option_image_nocomposite.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.option_image_nocomposite.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.option_image_nocomposite.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.option_image_nocomposite.__dict__.__setitem__('stypy_function_name', 'RendererBase.option_image_nocomposite')
        RendererBase.option_image_nocomposite.__dict__.__setitem__('stypy_param_names_list', [])
        RendererBase.option_image_nocomposite.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.option_image_nocomposite.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.option_image_nocomposite.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.option_image_nocomposite.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.option_image_nocomposite.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.option_image_nocomposite.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.option_image_nocomposite', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'option_image_nocomposite', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'option_image_nocomposite(...)' code ##################

        unicode_14696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, (-1)), 'unicode', u'\n        override this method for renderers that do not necessarily always\n        want to rescale and composite raster images. (like SVG, PDF, or PS)\n        ')
        # Getting the type of 'False' (line 618)
        False_14697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'stypy_return_type', False_14697)
        
        # ################# End of 'option_image_nocomposite(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'option_image_nocomposite' in the type store
        # Getting the type of 'stypy_return_type' (line 613)
        stypy_return_type_14698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14698)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'option_image_nocomposite'
        return stypy_return_type_14698


    @norecursion
    def option_scale_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'option_scale_image'
        module_type_store = module_type_store.open_function_context('option_scale_image', 620, 4, False)
        # Assigning a type to the variable 'self' (line 621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.option_scale_image.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.option_scale_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.option_scale_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.option_scale_image.__dict__.__setitem__('stypy_function_name', 'RendererBase.option_scale_image')
        RendererBase.option_scale_image.__dict__.__setitem__('stypy_param_names_list', [])
        RendererBase.option_scale_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.option_scale_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.option_scale_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.option_scale_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.option_scale_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.option_scale_image.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.option_scale_image', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'option_scale_image', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'option_scale_image(...)' code ##################

        unicode_14699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, (-1)), 'unicode', u'\n        override this method for renderers that support arbitrary affine\n        transformations in :meth:`draw_image` (most vector backends).\n        ')
        # Getting the type of 'False' (line 625)
        False_14700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'stypy_return_type', False_14700)
        
        # ################# End of 'option_scale_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'option_scale_image' in the type store
        # Getting the type of 'stypy_return_type' (line 620)
        stypy_return_type_14701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14701)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'option_scale_image'
        return stypy_return_type_14701


    @norecursion
    def draw_tex(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_14702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 56), 'unicode', u'TeX!')
        # Getting the type of 'None' (line 627)
        None_14703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 70), 'None')
        defaults = [unicode_14702, None_14703]
        # Create a new context for function 'draw_tex'
        module_type_store = module_type_store.open_function_context('draw_tex', 627, 4, False)
        # Assigning a type to the variable 'self' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.draw_tex.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.draw_tex.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.draw_tex.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.draw_tex.__dict__.__setitem__('stypy_function_name', 'RendererBase.draw_tex')
        RendererBase.draw_tex.__dict__.__setitem__('stypy_param_names_list', ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'])
        RendererBase.draw_tex.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.draw_tex.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.draw_tex.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.draw_tex.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.draw_tex.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.draw_tex.__dict__.__setitem__('stypy_declared_arg_number', 9)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.draw_tex', ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_tex', localization, ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_tex(...)' code ##################

        unicode_14704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, (-1)), 'unicode', u'\n        ')
        
        # Call to _draw_text_as_path(...): (line 630)
        # Processing the call arguments (line 630)
        # Getting the type of 'gc' (line 630)
        gc_14707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 32), 'gc', False)
        # Getting the type of 'x' (line 630)
        x_14708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 36), 'x', False)
        # Getting the type of 'y' (line 630)
        y_14709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 39), 'y', False)
        # Getting the type of 's' (line 630)
        s_14710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 42), 's', False)
        # Getting the type of 'prop' (line 630)
        prop_14711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 45), 'prop', False)
        # Getting the type of 'angle' (line 630)
        angle_14712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 51), 'angle', False)
        # Processing the call keyword arguments (line 630)
        unicode_14713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 65), 'unicode', u'TeX')
        keyword_14714 = unicode_14713
        kwargs_14715 = {'ismath': keyword_14714}
        # Getting the type of 'self' (line 630)
        self_14705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 8), 'self', False)
        # Obtaining the member '_draw_text_as_path' of a type (line 630)
        _draw_text_as_path_14706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 8), self_14705, '_draw_text_as_path')
        # Calling _draw_text_as_path(args, kwargs) (line 630)
        _draw_text_as_path_call_result_14716 = invoke(stypy.reporting.localization.Localization(__file__, 630, 8), _draw_text_as_path_14706, *[gc_14707, x_14708, y_14709, s_14710, prop_14711, angle_14712], **kwargs_14715)
        
        
        # ################# End of 'draw_tex(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_tex' in the type store
        # Getting the type of 'stypy_return_type' (line 627)
        stypy_return_type_14717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14717)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_tex'
        return stypy_return_type_14717


    @norecursion
    def draw_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 632)
        False_14718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 57), 'False')
        # Getting the type of 'None' (line 632)
        None_14719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 70), 'None')
        defaults = [False_14718, None_14719]
        # Create a new context for function 'draw_text'
        module_type_store = module_type_store.open_function_context('draw_text', 632, 4, False)
        # Assigning a type to the variable 'self' (line 633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.draw_text.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.draw_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.draw_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.draw_text.__dict__.__setitem__('stypy_function_name', 'RendererBase.draw_text')
        RendererBase.draw_text.__dict__.__setitem__('stypy_param_names_list', ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'])
        RendererBase.draw_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.draw_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.draw_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.draw_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.draw_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.draw_text.__dict__.__setitem__('stypy_declared_arg_number', 9)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.draw_text', ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_text', localization, ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath', 'mtext'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_text(...)' code ##################

        unicode_14720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 671, (-1)), 'unicode', u'\n        Draw the text instance\n\n        Parameters\n        ----------\n        gc : `GraphicsContextBase`\n            the graphics context\n\n        x : scalar\n            the x location of the text in display coords\n\n        y : scalar\n            the y location of the text baseline in display coords\n\n        s : str\n            the text string\n\n        prop : `matplotlib.font_manager.FontProperties`\n            font properties\n\n        angle : scalar\n            the rotation angle in degrees\n\n        mtext : `matplotlib.text.Text`\n            the original text object to be rendered\n\n        Notes\n        -----\n        **backend implementers note**\n\n        When you are trying to determine if you have gotten your bounding box\n        right (which is what enables the text layout/alignment to work\n        properly), it helps to change the line in text.py::\n\n            if 0: bbox_artist(self, renderer)\n\n        to if 1, and then the actual bounding box will be plotted along with\n        your text.\n        ')
        
        # Call to _draw_text_as_path(...): (line 673)
        # Processing the call arguments (line 673)
        # Getting the type of 'gc' (line 673)
        gc_14723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 32), 'gc', False)
        # Getting the type of 'x' (line 673)
        x_14724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 36), 'x', False)
        # Getting the type of 'y' (line 673)
        y_14725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 39), 'y', False)
        # Getting the type of 's' (line 673)
        s_14726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 42), 's', False)
        # Getting the type of 'prop' (line 673)
        prop_14727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 45), 'prop', False)
        # Getting the type of 'angle' (line 673)
        angle_14728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 51), 'angle', False)
        # Getting the type of 'ismath' (line 673)
        ismath_14729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 58), 'ismath', False)
        # Processing the call keyword arguments (line 673)
        kwargs_14730 = {}
        # Getting the type of 'self' (line 673)
        self_14721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), 'self', False)
        # Obtaining the member '_draw_text_as_path' of a type (line 673)
        _draw_text_as_path_14722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 8), self_14721, '_draw_text_as_path')
        # Calling _draw_text_as_path(args, kwargs) (line 673)
        _draw_text_as_path_call_result_14731 = invoke(stypy.reporting.localization.Localization(__file__, 673, 8), _draw_text_as_path_14722, *[gc_14723, x_14724, y_14725, s_14726, prop_14727, angle_14728, ismath_14729], **kwargs_14730)
        
        
        # ################# End of 'draw_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_text' in the type store
        # Getting the type of 'stypy_return_type' (line 632)
        stypy_return_type_14732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14732)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_text'
        return stypy_return_type_14732


    @norecursion
    def _get_text_path_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text_path_transform'
        module_type_store = module_type_store.open_function_context('_get_text_path_transform', 675, 4, False)
        # Assigning a type to the variable 'self' (line 676)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 676, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase._get_text_path_transform.__dict__.__setitem__('stypy_localization', localization)
        RendererBase._get_text_path_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase._get_text_path_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase._get_text_path_transform.__dict__.__setitem__('stypy_function_name', 'RendererBase._get_text_path_transform')
        RendererBase._get_text_path_transform.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 's', 'prop', 'angle', 'ismath'])
        RendererBase._get_text_path_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase._get_text_path_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase._get_text_path_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase._get_text_path_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase._get_text_path_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase._get_text_path_transform.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase._get_text_path_transform', ['x', 'y', 's', 'prop', 'angle', 'ismath'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text_path_transform', localization, ['x', 'y', 's', 'prop', 'angle', 'ismath'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text_path_transform(...)' code ##################

        unicode_14733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, (-1)), 'unicode', u'\n        return the text path and transform\n\n        Parameters\n        ----------\n        prop : `matplotlib.font_manager.FontProperties`\n          font property\n\n        s : str\n          text to be converted\n\n        usetex : bool\n          If True, use matplotlib usetex mode.\n\n        ismath : bool\n          If True, use mathtext parser. If "TeX", use *usetex* mode.\n        ')
        
        # Assigning a Attribute to a Name (line 694):
        
        # Assigning a Attribute to a Name (line 694):
        
        # Assigning a Attribute to a Name (line 694):
        # Getting the type of 'self' (line 694)
        self_14734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 20), 'self')
        # Obtaining the member '_text2path' of a type (line 694)
        _text2path_14735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 20), self_14734, '_text2path')
        # Assigning a type to the variable 'text2path' (line 694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 8), 'text2path', _text2path_14735)
        
        # Assigning a Call to a Name (line 695):
        
        # Assigning a Call to a Name (line 695):
        
        # Assigning a Call to a Name (line 695):
        
        # Call to points_to_pixels(...): (line 695)
        # Processing the call arguments (line 695)
        
        # Call to get_size_in_points(...): (line 695)
        # Processing the call keyword arguments (line 695)
        kwargs_14740 = {}
        # Getting the type of 'prop' (line 695)
        prop_14738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 41), 'prop', False)
        # Obtaining the member 'get_size_in_points' of a type (line 695)
        get_size_in_points_14739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 41), prop_14738, 'get_size_in_points')
        # Calling get_size_in_points(args, kwargs) (line 695)
        get_size_in_points_call_result_14741 = invoke(stypy.reporting.localization.Localization(__file__, 695, 41), get_size_in_points_14739, *[], **kwargs_14740)
        
        # Processing the call keyword arguments (line 695)
        kwargs_14742 = {}
        # Getting the type of 'self' (line 695)
        self_14736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 19), 'self', False)
        # Obtaining the member 'points_to_pixels' of a type (line 695)
        points_to_pixels_14737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 19), self_14736, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 695)
        points_to_pixels_call_result_14743 = invoke(stypy.reporting.localization.Localization(__file__, 695, 19), points_to_pixels_14737, *[get_size_in_points_call_result_14741], **kwargs_14742)
        
        # Assigning a type to the variable 'fontsize' (line 695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 695, 8), 'fontsize', points_to_pixels_call_result_14743)
        
        
        # Getting the type of 'ismath' (line 697)
        ismath_14744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 11), 'ismath')
        unicode_14745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 21), 'unicode', u'TeX')
        # Applying the binary operator '==' (line 697)
        result_eq_14746 = python_operator(stypy.reporting.localization.Localization(__file__, 697, 11), '==', ismath_14744, unicode_14745)
        
        # Testing the type of an if condition (line 697)
        if_condition_14747 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 697, 8), result_eq_14746)
        # Assigning a type to the variable 'if_condition_14747' (line 697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 8), 'if_condition_14747', if_condition_14747)
        # SSA begins for if statement (line 697)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 698):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_text_path(...): (line 698)
        # Processing the call arguments (line 698)
        # Getting the type of 'prop' (line 698)
        prop_14750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 51), 'prop', False)
        # Getting the type of 's' (line 698)
        s_14751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 57), 's', False)
        # Processing the call keyword arguments (line 698)
        # Getting the type of 'False' (line 698)
        False_14752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 67), 'False', False)
        keyword_14753 = False_14752
        # Getting the type of 'True' (line 699)
        True_14754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 58), 'True', False)
        keyword_14755 = True_14754
        kwargs_14756 = {'ismath': keyword_14753, 'usetex': keyword_14755}
        # Getting the type of 'text2path' (line 698)
        text2path_14748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 27), 'text2path', False)
        # Obtaining the member 'get_text_path' of a type (line 698)
        get_text_path_14749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 27), text2path_14748, 'get_text_path')
        # Calling get_text_path(args, kwargs) (line 698)
        get_text_path_call_result_14757 = invoke(stypy.reporting.localization.Localization(__file__, 698, 27), get_text_path_14749, *[prop_14750, s_14751], **kwargs_14756)
        
        # Assigning a type to the variable 'call_assignment_13706' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'call_assignment_13706', get_text_path_call_result_14757)
        
        # Assigning a Call to a Name (line 698):
        
        # Assigning a Call to a Name (line 698):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_14760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 12), 'int')
        # Processing the call keyword arguments
        kwargs_14761 = {}
        # Getting the type of 'call_assignment_13706' (line 698)
        call_assignment_13706_14758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'call_assignment_13706', False)
        # Obtaining the member '__getitem__' of a type (line 698)
        getitem___14759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 12), call_assignment_13706_14758, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_14762 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___14759, *[int_14760], **kwargs_14761)
        
        # Assigning a type to the variable 'call_assignment_13707' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'call_assignment_13707', getitem___call_result_14762)
        
        # Assigning a Name to a Name (line 698):
        
        # Assigning a Name to a Name (line 698):
        # Getting the type of 'call_assignment_13707' (line 698)
        call_assignment_13707_14763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'call_assignment_13707')
        # Assigning a type to the variable 'verts' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'verts', call_assignment_13707_14763)
        
        # Assigning a Call to a Name (line 698):
        
        # Assigning a Call to a Name (line 698):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_14766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 12), 'int')
        # Processing the call keyword arguments
        kwargs_14767 = {}
        # Getting the type of 'call_assignment_13706' (line 698)
        call_assignment_13706_14764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'call_assignment_13706', False)
        # Obtaining the member '__getitem__' of a type (line 698)
        getitem___14765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 12), call_assignment_13706_14764, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_14768 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___14765, *[int_14766], **kwargs_14767)
        
        # Assigning a type to the variable 'call_assignment_13708' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'call_assignment_13708', getitem___call_result_14768)
        
        # Assigning a Name to a Name (line 698):
        
        # Assigning a Name to a Name (line 698):
        # Getting the type of 'call_assignment_13708' (line 698)
        call_assignment_13708_14769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'call_assignment_13708')
        # Assigning a type to the variable 'codes' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 19), 'codes', call_assignment_13708_14769)
        # SSA branch for the else part of an if statement (line 697)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 701):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_text_path(...): (line 701)
        # Processing the call arguments (line 701)
        # Getting the type of 'prop' (line 701)
        prop_14772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 51), 'prop', False)
        # Getting the type of 's' (line 701)
        s_14773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 57), 's', False)
        # Processing the call keyword arguments (line 701)
        # Getting the type of 'ismath' (line 701)
        ismath_14774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 67), 'ismath', False)
        keyword_14775 = ismath_14774
        # Getting the type of 'False' (line 702)
        False_14776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 58), 'False', False)
        keyword_14777 = False_14776
        kwargs_14778 = {'ismath': keyword_14775, 'usetex': keyword_14777}
        # Getting the type of 'text2path' (line 701)
        text2path_14770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 27), 'text2path', False)
        # Obtaining the member 'get_text_path' of a type (line 701)
        get_text_path_14771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 27), text2path_14770, 'get_text_path')
        # Calling get_text_path(args, kwargs) (line 701)
        get_text_path_call_result_14779 = invoke(stypy.reporting.localization.Localization(__file__, 701, 27), get_text_path_14771, *[prop_14772, s_14773], **kwargs_14778)
        
        # Assigning a type to the variable 'call_assignment_13709' (line 701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 701, 12), 'call_assignment_13709', get_text_path_call_result_14779)
        
        # Assigning a Call to a Name (line 701):
        
        # Assigning a Call to a Name (line 701):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_14782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 12), 'int')
        # Processing the call keyword arguments
        kwargs_14783 = {}
        # Getting the type of 'call_assignment_13709' (line 701)
        call_assignment_13709_14780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 12), 'call_assignment_13709', False)
        # Obtaining the member '__getitem__' of a type (line 701)
        getitem___14781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 12), call_assignment_13709_14780, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_14784 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___14781, *[int_14782], **kwargs_14783)
        
        # Assigning a type to the variable 'call_assignment_13710' (line 701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 701, 12), 'call_assignment_13710', getitem___call_result_14784)
        
        # Assigning a Name to a Name (line 701):
        
        # Assigning a Name to a Name (line 701):
        # Getting the type of 'call_assignment_13710' (line 701)
        call_assignment_13710_14785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 12), 'call_assignment_13710')
        # Assigning a type to the variable 'verts' (line 701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 701, 12), 'verts', call_assignment_13710_14785)
        
        # Assigning a Call to a Name (line 701):
        
        # Assigning a Call to a Name (line 701):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_14788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 12), 'int')
        # Processing the call keyword arguments
        kwargs_14789 = {}
        # Getting the type of 'call_assignment_13709' (line 701)
        call_assignment_13709_14786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 12), 'call_assignment_13709', False)
        # Obtaining the member '__getitem__' of a type (line 701)
        getitem___14787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 12), call_assignment_13709_14786, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_14790 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___14787, *[int_14788], **kwargs_14789)
        
        # Assigning a type to the variable 'call_assignment_13711' (line 701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 701, 12), 'call_assignment_13711', getitem___call_result_14790)
        
        # Assigning a Name to a Name (line 701):
        
        # Assigning a Name to a Name (line 701):
        # Getting the type of 'call_assignment_13711' (line 701)
        call_assignment_13711_14791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 12), 'call_assignment_13711')
        # Assigning a type to the variable 'codes' (line 701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 701, 19), 'codes', call_assignment_13711_14791)
        # SSA join for if statement (line 697)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 704):
        
        # Assigning a Call to a Name (line 704):
        
        # Assigning a Call to a Name (line 704):
        
        # Call to Path(...): (line 704)
        # Processing the call arguments (line 704)
        # Getting the type of 'verts' (line 704)
        verts_14793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 20), 'verts', False)
        # Getting the type of 'codes' (line 704)
        codes_14794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 27), 'codes', False)
        # Processing the call keyword arguments (line 704)
        kwargs_14795 = {}
        # Getting the type of 'Path' (line 704)
        Path_14792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 15), 'Path', False)
        # Calling Path(args, kwargs) (line 704)
        Path_call_result_14796 = invoke(stypy.reporting.localization.Localization(__file__, 704, 15), Path_14792, *[verts_14793, codes_14794], **kwargs_14795)
        
        # Assigning a type to the variable 'path' (line 704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 8), 'path', Path_call_result_14796)
        
        # Assigning a Call to a Name (line 705):
        
        # Assigning a Call to a Name (line 705):
        
        # Assigning a Call to a Name (line 705):
        
        # Call to deg2rad(...): (line 705)
        # Processing the call arguments (line 705)
        # Getting the type of 'angle' (line 705)
        angle_14799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 27), 'angle', False)
        # Processing the call keyword arguments (line 705)
        kwargs_14800 = {}
        # Getting the type of 'np' (line 705)
        np_14797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 16), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 705)
        deg2rad_14798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 16), np_14797, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 705)
        deg2rad_call_result_14801 = invoke(stypy.reporting.localization.Localization(__file__, 705, 16), deg2rad_14798, *[angle_14799], **kwargs_14800)
        
        # Assigning a type to the variable 'angle' (line 705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 8), 'angle', deg2rad_call_result_14801)
        
        
        # Call to flipy(...): (line 706)
        # Processing the call keyword arguments (line 706)
        kwargs_14804 = {}
        # Getting the type of 'self' (line 706)
        self_14802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 11), 'self', False)
        # Obtaining the member 'flipy' of a type (line 706)
        flipy_14803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 11), self_14802, 'flipy')
        # Calling flipy(args, kwargs) (line 706)
        flipy_call_result_14805 = invoke(stypy.reporting.localization.Localization(__file__, 706, 11), flipy_14803, *[], **kwargs_14804)
        
        # Testing the type of an if condition (line 706)
        if_condition_14806 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 706, 8), flipy_call_result_14805)
        # Assigning a type to the variable 'if_condition_14806' (line 706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 8), 'if_condition_14806', if_condition_14806)
        # SSA begins for if statement (line 706)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 707):
        
        # Assigning a Call to a Name (line 707):
        
        # Assigning a Call to a Name (line 707):
        
        # Call to scale(...): (line 707)
        # Processing the call arguments (line 707)
        # Getting the type of 'fontsize' (line 707)
        fontsize_14811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 41), 'fontsize', False)
        # Getting the type of 'text2path' (line 707)
        text2path_14812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 52), 'text2path', False)
        # Obtaining the member 'FONT_SCALE' of a type (line 707)
        FONT_SCALE_14813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 52), text2path_14812, 'FONT_SCALE')
        # Applying the binary operator 'div' (line 707)
        result_div_14814 = python_operator(stypy.reporting.localization.Localization(__file__, 707, 41), 'div', fontsize_14811, FONT_SCALE_14813)
        
        # Getting the type of 'fontsize' (line 708)
        fontsize_14815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 41), 'fontsize', False)
        # Getting the type of 'text2path' (line 708)
        text2path_14816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 52), 'text2path', False)
        # Obtaining the member 'FONT_SCALE' of a type (line 708)
        FONT_SCALE_14817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 52), text2path_14816, 'FONT_SCALE')
        # Applying the binary operator 'div' (line 708)
        result_div_14818 = python_operator(stypy.reporting.localization.Localization(__file__, 708, 41), 'div', fontsize_14815, FONT_SCALE_14817)
        
        # Processing the call keyword arguments (line 707)
        kwargs_14819 = {}
        
        # Call to Affine2D(...): (line 707)
        # Processing the call keyword arguments (line 707)
        kwargs_14808 = {}
        # Getting the type of 'Affine2D' (line 707)
        Affine2D_14807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 24), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 707)
        Affine2D_call_result_14809 = invoke(stypy.reporting.localization.Localization(__file__, 707, 24), Affine2D_14807, *[], **kwargs_14808)
        
        # Obtaining the member 'scale' of a type (line 707)
        scale_14810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 24), Affine2D_call_result_14809, 'scale')
        # Calling scale(args, kwargs) (line 707)
        scale_call_result_14820 = invoke(stypy.reporting.localization.Localization(__file__, 707, 24), scale_14810, *[result_div_14814, result_div_14818], **kwargs_14819)
        
        # Assigning a type to the variable 'transform' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 12), 'transform', scale_call_result_14820)
        
        # Assigning a Call to a Name (line 709):
        
        # Assigning a Call to a Name (line 709):
        
        # Assigning a Call to a Name (line 709):
        
        # Call to translate(...): (line 709)
        # Processing the call arguments (line 709)
        # Getting the type of 'x' (line 709)
        x_14827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 58), 'x', False)
        # Getting the type of 'self' (line 709)
        self_14828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 61), 'self', False)
        # Obtaining the member 'height' of a type (line 709)
        height_14829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 61), self_14828, 'height')
        # Getting the type of 'y' (line 709)
        y_14830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 75), 'y', False)
        # Applying the binary operator '-' (line 709)
        result_sub_14831 = python_operator(stypy.reporting.localization.Localization(__file__, 709, 61), '-', height_14829, y_14830)
        
        # Processing the call keyword arguments (line 709)
        kwargs_14832 = {}
        
        # Call to rotate(...): (line 709)
        # Processing the call arguments (line 709)
        # Getting the type of 'angle' (line 709)
        angle_14823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 41), 'angle', False)
        # Processing the call keyword arguments (line 709)
        kwargs_14824 = {}
        # Getting the type of 'transform' (line 709)
        transform_14821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 24), 'transform', False)
        # Obtaining the member 'rotate' of a type (line 709)
        rotate_14822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 24), transform_14821, 'rotate')
        # Calling rotate(args, kwargs) (line 709)
        rotate_call_result_14825 = invoke(stypy.reporting.localization.Localization(__file__, 709, 24), rotate_14822, *[angle_14823], **kwargs_14824)
        
        # Obtaining the member 'translate' of a type (line 709)
        translate_14826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 24), rotate_call_result_14825, 'translate')
        # Calling translate(args, kwargs) (line 709)
        translate_call_result_14833 = invoke(stypy.reporting.localization.Localization(__file__, 709, 24), translate_14826, *[x_14827, result_sub_14831], **kwargs_14832)
        
        # Assigning a type to the variable 'transform' (line 709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 709, 12), 'transform', translate_call_result_14833)
        # SSA branch for the else part of an if statement (line 706)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 711):
        
        # Assigning a Call to a Name (line 711):
        
        # Assigning a Call to a Name (line 711):
        
        # Call to scale(...): (line 711)
        # Processing the call arguments (line 711)
        # Getting the type of 'fontsize' (line 711)
        fontsize_14838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 41), 'fontsize', False)
        # Getting the type of 'text2path' (line 711)
        text2path_14839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 52), 'text2path', False)
        # Obtaining the member 'FONT_SCALE' of a type (line 711)
        FONT_SCALE_14840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 52), text2path_14839, 'FONT_SCALE')
        # Applying the binary operator 'div' (line 711)
        result_div_14841 = python_operator(stypy.reporting.localization.Localization(__file__, 711, 41), 'div', fontsize_14838, FONT_SCALE_14840)
        
        # Getting the type of 'fontsize' (line 712)
        fontsize_14842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 41), 'fontsize', False)
        # Getting the type of 'text2path' (line 712)
        text2path_14843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 52), 'text2path', False)
        # Obtaining the member 'FONT_SCALE' of a type (line 712)
        FONT_SCALE_14844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 52), text2path_14843, 'FONT_SCALE')
        # Applying the binary operator 'div' (line 712)
        result_div_14845 = python_operator(stypy.reporting.localization.Localization(__file__, 712, 41), 'div', fontsize_14842, FONT_SCALE_14844)
        
        # Processing the call keyword arguments (line 711)
        kwargs_14846 = {}
        
        # Call to Affine2D(...): (line 711)
        # Processing the call keyword arguments (line 711)
        kwargs_14835 = {}
        # Getting the type of 'Affine2D' (line 711)
        Affine2D_14834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 24), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 711)
        Affine2D_call_result_14836 = invoke(stypy.reporting.localization.Localization(__file__, 711, 24), Affine2D_14834, *[], **kwargs_14835)
        
        # Obtaining the member 'scale' of a type (line 711)
        scale_14837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 24), Affine2D_call_result_14836, 'scale')
        # Calling scale(args, kwargs) (line 711)
        scale_call_result_14847 = invoke(stypy.reporting.localization.Localization(__file__, 711, 24), scale_14837, *[result_div_14841, result_div_14845], **kwargs_14846)
        
        # Assigning a type to the variable 'transform' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 12), 'transform', scale_call_result_14847)
        
        # Assigning a Call to a Name (line 713):
        
        # Assigning a Call to a Name (line 713):
        
        # Assigning a Call to a Name (line 713):
        
        # Call to translate(...): (line 713)
        # Processing the call arguments (line 713)
        # Getting the type of 'x' (line 713)
        x_14854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 58), 'x', False)
        # Getting the type of 'y' (line 713)
        y_14855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 61), 'y', False)
        # Processing the call keyword arguments (line 713)
        kwargs_14856 = {}
        
        # Call to rotate(...): (line 713)
        # Processing the call arguments (line 713)
        # Getting the type of 'angle' (line 713)
        angle_14850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 41), 'angle', False)
        # Processing the call keyword arguments (line 713)
        kwargs_14851 = {}
        # Getting the type of 'transform' (line 713)
        transform_14848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 24), 'transform', False)
        # Obtaining the member 'rotate' of a type (line 713)
        rotate_14849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 24), transform_14848, 'rotate')
        # Calling rotate(args, kwargs) (line 713)
        rotate_call_result_14852 = invoke(stypy.reporting.localization.Localization(__file__, 713, 24), rotate_14849, *[angle_14850], **kwargs_14851)
        
        # Obtaining the member 'translate' of a type (line 713)
        translate_14853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 24), rotate_call_result_14852, 'translate')
        # Calling translate(args, kwargs) (line 713)
        translate_call_result_14857 = invoke(stypy.reporting.localization.Localization(__file__, 713, 24), translate_14853, *[x_14854, y_14855], **kwargs_14856)
        
        # Assigning a type to the variable 'transform' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 12), 'transform', translate_call_result_14857)
        # SSA join for if statement (line 706)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 715)
        tuple_14858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 715)
        # Adding element type (line 715)
        # Getting the type of 'path' (line 715)
        path_14859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 15), 'path')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 715, 15), tuple_14858, path_14859)
        # Adding element type (line 715)
        # Getting the type of 'transform' (line 715)
        transform_14860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 21), 'transform')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 715, 15), tuple_14858, transform_14860)
        
        # Assigning a type to the variable 'stypy_return_type' (line 715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 8), 'stypy_return_type', tuple_14858)
        
        # ################# End of '_get_text_path_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text_path_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 675)
        stypy_return_type_14861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14861)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text_path_transform'
        return stypy_return_type_14861


    @norecursion
    def _draw_text_as_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_draw_text_as_path'
        module_type_store = module_type_store.open_function_context('_draw_text_as_path', 717, 4, False)
        # Assigning a type to the variable 'self' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase._draw_text_as_path.__dict__.__setitem__('stypy_localization', localization)
        RendererBase._draw_text_as_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase._draw_text_as_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase._draw_text_as_path.__dict__.__setitem__('stypy_function_name', 'RendererBase._draw_text_as_path')
        RendererBase._draw_text_as_path.__dict__.__setitem__('stypy_param_names_list', ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath'])
        RendererBase._draw_text_as_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase._draw_text_as_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase._draw_text_as_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase._draw_text_as_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase._draw_text_as_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase._draw_text_as_path.__dict__.__setitem__('stypy_declared_arg_number', 8)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase._draw_text_as_path', ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_draw_text_as_path', localization, ['gc', 'x', 'y', 's', 'prop', 'angle', 'ismath'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_draw_text_as_path(...)' code ##################

        unicode_14862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, (-1)), 'unicode', u'\n        draw the text by converting them to paths using textpath module.\n\n        Parameters\n        ----------\n        prop : `matplotlib.font_manager.FontProperties`\n          font property\n\n        s : str\n          text to be converted\n\n        usetex : bool\n          If True, use matplotlib usetex mode.\n\n        ismath : bool\n          If True, use mathtext parser. If "TeX", use *usetex* mode.\n        ')
        
        # Assigning a Call to a Tuple (line 735):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to _get_text_path_transform(...): (line 735)
        # Processing the call arguments (line 735)
        # Getting the type of 'x' (line 736)
        x_14865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 12), 'x', False)
        # Getting the type of 'y' (line 736)
        y_14866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 15), 'y', False)
        # Getting the type of 's' (line 736)
        s_14867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 18), 's', False)
        # Getting the type of 'prop' (line 736)
        prop_14868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 21), 'prop', False)
        # Getting the type of 'angle' (line 736)
        angle_14869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 27), 'angle', False)
        # Getting the type of 'ismath' (line 736)
        ismath_14870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 34), 'ismath', False)
        # Processing the call keyword arguments (line 735)
        kwargs_14871 = {}
        # Getting the type of 'self' (line 735)
        self_14863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 26), 'self', False)
        # Obtaining the member '_get_text_path_transform' of a type (line 735)
        _get_text_path_transform_14864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 26), self_14863, '_get_text_path_transform')
        # Calling _get_text_path_transform(args, kwargs) (line 735)
        _get_text_path_transform_call_result_14872 = invoke(stypy.reporting.localization.Localization(__file__, 735, 26), _get_text_path_transform_14864, *[x_14865, y_14866, s_14867, prop_14868, angle_14869, ismath_14870], **kwargs_14871)
        
        # Assigning a type to the variable 'call_assignment_13712' (line 735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'call_assignment_13712', _get_text_path_transform_call_result_14872)
        
        # Assigning a Call to a Name (line 735):
        
        # Assigning a Call to a Name (line 735):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_14875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 8), 'int')
        # Processing the call keyword arguments
        kwargs_14876 = {}
        # Getting the type of 'call_assignment_13712' (line 735)
        call_assignment_13712_14873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'call_assignment_13712', False)
        # Obtaining the member '__getitem__' of a type (line 735)
        getitem___14874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 8), call_assignment_13712_14873, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_14877 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___14874, *[int_14875], **kwargs_14876)
        
        # Assigning a type to the variable 'call_assignment_13713' (line 735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'call_assignment_13713', getitem___call_result_14877)
        
        # Assigning a Name to a Name (line 735):
        
        # Assigning a Name to a Name (line 735):
        # Getting the type of 'call_assignment_13713' (line 735)
        call_assignment_13713_14878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'call_assignment_13713')
        # Assigning a type to the variable 'path' (line 735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'path', call_assignment_13713_14878)
        
        # Assigning a Call to a Name (line 735):
        
        # Assigning a Call to a Name (line 735):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_14881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 8), 'int')
        # Processing the call keyword arguments
        kwargs_14882 = {}
        # Getting the type of 'call_assignment_13712' (line 735)
        call_assignment_13712_14879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'call_assignment_13712', False)
        # Obtaining the member '__getitem__' of a type (line 735)
        getitem___14880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 8), call_assignment_13712_14879, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_14883 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___14880, *[int_14881], **kwargs_14882)
        
        # Assigning a type to the variable 'call_assignment_13714' (line 735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'call_assignment_13714', getitem___call_result_14883)
        
        # Assigning a Name to a Name (line 735):
        
        # Assigning a Name to a Name (line 735):
        # Getting the type of 'call_assignment_13714' (line 735)
        call_assignment_13714_14884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'call_assignment_13714')
        # Assigning a type to the variable 'transform' (line 735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 14), 'transform', call_assignment_13714_14884)
        
        # Assigning a Call to a Name (line 737):
        
        # Assigning a Call to a Name (line 737):
        
        # Assigning a Call to a Name (line 737):
        
        # Call to get_rgb(...): (line 737)
        # Processing the call keyword arguments (line 737)
        kwargs_14887 = {}
        # Getting the type of 'gc' (line 737)
        gc_14885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 16), 'gc', False)
        # Obtaining the member 'get_rgb' of a type (line 737)
        get_rgb_14886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 16), gc_14885, 'get_rgb')
        # Calling get_rgb(args, kwargs) (line 737)
        get_rgb_call_result_14888 = invoke(stypy.reporting.localization.Localization(__file__, 737, 16), get_rgb_14886, *[], **kwargs_14887)
        
        # Assigning a type to the variable 'color' (line 737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 8), 'color', get_rgb_call_result_14888)
        
        # Call to set_linewidth(...): (line 739)
        # Processing the call arguments (line 739)
        float_14891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 739, 25), 'float')
        # Processing the call keyword arguments (line 739)
        kwargs_14892 = {}
        # Getting the type of 'gc' (line 739)
        gc_14889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'gc', False)
        # Obtaining the member 'set_linewidth' of a type (line 739)
        set_linewidth_14890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 8), gc_14889, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 739)
        set_linewidth_call_result_14893 = invoke(stypy.reporting.localization.Localization(__file__, 739, 8), set_linewidth_14890, *[float_14891], **kwargs_14892)
        
        
        # Call to draw_path(...): (line 740)
        # Processing the call arguments (line 740)
        # Getting the type of 'gc' (line 740)
        gc_14896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 23), 'gc', False)
        # Getting the type of 'path' (line 740)
        path_14897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 27), 'path', False)
        # Getting the type of 'transform' (line 740)
        transform_14898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 33), 'transform', False)
        # Processing the call keyword arguments (line 740)
        # Getting the type of 'color' (line 740)
        color_14899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 52), 'color', False)
        keyword_14900 = color_14899
        kwargs_14901 = {'rgbFace': keyword_14900}
        # Getting the type of 'self' (line 740)
        self_14894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 8), 'self', False)
        # Obtaining the member 'draw_path' of a type (line 740)
        draw_path_14895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 8), self_14894, 'draw_path')
        # Calling draw_path(args, kwargs) (line 740)
        draw_path_call_result_14902 = invoke(stypy.reporting.localization.Localization(__file__, 740, 8), draw_path_14895, *[gc_14896, path_14897, transform_14898], **kwargs_14901)
        
        
        # ################# End of '_draw_text_as_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_draw_text_as_path' in the type store
        # Getting the type of 'stypy_return_type' (line 717)
        stypy_return_type_14903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_14903)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_draw_text_as_path'
        return stypy_return_type_14903


    @norecursion
    def get_text_width_height_descent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_text_width_height_descent'
        module_type_store = module_type_store.open_function_context('get_text_width_height_descent', 742, 4, False)
        # Assigning a type to the variable 'self' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.get_text_width_height_descent.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.get_text_width_height_descent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.get_text_width_height_descent.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.get_text_width_height_descent.__dict__.__setitem__('stypy_function_name', 'RendererBase.get_text_width_height_descent')
        RendererBase.get_text_width_height_descent.__dict__.__setitem__('stypy_param_names_list', ['s', 'prop', 'ismath'])
        RendererBase.get_text_width_height_descent.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.get_text_width_height_descent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.get_text_width_height_descent.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.get_text_width_height_descent.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.get_text_width_height_descent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.get_text_width_height_descent.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.get_text_width_height_descent', ['s', 'prop', 'ismath'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_text_width_height_descent', localization, ['s', 'prop', 'ismath'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_text_width_height_descent(...)' code ##################

        unicode_14904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 747, (-1)), 'unicode', u'\n        Get the width, height, and descent (offset from the bottom\n        to the baseline), in display coords, of the string *s* with\n        :class:`~matplotlib.font_manager.FontProperties` *prop*\n        ')
        
        
        # Getting the type of 'ismath' (line 748)
        ismath_14905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 11), 'ismath')
        unicode_14906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 21), 'unicode', u'TeX')
        # Applying the binary operator '==' (line 748)
        result_eq_14907 = python_operator(stypy.reporting.localization.Localization(__file__, 748, 11), '==', ismath_14905, unicode_14906)
        
        # Testing the type of an if condition (line 748)
        if_condition_14908 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 748, 8), result_eq_14907)
        # Assigning a type to the variable 'if_condition_14908' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 8), 'if_condition_14908', if_condition_14908)
        # SSA begins for if statement (line 748)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 750):
        
        # Assigning a Call to a Name (line 750):
        
        # Assigning a Call to a Name (line 750):
        
        # Call to get_size_in_points(...): (line 750)
        # Processing the call keyword arguments (line 750)
        kwargs_14911 = {}
        # Getting the type of 'prop' (line 750)
        prop_14909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 19), 'prop', False)
        # Obtaining the member 'get_size_in_points' of a type (line 750)
        get_size_in_points_14910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 19), prop_14909, 'get_size_in_points')
        # Calling get_size_in_points(args, kwargs) (line 750)
        get_size_in_points_call_result_14912 = invoke(stypy.reporting.localization.Localization(__file__, 750, 19), get_size_in_points_14910, *[], **kwargs_14911)
        
        # Assigning a type to the variable 'size' (line 750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 12), 'size', get_size_in_points_call_result_14912)
        
        # Assigning a Call to a Name (line 751):
        
        # Assigning a Call to a Name (line 751):
        
        # Assigning a Call to a Name (line 751):
        
        # Call to get_texmanager(...): (line 751)
        # Processing the call keyword arguments (line 751)
        kwargs_14916 = {}
        # Getting the type of 'self' (line 751)
        self_14913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 25), 'self', False)
        # Obtaining the member '_text2path' of a type (line 751)
        _text2path_14914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 25), self_14913, '_text2path')
        # Obtaining the member 'get_texmanager' of a type (line 751)
        get_texmanager_14915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 25), _text2path_14914, 'get_texmanager')
        # Calling get_texmanager(args, kwargs) (line 751)
        get_texmanager_call_result_14917 = invoke(stypy.reporting.localization.Localization(__file__, 751, 25), get_texmanager_14915, *[], **kwargs_14916)
        
        # Assigning a type to the variable 'texmanager' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 12), 'texmanager', get_texmanager_call_result_14917)
        
        # Assigning a Call to a Name (line 752):
        
        # Assigning a Call to a Name (line 752):
        
        # Assigning a Call to a Name (line 752):
        
        # Call to get_size_in_points(...): (line 752)
        # Processing the call keyword arguments (line 752)
        kwargs_14920 = {}
        # Getting the type of 'prop' (line 752)
        prop_14918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 23), 'prop', False)
        # Obtaining the member 'get_size_in_points' of a type (line 752)
        get_size_in_points_14919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 23), prop_14918, 'get_size_in_points')
        # Calling get_size_in_points(args, kwargs) (line 752)
        get_size_in_points_call_result_14921 = invoke(stypy.reporting.localization.Localization(__file__, 752, 23), get_size_in_points_14919, *[], **kwargs_14920)
        
        # Assigning a type to the variable 'fontsize' (line 752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 752, 12), 'fontsize', get_size_in_points_call_result_14921)
        
        # Assigning a Call to a Tuple (line 753):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_text_width_height_descent(...): (line 753)
        # Processing the call arguments (line 753)
        # Getting the type of 's' (line 754)
        s_14924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 16), 's', False)
        # Getting the type of 'fontsize' (line 754)
        fontsize_14925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 19), 'fontsize', False)
        # Processing the call keyword arguments (line 753)
        # Getting the type of 'self' (line 754)
        self_14926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 38), 'self', False)
        keyword_14927 = self_14926
        kwargs_14928 = {'renderer': keyword_14927}
        # Getting the type of 'texmanager' (line 753)
        texmanager_14922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 22), 'texmanager', False)
        # Obtaining the member 'get_text_width_height_descent' of a type (line 753)
        get_text_width_height_descent_14923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 22), texmanager_14922, 'get_text_width_height_descent')
        # Calling get_text_width_height_descent(args, kwargs) (line 753)
        get_text_width_height_descent_call_result_14929 = invoke(stypy.reporting.localization.Localization(__file__, 753, 22), get_text_width_height_descent_14923, *[s_14924, fontsize_14925], **kwargs_14928)
        
        # Assigning a type to the variable 'call_assignment_13715' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 12), 'call_assignment_13715', get_text_width_height_descent_call_result_14929)
        
        # Assigning a Call to a Name (line 753):
        
        # Assigning a Call to a Name (line 753):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_14932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 12), 'int')
        # Processing the call keyword arguments
        kwargs_14933 = {}
        # Getting the type of 'call_assignment_13715' (line 753)
        call_assignment_13715_14930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 12), 'call_assignment_13715', False)
        # Obtaining the member '__getitem__' of a type (line 753)
        getitem___14931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 12), call_assignment_13715_14930, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_14934 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___14931, *[int_14932], **kwargs_14933)
        
        # Assigning a type to the variable 'call_assignment_13716' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 12), 'call_assignment_13716', getitem___call_result_14934)
        
        # Assigning a Name to a Name (line 753):
        
        # Assigning a Name to a Name (line 753):
        # Getting the type of 'call_assignment_13716' (line 753)
        call_assignment_13716_14935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 12), 'call_assignment_13716')
        # Assigning a type to the variable 'w' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 12), 'w', call_assignment_13716_14935)
        
        # Assigning a Call to a Name (line 753):
        
        # Assigning a Call to a Name (line 753):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_14938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 12), 'int')
        # Processing the call keyword arguments
        kwargs_14939 = {}
        # Getting the type of 'call_assignment_13715' (line 753)
        call_assignment_13715_14936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 12), 'call_assignment_13715', False)
        # Obtaining the member '__getitem__' of a type (line 753)
        getitem___14937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 12), call_assignment_13715_14936, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_14940 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___14937, *[int_14938], **kwargs_14939)
        
        # Assigning a type to the variable 'call_assignment_13717' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 12), 'call_assignment_13717', getitem___call_result_14940)
        
        # Assigning a Name to a Name (line 753):
        
        # Assigning a Name to a Name (line 753):
        # Getting the type of 'call_assignment_13717' (line 753)
        call_assignment_13717_14941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 12), 'call_assignment_13717')
        # Assigning a type to the variable 'h' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 15), 'h', call_assignment_13717_14941)
        
        # Assigning a Call to a Name (line 753):
        
        # Assigning a Call to a Name (line 753):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_14944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 12), 'int')
        # Processing the call keyword arguments
        kwargs_14945 = {}
        # Getting the type of 'call_assignment_13715' (line 753)
        call_assignment_13715_14942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 12), 'call_assignment_13715', False)
        # Obtaining the member '__getitem__' of a type (line 753)
        getitem___14943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 12), call_assignment_13715_14942, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_14946 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___14943, *[int_14944], **kwargs_14945)
        
        # Assigning a type to the variable 'call_assignment_13718' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 12), 'call_assignment_13718', getitem___call_result_14946)
        
        # Assigning a Name to a Name (line 753):
        
        # Assigning a Name to a Name (line 753):
        # Getting the type of 'call_assignment_13718' (line 753)
        call_assignment_13718_14947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 12), 'call_assignment_13718')
        # Assigning a type to the variable 'd' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 18), 'd', call_assignment_13718_14947)
        
        # Obtaining an instance of the builtin type 'tuple' (line 755)
        tuple_14948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 755)
        # Adding element type (line 755)
        # Getting the type of 'w' (line 755)
        w_14949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 19), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 19), tuple_14948, w_14949)
        # Adding element type (line 755)
        # Getting the type of 'h' (line 755)
        h_14950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 22), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 19), tuple_14948, h_14950)
        # Adding element type (line 755)
        # Getting the type of 'd' (line 755)
        d_14951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 25), 'd')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 755, 19), tuple_14948, d_14951)
        
        # Assigning a type to the variable 'stypy_return_type' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'stypy_return_type', tuple_14948)
        # SSA join for if statement (line 748)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 757):
        
        # Assigning a Call to a Name (line 757):
        
        # Assigning a Call to a Name (line 757):
        
        # Call to points_to_pixels(...): (line 757)
        # Processing the call arguments (line 757)
        int_14954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 36), 'int')
        # Processing the call keyword arguments (line 757)
        kwargs_14955 = {}
        # Getting the type of 'self' (line 757)
        self_14952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 14), 'self', False)
        # Obtaining the member 'points_to_pixels' of a type (line 757)
        points_to_pixels_14953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 14), self_14952, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 757)
        points_to_pixels_call_result_14956 = invoke(stypy.reporting.localization.Localization(__file__, 757, 14), points_to_pixels_14953, *[int_14954], **kwargs_14955)
        
        # Assigning a type to the variable 'dpi' (line 757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'dpi', points_to_pixels_call_result_14956)
        
        # Getting the type of 'ismath' (line 758)
        ismath_14957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 11), 'ismath')
        # Testing the type of an if condition (line 758)
        if_condition_14958 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 758, 8), ismath_14957)
        # Assigning a type to the variable 'if_condition_14958' (line 758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 758, 8), 'if_condition_14958', if_condition_14958)
        # SSA begins for if statement (line 758)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 759):
        
        # Assigning a Call to a Name (line 759):
        
        # Assigning a Call to a Name (line 759):
        
        # Call to parse(...): (line 759)
        # Processing the call arguments (line 759)
        # Getting the type of 's' (line 759)
        s_14963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 57), 's', False)
        # Getting the type of 'dpi' (line 759)
        dpi_14964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 60), 'dpi', False)
        # Getting the type of 'prop' (line 759)
        prop_14965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 65), 'prop', False)
        # Processing the call keyword arguments (line 759)
        kwargs_14966 = {}
        # Getting the type of 'self' (line 759)
        self_14959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 19), 'self', False)
        # Obtaining the member '_text2path' of a type (line 759)
        _text2path_14960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 19), self_14959, '_text2path')
        # Obtaining the member 'mathtext_parser' of a type (line 759)
        mathtext_parser_14961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 19), _text2path_14960, 'mathtext_parser')
        # Obtaining the member 'parse' of a type (line 759)
        parse_14962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 19), mathtext_parser_14961, 'parse')
        # Calling parse(args, kwargs) (line 759)
        parse_call_result_14967 = invoke(stypy.reporting.localization.Localization(__file__, 759, 19), parse_14962, *[s_14963, dpi_14964, prop_14965], **kwargs_14966)
        
        # Assigning a type to the variable 'dims' (line 759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 12), 'dims', parse_call_result_14967)
        
        # Obtaining the type of the subscript
        int_14968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 760, 24), 'int')
        int_14969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 760, 26), 'int')
        slice_14970 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 760, 19), int_14968, int_14969, None)
        # Getting the type of 'dims' (line 760)
        dims_14971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 19), 'dims')
        # Obtaining the member '__getitem__' of a type (line 760)
        getitem___14972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 19), dims_14971, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 760)
        subscript_call_result_14973 = invoke(stypy.reporting.localization.Localization(__file__, 760, 19), getitem___14972, slice_14970)
        
        # Assigning a type to the variable 'stypy_return_type' (line 760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 760, 12), 'stypy_return_type', subscript_call_result_14973)
        # SSA join for if statement (line 758)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 762):
        
        # Assigning a Call to a Name (line 762):
        
        # Assigning a Call to a Name (line 762):
        
        # Call to _get_hinting_flag(...): (line 762)
        # Processing the call keyword arguments (line 762)
        kwargs_14977 = {}
        # Getting the type of 'self' (line 762)
        self_14974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 16), 'self', False)
        # Obtaining the member '_text2path' of a type (line 762)
        _text2path_14975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 16), self_14974, '_text2path')
        # Obtaining the member '_get_hinting_flag' of a type (line 762)
        _get_hinting_flag_14976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 16), _text2path_14975, '_get_hinting_flag')
        # Calling _get_hinting_flag(args, kwargs) (line 762)
        _get_hinting_flag_call_result_14978 = invoke(stypy.reporting.localization.Localization(__file__, 762, 16), _get_hinting_flag_14976, *[], **kwargs_14977)
        
        # Assigning a type to the variable 'flags' (line 762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 8), 'flags', _get_hinting_flag_call_result_14978)
        
        # Assigning a Call to a Name (line 763):
        
        # Assigning a Call to a Name (line 763):
        
        # Assigning a Call to a Name (line 763):
        
        # Call to _get_font(...): (line 763)
        # Processing the call arguments (line 763)
        # Getting the type of 'prop' (line 763)
        prop_14982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 41), 'prop', False)
        # Processing the call keyword arguments (line 763)
        kwargs_14983 = {}
        # Getting the type of 'self' (line 763)
        self_14979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 15), 'self', False)
        # Obtaining the member '_text2path' of a type (line 763)
        _text2path_14980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 15), self_14979, '_text2path')
        # Obtaining the member '_get_font' of a type (line 763)
        _get_font_14981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 15), _text2path_14980, '_get_font')
        # Calling _get_font(args, kwargs) (line 763)
        _get_font_call_result_14984 = invoke(stypy.reporting.localization.Localization(__file__, 763, 15), _get_font_14981, *[prop_14982], **kwargs_14983)
        
        # Assigning a type to the variable 'font' (line 763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 8), 'font', _get_font_call_result_14984)
        
        # Assigning a Call to a Name (line 764):
        
        # Assigning a Call to a Name (line 764):
        
        # Assigning a Call to a Name (line 764):
        
        # Call to get_size_in_points(...): (line 764)
        # Processing the call keyword arguments (line 764)
        kwargs_14987 = {}
        # Getting the type of 'prop' (line 764)
        prop_14985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 15), 'prop', False)
        # Obtaining the member 'get_size_in_points' of a type (line 764)
        get_size_in_points_14986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 15), prop_14985, 'get_size_in_points')
        # Calling get_size_in_points(args, kwargs) (line 764)
        get_size_in_points_call_result_14988 = invoke(stypy.reporting.localization.Localization(__file__, 764, 15), get_size_in_points_14986, *[], **kwargs_14987)
        
        # Assigning a type to the variable 'size' (line 764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 8), 'size', get_size_in_points_call_result_14988)
        
        # Call to set_size(...): (line 765)
        # Processing the call arguments (line 765)
        # Getting the type of 'size' (line 765)
        size_14991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 22), 'size', False)
        # Getting the type of 'dpi' (line 765)
        dpi_14992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 28), 'dpi', False)
        # Processing the call keyword arguments (line 765)
        kwargs_14993 = {}
        # Getting the type of 'font' (line 765)
        font_14989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 8), 'font', False)
        # Obtaining the member 'set_size' of a type (line 765)
        set_size_14990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 8), font_14989, 'set_size')
        # Calling set_size(args, kwargs) (line 765)
        set_size_call_result_14994 = invoke(stypy.reporting.localization.Localization(__file__, 765, 8), set_size_14990, *[size_14991, dpi_14992], **kwargs_14993)
        
        
        # Call to set_text(...): (line 767)
        # Processing the call arguments (line 767)
        # Getting the type of 's' (line 767)
        s_14997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 22), 's', False)
        float_14998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 25), 'float')
        # Processing the call keyword arguments (line 767)
        # Getting the type of 'flags' (line 767)
        flags_14999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 36), 'flags', False)
        keyword_15000 = flags_14999
        kwargs_15001 = {'flags': keyword_15000}
        # Getting the type of 'font' (line 767)
        font_14995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 8), 'font', False)
        # Obtaining the member 'set_text' of a type (line 767)
        set_text_14996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 767, 8), font_14995, 'set_text')
        # Calling set_text(args, kwargs) (line 767)
        set_text_call_result_15002 = invoke(stypy.reporting.localization.Localization(__file__, 767, 8), set_text_14996, *[s_14997, float_14998], **kwargs_15001)
        
        
        # Assigning a Call to a Tuple (line 768):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_width_height(...): (line 768)
        # Processing the call keyword arguments (line 768)
        kwargs_15005 = {}
        # Getting the type of 'font' (line 768)
        font_15003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 15), 'font', False)
        # Obtaining the member 'get_width_height' of a type (line 768)
        get_width_height_15004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 15), font_15003, 'get_width_height')
        # Calling get_width_height(args, kwargs) (line 768)
        get_width_height_call_result_15006 = invoke(stypy.reporting.localization.Localization(__file__, 768, 15), get_width_height_15004, *[], **kwargs_15005)
        
        # Assigning a type to the variable 'call_assignment_13719' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_13719', get_width_height_call_result_15006)
        
        # Assigning a Call to a Name (line 768):
        
        # Assigning a Call to a Name (line 768):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_15009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, 8), 'int')
        # Processing the call keyword arguments
        kwargs_15010 = {}
        # Getting the type of 'call_assignment_13719' (line 768)
        call_assignment_13719_15007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_13719', False)
        # Obtaining the member '__getitem__' of a type (line 768)
        getitem___15008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 8), call_assignment_13719_15007, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_15011 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___15008, *[int_15009], **kwargs_15010)
        
        # Assigning a type to the variable 'call_assignment_13720' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_13720', getitem___call_result_15011)
        
        # Assigning a Name to a Name (line 768):
        
        # Assigning a Name to a Name (line 768):
        # Getting the type of 'call_assignment_13720' (line 768)
        call_assignment_13720_15012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_13720')
        # Assigning a type to the variable 'w' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'w', call_assignment_13720_15012)
        
        # Assigning a Call to a Name (line 768):
        
        # Assigning a Call to a Name (line 768):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_15015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, 8), 'int')
        # Processing the call keyword arguments
        kwargs_15016 = {}
        # Getting the type of 'call_assignment_13719' (line 768)
        call_assignment_13719_15013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_13719', False)
        # Obtaining the member '__getitem__' of a type (line 768)
        getitem___15014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 8), call_assignment_13719_15013, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_15017 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___15014, *[int_15015], **kwargs_15016)
        
        # Assigning a type to the variable 'call_assignment_13721' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_13721', getitem___call_result_15017)
        
        # Assigning a Name to a Name (line 768):
        
        # Assigning a Name to a Name (line 768):
        # Getting the type of 'call_assignment_13721' (line 768)
        call_assignment_13721_15018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_13721')
        # Assigning a type to the variable 'h' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 11), 'h', call_assignment_13721_15018)
        
        # Assigning a Call to a Name (line 769):
        
        # Assigning a Call to a Name (line 769):
        
        # Assigning a Call to a Name (line 769):
        
        # Call to get_descent(...): (line 769)
        # Processing the call keyword arguments (line 769)
        kwargs_15021 = {}
        # Getting the type of 'font' (line 769)
        font_15019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 12), 'font', False)
        # Obtaining the member 'get_descent' of a type (line 769)
        get_descent_15020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 12), font_15019, 'get_descent')
        # Calling get_descent(args, kwargs) (line 769)
        get_descent_call_result_15022 = invoke(stypy.reporting.localization.Localization(__file__, 769, 12), get_descent_15020, *[], **kwargs_15021)
        
        # Assigning a type to the variable 'd' (line 769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'd', get_descent_call_result_15022)
        
        # Getting the type of 'w' (line 770)
        w_15023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 8), 'w')
        float_15024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 13), 'float')
        # Applying the binary operator 'div=' (line 770)
        result_div_15025 = python_operator(stypy.reporting.localization.Localization(__file__, 770, 8), 'div=', w_15023, float_15024)
        # Assigning a type to the variable 'w' (line 770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 8), 'w', result_div_15025)
        
        
        # Getting the type of 'h' (line 771)
        h_15026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 8), 'h')
        float_15027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 13), 'float')
        # Applying the binary operator 'div=' (line 771)
        result_div_15028 = python_operator(stypy.reporting.localization.Localization(__file__, 771, 8), 'div=', h_15026, float_15027)
        # Assigning a type to the variable 'h' (line 771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 8), 'h', result_div_15028)
        
        
        # Getting the type of 'd' (line 772)
        d_15029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 8), 'd')
        float_15030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 772, 13), 'float')
        # Applying the binary operator 'div=' (line 772)
        result_div_15031 = python_operator(stypy.reporting.localization.Localization(__file__, 772, 8), 'div=', d_15029, float_15030)
        # Assigning a type to the variable 'd' (line 772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 8), 'd', result_div_15031)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 773)
        tuple_15032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 773, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 773)
        # Adding element type (line 773)
        # Getting the type of 'w' (line 773)
        w_15033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 15), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 773, 15), tuple_15032, w_15033)
        # Adding element type (line 773)
        # Getting the type of 'h' (line 773)
        h_15034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 18), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 773, 15), tuple_15032, h_15034)
        # Adding element type (line 773)
        # Getting the type of 'd' (line 773)
        d_15035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 21), 'd')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 773, 15), tuple_15032, d_15035)
        
        # Assigning a type to the variable 'stypy_return_type' (line 773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 773, 8), 'stypy_return_type', tuple_15032)
        
        # ################# End of 'get_text_width_height_descent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_text_width_height_descent' in the type store
        # Getting the type of 'stypy_return_type' (line 742)
        stypy_return_type_15036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15036)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_text_width_height_descent'
        return stypy_return_type_15036


    @norecursion
    def flipy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'flipy'
        module_type_store = module_type_store.open_function_context('flipy', 775, 4, False)
        # Assigning a type to the variable 'self' (line 776)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 776, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.flipy.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.flipy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.flipy.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.flipy.__dict__.__setitem__('stypy_function_name', 'RendererBase.flipy')
        RendererBase.flipy.__dict__.__setitem__('stypy_param_names_list', [])
        RendererBase.flipy.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.flipy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.flipy.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.flipy.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.flipy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.flipy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.flipy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'flipy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'flipy(...)' code ##################

        unicode_15037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 780, (-1)), 'unicode', u'\n        Return true if y small numbers are top for renderer Is used\n        for drawing text (:mod:`matplotlib.text`) and images\n        (:mod:`matplotlib.image`) only\n        ')
        # Getting the type of 'True' (line 781)
        True_15038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 8), 'stypy_return_type', True_15038)
        
        # ################# End of 'flipy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'flipy' in the type store
        # Getting the type of 'stypy_return_type' (line 775)
        stypy_return_type_15039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15039)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'flipy'
        return stypy_return_type_15039


    @norecursion
    def get_canvas_width_height(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_canvas_width_height'
        module_type_store = module_type_store.open_function_context('get_canvas_width_height', 783, 4, False)
        # Assigning a type to the variable 'self' (line 784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 784, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.get_canvas_width_height.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.get_canvas_width_height.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.get_canvas_width_height.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.get_canvas_width_height.__dict__.__setitem__('stypy_function_name', 'RendererBase.get_canvas_width_height')
        RendererBase.get_canvas_width_height.__dict__.__setitem__('stypy_param_names_list', [])
        RendererBase.get_canvas_width_height.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.get_canvas_width_height.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.get_canvas_width_height.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.get_canvas_width_height.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.get_canvas_width_height.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.get_canvas_width_height.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.get_canvas_width_height', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_canvas_width_height', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_canvas_width_height(...)' code ##################

        unicode_15040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 784, 8), 'unicode', u'return the canvas width and height in display coords')
        
        # Obtaining an instance of the builtin type 'tuple' (line 785)
        tuple_15041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 785)
        # Adding element type (line 785)
        int_15042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 15), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 785, 15), tuple_15041, int_15042)
        # Adding element type (line 785)
        int_15043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 785, 15), tuple_15041, int_15043)
        
        # Assigning a type to the variable 'stypy_return_type' (line 785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 785, 8), 'stypy_return_type', tuple_15041)
        
        # ################# End of 'get_canvas_width_height(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_canvas_width_height' in the type store
        # Getting the type of 'stypy_return_type' (line 783)
        stypy_return_type_15044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15044)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_canvas_width_height'
        return stypy_return_type_15044


    @norecursion
    def get_texmanager(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_texmanager'
        module_type_store = module_type_store.open_function_context('get_texmanager', 787, 4, False)
        # Assigning a type to the variable 'self' (line 788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.get_texmanager.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.get_texmanager.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.get_texmanager.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.get_texmanager.__dict__.__setitem__('stypy_function_name', 'RendererBase.get_texmanager')
        RendererBase.get_texmanager.__dict__.__setitem__('stypy_param_names_list', [])
        RendererBase.get_texmanager.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.get_texmanager.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.get_texmanager.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.get_texmanager.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.get_texmanager.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.get_texmanager.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.get_texmanager', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_texmanager', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_texmanager(...)' code ##################

        unicode_15045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 790, (-1)), 'unicode', u'\n        return the :class:`matplotlib.texmanager.TexManager` instance\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 791)
        # Getting the type of 'self' (line 791)
        self_15046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 11), 'self')
        # Obtaining the member '_texmanager' of a type (line 791)
        _texmanager_15047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 11), self_15046, '_texmanager')
        # Getting the type of 'None' (line 791)
        None_15048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 31), 'None')
        
        (may_be_15049, more_types_in_union_15050) = may_be_none(_texmanager_15047, None_15048)

        if may_be_15049:

            if more_types_in_union_15050:
                # Runtime conditional SSA (line 791)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 792, 12))
            
            # 'from matplotlib.texmanager import TexManager' statement (line 792)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
            import_15051 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 792, 12), 'matplotlib.texmanager')

            if (type(import_15051) is not StypyTypeError):

                if (import_15051 != 'pyd_module'):
                    __import__(import_15051)
                    sys_modules_15052 = sys.modules[import_15051]
                    import_from_module(stypy.reporting.localization.Localization(__file__, 792, 12), 'matplotlib.texmanager', sys_modules_15052.module_type_store, module_type_store, ['TexManager'])
                    nest_module(stypy.reporting.localization.Localization(__file__, 792, 12), __file__, sys_modules_15052, sys_modules_15052.module_type_store, module_type_store)
                else:
                    from matplotlib.texmanager import TexManager

                    import_from_module(stypy.reporting.localization.Localization(__file__, 792, 12), 'matplotlib.texmanager', None, module_type_store, ['TexManager'], [TexManager])

            else:
                # Assigning a type to the variable 'matplotlib.texmanager' (line 792)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 12), 'matplotlib.texmanager', import_15051)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
            
            
            # Assigning a Call to a Attribute (line 793):
            
            # Assigning a Call to a Attribute (line 793):
            
            # Assigning a Call to a Attribute (line 793):
            
            # Call to TexManager(...): (line 793)
            # Processing the call keyword arguments (line 793)
            kwargs_15054 = {}
            # Getting the type of 'TexManager' (line 793)
            TexManager_15053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 31), 'TexManager', False)
            # Calling TexManager(args, kwargs) (line 793)
            TexManager_call_result_15055 = invoke(stypy.reporting.localization.Localization(__file__, 793, 31), TexManager_15053, *[], **kwargs_15054)
            
            # Getting the type of 'self' (line 793)
            self_15056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 12), 'self')
            # Setting the type of the member '_texmanager' of a type (line 793)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 12), self_15056, '_texmanager', TexManager_call_result_15055)

            if more_types_in_union_15050:
                # SSA join for if statement (line 791)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 794)
        self_15057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 15), 'self')
        # Obtaining the member '_texmanager' of a type (line 794)
        _texmanager_15058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 15), self_15057, '_texmanager')
        # Assigning a type to the variable 'stypy_return_type' (line 794)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 8), 'stypy_return_type', _texmanager_15058)
        
        # ################# End of 'get_texmanager(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_texmanager' in the type store
        # Getting the type of 'stypy_return_type' (line 787)
        stypy_return_type_15059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15059)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_texmanager'
        return stypy_return_type_15059


    @norecursion
    def new_gc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_gc'
        module_type_store = module_type_store.open_function_context('new_gc', 796, 4, False)
        # Assigning a type to the variable 'self' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.new_gc.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.new_gc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.new_gc.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.new_gc.__dict__.__setitem__('stypy_function_name', 'RendererBase.new_gc')
        RendererBase.new_gc.__dict__.__setitem__('stypy_param_names_list', [])
        RendererBase.new_gc.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.new_gc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.new_gc.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.new_gc.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.new_gc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.new_gc.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.new_gc', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_gc', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_gc(...)' code ##################

        unicode_15060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, (-1)), 'unicode', u'\n        Return an instance of a :class:`GraphicsContextBase`\n        ')
        
        # Call to GraphicsContextBase(...): (line 800)
        # Processing the call keyword arguments (line 800)
        kwargs_15062 = {}
        # Getting the type of 'GraphicsContextBase' (line 800)
        GraphicsContextBase_15061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 15), 'GraphicsContextBase', False)
        # Calling GraphicsContextBase(args, kwargs) (line 800)
        GraphicsContextBase_call_result_15063 = invoke(stypy.reporting.localization.Localization(__file__, 800, 15), GraphicsContextBase_15061, *[], **kwargs_15062)
        
        # Assigning a type to the variable 'stypy_return_type' (line 800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 800, 8), 'stypy_return_type', GraphicsContextBase_call_result_15063)
        
        # ################# End of 'new_gc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_gc' in the type store
        # Getting the type of 'stypy_return_type' (line 796)
        stypy_return_type_15064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15064)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_gc'
        return stypy_return_type_15064


    @norecursion
    def points_to_pixels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'points_to_pixels'
        module_type_store = module_type_store.open_function_context('points_to_pixels', 802, 4, False)
        # Assigning a type to the variable 'self' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.points_to_pixels.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.points_to_pixels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.points_to_pixels.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.points_to_pixels.__dict__.__setitem__('stypy_function_name', 'RendererBase.points_to_pixels')
        RendererBase.points_to_pixels.__dict__.__setitem__('stypy_param_names_list', ['points'])
        RendererBase.points_to_pixels.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.points_to_pixels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.points_to_pixels.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.points_to_pixels.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.points_to_pixels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.points_to_pixels.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.points_to_pixels', ['points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'points_to_pixels', localization, ['points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'points_to_pixels(...)' code ##################

        unicode_15065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, (-1)), 'unicode', u"\n        Convert points to display units\n\n        You need to override this function (unless your backend\n        doesn't have a dpi, e.g., postscript or svg).  Some imaging\n        systems assume some value for pixels per inch::\n\n            points to pixels = points * pixels_per_inch/72.0 * dpi/72.0\n\n        Parameters\n        ----------\n        points : scalar or array_like\n            a float or a numpy array of float\n\n        Returns\n        -------\n        Points converted to pixels\n        ")
        # Getting the type of 'points' (line 821)
        points_15066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 15), 'points')
        # Assigning a type to the variable 'stypy_return_type' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'stypy_return_type', points_15066)
        
        # ################# End of 'points_to_pixels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'points_to_pixels' in the type store
        # Getting the type of 'stypy_return_type' (line 802)
        stypy_return_type_15067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15067)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'points_to_pixels'
        return stypy_return_type_15067


    @norecursion
    def strip_math(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'strip_math'
        module_type_store = module_type_store.open_function_context('strip_math', 823, 4, False)
        # Assigning a type to the variable 'self' (line 824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.strip_math.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.strip_math.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.strip_math.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.strip_math.__dict__.__setitem__('stypy_function_name', 'RendererBase.strip_math')
        RendererBase.strip_math.__dict__.__setitem__('stypy_param_names_list', ['s'])
        RendererBase.strip_math.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.strip_math.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.strip_math.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.strip_math.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.strip_math.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.strip_math.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.strip_math', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'strip_math', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'strip_math(...)' code ##################

        
        # Call to strip_math(...): (line 824)
        # Processing the call arguments (line 824)
        # Getting the type of 's' (line 824)
        s_15070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 32), 's', False)
        # Processing the call keyword arguments (line 824)
        kwargs_15071 = {}
        # Getting the type of 'cbook' (line 824)
        cbook_15068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 15), 'cbook', False)
        # Obtaining the member 'strip_math' of a type (line 824)
        strip_math_15069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 824, 15), cbook_15068, 'strip_math')
        # Calling strip_math(args, kwargs) (line 824)
        strip_math_call_result_15072 = invoke(stypy.reporting.localization.Localization(__file__, 824, 15), strip_math_15069, *[s_15070], **kwargs_15071)
        
        # Assigning a type to the variable 'stypy_return_type' (line 824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 8), 'stypy_return_type', strip_math_call_result_15072)
        
        # ################# End of 'strip_math(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'strip_math' in the type store
        # Getting the type of 'stypy_return_type' (line 823)
        stypy_return_type_15073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15073)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'strip_math'
        return stypy_return_type_15073


    @norecursion
    def start_rasterizing(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'start_rasterizing'
        module_type_store = module_type_store.open_function_context('start_rasterizing', 826, 4, False)
        # Assigning a type to the variable 'self' (line 827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 827, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.start_rasterizing.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.start_rasterizing.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.start_rasterizing.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.start_rasterizing.__dict__.__setitem__('stypy_function_name', 'RendererBase.start_rasterizing')
        RendererBase.start_rasterizing.__dict__.__setitem__('stypy_param_names_list', [])
        RendererBase.start_rasterizing.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.start_rasterizing.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.start_rasterizing.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.start_rasterizing.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.start_rasterizing.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.start_rasterizing.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.start_rasterizing', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'start_rasterizing', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'start_rasterizing(...)' code ##################

        unicode_15074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, (-1)), 'unicode', u'\n        Used in MixedModeRenderer. Switch to the raster renderer.\n        ')
        
        # ################# End of 'start_rasterizing(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'start_rasterizing' in the type store
        # Getting the type of 'stypy_return_type' (line 826)
        stypy_return_type_15075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15075)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'start_rasterizing'
        return stypy_return_type_15075


    @norecursion
    def stop_rasterizing(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'stop_rasterizing'
        module_type_store = module_type_store.open_function_context('stop_rasterizing', 831, 4, False)
        # Assigning a type to the variable 'self' (line 832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.stop_rasterizing.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.stop_rasterizing.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.stop_rasterizing.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.stop_rasterizing.__dict__.__setitem__('stypy_function_name', 'RendererBase.stop_rasterizing')
        RendererBase.stop_rasterizing.__dict__.__setitem__('stypy_param_names_list', [])
        RendererBase.stop_rasterizing.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.stop_rasterizing.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.stop_rasterizing.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.stop_rasterizing.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.stop_rasterizing.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.stop_rasterizing.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.stop_rasterizing', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'stop_rasterizing', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'stop_rasterizing(...)' code ##################

        unicode_15076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, (-1)), 'unicode', u'\n        Used in MixedModeRenderer. Switch back to the vector renderer\n        and draw the contents of the raster renderer as an image on\n        the vector renderer.\n        ')
        
        # ################# End of 'stop_rasterizing(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'stop_rasterizing' in the type store
        # Getting the type of 'stypy_return_type' (line 831)
        stypy_return_type_15077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15077)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'stop_rasterizing'
        return stypy_return_type_15077


    @norecursion
    def start_filter(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'start_filter'
        module_type_store = module_type_store.open_function_context('start_filter', 838, 4, False)
        # Assigning a type to the variable 'self' (line 839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.start_filter.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.start_filter.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.start_filter.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.start_filter.__dict__.__setitem__('stypy_function_name', 'RendererBase.start_filter')
        RendererBase.start_filter.__dict__.__setitem__('stypy_param_names_list', [])
        RendererBase.start_filter.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.start_filter.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.start_filter.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.start_filter.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.start_filter.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.start_filter.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.start_filter', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'start_filter', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'start_filter(...)' code ##################

        unicode_15078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, (-1)), 'unicode', u'\n        Used in AggRenderer. Switch to a temporary renderer for image\n        filtering effects.\n        ')
        
        # ################# End of 'start_filter(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'start_filter' in the type store
        # Getting the type of 'stypy_return_type' (line 838)
        stypy_return_type_15079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15079)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'start_filter'
        return stypy_return_type_15079


    @norecursion
    def stop_filter(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'stop_filter'
        module_type_store = module_type_store.open_function_context('stop_filter', 844, 4, False)
        # Assigning a type to the variable 'self' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RendererBase.stop_filter.__dict__.__setitem__('stypy_localization', localization)
        RendererBase.stop_filter.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RendererBase.stop_filter.__dict__.__setitem__('stypy_type_store', module_type_store)
        RendererBase.stop_filter.__dict__.__setitem__('stypy_function_name', 'RendererBase.stop_filter')
        RendererBase.stop_filter.__dict__.__setitem__('stypy_param_names_list', ['filter_func'])
        RendererBase.stop_filter.__dict__.__setitem__('stypy_varargs_param_name', None)
        RendererBase.stop_filter.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RendererBase.stop_filter.__dict__.__setitem__('stypy_call_defaults', defaults)
        RendererBase.stop_filter.__dict__.__setitem__('stypy_call_varargs', varargs)
        RendererBase.stop_filter.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RendererBase.stop_filter.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RendererBase.stop_filter', ['filter_func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'stop_filter', localization, ['filter_func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'stop_filter(...)' code ##################

        unicode_15080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 850, (-1)), 'unicode', u'\n        Used in AggRenderer. Switch back to the original renderer.\n        The contents of the temporary renderer is processed with the\n        *filter_func* and is drawn on the original renderer as an\n        image.\n        ')
        
        # ################# End of 'stop_filter(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'stop_filter' in the type store
        # Getting the type of 'stypy_return_type' (line 844)
        stypy_return_type_15081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15081)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'stop_filter'
        return stypy_return_type_15081


# Assigning a type to the variable 'RendererBase' (line 252)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 0), 'RendererBase', RendererBase)
# Declaration of the 'GraphicsContextBase' class

class GraphicsContextBase(object, ):
    unicode_15082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, (-1)), 'unicode', u'\n    An abstract base class that provides color, line styles, etc...\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 858, 4, False)
        # Assigning a type to the variable 'self' (line 859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Num to a Attribute (line 859):
        
        # Assigning a Num to a Attribute (line 859):
        
        # Assigning a Num to a Attribute (line 859):
        float_15083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 859, 22), 'float')
        # Getting the type of 'self' (line 859)
        self_15084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 8), 'self')
        # Setting the type of the member '_alpha' of a type (line 859)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 8), self_15084, '_alpha', float_15083)
        
        # Assigning a Name to a Attribute (line 860):
        
        # Assigning a Name to a Attribute (line 860):
        
        # Assigning a Name to a Attribute (line 860):
        # Getting the type of 'False' (line 860)
        False_15085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 29), 'False')
        # Getting the type of 'self' (line 860)
        self_15086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 8), 'self')
        # Setting the type of the member '_forced_alpha' of a type (line 860)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 860, 8), self_15086, '_forced_alpha', False_15085)
        
        # Assigning a Num to a Attribute (line 861):
        
        # Assigning a Num to a Attribute (line 861):
        
        # Assigning a Num to a Attribute (line 861):
        int_15087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 861, 28), 'int')
        # Getting the type of 'self' (line 861)
        self_15088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 8), 'self')
        # Setting the type of the member '_antialiased' of a type (line 861)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 8), self_15088, '_antialiased', int_15087)
        
        # Assigning a Str to a Attribute (line 862):
        
        # Assigning a Str to a Attribute (line 862):
        
        # Assigning a Str to a Attribute (line 862):
        unicode_15089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 862, 25), 'unicode', u'butt')
        # Getting the type of 'self' (line 862)
        self_15090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 8), 'self')
        # Setting the type of the member '_capstyle' of a type (line 862)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 862, 8), self_15090, '_capstyle', unicode_15089)
        
        # Assigning a Name to a Attribute (line 863):
        
        # Assigning a Name to a Attribute (line 863):
        
        # Assigning a Name to a Attribute (line 863):
        # Getting the type of 'None' (line 863)
        None_15091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 25), 'None')
        # Getting the type of 'self' (line 863)
        self_15092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 8), 'self')
        # Setting the type of the member '_cliprect' of a type (line 863)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 8), self_15092, '_cliprect', None_15091)
        
        # Assigning a Name to a Attribute (line 864):
        
        # Assigning a Name to a Attribute (line 864):
        
        # Assigning a Name to a Attribute (line 864):
        # Getting the type of 'None' (line 864)
        None_15093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 25), 'None')
        # Getting the type of 'self' (line 864)
        self_15094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 8), 'self')
        # Setting the type of the member '_clippath' of a type (line 864)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 8), self_15094, '_clippath', None_15093)
        
        # Assigning a Tuple to a Attribute (line 865):
        
        # Assigning a Tuple to a Attribute (line 865):
        
        # Assigning a Tuple to a Attribute (line 865):
        
        # Obtaining an instance of the builtin type 'tuple' (line 865)
        tuple_15095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 865, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 865)
        # Adding element type (line 865)
        # Getting the type of 'None' (line 865)
        None_15096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 23), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 865, 23), tuple_15095, None_15096)
        # Adding element type (line 865)
        # Getting the type of 'None' (line 865)
        None_15097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 29), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 865, 23), tuple_15095, None_15097)
        
        # Getting the type of 'self' (line 865)
        self_15098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 8), 'self')
        # Setting the type of the member '_dashes' of a type (line 865)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 865, 8), self_15098, '_dashes', tuple_15095)
        
        # Assigning a Str to a Attribute (line 866):
        
        # Assigning a Str to a Attribute (line 866):
        
        # Assigning a Str to a Attribute (line 866):
        unicode_15099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 866, 26), 'unicode', u'round')
        # Getting the type of 'self' (line 866)
        self_15100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 8), 'self')
        # Setting the type of the member '_joinstyle' of a type (line 866)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 866, 8), self_15100, '_joinstyle', unicode_15099)
        
        # Assigning a Str to a Attribute (line 867):
        
        # Assigning a Str to a Attribute (line 867):
        
        # Assigning a Str to a Attribute (line 867):
        unicode_15101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 867, 26), 'unicode', u'solid')
        # Getting the type of 'self' (line 867)
        self_15102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 8), 'self')
        # Setting the type of the member '_linestyle' of a type (line 867)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 8), self_15102, '_linestyle', unicode_15101)
        
        # Assigning a Num to a Attribute (line 868):
        
        # Assigning a Num to a Attribute (line 868):
        
        # Assigning a Num to a Attribute (line 868):
        int_15103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 868, 26), 'int')
        # Getting the type of 'self' (line 868)
        self_15104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 8), 'self')
        # Setting the type of the member '_linewidth' of a type (line 868)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 8), self_15104, '_linewidth', int_15103)
        
        # Assigning a Tuple to a Attribute (line 869):
        
        # Assigning a Tuple to a Attribute (line 869):
        
        # Assigning a Tuple to a Attribute (line 869):
        
        # Obtaining an instance of the builtin type 'tuple' (line 869)
        tuple_15105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 869, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 869)
        # Adding element type (line 869)
        float_15106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 869, 21), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 869, 21), tuple_15105, float_15106)
        # Adding element type (line 869)
        float_15107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 869, 26), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 869, 21), tuple_15105, float_15107)
        # Adding element type (line 869)
        float_15108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 869, 31), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 869, 21), tuple_15105, float_15108)
        # Adding element type (line 869)
        float_15109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 869, 36), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 869, 21), tuple_15105, float_15109)
        
        # Getting the type of 'self' (line 869)
        self_15110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 8), 'self')
        # Setting the type of the member '_rgb' of a type (line 869)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 869, 8), self_15110, '_rgb', tuple_15105)
        
        # Assigning a Name to a Attribute (line 870):
        
        # Assigning a Name to a Attribute (line 870):
        
        # Assigning a Name to a Attribute (line 870):
        # Getting the type of 'None' (line 870)
        None_15111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 22), 'None')
        # Getting the type of 'self' (line 870)
        self_15112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 8), 'self')
        # Setting the type of the member '_hatch' of a type (line 870)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 8), self_15112, '_hatch', None_15111)
        
        # Assigning a Call to a Attribute (line 871):
        
        # Assigning a Call to a Attribute (line 871):
        
        # Assigning a Call to a Attribute (line 871):
        
        # Call to to_rgba(...): (line 871)
        # Processing the call arguments (line 871)
        
        # Obtaining the type of the subscript
        unicode_15115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 52), 'unicode', u'hatch.color')
        # Getting the type of 'rcParams' (line 871)
        rcParams_15116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 43), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 871)
        getitem___15117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 43), rcParams_15116, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 871)
        subscript_call_result_15118 = invoke(stypy.reporting.localization.Localization(__file__, 871, 43), getitem___15117, unicode_15115)
        
        # Processing the call keyword arguments (line 871)
        kwargs_15119 = {}
        # Getting the type of 'colors' (line 871)
        colors_15113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 28), 'colors', False)
        # Obtaining the member 'to_rgba' of a type (line 871)
        to_rgba_15114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 28), colors_15113, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 871)
        to_rgba_call_result_15120 = invoke(stypy.reporting.localization.Localization(__file__, 871, 28), to_rgba_15114, *[subscript_call_result_15118], **kwargs_15119)
        
        # Getting the type of 'self' (line 871)
        self_15121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 8), 'self')
        # Setting the type of the member '_hatch_color' of a type (line 871)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 8), self_15121, '_hatch_color', to_rgba_call_result_15120)
        
        # Assigning a Subscript to a Attribute (line 872):
        
        # Assigning a Subscript to a Attribute (line 872):
        
        # Assigning a Subscript to a Attribute (line 872):
        
        # Obtaining the type of the subscript
        unicode_15122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 872, 41), 'unicode', u'hatch.linewidth')
        # Getting the type of 'rcParams' (line 872)
        rcParams_15123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 32), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 872)
        getitem___15124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 872, 32), rcParams_15123, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 872)
        subscript_call_result_15125 = invoke(stypy.reporting.localization.Localization(__file__, 872, 32), getitem___15124, unicode_15122)
        
        # Getting the type of 'self' (line 872)
        self_15126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 8), 'self')
        # Setting the type of the member '_hatch_linewidth' of a type (line 872)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 872, 8), self_15126, '_hatch_linewidth', subscript_call_result_15125)
        
        # Assigning a Name to a Attribute (line 873):
        
        # Assigning a Name to a Attribute (line 873):
        
        # Assigning a Name to a Attribute (line 873):
        # Getting the type of 'None' (line 873)
        None_15127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 20), 'None')
        # Getting the type of 'self' (line 873)
        self_15128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'self')
        # Setting the type of the member '_url' of a type (line 873)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 8), self_15128, '_url', None_15127)
        
        # Assigning a Name to a Attribute (line 874):
        
        # Assigning a Name to a Attribute (line 874):
        
        # Assigning a Name to a Attribute (line 874):
        # Getting the type of 'None' (line 874)
        None_15129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 20), 'None')
        # Getting the type of 'self' (line 874)
        self_15130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 8), 'self')
        # Setting the type of the member '_gid' of a type (line 874)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 874, 8), self_15130, '_gid', None_15129)
        
        # Assigning a Name to a Attribute (line 875):
        
        # Assigning a Name to a Attribute (line 875):
        
        # Assigning a Name to a Attribute (line 875):
        # Getting the type of 'None' (line 875)
        None_15131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 21), 'None')
        # Getting the type of 'self' (line 875)
        self_15132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 8), 'self')
        # Setting the type of the member '_snap' of a type (line 875)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 8), self_15132, '_snap', None_15131)
        
        # Assigning a Name to a Attribute (line 876):
        
        # Assigning a Name to a Attribute (line 876):
        
        # Assigning a Name to a Attribute (line 876):
        # Getting the type of 'None' (line 876)
        None_15133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 23), 'None')
        # Getting the type of 'self' (line 876)
        self_15134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'self')
        # Setting the type of the member '_sketch' of a type (line 876)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 8), self_15134, '_sketch', None_15133)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def copy_properties(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'copy_properties'
        module_type_store = module_type_store.open_function_context('copy_properties', 878, 4, False)
        # Assigning a type to the variable 'self' (line 879)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 879, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.copy_properties.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.copy_properties.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.copy_properties.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.copy_properties.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.copy_properties')
        GraphicsContextBase.copy_properties.__dict__.__setitem__('stypy_param_names_list', ['gc'])
        GraphicsContextBase.copy_properties.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.copy_properties.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.copy_properties.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.copy_properties.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.copy_properties.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.copy_properties.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.copy_properties', ['gc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'copy_properties', localization, ['gc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'copy_properties(...)' code ##################

        unicode_15135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 879, 8), 'unicode', u'Copy properties from gc to self')
        
        # Assigning a Attribute to a Attribute (line 880):
        
        # Assigning a Attribute to a Attribute (line 880):
        
        # Assigning a Attribute to a Attribute (line 880):
        # Getting the type of 'gc' (line 880)
        gc_15136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 22), 'gc')
        # Obtaining the member '_alpha' of a type (line 880)
        _alpha_15137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 880, 22), gc_15136, '_alpha')
        # Getting the type of 'self' (line 880)
        self_15138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 8), 'self')
        # Setting the type of the member '_alpha' of a type (line 880)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 880, 8), self_15138, '_alpha', _alpha_15137)
        
        # Assigning a Attribute to a Attribute (line 881):
        
        # Assigning a Attribute to a Attribute (line 881):
        
        # Assigning a Attribute to a Attribute (line 881):
        # Getting the type of 'gc' (line 881)
        gc_15139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 29), 'gc')
        # Obtaining the member '_forced_alpha' of a type (line 881)
        _forced_alpha_15140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 29), gc_15139, '_forced_alpha')
        # Getting the type of 'self' (line 881)
        self_15141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 8), 'self')
        # Setting the type of the member '_forced_alpha' of a type (line 881)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 8), self_15141, '_forced_alpha', _forced_alpha_15140)
        
        # Assigning a Attribute to a Attribute (line 882):
        
        # Assigning a Attribute to a Attribute (line 882):
        
        # Assigning a Attribute to a Attribute (line 882):
        # Getting the type of 'gc' (line 882)
        gc_15142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 28), 'gc')
        # Obtaining the member '_antialiased' of a type (line 882)
        _antialiased_15143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 28), gc_15142, '_antialiased')
        # Getting the type of 'self' (line 882)
        self_15144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 8), 'self')
        # Setting the type of the member '_antialiased' of a type (line 882)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 8), self_15144, '_antialiased', _antialiased_15143)
        
        # Assigning a Attribute to a Attribute (line 883):
        
        # Assigning a Attribute to a Attribute (line 883):
        
        # Assigning a Attribute to a Attribute (line 883):
        # Getting the type of 'gc' (line 883)
        gc_15145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 25), 'gc')
        # Obtaining the member '_capstyle' of a type (line 883)
        _capstyle_15146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 25), gc_15145, '_capstyle')
        # Getting the type of 'self' (line 883)
        self_15147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'self')
        # Setting the type of the member '_capstyle' of a type (line 883)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 8), self_15147, '_capstyle', _capstyle_15146)
        
        # Assigning a Attribute to a Attribute (line 884):
        
        # Assigning a Attribute to a Attribute (line 884):
        
        # Assigning a Attribute to a Attribute (line 884):
        # Getting the type of 'gc' (line 884)
        gc_15148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 25), 'gc')
        # Obtaining the member '_cliprect' of a type (line 884)
        _cliprect_15149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 25), gc_15148, '_cliprect')
        # Getting the type of 'self' (line 884)
        self_15150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 8), 'self')
        # Setting the type of the member '_cliprect' of a type (line 884)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 8), self_15150, '_cliprect', _cliprect_15149)
        
        # Assigning a Attribute to a Attribute (line 885):
        
        # Assigning a Attribute to a Attribute (line 885):
        
        # Assigning a Attribute to a Attribute (line 885):
        # Getting the type of 'gc' (line 885)
        gc_15151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 25), 'gc')
        # Obtaining the member '_clippath' of a type (line 885)
        _clippath_15152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 25), gc_15151, '_clippath')
        # Getting the type of 'self' (line 885)
        self_15153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 8), 'self')
        # Setting the type of the member '_clippath' of a type (line 885)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 8), self_15153, '_clippath', _clippath_15152)
        
        # Assigning a Attribute to a Attribute (line 886):
        
        # Assigning a Attribute to a Attribute (line 886):
        
        # Assigning a Attribute to a Attribute (line 886):
        # Getting the type of 'gc' (line 886)
        gc_15154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 23), 'gc')
        # Obtaining the member '_dashes' of a type (line 886)
        _dashes_15155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 23), gc_15154, '_dashes')
        # Getting the type of 'self' (line 886)
        self_15156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 8), 'self')
        # Setting the type of the member '_dashes' of a type (line 886)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 8), self_15156, '_dashes', _dashes_15155)
        
        # Assigning a Attribute to a Attribute (line 887):
        
        # Assigning a Attribute to a Attribute (line 887):
        
        # Assigning a Attribute to a Attribute (line 887):
        # Getting the type of 'gc' (line 887)
        gc_15157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 26), 'gc')
        # Obtaining the member '_joinstyle' of a type (line 887)
        _joinstyle_15158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 26), gc_15157, '_joinstyle')
        # Getting the type of 'self' (line 887)
        self_15159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 8), 'self')
        # Setting the type of the member '_joinstyle' of a type (line 887)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 8), self_15159, '_joinstyle', _joinstyle_15158)
        
        # Assigning a Attribute to a Attribute (line 888):
        
        # Assigning a Attribute to a Attribute (line 888):
        
        # Assigning a Attribute to a Attribute (line 888):
        # Getting the type of 'gc' (line 888)
        gc_15160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 26), 'gc')
        # Obtaining the member '_linestyle' of a type (line 888)
        _linestyle_15161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 26), gc_15160, '_linestyle')
        # Getting the type of 'self' (line 888)
        self_15162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 8), 'self')
        # Setting the type of the member '_linestyle' of a type (line 888)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 8), self_15162, '_linestyle', _linestyle_15161)
        
        # Assigning a Attribute to a Attribute (line 889):
        
        # Assigning a Attribute to a Attribute (line 889):
        
        # Assigning a Attribute to a Attribute (line 889):
        # Getting the type of 'gc' (line 889)
        gc_15163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 26), 'gc')
        # Obtaining the member '_linewidth' of a type (line 889)
        _linewidth_15164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 889, 26), gc_15163, '_linewidth')
        # Getting the type of 'self' (line 889)
        self_15165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 8), 'self')
        # Setting the type of the member '_linewidth' of a type (line 889)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 889, 8), self_15165, '_linewidth', _linewidth_15164)
        
        # Assigning a Attribute to a Attribute (line 890):
        
        # Assigning a Attribute to a Attribute (line 890):
        
        # Assigning a Attribute to a Attribute (line 890):
        # Getting the type of 'gc' (line 890)
        gc_15166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 20), 'gc')
        # Obtaining the member '_rgb' of a type (line 890)
        _rgb_15167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 890, 20), gc_15166, '_rgb')
        # Getting the type of 'self' (line 890)
        self_15168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 8), 'self')
        # Setting the type of the member '_rgb' of a type (line 890)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 890, 8), self_15168, '_rgb', _rgb_15167)
        
        # Assigning a Attribute to a Attribute (line 891):
        
        # Assigning a Attribute to a Attribute (line 891):
        
        # Assigning a Attribute to a Attribute (line 891):
        # Getting the type of 'gc' (line 891)
        gc_15169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 22), 'gc')
        # Obtaining the member '_hatch' of a type (line 891)
        _hatch_15170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 22), gc_15169, '_hatch')
        # Getting the type of 'self' (line 891)
        self_15171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 8), 'self')
        # Setting the type of the member '_hatch' of a type (line 891)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 8), self_15171, '_hatch', _hatch_15170)
        
        # Assigning a Attribute to a Attribute (line 892):
        
        # Assigning a Attribute to a Attribute (line 892):
        
        # Assigning a Attribute to a Attribute (line 892):
        # Getting the type of 'gc' (line 892)
        gc_15172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 28), 'gc')
        # Obtaining the member '_hatch_color' of a type (line 892)
        _hatch_color_15173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 28), gc_15172, '_hatch_color')
        # Getting the type of 'self' (line 892)
        self_15174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 8), 'self')
        # Setting the type of the member '_hatch_color' of a type (line 892)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 8), self_15174, '_hatch_color', _hatch_color_15173)
        
        # Assigning a Attribute to a Attribute (line 893):
        
        # Assigning a Attribute to a Attribute (line 893):
        
        # Assigning a Attribute to a Attribute (line 893):
        # Getting the type of 'gc' (line 893)
        gc_15175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 32), 'gc')
        # Obtaining the member '_hatch_linewidth' of a type (line 893)
        _hatch_linewidth_15176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 32), gc_15175, '_hatch_linewidth')
        # Getting the type of 'self' (line 893)
        self_15177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 8), 'self')
        # Setting the type of the member '_hatch_linewidth' of a type (line 893)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 8), self_15177, '_hatch_linewidth', _hatch_linewidth_15176)
        
        # Assigning a Attribute to a Attribute (line 894):
        
        # Assigning a Attribute to a Attribute (line 894):
        
        # Assigning a Attribute to a Attribute (line 894):
        # Getting the type of 'gc' (line 894)
        gc_15178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 20), 'gc')
        # Obtaining the member '_url' of a type (line 894)
        _url_15179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 20), gc_15178, '_url')
        # Getting the type of 'self' (line 894)
        self_15180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 8), 'self')
        # Setting the type of the member '_url' of a type (line 894)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 8), self_15180, '_url', _url_15179)
        
        # Assigning a Attribute to a Attribute (line 895):
        
        # Assigning a Attribute to a Attribute (line 895):
        
        # Assigning a Attribute to a Attribute (line 895):
        # Getting the type of 'gc' (line 895)
        gc_15181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 20), 'gc')
        # Obtaining the member '_gid' of a type (line 895)
        _gid_15182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 20), gc_15181, '_gid')
        # Getting the type of 'self' (line 895)
        self_15183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 8), 'self')
        # Setting the type of the member '_gid' of a type (line 895)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 8), self_15183, '_gid', _gid_15182)
        
        # Assigning a Attribute to a Attribute (line 896):
        
        # Assigning a Attribute to a Attribute (line 896):
        
        # Assigning a Attribute to a Attribute (line 896):
        # Getting the type of 'gc' (line 896)
        gc_15184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 21), 'gc')
        # Obtaining the member '_snap' of a type (line 896)
        _snap_15185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 21), gc_15184, '_snap')
        # Getting the type of 'self' (line 896)
        self_15186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'self')
        # Setting the type of the member '_snap' of a type (line 896)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 8), self_15186, '_snap', _snap_15185)
        
        # Assigning a Attribute to a Attribute (line 897):
        
        # Assigning a Attribute to a Attribute (line 897):
        
        # Assigning a Attribute to a Attribute (line 897):
        # Getting the type of 'gc' (line 897)
        gc_15187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 23), 'gc')
        # Obtaining the member '_sketch' of a type (line 897)
        _sketch_15188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 23), gc_15187, '_sketch')
        # Getting the type of 'self' (line 897)
        self_15189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 8), 'self')
        # Setting the type of the member '_sketch' of a type (line 897)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 8), self_15189, '_sketch', _sketch_15188)
        
        # ################# End of 'copy_properties(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'copy_properties' in the type store
        # Getting the type of 'stypy_return_type' (line 878)
        stypy_return_type_15190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15190)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'copy_properties'
        return stypy_return_type_15190


    @norecursion
    def restore(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'restore'
        module_type_store = module_type_store.open_function_context('restore', 899, 4, False)
        # Assigning a type to the variable 'self' (line 900)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.restore.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.restore.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.restore.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.restore.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.restore')
        GraphicsContextBase.restore.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.restore.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.restore.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.restore.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.restore.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.restore.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.restore.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.restore', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'restore', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'restore(...)' code ##################

        unicode_15191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, (-1)), 'unicode', u'\n        Restore the graphics context from the stack - needed only\n        for backends that save graphics contexts on a stack\n        ')
        
        # ################# End of 'restore(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'restore' in the type store
        # Getting the type of 'stypy_return_type' (line 899)
        stypy_return_type_15192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15192)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'restore'
        return stypy_return_type_15192


    @norecursion
    def get_alpha(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_alpha'
        module_type_store = module_type_store.open_function_context('get_alpha', 905, 4, False)
        # Assigning a type to the variable 'self' (line 906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_alpha.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_alpha.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_alpha.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_alpha.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_alpha')
        GraphicsContextBase.get_alpha.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_alpha.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_alpha.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_alpha.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_alpha.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_alpha.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_alpha.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_alpha', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_alpha', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_alpha(...)' code ##################

        unicode_15193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 909, (-1)), 'unicode', u'\n        Return the alpha value used for blending - not supported on\n        all backends\n        ')
        # Getting the type of 'self' (line 910)
        self_15194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 15), 'self')
        # Obtaining the member '_alpha' of a type (line 910)
        _alpha_15195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 15), self_15194, '_alpha')
        # Assigning a type to the variable 'stypy_return_type' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 8), 'stypy_return_type', _alpha_15195)
        
        # ################# End of 'get_alpha(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_alpha' in the type store
        # Getting the type of 'stypy_return_type' (line 905)
        stypy_return_type_15196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15196)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_alpha'
        return stypy_return_type_15196


    @norecursion
    def get_antialiased(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_antialiased'
        module_type_store = module_type_store.open_function_context('get_antialiased', 912, 4, False)
        # Assigning a type to the variable 'self' (line 913)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 913, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_antialiased.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_antialiased.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_antialiased.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_antialiased.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_antialiased')
        GraphicsContextBase.get_antialiased.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_antialiased.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_antialiased.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_antialiased.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_antialiased.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_antialiased.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_antialiased.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_antialiased', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_antialiased', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_antialiased(...)' code ##################

        unicode_15197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 8), 'unicode', u'Return true if the object should try to do antialiased rendering')
        # Getting the type of 'self' (line 914)
        self_15198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 15), 'self')
        # Obtaining the member '_antialiased' of a type (line 914)
        _antialiased_15199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 15), self_15198, '_antialiased')
        # Assigning a type to the variable 'stypy_return_type' (line 914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 8), 'stypy_return_type', _antialiased_15199)
        
        # ################# End of 'get_antialiased(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_antialiased' in the type store
        # Getting the type of 'stypy_return_type' (line 912)
        stypy_return_type_15200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15200)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_antialiased'
        return stypy_return_type_15200


    @norecursion
    def get_capstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_capstyle'
        module_type_store = module_type_store.open_function_context('get_capstyle', 916, 4, False)
        # Assigning a type to the variable 'self' (line 917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_capstyle.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_capstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_capstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_capstyle.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_capstyle')
        GraphicsContextBase.get_capstyle.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_capstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_capstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_capstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_capstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_capstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_capstyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_capstyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_capstyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_capstyle(...)' code ##################

        unicode_15201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 919, (-1)), 'unicode', u"\n        Return the capstyle as a string in ('butt', 'round', 'projecting')\n        ")
        # Getting the type of 'self' (line 920)
        self_15202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 15), 'self')
        # Obtaining the member '_capstyle' of a type (line 920)
        _capstyle_15203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 15), self_15202, '_capstyle')
        # Assigning a type to the variable 'stypy_return_type' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 8), 'stypy_return_type', _capstyle_15203)
        
        # ################# End of 'get_capstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_capstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 916)
        stypy_return_type_15204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15204)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_capstyle'
        return stypy_return_type_15204


    @norecursion
    def get_clip_rectangle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_clip_rectangle'
        module_type_store = module_type_store.open_function_context('get_clip_rectangle', 922, 4, False)
        # Assigning a type to the variable 'self' (line 923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_clip_rectangle.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_clip_rectangle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_clip_rectangle.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_clip_rectangle.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_clip_rectangle')
        GraphicsContextBase.get_clip_rectangle.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_clip_rectangle.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_clip_rectangle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_clip_rectangle.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_clip_rectangle.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_clip_rectangle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_clip_rectangle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_clip_rectangle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_clip_rectangle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_clip_rectangle(...)' code ##################

        unicode_15205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 926, (-1)), 'unicode', u'\n        Return the clip rectangle as a :class:`~matplotlib.transforms.Bbox`\n        instance\n        ')
        # Getting the type of 'self' (line 927)
        self_15206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 15), 'self')
        # Obtaining the member '_cliprect' of a type (line 927)
        _cliprect_15207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 927, 15), self_15206, '_cliprect')
        # Assigning a type to the variable 'stypy_return_type' (line 927)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 927, 8), 'stypy_return_type', _cliprect_15207)
        
        # ################# End of 'get_clip_rectangle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_clip_rectangle' in the type store
        # Getting the type of 'stypy_return_type' (line 922)
        stypy_return_type_15208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15208)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_clip_rectangle'
        return stypy_return_type_15208


    @norecursion
    def get_clip_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_clip_path'
        module_type_store = module_type_store.open_function_context('get_clip_path', 929, 4, False)
        # Assigning a type to the variable 'self' (line 930)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_clip_path.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_clip_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_clip_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_clip_path.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_clip_path')
        GraphicsContextBase.get_clip_path.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_clip_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_clip_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_clip_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_clip_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_clip_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_clip_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_clip_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_clip_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_clip_path(...)' code ##################

        unicode_15209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, (-1)), 'unicode', u'\n        Return the clip path in the form (path, transform), where path\n        is a :class:`~matplotlib.path.Path` instance, and transform is\n        an affine transform to apply to the path before clipping.\n        ')
        
        
        # Getting the type of 'self' (line 935)
        self_15210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 11), 'self')
        # Obtaining the member '_clippath' of a type (line 935)
        _clippath_15211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 11), self_15210, '_clippath')
        # Getting the type of 'None' (line 935)
        None_15212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 33), 'None')
        # Applying the binary operator 'isnot' (line 935)
        result_is_not_15213 = python_operator(stypy.reporting.localization.Localization(__file__, 935, 11), 'isnot', _clippath_15211, None_15212)
        
        # Testing the type of an if condition (line 935)
        if_condition_15214 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 935, 8), result_is_not_15213)
        # Assigning a type to the variable 'if_condition_15214' (line 935)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 8), 'if_condition_15214', if_condition_15214)
        # SSA begins for if statement (line 935)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to get_transformed_path_and_affine(...): (line 936)
        # Processing the call keyword arguments (line 936)
        kwargs_15218 = {}
        # Getting the type of 'self' (line 936)
        self_15215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 19), 'self', False)
        # Obtaining the member '_clippath' of a type (line 936)
        _clippath_15216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 19), self_15215, '_clippath')
        # Obtaining the member 'get_transformed_path_and_affine' of a type (line 936)
        get_transformed_path_and_affine_15217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 19), _clippath_15216, 'get_transformed_path_and_affine')
        # Calling get_transformed_path_and_affine(args, kwargs) (line 936)
        get_transformed_path_and_affine_call_result_15219 = invoke(stypy.reporting.localization.Localization(__file__, 936, 19), get_transformed_path_and_affine_15217, *[], **kwargs_15218)
        
        # Assigning a type to the variable 'stypy_return_type' (line 936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 12), 'stypy_return_type', get_transformed_path_and_affine_call_result_15219)
        # SSA join for if statement (line 935)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 937)
        tuple_15220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 937, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 937)
        # Adding element type (line 937)
        # Getting the type of 'None' (line 937)
        None_15221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 15), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 937, 15), tuple_15220, None_15221)
        # Adding element type (line 937)
        # Getting the type of 'None' (line 937)
        None_15222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 21), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 937, 15), tuple_15220, None_15222)
        
        # Assigning a type to the variable 'stypy_return_type' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 8), 'stypy_return_type', tuple_15220)
        
        # ################# End of 'get_clip_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_clip_path' in the type store
        # Getting the type of 'stypy_return_type' (line 929)
        stypy_return_type_15223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15223)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_clip_path'
        return stypy_return_type_15223


    @norecursion
    def get_dashes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_dashes'
        module_type_store = module_type_store.open_function_context('get_dashes', 939, 4, False)
        # Assigning a type to the variable 'self' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_dashes.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_dashes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_dashes.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_dashes.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_dashes')
        GraphicsContextBase.get_dashes.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_dashes.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_dashes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_dashes.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_dashes.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_dashes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_dashes.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_dashes', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_dashes', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_dashes(...)' code ##################

        unicode_15224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 951, (-1)), 'unicode', u'\n        Return the dash information as an offset dashlist tuple.\n\n        The dash list is a even size list that gives the ink on, ink\n        off in pixels.\n\n        See p107 of to PostScript `BLUEBOOK\n        <https://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF>`_\n        for more info.\n\n        Default value is None\n        ')
        # Getting the type of 'self' (line 952)
        self_15225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 15), 'self')
        # Obtaining the member '_dashes' of a type (line 952)
        _dashes_15226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 15), self_15225, '_dashes')
        # Assigning a type to the variable 'stypy_return_type' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'stypy_return_type', _dashes_15226)
        
        # ################# End of 'get_dashes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_dashes' in the type store
        # Getting the type of 'stypy_return_type' (line 939)
        stypy_return_type_15227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15227)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_dashes'
        return stypy_return_type_15227


    @norecursion
    def get_forced_alpha(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_forced_alpha'
        module_type_store = module_type_store.open_function_context('get_forced_alpha', 954, 4, False)
        # Assigning a type to the variable 'self' (line 955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 955, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_forced_alpha.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_forced_alpha.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_forced_alpha.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_forced_alpha.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_forced_alpha')
        GraphicsContextBase.get_forced_alpha.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_forced_alpha.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_forced_alpha.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_forced_alpha.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_forced_alpha.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_forced_alpha.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_forced_alpha.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_forced_alpha', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_forced_alpha', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_forced_alpha(...)' code ##################

        unicode_15228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, (-1)), 'unicode', u'\n        Return whether the value given by get_alpha() should be used to\n        override any other alpha-channel values.\n        ')
        # Getting the type of 'self' (line 959)
        self_15229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 15), 'self')
        # Obtaining the member '_forced_alpha' of a type (line 959)
        _forced_alpha_15230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 15), self_15229, '_forced_alpha')
        # Assigning a type to the variable 'stypy_return_type' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 8), 'stypy_return_type', _forced_alpha_15230)
        
        # ################# End of 'get_forced_alpha(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_forced_alpha' in the type store
        # Getting the type of 'stypy_return_type' (line 954)
        stypy_return_type_15231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15231)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_forced_alpha'
        return stypy_return_type_15231


    @norecursion
    def get_joinstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_joinstyle'
        module_type_store = module_type_store.open_function_context('get_joinstyle', 961, 4, False)
        # Assigning a type to the variable 'self' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_joinstyle.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_joinstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_joinstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_joinstyle.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_joinstyle')
        GraphicsContextBase.get_joinstyle.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_joinstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_joinstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_joinstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_joinstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_joinstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_joinstyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_joinstyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_joinstyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_joinstyle(...)' code ##################

        unicode_15232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, (-1)), 'unicode', u"\n        Return the line join style as one of ('miter', 'round', 'bevel')\n        ")
        # Getting the type of 'self' (line 965)
        self_15233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 15), 'self')
        # Obtaining the member '_joinstyle' of a type (line 965)
        _joinstyle_15234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 15), self_15233, '_joinstyle')
        # Assigning a type to the variable 'stypy_return_type' (line 965)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 965, 8), 'stypy_return_type', _joinstyle_15234)
        
        # ################# End of 'get_joinstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_joinstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 961)
        stypy_return_type_15235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15235)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_joinstyle'
        return stypy_return_type_15235


    @norecursion
    def get_linestyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_linestyle'
        module_type_store = module_type_store.open_function_context('get_linestyle', 967, 4, False)
        # Assigning a type to the variable 'self' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_linestyle.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_linestyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_linestyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_linestyle.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_linestyle')
        GraphicsContextBase.get_linestyle.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_linestyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_linestyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_linestyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_linestyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_linestyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_linestyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_linestyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_linestyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_linestyle(...)' code ##################

        unicode_15236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 972, (-1)), 'unicode', u"\n        Return the linestyle: one of ('solid', 'dashed', 'dashdot',\n        'dotted').\n        ")
        # Getting the type of 'self' (line 973)
        self_15237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 15), 'self')
        # Obtaining the member '_linestyle' of a type (line 973)
        _linestyle_15238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 15), self_15237, '_linestyle')
        # Assigning a type to the variable 'stypy_return_type' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 8), 'stypy_return_type', _linestyle_15238)
        
        # ################# End of 'get_linestyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_linestyle' in the type store
        # Getting the type of 'stypy_return_type' (line 967)
        stypy_return_type_15239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15239)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_linestyle'
        return stypy_return_type_15239


    @norecursion
    def get_linewidth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_linewidth'
        module_type_store = module_type_store.open_function_context('get_linewidth', 975, 4, False)
        # Assigning a type to the variable 'self' (line 976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_linewidth.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_linewidth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_linewidth.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_linewidth.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_linewidth')
        GraphicsContextBase.get_linewidth.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_linewidth.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_linewidth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_linewidth.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_linewidth.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_linewidth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_linewidth.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_linewidth', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_linewidth', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_linewidth(...)' code ##################

        unicode_15240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 978, (-1)), 'unicode', u'\n        Return the line width in points as a scalar\n        ')
        # Getting the type of 'self' (line 979)
        self_15241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 15), 'self')
        # Obtaining the member '_linewidth' of a type (line 979)
        _linewidth_15242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 979, 15), self_15241, '_linewidth')
        # Assigning a type to the variable 'stypy_return_type' (line 979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 979, 8), 'stypy_return_type', _linewidth_15242)
        
        # ################# End of 'get_linewidth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_linewidth' in the type store
        # Getting the type of 'stypy_return_type' (line 975)
        stypy_return_type_15243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15243)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_linewidth'
        return stypy_return_type_15243


    @norecursion
    def get_rgb(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_rgb'
        module_type_store = module_type_store.open_function_context('get_rgb', 981, 4, False)
        # Assigning a type to the variable 'self' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_rgb.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_rgb.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_rgb.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_rgb.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_rgb')
        GraphicsContextBase.get_rgb.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_rgb.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_rgb.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_rgb.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_rgb.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_rgb.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_rgb.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_rgb', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_rgb', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_rgb(...)' code ##################

        unicode_15244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, (-1)), 'unicode', u'\n        returns a tuple of three or four floats from 0-1.\n        ')
        # Getting the type of 'self' (line 985)
        self_15245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 15), 'self')
        # Obtaining the member '_rgb' of a type (line 985)
        _rgb_15246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 985, 15), self_15245, '_rgb')
        # Assigning a type to the variable 'stypy_return_type' (line 985)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 985, 8), 'stypy_return_type', _rgb_15246)
        
        # ################# End of 'get_rgb(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_rgb' in the type store
        # Getting the type of 'stypy_return_type' (line 981)
        stypy_return_type_15247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15247)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_rgb'
        return stypy_return_type_15247


    @norecursion
    def get_url(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_url'
        module_type_store = module_type_store.open_function_context('get_url', 987, 4, False)
        # Assigning a type to the variable 'self' (line 988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_url.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_url.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_url.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_url.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_url')
        GraphicsContextBase.get_url.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_url.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_url.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_url.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_url.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_url.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_url.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_url', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_url', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_url(...)' code ##################

        unicode_15248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 990, (-1)), 'unicode', u'\n        returns a url if one is set, None otherwise\n        ')
        # Getting the type of 'self' (line 991)
        self_15249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 15), 'self')
        # Obtaining the member '_url' of a type (line 991)
        _url_15250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 15), self_15249, '_url')
        # Assigning a type to the variable 'stypy_return_type' (line 991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 991, 8), 'stypy_return_type', _url_15250)
        
        # ################# End of 'get_url(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_url' in the type store
        # Getting the type of 'stypy_return_type' (line 987)
        stypy_return_type_15251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15251)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_url'
        return stypy_return_type_15251


    @norecursion
    def get_gid(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_gid'
        module_type_store = module_type_store.open_function_context('get_gid', 993, 4, False)
        # Assigning a type to the variable 'self' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_gid.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_gid.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_gid.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_gid.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_gid')
        GraphicsContextBase.get_gid.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_gid.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_gid.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_gid.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_gid.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_gid.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_gid.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_gid', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_gid', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_gid(...)' code ##################

        unicode_15252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, (-1)), 'unicode', u'\n        Return the object identifier if one is set, None otherwise.\n        ')
        # Getting the type of 'self' (line 997)
        self_15253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 15), 'self')
        # Obtaining the member '_gid' of a type (line 997)
        _gid_15254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 15), self_15253, '_gid')
        # Assigning a type to the variable 'stypy_return_type' (line 997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 8), 'stypy_return_type', _gid_15254)
        
        # ################# End of 'get_gid(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_gid' in the type store
        # Getting the type of 'stypy_return_type' (line 993)
        stypy_return_type_15255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15255)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_gid'
        return stypy_return_type_15255


    @norecursion
    def get_snap(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_snap'
        module_type_store = module_type_store.open_function_context('get_snap', 999, 4, False)
        # Assigning a type to the variable 'self' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_snap.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_snap.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_snap.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_snap.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_snap')
        GraphicsContextBase.get_snap.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_snap.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_snap.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_snap.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_snap.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_snap.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_snap.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_snap', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_snap', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_snap(...)' code ##################

        unicode_15256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1009, (-1)), 'unicode', u'\n        returns the snap setting which may be:\n\n          * True: snap vertices to the nearest pixel center\n\n          * False: leave vertices as-is\n\n          * None: (auto) If the path contains only rectilinear line\n            segments, round to the nearest pixel center\n        ')
        # Getting the type of 'self' (line 1010)
        self_15257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 15), 'self')
        # Obtaining the member '_snap' of a type (line 1010)
        _snap_15258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 15), self_15257, '_snap')
        # Assigning a type to the variable 'stypy_return_type' (line 1010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 8), 'stypy_return_type', _snap_15258)
        
        # ################# End of 'get_snap(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_snap' in the type store
        # Getting the type of 'stypy_return_type' (line 999)
        stypy_return_type_15259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15259)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_snap'
        return stypy_return_type_15259


    @norecursion
    def set_alpha(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_alpha'
        module_type_store = module_type_store.open_function_context('set_alpha', 1012, 4, False)
        # Assigning a type to the variable 'self' (line 1013)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1013, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_alpha.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_alpha.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_alpha.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_alpha.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_alpha')
        GraphicsContextBase.set_alpha.__dict__.__setitem__('stypy_param_names_list', ['alpha'])
        GraphicsContextBase.set_alpha.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_alpha.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_alpha.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_alpha.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_alpha.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_alpha.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_alpha', ['alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_alpha', localization, ['alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_alpha(...)' code ##################

        unicode_15260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1019, (-1)), 'unicode', u'\n        Set the alpha value used for blending - not supported on all backends.\n        If ``alpha=None`` (the default), the alpha components of the\n        foreground and fill colors will be used to set their respective\n        transparencies (where applicable); otherwise, ``alpha`` will override\n        them.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1020)
        # Getting the type of 'alpha' (line 1020)
        alpha_15261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 8), 'alpha')
        # Getting the type of 'None' (line 1020)
        None_15262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 24), 'None')
        
        (may_be_15263, more_types_in_union_15264) = may_not_be_none(alpha_15261, None_15262)

        if may_be_15263:

            if more_types_in_union_15264:
                # Runtime conditional SSA (line 1020)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1021):
            
            # Assigning a Name to a Attribute (line 1021):
            
            # Assigning a Name to a Attribute (line 1021):
            # Getting the type of 'alpha' (line 1021)
            alpha_15265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 26), 'alpha')
            # Getting the type of 'self' (line 1021)
            self_15266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 12), 'self')
            # Setting the type of the member '_alpha' of a type (line 1021)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1021, 12), self_15266, '_alpha', alpha_15265)
            
            # Assigning a Name to a Attribute (line 1022):
            
            # Assigning a Name to a Attribute (line 1022):
            
            # Assigning a Name to a Attribute (line 1022):
            # Getting the type of 'True' (line 1022)
            True_15267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 33), 'True')
            # Getting the type of 'self' (line 1022)
            self_15268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 12), 'self')
            # Setting the type of the member '_forced_alpha' of a type (line 1022)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1022, 12), self_15268, '_forced_alpha', True_15267)

            if more_types_in_union_15264:
                # Runtime conditional SSA for else branch (line 1020)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_15263) or more_types_in_union_15264):
            
            # Assigning a Num to a Attribute (line 1024):
            
            # Assigning a Num to a Attribute (line 1024):
            
            # Assigning a Num to a Attribute (line 1024):
            float_15269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, 26), 'float')
            # Getting the type of 'self' (line 1024)
            self_15270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 12), 'self')
            # Setting the type of the member '_alpha' of a type (line 1024)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1024, 12), self_15270, '_alpha', float_15269)
            
            # Assigning a Name to a Attribute (line 1025):
            
            # Assigning a Name to a Attribute (line 1025):
            
            # Assigning a Name to a Attribute (line 1025):
            # Getting the type of 'False' (line 1025)
            False_15271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 33), 'False')
            # Getting the type of 'self' (line 1025)
            self_15272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 12), 'self')
            # Setting the type of the member '_forced_alpha' of a type (line 1025)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 12), self_15272, '_forced_alpha', False_15271)

            if (may_be_15263 and more_types_in_union_15264):
                # SSA join for if statement (line 1020)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_foreground(...): (line 1026)
        # Processing the call arguments (line 1026)
        # Getting the type of 'self' (line 1026)
        self_15275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 28), 'self', False)
        # Obtaining the member '_rgb' of a type (line 1026)
        _rgb_15276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 28), self_15275, '_rgb')
        # Processing the call keyword arguments (line 1026)
        # Getting the type of 'True' (line 1026)
        True_15277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 46), 'True', False)
        keyword_15278 = True_15277
        kwargs_15279 = {'isRGBA': keyword_15278}
        # Getting the type of 'self' (line 1026)
        self_15273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 8), 'self', False)
        # Obtaining the member 'set_foreground' of a type (line 1026)
        set_foreground_15274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 8), self_15273, 'set_foreground')
        # Calling set_foreground(args, kwargs) (line 1026)
        set_foreground_call_result_15280 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 8), set_foreground_15274, *[_rgb_15276], **kwargs_15279)
        
        
        # ################# End of 'set_alpha(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_alpha' in the type store
        # Getting the type of 'stypy_return_type' (line 1012)
        stypy_return_type_15281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15281)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_alpha'
        return stypy_return_type_15281


    @norecursion
    def set_antialiased(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_antialiased'
        module_type_store = module_type_store.open_function_context('set_antialiased', 1028, 4, False)
        # Assigning a type to the variable 'self' (line 1029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_antialiased.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_antialiased.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_antialiased.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_antialiased.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_antialiased')
        GraphicsContextBase.set_antialiased.__dict__.__setitem__('stypy_param_names_list', ['b'])
        GraphicsContextBase.set_antialiased.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_antialiased.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_antialiased.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_antialiased.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_antialiased.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_antialiased.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_antialiased', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_antialiased', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_antialiased(...)' code ##################

        unicode_15282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1031, (-1)), 'unicode', u'\n        True if object should be drawn with antialiased rendering\n        ')
        
        # Getting the type of 'b' (line 1034)
        b_15283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 11), 'b')
        # Testing the type of an if condition (line 1034)
        if_condition_15284 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1034, 8), b_15283)
        # Assigning a type to the variable 'if_condition_15284' (line 1034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 8), 'if_condition_15284', if_condition_15284)
        # SSA begins for if statement (line 1034)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 1035):
        
        # Assigning a Num to a Attribute (line 1035):
        
        # Assigning a Num to a Attribute (line 1035):
        int_15285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 32), 'int')
        # Getting the type of 'self' (line 1035)
        self_15286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 12), 'self')
        # Setting the type of the member '_antialiased' of a type (line 1035)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1035, 12), self_15286, '_antialiased', int_15285)
        # SSA branch for the else part of an if statement (line 1034)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Attribute (line 1037):
        
        # Assigning a Num to a Attribute (line 1037):
        
        # Assigning a Num to a Attribute (line 1037):
        int_15287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 32), 'int')
        # Getting the type of 'self' (line 1037)
        self_15288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 12), 'self')
        # Setting the type of the member '_antialiased' of a type (line 1037)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 12), self_15288, '_antialiased', int_15287)
        # SSA join for if statement (line 1034)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_antialiased(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_antialiased' in the type store
        # Getting the type of 'stypy_return_type' (line 1028)
        stypy_return_type_15289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15289)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_antialiased'
        return stypy_return_type_15289


    @norecursion
    def set_capstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_capstyle'
        module_type_store = module_type_store.open_function_context('set_capstyle', 1039, 4, False)
        # Assigning a type to the variable 'self' (line 1040)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1040, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_capstyle.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_capstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_capstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_capstyle.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_capstyle')
        GraphicsContextBase.set_capstyle.__dict__.__setitem__('stypy_param_names_list', ['cs'])
        GraphicsContextBase.set_capstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_capstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_capstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_capstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_capstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_capstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_capstyle', ['cs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_capstyle', localization, ['cs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_capstyle(...)' code ##################

        unicode_15290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, (-1)), 'unicode', u"\n        Set the capstyle as a string in ('butt', 'round', 'projecting')\n        ")
        
        
        # Getting the type of 'cs' (line 1043)
        cs_15291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 11), 'cs')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1043)
        tuple_15292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1043)
        # Adding element type (line 1043)
        unicode_15293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 18), 'unicode', u'butt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 18), tuple_15292, unicode_15293)
        # Adding element type (line 1043)
        unicode_15294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 26), 'unicode', u'round')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 18), tuple_15292, unicode_15294)
        # Adding element type (line 1043)
        unicode_15295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 35), 'unicode', u'projecting')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 18), tuple_15292, unicode_15295)
        
        # Applying the binary operator 'in' (line 1043)
        result_contains_15296 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 11), 'in', cs_15291, tuple_15292)
        
        # Testing the type of an if condition (line 1043)
        if_condition_15297 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1043, 8), result_contains_15296)
        # Assigning a type to the variable 'if_condition_15297' (line 1043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'if_condition_15297', if_condition_15297)
        # SSA begins for if statement (line 1043)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1044):
        
        # Assigning a Name to a Attribute (line 1044):
        
        # Assigning a Name to a Attribute (line 1044):
        # Getting the type of 'cs' (line 1044)
        cs_15298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 29), 'cs')
        # Getting the type of 'self' (line 1044)
        self_15299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 12), 'self')
        # Setting the type of the member '_capstyle' of a type (line 1044)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1044, 12), self_15299, '_capstyle', cs_15298)
        # SSA branch for the else part of an if statement (line 1043)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1046)
        # Processing the call arguments (line 1046)
        unicode_15301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 29), 'unicode', u'Unrecognized cap style.  Found %s')
        # Getting the type of 'cs' (line 1046)
        cs_15302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 67), 'cs', False)
        # Applying the binary operator '%' (line 1046)
        result_mod_15303 = python_operator(stypy.reporting.localization.Localization(__file__, 1046, 29), '%', unicode_15301, cs_15302)
        
        # Processing the call keyword arguments (line 1046)
        kwargs_15304 = {}
        # Getting the type of 'ValueError' (line 1046)
        ValueError_15300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1046)
        ValueError_call_result_15305 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 18), ValueError_15300, *[result_mod_15303], **kwargs_15304)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1046, 12), ValueError_call_result_15305, 'raise parameter', BaseException)
        # SSA join for if statement (line 1043)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_capstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_capstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1039)
        stypy_return_type_15306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15306)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_capstyle'
        return stypy_return_type_15306


    @norecursion
    def set_clip_rectangle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_clip_rectangle'
        module_type_store = module_type_store.open_function_context('set_clip_rectangle', 1048, 4, False)
        # Assigning a type to the variable 'self' (line 1049)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1049, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_clip_rectangle.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_clip_rectangle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_clip_rectangle.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_clip_rectangle.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_clip_rectangle')
        GraphicsContextBase.set_clip_rectangle.__dict__.__setitem__('stypy_param_names_list', ['rectangle'])
        GraphicsContextBase.set_clip_rectangle.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_clip_rectangle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_clip_rectangle.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_clip_rectangle.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_clip_rectangle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_clip_rectangle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_clip_rectangle', ['rectangle'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_clip_rectangle', localization, ['rectangle'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_clip_rectangle(...)' code ##################

        unicode_15307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, (-1)), 'unicode', u'\n        Set the clip rectangle with sequence (left, bottom, width, height)\n        ')
        
        # Assigning a Name to a Attribute (line 1052):
        
        # Assigning a Name to a Attribute (line 1052):
        
        # Assigning a Name to a Attribute (line 1052):
        # Getting the type of 'rectangle' (line 1052)
        rectangle_15308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 25), 'rectangle')
        # Getting the type of 'self' (line 1052)
        self_15309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), 'self')
        # Setting the type of the member '_cliprect' of a type (line 1052)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 8), self_15309, '_cliprect', rectangle_15308)
        
        # ################# End of 'set_clip_rectangle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_clip_rectangle' in the type store
        # Getting the type of 'stypy_return_type' (line 1048)
        stypy_return_type_15310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15310)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_clip_rectangle'
        return stypy_return_type_15310


    @norecursion
    def set_clip_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_clip_path'
        module_type_store = module_type_store.open_function_context('set_clip_path', 1054, 4, False)
        # Assigning a type to the variable 'self' (line 1055)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_clip_path.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_clip_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_clip_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_clip_path.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_clip_path')
        GraphicsContextBase.set_clip_path.__dict__.__setitem__('stypy_param_names_list', ['path'])
        GraphicsContextBase.set_clip_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_clip_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_clip_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_clip_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_clip_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_clip_path.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_clip_path', ['path'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_clip_path', localization, ['path'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_clip_path(...)' code ##################

        unicode_15311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1058, (-1)), 'unicode', u'\n        Set the clip path and transformation.  Path should be a\n        :class:`~matplotlib.transforms.TransformedPath` instance.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'path' (line 1059)
        path_15312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 11), 'path')
        # Getting the type of 'None' (line 1059)
        None_15313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 23), 'None')
        # Applying the binary operator 'isnot' (line 1059)
        result_is_not_15314 = python_operator(stypy.reporting.localization.Localization(__file__, 1059, 11), 'isnot', path_15312, None_15313)
        
        
        
        # Call to isinstance(...): (line 1059)
        # Processing the call arguments (line 1059)
        # Getting the type of 'path' (line 1059)
        path_15316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 47), 'path', False)
        # Getting the type of 'transforms' (line 1060)
        transforms_15317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 16), 'transforms', False)
        # Obtaining the member 'TransformedPath' of a type (line 1060)
        TransformedPath_15318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 16), transforms_15317, 'TransformedPath')
        # Processing the call keyword arguments (line 1059)
        kwargs_15319 = {}
        # Getting the type of 'isinstance' (line 1059)
        isinstance_15315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 36), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1059)
        isinstance_call_result_15320 = invoke(stypy.reporting.localization.Localization(__file__, 1059, 36), isinstance_15315, *[path_15316, TransformedPath_15318], **kwargs_15319)
        
        # Applying the 'not' unary operator (line 1059)
        result_not__15321 = python_operator(stypy.reporting.localization.Localization(__file__, 1059, 32), 'not', isinstance_call_result_15320)
        
        # Applying the binary operator 'and' (line 1059)
        result_and_keyword_15322 = python_operator(stypy.reporting.localization.Localization(__file__, 1059, 11), 'and', result_is_not_15314, result_not__15321)
        
        # Testing the type of an if condition (line 1059)
        if_condition_15323 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1059, 8), result_and_keyword_15322)
        # Assigning a type to the variable 'if_condition_15323' (line 1059)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 8), 'if_condition_15323', if_condition_15323)
        # SSA begins for if statement (line 1059)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1061):
        
        # Assigning a Str to a Name (line 1061):
        
        # Assigning a Str to a Name (line 1061):
        unicode_15324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1061, 19), 'unicode', u'Path should be a matplotlib.transforms.TransformedPathinstance.')
        # Assigning a type to the variable 'msg' (line 1061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1061, 12), 'msg', unicode_15324)
        
        # Call to ValueError(...): (line 1063)
        # Processing the call arguments (line 1063)
        # Getting the type of 'msg' (line 1063)
        msg_15326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 29), 'msg', False)
        # Processing the call keyword arguments (line 1063)
        kwargs_15327 = {}
        # Getting the type of 'ValueError' (line 1063)
        ValueError_15325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1063)
        ValueError_call_result_15328 = invoke(stypy.reporting.localization.Localization(__file__, 1063, 18), ValueError_15325, *[msg_15326], **kwargs_15327)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1063, 12), ValueError_call_result_15328, 'raise parameter', BaseException)
        # SSA join for if statement (line 1059)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1064):
        
        # Assigning a Name to a Attribute (line 1064):
        
        # Assigning a Name to a Attribute (line 1064):
        # Getting the type of 'path' (line 1064)
        path_15329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 25), 'path')
        # Getting the type of 'self' (line 1064)
        self_15330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 8), 'self')
        # Setting the type of the member '_clippath' of a type (line 1064)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1064, 8), self_15330, '_clippath', path_15329)
        
        # ################# End of 'set_clip_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_clip_path' in the type store
        # Getting the type of 'stypy_return_type' (line 1054)
        stypy_return_type_15331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15331)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_clip_path'
        return stypy_return_type_15331


    @norecursion
    def set_dashes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_dashes'
        module_type_store = module_type_store.open_function_context('set_dashes', 1066, 4, False)
        # Assigning a type to the variable 'self' (line 1067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_dashes.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_dashes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_dashes.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_dashes.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_dashes')
        GraphicsContextBase.set_dashes.__dict__.__setitem__('stypy_param_names_list', ['dash_offset', 'dash_list'])
        GraphicsContextBase.set_dashes.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_dashes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_dashes.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_dashes.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_dashes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_dashes.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_dashes', ['dash_offset', 'dash_list'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_dashes', localization, ['dash_offset', 'dash_list'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_dashes(...)' code ##################

        unicode_15332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1079, (-1)), 'unicode', u'\n        Set the dash style for the gc.\n\n        Parameters\n        ----------\n        dash_offset : float\n            is the offset (usually 0).\n\n        dash_list : array_like\n            specifies the on-off sequence as points.\n            ``(None, None)`` specifies a solid line\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1080)
        # Getting the type of 'dash_list' (line 1080)
        dash_list_15333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 8), 'dash_list')
        # Getting the type of 'None' (line 1080)
        None_15334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 28), 'None')
        
        (may_be_15335, more_types_in_union_15336) = may_not_be_none(dash_list_15333, None_15334)

        if may_be_15335:

            if more_types_in_union_15336:
                # Runtime conditional SSA (line 1080)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1081):
            
            # Assigning a Call to a Name (line 1081):
            
            # Assigning a Call to a Name (line 1081):
            
            # Call to asarray(...): (line 1081)
            # Processing the call arguments (line 1081)
            # Getting the type of 'dash_list' (line 1081)
            dash_list_15339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 28), 'dash_list', False)
            # Processing the call keyword arguments (line 1081)
            kwargs_15340 = {}
            # Getting the type of 'np' (line 1081)
            np_15337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 17), 'np', False)
            # Obtaining the member 'asarray' of a type (line 1081)
            asarray_15338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1081, 17), np_15337, 'asarray')
            # Calling asarray(args, kwargs) (line 1081)
            asarray_call_result_15341 = invoke(stypy.reporting.localization.Localization(__file__, 1081, 17), asarray_15338, *[dash_list_15339], **kwargs_15340)
            
            # Assigning a type to the variable 'dl' (line 1081)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 12), 'dl', asarray_call_result_15341)
            
            
            # Call to any(...): (line 1082)
            # Processing the call arguments (line 1082)
            
            # Getting the type of 'dl' (line 1082)
            dl_15344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 22), 'dl', False)
            float_15345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 27), 'float')
            # Applying the binary operator '<' (line 1082)
            result_lt_15346 = python_operator(stypy.reporting.localization.Localization(__file__, 1082, 22), '<', dl_15344, float_15345)
            
            # Processing the call keyword arguments (line 1082)
            kwargs_15347 = {}
            # Getting the type of 'np' (line 1082)
            np_15342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 15), 'np', False)
            # Obtaining the member 'any' of a type (line 1082)
            any_15343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1082, 15), np_15342, 'any')
            # Calling any(args, kwargs) (line 1082)
            any_call_result_15348 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 15), any_15343, *[result_lt_15346], **kwargs_15347)
            
            # Testing the type of an if condition (line 1082)
            if_condition_15349 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1082, 12), any_call_result_15348)
            # Assigning a type to the variable 'if_condition_15349' (line 1082)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1082, 12), 'if_condition_15349', if_condition_15349)
            # SSA begins for if statement (line 1082)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 1083)
            # Processing the call arguments (line 1083)
            unicode_15351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 33), 'unicode', u'All values in the dash list must be positive')
            # Processing the call keyword arguments (line 1083)
            kwargs_15352 = {}
            # Getting the type of 'ValueError' (line 1083)
            ValueError_15350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1083)
            ValueError_call_result_15353 = invoke(stypy.reporting.localization.Localization(__file__, 1083, 22), ValueError_15350, *[unicode_15351], **kwargs_15352)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1083, 16), ValueError_call_result_15353, 'raise parameter', BaseException)
            # SSA join for if statement (line 1082)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_15336:
                # SSA join for if statement (line 1080)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Tuple to a Attribute (line 1084):
        
        # Assigning a Tuple to a Attribute (line 1084):
        
        # Assigning a Tuple to a Attribute (line 1084):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1084)
        tuple_15354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1084, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1084)
        # Adding element type (line 1084)
        # Getting the type of 'dash_offset' (line 1084)
        dash_offset_15355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 23), 'dash_offset')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1084, 23), tuple_15354, dash_offset_15355)
        # Adding element type (line 1084)
        # Getting the type of 'dash_list' (line 1084)
        dash_list_15356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 36), 'dash_list')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1084, 23), tuple_15354, dash_list_15356)
        
        # Getting the type of 'self' (line 1084)
        self_15357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 8), 'self')
        # Setting the type of the member '_dashes' of a type (line 1084)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1084, 8), self_15357, '_dashes', tuple_15354)
        
        # ################# End of 'set_dashes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_dashes' in the type store
        # Getting the type of 'stypy_return_type' (line 1066)
        stypy_return_type_15358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15358)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_dashes'
        return stypy_return_type_15358


    @norecursion
    def set_foreground(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1086)
        False_15359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 40), 'False')
        defaults = [False_15359]
        # Create a new context for function 'set_foreground'
        module_type_store = module_type_store.open_function_context('set_foreground', 1086, 4, False)
        # Assigning a type to the variable 'self' (line 1087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1087, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_foreground.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_foreground.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_foreground.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_foreground.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_foreground')
        GraphicsContextBase.set_foreground.__dict__.__setitem__('stypy_param_names_list', ['fg', 'isRGBA'])
        GraphicsContextBase.set_foreground.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_foreground.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_foreground.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_foreground.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_foreground.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_foreground.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_foreground', ['fg', 'isRGBA'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_foreground', localization, ['fg', 'isRGBA'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_foreground(...)' code ##################

        unicode_15360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1093, (-1)), 'unicode', u'\n        Set the foreground color.  fg can be a MATLAB format string, a\n        html hex color string, an rgb or rgba unit tuple, or a float between 0\n        and 1.  In the latter case, grayscale is used.\n\n        If you know fg is rgba, set ``isRGBA=True`` for efficiency.\n        ')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 1094)
        self_15361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 11), 'self')
        # Obtaining the member '_forced_alpha' of a type (line 1094)
        _forced_alpha_15362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 11), self_15361, '_forced_alpha')
        # Getting the type of 'isRGBA' (line 1094)
        isRGBA_15363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 34), 'isRGBA')
        # Applying the binary operator 'and' (line 1094)
        result_and_keyword_15364 = python_operator(stypy.reporting.localization.Localization(__file__, 1094, 11), 'and', _forced_alpha_15362, isRGBA_15363)
        
        # Testing the type of an if condition (line 1094)
        if_condition_15365 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1094, 8), result_and_keyword_15364)
        # Assigning a type to the variable 'if_condition_15365' (line 1094)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1094, 8), 'if_condition_15365', if_condition_15365)
        # SSA begins for if statement (line 1094)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 1095):
        
        # Assigning a BinOp to a Attribute (line 1095):
        
        # Assigning a BinOp to a Attribute (line 1095):
        
        # Obtaining the type of the subscript
        int_15366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 28), 'int')
        slice_15367 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1095, 24), None, int_15366, None)
        # Getting the type of 'fg' (line 1095)
        fg_15368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 24), 'fg')
        # Obtaining the member '__getitem__' of a type (line 1095)
        getitem___15369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 24), fg_15368, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1095)
        subscript_call_result_15370 = invoke(stypy.reporting.localization.Localization(__file__, 1095, 24), getitem___15369, slice_15367)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1095)
        tuple_15371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1095)
        # Adding element type (line 1095)
        # Getting the type of 'self' (line 1095)
        self_15372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 34), 'self')
        # Obtaining the member '_alpha' of a type (line 1095)
        _alpha_15373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 34), self_15372, '_alpha')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1095, 34), tuple_15371, _alpha_15373)
        
        # Applying the binary operator '+' (line 1095)
        result_add_15374 = python_operator(stypy.reporting.localization.Localization(__file__, 1095, 24), '+', subscript_call_result_15370, tuple_15371)
        
        # Getting the type of 'self' (line 1095)
        self_15375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 12), 'self')
        # Setting the type of the member '_rgb' of a type (line 1095)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 12), self_15375, '_rgb', result_add_15374)
        # SSA branch for the else part of an if statement (line 1094)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'self' (line 1096)
        self_15376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 13), 'self')
        # Obtaining the member '_forced_alpha' of a type (line 1096)
        _forced_alpha_15377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1096, 13), self_15376, '_forced_alpha')
        # Testing the type of an if condition (line 1096)
        if_condition_15378 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1096, 13), _forced_alpha_15377)
        # Assigning a type to the variable 'if_condition_15378' (line 1096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 13), 'if_condition_15378', if_condition_15378)
        # SSA begins for if statement (line 1096)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1097):
        
        # Assigning a Call to a Attribute (line 1097):
        
        # Assigning a Call to a Attribute (line 1097):
        
        # Call to to_rgba(...): (line 1097)
        # Processing the call arguments (line 1097)
        # Getting the type of 'fg' (line 1097)
        fg_15381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 39), 'fg', False)
        # Getting the type of 'self' (line 1097)
        self_15382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 43), 'self', False)
        # Obtaining the member '_alpha' of a type (line 1097)
        _alpha_15383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 43), self_15382, '_alpha')
        # Processing the call keyword arguments (line 1097)
        kwargs_15384 = {}
        # Getting the type of 'colors' (line 1097)
        colors_15379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 24), 'colors', False)
        # Obtaining the member 'to_rgba' of a type (line 1097)
        to_rgba_15380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 24), colors_15379, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 1097)
        to_rgba_call_result_15385 = invoke(stypy.reporting.localization.Localization(__file__, 1097, 24), to_rgba_15380, *[fg_15381, _alpha_15383], **kwargs_15384)
        
        # Getting the type of 'self' (line 1097)
        self_15386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 12), 'self')
        # Setting the type of the member '_rgb' of a type (line 1097)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 12), self_15386, '_rgb', to_rgba_call_result_15385)
        # SSA branch for the else part of an if statement (line 1096)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'isRGBA' (line 1098)
        isRGBA_15387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 13), 'isRGBA')
        # Testing the type of an if condition (line 1098)
        if_condition_15388 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1098, 13), isRGBA_15387)
        # Assigning a type to the variable 'if_condition_15388' (line 1098)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1098, 13), 'if_condition_15388', if_condition_15388)
        # SSA begins for if statement (line 1098)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1099):
        
        # Assigning a Name to a Attribute (line 1099):
        
        # Assigning a Name to a Attribute (line 1099):
        # Getting the type of 'fg' (line 1099)
        fg_15389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 24), 'fg')
        # Getting the type of 'self' (line 1099)
        self_15390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 12), 'self')
        # Setting the type of the member '_rgb' of a type (line 1099)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 12), self_15390, '_rgb', fg_15389)
        # SSA branch for the else part of an if statement (line 1098)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 1101):
        
        # Assigning a Call to a Attribute (line 1101):
        
        # Assigning a Call to a Attribute (line 1101):
        
        # Call to to_rgba(...): (line 1101)
        # Processing the call arguments (line 1101)
        # Getting the type of 'fg' (line 1101)
        fg_15393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 39), 'fg', False)
        # Processing the call keyword arguments (line 1101)
        kwargs_15394 = {}
        # Getting the type of 'colors' (line 1101)
        colors_15391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 24), 'colors', False)
        # Obtaining the member 'to_rgba' of a type (line 1101)
        to_rgba_15392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 24), colors_15391, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 1101)
        to_rgba_call_result_15395 = invoke(stypy.reporting.localization.Localization(__file__, 1101, 24), to_rgba_15392, *[fg_15393], **kwargs_15394)
        
        # Getting the type of 'self' (line 1101)
        self_15396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 12), 'self')
        # Setting the type of the member '_rgb' of a type (line 1101)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 12), self_15396, '_rgb', to_rgba_call_result_15395)
        # SSA join for if statement (line 1098)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1096)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1094)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_foreground(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_foreground' in the type store
        # Getting the type of 'stypy_return_type' (line 1086)
        stypy_return_type_15397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15397)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_foreground'
        return stypy_return_type_15397


    @norecursion
    def set_joinstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_joinstyle'
        module_type_store = module_type_store.open_function_context('set_joinstyle', 1103, 4, False)
        # Assigning a type to the variable 'self' (line 1104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1104, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_joinstyle.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_joinstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_joinstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_joinstyle.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_joinstyle')
        GraphicsContextBase.set_joinstyle.__dict__.__setitem__('stypy_param_names_list', ['js'])
        GraphicsContextBase.set_joinstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_joinstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_joinstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_joinstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_joinstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_joinstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_joinstyle', ['js'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_joinstyle', localization, ['js'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_joinstyle(...)' code ##################

        unicode_15398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1106, (-1)), 'unicode', u"\n        Set the join style to be one of ('miter', 'round', 'bevel')\n        ")
        
        
        # Getting the type of 'js' (line 1107)
        js_15399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 11), 'js')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1107)
        tuple_15400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1107)
        # Adding element type (line 1107)
        unicode_15401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 18), 'unicode', u'miter')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1107, 18), tuple_15400, unicode_15401)
        # Adding element type (line 1107)
        unicode_15402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 27), 'unicode', u'round')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1107, 18), tuple_15400, unicode_15402)
        # Adding element type (line 1107)
        unicode_15403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 36), 'unicode', u'bevel')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1107, 18), tuple_15400, unicode_15403)
        
        # Applying the binary operator 'in' (line 1107)
        result_contains_15404 = python_operator(stypy.reporting.localization.Localization(__file__, 1107, 11), 'in', js_15399, tuple_15400)
        
        # Testing the type of an if condition (line 1107)
        if_condition_15405 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1107, 8), result_contains_15404)
        # Assigning a type to the variable 'if_condition_15405' (line 1107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 8), 'if_condition_15405', if_condition_15405)
        # SSA begins for if statement (line 1107)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1108):
        
        # Assigning a Name to a Attribute (line 1108):
        
        # Assigning a Name to a Attribute (line 1108):
        # Getting the type of 'js' (line 1108)
        js_15406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 30), 'js')
        # Getting the type of 'self' (line 1108)
        self_15407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 12), 'self')
        # Setting the type of the member '_joinstyle' of a type (line 1108)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 12), self_15407, '_joinstyle', js_15406)
        # SSA branch for the else part of an if statement (line 1107)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1110)
        # Processing the call arguments (line 1110)
        unicode_15409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1110, 29), 'unicode', u'Unrecognized join style.  Found %s')
        # Getting the type of 'js' (line 1110)
        js_15410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 68), 'js', False)
        # Applying the binary operator '%' (line 1110)
        result_mod_15411 = python_operator(stypy.reporting.localization.Localization(__file__, 1110, 29), '%', unicode_15409, js_15410)
        
        # Processing the call keyword arguments (line 1110)
        kwargs_15412 = {}
        # Getting the type of 'ValueError' (line 1110)
        ValueError_15408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1110)
        ValueError_call_result_15413 = invoke(stypy.reporting.localization.Localization(__file__, 1110, 18), ValueError_15408, *[result_mod_15411], **kwargs_15412)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1110, 12), ValueError_call_result_15413, 'raise parameter', BaseException)
        # SSA join for if statement (line 1107)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_joinstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_joinstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1103)
        stypy_return_type_15414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15414)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_joinstyle'
        return stypy_return_type_15414


    @norecursion
    def set_linewidth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_linewidth'
        module_type_store = module_type_store.open_function_context('set_linewidth', 1112, 4, False)
        # Assigning a type to the variable 'self' (line 1113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_linewidth.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_linewidth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_linewidth.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_linewidth.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_linewidth')
        GraphicsContextBase.set_linewidth.__dict__.__setitem__('stypy_param_names_list', ['w'])
        GraphicsContextBase.set_linewidth.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_linewidth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_linewidth.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_linewidth.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_linewidth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_linewidth.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_linewidth', ['w'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_linewidth', localization, ['w'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_linewidth(...)' code ##################

        unicode_15415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1115, (-1)), 'unicode', u'\n        Set the linewidth in points\n        ')
        
        # Assigning a Call to a Attribute (line 1116):
        
        # Assigning a Call to a Attribute (line 1116):
        
        # Assigning a Call to a Attribute (line 1116):
        
        # Call to float(...): (line 1116)
        # Processing the call arguments (line 1116)
        # Getting the type of 'w' (line 1116)
        w_15417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 32), 'w', False)
        # Processing the call keyword arguments (line 1116)
        kwargs_15418 = {}
        # Getting the type of 'float' (line 1116)
        float_15416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 26), 'float', False)
        # Calling float(args, kwargs) (line 1116)
        float_call_result_15419 = invoke(stypy.reporting.localization.Localization(__file__, 1116, 26), float_15416, *[w_15417], **kwargs_15418)
        
        # Getting the type of 'self' (line 1116)
        self_15420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 8), 'self')
        # Setting the type of the member '_linewidth' of a type (line 1116)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 8), self_15420, '_linewidth', float_call_result_15419)
        
        # ################# End of 'set_linewidth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_linewidth' in the type store
        # Getting the type of 'stypy_return_type' (line 1112)
        stypy_return_type_15421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15421)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_linewidth'
        return stypy_return_type_15421


    @norecursion
    def set_linestyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_linestyle'
        module_type_store = module_type_store.open_function_context('set_linestyle', 1118, 4, False)
        # Assigning a type to the variable 'self' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_linestyle.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_linestyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_linestyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_linestyle.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_linestyle')
        GraphicsContextBase.set_linestyle.__dict__.__setitem__('stypy_param_names_list', ['style'])
        GraphicsContextBase.set_linestyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_linestyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_linestyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_linestyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_linestyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_linestyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_linestyle', ['style'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_linestyle', localization, ['style'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_linestyle(...)' code ##################

        unicode_15422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, (-1)), 'unicode', u"\n        Set the linestyle to be one of ('solid', 'dashed', 'dashdot',\n        'dotted'). These are defined in the rcParams\n        `lines.dashed_pattern`, `lines.dashdot_pattern` and\n        `lines.dotted_pattern`.  One may also specify customized dash\n        styles by providing a tuple of (offset, dash pairs).\n        ")
        
        # Assigning a Name to a Attribute (line 1127):
        
        # Assigning a Name to a Attribute (line 1127):
        
        # Assigning a Name to a Attribute (line 1127):
        # Getting the type of 'style' (line 1127)
        style_15423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 26), 'style')
        # Getting the type of 'self' (line 1127)
        self_15424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 8), 'self')
        # Setting the type of the member '_linestyle' of a type (line 1127)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1127, 8), self_15424, '_linestyle', style_15423)
        
        # ################# End of 'set_linestyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_linestyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1118)
        stypy_return_type_15425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15425)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_linestyle'
        return stypy_return_type_15425


    @norecursion
    def set_url(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_url'
        module_type_store = module_type_store.open_function_context('set_url', 1129, 4, False)
        # Assigning a type to the variable 'self' (line 1130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_url.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_url.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_url.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_url.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_url')
        GraphicsContextBase.set_url.__dict__.__setitem__('stypy_param_names_list', ['url'])
        GraphicsContextBase.set_url.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_url.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_url.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_url.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_url.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_url.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_url', ['url'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_url', localization, ['url'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_url(...)' code ##################

        unicode_15426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, (-1)), 'unicode', u'\n        Sets the url for links in compatible backends\n        ')
        
        # Assigning a Name to a Attribute (line 1133):
        
        # Assigning a Name to a Attribute (line 1133):
        
        # Assigning a Name to a Attribute (line 1133):
        # Getting the type of 'url' (line 1133)
        url_15427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 20), 'url')
        # Getting the type of 'self' (line 1133)
        self_15428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 8), 'self')
        # Setting the type of the member '_url' of a type (line 1133)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 8), self_15428, '_url', url_15427)
        
        # ################# End of 'set_url(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_url' in the type store
        # Getting the type of 'stypy_return_type' (line 1129)
        stypy_return_type_15429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15429)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_url'
        return stypy_return_type_15429


    @norecursion
    def set_gid(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_gid'
        module_type_store = module_type_store.open_function_context('set_gid', 1135, 4, False)
        # Assigning a type to the variable 'self' (line 1136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_gid.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_gid.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_gid.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_gid.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_gid')
        GraphicsContextBase.set_gid.__dict__.__setitem__('stypy_param_names_list', ['id'])
        GraphicsContextBase.set_gid.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_gid.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_gid.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_gid.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_gid.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_gid.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_gid', ['id'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_gid', localization, ['id'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_gid(...)' code ##################

        unicode_15430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, (-1)), 'unicode', u'\n        Sets the id.\n        ')
        
        # Assigning a Name to a Attribute (line 1139):
        
        # Assigning a Name to a Attribute (line 1139):
        
        # Assigning a Name to a Attribute (line 1139):
        # Getting the type of 'id' (line 1139)
        id_15431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 20), 'id')
        # Getting the type of 'self' (line 1139)
        self_15432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'self')
        # Setting the type of the member '_gid' of a type (line 1139)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 8), self_15432, '_gid', id_15431)
        
        # ################# End of 'set_gid(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_gid' in the type store
        # Getting the type of 'stypy_return_type' (line 1135)
        stypy_return_type_15433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15433)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_gid'
        return stypy_return_type_15433


    @norecursion
    def set_snap(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_snap'
        module_type_store = module_type_store.open_function_context('set_snap', 1141, 4, False)
        # Assigning a type to the variable 'self' (line 1142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_snap.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_snap.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_snap.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_snap.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_snap')
        GraphicsContextBase.set_snap.__dict__.__setitem__('stypy_param_names_list', ['snap'])
        GraphicsContextBase.set_snap.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_snap.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_snap.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_snap.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_snap.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_snap.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_snap', ['snap'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_snap', localization, ['snap'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_snap(...)' code ##################

        unicode_15434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1151, (-1)), 'unicode', u'\n        Sets the snap setting which may be:\n\n          * True: snap vertices to the nearest pixel center\n\n          * False: leave vertices as-is\n\n          * None: (auto) If the path contains only rectilinear line\n            segments, round to the nearest pixel center\n        ')
        
        # Assigning a Name to a Attribute (line 1152):
        
        # Assigning a Name to a Attribute (line 1152):
        
        # Assigning a Name to a Attribute (line 1152):
        # Getting the type of 'snap' (line 1152)
        snap_15435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 21), 'snap')
        # Getting the type of 'self' (line 1152)
        self_15436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 8), 'self')
        # Setting the type of the member '_snap' of a type (line 1152)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 8), self_15436, '_snap', snap_15435)
        
        # ################# End of 'set_snap(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_snap' in the type store
        # Getting the type of 'stypy_return_type' (line 1141)
        stypy_return_type_15437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15437)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_snap'
        return stypy_return_type_15437


    @norecursion
    def set_hatch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_hatch'
        module_type_store = module_type_store.open_function_context('set_hatch', 1154, 4, False)
        # Assigning a type to the variable 'self' (line 1155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_hatch.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_hatch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_hatch.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_hatch.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_hatch')
        GraphicsContextBase.set_hatch.__dict__.__setitem__('stypy_param_names_list', ['hatch'])
        GraphicsContextBase.set_hatch.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_hatch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_hatch.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_hatch.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_hatch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_hatch.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_hatch', ['hatch'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_hatch', localization, ['hatch'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_hatch(...)' code ##################

        unicode_15438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1157, (-1)), 'unicode', u'\n        Sets the hatch style for filling\n        ')
        
        # Assigning a Name to a Attribute (line 1158):
        
        # Assigning a Name to a Attribute (line 1158):
        
        # Assigning a Name to a Attribute (line 1158):
        # Getting the type of 'hatch' (line 1158)
        hatch_15439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 22), 'hatch')
        # Getting the type of 'self' (line 1158)
        self_15440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 8), 'self')
        # Setting the type of the member '_hatch' of a type (line 1158)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1158, 8), self_15440, '_hatch', hatch_15439)
        
        # ################# End of 'set_hatch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_hatch' in the type store
        # Getting the type of 'stypy_return_type' (line 1154)
        stypy_return_type_15441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15441)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_hatch'
        return stypy_return_type_15441


    @norecursion
    def get_hatch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_hatch'
        module_type_store = module_type_store.open_function_context('get_hatch', 1160, 4, False)
        # Assigning a type to the variable 'self' (line 1161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1161, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_hatch.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_hatch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_hatch.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_hatch.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_hatch')
        GraphicsContextBase.get_hatch.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_hatch.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_hatch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_hatch.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_hatch.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_hatch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_hatch.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_hatch', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_hatch', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_hatch(...)' code ##################

        unicode_15442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, (-1)), 'unicode', u'\n        Gets the current hatch style\n        ')
        # Getting the type of 'self' (line 1164)
        self_15443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 15), 'self')
        # Obtaining the member '_hatch' of a type (line 1164)
        _hatch_15444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 15), self_15443, '_hatch')
        # Assigning a type to the variable 'stypy_return_type' (line 1164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1164, 8), 'stypy_return_type', _hatch_15444)
        
        # ################# End of 'get_hatch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_hatch' in the type store
        # Getting the type of 'stypy_return_type' (line 1160)
        stypy_return_type_15445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15445)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_hatch'
        return stypy_return_type_15445


    @norecursion
    def get_hatch_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_15446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1166, 37), 'float')
        defaults = [float_15446]
        # Create a new context for function 'get_hatch_path'
        module_type_store = module_type_store.open_function_context('get_hatch_path', 1166, 4, False)
        # Assigning a type to the variable 'self' (line 1167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1167, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_hatch_path.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_hatch_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_hatch_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_hatch_path.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_hatch_path')
        GraphicsContextBase.get_hatch_path.__dict__.__setitem__('stypy_param_names_list', ['density'])
        GraphicsContextBase.get_hatch_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_hatch_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_hatch_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_hatch_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_hatch_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_hatch_path.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_hatch_path', ['density'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_hatch_path', localization, ['density'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_hatch_path(...)' code ##################

        unicode_15447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1169, (-1)), 'unicode', u'\n        Returns a Path for the current hatch.\n        ')
        
        # Assigning a Call to a Name (line 1170):
        
        # Assigning a Call to a Name (line 1170):
        
        # Assigning a Call to a Name (line 1170):
        
        # Call to get_hatch(...): (line 1170)
        # Processing the call keyword arguments (line 1170)
        kwargs_15450 = {}
        # Getting the type of 'self' (line 1170)
        self_15448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 16), 'self', False)
        # Obtaining the member 'get_hatch' of a type (line 1170)
        get_hatch_15449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 16), self_15448, 'get_hatch')
        # Calling get_hatch(args, kwargs) (line 1170)
        get_hatch_call_result_15451 = invoke(stypy.reporting.localization.Localization(__file__, 1170, 16), get_hatch_15449, *[], **kwargs_15450)
        
        # Assigning a type to the variable 'hatch' (line 1170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1170, 8), 'hatch', get_hatch_call_result_15451)
        
        # Type idiom detected: calculating its left and rigth part (line 1171)
        # Getting the type of 'hatch' (line 1171)
        hatch_15452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 11), 'hatch')
        # Getting the type of 'None' (line 1171)
        None_15453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 20), 'None')
        
        (may_be_15454, more_types_in_union_15455) = may_be_none(hatch_15452, None_15453)

        if may_be_15454:

            if more_types_in_union_15455:
                # Runtime conditional SSA (line 1171)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'None' (line 1172)
            None_15456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 19), 'None')
            # Assigning a type to the variable 'stypy_return_type' (line 1172)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1172, 12), 'stypy_return_type', None_15456)

            if more_types_in_union_15455:
                # SSA join for if statement (line 1171)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to hatch(...): (line 1173)
        # Processing the call arguments (line 1173)
        # Getting the type of 'hatch' (line 1173)
        hatch_15459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 26), 'hatch', False)
        # Getting the type of 'density' (line 1173)
        density_15460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 33), 'density', False)
        # Processing the call keyword arguments (line 1173)
        kwargs_15461 = {}
        # Getting the type of 'Path' (line 1173)
        Path_15457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 15), 'Path', False)
        # Obtaining the member 'hatch' of a type (line 1173)
        hatch_15458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1173, 15), Path_15457, 'hatch')
        # Calling hatch(args, kwargs) (line 1173)
        hatch_call_result_15462 = invoke(stypy.reporting.localization.Localization(__file__, 1173, 15), hatch_15458, *[hatch_15459, density_15460], **kwargs_15461)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1173, 8), 'stypy_return_type', hatch_call_result_15462)
        
        # ################# End of 'get_hatch_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_hatch_path' in the type store
        # Getting the type of 'stypy_return_type' (line 1166)
        stypy_return_type_15463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15463)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_hatch_path'
        return stypy_return_type_15463


    @norecursion
    def get_hatch_color(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_hatch_color'
        module_type_store = module_type_store.open_function_context('get_hatch_color', 1175, 4, False)
        # Assigning a type to the variable 'self' (line 1176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_hatch_color.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_hatch_color.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_hatch_color.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_hatch_color.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_hatch_color')
        GraphicsContextBase.get_hatch_color.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_hatch_color.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_hatch_color.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_hatch_color.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_hatch_color.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_hatch_color.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_hatch_color.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_hatch_color', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_hatch_color', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_hatch_color(...)' code ##################

        unicode_15464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1178, (-1)), 'unicode', u'\n        Gets the color to use for hatching.\n        ')
        # Getting the type of 'self' (line 1179)
        self_15465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 15), 'self')
        # Obtaining the member '_hatch_color' of a type (line 1179)
        _hatch_color_15466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 15), self_15465, '_hatch_color')
        # Assigning a type to the variable 'stypy_return_type' (line 1179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 8), 'stypy_return_type', _hatch_color_15466)
        
        # ################# End of 'get_hatch_color(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_hatch_color' in the type store
        # Getting the type of 'stypy_return_type' (line 1175)
        stypy_return_type_15467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15467)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_hatch_color'
        return stypy_return_type_15467


    @norecursion
    def set_hatch_color(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_hatch_color'
        module_type_store = module_type_store.open_function_context('set_hatch_color', 1181, 4, False)
        # Assigning a type to the variable 'self' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_hatch_color.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_hatch_color.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_hatch_color.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_hatch_color.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_hatch_color')
        GraphicsContextBase.set_hatch_color.__dict__.__setitem__('stypy_param_names_list', ['hatch_color'])
        GraphicsContextBase.set_hatch_color.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_hatch_color.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_hatch_color.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_hatch_color.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_hatch_color.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_hatch_color.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_hatch_color', ['hatch_color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_hatch_color', localization, ['hatch_color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_hatch_color(...)' code ##################

        unicode_15468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1184, (-1)), 'unicode', u'\n        sets the color to use for hatching.\n        ')
        
        # Assigning a Name to a Attribute (line 1185):
        
        # Assigning a Name to a Attribute (line 1185):
        
        # Assigning a Name to a Attribute (line 1185):
        # Getting the type of 'hatch_color' (line 1185)
        hatch_color_15469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 28), 'hatch_color')
        # Getting the type of 'self' (line 1185)
        self_15470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 8), 'self')
        # Setting the type of the member '_hatch_color' of a type (line 1185)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 8), self_15470, '_hatch_color', hatch_color_15469)
        
        # ################# End of 'set_hatch_color(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_hatch_color' in the type store
        # Getting the type of 'stypy_return_type' (line 1181)
        stypy_return_type_15471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15471)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_hatch_color'
        return stypy_return_type_15471


    @norecursion
    def get_hatch_linewidth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_hatch_linewidth'
        module_type_store = module_type_store.open_function_context('get_hatch_linewidth', 1187, 4, False)
        # Assigning a type to the variable 'self' (line 1188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_hatch_linewidth.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_hatch_linewidth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_hatch_linewidth.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_hatch_linewidth.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_hatch_linewidth')
        GraphicsContextBase.get_hatch_linewidth.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_hatch_linewidth.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_hatch_linewidth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_hatch_linewidth.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_hatch_linewidth.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_hatch_linewidth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_hatch_linewidth.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_hatch_linewidth', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_hatch_linewidth', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_hatch_linewidth(...)' code ##################

        unicode_15472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, (-1)), 'unicode', u'\n        Gets the linewidth to use for hatching.\n        ')
        # Getting the type of 'self' (line 1191)
        self_15473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 15), 'self')
        # Obtaining the member '_hatch_linewidth' of a type (line 1191)
        _hatch_linewidth_15474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 15), self_15473, '_hatch_linewidth')
        # Assigning a type to the variable 'stypy_return_type' (line 1191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 8), 'stypy_return_type', _hatch_linewidth_15474)
        
        # ################# End of 'get_hatch_linewidth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_hatch_linewidth' in the type store
        # Getting the type of 'stypy_return_type' (line 1187)
        stypy_return_type_15475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15475)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_hatch_linewidth'
        return stypy_return_type_15475


    @norecursion
    def get_sketch_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_sketch_params'
        module_type_store = module_type_store.open_function_context('get_sketch_params', 1193, 4, False)
        # Assigning a type to the variable 'self' (line 1194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.get_sketch_params.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.get_sketch_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.get_sketch_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.get_sketch_params.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.get_sketch_params')
        GraphicsContextBase.get_sketch_params.__dict__.__setitem__('stypy_param_names_list', [])
        GraphicsContextBase.get_sketch_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.get_sketch_params.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.get_sketch_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.get_sketch_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.get_sketch_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.get_sketch_params.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.get_sketch_params', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_sketch_params', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_sketch_params(...)' code ##################

        unicode_15476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1212, (-1)), 'unicode', u'\n        Returns the sketch parameters for the artist.\n\n        Returns\n        -------\n        sketch_params : tuple or `None`\n\n        A 3-tuple with the following elements:\n\n          * `scale`: The amplitude of the wiggle perpendicular to the\n            source line.\n\n          * `length`: The length of the wiggle along the line.\n\n          * `randomness`: The scale factor by which the length is\n            shrunken or expanded.\n\n        May return `None` if no sketch parameters were set.\n        ')
        # Getting the type of 'self' (line 1213)
        self_15477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 15), 'self')
        # Obtaining the member '_sketch' of a type (line 1213)
        _sketch_15478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1213, 15), self_15477, '_sketch')
        # Assigning a type to the variable 'stypy_return_type' (line 1213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 8), 'stypy_return_type', _sketch_15478)
        
        # ################# End of 'get_sketch_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_sketch_params' in the type store
        # Getting the type of 'stypy_return_type' (line 1193)
        stypy_return_type_15479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15479)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_sketch_params'
        return stypy_return_type_15479


    @norecursion
    def set_sketch_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1215)
        None_15480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 38), 'None')
        # Getting the type of 'None' (line 1215)
        None_15481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 51), 'None')
        # Getting the type of 'None' (line 1215)
        None_15482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 68), 'None')
        defaults = [None_15480, None_15481, None_15482]
        # Create a new context for function 'set_sketch_params'
        module_type_store = module_type_store.open_function_context('set_sketch_params', 1215, 4, False)
        # Assigning a type to the variable 'self' (line 1216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1216, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GraphicsContextBase.set_sketch_params.__dict__.__setitem__('stypy_localization', localization)
        GraphicsContextBase.set_sketch_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GraphicsContextBase.set_sketch_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        GraphicsContextBase.set_sketch_params.__dict__.__setitem__('stypy_function_name', 'GraphicsContextBase.set_sketch_params')
        GraphicsContextBase.set_sketch_params.__dict__.__setitem__('stypy_param_names_list', ['scale', 'length', 'randomness'])
        GraphicsContextBase.set_sketch_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        GraphicsContextBase.set_sketch_params.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GraphicsContextBase.set_sketch_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        GraphicsContextBase.set_sketch_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        GraphicsContextBase.set_sketch_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GraphicsContextBase.set_sketch_params.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GraphicsContextBase.set_sketch_params', ['scale', 'length', 'randomness'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_sketch_params', localization, ['scale', 'length', 'randomness'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_sketch_params(...)' code ##################

        unicode_15483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, (-1)), 'unicode', u'\n        Sets the sketch parameters.\n\n        Parameters\n        ----------\n\n        scale : float, optional\n            The amplitude of the wiggle perpendicular to the source\n            line, in pixels.  If scale is `None`, or not provided, no\n            sketch filter will be provided.\n\n        length : float, optional\n             The length of the wiggle along the line, in pixels\n             (default 128)\n\n        randomness : float, optional\n            The scale factor by which the length is shrunken or\n            expanded (default 16)\n        ')
        
        # Assigning a IfExp to a Attribute (line 1235):
        
        # Assigning a IfExp to a Attribute (line 1235):
        
        # Assigning a IfExp to a Attribute (line 1235):
        
        
        # Getting the type of 'scale' (line 1236)
        scale_15484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 20), 'scale')
        # Getting the type of 'None' (line 1236)
        None_15485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 29), 'None')
        # Applying the binary operator 'is' (line 1236)
        result_is__15486 = python_operator(stypy.reporting.localization.Localization(__file__, 1236, 20), 'is', scale_15484, None_15485)
        
        # Testing the type of an if expression (line 1236)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1236, 12), result_is__15486)
        # SSA begins for if expression (line 1236)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        # Getting the type of 'None' (line 1236)
        None_15487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 12), 'None')
        # SSA branch for the else part of an if expression (line 1236)
        module_type_store.open_ssa_branch('if expression else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1237)
        tuple_15488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1237)
        # Adding element type (line 1237)
        # Getting the type of 'scale' (line 1237)
        scale_15489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 18), 'scale')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1237, 18), tuple_15488, scale_15489)
        # Adding element type (line 1237)
        
        # Evaluating a boolean operation
        # Getting the type of 'length' (line 1237)
        length_15490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 25), 'length')
        float_15491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 35), 'float')
        # Applying the binary operator 'or' (line 1237)
        result_or_keyword_15492 = python_operator(stypy.reporting.localization.Localization(__file__, 1237, 25), 'or', length_15490, float_15491)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1237, 18), tuple_15488, result_or_keyword_15492)
        # Adding element type (line 1237)
        
        # Evaluating a boolean operation
        # Getting the type of 'randomness' (line 1237)
        randomness_15493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 41), 'randomness')
        float_15494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 55), 'float')
        # Applying the binary operator 'or' (line 1237)
        result_or_keyword_15495 = python_operator(stypy.reporting.localization.Localization(__file__, 1237, 41), 'or', randomness_15493, float_15494)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1237, 18), tuple_15488, result_or_keyword_15495)
        
        # SSA join for if expression (line 1236)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_15496 = union_type.UnionType.add(None_15487, tuple_15488)
        
        # Getting the type of 'self' (line 1235)
        self_15497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 8), 'self')
        # Setting the type of the member '_sketch' of a type (line 1235)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 8), self_15497, '_sketch', if_exp_15496)
        
        # ################# End of 'set_sketch_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_sketch_params' in the type store
        # Getting the type of 'stypy_return_type' (line 1215)
        stypy_return_type_15498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15498)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_sketch_params'
        return stypy_return_type_15498


# Assigning a type to the variable 'GraphicsContextBase' (line 853)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 853, 0), 'GraphicsContextBase', GraphicsContextBase)
# Declaration of the 'TimerBase' class

class TimerBase(object, ):
    unicode_15499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1285, (-1)), 'unicode', u'\n    A base class for providing timer events, useful for things animations.\n    Backends need to implement a few specific methods in order to use their\n    own timing mechanisms so that the timer events are integrated into their\n    event loops.\n\n    Mandatory functions that must be implemented:\n\n        * `_timer_start`: Contains backend-specific code for starting\n          the timer\n\n        * `_timer_stop`: Contains backend-specific code for stopping\n          the timer\n\n    Optional overrides:\n\n        * `_timer_set_single_shot`: Code for setting the timer to\n          single shot operating mode, if supported by the timer\n          object. If not, the `Timer` class itself will store the flag\n          and the `_on_timer` method should be overridden to support\n          such behavior.\n\n        * `_timer_set_interval`: Code for setting the interval on the\n          timer, if there is a method for doing so on the timer\n          object.\n\n        * `_on_timer`: This is the internal function that any timer\n          object should call, which will handle the task of running\n          all callbacks that have been set.\n\n    Attributes\n    ----------\n    interval : scalar\n        The time between timer events in milliseconds. Default is 1000 ms.\n\n    single_shot : bool\n        Boolean flag indicating whether this timer should operate as single\n        shot (run once and then stop). Defaults to `False`.\n\n    callbacks : list\n        Stores list of (func, args) tuples that will be called upon timer\n        events. This list can be manipulated directly, or the functions\n        `add_callback` and `remove_callback` can be used.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1286)
        None_15500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 32), 'None')
        # Getting the type of 'None' (line 1286)
        None_15501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 48), 'None')
        defaults = [None_15500, None_15501]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1286, 4, False)
        # Assigning a type to the variable 'self' (line 1287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1287, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase.__init__', ['interval', 'callbacks'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['interval', 'callbacks'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1288)
        # Getting the type of 'callbacks' (line 1288)
        callbacks_15502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 11), 'callbacks')
        # Getting the type of 'None' (line 1288)
        None_15503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 24), 'None')
        
        (may_be_15504, more_types_in_union_15505) = may_be_none(callbacks_15502, None_15503)

        if may_be_15504:

            if more_types_in_union_15505:
                # Runtime conditional SSA (line 1288)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a List to a Attribute (line 1289):
            
            # Assigning a List to a Attribute (line 1289):
            
            # Assigning a List to a Attribute (line 1289):
            
            # Obtaining an instance of the builtin type 'list' (line 1289)
            list_15506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1289, 29), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1289)
            
            # Getting the type of 'self' (line 1289)
            self_15507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 12), 'self')
            # Setting the type of the member 'callbacks' of a type (line 1289)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1289, 12), self_15507, 'callbacks', list_15506)

            if more_types_in_union_15505:
                # Runtime conditional SSA for else branch (line 1288)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_15504) or more_types_in_union_15505):
            
            # Assigning a Subscript to a Attribute (line 1291):
            
            # Assigning a Subscript to a Attribute (line 1291):
            
            # Assigning a Subscript to a Attribute (line 1291):
            
            # Obtaining the type of the subscript
            slice_15508 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1291, 29), None, None, None)
            # Getting the type of 'callbacks' (line 1291)
            callbacks_15509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 29), 'callbacks')
            # Obtaining the member '__getitem__' of a type (line 1291)
            getitem___15510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 29), callbacks_15509, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1291)
            subscript_call_result_15511 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 29), getitem___15510, slice_15508)
            
            # Getting the type of 'self' (line 1291)
            self_15512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 12), 'self')
            # Setting the type of the member 'callbacks' of a type (line 1291)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 12), self_15512, 'callbacks', subscript_call_result_15511)

            if (may_be_15504 and more_types_in_union_15505):
                # SSA join for if statement (line 1288)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1293)
        # Getting the type of 'interval' (line 1293)
        interval_15513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 11), 'interval')
        # Getting the type of 'None' (line 1293)
        None_15514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 23), 'None')
        
        (may_be_15515, more_types_in_union_15516) = may_be_none(interval_15513, None_15514)

        if may_be_15515:

            if more_types_in_union_15516:
                # Runtime conditional SSA (line 1293)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Num to a Attribute (line 1294):
            
            # Assigning a Num to a Attribute (line 1294):
            
            # Assigning a Num to a Attribute (line 1294):
            int_15517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, 29), 'int')
            # Getting the type of 'self' (line 1294)
            self_15518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 12), 'self')
            # Setting the type of the member '_interval' of a type (line 1294)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 12), self_15518, '_interval', int_15517)

            if more_types_in_union_15516:
                # Runtime conditional SSA for else branch (line 1293)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_15515) or more_types_in_union_15516):
            
            # Assigning a Name to a Attribute (line 1296):
            
            # Assigning a Name to a Attribute (line 1296):
            
            # Assigning a Name to a Attribute (line 1296):
            # Getting the type of 'interval' (line 1296)
            interval_15519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 29), 'interval')
            # Getting the type of 'self' (line 1296)
            self_15520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 12), 'self')
            # Setting the type of the member '_interval' of a type (line 1296)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 12), self_15520, '_interval', interval_15519)

            if (may_be_15515 and more_types_in_union_15516):
                # SSA join for if statement (line 1293)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 1298):
        
        # Assigning a Name to a Attribute (line 1298):
        
        # Assigning a Name to a Attribute (line 1298):
        # Getting the type of 'False' (line 1298)
        False_15521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 23), 'False')
        # Getting the type of 'self' (line 1298)
        self_15522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'self')
        # Setting the type of the member '_single' of a type (line 1298)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 8), self_15522, '_single', False_15521)
        
        # Assigning a Name to a Attribute (line 1301):
        
        # Assigning a Name to a Attribute (line 1301):
        
        # Assigning a Name to a Attribute (line 1301):
        # Getting the type of 'None' (line 1301)
        None_15523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 22), 'None')
        # Getting the type of 'self' (line 1301)
        self_15524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 8), 'self')
        # Setting the type of the member '_timer' of a type (line 1301)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 8), self_15524, '_timer', None_15523)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __del__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__del__'
        module_type_store = module_type_store.open_function_context('__del__', 1303, 4, False)
        # Assigning a type to the variable 'self' (line 1304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerBase.__del__.__dict__.__setitem__('stypy_localization', localization)
        TimerBase.__del__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerBase.__del__.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerBase.__del__.__dict__.__setitem__('stypy_function_name', 'TimerBase.__del__')
        TimerBase.__del__.__dict__.__setitem__('stypy_param_names_list', [])
        TimerBase.__del__.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerBase.__del__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerBase.__del__.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerBase.__del__.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerBase.__del__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerBase.__del__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase.__del__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__del__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__del__(...)' code ##################

        unicode_15525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1304, 8), 'unicode', u'Need to stop timer and possibly disconnect timer.')
        
        # Call to _timer_stop(...): (line 1305)
        # Processing the call keyword arguments (line 1305)
        kwargs_15528 = {}
        # Getting the type of 'self' (line 1305)
        self_15526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 8), 'self', False)
        # Obtaining the member '_timer_stop' of a type (line 1305)
        _timer_stop_15527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 8), self_15526, '_timer_stop')
        # Calling _timer_stop(args, kwargs) (line 1305)
        _timer_stop_call_result_15529 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 8), _timer_stop_15527, *[], **kwargs_15528)
        
        
        # ################# End of '__del__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__del__' in the type store
        # Getting the type of 'stypy_return_type' (line 1303)
        stypy_return_type_15530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15530)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__del__'
        return stypy_return_type_15530


    @norecursion
    def start(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1307)
        None_15531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 29), 'None')
        defaults = [None_15531]
        # Create a new context for function 'start'
        module_type_store = module_type_store.open_function_context('start', 1307, 4, False)
        # Assigning a type to the variable 'self' (line 1308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1308, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerBase.start.__dict__.__setitem__('stypy_localization', localization)
        TimerBase.start.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerBase.start.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerBase.start.__dict__.__setitem__('stypy_function_name', 'TimerBase.start')
        TimerBase.start.__dict__.__setitem__('stypy_param_names_list', ['interval'])
        TimerBase.start.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerBase.start.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerBase.start.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerBase.start.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerBase.start.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerBase.start.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase.start', ['interval'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'start', localization, ['interval'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'start(...)' code ##################

        unicode_15532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1311, (-1)), 'unicode', u'\n        Start the timer object. `interval` is optional and will be used\n        to reset the timer interval first if provided.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1312)
        # Getting the type of 'interval' (line 1312)
        interval_15533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 8), 'interval')
        # Getting the type of 'None' (line 1312)
        None_15534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 27), 'None')
        
        (may_be_15535, more_types_in_union_15536) = may_not_be_none(interval_15533, None_15534)

        if may_be_15535:

            if more_types_in_union_15536:
                # Runtime conditional SSA (line 1312)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to _set_interval(...): (line 1313)
            # Processing the call arguments (line 1313)
            # Getting the type of 'interval' (line 1313)
            interval_15539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 31), 'interval', False)
            # Processing the call keyword arguments (line 1313)
            kwargs_15540 = {}
            # Getting the type of 'self' (line 1313)
            self_15537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 12), 'self', False)
            # Obtaining the member '_set_interval' of a type (line 1313)
            _set_interval_15538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 12), self_15537, '_set_interval')
            # Calling _set_interval(args, kwargs) (line 1313)
            _set_interval_call_result_15541 = invoke(stypy.reporting.localization.Localization(__file__, 1313, 12), _set_interval_15538, *[interval_15539], **kwargs_15540)
            

            if more_types_in_union_15536:
                # SSA join for if statement (line 1312)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to _timer_start(...): (line 1314)
        # Processing the call keyword arguments (line 1314)
        kwargs_15544 = {}
        # Getting the type of 'self' (line 1314)
        self_15542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 8), 'self', False)
        # Obtaining the member '_timer_start' of a type (line 1314)
        _timer_start_15543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 8), self_15542, '_timer_start')
        # Calling _timer_start(args, kwargs) (line 1314)
        _timer_start_call_result_15545 = invoke(stypy.reporting.localization.Localization(__file__, 1314, 8), _timer_start_15543, *[], **kwargs_15544)
        
        
        # ################# End of 'start(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'start' in the type store
        # Getting the type of 'stypy_return_type' (line 1307)
        stypy_return_type_15546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15546)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'start'
        return stypy_return_type_15546


    @norecursion
    def stop(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'stop'
        module_type_store = module_type_store.open_function_context('stop', 1316, 4, False)
        # Assigning a type to the variable 'self' (line 1317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1317, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerBase.stop.__dict__.__setitem__('stypy_localization', localization)
        TimerBase.stop.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerBase.stop.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerBase.stop.__dict__.__setitem__('stypy_function_name', 'TimerBase.stop')
        TimerBase.stop.__dict__.__setitem__('stypy_param_names_list', [])
        TimerBase.stop.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerBase.stop.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerBase.stop.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerBase.stop.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerBase.stop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerBase.stop.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase.stop', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'stop', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'stop(...)' code ##################

        unicode_15547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1319, (-1)), 'unicode', u'\n        Stop the timer.\n        ')
        
        # Call to _timer_stop(...): (line 1320)
        # Processing the call keyword arguments (line 1320)
        kwargs_15550 = {}
        # Getting the type of 'self' (line 1320)
        self_15548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 8), 'self', False)
        # Obtaining the member '_timer_stop' of a type (line 1320)
        _timer_stop_15549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 8), self_15548, '_timer_stop')
        # Calling _timer_stop(args, kwargs) (line 1320)
        _timer_stop_call_result_15551 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 8), _timer_stop_15549, *[], **kwargs_15550)
        
        
        # ################# End of 'stop(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'stop' in the type store
        # Getting the type of 'stypy_return_type' (line 1316)
        stypy_return_type_15552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15552)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'stop'
        return stypy_return_type_15552


    @norecursion
    def _timer_start(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_timer_start'
        module_type_store = module_type_store.open_function_context('_timer_start', 1322, 4, False)
        # Assigning a type to the variable 'self' (line 1323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1323, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerBase._timer_start.__dict__.__setitem__('stypy_localization', localization)
        TimerBase._timer_start.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerBase._timer_start.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerBase._timer_start.__dict__.__setitem__('stypy_function_name', 'TimerBase._timer_start')
        TimerBase._timer_start.__dict__.__setitem__('stypy_param_names_list', [])
        TimerBase._timer_start.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerBase._timer_start.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerBase._timer_start.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerBase._timer_start.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerBase._timer_start.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerBase._timer_start.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase._timer_start', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_timer_start', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_timer_start(...)' code ##################

        pass
        
        # ################# End of '_timer_start(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_timer_start' in the type store
        # Getting the type of 'stypy_return_type' (line 1322)
        stypy_return_type_15553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15553)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_timer_start'
        return stypy_return_type_15553


    @norecursion
    def _timer_stop(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_timer_stop'
        module_type_store = module_type_store.open_function_context('_timer_stop', 1325, 4, False)
        # Assigning a type to the variable 'self' (line 1326)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1326, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerBase._timer_stop.__dict__.__setitem__('stypy_localization', localization)
        TimerBase._timer_stop.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerBase._timer_stop.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerBase._timer_stop.__dict__.__setitem__('stypy_function_name', 'TimerBase._timer_stop')
        TimerBase._timer_stop.__dict__.__setitem__('stypy_param_names_list', [])
        TimerBase._timer_stop.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerBase._timer_stop.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerBase._timer_stop.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerBase._timer_stop.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerBase._timer_stop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerBase._timer_stop.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase._timer_stop', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_timer_stop', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_timer_stop(...)' code ##################

        pass
        
        # ################# End of '_timer_stop(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_timer_stop' in the type store
        # Getting the type of 'stypy_return_type' (line 1325)
        stypy_return_type_15554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15554)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_timer_stop'
        return stypy_return_type_15554


    @norecursion
    def _get_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_interval'
        module_type_store = module_type_store.open_function_context('_get_interval', 1328, 4, False)
        # Assigning a type to the variable 'self' (line 1329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerBase._get_interval.__dict__.__setitem__('stypy_localization', localization)
        TimerBase._get_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerBase._get_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerBase._get_interval.__dict__.__setitem__('stypy_function_name', 'TimerBase._get_interval')
        TimerBase._get_interval.__dict__.__setitem__('stypy_param_names_list', [])
        TimerBase._get_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerBase._get_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerBase._get_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerBase._get_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerBase._get_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerBase._get_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase._get_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_interval(...)' code ##################

        # Getting the type of 'self' (line 1329)
        self_15555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 15), 'self')
        # Obtaining the member '_interval' of a type (line 1329)
        _interval_15556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1329, 15), self_15555, '_interval')
        # Assigning a type to the variable 'stypy_return_type' (line 1329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 8), 'stypy_return_type', _interval_15556)
        
        # ################# End of '_get_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 1328)
        stypy_return_type_15557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15557)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_interval'
        return stypy_return_type_15557


    @norecursion
    def _set_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_interval'
        module_type_store = module_type_store.open_function_context('_set_interval', 1331, 4, False)
        # Assigning a type to the variable 'self' (line 1332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1332, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerBase._set_interval.__dict__.__setitem__('stypy_localization', localization)
        TimerBase._set_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerBase._set_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerBase._set_interval.__dict__.__setitem__('stypy_function_name', 'TimerBase._set_interval')
        TimerBase._set_interval.__dict__.__setitem__('stypy_param_names_list', ['interval'])
        TimerBase._set_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerBase._set_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerBase._set_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerBase._set_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerBase._set_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerBase._set_interval.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase._set_interval', ['interval'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_interval', localization, ['interval'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_interval(...)' code ##################

        
        # Assigning a Call to a Name (line 1334):
        
        # Assigning a Call to a Name (line 1334):
        
        # Assigning a Call to a Name (line 1334):
        
        # Call to int(...): (line 1334)
        # Processing the call arguments (line 1334)
        # Getting the type of 'interval' (line 1334)
        interval_15559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 23), 'interval', False)
        # Processing the call keyword arguments (line 1334)
        kwargs_15560 = {}
        # Getting the type of 'int' (line 1334)
        int_15558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 19), 'int', False)
        # Calling int(args, kwargs) (line 1334)
        int_call_result_15561 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 19), int_15558, *[interval_15559], **kwargs_15560)
        
        # Assigning a type to the variable 'interval' (line 1334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 8), 'interval', int_call_result_15561)
        
        # Assigning a Name to a Attribute (line 1335):
        
        # Assigning a Name to a Attribute (line 1335):
        
        # Assigning a Name to a Attribute (line 1335):
        # Getting the type of 'interval' (line 1335)
        interval_15562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 25), 'interval')
        # Getting the type of 'self' (line 1335)
        self_15563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 8), 'self')
        # Setting the type of the member '_interval' of a type (line 1335)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 8), self_15563, '_interval', interval_15562)
        
        # Call to _timer_set_interval(...): (line 1336)
        # Processing the call keyword arguments (line 1336)
        kwargs_15566 = {}
        # Getting the type of 'self' (line 1336)
        self_15564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 8), 'self', False)
        # Obtaining the member '_timer_set_interval' of a type (line 1336)
        _timer_set_interval_15565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 8), self_15564, '_timer_set_interval')
        # Calling _timer_set_interval(args, kwargs) (line 1336)
        _timer_set_interval_call_result_15567 = invoke(stypy.reporting.localization.Localization(__file__, 1336, 8), _timer_set_interval_15565, *[], **kwargs_15566)
        
        
        # ################# End of '_set_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 1331)
        stypy_return_type_15568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15568)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_interval'
        return stypy_return_type_15568

    
    # Assigning a Call to a Name (line 1338):
    
    # Assigning a Call to a Name (line 1338):

    @norecursion
    def _get_single_shot(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_single_shot'
        module_type_store = module_type_store.open_function_context('_get_single_shot', 1340, 4, False)
        # Assigning a type to the variable 'self' (line 1341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerBase._get_single_shot.__dict__.__setitem__('stypy_localization', localization)
        TimerBase._get_single_shot.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerBase._get_single_shot.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerBase._get_single_shot.__dict__.__setitem__('stypy_function_name', 'TimerBase._get_single_shot')
        TimerBase._get_single_shot.__dict__.__setitem__('stypy_param_names_list', [])
        TimerBase._get_single_shot.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerBase._get_single_shot.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerBase._get_single_shot.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerBase._get_single_shot.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerBase._get_single_shot.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerBase._get_single_shot.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase._get_single_shot', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_single_shot', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_single_shot(...)' code ##################

        # Getting the type of 'self' (line 1341)
        self_15569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 15), 'self')
        # Obtaining the member '_single' of a type (line 1341)
        _single_15570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 15), self_15569, '_single')
        # Assigning a type to the variable 'stypy_return_type' (line 1341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 8), 'stypy_return_type', _single_15570)
        
        # ################# End of '_get_single_shot(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_single_shot' in the type store
        # Getting the type of 'stypy_return_type' (line 1340)
        stypy_return_type_15571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15571)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_single_shot'
        return stypy_return_type_15571


    @norecursion
    def _set_single_shot(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 1343)
        True_15572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 34), 'True')
        defaults = [True_15572]
        # Create a new context for function '_set_single_shot'
        module_type_store = module_type_store.open_function_context('_set_single_shot', 1343, 4, False)
        # Assigning a type to the variable 'self' (line 1344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1344, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerBase._set_single_shot.__dict__.__setitem__('stypy_localization', localization)
        TimerBase._set_single_shot.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerBase._set_single_shot.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerBase._set_single_shot.__dict__.__setitem__('stypy_function_name', 'TimerBase._set_single_shot')
        TimerBase._set_single_shot.__dict__.__setitem__('stypy_param_names_list', ['ss'])
        TimerBase._set_single_shot.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerBase._set_single_shot.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerBase._set_single_shot.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerBase._set_single_shot.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerBase._set_single_shot.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerBase._set_single_shot.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase._set_single_shot', ['ss'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_single_shot', localization, ['ss'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_single_shot(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1344):
        
        # Assigning a Name to a Attribute (line 1344):
        
        # Assigning a Name to a Attribute (line 1344):
        # Getting the type of 'ss' (line 1344)
        ss_15573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 23), 'ss')
        # Getting the type of 'self' (line 1344)
        self_15574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 8), 'self')
        # Setting the type of the member '_single' of a type (line 1344)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1344, 8), self_15574, '_single', ss_15573)
        
        # Call to _timer_set_single_shot(...): (line 1345)
        # Processing the call keyword arguments (line 1345)
        kwargs_15577 = {}
        # Getting the type of 'self' (line 1345)
        self_15575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 8), 'self', False)
        # Obtaining the member '_timer_set_single_shot' of a type (line 1345)
        _timer_set_single_shot_15576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1345, 8), self_15575, '_timer_set_single_shot')
        # Calling _timer_set_single_shot(args, kwargs) (line 1345)
        _timer_set_single_shot_call_result_15578 = invoke(stypy.reporting.localization.Localization(__file__, 1345, 8), _timer_set_single_shot_15576, *[], **kwargs_15577)
        
        
        # ################# End of '_set_single_shot(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_single_shot' in the type store
        # Getting the type of 'stypy_return_type' (line 1343)
        stypy_return_type_15579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15579)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_single_shot'
        return stypy_return_type_15579

    
    # Assigning a Call to a Name (line 1347):
    
    # Assigning a Call to a Name (line 1347):

    @norecursion
    def add_callback(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_callback'
        module_type_store = module_type_store.open_function_context('add_callback', 1349, 4, False)
        # Assigning a type to the variable 'self' (line 1350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerBase.add_callback.__dict__.__setitem__('stypy_localization', localization)
        TimerBase.add_callback.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerBase.add_callback.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerBase.add_callback.__dict__.__setitem__('stypy_function_name', 'TimerBase.add_callback')
        TimerBase.add_callback.__dict__.__setitem__('stypy_param_names_list', ['func'])
        TimerBase.add_callback.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        TimerBase.add_callback.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        TimerBase.add_callback.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerBase.add_callback.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerBase.add_callback.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerBase.add_callback.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase.add_callback', ['func'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_callback', localization, ['func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_callback(...)' code ##################

        unicode_15580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, (-1)), 'unicode', u'\n        Register `func` to be called by timer when the event fires. Any\n        additional arguments provided will be passed to `func`.\n        ')
        
        # Call to append(...): (line 1354)
        # Processing the call arguments (line 1354)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1354)
        tuple_15584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1354, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1354)
        # Adding element type (line 1354)
        # Getting the type of 'func' (line 1354)
        func_15585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 31), 'func', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1354, 31), tuple_15584, func_15585)
        # Adding element type (line 1354)
        # Getting the type of 'args' (line 1354)
        args_15586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 37), 'args', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1354, 31), tuple_15584, args_15586)
        # Adding element type (line 1354)
        # Getting the type of 'kwargs' (line 1354)
        kwargs_15587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 43), 'kwargs', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1354, 31), tuple_15584, kwargs_15587)
        
        # Processing the call keyword arguments (line 1354)
        kwargs_15588 = {}
        # Getting the type of 'self' (line 1354)
        self_15581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1354)
        callbacks_15582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 8), self_15581, 'callbacks')
        # Obtaining the member 'append' of a type (line 1354)
        append_15583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 8), callbacks_15582, 'append')
        # Calling append(args, kwargs) (line 1354)
        append_call_result_15589 = invoke(stypy.reporting.localization.Localization(__file__, 1354, 8), append_15583, *[tuple_15584], **kwargs_15588)
        
        
        # ################# End of 'add_callback(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_callback' in the type store
        # Getting the type of 'stypy_return_type' (line 1349)
        stypy_return_type_15590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15590)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_callback'
        return stypy_return_type_15590


    @norecursion
    def remove_callback(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'remove_callback'
        module_type_store = module_type_store.open_function_context('remove_callback', 1356, 4, False)
        # Assigning a type to the variable 'self' (line 1357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1357, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerBase.remove_callback.__dict__.__setitem__('stypy_localization', localization)
        TimerBase.remove_callback.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerBase.remove_callback.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerBase.remove_callback.__dict__.__setitem__('stypy_function_name', 'TimerBase.remove_callback')
        TimerBase.remove_callback.__dict__.__setitem__('stypy_param_names_list', ['func'])
        TimerBase.remove_callback.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        TimerBase.remove_callback.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        TimerBase.remove_callback.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerBase.remove_callback.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerBase.remove_callback.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerBase.remove_callback.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase.remove_callback', ['func'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'remove_callback', localization, ['func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'remove_callback(...)' code ##################

        unicode_15591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, (-1)), 'unicode', u'\n        Remove `func` from list of callbacks. `args` and `kwargs` are optional\n        and used to distinguish between copies of the same function registered\n        to be called with different arguments.\n        ')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'args' (line 1362)
        args_15592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 11), 'args')
        # Getting the type of 'kwargs' (line 1362)
        kwargs_15593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 19), 'kwargs')
        # Applying the binary operator 'or' (line 1362)
        result_or_keyword_15594 = python_operator(stypy.reporting.localization.Localization(__file__, 1362, 11), 'or', args_15592, kwargs_15593)
        
        # Testing the type of an if condition (line 1362)
        if_condition_15595 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1362, 8), result_or_keyword_15594)
        # Assigning a type to the variable 'if_condition_15595' (line 1362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'if_condition_15595', if_condition_15595)
        # SSA begins for if statement (line 1362)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to remove(...): (line 1363)
        # Processing the call arguments (line 1363)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1363)
        tuple_15599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1363, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1363)
        # Adding element type (line 1363)
        # Getting the type of 'func' (line 1363)
        func_15600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 35), 'func', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1363, 35), tuple_15599, func_15600)
        # Adding element type (line 1363)
        # Getting the type of 'args' (line 1363)
        args_15601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 41), 'args', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1363, 35), tuple_15599, args_15601)
        # Adding element type (line 1363)
        # Getting the type of 'kwargs' (line 1363)
        kwargs_15602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 47), 'kwargs', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1363, 35), tuple_15599, kwargs_15602)
        
        # Processing the call keyword arguments (line 1363)
        kwargs_15603 = {}
        # Getting the type of 'self' (line 1363)
        self_15596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 12), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1363)
        callbacks_15597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1363, 12), self_15596, 'callbacks')
        # Obtaining the member 'remove' of a type (line 1363)
        remove_15598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1363, 12), callbacks_15597, 'remove')
        # Calling remove(args, kwargs) (line 1363)
        remove_call_result_15604 = invoke(stypy.reporting.localization.Localization(__file__, 1363, 12), remove_15598, *[tuple_15599], **kwargs_15603)
        
        # SSA branch for the else part of an if statement (line 1362)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a ListComp to a Name (line 1365):
        
        # Assigning a ListComp to a Name (line 1365):
        
        # Assigning a ListComp to a Name (line 1365):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'self' (line 1365)
        self_15609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 35), 'self')
        # Obtaining the member 'callbacks' of a type (line 1365)
        callbacks_15610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 35), self_15609, 'callbacks')
        comprehension_15611 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1365, 21), callbacks_15610)
        # Assigning a type to the variable 'c' (line 1365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 21), 'c', comprehension_15611)
        
        # Obtaining the type of the subscript
        int_15605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1365, 23), 'int')
        # Getting the type of 'c' (line 1365)
        c_15606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 21), 'c')
        # Obtaining the member '__getitem__' of a type (line 1365)
        getitem___15607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 21), c_15606, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1365)
        subscript_call_result_15608 = invoke(stypy.reporting.localization.Localization(__file__, 1365, 21), getitem___15607, int_15605)
        
        list_15612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1365, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1365, 21), list_15612, subscript_call_result_15608)
        # Assigning a type to the variable 'funcs' (line 1365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 12), 'funcs', list_15612)
        
        
        # Getting the type of 'func' (line 1366)
        func_15613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 15), 'func')
        # Getting the type of 'funcs' (line 1366)
        funcs_15614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 23), 'funcs')
        # Applying the binary operator 'in' (line 1366)
        result_contains_15615 = python_operator(stypy.reporting.localization.Localization(__file__, 1366, 15), 'in', func_15613, funcs_15614)
        
        # Testing the type of an if condition (line 1366)
        if_condition_15616 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1366, 12), result_contains_15615)
        # Assigning a type to the variable 'if_condition_15616' (line 1366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 12), 'if_condition_15616', if_condition_15616)
        # SSA begins for if statement (line 1366)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to pop(...): (line 1367)
        # Processing the call arguments (line 1367)
        
        # Call to index(...): (line 1367)
        # Processing the call arguments (line 1367)
        # Getting the type of 'func' (line 1367)
        func_15622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 47), 'func', False)
        # Processing the call keyword arguments (line 1367)
        kwargs_15623 = {}
        # Getting the type of 'funcs' (line 1367)
        funcs_15620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 35), 'funcs', False)
        # Obtaining the member 'index' of a type (line 1367)
        index_15621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 35), funcs_15620, 'index')
        # Calling index(args, kwargs) (line 1367)
        index_call_result_15624 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 35), index_15621, *[func_15622], **kwargs_15623)
        
        # Processing the call keyword arguments (line 1367)
        kwargs_15625 = {}
        # Getting the type of 'self' (line 1367)
        self_15617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 16), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1367)
        callbacks_15618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 16), self_15617, 'callbacks')
        # Obtaining the member 'pop' of a type (line 1367)
        pop_15619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 16), callbacks_15618, 'pop')
        # Calling pop(args, kwargs) (line 1367)
        pop_call_result_15626 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 16), pop_15619, *[index_call_result_15624], **kwargs_15625)
        
        # SSA join for if statement (line 1366)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1362)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'remove_callback(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'remove_callback' in the type store
        # Getting the type of 'stypy_return_type' (line 1356)
        stypy_return_type_15627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15627)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'remove_callback'
        return stypy_return_type_15627


    @norecursion
    def _timer_set_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_timer_set_interval'
        module_type_store = module_type_store.open_function_context('_timer_set_interval', 1369, 4, False)
        # Assigning a type to the variable 'self' (line 1370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerBase._timer_set_interval.__dict__.__setitem__('stypy_localization', localization)
        TimerBase._timer_set_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerBase._timer_set_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerBase._timer_set_interval.__dict__.__setitem__('stypy_function_name', 'TimerBase._timer_set_interval')
        TimerBase._timer_set_interval.__dict__.__setitem__('stypy_param_names_list', [])
        TimerBase._timer_set_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerBase._timer_set_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerBase._timer_set_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerBase._timer_set_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerBase._timer_set_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerBase._timer_set_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase._timer_set_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_timer_set_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_timer_set_interval(...)' code ##################

        unicode_15628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1370, 8), 'unicode', u'Used to set interval on underlying timer object.')
        
        # ################# End of '_timer_set_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_timer_set_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 1369)
        stypy_return_type_15629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15629)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_timer_set_interval'
        return stypy_return_type_15629


    @norecursion
    def _timer_set_single_shot(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_timer_set_single_shot'
        module_type_store = module_type_store.open_function_context('_timer_set_single_shot', 1372, 4, False)
        # Assigning a type to the variable 'self' (line 1373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerBase._timer_set_single_shot.__dict__.__setitem__('stypy_localization', localization)
        TimerBase._timer_set_single_shot.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerBase._timer_set_single_shot.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerBase._timer_set_single_shot.__dict__.__setitem__('stypy_function_name', 'TimerBase._timer_set_single_shot')
        TimerBase._timer_set_single_shot.__dict__.__setitem__('stypy_param_names_list', [])
        TimerBase._timer_set_single_shot.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerBase._timer_set_single_shot.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerBase._timer_set_single_shot.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerBase._timer_set_single_shot.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerBase._timer_set_single_shot.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerBase._timer_set_single_shot.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase._timer_set_single_shot', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_timer_set_single_shot', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_timer_set_single_shot(...)' code ##################

        unicode_15630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1373, 8), 'unicode', u'Used to set single shot on underlying timer object.')
        
        # ################# End of '_timer_set_single_shot(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_timer_set_single_shot' in the type store
        # Getting the type of 'stypy_return_type' (line 1372)
        stypy_return_type_15631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15631)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_timer_set_single_shot'
        return stypy_return_type_15631


    @norecursion
    def _on_timer(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_on_timer'
        module_type_store = module_type_store.open_function_context('_on_timer', 1375, 4, False)
        # Assigning a type to the variable 'self' (line 1376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TimerBase._on_timer.__dict__.__setitem__('stypy_localization', localization)
        TimerBase._on_timer.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TimerBase._on_timer.__dict__.__setitem__('stypy_type_store', module_type_store)
        TimerBase._on_timer.__dict__.__setitem__('stypy_function_name', 'TimerBase._on_timer')
        TimerBase._on_timer.__dict__.__setitem__('stypy_param_names_list', [])
        TimerBase._on_timer.__dict__.__setitem__('stypy_varargs_param_name', None)
        TimerBase._on_timer.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TimerBase._on_timer.__dict__.__setitem__('stypy_call_defaults', defaults)
        TimerBase._on_timer.__dict__.__setitem__('stypy_call_varargs', varargs)
        TimerBase._on_timer.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TimerBase._on_timer.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TimerBase._on_timer', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_on_timer', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_on_timer(...)' code ##################

        unicode_15632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1380, (-1)), 'unicode', u'\n        Runs all function that have been registered as callbacks. Functions\n        can return False (or 0) if they should not be called any more. If there\n        are no callbacks, the timer is automatically stopped.\n        ')
        
        # Getting the type of 'self' (line 1381)
        self_15633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 34), 'self')
        # Obtaining the member 'callbacks' of a type (line 1381)
        callbacks_15634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1381, 34), self_15633, 'callbacks')
        # Testing the type of a for loop iterable (line 1381)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1381, 8), callbacks_15634)
        # Getting the type of the for loop variable (line 1381)
        for_loop_var_15635 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1381, 8), callbacks_15634)
        # Assigning a type to the variable 'func' (line 1381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 8), 'func', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1381, 8), for_loop_var_15635))
        # Assigning a type to the variable 'args' (line 1381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 8), 'args', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1381, 8), for_loop_var_15635))
        # Assigning a type to the variable 'kwargs' (line 1381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 8), 'kwargs', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1381, 8), for_loop_var_15635))
        # SSA begins for a for statement (line 1381)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1382):
        
        # Assigning a Call to a Name (line 1382):
        
        # Assigning a Call to a Name (line 1382):
        
        # Call to func(...): (line 1382)
        # Getting the type of 'args' (line 1382)
        args_15637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 24), 'args', False)
        # Processing the call keyword arguments (line 1382)
        # Getting the type of 'kwargs' (line 1382)
        kwargs_15638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 32), 'kwargs', False)
        kwargs_15639 = {'kwargs_15638': kwargs_15638}
        # Getting the type of 'func' (line 1382)
        func_15636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 18), 'func', False)
        # Calling func(args, kwargs) (line 1382)
        func_call_result_15640 = invoke(stypy.reporting.localization.Localization(__file__, 1382, 18), func_15636, *[args_15637], **kwargs_15639)
        
        # Assigning a type to the variable 'ret' (line 1382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 12), 'ret', func_call_result_15640)
        
        
        # Getting the type of 'ret' (line 1385)
        ret_15641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 15), 'ret')
        # Getting the type of 'False' (line 1385)
        False_15642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 22), 'False')
        # Applying the binary operator '==' (line 1385)
        result_eq_15643 = python_operator(stypy.reporting.localization.Localization(__file__, 1385, 15), '==', ret_15641, False_15642)
        
        # Testing the type of an if condition (line 1385)
        if_condition_15644 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1385, 12), result_eq_15643)
        # Assigning a type to the variable 'if_condition_15644' (line 1385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1385, 12), 'if_condition_15644', if_condition_15644)
        # SSA begins for if statement (line 1385)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to remove(...): (line 1386)
        # Processing the call arguments (line 1386)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1386)
        tuple_15648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1386, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1386)
        # Adding element type (line 1386)
        # Getting the type of 'func' (line 1386)
        func_15649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 39), 'func', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1386, 39), tuple_15648, func_15649)
        # Adding element type (line 1386)
        # Getting the type of 'args' (line 1386)
        args_15650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 45), 'args', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1386, 39), tuple_15648, args_15650)
        # Adding element type (line 1386)
        # Getting the type of 'kwargs' (line 1386)
        kwargs_15651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 51), 'kwargs', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1386, 39), tuple_15648, kwargs_15651)
        
        # Processing the call keyword arguments (line 1386)
        kwargs_15652 = {}
        # Getting the type of 'self' (line 1386)
        self_15645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 16), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1386)
        callbacks_15646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1386, 16), self_15645, 'callbacks')
        # Obtaining the member 'remove' of a type (line 1386)
        remove_15647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1386, 16), callbacks_15646, 'remove')
        # Calling remove(args, kwargs) (line 1386)
        remove_call_result_15653 = invoke(stypy.reporting.localization.Localization(__file__, 1386, 16), remove_15647, *[tuple_15648], **kwargs_15652)
        
        # SSA join for if statement (line 1385)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 1388)
        # Processing the call arguments (line 1388)
        # Getting the type of 'self' (line 1388)
        self_15655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 15), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1388)
        callbacks_15656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 15), self_15655, 'callbacks')
        # Processing the call keyword arguments (line 1388)
        kwargs_15657 = {}
        # Getting the type of 'len' (line 1388)
        len_15654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 11), 'len', False)
        # Calling len(args, kwargs) (line 1388)
        len_call_result_15658 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 11), len_15654, *[callbacks_15656], **kwargs_15657)
        
        int_15659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 34), 'int')
        # Applying the binary operator '==' (line 1388)
        result_eq_15660 = python_operator(stypy.reporting.localization.Localization(__file__, 1388, 11), '==', len_call_result_15658, int_15659)
        
        # Testing the type of an if condition (line 1388)
        if_condition_15661 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1388, 8), result_eq_15660)
        # Assigning a type to the variable 'if_condition_15661' (line 1388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 8), 'if_condition_15661', if_condition_15661)
        # SSA begins for if statement (line 1388)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to stop(...): (line 1389)
        # Processing the call keyword arguments (line 1389)
        kwargs_15664 = {}
        # Getting the type of 'self' (line 1389)
        self_15662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 12), 'self', False)
        # Obtaining the member 'stop' of a type (line 1389)
        stop_15663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1389, 12), self_15662, 'stop')
        # Calling stop(args, kwargs) (line 1389)
        stop_call_result_15665 = invoke(stypy.reporting.localization.Localization(__file__, 1389, 12), stop_15663, *[], **kwargs_15664)
        
        # SSA join for if statement (line 1388)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_on_timer(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_on_timer' in the type store
        # Getting the type of 'stypy_return_type' (line 1375)
        stypy_return_type_15666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15666)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_on_timer'
        return stypy_return_type_15666


# Assigning a type to the variable 'TimerBase' (line 1240)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 0), 'TimerBase', TimerBase)

# Assigning a Call to a Name (line 1338):

# Call to property(...): (line 1338)
# Processing the call arguments (line 1338)
# Getting the type of 'TimerBase'
TimerBase_15668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TimerBase', False)
# Obtaining the member '_get_interval' of a type
_get_interval_15669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TimerBase_15668, '_get_interval')
# Getting the type of 'TimerBase'
TimerBase_15670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TimerBase', False)
# Obtaining the member '_set_interval' of a type
_set_interval_15671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TimerBase_15670, '_set_interval')
# Processing the call keyword arguments (line 1338)
kwargs_15672 = {}
# Getting the type of 'property' (line 1338)
property_15667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 15), 'property', False)
# Calling property(args, kwargs) (line 1338)
property_call_result_15673 = invoke(stypy.reporting.localization.Localization(__file__, 1338, 15), property_15667, *[_get_interval_15669, _set_interval_15671], **kwargs_15672)

# Getting the type of 'TimerBase'
TimerBase_15674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TimerBase')
# Setting the type of the member 'interval' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TimerBase_15674, 'interval', property_call_result_15673)

# Assigning a Call to a Name (line 1347):

# Call to property(...): (line 1347)
# Processing the call arguments (line 1347)
# Getting the type of 'TimerBase'
TimerBase_15676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TimerBase', False)
# Obtaining the member '_get_single_shot' of a type
_get_single_shot_15677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TimerBase_15676, '_get_single_shot')
# Getting the type of 'TimerBase'
TimerBase_15678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TimerBase', False)
# Obtaining the member '_set_single_shot' of a type
_set_single_shot_15679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TimerBase_15678, '_set_single_shot')
# Processing the call keyword arguments (line 1347)
kwargs_15680 = {}
# Getting the type of 'property' (line 1347)
property_15675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 18), 'property', False)
# Calling property(args, kwargs) (line 1347)
property_call_result_15681 = invoke(stypy.reporting.localization.Localization(__file__, 1347, 18), property_15675, *[_get_single_shot_15677, _set_single_shot_15679], **kwargs_15680)

# Getting the type of 'TimerBase'
TimerBase_15682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'TimerBase')
# Setting the type of the member 'single_shot' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), TimerBase_15682, 'single_shot', property_call_result_15681)
# Declaration of the 'Event' class

class Event(object, ):
    unicode_15683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1409, (-1)), 'unicode', u'\n    A matplotlib event.  Attach additional attributes as defined in\n    :meth:`FigureCanvasBase.mpl_connect`.  The following attributes\n    are defined and shown with their default values\n\n    Attributes\n    ----------\n    name : str\n        the event name\n\n    canvas : `FigureCanvasBase`\n        the backend-specific canvas instance generating the event\n\n    guiEvent\n        the GUI event that triggered the matplotlib event\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1410)
        None_15684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 46), 'None')
        defaults = [None_15684]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1410, 4, False)
        # Assigning a type to the variable 'self' (line 1411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1411, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Event.__init__', ['name', 'canvas', 'guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['name', 'canvas', 'guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1411):
        
        # Assigning a Name to a Attribute (line 1411):
        
        # Assigning a Name to a Attribute (line 1411):
        # Getting the type of 'name' (line 1411)
        name_15685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 20), 'name')
        # Getting the type of 'self' (line 1411)
        self_15686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 8), 'self')
        # Setting the type of the member 'name' of a type (line 1411)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 8), self_15686, 'name', name_15685)
        
        # Assigning a Name to a Attribute (line 1412):
        
        # Assigning a Name to a Attribute (line 1412):
        
        # Assigning a Name to a Attribute (line 1412):
        # Getting the type of 'canvas' (line 1412)
        canvas_15687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 22), 'canvas')
        # Getting the type of 'self' (line 1412)
        self_15688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 1412)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1412, 8), self_15688, 'canvas', canvas_15687)
        
        # Assigning a Name to a Attribute (line 1413):
        
        # Assigning a Name to a Attribute (line 1413):
        
        # Assigning a Name to a Attribute (line 1413):
        # Getting the type of 'guiEvent' (line 1413)
        guiEvent_15689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 24), 'guiEvent')
        # Getting the type of 'self' (line 1413)
        self_15690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 'self')
        # Setting the type of the member 'guiEvent' of a type (line 1413)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 8), self_15690, 'guiEvent', guiEvent_15689)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'Event' (line 1392)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 0), 'Event', Event)
# Declaration of the 'IdleEvent' class
# Getting the type of 'Event' (line 1417)
Event_15691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 16), 'Event')

class IdleEvent(Event_15691, ):
    unicode_15692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1421, (-1)), 'unicode', u'\n    An event triggered by the GUI backend when it is idle -- useful\n    for passive animation\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1416, 0, False)
        # Assigning a type to the variable 'self' (line 1417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IdleEvent.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'IdleEvent' (line 1416)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 0), 'IdleEvent', IdleEvent)
# Declaration of the 'DrawEvent' class
# Getting the type of 'Event' (line 1424)
Event_15693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 16), 'Event')

class DrawEvent(Event_15693, ):
    unicode_15694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, (-1)), 'unicode', u'\n    An event triggered by a draw operation on the canvas\n\n    In addition to the :class:`Event` attributes, the following event\n    attributes are defined:\n\n    Attributes\n    ----------\n    renderer : `RendererBase`\n        the renderer for the draw event\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1437, 4, False)
        # Assigning a type to the variable 'self' (line 1438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1438, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DrawEvent.__init__', ['name', 'canvas', 'renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['name', 'canvas', 'renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1438)
        # Processing the call arguments (line 1438)
        # Getting the type of 'self' (line 1438)
        self_15697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 23), 'self', False)
        # Getting the type of 'name' (line 1438)
        name_15698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 29), 'name', False)
        # Getting the type of 'canvas' (line 1438)
        canvas_15699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 35), 'canvas', False)
        # Processing the call keyword arguments (line 1438)
        kwargs_15700 = {}
        # Getting the type of 'Event' (line 1438)
        Event_15695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 8), 'Event', False)
        # Obtaining the member '__init__' of a type (line 1438)
        init___15696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 8), Event_15695, '__init__')
        # Calling __init__(args, kwargs) (line 1438)
        init___call_result_15701 = invoke(stypy.reporting.localization.Localization(__file__, 1438, 8), init___15696, *[self_15697, name_15698, canvas_15699], **kwargs_15700)
        
        
        # Assigning a Name to a Attribute (line 1439):
        
        # Assigning a Name to a Attribute (line 1439):
        
        # Assigning a Name to a Attribute (line 1439):
        # Getting the type of 'renderer' (line 1439)
        renderer_15702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 24), 'renderer')
        # Getting the type of 'self' (line 1439)
        self_15703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 8), 'self')
        # Setting the type of the member 'renderer' of a type (line 1439)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 8), self_15703, 'renderer', renderer_15702)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'DrawEvent' (line 1424)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1424, 0), 'DrawEvent', DrawEvent)
# Declaration of the 'ResizeEvent' class
# Getting the type of 'Event' (line 1442)
Event_15704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 18), 'Event')

class ResizeEvent(Event_15704, ):
    unicode_15705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1457, (-1)), 'unicode', u'\n    An event triggered by a canvas resize\n\n    In addition to the :class:`Event` attributes, the following event\n    attributes are defined:\n\n    Attributes\n    ----------\n    width : scalar\n        width of the canvas in pixels\n\n    height : scalar\n        height of the canvas in pixels\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1458, 4, False)
        # Assigning a type to the variable 'self' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ResizeEvent.__init__', ['name', 'canvas'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['name', 'canvas'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1459)
        # Processing the call arguments (line 1459)
        # Getting the type of 'self' (line 1459)
        self_15708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 23), 'self', False)
        # Getting the type of 'name' (line 1459)
        name_15709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 29), 'name', False)
        # Getting the type of 'canvas' (line 1459)
        canvas_15710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 35), 'canvas', False)
        # Processing the call keyword arguments (line 1459)
        kwargs_15711 = {}
        # Getting the type of 'Event' (line 1459)
        Event_15706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'Event', False)
        # Obtaining the member '__init__' of a type (line 1459)
        init___15707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 8), Event_15706, '__init__')
        # Calling __init__(args, kwargs) (line 1459)
        init___call_result_15712 = invoke(stypy.reporting.localization.Localization(__file__, 1459, 8), init___15707, *[self_15708, name_15709, canvas_15710], **kwargs_15711)
        
        
        # Assigning a Call to a Tuple (line 1460):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_width_height(...): (line 1460)
        # Processing the call keyword arguments (line 1460)
        kwargs_15715 = {}
        # Getting the type of 'canvas' (line 1460)
        canvas_15713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 34), 'canvas', False)
        # Obtaining the member 'get_width_height' of a type (line 1460)
        get_width_height_15714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 34), canvas_15713, 'get_width_height')
        # Calling get_width_height(args, kwargs) (line 1460)
        get_width_height_call_result_15716 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 34), get_width_height_15714, *[], **kwargs_15715)
        
        # Assigning a type to the variable 'call_assignment_13722' (line 1460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'call_assignment_13722', get_width_height_call_result_15716)
        
        # Assigning a Call to a Name (line 1460):
        
        # Assigning a Call to a Name (line 1460):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_15719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1460, 8), 'int')
        # Processing the call keyword arguments
        kwargs_15720 = {}
        # Getting the type of 'call_assignment_13722' (line 1460)
        call_assignment_13722_15717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'call_assignment_13722', False)
        # Obtaining the member '__getitem__' of a type (line 1460)
        getitem___15718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 8), call_assignment_13722_15717, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_15721 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___15718, *[int_15719], **kwargs_15720)
        
        # Assigning a type to the variable 'call_assignment_13723' (line 1460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'call_assignment_13723', getitem___call_result_15721)
        
        # Assigning a Name to a Attribute (line 1460):
        
        # Assigning a Name to a Attribute (line 1460):
        # Getting the type of 'call_assignment_13723' (line 1460)
        call_assignment_13723_15722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'call_assignment_13723')
        # Getting the type of 'self' (line 1460)
        self_15723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'self')
        # Setting the type of the member 'width' of a type (line 1460)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 8), self_15723, 'width', call_assignment_13723_15722)
        
        # Assigning a Call to a Name (line 1460):
        
        # Assigning a Call to a Name (line 1460):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_15726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1460, 8), 'int')
        # Processing the call keyword arguments
        kwargs_15727 = {}
        # Getting the type of 'call_assignment_13722' (line 1460)
        call_assignment_13722_15724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'call_assignment_13722', False)
        # Obtaining the member '__getitem__' of a type (line 1460)
        getitem___15725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 8), call_assignment_13722_15724, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_15728 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___15725, *[int_15726], **kwargs_15727)
        
        # Assigning a type to the variable 'call_assignment_13724' (line 1460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'call_assignment_13724', getitem___call_result_15728)
        
        # Assigning a Name to a Attribute (line 1460):
        
        # Assigning a Name to a Attribute (line 1460):
        # Getting the type of 'call_assignment_13724' (line 1460)
        call_assignment_13724_15729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'call_assignment_13724')
        # Getting the type of 'self' (line 1460)
        self_15730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 20), 'self')
        # Setting the type of the member 'height' of a type (line 1460)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 20), self_15730, 'height', call_assignment_13724_15729)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ResizeEvent' (line 1442)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 0), 'ResizeEvent', ResizeEvent)
# Declaration of the 'CloseEvent' class
# Getting the type of 'Event' (line 1463)
Event_15731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 17), 'Event')

class CloseEvent(Event_15731, ):
    unicode_15732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, (-1)), 'unicode', u'\n    An event triggered by a figure being closed\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1468)
        None_15733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 46), 'None')
        defaults = [None_15733]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1468, 4, False)
        # Assigning a type to the variable 'self' (line 1469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1469, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CloseEvent.__init__', ['name', 'canvas', 'guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['name', 'canvas', 'guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1469)
        # Processing the call arguments (line 1469)
        # Getting the type of 'self' (line 1469)
        self_15736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 23), 'self', False)
        # Getting the type of 'name' (line 1469)
        name_15737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 29), 'name', False)
        # Getting the type of 'canvas' (line 1469)
        canvas_15738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 35), 'canvas', False)
        # Getting the type of 'guiEvent' (line 1469)
        guiEvent_15739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 43), 'guiEvent', False)
        # Processing the call keyword arguments (line 1469)
        kwargs_15740 = {}
        # Getting the type of 'Event' (line 1469)
        Event_15734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 8), 'Event', False)
        # Obtaining the member '__init__' of a type (line 1469)
        init___15735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 8), Event_15734, '__init__')
        # Calling __init__(args, kwargs) (line 1469)
        init___call_result_15741 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 8), init___15735, *[self_15736, name_15737, canvas_15738, guiEvent_15739], **kwargs_15740)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'CloseEvent' (line 1463)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1463, 0), 'CloseEvent', CloseEvent)
# Declaration of the 'LocationEvent' class
# Getting the type of 'Event' (line 1472)
Event_15742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 20), 'Event')

class LocationEvent(Event_15742, ):
    unicode_15743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1499, (-1)), 'unicode', u'\n    An event that has a screen location\n\n    The following additional attributes are defined and shown with\n    their default values.\n\n    In addition to the :class:`Event` attributes, the following\n    event attributes are defined:\n\n    Attributes\n    ----------\n    x : scalar\n        x position - pixels from left of canvas\n\n    y : scalar\n        y position - pixels from bottom of canvas\n\n    inaxes : bool\n        the :class:`~matplotlib.axes.Axes` instance if mouse is over axes\n\n    xdata : scalar\n        x coord of mouse in data coords\n\n    ydata : scalar\n        y coord of mouse in data coords\n\n    ')
    
    # Assigning a Name to a Name (line 1500):
    
    # Assigning a Name to a Name (line 1500):
    
    # Assigning a Name to a Name (line 1501):
    
    # Assigning a Name to a Name (line 1501):
    
    # Assigning a Name to a Name (line 1502):
    
    # Assigning a Name to a Name (line 1502):
    
    # Assigning a Name to a Name (line 1503):
    
    # Assigning a Name to a Name (line 1503):
    
    # Assigning a Name to a Name (line 1504):
    
    # Assigning a Name to a Name (line 1504):
    
    # Assigning a Name to a Name (line 1507):
    
    # Assigning a Name to a Name (line 1507):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1509)
        None_15744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 52), 'None')
        defaults = [None_15744]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1509, 4, False)
        # Assigning a type to the variable 'self' (line 1510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1510, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LocationEvent.__init__', ['name', 'canvas', 'x', 'y', 'guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['name', 'canvas', 'x', 'y', 'guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_15745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, (-1)), 'unicode', u'\n        *x*, *y* in figure coords, 0,0 = bottom, left\n        ')
        
        # Call to __init__(...): (line 1513)
        # Processing the call arguments (line 1513)
        # Getting the type of 'self' (line 1513)
        self_15748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 23), 'self', False)
        # Getting the type of 'name' (line 1513)
        name_15749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 29), 'name', False)
        # Getting the type of 'canvas' (line 1513)
        canvas_15750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 35), 'canvas', False)
        # Processing the call keyword arguments (line 1513)
        # Getting the type of 'guiEvent' (line 1513)
        guiEvent_15751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 52), 'guiEvent', False)
        keyword_15752 = guiEvent_15751
        kwargs_15753 = {'guiEvent': keyword_15752}
        # Getting the type of 'Event' (line 1513)
        Event_15746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 8), 'Event', False)
        # Obtaining the member '__init__' of a type (line 1513)
        init___15747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1513, 8), Event_15746, '__init__')
        # Calling __init__(args, kwargs) (line 1513)
        init___call_result_15754 = invoke(stypy.reporting.localization.Localization(__file__, 1513, 8), init___15747, *[self_15748, name_15749, canvas_15750], **kwargs_15753)
        
        
        # Assigning a Name to a Attribute (line 1514):
        
        # Assigning a Name to a Attribute (line 1514):
        
        # Assigning a Name to a Attribute (line 1514):
        # Getting the type of 'x' (line 1514)
        x_15755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 17), 'x')
        # Getting the type of 'self' (line 1514)
        self_15756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 8), 'self')
        # Setting the type of the member 'x' of a type (line 1514)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1514, 8), self_15756, 'x', x_15755)
        
        # Assigning a Name to a Attribute (line 1515):
        
        # Assigning a Name to a Attribute (line 1515):
        
        # Assigning a Name to a Attribute (line 1515):
        # Getting the type of 'y' (line 1515)
        y_15757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 17), 'y')
        # Getting the type of 'self' (line 1515)
        self_15758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 8), 'self')
        # Setting the type of the member 'y' of a type (line 1515)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1515, 8), self_15758, 'y', y_15757)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x' (line 1517)
        x_15759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 11), 'x')
        # Getting the type of 'None' (line 1517)
        None_15760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 16), 'None')
        # Applying the binary operator 'is' (line 1517)
        result_is__15761 = python_operator(stypy.reporting.localization.Localization(__file__, 1517, 11), 'is', x_15759, None_15760)
        
        
        # Getting the type of 'y' (line 1517)
        y_15762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 24), 'y')
        # Getting the type of 'None' (line 1517)
        None_15763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 29), 'None')
        # Applying the binary operator 'is' (line 1517)
        result_is__15764 = python_operator(stypy.reporting.localization.Localization(__file__, 1517, 24), 'is', y_15762, None_15763)
        
        # Applying the binary operator 'or' (line 1517)
        result_or_keyword_15765 = python_operator(stypy.reporting.localization.Localization(__file__, 1517, 11), 'or', result_is__15761, result_is__15764)
        
        # Testing the type of an if condition (line 1517)
        if_condition_15766 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1517, 8), result_or_keyword_15765)
        # Assigning a type to the variable 'if_condition_15766' (line 1517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1517, 8), 'if_condition_15766', if_condition_15766)
        # SSA begins for if statement (line 1517)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1519):
        
        # Assigning a Name to a Attribute (line 1519):
        
        # Assigning a Name to a Attribute (line 1519):
        # Getting the type of 'None' (line 1519)
        None_15767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 26), 'None')
        # Getting the type of 'self' (line 1519)
        self_15768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 12), 'self')
        # Setting the type of the member 'inaxes' of a type (line 1519)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1519, 12), self_15768, 'inaxes', None_15767)
        
        # Call to _update_enter_leave(...): (line 1520)
        # Processing the call keyword arguments (line 1520)
        kwargs_15771 = {}
        # Getting the type of 'self' (line 1520)
        self_15769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 12), 'self', False)
        # Obtaining the member '_update_enter_leave' of a type (line 1520)
        _update_enter_leave_15770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 12), self_15769, '_update_enter_leave')
        # Calling _update_enter_leave(args, kwargs) (line 1520)
        _update_enter_leave_call_result_15772 = invoke(stypy.reporting.localization.Localization(__file__, 1520, 12), _update_enter_leave_15770, *[], **kwargs_15771)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1521, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1517)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1524)
        # Getting the type of 'self' (line 1524)
        self_15773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 11), 'self')
        # Obtaining the member 'canvas' of a type (line 1524)
        canvas_15774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1524, 11), self_15773, 'canvas')
        # Obtaining the member 'mouse_grabber' of a type (line 1524)
        mouse_grabber_15775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1524, 11), canvas_15774, 'mouse_grabber')
        # Getting the type of 'None' (line 1524)
        None_15776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 40), 'None')
        
        (may_be_15777, more_types_in_union_15778) = may_be_none(mouse_grabber_15775, None_15776)

        if may_be_15777:

            if more_types_in_union_15778:
                # Runtime conditional SSA (line 1524)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a ListComp to a Name (line 1525):
            
            # Assigning a ListComp to a Name (line 1525):
            
            # Assigning a ListComp to a Name (line 1525):
            # Calculating list comprehension
            # Calculating comprehension expression
            
            # Call to get_axes(...): (line 1525)
            # Processing the call keyword arguments (line 1525)
            kwargs_15789 = {}
            # Getting the type of 'self' (line 1525)
            self_15785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 36), 'self', False)
            # Obtaining the member 'canvas' of a type (line 1525)
            canvas_15786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1525, 36), self_15785, 'canvas')
            # Obtaining the member 'figure' of a type (line 1525)
            figure_15787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1525, 36), canvas_15786, 'figure')
            # Obtaining the member 'get_axes' of a type (line 1525)
            get_axes_15788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1525, 36), figure_15787, 'get_axes')
            # Calling get_axes(args, kwargs) (line 1525)
            get_axes_call_result_15790 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 36), get_axes_15788, *[], **kwargs_15789)
            
            comprehension_15791 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1525, 25), get_axes_call_result_15790)
            # Assigning a type to the variable 'a' (line 1525)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 25), 'a', comprehension_15791)
            
            # Call to in_axes(...): (line 1526)
            # Processing the call arguments (line 1526)
            # Getting the type of 'self' (line 1526)
            self_15782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 38), 'self', False)
            # Processing the call keyword arguments (line 1526)
            kwargs_15783 = {}
            # Getting the type of 'a' (line 1526)
            a_15780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 28), 'a', False)
            # Obtaining the member 'in_axes' of a type (line 1526)
            in_axes_15781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 28), a_15780, 'in_axes')
            # Calling in_axes(args, kwargs) (line 1526)
            in_axes_call_result_15784 = invoke(stypy.reporting.localization.Localization(__file__, 1526, 28), in_axes_15781, *[self_15782], **kwargs_15783)
            
            # Getting the type of 'a' (line 1525)
            a_15779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 25), 'a')
            list_15792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1525, 25), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1525, 25), list_15792, a_15779)
            # Assigning a type to the variable 'axes_list' (line 1525)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 12), 'axes_list', list_15792)

            if more_types_in_union_15778:
                # Runtime conditional SSA for else branch (line 1524)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_15777) or more_types_in_union_15778):
            
            # Assigning a List to a Name (line 1528):
            
            # Assigning a List to a Name (line 1528):
            
            # Assigning a List to a Name (line 1528):
            
            # Obtaining an instance of the builtin type 'list' (line 1528)
            list_15793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1528, 24), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1528)
            # Adding element type (line 1528)
            # Getting the type of 'self' (line 1528)
            self_15794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 25), 'self')
            # Obtaining the member 'canvas' of a type (line 1528)
            canvas_15795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 25), self_15794, 'canvas')
            # Obtaining the member 'mouse_grabber' of a type (line 1528)
            mouse_grabber_15796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 25), canvas_15795, 'mouse_grabber')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1528, 24), list_15793, mouse_grabber_15796)
            
            # Assigning a type to the variable 'axes_list' (line 1528)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 12), 'axes_list', list_15793)

            if (may_be_15777 and more_types_in_union_15778):
                # SSA join for if statement (line 1524)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'axes_list' (line 1530)
        axes_list_15797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 11), 'axes_list')
        # Testing the type of an if condition (line 1530)
        if_condition_15798 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1530, 8), axes_list_15797)
        # Assigning a type to the variable 'if_condition_15798' (line 1530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 8), 'if_condition_15798', if_condition_15798)
        # SSA begins for if statement (line 1530)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1531):
        
        # Assigning a Call to a Attribute (line 1531):
        
        # Assigning a Call to a Attribute (line 1531):
        
        # Call to max(...): (line 1531)
        # Processing the call arguments (line 1531)
        # Getting the type of 'axes_list' (line 1531)
        axes_list_15800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 30), 'axes_list', False)
        # Processing the call keyword arguments (line 1531)

        @norecursion
        def _stypy_temp_lambda_4(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_4'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_4', 1531, 45, True)
            # Passed parameters checking function
            _stypy_temp_lambda_4.stypy_localization = localization
            _stypy_temp_lambda_4.stypy_type_of_self = None
            _stypy_temp_lambda_4.stypy_type_store = module_type_store
            _stypy_temp_lambda_4.stypy_function_name = '_stypy_temp_lambda_4'
            _stypy_temp_lambda_4.stypy_param_names_list = ['x']
            _stypy_temp_lambda_4.stypy_varargs_param_name = None
            _stypy_temp_lambda_4.stypy_kwargs_param_name = None
            _stypy_temp_lambda_4.stypy_call_defaults = defaults
            _stypy_temp_lambda_4.stypy_call_varargs = varargs
            _stypy_temp_lambda_4.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_4', ['x'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_4', ['x'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'x' (line 1531)
            x_15801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 55), 'x', False)
            # Obtaining the member 'zorder' of a type (line 1531)
            zorder_15802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1531, 55), x_15801, 'zorder')
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 1531)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 45), 'stypy_return_type', zorder_15802)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_4' in the type store
            # Getting the type of 'stypy_return_type' (line 1531)
            stypy_return_type_15803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 45), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_15803)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_4'
            return stypy_return_type_15803

        # Assigning a type to the variable '_stypy_temp_lambda_4' (line 1531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 45), '_stypy_temp_lambda_4', _stypy_temp_lambda_4)
        # Getting the type of '_stypy_temp_lambda_4' (line 1531)
        _stypy_temp_lambda_4_15804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 45), '_stypy_temp_lambda_4')
        keyword_15805 = _stypy_temp_lambda_4_15804
        kwargs_15806 = {'key': keyword_15805}
        # Getting the type of 'max' (line 1531)
        max_15799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 26), 'max', False)
        # Calling max(args, kwargs) (line 1531)
        max_call_result_15807 = invoke(stypy.reporting.localization.Localization(__file__, 1531, 26), max_15799, *[axes_list_15800], **kwargs_15806)
        
        # Getting the type of 'self' (line 1531)
        self_15808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), 'self')
        # Setting the type of the member 'inaxes' of a type (line 1531)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1531, 12), self_15808, 'inaxes', max_call_result_15807)
        # SSA branch for the else part of an if statement (line 1530)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 1533):
        
        # Assigning a Name to a Attribute (line 1533):
        
        # Assigning a Name to a Attribute (line 1533):
        # Getting the type of 'None' (line 1533)
        None_15809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 26), 'None')
        # Getting the type of 'self' (line 1533)
        self_15810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 12), 'self')
        # Setting the type of the member 'inaxes' of a type (line 1533)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 12), self_15810, 'inaxes', None_15809)
        
        # Call to _update_enter_leave(...): (line 1534)
        # Processing the call keyword arguments (line 1534)
        kwargs_15813 = {}
        # Getting the type of 'self' (line 1534)
        self_15811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 12), 'self', False)
        # Obtaining the member '_update_enter_leave' of a type (line 1534)
        _update_enter_leave_15812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 12), self_15811, '_update_enter_leave')
        # Calling _update_enter_leave(args, kwargs) (line 1534)
        _update_enter_leave_call_result_15814 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 12), _update_enter_leave_15812, *[], **kwargs_15813)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1530)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 1537)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1538):
        
        # Assigning a Call to a Name (line 1538):
        
        # Assigning a Call to a Name (line 1538):
        
        # Call to inverted(...): (line 1538)
        # Processing the call keyword arguments (line 1538)
        kwargs_15819 = {}
        # Getting the type of 'self' (line 1538)
        self_15815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 20), 'self', False)
        # Obtaining the member 'inaxes' of a type (line 1538)
        inaxes_15816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 20), self_15815, 'inaxes')
        # Obtaining the member 'transData' of a type (line 1538)
        transData_15817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 20), inaxes_15816, 'transData')
        # Obtaining the member 'inverted' of a type (line 1538)
        inverted_15818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 20), transData_15817, 'inverted')
        # Calling inverted(args, kwargs) (line 1538)
        inverted_call_result_15820 = invoke(stypy.reporting.localization.Localization(__file__, 1538, 20), inverted_15818, *[], **kwargs_15819)
        
        # Assigning a type to the variable 'trans' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 12), 'trans', inverted_call_result_15820)
        
        # Assigning a Call to a Tuple (line 1539):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1539)
        # Processing the call arguments (line 1539)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1539)
        tuple_15823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1539)
        # Adding element type (line 1539)
        # Getting the type of 'x' (line 1539)
        x_15824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 50), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1539, 50), tuple_15823, x_15824)
        # Adding element type (line 1539)
        # Getting the type of 'y' (line 1539)
        y_15825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 53), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1539, 50), tuple_15823, y_15825)
        
        # Processing the call keyword arguments (line 1539)
        kwargs_15826 = {}
        # Getting the type of 'trans' (line 1539)
        trans_15821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 27), 'trans', False)
        # Obtaining the member 'transform_point' of a type (line 1539)
        transform_point_15822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 27), trans_15821, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1539)
        transform_point_call_result_15827 = invoke(stypy.reporting.localization.Localization(__file__, 1539, 27), transform_point_15822, *[tuple_15823], **kwargs_15826)
        
        # Assigning a type to the variable 'call_assignment_13725' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'call_assignment_13725', transform_point_call_result_15827)
        
        # Assigning a Call to a Name (line 1539):
        
        # Assigning a Call to a Name (line 1539):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_15830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 12), 'int')
        # Processing the call keyword arguments
        kwargs_15831 = {}
        # Getting the type of 'call_assignment_13725' (line 1539)
        call_assignment_13725_15828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'call_assignment_13725', False)
        # Obtaining the member '__getitem__' of a type (line 1539)
        getitem___15829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 12), call_assignment_13725_15828, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_15832 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___15829, *[int_15830], **kwargs_15831)
        
        # Assigning a type to the variable 'call_assignment_13726' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'call_assignment_13726', getitem___call_result_15832)
        
        # Assigning a Name to a Name (line 1539):
        
        # Assigning a Name to a Name (line 1539):
        # Getting the type of 'call_assignment_13726' (line 1539)
        call_assignment_13726_15833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'call_assignment_13726')
        # Assigning a type to the variable 'xdata' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'xdata', call_assignment_13726_15833)
        
        # Assigning a Call to a Name (line 1539):
        
        # Assigning a Call to a Name (line 1539):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_15836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 12), 'int')
        # Processing the call keyword arguments
        kwargs_15837 = {}
        # Getting the type of 'call_assignment_13725' (line 1539)
        call_assignment_13725_15834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'call_assignment_13725', False)
        # Obtaining the member '__getitem__' of a type (line 1539)
        getitem___15835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 12), call_assignment_13725_15834, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_15838 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___15835, *[int_15836], **kwargs_15837)
        
        # Assigning a type to the variable 'call_assignment_13727' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'call_assignment_13727', getitem___call_result_15838)
        
        # Assigning a Name to a Name (line 1539):
        
        # Assigning a Name to a Name (line 1539):
        # Getting the type of 'call_assignment_13727' (line 1539)
        call_assignment_13727_15839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'call_assignment_13727')
        # Assigning a type to the variable 'ydata' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 19), 'ydata', call_assignment_13727_15839)
        # SSA branch for the except part of a try statement (line 1537)
        # SSA branch for the except 'ValueError' branch of a try statement (line 1537)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Name to a Attribute (line 1541):
        
        # Assigning a Name to a Attribute (line 1541):
        
        # Assigning a Name to a Attribute (line 1541):
        # Getting the type of 'None' (line 1541)
        None_15840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 25), 'None')
        # Getting the type of 'self' (line 1541)
        self_15841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 12), 'self')
        # Setting the type of the member 'xdata' of a type (line 1541)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1541, 12), self_15841, 'xdata', None_15840)
        
        # Assigning a Name to a Attribute (line 1542):
        
        # Assigning a Name to a Attribute (line 1542):
        
        # Assigning a Name to a Attribute (line 1542):
        # Getting the type of 'None' (line 1542)
        None_15842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 25), 'None')
        # Getting the type of 'self' (line 1542)
        self_15843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 12), 'self')
        # Setting the type of the member 'ydata' of a type (line 1542)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 12), self_15843, 'ydata', None_15842)
        # SSA branch for the else branch of a try statement (line 1537)
        module_type_store.open_ssa_branch('except else')
        
        # Assigning a Name to a Attribute (line 1544):
        
        # Assigning a Name to a Attribute (line 1544):
        
        # Assigning a Name to a Attribute (line 1544):
        # Getting the type of 'xdata' (line 1544)
        xdata_15844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 25), 'xdata')
        # Getting the type of 'self' (line 1544)
        self_15845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 12), 'self')
        # Setting the type of the member 'xdata' of a type (line 1544)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1544, 12), self_15845, 'xdata', xdata_15844)
        
        # Assigning a Name to a Attribute (line 1545):
        
        # Assigning a Name to a Attribute (line 1545):
        
        # Assigning a Name to a Attribute (line 1545):
        # Getting the type of 'ydata' (line 1545)
        ydata_15846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 25), 'ydata')
        # Getting the type of 'self' (line 1545)
        self_15847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 12), 'self')
        # Setting the type of the member 'ydata' of a type (line 1545)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 12), self_15847, 'ydata', ydata_15846)
        # SSA join for try-except statement (line 1537)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _update_enter_leave(...): (line 1547)
        # Processing the call keyword arguments (line 1547)
        kwargs_15850 = {}
        # Getting the type of 'self' (line 1547)
        self_15848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 8), 'self', False)
        # Obtaining the member '_update_enter_leave' of a type (line 1547)
        _update_enter_leave_15849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1547, 8), self_15848, '_update_enter_leave')
        # Calling _update_enter_leave(args, kwargs) (line 1547)
        _update_enter_leave_call_result_15851 = invoke(stypy.reporting.localization.Localization(__file__, 1547, 8), _update_enter_leave_15849, *[], **kwargs_15850)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _update_enter_leave(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_enter_leave'
        module_type_store = module_type_store.open_function_context('_update_enter_leave', 1549, 4, False)
        # Assigning a type to the variable 'self' (line 1550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LocationEvent._update_enter_leave.__dict__.__setitem__('stypy_localization', localization)
        LocationEvent._update_enter_leave.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LocationEvent._update_enter_leave.__dict__.__setitem__('stypy_type_store', module_type_store)
        LocationEvent._update_enter_leave.__dict__.__setitem__('stypy_function_name', 'LocationEvent._update_enter_leave')
        LocationEvent._update_enter_leave.__dict__.__setitem__('stypy_param_names_list', [])
        LocationEvent._update_enter_leave.__dict__.__setitem__('stypy_varargs_param_name', None)
        LocationEvent._update_enter_leave.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LocationEvent._update_enter_leave.__dict__.__setitem__('stypy_call_defaults', defaults)
        LocationEvent._update_enter_leave.__dict__.__setitem__('stypy_call_varargs', varargs)
        LocationEvent._update_enter_leave.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LocationEvent._update_enter_leave.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LocationEvent._update_enter_leave', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_enter_leave', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_enter_leave(...)' code ##################

        unicode_15852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1550, 8), 'unicode', u'process the figure/axes enter leave events')
        
        
        # Getting the type of 'LocationEvent' (line 1551)
        LocationEvent_15853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 11), 'LocationEvent')
        # Obtaining the member 'lastevent' of a type (line 1551)
        lastevent_15854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 11), LocationEvent_15853, 'lastevent')
        # Getting the type of 'None' (line 1551)
        None_15855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 42), 'None')
        # Applying the binary operator 'isnot' (line 1551)
        result_is_not_15856 = python_operator(stypy.reporting.localization.Localization(__file__, 1551, 11), 'isnot', lastevent_15854, None_15855)
        
        # Testing the type of an if condition (line 1551)
        if_condition_15857 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1551, 8), result_is_not_15856)
        # Assigning a type to the variable 'if_condition_15857' (line 1551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'if_condition_15857', if_condition_15857)
        # SSA begins for if statement (line 1551)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1552):
        
        # Assigning a Attribute to a Name (line 1552):
        
        # Assigning a Attribute to a Name (line 1552):
        # Getting the type of 'LocationEvent' (line 1552)
        LocationEvent_15858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 19), 'LocationEvent')
        # Obtaining the member 'lastevent' of a type (line 1552)
        lastevent_15859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1552, 19), LocationEvent_15858, 'lastevent')
        # Assigning a type to the variable 'last' (line 1552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1552, 12), 'last', lastevent_15859)
        
        
        # Getting the type of 'last' (line 1553)
        last_15860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 15), 'last')
        # Obtaining the member 'inaxes' of a type (line 1553)
        inaxes_15861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1553, 15), last_15860, 'inaxes')
        # Getting the type of 'self' (line 1553)
        self_15862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 30), 'self')
        # Obtaining the member 'inaxes' of a type (line 1553)
        inaxes_15863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1553, 30), self_15862, 'inaxes')
        # Applying the binary operator '!=' (line 1553)
        result_ne_15864 = python_operator(stypy.reporting.localization.Localization(__file__, 1553, 15), '!=', inaxes_15861, inaxes_15863)
        
        # Testing the type of an if condition (line 1553)
        if_condition_15865 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1553, 12), result_ne_15864)
        # Assigning a type to the variable 'if_condition_15865' (line 1553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1553, 12), 'if_condition_15865', if_condition_15865)
        # SSA begins for if statement (line 1553)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 1555)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        
        # Getting the type of 'last' (line 1556)
        last_15866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 23), 'last')
        # Obtaining the member 'inaxes' of a type (line 1556)
        inaxes_15867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1556, 23), last_15866, 'inaxes')
        # Getting the type of 'None' (line 1556)
        None_15868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 42), 'None')
        # Applying the binary operator 'isnot' (line 1556)
        result_is_not_15869 = python_operator(stypy.reporting.localization.Localization(__file__, 1556, 23), 'isnot', inaxes_15867, None_15868)
        
        # Testing the type of an if condition (line 1556)
        if_condition_15870 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1556, 20), result_is_not_15869)
        # Assigning a type to the variable 'if_condition_15870' (line 1556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1556, 20), 'if_condition_15870', if_condition_15870)
        # SSA begins for if statement (line 1556)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to process(...): (line 1557)
        # Processing the call arguments (line 1557)
        unicode_15875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1557, 54), 'unicode', u'axes_leave_event')
        # Getting the type of 'last' (line 1557)
        last_15876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 74), 'last', False)
        # Processing the call keyword arguments (line 1557)
        kwargs_15877 = {}
        # Getting the type of 'last' (line 1557)
        last_15871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 24), 'last', False)
        # Obtaining the member 'canvas' of a type (line 1557)
        canvas_15872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1557, 24), last_15871, 'canvas')
        # Obtaining the member 'callbacks' of a type (line 1557)
        callbacks_15873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1557, 24), canvas_15872, 'callbacks')
        # Obtaining the member 'process' of a type (line 1557)
        process_15874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1557, 24), callbacks_15873, 'process')
        # Calling process(args, kwargs) (line 1557)
        process_call_result_15878 = invoke(stypy.reporting.localization.Localization(__file__, 1557, 24), process_15874, *[unicode_15875, last_15876], **kwargs_15877)
        
        # SSA join for if statement (line 1556)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 1555)
        # SSA branch for the except '<any exception>' branch of a try statement (line 1555)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1555)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1565)
        self_15879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 19), 'self')
        # Obtaining the member 'inaxes' of a type (line 1565)
        inaxes_15880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 19), self_15879, 'inaxes')
        # Getting the type of 'None' (line 1565)
        None_15881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 38), 'None')
        # Applying the binary operator 'isnot' (line 1565)
        result_is_not_15882 = python_operator(stypy.reporting.localization.Localization(__file__, 1565, 19), 'isnot', inaxes_15880, None_15881)
        
        # Testing the type of an if condition (line 1565)
        if_condition_15883 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1565, 16), result_is_not_15882)
        # Assigning a type to the variable 'if_condition_15883' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 16), 'if_condition_15883', if_condition_15883)
        # SSA begins for if statement (line 1565)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to process(...): (line 1566)
        # Processing the call arguments (line 1566)
        unicode_15888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1566, 50), 'unicode', u'axes_enter_event')
        # Getting the type of 'self' (line 1566)
        self_15889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 70), 'self', False)
        # Processing the call keyword arguments (line 1566)
        kwargs_15890 = {}
        # Getting the type of 'self' (line 1566)
        self_15884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 20), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1566)
        canvas_15885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 20), self_15884, 'canvas')
        # Obtaining the member 'callbacks' of a type (line 1566)
        callbacks_15886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 20), canvas_15885, 'callbacks')
        # Obtaining the member 'process' of a type (line 1566)
        process_15887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 20), callbacks_15886, 'process')
        # Calling process(args, kwargs) (line 1566)
        process_call_result_15891 = invoke(stypy.reporting.localization.Localization(__file__, 1566, 20), process_15887, *[unicode_15888, self_15889], **kwargs_15890)
        
        # SSA join for if statement (line 1565)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1553)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1551)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 1570)
        self_15892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 15), 'self')
        # Obtaining the member 'inaxes' of a type (line 1570)
        inaxes_15893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1570, 15), self_15892, 'inaxes')
        # Getting the type of 'None' (line 1570)
        None_15894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 34), 'None')
        # Applying the binary operator 'isnot' (line 1570)
        result_is_not_15895 = python_operator(stypy.reporting.localization.Localization(__file__, 1570, 15), 'isnot', inaxes_15893, None_15894)
        
        # Testing the type of an if condition (line 1570)
        if_condition_15896 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1570, 12), result_is_not_15895)
        # Assigning a type to the variable 'if_condition_15896' (line 1570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1570, 12), 'if_condition_15896', if_condition_15896)
        # SSA begins for if statement (line 1570)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to process(...): (line 1571)
        # Processing the call arguments (line 1571)
        unicode_15901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 46), 'unicode', u'axes_enter_event')
        # Getting the type of 'self' (line 1571)
        self_15902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 66), 'self', False)
        # Processing the call keyword arguments (line 1571)
        kwargs_15903 = {}
        # Getting the type of 'self' (line 1571)
        self_15897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1571)
        canvas_15898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 16), self_15897, 'canvas')
        # Obtaining the member 'callbacks' of a type (line 1571)
        callbacks_15899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 16), canvas_15898, 'callbacks')
        # Obtaining the member 'process' of a type (line 1571)
        process_15900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 16), callbacks_15899, 'process')
        # Calling process(args, kwargs) (line 1571)
        process_call_result_15904 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 16), process_15900, *[unicode_15901, self_15902], **kwargs_15903)
        
        # SSA join for if statement (line 1570)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1551)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1573):
        
        # Assigning a Name to a Attribute (line 1573):
        
        # Assigning a Name to a Attribute (line 1573):
        # Getting the type of 'self' (line 1573)
        self_15905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 34), 'self')
        # Getting the type of 'LocationEvent' (line 1573)
        LocationEvent_15906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 8), 'LocationEvent')
        # Setting the type of the member 'lastevent' of a type (line 1573)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 8), LocationEvent_15906, 'lastevent', self_15905)
        
        # ################# End of '_update_enter_leave(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_enter_leave' in the type store
        # Getting the type of 'stypy_return_type' (line 1549)
        stypy_return_type_15907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15907)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_enter_leave'
        return stypy_return_type_15907


# Assigning a type to the variable 'LocationEvent' (line 1472)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 0), 'LocationEvent', LocationEvent)

# Assigning a Name to a Name (line 1500):
# Getting the type of 'None' (line 1500)
None_15908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 8), 'None')
# Getting the type of 'LocationEvent'
LocationEvent_15909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LocationEvent')
# Setting the type of the member 'x' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LocationEvent_15909, 'x', None_15908)

# Assigning a Name to a Name (line 1501):
# Getting the type of 'None' (line 1501)
None_15910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 8), 'None')
# Getting the type of 'LocationEvent'
LocationEvent_15911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LocationEvent')
# Setting the type of the member 'y' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LocationEvent_15911, 'y', None_15910)

# Assigning a Name to a Name (line 1502):
# Getting the type of 'None' (line 1502)
None_15912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 13), 'None')
# Getting the type of 'LocationEvent'
LocationEvent_15913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LocationEvent')
# Setting the type of the member 'inaxes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LocationEvent_15913, 'inaxes', None_15912)

# Assigning a Name to a Name (line 1503):
# Getting the type of 'None' (line 1503)
None_15914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 12), 'None')
# Getting the type of 'LocationEvent'
LocationEvent_15915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LocationEvent')
# Setting the type of the member 'xdata' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LocationEvent_15915, 'xdata', None_15914)

# Assigning a Name to a Name (line 1504):
# Getting the type of 'None' (line 1504)
None_15916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 12), 'None')
# Getting the type of 'LocationEvent'
LocationEvent_15917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LocationEvent')
# Setting the type of the member 'ydata' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LocationEvent_15917, 'ydata', None_15916)

# Assigning a Name to a Name (line 1507):
# Getting the type of 'None' (line 1507)
None_15918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 16), 'None')
# Getting the type of 'LocationEvent'
LocationEvent_15919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LocationEvent')
# Setting the type of the member 'lastevent' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LocationEvent_15919, 'lastevent', None_15918)
# Declaration of the 'MouseEvent' class
# Getting the type of 'LocationEvent' (line 1576)
LocationEvent_15920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 17), 'LocationEvent')

class MouseEvent(LocationEvent_15920, ):
    unicode_15921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1610, (-1)), 'unicode', u"\n    A mouse event ('button_press_event',\n                   'button_release_event',\n                   'scroll_event',\n                   'motion_notify_event').\n\n    In addition to the :class:`Event` and :class:`LocationEvent`\n    attributes, the following attributes are defined:\n\n    Attributes\n    ----------\n    button : None, scalar, or str\n        button pressed None, 1, 2, 3, 'up', 'down' (up and down are used\n        for scroll events).  Note that in the nbagg backend, both the\n        middle and right clicks return 3 since right clicking will bring\n        up the context menu in some browsers.\n\n    key : None, or str\n        the key depressed when the mouse event triggered (see\n        :class:`KeyEvent`)\n\n    step : scalar\n        number of scroll steps (positive for 'up', negative for 'down')\n\n    Examples\n    --------\n    Usage::\n\n        def on_press(event):\n            print('you pressed', event.button, event.xdata, event.ydata)\n\n        cid = fig.canvas.mpl_connect('button_press_event', on_press)\n\n    ")
    
    # Assigning a Name to a Name (line 1611):
    
    # Assigning a Name to a Name (line 1611):
    
    # Assigning a Name to a Name (line 1612):
    
    # Assigning a Name to a Name (line 1612):
    
    # Assigning a Name to a Name (line 1613):
    
    # Assigning a Name to a Name (line 1613):
    
    # Assigning a Name to a Name (line 1614):
    
    # Assigning a Name to a Name (line 1614):
    
    # Assigning a Name to a Name (line 1615):
    
    # Assigning a Name to a Name (line 1615):
    
    # Assigning a Name to a Name (line 1616):
    
    # Assigning a Name to a Name (line 1616):
    
    # Assigning a Name to a Name (line 1617):
    
    # Assigning a Name to a Name (line 1617):
    
    # Assigning a Name to a Name (line 1618):
    
    # Assigning a Name to a Name (line 1618):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1620)
        None_15922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 50), 'None')
        # Getting the type of 'None' (line 1620)
        None_15923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 60), 'None')
        int_15924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1621, 22), 'int')
        # Getting the type of 'False' (line 1621)
        False_15925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 34), 'False')
        # Getting the type of 'None' (line 1621)
        None_15926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 50), 'None')
        defaults = [None_15922, None_15923, int_15924, False_15925, None_15926]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1620, 4, False)
        # Assigning a type to the variable 'self' (line 1621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MouseEvent.__init__', ['name', 'canvas', 'x', 'y', 'button', 'key', 'step', 'dblclick', 'guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['name', 'canvas', 'x', 'y', 'button', 'key', 'step', 'dblclick', 'guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_15927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1625, (-1)), 'unicode', u"\n        x, y in figure coords, 0,0 = bottom, left\n        button pressed None, 1, 2, 3, 'up', 'down'\n        ")
        
        # Call to __init__(...): (line 1626)
        # Processing the call arguments (line 1626)
        # Getting the type of 'self' (line 1626)
        self_15930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 31), 'self', False)
        # Getting the type of 'name' (line 1626)
        name_15931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 37), 'name', False)
        # Getting the type of 'canvas' (line 1626)
        canvas_15932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 43), 'canvas', False)
        # Getting the type of 'x' (line 1626)
        x_15933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 51), 'x', False)
        # Getting the type of 'y' (line 1626)
        y_15934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 54), 'y', False)
        # Processing the call keyword arguments (line 1626)
        # Getting the type of 'guiEvent' (line 1626)
        guiEvent_15935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 66), 'guiEvent', False)
        keyword_15936 = guiEvent_15935
        kwargs_15937 = {'guiEvent': keyword_15936}
        # Getting the type of 'LocationEvent' (line 1626)
        LocationEvent_15928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 8), 'LocationEvent', False)
        # Obtaining the member '__init__' of a type (line 1626)
        init___15929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1626, 8), LocationEvent_15928, '__init__')
        # Calling __init__(args, kwargs) (line 1626)
        init___call_result_15938 = invoke(stypy.reporting.localization.Localization(__file__, 1626, 8), init___15929, *[self_15930, name_15931, canvas_15932, x_15933, y_15934], **kwargs_15937)
        
        
        # Assigning a Name to a Attribute (line 1627):
        
        # Assigning a Name to a Attribute (line 1627):
        
        # Assigning a Name to a Attribute (line 1627):
        # Getting the type of 'button' (line 1627)
        button_15939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 22), 'button')
        # Getting the type of 'self' (line 1627)
        self_15940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 8), 'self')
        # Setting the type of the member 'button' of a type (line 1627)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1627, 8), self_15940, 'button', button_15939)
        
        # Assigning a Name to a Attribute (line 1628):
        
        # Assigning a Name to a Attribute (line 1628):
        
        # Assigning a Name to a Attribute (line 1628):
        # Getting the type of 'key' (line 1628)
        key_15941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 19), 'key')
        # Getting the type of 'self' (line 1628)
        self_15942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 8), 'self')
        # Setting the type of the member 'key' of a type (line 1628)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1628, 8), self_15942, 'key', key_15941)
        
        # Assigning a Name to a Attribute (line 1629):
        
        # Assigning a Name to a Attribute (line 1629):
        
        # Assigning a Name to a Attribute (line 1629):
        # Getting the type of 'step' (line 1629)
        step_15943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 20), 'step')
        # Getting the type of 'self' (line 1629)
        self_15944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 8), 'self')
        # Setting the type of the member 'step' of a type (line 1629)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1629, 8), self_15944, 'step', step_15943)
        
        # Assigning a Name to a Attribute (line 1630):
        
        # Assigning a Name to a Attribute (line 1630):
        
        # Assigning a Name to a Attribute (line 1630):
        # Getting the type of 'dblclick' (line 1630)
        dblclick_15945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 24), 'dblclick')
        # Getting the type of 'self' (line 1630)
        self_15946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 8), 'self')
        # Setting the type of the member 'dblclick' of a type (line 1630)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1630, 8), self_15946, 'dblclick', dblclick_15945)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1632, 4, False)
        # Assigning a type to the variable 'self' (line 1633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1633, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MouseEvent.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        MouseEvent.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MouseEvent.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MouseEvent.stypy__str__.__dict__.__setitem__('stypy_function_name', 'MouseEvent.stypy__str__')
        MouseEvent.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        MouseEvent.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MouseEvent.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MouseEvent.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MouseEvent.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MouseEvent.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MouseEvent.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MouseEvent.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_15947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1633, 16), 'unicode', u'MPL MouseEvent: xy=(%d,%d) xydata=(%s,%s) button=%s ')
        unicode_15948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1634, 16), 'unicode', u'dblclick=%s inaxes=%s')
        # Applying the binary operator '+' (line 1633)
        result_add_15949 = python_operator(stypy.reporting.localization.Localization(__file__, 1633, 16), '+', unicode_15947, unicode_15948)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1634)
        tuple_15950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1634, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1634)
        # Adding element type (line 1634)
        # Getting the type of 'self' (line 1634)
        self_15951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 44), 'self')
        # Obtaining the member 'x' of a type (line 1634)
        x_15952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 44), self_15951, 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1634, 44), tuple_15950, x_15952)
        # Adding element type (line 1634)
        # Getting the type of 'self' (line 1634)
        self_15953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 52), 'self')
        # Obtaining the member 'y' of a type (line 1634)
        y_15954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 52), self_15953, 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1634, 44), tuple_15950, y_15954)
        # Adding element type (line 1634)
        # Getting the type of 'self' (line 1634)
        self_15955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 60), 'self')
        # Obtaining the member 'xdata' of a type (line 1634)
        xdata_15956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 60), self_15955, 'xdata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1634, 44), tuple_15950, xdata_15956)
        # Adding element type (line 1634)
        # Getting the type of 'self' (line 1635)
        self_15957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 44), 'self')
        # Obtaining the member 'ydata' of a type (line 1635)
        ydata_15958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1635, 44), self_15957, 'ydata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1634, 44), tuple_15950, ydata_15958)
        # Adding element type (line 1634)
        # Getting the type of 'self' (line 1635)
        self_15959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 56), 'self')
        # Obtaining the member 'button' of a type (line 1635)
        button_15960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1635, 56), self_15959, 'button')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1634, 44), tuple_15950, button_15960)
        # Adding element type (line 1634)
        # Getting the type of 'self' (line 1636)
        self_15961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 44), 'self')
        # Obtaining the member 'dblclick' of a type (line 1636)
        dblclick_15962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1636, 44), self_15961, 'dblclick')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1634, 44), tuple_15950, dblclick_15962)
        # Adding element type (line 1634)
        # Getting the type of 'self' (line 1636)
        self_15963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 59), 'self')
        # Obtaining the member 'inaxes' of a type (line 1636)
        inaxes_15964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1636, 59), self_15963, 'inaxes')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1634, 44), tuple_15950, inaxes_15964)
        
        # Applying the binary operator '%' (line 1633)
        result_mod_15965 = python_operator(stypy.reporting.localization.Localization(__file__, 1633, 15), '%', result_add_15949, tuple_15950)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1633, 8), 'stypy_return_type', result_mod_15965)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1632)
        stypy_return_type_15966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_15966)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_15966


# Assigning a type to the variable 'MouseEvent' (line 1576)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1576, 0), 'MouseEvent', MouseEvent)

# Assigning a Name to a Name (line 1611):
# Getting the type of 'None' (line 1611)
None_15967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 8), 'None')
# Getting the type of 'MouseEvent'
MouseEvent_15968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MouseEvent')
# Setting the type of the member 'x' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MouseEvent_15968, 'x', None_15967)

# Assigning a Name to a Name (line 1612):
# Getting the type of 'None' (line 1612)
None_15969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 8), 'None')
# Getting the type of 'MouseEvent'
MouseEvent_15970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MouseEvent')
# Setting the type of the member 'y' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MouseEvent_15970, 'y', None_15969)

# Assigning a Name to a Name (line 1613):
# Getting the type of 'None' (line 1613)
None_15971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 13), 'None')
# Getting the type of 'MouseEvent'
MouseEvent_15972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MouseEvent')
# Setting the type of the member 'button' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MouseEvent_15972, 'button', None_15971)

# Assigning a Name to a Name (line 1614):
# Getting the type of 'None' (line 1614)
None_15973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 15), 'None')
# Getting the type of 'MouseEvent'
MouseEvent_15974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MouseEvent')
# Setting the type of the member 'dblclick' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MouseEvent_15974, 'dblclick', None_15973)

# Assigning a Name to a Name (line 1615):
# Getting the type of 'None' (line 1615)
None_15975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 13), 'None')
# Getting the type of 'MouseEvent'
MouseEvent_15976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MouseEvent')
# Setting the type of the member 'inaxes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MouseEvent_15976, 'inaxes', None_15975)

# Assigning a Name to a Name (line 1616):
# Getting the type of 'None' (line 1616)
None_15977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 12), 'None')
# Getting the type of 'MouseEvent'
MouseEvent_15978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MouseEvent')
# Setting the type of the member 'xdata' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MouseEvent_15978, 'xdata', None_15977)

# Assigning a Name to a Name (line 1617):
# Getting the type of 'None' (line 1617)
None_15979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 12), 'None')
# Getting the type of 'MouseEvent'
MouseEvent_15980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MouseEvent')
# Setting the type of the member 'ydata' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MouseEvent_15980, 'ydata', None_15979)

# Assigning a Name to a Name (line 1618):
# Getting the type of 'None' (line 1618)
None_15981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 11), 'None')
# Getting the type of 'MouseEvent'
MouseEvent_15982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MouseEvent')
# Setting the type of the member 'step' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MouseEvent_15982, 'step', None_15981)
# Declaration of the 'PickEvent' class
# Getting the type of 'Event' (line 1639)
Event_15983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 16), 'Event')

class PickEvent(Event_15983, ):
    unicode_15984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, (-1)), 'unicode', u"\n    a pick event, fired when the user picks a location on the canvas\n    sufficiently close to an artist.\n\n    Attrs: all the :class:`Event` attributes plus\n\n    Attributes\n    ----------\n    mouseevent : `MouseEvent`\n        the mouse event that generated the pick\n\n    artist : `matplotlib.artist.Artist`\n        the picked artist\n\n    other\n        extra class dependent attrs -- e.g., a\n        :class:`~matplotlib.lines.Line2D` pick may define different\n        extra attributes than a\n        :class:`~matplotlib.collections.PatchCollection` pick event\n\n    Examples\n    --------\n    Usage::\n\n        ax.plot(np.rand(100), 'o', picker=5)  # 5 points tolerance\n\n        def on_pick(event):\n            line = event.artist\n            xdata, ydata = line.get_data()\n            ind = event.ind\n            print('on pick line:', np.array([xdata[ind], ydata[ind]]).T)\n\n        cid = fig.canvas.mpl_connect('pick_event', on_pick)\n\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1676)
        None_15985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 26), 'None')
        defaults = [None_15985]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1675, 4, False)
        # Assigning a type to the variable 'self' (line 1676)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PickEvent.__init__', ['name', 'canvas', 'mouseevent', 'artist', 'guiEvent'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['name', 'canvas', 'mouseevent', 'artist', 'guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1677)
        # Processing the call arguments (line 1677)
        # Getting the type of 'self' (line 1677)
        self_15988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 23), 'self', False)
        # Getting the type of 'name' (line 1677)
        name_15989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 29), 'name', False)
        # Getting the type of 'canvas' (line 1677)
        canvas_15990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 35), 'canvas', False)
        # Getting the type of 'guiEvent' (line 1677)
        guiEvent_15991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 43), 'guiEvent', False)
        # Processing the call keyword arguments (line 1677)
        kwargs_15992 = {}
        # Getting the type of 'Event' (line 1677)
        Event_15986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 8), 'Event', False)
        # Obtaining the member '__init__' of a type (line 1677)
        init___15987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 8), Event_15986, '__init__')
        # Calling __init__(args, kwargs) (line 1677)
        init___call_result_15993 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 8), init___15987, *[self_15988, name_15989, canvas_15990, guiEvent_15991], **kwargs_15992)
        
        
        # Assigning a Name to a Attribute (line 1678):
        
        # Assigning a Name to a Attribute (line 1678):
        
        # Assigning a Name to a Attribute (line 1678):
        # Getting the type of 'mouseevent' (line 1678)
        mouseevent_15994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 26), 'mouseevent')
        # Getting the type of 'self' (line 1678)
        self_15995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 8), 'self')
        # Setting the type of the member 'mouseevent' of a type (line 1678)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1678, 8), self_15995, 'mouseevent', mouseevent_15994)
        
        # Assigning a Name to a Attribute (line 1679):
        
        # Assigning a Name to a Attribute (line 1679):
        
        # Assigning a Name to a Attribute (line 1679):
        # Getting the type of 'artist' (line 1679)
        artist_15996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 22), 'artist')
        # Getting the type of 'self' (line 1679)
        self_15997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 8), 'self')
        # Setting the type of the member 'artist' of a type (line 1679)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 8), self_15997, 'artist', artist_15996)
        
        # Call to update(...): (line 1680)
        # Processing the call arguments (line 1680)
        # Getting the type of 'kwargs' (line 1680)
        kwargs_16001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 29), 'kwargs', False)
        # Processing the call keyword arguments (line 1680)
        kwargs_16002 = {}
        # Getting the type of 'self' (line 1680)
        self_15998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 8), 'self', False)
        # Obtaining the member '__dict__' of a type (line 1680)
        dict___15999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1680, 8), self_15998, '__dict__')
        # Obtaining the member 'update' of a type (line 1680)
        update_16000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1680, 8), dict___15999, 'update')
        # Calling update(args, kwargs) (line 1680)
        update_call_result_16003 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 8), update_16000, *[kwargs_16001], **kwargs_16002)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'PickEvent' (line 1639)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1639, 0), 'PickEvent', PickEvent)
# Declaration of the 'KeyEvent' class
# Getting the type of 'LocationEvent' (line 1683)
LocationEvent_16004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 15), 'LocationEvent')

class KeyEvent(LocationEvent_16004, ):
    unicode_16005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1717, (-1)), 'unicode', u'\n    A key event (key press, key release).\n\n    Attach additional attributes as defined in\n    :meth:`FigureCanvasBase.mpl_connect`.\n\n    In addition to the :class:`Event` and :class:`LocationEvent`\n    attributes, the following attributes are defined:\n\n    Attributes\n    ----------\n    key : None or str\n        the key(s) pressed. Could be **None**, a single case sensitive ascii\n        character ("g", "G", "#", etc.), a special key\n        ("control", "shift", "f1", "up", etc.) or a\n        combination of the above (e.g., "ctrl+alt+g", "ctrl+alt+G").\n\n    Notes\n    -----\n    Modifier keys will be prefixed to the pressed key and will be in the order\n    "ctrl", "alt", "super". The exception to this rule is when the pressed key\n    is itself a modifier key, therefore "ctrl+alt" and "alt+control" can both\n    be valid key values.\n\n    Examples\n    --------\n    Usage::\n\n        def on_key(event):\n            print(\'you pressed\', event.key, event.xdata, event.ydata)\n\n        cid = fig.canvas.mpl_connect(\'key_press_event\', on_key)\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_16006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1718, 44), 'int')
        int_16007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1718, 49), 'int')
        # Getting the type of 'None' (line 1718)
        None_16008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 61), 'None')
        defaults = [int_16006, int_16007, None_16008]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1718, 4, False)
        # Assigning a type to the variable 'self' (line 1719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'KeyEvent.__init__', ['name', 'canvas', 'key', 'x', 'y', 'guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['name', 'canvas', 'key', 'x', 'y', 'guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1719)
        # Processing the call arguments (line 1719)
        # Getting the type of 'self' (line 1719)
        self_16011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 31), 'self', False)
        # Getting the type of 'name' (line 1719)
        name_16012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 37), 'name', False)
        # Getting the type of 'canvas' (line 1719)
        canvas_16013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 43), 'canvas', False)
        # Getting the type of 'x' (line 1719)
        x_16014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 51), 'x', False)
        # Getting the type of 'y' (line 1719)
        y_16015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 54), 'y', False)
        # Processing the call keyword arguments (line 1719)
        # Getting the type of 'guiEvent' (line 1719)
        guiEvent_16016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 66), 'guiEvent', False)
        keyword_16017 = guiEvent_16016
        kwargs_16018 = {'guiEvent': keyword_16017}
        # Getting the type of 'LocationEvent' (line 1719)
        LocationEvent_16009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 8), 'LocationEvent', False)
        # Obtaining the member '__init__' of a type (line 1719)
        init___16010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1719, 8), LocationEvent_16009, '__init__')
        # Calling __init__(args, kwargs) (line 1719)
        init___call_result_16019 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 8), init___16010, *[self_16011, name_16012, canvas_16013, x_16014, y_16015], **kwargs_16018)
        
        
        # Assigning a Name to a Attribute (line 1720):
        
        # Assigning a Name to a Attribute (line 1720):
        
        # Assigning a Name to a Attribute (line 1720):
        # Getting the type of 'key' (line 1720)
        key_16020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 19), 'key')
        # Getting the type of 'self' (line 1720)
        self_16021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 8), 'self')
        # Setting the type of the member 'key' of a type (line 1720)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1720, 8), self_16021, 'key', key_16020)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'KeyEvent' (line 1683)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1683, 0), 'KeyEvent', KeyEvent)
# Declaration of the 'FigureCanvasBase' class

class FigureCanvasBase(object, ):
    unicode_16022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1734, (-1)), 'unicode', u'\n    The canvas the figure renders into.\n\n    Public attributes\n\n    Attributes\n    ----------\n    figure : `matplotlib.figure.Figure`\n        A high-level figure instance\n\n    ')
    
    # Assigning a List to a Name (line 1735):
    
    # Assigning a List to a Name (line 1735):
    
    # Assigning a Name to a Name (line 1753):
    
    # Assigning a Name to a Name (line 1753):
    
    # Assigning a Name to a Name (line 1754):
    
    # Assigning a Name to a Name (line 1754):
    
    # Assigning a Name to a Name (line 1756):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1769, 4, False)
        # Assigning a type to the variable 'self' (line 1770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1770, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.__init__', ['figure'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['figure'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1770):
        
        # Assigning a Name to a Attribute (line 1770):
        
        # Assigning a Name to a Attribute (line 1770):
        # Getting the type of 'True' (line 1770)
        True_16023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 32), 'True')
        # Getting the type of 'self' (line 1770)
        self_16024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 8), 'self')
        # Setting the type of the member '_is_idle_drawing' of a type (line 1770)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1770, 8), self_16024, '_is_idle_drawing', True_16023)
        
        # Assigning a Name to a Attribute (line 1771):
        
        # Assigning a Name to a Attribute (line 1771):
        
        # Assigning a Name to a Attribute (line 1771):
        # Getting the type of 'False' (line 1771)
        False_16025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 26), 'False')
        # Getting the type of 'self' (line 1771)
        self_16026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 8), 'self')
        # Setting the type of the member '_is_saving' of a type (line 1771)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 8), self_16026, '_is_saving', False_16025)
        
        # Call to set_canvas(...): (line 1772)
        # Processing the call arguments (line 1772)
        # Getting the type of 'self' (line 1772)
        self_16029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 26), 'self', False)
        # Processing the call keyword arguments (line 1772)
        kwargs_16030 = {}
        # Getting the type of 'figure' (line 1772)
        figure_16027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 8), 'figure', False)
        # Obtaining the member 'set_canvas' of a type (line 1772)
        set_canvas_16028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1772, 8), figure_16027, 'set_canvas')
        # Calling set_canvas(args, kwargs) (line 1772)
        set_canvas_call_result_16031 = invoke(stypy.reporting.localization.Localization(__file__, 1772, 8), set_canvas_16028, *[self_16029], **kwargs_16030)
        
        
        # Assigning a Name to a Attribute (line 1773):
        
        # Assigning a Name to a Attribute (line 1773):
        
        # Assigning a Name to a Attribute (line 1773):
        # Getting the type of 'figure' (line 1773)
        figure_16032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 22), 'figure')
        # Getting the type of 'self' (line 1773)
        self_16033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 8), 'self')
        # Setting the type of the member 'figure' of a type (line 1773)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 8), self_16033, 'figure', figure_16032)
        
        # Assigning a Call to a Attribute (line 1775):
        
        # Assigning a Call to a Attribute (line 1775):
        
        # Assigning a Call to a Attribute (line 1775):
        
        # Call to CallbackRegistry(...): (line 1775)
        # Processing the call keyword arguments (line 1775)
        kwargs_16036 = {}
        # Getting the type of 'cbook' (line 1775)
        cbook_16034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 25), 'cbook', False)
        # Obtaining the member 'CallbackRegistry' of a type (line 1775)
        CallbackRegistry_16035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1775, 25), cbook_16034, 'CallbackRegistry')
        # Calling CallbackRegistry(args, kwargs) (line 1775)
        CallbackRegistry_call_result_16037 = invoke(stypy.reporting.localization.Localization(__file__, 1775, 25), CallbackRegistry_16035, *[], **kwargs_16036)
        
        # Getting the type of 'self' (line 1775)
        self_16038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 8), 'self')
        # Setting the type of the member 'callbacks' of a type (line 1775)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1775, 8), self_16038, 'callbacks', CallbackRegistry_call_result_16037)
        
        # Assigning a Call to a Attribute (line 1776):
        
        # Assigning a Call to a Attribute (line 1776):
        
        # Assigning a Call to a Attribute (line 1776):
        
        # Call to LockDraw(...): (line 1776)
        # Processing the call keyword arguments (line 1776)
        kwargs_16041 = {}
        # Getting the type of 'widgets' (line 1776)
        widgets_16039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 26), 'widgets', False)
        # Obtaining the member 'LockDraw' of a type (line 1776)
        LockDraw_16040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 26), widgets_16039, 'LockDraw')
        # Calling LockDraw(args, kwargs) (line 1776)
        LockDraw_call_result_16042 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 26), LockDraw_16040, *[], **kwargs_16041)
        
        # Getting the type of 'self' (line 1776)
        self_16043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 8), 'self')
        # Setting the type of the member 'widgetlock' of a type (line 1776)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 8), self_16043, 'widgetlock', LockDraw_call_result_16042)
        
        # Assigning a Name to a Attribute (line 1777):
        
        # Assigning a Name to a Attribute (line 1777):
        
        # Assigning a Name to a Attribute (line 1777):
        # Getting the type of 'None' (line 1777)
        None_16044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 23), 'None')
        # Getting the type of 'self' (line 1777)
        self_16045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 8), 'self')
        # Setting the type of the member '_button' of a type (line 1777)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1777, 8), self_16045, '_button', None_16044)
        
        # Assigning a Name to a Attribute (line 1778):
        
        # Assigning a Name to a Attribute (line 1778):
        
        # Assigning a Name to a Attribute (line 1778):
        # Getting the type of 'None' (line 1778)
        None_16046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 20), 'None')
        # Getting the type of 'self' (line 1778)
        self_16047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'self')
        # Setting the type of the member '_key' of a type (line 1778)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 8), self_16047, '_key', None_16046)
        
        # Assigning a Tuple to a Tuple (line 1779):
        
        # Assigning a Name to a Name (line 1779):
        
        # Assigning a Name to a Name (line 1779):
        # Getting the type of 'None' (line 1779)
        None_16048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 35), 'None')
        # Assigning a type to the variable 'tuple_assignment_13728' (line 1779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'tuple_assignment_13728', None_16048)
        
        # Assigning a Name to a Name (line 1779):
        
        # Assigning a Name to a Name (line 1779):
        # Getting the type of 'None' (line 1779)
        None_16049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 41), 'None')
        # Assigning a type to the variable 'tuple_assignment_13729' (line 1779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'tuple_assignment_13729', None_16049)
        
        # Assigning a Name to a Attribute (line 1779):
        
        # Assigning a Name to a Attribute (line 1779):
        # Getting the type of 'tuple_assignment_13728' (line 1779)
        tuple_assignment_13728_16050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'tuple_assignment_13728')
        # Getting the type of 'self' (line 1779)
        self_16051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'self')
        # Setting the type of the member '_lastx' of a type (line 1779)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1779, 8), self_16051, '_lastx', tuple_assignment_13728_16050)
        
        # Assigning a Name to a Attribute (line 1779):
        
        # Assigning a Name to a Attribute (line 1779):
        # Getting the type of 'tuple_assignment_13729' (line 1779)
        tuple_assignment_13729_16052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'tuple_assignment_13729')
        # Getting the type of 'self' (line 1779)
        self_16053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 21), 'self')
        # Setting the type of the member '_lasty' of a type (line 1779)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1779, 21), self_16053, '_lasty', tuple_assignment_13729_16052)
        
        # Assigning a Call to a Attribute (line 1780):
        
        # Assigning a Call to a Attribute (line 1780):
        
        # Assigning a Call to a Attribute (line 1780):
        
        # Call to mpl_connect(...): (line 1780)
        # Processing the call arguments (line 1780)
        unicode_16056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1780, 47), 'unicode', u'button_press_event')
        # Getting the type of 'self' (line 1780)
        self_16057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 69), 'self', False)
        # Obtaining the member 'pick' of a type (line 1780)
        pick_16058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1780, 69), self_16057, 'pick')
        # Processing the call keyword arguments (line 1780)
        kwargs_16059 = {}
        # Getting the type of 'self' (line 1780)
        self_16054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 30), 'self', False)
        # Obtaining the member 'mpl_connect' of a type (line 1780)
        mpl_connect_16055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1780, 30), self_16054, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1780)
        mpl_connect_call_result_16060 = invoke(stypy.reporting.localization.Localization(__file__, 1780, 30), mpl_connect_16055, *[unicode_16056, pick_16058], **kwargs_16059)
        
        # Getting the type of 'self' (line 1780)
        self_16061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 8), 'self')
        # Setting the type of the member 'button_pick_id' of a type (line 1780)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1780, 8), self_16061, 'button_pick_id', mpl_connect_call_result_16060)
        
        # Assigning a Call to a Attribute (line 1781):
        
        # Assigning a Call to a Attribute (line 1781):
        
        # Assigning a Call to a Attribute (line 1781):
        
        # Call to mpl_connect(...): (line 1781)
        # Processing the call arguments (line 1781)
        unicode_16064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1781, 47), 'unicode', u'scroll_event')
        # Getting the type of 'self' (line 1781)
        self_16065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 63), 'self', False)
        # Obtaining the member 'pick' of a type (line 1781)
        pick_16066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 63), self_16065, 'pick')
        # Processing the call keyword arguments (line 1781)
        kwargs_16067 = {}
        # Getting the type of 'self' (line 1781)
        self_16062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 30), 'self', False)
        # Obtaining the member 'mpl_connect' of a type (line 1781)
        mpl_connect_16063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 30), self_16062, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1781)
        mpl_connect_call_result_16068 = invoke(stypy.reporting.localization.Localization(__file__, 1781, 30), mpl_connect_16063, *[unicode_16064, pick_16066], **kwargs_16067)
        
        # Getting the type of 'self' (line 1781)
        self_16069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 8), 'self')
        # Setting the type of the member 'scroll_pick_id' of a type (line 1781)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 8), self_16069, 'scroll_pick_id', mpl_connect_call_result_16068)
        
        # Assigning a Name to a Attribute (line 1782):
        
        # Assigning a Name to a Attribute (line 1782):
        
        # Assigning a Name to a Attribute (line 1782):
        # Getting the type of 'None' (line 1782)
        None_16070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 29), 'None')
        # Getting the type of 'self' (line 1782)
        self_16071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 8), 'self')
        # Setting the type of the member 'mouse_grabber' of a type (line 1782)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 8), self_16071, 'mouse_grabber', None_16070)
        
        # Assigning a Name to a Attribute (line 1783):
        
        # Assigning a Name to a Attribute (line 1783):
        
        # Assigning a Name to a Attribute (line 1783):
        # Getting the type of 'None' (line 1783)
        None_16072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 23), 'None')
        # Getting the type of 'self' (line 1783)
        self_16073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 8), 'self')
        # Setting the type of the member 'toolbar' of a type (line 1783)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1783, 8), self_16073, 'toolbar', None_16072)
        
        # Assigning a Name to a Attribute (line 1784):
        
        # Assigning a Name to a Attribute (line 1784):
        
        # Assigning a Name to a Attribute (line 1784):
        # Getting the type of 'False' (line 1784)
        False_16074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 32), 'False')
        # Getting the type of 'self' (line 1784)
        self_16075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 8), 'self')
        # Setting the type of the member '_is_idle_drawing' of a type (line 1784)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 8), self_16075, '_is_idle_drawing', False_16074)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _idle_draw_cntx(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_idle_draw_cntx'
        module_type_store = module_type_store.open_function_context('_idle_draw_cntx', 1786, 4, False)
        # Assigning a type to the variable 'self' (line 1787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase._idle_draw_cntx.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase._idle_draw_cntx.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase._idle_draw_cntx.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase._idle_draw_cntx.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase._idle_draw_cntx')
        FigureCanvasBase._idle_draw_cntx.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasBase._idle_draw_cntx.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase._idle_draw_cntx.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase._idle_draw_cntx.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase._idle_draw_cntx.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase._idle_draw_cntx.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase._idle_draw_cntx.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase._idle_draw_cntx', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_idle_draw_cntx', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_idle_draw_cntx(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1788):
        
        # Assigning a Name to a Attribute (line 1788):
        
        # Assigning a Name to a Attribute (line 1788):
        # Getting the type of 'True' (line 1788)
        True_16076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 32), 'True')
        # Getting the type of 'self' (line 1788)
        self_16077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 8), 'self')
        # Setting the type of the member '_is_idle_drawing' of a type (line 1788)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1788, 8), self_16077, '_is_idle_drawing', True_16076)
        # Creating a generator
        GeneratorType_16078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1789, 8), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1789, 8), GeneratorType_16078, None)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 8), 'stypy_return_type', GeneratorType_16078)
        
        # Assigning a Name to a Attribute (line 1790):
        
        # Assigning a Name to a Attribute (line 1790):
        
        # Assigning a Name to a Attribute (line 1790):
        # Getting the type of 'False' (line 1790)
        False_16079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 32), 'False')
        # Getting the type of 'self' (line 1790)
        self_16080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 8), 'self')
        # Setting the type of the member '_is_idle_drawing' of a type (line 1790)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1790, 8), self_16080, '_is_idle_drawing', False_16079)
        
        # ################# End of '_idle_draw_cntx(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_idle_draw_cntx' in the type store
        # Getting the type of 'stypy_return_type' (line 1786)
        stypy_return_type_16081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16081)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_idle_draw_cntx'
        return stypy_return_type_16081


    @norecursion
    def is_saving(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'is_saving'
        module_type_store = module_type_store.open_function_context('is_saving', 1792, 4, False)
        # Assigning a type to the variable 'self' (line 1793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.is_saving.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.is_saving.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.is_saving.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.is_saving.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.is_saving')
        FigureCanvasBase.is_saving.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasBase.is_saving.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.is_saving.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.is_saving.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.is_saving.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.is_saving.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.is_saving.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.is_saving', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_saving', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_saving(...)' code ##################

        unicode_16082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1796, (-1)), 'unicode', u'\n        Returns whether the renderer is in the process of saving\n        to a file, rather than rendering for an on-screen buffer.\n        ')
        # Getting the type of 'self' (line 1797)
        self_16083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 15), 'self')
        # Obtaining the member '_is_saving' of a type (line 1797)
        _is_saving_16084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1797, 15), self_16083, '_is_saving')
        # Assigning a type to the variable 'stypy_return_type' (line 1797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1797, 8), 'stypy_return_type', _is_saving_16084)
        
        # ################# End of 'is_saving(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_saving' in the type store
        # Getting the type of 'stypy_return_type' (line 1792)
        stypy_return_type_16085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16085)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_saving'
        return stypy_return_type_16085


    @norecursion
    def onRemove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'onRemove'
        module_type_store = module_type_store.open_function_context('onRemove', 1799, 4, False)
        # Assigning a type to the variable 'self' (line 1800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.onRemove.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.onRemove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.onRemove.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.onRemove.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.onRemove')
        FigureCanvasBase.onRemove.__dict__.__setitem__('stypy_param_names_list', ['ev'])
        FigureCanvasBase.onRemove.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.onRemove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.onRemove.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.onRemove.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.onRemove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.onRemove.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.onRemove', ['ev'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'onRemove', localization, ['ev'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'onRemove(...)' code ##################

        unicode_16086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, (-1)), 'unicode', u"\n        Mouse event processor which removes the top artist\n        under the cursor.  Connect this to the 'mouse_press_event'\n        using::\n\n            canvas.mpl_connect('mouse_press_event',canvas.onRemove)\n        ")
        
        # Assigning a Call to a Name (line 1808):
        
        # Assigning a Call to a Name (line 1808):
        
        # Assigning a Call to a Name (line 1808):
        
        # Call to sorted(...): (line 1808)
        # Processing the call arguments (line 1808)
        
        # Call to hitlist(...): (line 1808)
        # Processing the call arguments (line 1808)
        # Getting the type of 'ev' (line 1808)
        ev_16091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 43), 'ev', False)
        # Processing the call keyword arguments (line 1808)
        kwargs_16092 = {}
        # Getting the type of 'self' (line 1808)
        self_16088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 23), 'self', False)
        # Obtaining the member 'figure' of a type (line 1808)
        figure_16089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 23), self_16088, 'figure')
        # Obtaining the member 'hitlist' of a type (line 1808)
        hitlist_16090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 23), figure_16089, 'hitlist')
        # Calling hitlist(args, kwargs) (line 1808)
        hitlist_call_result_16093 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 23), hitlist_16090, *[ev_16091], **kwargs_16092)
        
        # Processing the call keyword arguments (line 1808)

        @norecursion
        def _stypy_temp_lambda_5(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_5'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_5', 1808, 52, True)
            # Passed parameters checking function
            _stypy_temp_lambda_5.stypy_localization = localization
            _stypy_temp_lambda_5.stypy_type_of_self = None
            _stypy_temp_lambda_5.stypy_type_store = module_type_store
            _stypy_temp_lambda_5.stypy_function_name = '_stypy_temp_lambda_5'
            _stypy_temp_lambda_5.stypy_param_names_list = ['x']
            _stypy_temp_lambda_5.stypy_varargs_param_name = None
            _stypy_temp_lambda_5.stypy_kwargs_param_name = None
            _stypy_temp_lambda_5.stypy_call_defaults = defaults
            _stypy_temp_lambda_5.stypy_call_varargs = varargs
            _stypy_temp_lambda_5.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_5', ['x'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_5', ['x'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'x' (line 1808)
            x_16094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 62), 'x', False)
            # Obtaining the member 'zorder' of a type (line 1808)
            zorder_16095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 62), x_16094, 'zorder')
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 1808)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1808, 52), 'stypy_return_type', zorder_16095)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_5' in the type store
            # Getting the type of 'stypy_return_type' (line 1808)
            stypy_return_type_16096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 52), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_16096)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_5'
            return stypy_return_type_16096

        # Assigning a type to the variable '_stypy_temp_lambda_5' (line 1808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1808, 52), '_stypy_temp_lambda_5', _stypy_temp_lambda_5)
        # Getting the type of '_stypy_temp_lambda_5' (line 1808)
        _stypy_temp_lambda_5_16097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 52), '_stypy_temp_lambda_5')
        keyword_16098 = _stypy_temp_lambda_5_16097
        kwargs_16099 = {'key': keyword_16098}
        # Getting the type of 'sorted' (line 1808)
        sorted_16087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 16), 'sorted', False)
        # Calling sorted(args, kwargs) (line 1808)
        sorted_call_result_16100 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 16), sorted_16087, *[hitlist_call_result_16093], **kwargs_16099)
        
        # Assigning a type to the variable 'under' (line 1808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1808, 8), 'under', sorted_call_result_16100)
        
        # Assigning a Name to a Name (line 1809):
        
        # Assigning a Name to a Name (line 1809):
        
        # Assigning a Name to a Name (line 1809):
        # Getting the type of 'None' (line 1809)
        None_16101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 12), 'None')
        # Assigning a type to the variable 'h' (line 1809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 8), 'h', None_16101)
        
        # Getting the type of 'under' (line 1810)
        under_16102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 11), 'under')
        # Testing the type of an if condition (line 1810)
        if_condition_16103 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1810, 8), under_16102)
        # Assigning a type to the variable 'if_condition_16103' (line 1810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1810, 8), 'if_condition_16103', if_condition_16103)
        # SSA begins for if statement (line 1810)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1811):
        
        # Assigning a Subscript to a Name (line 1811):
        
        # Assigning a Subscript to a Name (line 1811):
        
        # Obtaining the type of the subscript
        int_16104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 22), 'int')
        # Getting the type of 'under' (line 1811)
        under_16105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 16), 'under')
        # Obtaining the member '__getitem__' of a type (line 1811)
        getitem___16106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 16), under_16105, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1811)
        subscript_call_result_16107 = invoke(stypy.reporting.localization.Localization(__file__, 1811, 16), getitem___16106, int_16104)
        
        # Assigning a type to the variable 'h' (line 1811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 12), 'h', subscript_call_result_16107)
        # SSA join for if statement (line 1810)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'h' (line 1815)
        h_16108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 14), 'h')
        # Testing the type of an if condition (line 1815)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1815, 8), h_16108)
        # SSA begins for while statement (line 1815)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        
        # Call to remove(...): (line 1816)
        # Processing the call keyword arguments (line 1816)
        kwargs_16111 = {}
        # Getting the type of 'h' (line 1816)
        h_16109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 15), 'h', False)
        # Obtaining the member 'remove' of a type (line 1816)
        remove_16110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1816, 15), h_16109, 'remove')
        # Calling remove(args, kwargs) (line 1816)
        remove_call_result_16112 = invoke(stypy.reporting.localization.Localization(__file__, 1816, 15), remove_16110, *[], **kwargs_16111)
        
        # Testing the type of an if condition (line 1816)
        if_condition_16113 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1816, 12), remove_call_result_16112)
        # Assigning a type to the variable 'if_condition_16113' (line 1816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 12), 'if_condition_16113', if_condition_16113)
        # SSA begins for if statement (line 1816)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw_idle(...): (line 1817)
        # Processing the call keyword arguments (line 1817)
        kwargs_16116 = {}
        # Getting the type of 'self' (line 1817)
        self_16114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 16), 'self', False)
        # Obtaining the member 'draw_idle' of a type (line 1817)
        draw_idle_16115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 16), self_16114, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 1817)
        draw_idle_call_result_16117 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 16), draw_idle_16115, *[], **kwargs_16116)
        
        # SSA join for if statement (line 1816)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1819):
        
        # Assigning a Name to a Name (line 1819):
        
        # Assigning a Name to a Name (line 1819):
        # Getting the type of 'None' (line 1819)
        None_16118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 21), 'None')
        # Assigning a type to the variable 'parent' (line 1819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 12), 'parent', None_16118)
        
        # Getting the type of 'under' (line 1820)
        under_16119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 21), 'under')
        # Testing the type of a for loop iterable (line 1820)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1820, 12), under_16119)
        # Getting the type of the for loop variable (line 1820)
        for_loop_var_16120 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1820, 12), under_16119)
        # Assigning a type to the variable 'p' (line 1820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 12), 'p', for_loop_var_16120)
        # SSA begins for a for statement (line 1820)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'h' (line 1821)
        h_16121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 19), 'h')
        
        # Call to get_children(...): (line 1821)
        # Processing the call keyword arguments (line 1821)
        kwargs_16124 = {}
        # Getting the type of 'p' (line 1821)
        p_16122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 24), 'p', False)
        # Obtaining the member 'get_children' of a type (line 1821)
        get_children_16123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1821, 24), p_16122, 'get_children')
        # Calling get_children(args, kwargs) (line 1821)
        get_children_call_result_16125 = invoke(stypy.reporting.localization.Localization(__file__, 1821, 24), get_children_16123, *[], **kwargs_16124)
        
        # Applying the binary operator 'in' (line 1821)
        result_contains_16126 = python_operator(stypy.reporting.localization.Localization(__file__, 1821, 19), 'in', h_16121, get_children_call_result_16125)
        
        # Testing the type of an if condition (line 1821)
        if_condition_16127 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1821, 16), result_contains_16126)
        # Assigning a type to the variable 'if_condition_16127' (line 1821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1821, 16), 'if_condition_16127', if_condition_16127)
        # SSA begins for if statement (line 1821)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1822):
        
        # Assigning a Name to a Name (line 1822):
        
        # Assigning a Name to a Name (line 1822):
        # Getting the type of 'p' (line 1822)
        p_16128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 29), 'p')
        # Assigning a type to the variable 'parent' (line 1822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 20), 'parent', p_16128)
        # SSA join for if statement (line 1821)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1824):
        
        # Assigning a Name to a Name (line 1824):
        
        # Assigning a Name to a Name (line 1824):
        # Getting the type of 'parent' (line 1824)
        parent_16129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 16), 'parent')
        # Assigning a type to the variable 'h' (line 1824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1824, 12), 'h', parent_16129)
        # SSA join for while statement (line 1815)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'onRemove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'onRemove' in the type store
        # Getting the type of 'stypy_return_type' (line 1799)
        stypy_return_type_16130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16130)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'onRemove'
        return stypy_return_type_16130


    @norecursion
    def pick(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pick'
        module_type_store = module_type_store.open_function_context('pick', 1826, 4, False)
        # Assigning a type to the variable 'self' (line 1827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.pick.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.pick.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.pick.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.pick.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.pick')
        FigureCanvasBase.pick.__dict__.__setitem__('stypy_param_names_list', ['mouseevent'])
        FigureCanvasBase.pick.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.pick.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.pick.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.pick.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.pick.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.pick.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.pick', ['mouseevent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pick', localization, ['mouseevent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pick(...)' code ##################

        
        
        
        # Call to locked(...): (line 1827)
        # Processing the call keyword arguments (line 1827)
        kwargs_16134 = {}
        # Getting the type of 'self' (line 1827)
        self_16131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 15), 'self', False)
        # Obtaining the member 'widgetlock' of a type (line 1827)
        widgetlock_16132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 15), self_16131, 'widgetlock')
        # Obtaining the member 'locked' of a type (line 1827)
        locked_16133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 15), widgetlock_16132, 'locked')
        # Calling locked(args, kwargs) (line 1827)
        locked_call_result_16135 = invoke(stypy.reporting.localization.Localization(__file__, 1827, 15), locked_16133, *[], **kwargs_16134)
        
        # Applying the 'not' unary operator (line 1827)
        result_not__16136 = python_operator(stypy.reporting.localization.Localization(__file__, 1827, 11), 'not', locked_call_result_16135)
        
        # Testing the type of an if condition (line 1827)
        if_condition_16137 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1827, 8), result_not__16136)
        # Assigning a type to the variable 'if_condition_16137' (line 1827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 8), 'if_condition_16137', if_condition_16137)
        # SSA begins for if statement (line 1827)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to pick(...): (line 1828)
        # Processing the call arguments (line 1828)
        # Getting the type of 'mouseevent' (line 1828)
        mouseevent_16141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 29), 'mouseevent', False)
        # Processing the call keyword arguments (line 1828)
        kwargs_16142 = {}
        # Getting the type of 'self' (line 1828)
        self_16138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 12), 'self', False)
        # Obtaining the member 'figure' of a type (line 1828)
        figure_16139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 12), self_16138, 'figure')
        # Obtaining the member 'pick' of a type (line 1828)
        pick_16140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 12), figure_16139, 'pick')
        # Calling pick(args, kwargs) (line 1828)
        pick_call_result_16143 = invoke(stypy.reporting.localization.Localization(__file__, 1828, 12), pick_16140, *[mouseevent_16141], **kwargs_16142)
        
        # SSA join for if statement (line 1827)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'pick(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pick' in the type store
        # Getting the type of 'stypy_return_type' (line 1826)
        stypy_return_type_16144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16144)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pick'
        return stypy_return_type_16144


    @norecursion
    def blit(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1830)
        None_16145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 24), 'None')
        defaults = [None_16145]
        # Create a new context for function 'blit'
        module_type_store = module_type_store.open_function_context('blit', 1830, 4, False)
        # Assigning a type to the variable 'self' (line 1831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1831, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.blit.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.blit.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.blit.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.blit.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.blit')
        FigureCanvasBase.blit.__dict__.__setitem__('stypy_param_names_list', ['bbox'])
        FigureCanvasBase.blit.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.blit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.blit.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.blit.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.blit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.blit.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.blit', ['bbox'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'blit', localization, ['bbox'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'blit(...)' code ##################

        unicode_16146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1831, 8), 'unicode', u'Blit the canvas in bbox (default entire canvas).')
        
        # ################# End of 'blit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'blit' in the type store
        # Getting the type of 'stypy_return_type' (line 1830)
        stypy_return_type_16147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16147)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'blit'
        return stypy_return_type_16147


    @norecursion
    def resize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'resize'
        module_type_store = module_type_store.open_function_context('resize', 1833, 4, False)
        # Assigning a type to the variable 'self' (line 1834)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1834, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.resize.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.resize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.resize.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.resize.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.resize')
        FigureCanvasBase.resize.__dict__.__setitem__('stypy_param_names_list', ['w', 'h'])
        FigureCanvasBase.resize.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.resize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.resize.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.resize.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.resize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.resize.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.resize', ['w', 'h'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'resize', localization, ['w', 'h'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'resize(...)' code ##################

        unicode_16148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1834, 8), 'unicode', u'Set the canvas size in pixels.')
        
        # ################# End of 'resize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'resize' in the type store
        # Getting the type of 'stypy_return_type' (line 1833)
        stypy_return_type_16149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16149)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'resize'
        return stypy_return_type_16149


    @norecursion
    def draw_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_event'
        module_type_store = module_type_store.open_function_context('draw_event', 1836, 4, False)
        # Assigning a type to the variable 'self' (line 1837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1837, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.draw_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.draw_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.draw_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.draw_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.draw_event')
        FigureCanvasBase.draw_event.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        FigureCanvasBase.draw_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.draw_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.draw_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.draw_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.draw_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.draw_event.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.draw_event', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_event', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_event(...)' code ##################

        unicode_16150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 8), 'unicode', u'Pass a `DrawEvent` to all functions connected to ``draw_event``.')
        
        # Assigning a Str to a Name (line 1838):
        
        # Assigning a Str to a Name (line 1838):
        
        # Assigning a Str to a Name (line 1838):
        unicode_16151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1838, 12), 'unicode', u'draw_event')
        # Assigning a type to the variable 's' (line 1838)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1838, 8), 's', unicode_16151)
        
        # Assigning a Call to a Name (line 1839):
        
        # Assigning a Call to a Name (line 1839):
        
        # Assigning a Call to a Name (line 1839):
        
        # Call to DrawEvent(...): (line 1839)
        # Processing the call arguments (line 1839)
        # Getting the type of 's' (line 1839)
        s_16153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 26), 's', False)
        # Getting the type of 'self' (line 1839)
        self_16154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 29), 'self', False)
        # Getting the type of 'renderer' (line 1839)
        renderer_16155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 35), 'renderer', False)
        # Processing the call keyword arguments (line 1839)
        kwargs_16156 = {}
        # Getting the type of 'DrawEvent' (line 1839)
        DrawEvent_16152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 16), 'DrawEvent', False)
        # Calling DrawEvent(args, kwargs) (line 1839)
        DrawEvent_call_result_16157 = invoke(stypy.reporting.localization.Localization(__file__, 1839, 16), DrawEvent_16152, *[s_16153, self_16154, renderer_16155], **kwargs_16156)
        
        # Assigning a type to the variable 'event' (line 1839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 8), 'event', DrawEvent_call_result_16157)
        
        # Call to process(...): (line 1840)
        # Processing the call arguments (line 1840)
        # Getting the type of 's' (line 1840)
        s_16161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 31), 's', False)
        # Getting the type of 'event' (line 1840)
        event_16162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 34), 'event', False)
        # Processing the call keyword arguments (line 1840)
        kwargs_16163 = {}
        # Getting the type of 'self' (line 1840)
        self_16158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1840)
        callbacks_16159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1840, 8), self_16158, 'callbacks')
        # Obtaining the member 'process' of a type (line 1840)
        process_16160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1840, 8), callbacks_16159, 'process')
        # Calling process(args, kwargs) (line 1840)
        process_call_result_16164 = invoke(stypy.reporting.localization.Localization(__file__, 1840, 8), process_16160, *[s_16161, event_16162], **kwargs_16163)
        
        
        # ################# End of 'draw_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_event' in the type store
        # Getting the type of 'stypy_return_type' (line 1836)
        stypy_return_type_16165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16165)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_event'
        return stypy_return_type_16165


    @norecursion
    def resize_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'resize_event'
        module_type_store = module_type_store.open_function_context('resize_event', 1842, 4, False)
        # Assigning a type to the variable 'self' (line 1843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1843, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.resize_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.resize_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.resize_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.resize_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.resize_event')
        FigureCanvasBase.resize_event.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasBase.resize_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.resize_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.resize_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.resize_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.resize_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.resize_event.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.resize_event', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'resize_event', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'resize_event(...)' code ##################

        unicode_16166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1844, (-1)), 'unicode', u'Pass a `ResizeEvent` to all functions connected to ``resize_event``.\n        ')
        
        # Assigning a Str to a Name (line 1845):
        
        # Assigning a Str to a Name (line 1845):
        
        # Assigning a Str to a Name (line 1845):
        unicode_16167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 12), 'unicode', u'resize_event')
        # Assigning a type to the variable 's' (line 1845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1845, 8), 's', unicode_16167)
        
        # Assigning a Call to a Name (line 1846):
        
        # Assigning a Call to a Name (line 1846):
        
        # Assigning a Call to a Name (line 1846):
        
        # Call to ResizeEvent(...): (line 1846)
        # Processing the call arguments (line 1846)
        # Getting the type of 's' (line 1846)
        s_16169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 28), 's', False)
        # Getting the type of 'self' (line 1846)
        self_16170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 31), 'self', False)
        # Processing the call keyword arguments (line 1846)
        kwargs_16171 = {}
        # Getting the type of 'ResizeEvent' (line 1846)
        ResizeEvent_16168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 16), 'ResizeEvent', False)
        # Calling ResizeEvent(args, kwargs) (line 1846)
        ResizeEvent_call_result_16172 = invoke(stypy.reporting.localization.Localization(__file__, 1846, 16), ResizeEvent_16168, *[s_16169, self_16170], **kwargs_16171)
        
        # Assigning a type to the variable 'event' (line 1846)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1846, 8), 'event', ResizeEvent_call_result_16172)
        
        # Call to process(...): (line 1847)
        # Processing the call arguments (line 1847)
        # Getting the type of 's' (line 1847)
        s_16176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 31), 's', False)
        # Getting the type of 'event' (line 1847)
        event_16177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 34), 'event', False)
        # Processing the call keyword arguments (line 1847)
        kwargs_16178 = {}
        # Getting the type of 'self' (line 1847)
        self_16173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1847)
        callbacks_16174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1847, 8), self_16173, 'callbacks')
        # Obtaining the member 'process' of a type (line 1847)
        process_16175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1847, 8), callbacks_16174, 'process')
        # Calling process(args, kwargs) (line 1847)
        process_call_result_16179 = invoke(stypy.reporting.localization.Localization(__file__, 1847, 8), process_16175, *[s_16176, event_16177], **kwargs_16178)
        
        
        # Call to draw_idle(...): (line 1848)
        # Processing the call keyword arguments (line 1848)
        kwargs_16182 = {}
        # Getting the type of 'self' (line 1848)
        self_16180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 8), 'self', False)
        # Obtaining the member 'draw_idle' of a type (line 1848)
        draw_idle_16181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1848, 8), self_16180, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 1848)
        draw_idle_call_result_16183 = invoke(stypy.reporting.localization.Localization(__file__, 1848, 8), draw_idle_16181, *[], **kwargs_16182)
        
        
        # ################# End of 'resize_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'resize_event' in the type store
        # Getting the type of 'stypy_return_type' (line 1842)
        stypy_return_type_16184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16184)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'resize_event'
        return stypy_return_type_16184


    @norecursion
    def close_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1850)
        None_16185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 35), 'None')
        defaults = [None_16185]
        # Create a new context for function 'close_event'
        module_type_store = module_type_store.open_function_context('close_event', 1850, 4, False)
        # Assigning a type to the variable 'self' (line 1851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.close_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.close_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.close_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.close_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.close_event')
        FigureCanvasBase.close_event.__dict__.__setitem__('stypy_param_names_list', ['guiEvent'])
        FigureCanvasBase.close_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.close_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.close_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.close_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.close_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.close_event.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.close_event', ['guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'close_event', localization, ['guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'close_event(...)' code ##################

        unicode_16186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1852, (-1)), 'unicode', u'Pass a `CloseEvent` to all functions connected to ``close_event``.\n        ')
        
        # Assigning a Str to a Name (line 1853):
        
        # Assigning a Str to a Name (line 1853):
        
        # Assigning a Str to a Name (line 1853):
        unicode_16187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1853, 12), 'unicode', u'close_event')
        # Assigning a type to the variable 's' (line 1853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1853, 8), 's', unicode_16187)
        
        
        # SSA begins for try-except statement (line 1854)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1855):
        
        # Assigning a Call to a Name (line 1855):
        
        # Assigning a Call to a Name (line 1855):
        
        # Call to CloseEvent(...): (line 1855)
        # Processing the call arguments (line 1855)
        # Getting the type of 's' (line 1855)
        s_16189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 31), 's', False)
        # Getting the type of 'self' (line 1855)
        self_16190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 34), 'self', False)
        # Processing the call keyword arguments (line 1855)
        # Getting the type of 'guiEvent' (line 1855)
        guiEvent_16191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 49), 'guiEvent', False)
        keyword_16192 = guiEvent_16191
        kwargs_16193 = {'guiEvent': keyword_16192}
        # Getting the type of 'CloseEvent' (line 1855)
        CloseEvent_16188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 20), 'CloseEvent', False)
        # Calling CloseEvent(args, kwargs) (line 1855)
        CloseEvent_call_result_16194 = invoke(stypy.reporting.localization.Localization(__file__, 1855, 20), CloseEvent_16188, *[s_16189, self_16190], **kwargs_16193)
        
        # Assigning a type to the variable 'event' (line 1855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1855, 12), 'event', CloseEvent_call_result_16194)
        
        # Call to process(...): (line 1856)
        # Processing the call arguments (line 1856)
        # Getting the type of 's' (line 1856)
        s_16198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 35), 's', False)
        # Getting the type of 'event' (line 1856)
        event_16199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 38), 'event', False)
        # Processing the call keyword arguments (line 1856)
        kwargs_16200 = {}
        # Getting the type of 'self' (line 1856)
        self_16195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 12), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1856)
        callbacks_16196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 12), self_16195, 'callbacks')
        # Obtaining the member 'process' of a type (line 1856)
        process_16197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 12), callbacks_16196, 'process')
        # Calling process(args, kwargs) (line 1856)
        process_call_result_16201 = invoke(stypy.reporting.localization.Localization(__file__, 1856, 12), process_16197, *[s_16198, event_16199], **kwargs_16200)
        
        # SSA branch for the except part of a try statement (line 1854)
        # SSA branch for the except 'Tuple' branch of a try statement (line 1854)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1854)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'close_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'close_event' in the type store
        # Getting the type of 'stypy_return_type' (line 1850)
        stypy_return_type_16202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16202)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'close_event'
        return stypy_return_type_16202


    @norecursion
    def key_press_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1865)
        None_16203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 44), 'None')
        defaults = [None_16203]
        # Create a new context for function 'key_press_event'
        module_type_store = module_type_store.open_function_context('key_press_event', 1865, 4, False)
        # Assigning a type to the variable 'self' (line 1866)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.key_press_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.key_press_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.key_press_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.key_press_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.key_press_event')
        FigureCanvasBase.key_press_event.__dict__.__setitem__('stypy_param_names_list', ['key', 'guiEvent'])
        FigureCanvasBase.key_press_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.key_press_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.key_press_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.key_press_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.key_press_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.key_press_event.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.key_press_event', ['key', 'guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'key_press_event', localization, ['key', 'guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'key_press_event(...)' code ##################

        unicode_16204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, (-1)), 'unicode', u'Pass a `KeyEvent` to all functions connected to ``key_press_event``.\n        ')
        
        # Assigning a Name to a Attribute (line 1868):
        
        # Assigning a Name to a Attribute (line 1868):
        
        # Assigning a Name to a Attribute (line 1868):
        # Getting the type of 'key' (line 1868)
        key_16205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 20), 'key')
        # Getting the type of 'self' (line 1868)
        self_16206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 8), 'self')
        # Setting the type of the member '_key' of a type (line 1868)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 8), self_16206, '_key', key_16205)
        
        # Assigning a Str to a Name (line 1869):
        
        # Assigning a Str to a Name (line 1869):
        
        # Assigning a Str to a Name (line 1869):
        unicode_16207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 12), 'unicode', u'key_press_event')
        # Assigning a type to the variable 's' (line 1869)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1869, 8), 's', unicode_16207)
        
        # Assigning a Call to a Name (line 1870):
        
        # Assigning a Call to a Name (line 1870):
        
        # Assigning a Call to a Name (line 1870):
        
        # Call to KeyEvent(...): (line 1870)
        # Processing the call arguments (line 1870)
        # Getting the type of 's' (line 1871)
        s_16209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 's', False)
        # Getting the type of 'self' (line 1871)
        self_16210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 15), 'self', False)
        # Getting the type of 'key' (line 1871)
        key_16211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 21), 'key', False)
        # Getting the type of 'self' (line 1871)
        self_16212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 26), 'self', False)
        # Obtaining the member '_lastx' of a type (line 1871)
        _lastx_16213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 26), self_16212, '_lastx')
        # Getting the type of 'self' (line 1871)
        self_16214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 39), 'self', False)
        # Obtaining the member '_lasty' of a type (line 1871)
        _lasty_16215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 39), self_16214, '_lasty')
        # Processing the call keyword arguments (line 1870)
        # Getting the type of 'guiEvent' (line 1871)
        guiEvent_16216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 61), 'guiEvent', False)
        keyword_16217 = guiEvent_16216
        kwargs_16218 = {'guiEvent': keyword_16217}
        # Getting the type of 'KeyEvent' (line 1870)
        KeyEvent_16208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 16), 'KeyEvent', False)
        # Calling KeyEvent(args, kwargs) (line 1870)
        KeyEvent_call_result_16219 = invoke(stypy.reporting.localization.Localization(__file__, 1870, 16), KeyEvent_16208, *[s_16209, self_16210, key_16211, _lastx_16213, _lasty_16215], **kwargs_16218)
        
        # Assigning a type to the variable 'event' (line 1870)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1870, 8), 'event', KeyEvent_call_result_16219)
        
        # Call to process(...): (line 1872)
        # Processing the call arguments (line 1872)
        # Getting the type of 's' (line 1872)
        s_16223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 31), 's', False)
        # Getting the type of 'event' (line 1872)
        event_16224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 34), 'event', False)
        # Processing the call keyword arguments (line 1872)
        kwargs_16225 = {}
        # Getting the type of 'self' (line 1872)
        self_16220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1872)
        callbacks_16221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1872, 8), self_16220, 'callbacks')
        # Obtaining the member 'process' of a type (line 1872)
        process_16222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1872, 8), callbacks_16221, 'process')
        # Calling process(args, kwargs) (line 1872)
        process_call_result_16226 = invoke(stypy.reporting.localization.Localization(__file__, 1872, 8), process_16222, *[s_16223, event_16224], **kwargs_16225)
        
        
        # ################# End of 'key_press_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'key_press_event' in the type store
        # Getting the type of 'stypy_return_type' (line 1865)
        stypy_return_type_16227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16227)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'key_press_event'
        return stypy_return_type_16227


    @norecursion
    def key_release_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1874)
        None_16228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 46), 'None')
        defaults = [None_16228]
        # Create a new context for function 'key_release_event'
        module_type_store = module_type_store.open_function_context('key_release_event', 1874, 4, False)
        # Assigning a type to the variable 'self' (line 1875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1875, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.key_release_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.key_release_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.key_release_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.key_release_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.key_release_event')
        FigureCanvasBase.key_release_event.__dict__.__setitem__('stypy_param_names_list', ['key', 'guiEvent'])
        FigureCanvasBase.key_release_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.key_release_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.key_release_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.key_release_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.key_release_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.key_release_event.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.key_release_event', ['key', 'guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'key_release_event', localization, ['key', 'guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'key_release_event(...)' code ##################

        unicode_16229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, (-1)), 'unicode', u'\n        Pass a `KeyEvent` to all functions connected to ``key_release_event``.\n        ')
        
        # Assigning a Str to a Name (line 1878):
        
        # Assigning a Str to a Name (line 1878):
        
        # Assigning a Str to a Name (line 1878):
        unicode_16230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1878, 12), 'unicode', u'key_release_event')
        # Assigning a type to the variable 's' (line 1878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 8), 's', unicode_16230)
        
        # Assigning a Call to a Name (line 1879):
        
        # Assigning a Call to a Name (line 1879):
        
        # Assigning a Call to a Name (line 1879):
        
        # Call to KeyEvent(...): (line 1879)
        # Processing the call arguments (line 1879)
        # Getting the type of 's' (line 1880)
        s_16232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 12), 's', False)
        # Getting the type of 'self' (line 1880)
        self_16233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 15), 'self', False)
        # Getting the type of 'key' (line 1880)
        key_16234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 21), 'key', False)
        # Getting the type of 'self' (line 1880)
        self_16235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 26), 'self', False)
        # Obtaining the member '_lastx' of a type (line 1880)
        _lastx_16236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1880, 26), self_16235, '_lastx')
        # Getting the type of 'self' (line 1880)
        self_16237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 39), 'self', False)
        # Obtaining the member '_lasty' of a type (line 1880)
        _lasty_16238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1880, 39), self_16237, '_lasty')
        # Processing the call keyword arguments (line 1879)
        # Getting the type of 'guiEvent' (line 1880)
        guiEvent_16239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 61), 'guiEvent', False)
        keyword_16240 = guiEvent_16239
        kwargs_16241 = {'guiEvent': keyword_16240}
        # Getting the type of 'KeyEvent' (line 1879)
        KeyEvent_16231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 16), 'KeyEvent', False)
        # Calling KeyEvent(args, kwargs) (line 1879)
        KeyEvent_call_result_16242 = invoke(stypy.reporting.localization.Localization(__file__, 1879, 16), KeyEvent_16231, *[s_16232, self_16233, key_16234, _lastx_16236, _lasty_16238], **kwargs_16241)
        
        # Assigning a type to the variable 'event' (line 1879)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 8), 'event', KeyEvent_call_result_16242)
        
        # Call to process(...): (line 1881)
        # Processing the call arguments (line 1881)
        # Getting the type of 's' (line 1881)
        s_16246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 31), 's', False)
        # Getting the type of 'event' (line 1881)
        event_16247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 34), 'event', False)
        # Processing the call keyword arguments (line 1881)
        kwargs_16248 = {}
        # Getting the type of 'self' (line 1881)
        self_16243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1881)
        callbacks_16244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1881, 8), self_16243, 'callbacks')
        # Obtaining the member 'process' of a type (line 1881)
        process_16245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1881, 8), callbacks_16244, 'process')
        # Calling process(args, kwargs) (line 1881)
        process_call_result_16249 = invoke(stypy.reporting.localization.Localization(__file__, 1881, 8), process_16245, *[s_16246, event_16247], **kwargs_16248)
        
        
        # Assigning a Name to a Attribute (line 1882):
        
        # Assigning a Name to a Attribute (line 1882):
        
        # Assigning a Name to a Attribute (line 1882):
        # Getting the type of 'None' (line 1882)
        None_16250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 20), 'None')
        # Getting the type of 'self' (line 1882)
        self_16251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 8), 'self')
        # Setting the type of the member '_key' of a type (line 1882)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1882, 8), self_16251, '_key', None_16250)
        
        # ################# End of 'key_release_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'key_release_event' in the type store
        # Getting the type of 'stypy_return_type' (line 1874)
        stypy_return_type_16252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16252)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'key_release_event'
        return stypy_return_type_16252


    @norecursion
    def pick_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pick_event'
        module_type_store = module_type_store.open_function_context('pick_event', 1884, 4, False)
        # Assigning a type to the variable 'self' (line 1885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1885, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.pick_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.pick_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.pick_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.pick_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.pick_event')
        FigureCanvasBase.pick_event.__dict__.__setitem__('stypy_param_names_list', ['mouseevent', 'artist'])
        FigureCanvasBase.pick_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.pick_event.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasBase.pick_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.pick_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.pick_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.pick_event.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.pick_event', ['mouseevent', 'artist'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pick_event', localization, ['mouseevent', 'artist'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pick_event(...)' code ##################

        unicode_16253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1888, (-1)), 'unicode', u'\n        This method will be called by artists who are picked and will\n        fire off :class:`PickEvent` callbacks registered listeners\n        ')
        
        # Assigning a Str to a Name (line 1889):
        
        # Assigning a Str to a Name (line 1889):
        
        # Assigning a Str to a Name (line 1889):
        unicode_16254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1889, 12), 'unicode', u'pick_event')
        # Assigning a type to the variable 's' (line 1889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1889, 8), 's', unicode_16254)
        
        # Assigning a Call to a Name (line 1890):
        
        # Assigning a Call to a Name (line 1890):
        
        # Assigning a Call to a Name (line 1890):
        
        # Call to PickEvent(...): (line 1890)
        # Processing the call arguments (line 1890)
        # Getting the type of 's' (line 1890)
        s_16256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 26), 's', False)
        # Getting the type of 'self' (line 1890)
        self_16257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 29), 'self', False)
        # Getting the type of 'mouseevent' (line 1890)
        mouseevent_16258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 35), 'mouseevent', False)
        # Getting the type of 'artist' (line 1890)
        artist_16259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 47), 'artist', False)
        # Processing the call keyword arguments (line 1890)
        # Getting the type of 'mouseevent' (line 1891)
        mouseevent_16260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 35), 'mouseevent', False)
        # Obtaining the member 'guiEvent' of a type (line 1891)
        guiEvent_16261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1891, 35), mouseevent_16260, 'guiEvent')
        keyword_16262 = guiEvent_16261
        # Getting the type of 'kwargs' (line 1892)
        kwargs_16263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 28), 'kwargs', False)
        kwargs_16264 = {'kwargs_16263': kwargs_16263, 'guiEvent': keyword_16262}
        # Getting the type of 'PickEvent' (line 1890)
        PickEvent_16255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 16), 'PickEvent', False)
        # Calling PickEvent(args, kwargs) (line 1890)
        PickEvent_call_result_16265 = invoke(stypy.reporting.localization.Localization(__file__, 1890, 16), PickEvent_16255, *[s_16256, self_16257, mouseevent_16258, artist_16259], **kwargs_16264)
        
        # Assigning a type to the variable 'event' (line 1890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1890, 8), 'event', PickEvent_call_result_16265)
        
        # Call to process(...): (line 1893)
        # Processing the call arguments (line 1893)
        # Getting the type of 's' (line 1893)
        s_16269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 31), 's', False)
        # Getting the type of 'event' (line 1893)
        event_16270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 34), 'event', False)
        # Processing the call keyword arguments (line 1893)
        kwargs_16271 = {}
        # Getting the type of 'self' (line 1893)
        self_16266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1893)
        callbacks_16267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1893, 8), self_16266, 'callbacks')
        # Obtaining the member 'process' of a type (line 1893)
        process_16268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1893, 8), callbacks_16267, 'process')
        # Calling process(args, kwargs) (line 1893)
        process_call_result_16272 = invoke(stypy.reporting.localization.Localization(__file__, 1893, 8), process_16268, *[s_16269, event_16270], **kwargs_16271)
        
        
        # ################# End of 'pick_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pick_event' in the type store
        # Getting the type of 'stypy_return_type' (line 1884)
        stypy_return_type_16273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16273)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pick_event'
        return stypy_return_type_16273


    @norecursion
    def scroll_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1895)
        None_16274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 48), 'None')
        defaults = [None_16274]
        # Create a new context for function 'scroll_event'
        module_type_store = module_type_store.open_function_context('scroll_event', 1895, 4, False)
        # Assigning a type to the variable 'self' (line 1896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1896, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.scroll_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.scroll_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.scroll_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.scroll_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.scroll_event')
        FigureCanvasBase.scroll_event.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'step', 'guiEvent'])
        FigureCanvasBase.scroll_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.scroll_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.scroll_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.scroll_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.scroll_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.scroll_event.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.scroll_event', ['x', 'y', 'step', 'guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'scroll_event', localization, ['x', 'y', 'step', 'guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'scroll_event(...)' code ##################

        unicode_16275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1903, (-1)), 'unicode', u"\n        Backend derived classes should call this function on any\n        scroll wheel event.  x,y are the canvas coords: 0,0 is lower,\n        left.  button and key are as defined in MouseEvent.\n\n        This method will be call all functions connected to the\n        'scroll_event' with a :class:`MouseEvent` instance.\n        ")
        
        
        # Getting the type of 'step' (line 1904)
        step_16276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 11), 'step')
        int_16277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1904, 19), 'int')
        # Applying the binary operator '>=' (line 1904)
        result_ge_16278 = python_operator(stypy.reporting.localization.Localization(__file__, 1904, 11), '>=', step_16276, int_16277)
        
        # Testing the type of an if condition (line 1904)
        if_condition_16279 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1904, 8), result_ge_16278)
        # Assigning a type to the variable 'if_condition_16279' (line 1904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1904, 8), 'if_condition_16279', if_condition_16279)
        # SSA begins for if statement (line 1904)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Attribute (line 1905):
        
        # Assigning a Str to a Attribute (line 1905):
        
        # Assigning a Str to a Attribute (line 1905):
        unicode_16280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1905, 27), 'unicode', u'up')
        # Getting the type of 'self' (line 1905)
        self_16281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 12), 'self')
        # Setting the type of the member '_button' of a type (line 1905)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1905, 12), self_16281, '_button', unicode_16280)
        # SSA branch for the else part of an if statement (line 1904)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Attribute (line 1907):
        
        # Assigning a Str to a Attribute (line 1907):
        
        # Assigning a Str to a Attribute (line 1907):
        unicode_16282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1907, 27), 'unicode', u'down')
        # Getting the type of 'self' (line 1907)
        self_16283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 12), 'self')
        # Setting the type of the member '_button' of a type (line 1907)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1907, 12), self_16283, '_button', unicode_16282)
        # SSA join for if statement (line 1904)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Str to a Name (line 1908):
        
        # Assigning a Str to a Name (line 1908):
        
        # Assigning a Str to a Name (line 1908):
        unicode_16284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1908, 12), 'unicode', u'scroll_event')
        # Assigning a type to the variable 's' (line 1908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1908, 8), 's', unicode_16284)
        
        # Assigning a Call to a Name (line 1909):
        
        # Assigning a Call to a Name (line 1909):
        
        # Assigning a Call to a Name (line 1909):
        
        # Call to MouseEvent(...): (line 1909)
        # Processing the call arguments (line 1909)
        # Getting the type of 's' (line 1909)
        s_16286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 32), 's', False)
        # Getting the type of 'self' (line 1909)
        self_16287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 35), 'self', False)
        # Getting the type of 'x' (line 1909)
        x_16288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 41), 'x', False)
        # Getting the type of 'y' (line 1909)
        y_16289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 44), 'y', False)
        # Getting the type of 'self' (line 1909)
        self_16290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 47), 'self', False)
        # Obtaining the member '_button' of a type (line 1909)
        _button_16291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1909, 47), self_16290, '_button')
        # Getting the type of 'self' (line 1909)
        self_16292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 61), 'self', False)
        # Obtaining the member '_key' of a type (line 1909)
        _key_16293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1909, 61), self_16292, '_key')
        # Processing the call keyword arguments (line 1909)
        # Getting the type of 'step' (line 1910)
        step_16294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 37), 'step', False)
        keyword_16295 = step_16294
        # Getting the type of 'guiEvent' (line 1910)
        guiEvent_16296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 52), 'guiEvent', False)
        keyword_16297 = guiEvent_16296
        kwargs_16298 = {'step': keyword_16295, 'guiEvent': keyword_16297}
        # Getting the type of 'MouseEvent' (line 1909)
        MouseEvent_16285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 21), 'MouseEvent', False)
        # Calling MouseEvent(args, kwargs) (line 1909)
        MouseEvent_call_result_16299 = invoke(stypy.reporting.localization.Localization(__file__, 1909, 21), MouseEvent_16285, *[s_16286, self_16287, x_16288, y_16289, _button_16291, _key_16293], **kwargs_16298)
        
        # Assigning a type to the variable 'mouseevent' (line 1909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1909, 8), 'mouseevent', MouseEvent_call_result_16299)
        
        # Call to process(...): (line 1911)
        # Processing the call arguments (line 1911)
        # Getting the type of 's' (line 1911)
        s_16303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 31), 's', False)
        # Getting the type of 'mouseevent' (line 1911)
        mouseevent_16304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 34), 'mouseevent', False)
        # Processing the call keyword arguments (line 1911)
        kwargs_16305 = {}
        # Getting the type of 'self' (line 1911)
        self_16300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1911)
        callbacks_16301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1911, 8), self_16300, 'callbacks')
        # Obtaining the member 'process' of a type (line 1911)
        process_16302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1911, 8), callbacks_16301, 'process')
        # Calling process(args, kwargs) (line 1911)
        process_call_result_16306 = invoke(stypy.reporting.localization.Localization(__file__, 1911, 8), process_16302, *[s_16303, mouseevent_16304], **kwargs_16305)
        
        
        # ################# End of 'scroll_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'scroll_event' in the type store
        # Getting the type of 'stypy_return_type' (line 1895)
        stypy_return_type_16307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16307)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'scroll_event'
        return stypy_return_type_16307


    @norecursion
    def button_press_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1913)
        False_16308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 56), 'False')
        # Getting the type of 'None' (line 1913)
        None_16309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 72), 'None')
        defaults = [False_16308, None_16309]
        # Create a new context for function 'button_press_event'
        module_type_store = module_type_store.open_function_context('button_press_event', 1913, 4, False)
        # Assigning a type to the variable 'self' (line 1914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.button_press_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.button_press_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.button_press_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.button_press_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.button_press_event')
        FigureCanvasBase.button_press_event.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'button', 'dblclick', 'guiEvent'])
        FigureCanvasBase.button_press_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.button_press_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.button_press_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.button_press_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.button_press_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.button_press_event.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.button_press_event', ['x', 'y', 'button', 'dblclick', 'guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'button_press_event', localization, ['x', 'y', 'button', 'dblclick', 'guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'button_press_event(...)' code ##################

        unicode_16310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1921, (-1)), 'unicode', u"\n        Backend derived classes should call this function on any mouse\n        button press.  x,y are the canvas coords: 0,0 is lower, left.\n        button and key are as defined in :class:`MouseEvent`.\n\n        This method will be call all functions connected to the\n        'button_press_event' with a :class:`MouseEvent` instance.\n        ")
        
        # Assigning a Name to a Attribute (line 1922):
        
        # Assigning a Name to a Attribute (line 1922):
        
        # Assigning a Name to a Attribute (line 1922):
        # Getting the type of 'button' (line 1922)
        button_16311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 23), 'button')
        # Getting the type of 'self' (line 1922)
        self_16312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 8), 'self')
        # Setting the type of the member '_button' of a type (line 1922)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1922, 8), self_16312, '_button', button_16311)
        
        # Assigning a Str to a Name (line 1923):
        
        # Assigning a Str to a Name (line 1923):
        
        # Assigning a Str to a Name (line 1923):
        unicode_16313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1923, 12), 'unicode', u'button_press_event')
        # Assigning a type to the variable 's' (line 1923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 8), 's', unicode_16313)
        
        # Assigning a Call to a Name (line 1924):
        
        # Assigning a Call to a Name (line 1924):
        
        # Assigning a Call to a Name (line 1924):
        
        # Call to MouseEvent(...): (line 1924)
        # Processing the call arguments (line 1924)
        # Getting the type of 's' (line 1924)
        s_16315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 32), 's', False)
        # Getting the type of 'self' (line 1924)
        self_16316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 35), 'self', False)
        # Getting the type of 'x' (line 1924)
        x_16317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 41), 'x', False)
        # Getting the type of 'y' (line 1924)
        y_16318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 44), 'y', False)
        # Getting the type of 'button' (line 1924)
        button_16319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 47), 'button', False)
        # Getting the type of 'self' (line 1924)
        self_16320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 55), 'self', False)
        # Obtaining the member '_key' of a type (line 1924)
        _key_16321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1924, 55), self_16320, '_key')
        # Processing the call keyword arguments (line 1924)
        # Getting the type of 'dblclick' (line 1925)
        dblclick_16322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 41), 'dblclick', False)
        keyword_16323 = dblclick_16322
        # Getting the type of 'guiEvent' (line 1925)
        guiEvent_16324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 60), 'guiEvent', False)
        keyword_16325 = guiEvent_16324
        kwargs_16326 = {'guiEvent': keyword_16325, 'dblclick': keyword_16323}
        # Getting the type of 'MouseEvent' (line 1924)
        MouseEvent_16314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 21), 'MouseEvent', False)
        # Calling MouseEvent(args, kwargs) (line 1924)
        MouseEvent_call_result_16327 = invoke(stypy.reporting.localization.Localization(__file__, 1924, 21), MouseEvent_16314, *[s_16315, self_16316, x_16317, y_16318, button_16319, _key_16321], **kwargs_16326)
        
        # Assigning a type to the variable 'mouseevent' (line 1924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1924, 8), 'mouseevent', MouseEvent_call_result_16327)
        
        # Call to process(...): (line 1926)
        # Processing the call arguments (line 1926)
        # Getting the type of 's' (line 1926)
        s_16331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 31), 's', False)
        # Getting the type of 'mouseevent' (line 1926)
        mouseevent_16332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 34), 'mouseevent', False)
        # Processing the call keyword arguments (line 1926)
        kwargs_16333 = {}
        # Getting the type of 'self' (line 1926)
        self_16328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1926)
        callbacks_16329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 8), self_16328, 'callbacks')
        # Obtaining the member 'process' of a type (line 1926)
        process_16330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 8), callbacks_16329, 'process')
        # Calling process(args, kwargs) (line 1926)
        process_call_result_16334 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 8), process_16330, *[s_16331, mouseevent_16332], **kwargs_16333)
        
        
        # ################# End of 'button_press_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'button_press_event' in the type store
        # Getting the type of 'stypy_return_type' (line 1913)
        stypy_return_type_16335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16335)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'button_press_event'
        return stypy_return_type_16335


    @norecursion
    def button_release_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1928)
        None_16336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 58), 'None')
        defaults = [None_16336]
        # Create a new context for function 'button_release_event'
        module_type_store = module_type_store.open_function_context('button_release_event', 1928, 4, False)
        # Assigning a type to the variable 'self' (line 1929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1929, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.button_release_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.button_release_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.button_release_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.button_release_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.button_release_event')
        FigureCanvasBase.button_release_event.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'button', 'guiEvent'])
        FigureCanvasBase.button_release_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.button_release_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.button_release_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.button_release_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.button_release_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.button_release_event.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.button_release_event', ['x', 'y', 'button', 'guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'button_release_event', localization, ['x', 'y', 'button', 'guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'button_release_event(...)' code ##################

        unicode_16337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1947, (-1)), 'unicode', u"\n        Backend derived classes should call this function on any mouse\n        button release.\n\n        This method will call all functions connected to the\n        'button_release_event' with a :class:`MouseEvent` instance.\n\n        Parameters\n        ----------\n        x : scalar\n            the canvas coordinates where 0=left\n\n        y : scalar\n            the canvas coordinates where 0=bottom\n\n        guiEvent\n            the native UI event that generated the mpl event\n\n        ")
        
        # Assigning a Str to a Name (line 1948):
        
        # Assigning a Str to a Name (line 1948):
        
        # Assigning a Str to a Name (line 1948):
        unicode_16338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1948, 12), 'unicode', u'button_release_event')
        # Assigning a type to the variable 's' (line 1948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1948, 8), 's', unicode_16338)
        
        # Assigning a Call to a Name (line 1949):
        
        # Assigning a Call to a Name (line 1949):
        
        # Assigning a Call to a Name (line 1949):
        
        # Call to MouseEvent(...): (line 1949)
        # Processing the call arguments (line 1949)
        # Getting the type of 's' (line 1949)
        s_16340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 27), 's', False)
        # Getting the type of 'self' (line 1949)
        self_16341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 30), 'self', False)
        # Getting the type of 'x' (line 1949)
        x_16342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 36), 'x', False)
        # Getting the type of 'y' (line 1949)
        y_16343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 39), 'y', False)
        # Getting the type of 'button' (line 1949)
        button_16344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 42), 'button', False)
        # Getting the type of 'self' (line 1949)
        self_16345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 50), 'self', False)
        # Obtaining the member '_key' of a type (line 1949)
        _key_16346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1949, 50), self_16345, '_key')
        # Processing the call keyword arguments (line 1949)
        # Getting the type of 'guiEvent' (line 1949)
        guiEvent_16347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 70), 'guiEvent', False)
        keyword_16348 = guiEvent_16347
        kwargs_16349 = {'guiEvent': keyword_16348}
        # Getting the type of 'MouseEvent' (line 1949)
        MouseEvent_16339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 16), 'MouseEvent', False)
        # Calling MouseEvent(args, kwargs) (line 1949)
        MouseEvent_call_result_16350 = invoke(stypy.reporting.localization.Localization(__file__, 1949, 16), MouseEvent_16339, *[s_16340, self_16341, x_16342, y_16343, button_16344, _key_16346], **kwargs_16349)
        
        # Assigning a type to the variable 'event' (line 1949)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1949, 8), 'event', MouseEvent_call_result_16350)
        
        # Call to process(...): (line 1950)
        # Processing the call arguments (line 1950)
        # Getting the type of 's' (line 1950)
        s_16354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 31), 's', False)
        # Getting the type of 'event' (line 1950)
        event_16355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 34), 'event', False)
        # Processing the call keyword arguments (line 1950)
        kwargs_16356 = {}
        # Getting the type of 'self' (line 1950)
        self_16351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1950)
        callbacks_16352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1950, 8), self_16351, 'callbacks')
        # Obtaining the member 'process' of a type (line 1950)
        process_16353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1950, 8), callbacks_16352, 'process')
        # Calling process(args, kwargs) (line 1950)
        process_call_result_16357 = invoke(stypy.reporting.localization.Localization(__file__, 1950, 8), process_16353, *[s_16354, event_16355], **kwargs_16356)
        
        
        # Assigning a Name to a Attribute (line 1951):
        
        # Assigning a Name to a Attribute (line 1951):
        
        # Assigning a Name to a Attribute (line 1951):
        # Getting the type of 'None' (line 1951)
        None_16358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 23), 'None')
        # Getting the type of 'self' (line 1951)
        self_16359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 8), 'self')
        # Setting the type of the member '_button' of a type (line 1951)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1951, 8), self_16359, '_button', None_16358)
        
        # ################# End of 'button_release_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'button_release_event' in the type store
        # Getting the type of 'stypy_return_type' (line 1928)
        stypy_return_type_16360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16360)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'button_release_event'
        return stypy_return_type_16360


    @norecursion
    def motion_notify_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1953)
        None_16361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 49), 'None')
        defaults = [None_16361]
        # Create a new context for function 'motion_notify_event'
        module_type_store = module_type_store.open_function_context('motion_notify_event', 1953, 4, False)
        # Assigning a type to the variable 'self' (line 1954)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1954, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.motion_notify_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.motion_notify_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.motion_notify_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.motion_notify_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.motion_notify_event')
        FigureCanvasBase.motion_notify_event.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'guiEvent'])
        FigureCanvasBase.motion_notify_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.motion_notify_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.motion_notify_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.motion_notify_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.motion_notify_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.motion_notify_event.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.motion_notify_event', ['x', 'y', 'guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'motion_notify_event', localization, ['x', 'y', 'guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'motion_notify_event(...)' code ##################

        unicode_16362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, (-1)), 'unicode', u"\n        Backend derived classes should call this function on any\n        motion-notify-event.\n\n        This method will call all functions connected to the\n        'motion_notify_event' with a :class:`MouseEvent` instance.\n\n        Parameters\n        ----------\n        x : scalar\n            the canvas coordinates where 0=left\n\n        y : scalar\n            the canvas coordinates where 0=bottom\n\n        guiEvent\n            the native UI event that generated the mpl event\n\n        ")
        
        # Assigning a Tuple to a Tuple (line 1973):
        
        # Assigning a Name to a Name (line 1973):
        
        # Assigning a Name to a Name (line 1973):
        # Getting the type of 'x' (line 1973)
        x_16363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 35), 'x')
        # Assigning a type to the variable 'tuple_assignment_13730' (line 1973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 8), 'tuple_assignment_13730', x_16363)
        
        # Assigning a Name to a Name (line 1973):
        
        # Assigning a Name to a Name (line 1973):
        # Getting the type of 'y' (line 1973)
        y_16364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 38), 'y')
        # Assigning a type to the variable 'tuple_assignment_13731' (line 1973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 8), 'tuple_assignment_13731', y_16364)
        
        # Assigning a Name to a Attribute (line 1973):
        
        # Assigning a Name to a Attribute (line 1973):
        # Getting the type of 'tuple_assignment_13730' (line 1973)
        tuple_assignment_13730_16365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 8), 'tuple_assignment_13730')
        # Getting the type of 'self' (line 1973)
        self_16366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 8), 'self')
        # Setting the type of the member '_lastx' of a type (line 1973)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1973, 8), self_16366, '_lastx', tuple_assignment_13730_16365)
        
        # Assigning a Name to a Attribute (line 1973):
        
        # Assigning a Name to a Attribute (line 1973):
        # Getting the type of 'tuple_assignment_13731' (line 1973)
        tuple_assignment_13731_16367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 8), 'tuple_assignment_13731')
        # Getting the type of 'self' (line 1973)
        self_16368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 21), 'self')
        # Setting the type of the member '_lasty' of a type (line 1973)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1973, 21), self_16368, '_lasty', tuple_assignment_13731_16367)
        
        # Assigning a Str to a Name (line 1974):
        
        # Assigning a Str to a Name (line 1974):
        
        # Assigning a Str to a Name (line 1974):
        unicode_16369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1974, 12), 'unicode', u'motion_notify_event')
        # Assigning a type to the variable 's' (line 1974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 8), 's', unicode_16369)
        
        # Assigning a Call to a Name (line 1975):
        
        # Assigning a Call to a Name (line 1975):
        
        # Assigning a Call to a Name (line 1975):
        
        # Call to MouseEvent(...): (line 1975)
        # Processing the call arguments (line 1975)
        # Getting the type of 's' (line 1975)
        s_16371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 27), 's', False)
        # Getting the type of 'self' (line 1975)
        self_16372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 30), 'self', False)
        # Getting the type of 'x' (line 1975)
        x_16373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 36), 'x', False)
        # Getting the type of 'y' (line 1975)
        y_16374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 39), 'y', False)
        # Getting the type of 'self' (line 1975)
        self_16375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 42), 'self', False)
        # Obtaining the member '_button' of a type (line 1975)
        _button_16376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1975, 42), self_16375, '_button')
        # Getting the type of 'self' (line 1975)
        self_16377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 56), 'self', False)
        # Obtaining the member '_key' of a type (line 1975)
        _key_16378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1975, 56), self_16377, '_key')
        # Processing the call keyword arguments (line 1975)
        # Getting the type of 'guiEvent' (line 1976)
        guiEvent_16379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 36), 'guiEvent', False)
        keyword_16380 = guiEvent_16379
        kwargs_16381 = {'guiEvent': keyword_16380}
        # Getting the type of 'MouseEvent' (line 1975)
        MouseEvent_16370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 16), 'MouseEvent', False)
        # Calling MouseEvent(args, kwargs) (line 1975)
        MouseEvent_call_result_16382 = invoke(stypy.reporting.localization.Localization(__file__, 1975, 16), MouseEvent_16370, *[s_16371, self_16372, x_16373, y_16374, _button_16376, _key_16378], **kwargs_16381)
        
        # Assigning a type to the variable 'event' (line 1975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1975, 8), 'event', MouseEvent_call_result_16382)
        
        # Call to process(...): (line 1977)
        # Processing the call arguments (line 1977)
        # Getting the type of 's' (line 1977)
        s_16386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 31), 's', False)
        # Getting the type of 'event' (line 1977)
        event_16387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 34), 'event', False)
        # Processing the call keyword arguments (line 1977)
        kwargs_16388 = {}
        # Getting the type of 'self' (line 1977)
        self_16383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1977)
        callbacks_16384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1977, 8), self_16383, 'callbacks')
        # Obtaining the member 'process' of a type (line 1977)
        process_16385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1977, 8), callbacks_16384, 'process')
        # Calling process(args, kwargs) (line 1977)
        process_call_result_16389 = invoke(stypy.reporting.localization.Localization(__file__, 1977, 8), process_16385, *[s_16386, event_16387], **kwargs_16388)
        
        
        # ################# End of 'motion_notify_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'motion_notify_event' in the type store
        # Getting the type of 'stypy_return_type' (line 1953)
        stypy_return_type_16390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16390)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'motion_notify_event'
        return stypy_return_type_16390


    @norecursion
    def leave_notify_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1979)
        None_16391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 42), 'None')
        defaults = [None_16391]
        # Create a new context for function 'leave_notify_event'
        module_type_store = module_type_store.open_function_context('leave_notify_event', 1979, 4, False)
        # Assigning a type to the variable 'self' (line 1980)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.leave_notify_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.leave_notify_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.leave_notify_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.leave_notify_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.leave_notify_event')
        FigureCanvasBase.leave_notify_event.__dict__.__setitem__('stypy_param_names_list', ['guiEvent'])
        FigureCanvasBase.leave_notify_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.leave_notify_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.leave_notify_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.leave_notify_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.leave_notify_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.leave_notify_event.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.leave_notify_event', ['guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'leave_notify_event', localization, ['guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'leave_notify_event(...)' code ##################

        unicode_16392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1989, (-1)), 'unicode', u'\n        Backend derived classes should call this function when leaving\n        canvas\n\n        Parameters\n        ----------\n        guiEvent\n            the native UI event that generated the mpl event\n\n        ')
        
        # Call to process(...): (line 1991)
        # Processing the call arguments (line 1991)
        unicode_16396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1991, 31), 'unicode', u'figure_leave_event')
        # Getting the type of 'LocationEvent' (line 1991)
        LocationEvent_16397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 53), 'LocationEvent', False)
        # Obtaining the member 'lastevent' of a type (line 1991)
        lastevent_16398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1991, 53), LocationEvent_16397, 'lastevent')
        # Processing the call keyword arguments (line 1991)
        kwargs_16399 = {}
        # Getting the type of 'self' (line 1991)
        self_16393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1991)
        callbacks_16394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1991, 8), self_16393, 'callbacks')
        # Obtaining the member 'process' of a type (line 1991)
        process_16395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1991, 8), callbacks_16394, 'process')
        # Calling process(args, kwargs) (line 1991)
        process_call_result_16400 = invoke(stypy.reporting.localization.Localization(__file__, 1991, 8), process_16395, *[unicode_16396, lastevent_16398], **kwargs_16399)
        
        
        # Assigning a Name to a Attribute (line 1992):
        
        # Assigning a Name to a Attribute (line 1992):
        
        # Assigning a Name to a Attribute (line 1992):
        # Getting the type of 'None' (line 1992)
        None_16401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 34), 'None')
        # Getting the type of 'LocationEvent' (line 1992)
        LocationEvent_16402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 8), 'LocationEvent')
        # Setting the type of the member 'lastevent' of a type (line 1992)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1992, 8), LocationEvent_16402, 'lastevent', None_16401)
        
        # Assigning a Tuple to a Tuple (line 1993):
        
        # Assigning a Name to a Name (line 1993):
        
        # Assigning a Name to a Name (line 1993):
        # Getting the type of 'None' (line 1993)
        None_16403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 35), 'None')
        # Assigning a type to the variable 'tuple_assignment_13732' (line 1993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1993, 8), 'tuple_assignment_13732', None_16403)
        
        # Assigning a Name to a Name (line 1993):
        
        # Assigning a Name to a Name (line 1993):
        # Getting the type of 'None' (line 1993)
        None_16404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 41), 'None')
        # Assigning a type to the variable 'tuple_assignment_13733' (line 1993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1993, 8), 'tuple_assignment_13733', None_16404)
        
        # Assigning a Name to a Attribute (line 1993):
        
        # Assigning a Name to a Attribute (line 1993):
        # Getting the type of 'tuple_assignment_13732' (line 1993)
        tuple_assignment_13732_16405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 8), 'tuple_assignment_13732')
        # Getting the type of 'self' (line 1993)
        self_16406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 8), 'self')
        # Setting the type of the member '_lastx' of a type (line 1993)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1993, 8), self_16406, '_lastx', tuple_assignment_13732_16405)
        
        # Assigning a Name to a Attribute (line 1993):
        
        # Assigning a Name to a Attribute (line 1993):
        # Getting the type of 'tuple_assignment_13733' (line 1993)
        tuple_assignment_13733_16407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 8), 'tuple_assignment_13733')
        # Getting the type of 'self' (line 1993)
        self_16408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 21), 'self')
        # Setting the type of the member '_lasty' of a type (line 1993)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1993, 21), self_16408, '_lasty', tuple_assignment_13733_16407)
        
        # ################# End of 'leave_notify_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'leave_notify_event' in the type store
        # Getting the type of 'stypy_return_type' (line 1979)
        stypy_return_type_16409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16409)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'leave_notify_event'
        return stypy_return_type_16409


    @norecursion
    def enter_notify_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1995)
        None_16410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 42), 'None')
        # Getting the type of 'None' (line 1995)
        None_16411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 51), 'None')
        defaults = [None_16410, None_16411]
        # Create a new context for function 'enter_notify_event'
        module_type_store = module_type_store.open_function_context('enter_notify_event', 1995, 4, False)
        # Assigning a type to the variable 'self' (line 1996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1996, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.enter_notify_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.enter_notify_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.enter_notify_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.enter_notify_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.enter_notify_event')
        FigureCanvasBase.enter_notify_event.__dict__.__setitem__('stypy_param_names_list', ['guiEvent', 'xy'])
        FigureCanvasBase.enter_notify_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.enter_notify_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.enter_notify_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.enter_notify_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.enter_notify_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.enter_notify_event.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.enter_notify_event', ['guiEvent', 'xy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'enter_notify_event', localization, ['guiEvent', 'xy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'enter_notify_event(...)' code ##################

        unicode_16412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2008, (-1)), 'unicode', u'\n        Backend derived classes should call this function when entering\n        canvas\n\n        Parameters\n        ----------\n        guiEvent\n            the native UI event that generated the mpl event\n        xy : tuple of 2 scalars\n            the coordinate location of the pointer when the canvas is\n            entered\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 2009)
        # Getting the type of 'xy' (line 2009)
        xy_16413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 8), 'xy')
        # Getting the type of 'None' (line 2009)
        None_16414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 21), 'None')
        
        (may_be_16415, more_types_in_union_16416) = may_not_be_none(xy_16413, None_16414)

        if may_be_16415:

            if more_types_in_union_16416:
                # Runtime conditional SSA (line 2009)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Tuple (line 2010):
            
            # Assigning a Subscript to a Name (line 2010):
            
            # Assigning a Subscript to a Name (line 2010):
            
            # Obtaining the type of the subscript
            int_16417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2010, 12), 'int')
            # Getting the type of 'xy' (line 2010)
            xy_16418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 19), 'xy')
            # Obtaining the member '__getitem__' of a type (line 2010)
            getitem___16419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2010, 12), xy_16418, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2010)
            subscript_call_result_16420 = invoke(stypy.reporting.localization.Localization(__file__, 2010, 12), getitem___16419, int_16417)
            
            # Assigning a type to the variable 'tuple_var_assignment_13734' (line 2010)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2010, 12), 'tuple_var_assignment_13734', subscript_call_result_16420)
            
            # Assigning a Subscript to a Name (line 2010):
            
            # Assigning a Subscript to a Name (line 2010):
            
            # Obtaining the type of the subscript
            int_16421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2010, 12), 'int')
            # Getting the type of 'xy' (line 2010)
            xy_16422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 19), 'xy')
            # Obtaining the member '__getitem__' of a type (line 2010)
            getitem___16423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2010, 12), xy_16422, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2010)
            subscript_call_result_16424 = invoke(stypy.reporting.localization.Localization(__file__, 2010, 12), getitem___16423, int_16421)
            
            # Assigning a type to the variable 'tuple_var_assignment_13735' (line 2010)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2010, 12), 'tuple_var_assignment_13735', subscript_call_result_16424)
            
            # Assigning a Name to a Name (line 2010):
            
            # Assigning a Name to a Name (line 2010):
            # Getting the type of 'tuple_var_assignment_13734' (line 2010)
            tuple_var_assignment_13734_16425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 12), 'tuple_var_assignment_13734')
            # Assigning a type to the variable 'x' (line 2010)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2010, 12), 'x', tuple_var_assignment_13734_16425)
            
            # Assigning a Name to a Name (line 2010):
            
            # Assigning a Name to a Name (line 2010):
            # Getting the type of 'tuple_var_assignment_13735' (line 2010)
            tuple_var_assignment_13735_16426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 12), 'tuple_var_assignment_13735')
            # Assigning a type to the variable 'y' (line 2010)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2010, 15), 'y', tuple_var_assignment_13735_16426)
            
            # Assigning a Tuple to a Tuple (line 2011):
            
            # Assigning a Name to a Name (line 2011):
            
            # Assigning a Name to a Name (line 2011):
            # Getting the type of 'x' (line 2011)
            x_16427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 39), 'x')
            # Assigning a type to the variable 'tuple_assignment_13736' (line 2011)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2011, 12), 'tuple_assignment_13736', x_16427)
            
            # Assigning a Name to a Name (line 2011):
            
            # Assigning a Name to a Name (line 2011):
            # Getting the type of 'y' (line 2011)
            y_16428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 42), 'y')
            # Assigning a type to the variable 'tuple_assignment_13737' (line 2011)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2011, 12), 'tuple_assignment_13737', y_16428)
            
            # Assigning a Name to a Attribute (line 2011):
            
            # Assigning a Name to a Attribute (line 2011):
            # Getting the type of 'tuple_assignment_13736' (line 2011)
            tuple_assignment_13736_16429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 12), 'tuple_assignment_13736')
            # Getting the type of 'self' (line 2011)
            self_16430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 12), 'self')
            # Setting the type of the member '_lastx' of a type (line 2011)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2011, 12), self_16430, '_lastx', tuple_assignment_13736_16429)
            
            # Assigning a Name to a Attribute (line 2011):
            
            # Assigning a Name to a Attribute (line 2011):
            # Getting the type of 'tuple_assignment_13737' (line 2011)
            tuple_assignment_13737_16431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 12), 'tuple_assignment_13737')
            # Getting the type of 'self' (line 2011)
            self_16432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 25), 'self')
            # Setting the type of the member '_lasty' of a type (line 2011)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2011, 25), self_16432, '_lasty', tuple_assignment_13737_16431)

            if more_types_in_union_16416:
                # SSA join for if statement (line 2009)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 2013):
        
        # Assigning a Call to a Name (line 2013):
        
        # Assigning a Call to a Name (line 2013):
        
        # Call to Event(...): (line 2013)
        # Processing the call arguments (line 2013)
        unicode_16434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2013, 22), 'unicode', u'figure_enter_event')
        # Getting the type of 'self' (line 2013)
        self_16435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2013, 44), 'self', False)
        # Getting the type of 'guiEvent' (line 2013)
        guiEvent_16436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2013, 50), 'guiEvent', False)
        # Processing the call keyword arguments (line 2013)
        kwargs_16437 = {}
        # Getting the type of 'Event' (line 2013)
        Event_16433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2013, 16), 'Event', False)
        # Calling Event(args, kwargs) (line 2013)
        Event_call_result_16438 = invoke(stypy.reporting.localization.Localization(__file__, 2013, 16), Event_16433, *[unicode_16434, self_16435, guiEvent_16436], **kwargs_16437)
        
        # Assigning a type to the variable 'event' (line 2013)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2013, 8), 'event', Event_call_result_16438)
        
        # Call to process(...): (line 2014)
        # Processing the call arguments (line 2014)
        unicode_16442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2014, 31), 'unicode', u'figure_enter_event')
        # Getting the type of 'event' (line 2014)
        event_16443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2014, 53), 'event', False)
        # Processing the call keyword arguments (line 2014)
        kwargs_16444 = {}
        # Getting the type of 'self' (line 2014)
        self_16439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2014, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 2014)
        callbacks_16440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2014, 8), self_16439, 'callbacks')
        # Obtaining the member 'process' of a type (line 2014)
        process_16441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2014, 8), callbacks_16440, 'process')
        # Calling process(args, kwargs) (line 2014)
        process_call_result_16445 = invoke(stypy.reporting.localization.Localization(__file__, 2014, 8), process_16441, *[unicode_16442, event_16443], **kwargs_16444)
        
        
        # ################# End of 'enter_notify_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'enter_notify_event' in the type store
        # Getting the type of 'stypy_return_type' (line 1995)
        stypy_return_type_16446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16446)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'enter_notify_event'
        return stypy_return_type_16446


    @norecursion
    def idle_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2017)
        None_16447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2017, 34), 'None')
        defaults = [None_16447]
        # Create a new context for function 'idle_event'
        module_type_store = module_type_store.open_function_context('idle_event', 2016, 4, False)
        # Assigning a type to the variable 'self' (line 2017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2017, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.idle_event.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.idle_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.idle_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.idle_event.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.idle_event')
        FigureCanvasBase.idle_event.__dict__.__setitem__('stypy_param_names_list', ['guiEvent'])
        FigureCanvasBase.idle_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.idle_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.idle_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.idle_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.idle_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.idle_event.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.idle_event', ['guiEvent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'idle_event', localization, ['guiEvent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'idle_event(...)' code ##################

        unicode_16448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2018, 8), 'unicode', u'Called when GUI is idle.')
        
        # Assigning a Str to a Name (line 2019):
        
        # Assigning a Str to a Name (line 2019):
        
        # Assigning a Str to a Name (line 2019):
        unicode_16449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2019, 12), 'unicode', u'idle_event')
        # Assigning a type to the variable 's' (line 2019)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2019, 8), 's', unicode_16449)
        
        # Assigning a Call to a Name (line 2020):
        
        # Assigning a Call to a Name (line 2020):
        
        # Assigning a Call to a Name (line 2020):
        
        # Call to IdleEvent(...): (line 2020)
        # Processing the call arguments (line 2020)
        # Getting the type of 's' (line 2020)
        s_16451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 26), 's', False)
        # Getting the type of 'self' (line 2020)
        self_16452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 29), 'self', False)
        # Processing the call keyword arguments (line 2020)
        # Getting the type of 'guiEvent' (line 2020)
        guiEvent_16453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 44), 'guiEvent', False)
        keyword_16454 = guiEvent_16453
        kwargs_16455 = {'guiEvent': keyword_16454}
        # Getting the type of 'IdleEvent' (line 2020)
        IdleEvent_16450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 16), 'IdleEvent', False)
        # Calling IdleEvent(args, kwargs) (line 2020)
        IdleEvent_call_result_16456 = invoke(stypy.reporting.localization.Localization(__file__, 2020, 16), IdleEvent_16450, *[s_16451, self_16452], **kwargs_16455)
        
        # Assigning a type to the variable 'event' (line 2020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2020, 8), 'event', IdleEvent_call_result_16456)
        
        # Call to process(...): (line 2021)
        # Processing the call arguments (line 2021)
        # Getting the type of 's' (line 2021)
        s_16460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 31), 's', False)
        # Getting the type of 'event' (line 2021)
        event_16461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 34), 'event', False)
        # Processing the call keyword arguments (line 2021)
        kwargs_16462 = {}
        # Getting the type of 'self' (line 2021)
        self_16457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 2021)
        callbacks_16458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2021, 8), self_16457, 'callbacks')
        # Obtaining the member 'process' of a type (line 2021)
        process_16459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2021, 8), callbacks_16458, 'process')
        # Calling process(args, kwargs) (line 2021)
        process_call_result_16463 = invoke(stypy.reporting.localization.Localization(__file__, 2021, 8), process_16459, *[s_16460, event_16461], **kwargs_16462)
        
        
        # ################# End of 'idle_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'idle_event' in the type store
        # Getting the type of 'stypy_return_type' (line 2016)
        stypy_return_type_16464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16464)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'idle_event'
        return stypy_return_type_16464


    @norecursion
    def grab_mouse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'grab_mouse'
        module_type_store = module_type_store.open_function_context('grab_mouse', 2023, 4, False)
        # Assigning a type to the variable 'self' (line 2024)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2024, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.grab_mouse.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.grab_mouse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.grab_mouse.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.grab_mouse.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.grab_mouse')
        FigureCanvasBase.grab_mouse.__dict__.__setitem__('stypy_param_names_list', ['ax'])
        FigureCanvasBase.grab_mouse.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.grab_mouse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.grab_mouse.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.grab_mouse.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.grab_mouse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.grab_mouse.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.grab_mouse', ['ax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'grab_mouse', localization, ['ax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'grab_mouse(...)' code ##################

        unicode_16465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2029, (-1)), 'unicode', u'\n        Set the child axes which are currently grabbing the mouse events.\n        Usually called by the widgets themselves.\n        It is an error to call this if the mouse is already grabbed by\n        another axes.\n        ')
        
        
        # Getting the type of 'self' (line 2030)
        self_16466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 11), 'self')
        # Obtaining the member 'mouse_grabber' of a type (line 2030)
        mouse_grabber_16467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2030, 11), self_16466, 'mouse_grabber')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2030)
        tuple_16468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2030, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2030)
        # Adding element type (line 2030)
        # Getting the type of 'None' (line 2030)
        None_16469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 38), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2030, 38), tuple_16468, None_16469)
        # Adding element type (line 2030)
        # Getting the type of 'ax' (line 2030)
        ax_16470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 44), 'ax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2030, 38), tuple_16468, ax_16470)
        
        # Applying the binary operator 'notin' (line 2030)
        result_contains_16471 = python_operator(stypy.reporting.localization.Localization(__file__, 2030, 11), 'notin', mouse_grabber_16467, tuple_16468)
        
        # Testing the type of an if condition (line 2030)
        if_condition_16472 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2030, 8), result_contains_16471)
        # Assigning a type to the variable 'if_condition_16472' (line 2030)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2030, 8), 'if_condition_16472', if_condition_16472)
        # SSA begins for if statement (line 2030)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 2031)
        # Processing the call arguments (line 2031)
        unicode_16474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2031, 31), 'unicode', u'Another Axes already grabs mouse input')
        # Processing the call keyword arguments (line 2031)
        kwargs_16475 = {}
        # Getting the type of 'RuntimeError' (line 2031)
        RuntimeError_16473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 2031)
        RuntimeError_call_result_16476 = invoke(stypy.reporting.localization.Localization(__file__, 2031, 18), RuntimeError_16473, *[unicode_16474], **kwargs_16475)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2031, 12), RuntimeError_call_result_16476, 'raise parameter', BaseException)
        # SSA join for if statement (line 2030)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2032):
        
        # Assigning a Name to a Attribute (line 2032):
        
        # Assigning a Name to a Attribute (line 2032):
        # Getting the type of 'ax' (line 2032)
        ax_16477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 29), 'ax')
        # Getting the type of 'self' (line 2032)
        self_16478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 8), 'self')
        # Setting the type of the member 'mouse_grabber' of a type (line 2032)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2032, 8), self_16478, 'mouse_grabber', ax_16477)
        
        # ################# End of 'grab_mouse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'grab_mouse' in the type store
        # Getting the type of 'stypy_return_type' (line 2023)
        stypy_return_type_16479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16479)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'grab_mouse'
        return stypy_return_type_16479


    @norecursion
    def release_mouse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'release_mouse'
        module_type_store = module_type_store.open_function_context('release_mouse', 2034, 4, False)
        # Assigning a type to the variable 'self' (line 2035)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2035, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.release_mouse.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.release_mouse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.release_mouse.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.release_mouse.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.release_mouse')
        FigureCanvasBase.release_mouse.__dict__.__setitem__('stypy_param_names_list', ['ax'])
        FigureCanvasBase.release_mouse.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.release_mouse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.release_mouse.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.release_mouse.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.release_mouse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.release_mouse.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.release_mouse', ['ax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'release_mouse', localization, ['ax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'release_mouse(...)' code ##################

        unicode_16480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2040, (-1)), 'unicode', u"\n        Release the mouse grab held by the axes, ax.\n        Usually called by the widgets.\n        It is ok to call this even if you ax doesn't have the mouse\n        grab currently.\n        ")
        
        
        # Getting the type of 'self' (line 2041)
        self_16481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 11), 'self')
        # Obtaining the member 'mouse_grabber' of a type (line 2041)
        mouse_grabber_16482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2041, 11), self_16481, 'mouse_grabber')
        # Getting the type of 'ax' (line 2041)
        ax_16483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 33), 'ax')
        # Applying the binary operator 'is' (line 2041)
        result_is__16484 = python_operator(stypy.reporting.localization.Localization(__file__, 2041, 11), 'is', mouse_grabber_16482, ax_16483)
        
        # Testing the type of an if condition (line 2041)
        if_condition_16485 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2041, 8), result_is__16484)
        # Assigning a type to the variable 'if_condition_16485' (line 2041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2041, 8), 'if_condition_16485', if_condition_16485)
        # SSA begins for if statement (line 2041)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 2042):
        
        # Assigning a Name to a Attribute (line 2042):
        
        # Assigning a Name to a Attribute (line 2042):
        # Getting the type of 'None' (line 2042)
        None_16486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 33), 'None')
        # Getting the type of 'self' (line 2042)
        self_16487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 12), 'self')
        # Setting the type of the member 'mouse_grabber' of a type (line 2042)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2042, 12), self_16487, 'mouse_grabber', None_16486)
        # SSA join for if statement (line 2041)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'release_mouse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'release_mouse' in the type store
        # Getting the type of 'stypy_return_type' (line 2034)
        stypy_return_type_16488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16488)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'release_mouse'
        return stypy_return_type_16488


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 2044, 4, False)
        # Assigning a type to the variable 'self' (line 2045)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2045, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.draw.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.draw.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.draw')
        FigureCanvasBase.draw.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasBase.draw.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasBase.draw.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasBase.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.draw.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.draw', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_16489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2045, 8), 'unicode', u'Render the :class:`~matplotlib.figure.Figure`.')
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 2044)
        stypy_return_type_16490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16490)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_16490


    @norecursion
    def draw_idle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_idle'
        module_type_store = module_type_store.open_function_context('draw_idle', 2047, 4, False)
        # Assigning a type to the variable 'self' (line 2048)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2048, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.draw_idle.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.draw_idle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.draw_idle.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.draw_idle.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.draw_idle')
        FigureCanvasBase.draw_idle.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasBase.draw_idle.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasBase.draw_idle.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasBase.draw_idle.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.draw_idle.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.draw_idle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.draw_idle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.draw_idle', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_idle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_idle(...)' code ##################

        unicode_16491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2050, (-1)), 'unicode', u'\n        :meth:`draw` only if idle; defaults to draw but backends can override\n        ')
        
        
        # Getting the type of 'self' (line 2051)
        self_16492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 15), 'self')
        # Obtaining the member '_is_idle_drawing' of a type (line 2051)
        _is_idle_drawing_16493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2051, 15), self_16492, '_is_idle_drawing')
        # Applying the 'not' unary operator (line 2051)
        result_not__16494 = python_operator(stypy.reporting.localization.Localization(__file__, 2051, 11), 'not', _is_idle_drawing_16493)
        
        # Testing the type of an if condition (line 2051)
        if_condition_16495 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2051, 8), result_not__16494)
        # Assigning a type to the variable 'if_condition_16495' (line 2051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 8), 'if_condition_16495', if_condition_16495)
        # SSA begins for if statement (line 2051)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _idle_draw_cntx(...): (line 2052)
        # Processing the call keyword arguments (line 2052)
        kwargs_16498 = {}
        # Getting the type of 'self' (line 2052)
        self_16496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 17), 'self', False)
        # Obtaining the member '_idle_draw_cntx' of a type (line 2052)
        _idle_draw_cntx_16497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2052, 17), self_16496, '_idle_draw_cntx')
        # Calling _idle_draw_cntx(args, kwargs) (line 2052)
        _idle_draw_cntx_call_result_16499 = invoke(stypy.reporting.localization.Localization(__file__, 2052, 17), _idle_draw_cntx_16497, *[], **kwargs_16498)
        
        with_16500 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 2052, 17), _idle_draw_cntx_call_result_16499, 'with parameter', '__enter__', '__exit__')

        if with_16500:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 2052)
            enter___16501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2052, 17), _idle_draw_cntx_call_result_16499, '__enter__')
            with_enter_16502 = invoke(stypy.reporting.localization.Localization(__file__, 2052, 17), enter___16501)
            
            # Call to draw(...): (line 2053)
            # Getting the type of 'args' (line 2053)
            args_16505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 27), 'args', False)
            # Processing the call keyword arguments (line 2053)
            # Getting the type of 'kwargs' (line 2053)
            kwargs_16506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 35), 'kwargs', False)
            kwargs_16507 = {'kwargs_16506': kwargs_16506}
            # Getting the type of 'self' (line 2053)
            self_16503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 16), 'self', False)
            # Obtaining the member 'draw' of a type (line 2053)
            draw_16504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2053, 16), self_16503, 'draw')
            # Calling draw(args, kwargs) (line 2053)
            draw_call_result_16508 = invoke(stypy.reporting.localization.Localization(__file__, 2053, 16), draw_16504, *[args_16505], **kwargs_16507)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 2052)
            exit___16509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2052, 17), _idle_draw_cntx_call_result_16499, '__exit__')
            with_exit_16510 = invoke(stypy.reporting.localization.Localization(__file__, 2052, 17), exit___16509, None, None, None)

        # SSA join for if statement (line 2051)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'draw_idle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_idle' in the type store
        # Getting the type of 'stypy_return_type' (line 2047)
        stypy_return_type_16511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2047, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16511)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_idle'
        return stypy_return_type_16511


    @norecursion
    def draw_cursor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_cursor'
        module_type_store = module_type_store.open_function_context('draw_cursor', 2055, 4, False)
        # Assigning a type to the variable 'self' (line 2056)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2056, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.draw_cursor.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.draw_cursor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.draw_cursor.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.draw_cursor.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.draw_cursor')
        FigureCanvasBase.draw_cursor.__dict__.__setitem__('stypy_param_names_list', ['event'])
        FigureCanvasBase.draw_cursor.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.draw_cursor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.draw_cursor.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.draw_cursor.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.draw_cursor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.draw_cursor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.draw_cursor', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_cursor', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_cursor(...)' code ##################

        unicode_16512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2059, (-1)), 'unicode', u'\n        Draw a cursor in the event.axes if inaxes is not None.  Use\n        native GUI drawing for efficiency if possible\n        ')
        
        # ################# End of 'draw_cursor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_cursor' in the type store
        # Getting the type of 'stypy_return_type' (line 2055)
        stypy_return_type_16513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16513)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_cursor'
        return stypy_return_type_16513


    @norecursion
    def get_width_height(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_width_height'
        module_type_store = module_type_store.open_function_context('get_width_height', 2061, 4, False)
        # Assigning a type to the variable 'self' (line 2062)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2062, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.get_width_height.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.get_width_height.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.get_width_height.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.get_width_height.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.get_width_height')
        FigureCanvasBase.get_width_height.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasBase.get_width_height.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.get_width_height.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.get_width_height.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.get_width_height.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.get_width_height.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.get_width_height.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.get_width_height', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_width_height', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_width_height(...)' code ##################

        unicode_16514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2065, (-1)), 'unicode', u'\n        Return the figure width and height in points or pixels\n        (depending on the backend), truncated to integers\n        ')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2066)
        tuple_16515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2066, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2066)
        # Adding element type (line 2066)
        
        # Call to int(...): (line 2066)
        # Processing the call arguments (line 2066)
        # Getting the type of 'self' (line 2066)
        self_16517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 19), 'self', False)
        # Obtaining the member 'figure' of a type (line 2066)
        figure_16518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2066, 19), self_16517, 'figure')
        # Obtaining the member 'bbox' of a type (line 2066)
        bbox_16519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2066, 19), figure_16518, 'bbox')
        # Obtaining the member 'width' of a type (line 2066)
        width_16520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2066, 19), bbox_16519, 'width')
        # Processing the call keyword arguments (line 2066)
        kwargs_16521 = {}
        # Getting the type of 'int' (line 2066)
        int_16516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 15), 'int', False)
        # Calling int(args, kwargs) (line 2066)
        int_call_result_16522 = invoke(stypy.reporting.localization.Localization(__file__, 2066, 15), int_16516, *[width_16520], **kwargs_16521)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2066, 15), tuple_16515, int_call_result_16522)
        # Adding element type (line 2066)
        
        # Call to int(...): (line 2066)
        # Processing the call arguments (line 2066)
        # Getting the type of 'self' (line 2066)
        self_16524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 48), 'self', False)
        # Obtaining the member 'figure' of a type (line 2066)
        figure_16525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2066, 48), self_16524, 'figure')
        # Obtaining the member 'bbox' of a type (line 2066)
        bbox_16526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2066, 48), figure_16525, 'bbox')
        # Obtaining the member 'height' of a type (line 2066)
        height_16527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2066, 48), bbox_16526, 'height')
        # Processing the call keyword arguments (line 2066)
        kwargs_16528 = {}
        # Getting the type of 'int' (line 2066)
        int_16523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 44), 'int', False)
        # Calling int(args, kwargs) (line 2066)
        int_call_result_16529 = invoke(stypy.reporting.localization.Localization(__file__, 2066, 44), int_16523, *[height_16527], **kwargs_16528)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2066, 15), tuple_16515, int_call_result_16529)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2066, 8), 'stypy_return_type', tuple_16515)
        
        # ################# End of 'get_width_height(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_width_height' in the type store
        # Getting the type of 'stypy_return_type' (line 2061)
        stypy_return_type_16530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16530)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_width_height'
        return stypy_return_type_16530


    @norecursion
    def get_supported_filetypes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_supported_filetypes'
        module_type_store = module_type_store.open_function_context('get_supported_filetypes', 2068, 4, False)
        # Assigning a type to the variable 'self' (line 2069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2069, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.get_supported_filetypes.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.get_supported_filetypes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.get_supported_filetypes.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.get_supported_filetypes.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.get_supported_filetypes')
        FigureCanvasBase.get_supported_filetypes.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasBase.get_supported_filetypes.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.get_supported_filetypes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.get_supported_filetypes.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.get_supported_filetypes.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.get_supported_filetypes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.get_supported_filetypes.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.get_supported_filetypes', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_supported_filetypes', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_supported_filetypes(...)' code ##################

        unicode_16531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2070, 8), 'unicode', u'Return dict of savefig file formats supported by this backend')
        # Getting the type of 'cls' (line 2071)
        cls_16532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 15), 'cls')
        # Obtaining the member 'filetypes' of a type (line 2071)
        filetypes_16533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2071, 15), cls_16532, 'filetypes')
        # Assigning a type to the variable 'stypy_return_type' (line 2071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2071, 8), 'stypy_return_type', filetypes_16533)
        
        # ################# End of 'get_supported_filetypes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_supported_filetypes' in the type store
        # Getting the type of 'stypy_return_type' (line 2068)
        stypy_return_type_16534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16534)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_supported_filetypes'
        return stypy_return_type_16534


    @norecursion
    def get_supported_filetypes_grouped(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_supported_filetypes_grouped'
        module_type_store = module_type_store.open_function_context('get_supported_filetypes_grouped', 2073, 4, False)
        # Assigning a type to the variable 'self' (line 2074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2074, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.get_supported_filetypes_grouped.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.get_supported_filetypes_grouped.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.get_supported_filetypes_grouped.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.get_supported_filetypes_grouped.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.get_supported_filetypes_grouped')
        FigureCanvasBase.get_supported_filetypes_grouped.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasBase.get_supported_filetypes_grouped.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.get_supported_filetypes_grouped.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.get_supported_filetypes_grouped.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.get_supported_filetypes_grouped.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.get_supported_filetypes_grouped.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.get_supported_filetypes_grouped.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.get_supported_filetypes_grouped', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_supported_filetypes_grouped', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_supported_filetypes_grouped(...)' code ##################

        unicode_16535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2078, (-1)), 'unicode', u"Return a dict of savefig file formats supported by this backend,\n        where the keys are a file type name, such as 'Joint Photographic\n        Experts Group', and the values are a list of filename extensions used\n        for that filetype, such as ['jpg', 'jpeg'].")
        
        # Assigning a Dict to a Name (line 2079):
        
        # Assigning a Dict to a Name (line 2079):
        
        # Assigning a Dict to a Name (line 2079):
        
        # Obtaining an instance of the builtin type 'dict' (line 2079)
        dict_16536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2079, 20), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2079)
        
        # Assigning a type to the variable 'groupings' (line 2079)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2079, 8), 'groupings', dict_16536)
        
        
        # Call to iteritems(...): (line 2080)
        # Processing the call arguments (line 2080)
        # Getting the type of 'cls' (line 2080)
        cls_16539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 39), 'cls', False)
        # Obtaining the member 'filetypes' of a type (line 2080)
        filetypes_16540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 39), cls_16539, 'filetypes')
        # Processing the call keyword arguments (line 2080)
        kwargs_16541 = {}
        # Getting the type of 'six' (line 2080)
        six_16537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 25), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 2080)
        iteritems_16538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 25), six_16537, 'iteritems')
        # Calling iteritems(args, kwargs) (line 2080)
        iteritems_call_result_16542 = invoke(stypy.reporting.localization.Localization(__file__, 2080, 25), iteritems_16538, *[filetypes_16540], **kwargs_16541)
        
        # Testing the type of a for loop iterable (line 2080)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2080, 8), iteritems_call_result_16542)
        # Getting the type of the for loop variable (line 2080)
        for_loop_var_16543 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2080, 8), iteritems_call_result_16542)
        # Assigning a type to the variable 'ext' (line 2080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 8), 'ext', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2080, 8), for_loop_var_16543))
        # Assigning a type to the variable 'name' (line 2080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 8), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2080, 8), for_loop_var_16543))
        # SSA begins for a for statement (line 2080)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 2081)
        # Processing the call arguments (line 2081)
        # Getting the type of 'ext' (line 2081)
        ext_16551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 50), 'ext', False)
        # Processing the call keyword arguments (line 2081)
        kwargs_16552 = {}
        
        # Call to setdefault(...): (line 2081)
        # Processing the call arguments (line 2081)
        # Getting the type of 'name' (line 2081)
        name_16546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 33), 'name', False)
        
        # Obtaining an instance of the builtin type 'list' (line 2081)
        list_16547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2081, 39), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2081)
        
        # Processing the call keyword arguments (line 2081)
        kwargs_16548 = {}
        # Getting the type of 'groupings' (line 2081)
        groupings_16544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 12), 'groupings', False)
        # Obtaining the member 'setdefault' of a type (line 2081)
        setdefault_16545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2081, 12), groupings_16544, 'setdefault')
        # Calling setdefault(args, kwargs) (line 2081)
        setdefault_call_result_16549 = invoke(stypy.reporting.localization.Localization(__file__, 2081, 12), setdefault_16545, *[name_16546, list_16547], **kwargs_16548)
        
        # Obtaining the member 'append' of a type (line 2081)
        append_16550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2081, 12), setdefault_call_result_16549, 'append')
        # Calling append(args, kwargs) (line 2081)
        append_call_result_16553 = invoke(stypy.reporting.localization.Localization(__file__, 2081, 12), append_16550, *[ext_16551], **kwargs_16552)
        
        
        # Call to sort(...): (line 2082)
        # Processing the call keyword arguments (line 2082)
        kwargs_16559 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 2082)
        name_16554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 22), 'name', False)
        # Getting the type of 'groupings' (line 2082)
        groupings_16555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 12), 'groupings', False)
        # Obtaining the member '__getitem__' of a type (line 2082)
        getitem___16556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2082, 12), groupings_16555, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2082)
        subscript_call_result_16557 = invoke(stypy.reporting.localization.Localization(__file__, 2082, 12), getitem___16556, name_16554)
        
        # Obtaining the member 'sort' of a type (line 2082)
        sort_16558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2082, 12), subscript_call_result_16557, 'sort')
        # Calling sort(args, kwargs) (line 2082)
        sort_call_result_16560 = invoke(stypy.reporting.localization.Localization(__file__, 2082, 12), sort_16558, *[], **kwargs_16559)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'groupings' (line 2083)
        groupings_16561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 15), 'groupings')
        # Assigning a type to the variable 'stypy_return_type' (line 2083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 8), 'stypy_return_type', groupings_16561)
        
        # ################# End of 'get_supported_filetypes_grouped(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_supported_filetypes_grouped' in the type store
        # Getting the type of 'stypy_return_type' (line 2073)
        stypy_return_type_16562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16562)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_supported_filetypes_grouped'
        return stypy_return_type_16562


    @norecursion
    def _get_output_canvas(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_output_canvas'
        module_type_store = module_type_store.open_function_context('_get_output_canvas', 2085, 4, False)
        # Assigning a type to the variable 'self' (line 2086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2086, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase._get_output_canvas.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase._get_output_canvas.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase._get_output_canvas.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase._get_output_canvas.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase._get_output_canvas')
        FigureCanvasBase._get_output_canvas.__dict__.__setitem__('stypy_param_names_list', ['format'])
        FigureCanvasBase._get_output_canvas.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase._get_output_canvas.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase._get_output_canvas.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase._get_output_canvas.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase._get_output_canvas.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase._get_output_canvas.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase._get_output_canvas', ['format'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_output_canvas', localization, ['format'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_output_canvas(...)' code ##################

        unicode_16563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2089, (-1)), 'unicode', u'Return a canvas that is suitable for saving figures to a specified\n        file format. If necessary, this function will switch to a registered\n        backend that supports the format.\n        ')
        
        # Assigning a BinOp to a Name (line 2090):
        
        # Assigning a BinOp to a Name (line 2090):
        
        # Assigning a BinOp to a Name (line 2090):
        unicode_16564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2090, 22), 'unicode', u'print_%s')
        # Getting the type of 'format' (line 2090)
        format_16565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 35), 'format')
        # Applying the binary operator '%' (line 2090)
        result_mod_16566 = python_operator(stypy.reporting.localization.Localization(__file__, 2090, 22), '%', unicode_16564, format_16565)
        
        # Assigning a type to the variable 'method_name' (line 2090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2090, 8), 'method_name', result_mod_16566)
        
        
        # Call to hasattr(...): (line 2093)
        # Processing the call arguments (line 2093)
        # Getting the type of 'self' (line 2093)
        self_16568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 19), 'self', False)
        # Getting the type of 'method_name' (line 2093)
        method_name_16569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 25), 'method_name', False)
        # Processing the call keyword arguments (line 2093)
        kwargs_16570 = {}
        # Getting the type of 'hasattr' (line 2093)
        hasattr_16567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 11), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 2093)
        hasattr_call_result_16571 = invoke(stypy.reporting.localization.Localization(__file__, 2093, 11), hasattr_16567, *[self_16568, method_name_16569], **kwargs_16570)
        
        # Testing the type of an if condition (line 2093)
        if_condition_16572 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2093, 8), hasattr_call_result_16571)
        # Assigning a type to the variable 'if_condition_16572' (line 2093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2093, 8), 'if_condition_16572', if_condition_16572)
        # SSA begins for if statement (line 2093)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 2094)
        self_16573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 19), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 2094)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 12), 'stypy_return_type', self_16573)
        # SSA join for if statement (line 2093)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2097):
        
        # Assigning a Call to a Name (line 2097):
        
        # Assigning a Call to a Name (line 2097):
        
        # Call to get_registered_canvas_class(...): (line 2097)
        # Processing the call arguments (line 2097)
        # Getting the type of 'format' (line 2097)
        format_16575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 51), 'format', False)
        # Processing the call keyword arguments (line 2097)
        kwargs_16576 = {}
        # Getting the type of 'get_registered_canvas_class' (line 2097)
        get_registered_canvas_class_16574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 23), 'get_registered_canvas_class', False)
        # Calling get_registered_canvas_class(args, kwargs) (line 2097)
        get_registered_canvas_class_call_result_16577 = invoke(stypy.reporting.localization.Localization(__file__, 2097, 23), get_registered_canvas_class_16574, *[format_16575], **kwargs_16576)
        
        # Assigning a type to the variable 'canvas_class' (line 2097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2097, 8), 'canvas_class', get_registered_canvas_class_call_result_16577)
        
        # Getting the type of 'canvas_class' (line 2098)
        canvas_class_16578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2098, 11), 'canvas_class')
        # Testing the type of an if condition (line 2098)
        if_condition_16579 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2098, 8), canvas_class_16578)
        # Assigning a type to the variable 'if_condition_16579' (line 2098)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2098, 8), 'if_condition_16579', if_condition_16579)
        # SSA begins for if statement (line 2098)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to switch_backends(...): (line 2099)
        # Processing the call arguments (line 2099)
        # Getting the type of 'canvas_class' (line 2099)
        canvas_class_16582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2099, 40), 'canvas_class', False)
        # Processing the call keyword arguments (line 2099)
        kwargs_16583 = {}
        # Getting the type of 'self' (line 2099)
        self_16580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2099, 19), 'self', False)
        # Obtaining the member 'switch_backends' of a type (line 2099)
        switch_backends_16581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2099, 19), self_16580, 'switch_backends')
        # Calling switch_backends(args, kwargs) (line 2099)
        switch_backends_call_result_16584 = invoke(stypy.reporting.localization.Localization(__file__, 2099, 19), switch_backends_16581, *[canvas_class_16582], **kwargs_16583)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2099, 12), 'stypy_return_type', switch_backends_call_result_16584)
        # SSA join for if statement (line 2098)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2102):
        
        # Assigning a Call to a Name (line 2102):
        
        # Assigning a Call to a Name (line 2102):
        
        # Call to sorted(...): (line 2102)
        # Processing the call arguments (line 2102)
        
        # Call to get_supported_filetypes(...): (line 2102)
        # Processing the call keyword arguments (line 2102)
        kwargs_16588 = {}
        # Getting the type of 'self' (line 2102)
        self_16586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 25), 'self', False)
        # Obtaining the member 'get_supported_filetypes' of a type (line 2102)
        get_supported_filetypes_16587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2102, 25), self_16586, 'get_supported_filetypes')
        # Calling get_supported_filetypes(args, kwargs) (line 2102)
        get_supported_filetypes_call_result_16589 = invoke(stypy.reporting.localization.Localization(__file__, 2102, 25), get_supported_filetypes_16587, *[], **kwargs_16588)
        
        # Processing the call keyword arguments (line 2102)
        kwargs_16590 = {}
        # Getting the type of 'sorted' (line 2102)
        sorted_16585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 18), 'sorted', False)
        # Calling sorted(args, kwargs) (line 2102)
        sorted_call_result_16591 = invoke(stypy.reporting.localization.Localization(__file__, 2102, 18), sorted_16585, *[get_supported_filetypes_call_result_16589], **kwargs_16590)
        
        # Assigning a type to the variable 'formats' (line 2102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2102, 8), 'formats', sorted_call_result_16591)
        
        # Call to ValueError(...): (line 2103)
        # Processing the call arguments (line 2103)
        unicode_16593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2103, 25), 'unicode', u'Format "%s" is not supported.\nSupported formats: %s.')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2105)
        tuple_16594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2105, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2105)
        # Adding element type (line 2105)
        # Getting the type of 'format' (line 2105)
        format_16595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 34), 'format', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2105, 34), tuple_16594, format_16595)
        # Adding element type (line 2105)
        
        # Call to join(...): (line 2105)
        # Processing the call arguments (line 2105)
        # Getting the type of 'formats' (line 2105)
        formats_16598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 52), 'formats', False)
        # Processing the call keyword arguments (line 2105)
        kwargs_16599 = {}
        unicode_16596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2105, 42), 'unicode', u', ')
        # Obtaining the member 'join' of a type (line 2105)
        join_16597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2105, 42), unicode_16596, 'join')
        # Calling join(args, kwargs) (line 2105)
        join_call_result_16600 = invoke(stypy.reporting.localization.Localization(__file__, 2105, 42), join_16597, *[formats_16598], **kwargs_16599)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2105, 34), tuple_16594, join_call_result_16600)
        
        # Applying the binary operator '%' (line 2103)
        result_mod_16601 = python_operator(stypy.reporting.localization.Localization(__file__, 2103, 25), '%', unicode_16593, tuple_16594)
        
        # Processing the call keyword arguments (line 2103)
        kwargs_16602 = {}
        # Getting the type of 'ValueError' (line 2103)
        ValueError_16592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 14), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2103)
        ValueError_call_result_16603 = invoke(stypy.reporting.localization.Localization(__file__, 2103, 14), ValueError_16592, *[result_mod_16601], **kwargs_16602)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2103, 8), ValueError_call_result_16603, 'raise parameter', BaseException)
        
        # ################# End of '_get_output_canvas(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_output_canvas' in the type store
        # Getting the type of 'stypy_return_type' (line 2085)
        stypy_return_type_16604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16604)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_output_canvas'
        return stypy_return_type_16604


    @norecursion
    def print_figure(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2107)
        None_16605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 41), 'None')
        # Getting the type of 'None' (line 2107)
        None_16606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 57), 'None')
        # Getting the type of 'None' (line 2107)
        None_16607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 73), 'None')
        unicode_16608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2108, 33), 'unicode', u'portrait')
        # Getting the type of 'None' (line 2108)
        None_16609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2108, 52), 'None')
        defaults = [None_16605, None_16606, None_16607, unicode_16608, None_16609]
        # Create a new context for function 'print_figure'
        module_type_store = module_type_store.open_function_context('print_figure', 2107, 4, False)
        # Assigning a type to the variable 'self' (line 2108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2108, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.print_figure.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.print_figure.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.print_figure.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.print_figure.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.print_figure')
        FigureCanvasBase.print_figure.__dict__.__setitem__('stypy_param_names_list', ['filename', 'dpi', 'facecolor', 'edgecolor', 'orientation', 'format'])
        FigureCanvasBase.print_figure.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.print_figure.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasBase.print_figure.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.print_figure.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.print_figure.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.print_figure.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.print_figure', ['filename', 'dpi', 'facecolor', 'edgecolor', 'orientation', 'format'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'print_figure', localization, ['filename', 'dpi', 'facecolor', 'edgecolor', 'orientation', 'format'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'print_figure(...)' code ##################

        unicode_16610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2148, (-1)), 'unicode', u"\n        Render the figure to hardcopy. Set the figure patch face and edge\n        colors.  This is useful because some of the GUIs have a gray figure\n        face color background and you'll probably want to override this on\n        hardcopy.\n\n        Parameters\n        ----------\n        filename\n            can also be a file object on image backends\n\n        orientation : {'landscape', 'portrait'}, optional\n            only currently applies to PostScript printing.\n\n        dpi : scalar, optional\n            the dots per inch to save the figure in; if None, use savefig.dpi\n\n        facecolor : color spec or None, optional\n            the facecolor of the figure; if None, defaults to savefig.facecolor\n\n        edgecolor : color spec or None, optional\n            the edgecolor of the figure; if None, defaults to savefig.edgecolor\n\n        format : str, optional\n            when set, forcibly set the file format to save to\n\n        bbox_inches : str or `~matplotlib.transforms.Bbox`, optional\n            Bbox in inches. Only the given portion of the figure is\n            saved. If 'tight', try to figure out the tight bbox of\n            the figure. If None, use savefig.bbox\n\n        pad_inches : scalar, optional\n            Amount of padding around the figure when bbox_inches is\n            'tight'. If None, use savefig.pad_inches\n\n        bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional\n            A list of extra artists that will be considered when the\n            tight bbox is calculated.\n\n        ")
        
        # Assigning a Name to a Attribute (line 2149):
        
        # Assigning a Name to a Attribute (line 2149):
        
        # Assigning a Name to a Attribute (line 2149):
        # Getting the type of 'True' (line 2149)
        True_16611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 26), 'True')
        # Getting the type of 'self' (line 2149)
        self_16612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 8), 'self')
        # Setting the type of the member '_is_saving' of a type (line 2149)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2149, 8), self_16612, '_is_saving', True_16611)
        
        # Type idiom detected: calculating its left and rigth part (line 2151)
        # Getting the type of 'format' (line 2151)
        format_16613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 11), 'format')
        # Getting the type of 'None' (line 2151)
        None_16614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 21), 'None')
        
        (may_be_16615, more_types_in_union_16616) = may_be_none(format_16613, None_16614)

        if may_be_16615:

            if more_types_in_union_16616:
                # Runtime conditional SSA (line 2151)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Call to isinstance(...): (line 2153)
            # Processing the call arguments (line 2153)
            # Getting the type of 'filename' (line 2153)
            filename_16618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 26), 'filename', False)
            # Getting the type of 'six' (line 2153)
            six_16619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 36), 'six', False)
            # Obtaining the member 'string_types' of a type (line 2153)
            string_types_16620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2153, 36), six_16619, 'string_types')
            # Processing the call keyword arguments (line 2153)
            kwargs_16621 = {}
            # Getting the type of 'isinstance' (line 2153)
            isinstance_16617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 2153)
            isinstance_call_result_16622 = invoke(stypy.reporting.localization.Localization(__file__, 2153, 15), isinstance_16617, *[filename_16618, string_types_16620], **kwargs_16621)
            
            # Testing the type of an if condition (line 2153)
            if_condition_16623 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2153, 12), isinstance_call_result_16622)
            # Assigning a type to the variable 'if_condition_16623' (line 2153)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2153, 12), 'if_condition_16623', if_condition_16623)
            # SSA begins for if statement (line 2153)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 2154):
            
            # Assigning a Subscript to a Name (line 2154):
            
            # Assigning a Subscript to a Name (line 2154):
            
            # Obtaining the type of the subscript
            int_16624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2154, 55), 'int')
            slice_16625 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2154, 25), int_16624, None, None)
            
            # Obtaining the type of the subscript
            int_16626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2154, 52), 'int')
            
            # Call to splitext(...): (line 2154)
            # Processing the call arguments (line 2154)
            # Getting the type of 'filename' (line 2154)
            filename_16630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 42), 'filename', False)
            # Processing the call keyword arguments (line 2154)
            kwargs_16631 = {}
            # Getting the type of 'os' (line 2154)
            os_16627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 25), 'os', False)
            # Obtaining the member 'path' of a type (line 2154)
            path_16628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2154, 25), os_16627, 'path')
            # Obtaining the member 'splitext' of a type (line 2154)
            splitext_16629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2154, 25), path_16628, 'splitext')
            # Calling splitext(args, kwargs) (line 2154)
            splitext_call_result_16632 = invoke(stypy.reporting.localization.Localization(__file__, 2154, 25), splitext_16629, *[filename_16630], **kwargs_16631)
            
            # Obtaining the member '__getitem__' of a type (line 2154)
            getitem___16633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2154, 25), splitext_call_result_16632, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2154)
            subscript_call_result_16634 = invoke(stypy.reporting.localization.Localization(__file__, 2154, 25), getitem___16633, int_16626)
            
            # Obtaining the member '__getitem__' of a type (line 2154)
            getitem___16635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2154, 25), subscript_call_result_16634, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2154)
            subscript_call_result_16636 = invoke(stypy.reporting.localization.Localization(__file__, 2154, 25), getitem___16635, slice_16625)
            
            # Assigning a type to the variable 'format' (line 2154)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2154, 16), 'format', subscript_call_result_16636)
            # SSA join for if statement (line 2153)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'format' (line 2155)
            format_16637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 15), 'format')
            # Getting the type of 'None' (line 2155)
            None_16638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 25), 'None')
            # Applying the binary operator 'is' (line 2155)
            result_is__16639 = python_operator(stypy.reporting.localization.Localization(__file__, 2155, 15), 'is', format_16637, None_16638)
            
            
            # Getting the type of 'format' (line 2155)
            format_16640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 33), 'format')
            unicode_16641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2155, 43), 'unicode', u'')
            # Applying the binary operator '==' (line 2155)
            result_eq_16642 = python_operator(stypy.reporting.localization.Localization(__file__, 2155, 33), '==', format_16640, unicode_16641)
            
            # Applying the binary operator 'or' (line 2155)
            result_or_keyword_16643 = python_operator(stypy.reporting.localization.Localization(__file__, 2155, 15), 'or', result_is__16639, result_eq_16642)
            
            # Testing the type of an if condition (line 2155)
            if_condition_16644 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2155, 12), result_or_keyword_16643)
            # Assigning a type to the variable 'if_condition_16644' (line 2155)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2155, 12), 'if_condition_16644', if_condition_16644)
            # SSA begins for if statement (line 2155)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 2156):
            
            # Assigning a Call to a Name (line 2156):
            
            # Assigning a Call to a Name (line 2156):
            
            # Call to get_default_filetype(...): (line 2156)
            # Processing the call keyword arguments (line 2156)
            kwargs_16647 = {}
            # Getting the type of 'self' (line 2156)
            self_16645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 25), 'self', False)
            # Obtaining the member 'get_default_filetype' of a type (line 2156)
            get_default_filetype_16646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2156, 25), self_16645, 'get_default_filetype')
            # Calling get_default_filetype(args, kwargs) (line 2156)
            get_default_filetype_call_result_16648 = invoke(stypy.reporting.localization.Localization(__file__, 2156, 25), get_default_filetype_16646, *[], **kwargs_16647)
            
            # Assigning a type to the variable 'format' (line 2156)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2156, 16), 'format', get_default_filetype_call_result_16648)
            
            
            # Call to isinstance(...): (line 2157)
            # Processing the call arguments (line 2157)
            # Getting the type of 'filename' (line 2157)
            filename_16650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 30), 'filename', False)
            # Getting the type of 'six' (line 2157)
            six_16651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 40), 'six', False)
            # Obtaining the member 'string_types' of a type (line 2157)
            string_types_16652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2157, 40), six_16651, 'string_types')
            # Processing the call keyword arguments (line 2157)
            kwargs_16653 = {}
            # Getting the type of 'isinstance' (line 2157)
            isinstance_16649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 19), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 2157)
            isinstance_call_result_16654 = invoke(stypy.reporting.localization.Localization(__file__, 2157, 19), isinstance_16649, *[filename_16650, string_types_16652], **kwargs_16653)
            
            # Testing the type of an if condition (line 2157)
            if_condition_16655 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2157, 16), isinstance_call_result_16654)
            # Assigning a type to the variable 'if_condition_16655' (line 2157)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2157, 16), 'if_condition_16655', if_condition_16655)
            # SSA begins for if statement (line 2157)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 2158):
            
            # Assigning a BinOp to a Name (line 2158):
            
            # Assigning a BinOp to a Name (line 2158):
            
            # Call to rstrip(...): (line 2158)
            # Processing the call arguments (line 2158)
            unicode_16658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2158, 47), 'unicode', u'.')
            # Processing the call keyword arguments (line 2158)
            kwargs_16659 = {}
            # Getting the type of 'filename' (line 2158)
            filename_16656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 31), 'filename', False)
            # Obtaining the member 'rstrip' of a type (line 2158)
            rstrip_16657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2158, 31), filename_16656, 'rstrip')
            # Calling rstrip(args, kwargs) (line 2158)
            rstrip_call_result_16660 = invoke(stypy.reporting.localization.Localization(__file__, 2158, 31), rstrip_16657, *[unicode_16658], **kwargs_16659)
            
            unicode_16661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2158, 54), 'unicode', u'.')
            # Applying the binary operator '+' (line 2158)
            result_add_16662 = python_operator(stypy.reporting.localization.Localization(__file__, 2158, 31), '+', rstrip_call_result_16660, unicode_16661)
            
            # Getting the type of 'format' (line 2158)
            format_16663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 60), 'format')
            # Applying the binary operator '+' (line 2158)
            result_add_16664 = python_operator(stypy.reporting.localization.Localization(__file__, 2158, 58), '+', result_add_16662, format_16663)
            
            # Assigning a type to the variable 'filename' (line 2158)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2158, 20), 'filename', result_add_16664)
            # SSA join for if statement (line 2157)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 2155)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_16616:
                # SSA join for if statement (line 2151)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 2159):
        
        # Assigning a Call to a Name (line 2159):
        
        # Assigning a Call to a Name (line 2159):
        
        # Call to lower(...): (line 2159)
        # Processing the call keyword arguments (line 2159)
        kwargs_16667 = {}
        # Getting the type of 'format' (line 2159)
        format_16665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 17), 'format', False)
        # Obtaining the member 'lower' of a type (line 2159)
        lower_16666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2159, 17), format_16665, 'lower')
        # Calling lower(args, kwargs) (line 2159)
        lower_call_result_16668 = invoke(stypy.reporting.localization.Localization(__file__, 2159, 17), lower_16666, *[], **kwargs_16667)
        
        # Assigning a type to the variable 'format' (line 2159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2159, 8), 'format', lower_call_result_16668)
        
        # Assigning a Call to a Name (line 2162):
        
        # Assigning a Call to a Name (line 2162):
        
        # Assigning a Call to a Name (line 2162):
        
        # Call to _get_output_canvas(...): (line 2162)
        # Processing the call arguments (line 2162)
        # Getting the type of 'format' (line 2162)
        format_16671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 41), 'format', False)
        # Processing the call keyword arguments (line 2162)
        kwargs_16672 = {}
        # Getting the type of 'self' (line 2162)
        self_16669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 17), 'self', False)
        # Obtaining the member '_get_output_canvas' of a type (line 2162)
        _get_output_canvas_16670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2162, 17), self_16669, '_get_output_canvas')
        # Calling _get_output_canvas(args, kwargs) (line 2162)
        _get_output_canvas_call_result_16673 = invoke(stypy.reporting.localization.Localization(__file__, 2162, 17), _get_output_canvas_16670, *[format_16671], **kwargs_16672)
        
        # Assigning a type to the variable 'canvas' (line 2162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2162, 8), 'canvas', _get_output_canvas_call_result_16673)
        
        # Assigning a Call to a Name (line 2163):
        
        # Assigning a Call to a Name (line 2163):
        
        # Assigning a Call to a Name (line 2163):
        
        # Call to getattr(...): (line 2163)
        # Processing the call arguments (line 2163)
        # Getting the type of 'canvas' (line 2163)
        canvas_16675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 31), 'canvas', False)
        unicode_16676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2163, 39), 'unicode', u'print_%s')
        # Getting the type of 'format' (line 2163)
        format_16677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 52), 'format', False)
        # Applying the binary operator '%' (line 2163)
        result_mod_16678 = python_operator(stypy.reporting.localization.Localization(__file__, 2163, 39), '%', unicode_16676, format_16677)
        
        # Processing the call keyword arguments (line 2163)
        kwargs_16679 = {}
        # Getting the type of 'getattr' (line 2163)
        getattr_16674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 23), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2163)
        getattr_call_result_16680 = invoke(stypy.reporting.localization.Localization(__file__, 2163, 23), getattr_16674, *[canvas_16675, result_mod_16678], **kwargs_16679)
        
        # Assigning a type to the variable 'print_method' (line 2163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2163, 8), 'print_method', getattr_call_result_16680)
        
        # Type idiom detected: calculating its left and rigth part (line 2165)
        # Getting the type of 'dpi' (line 2165)
        dpi_16681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 11), 'dpi')
        # Getting the type of 'None' (line 2165)
        None_16682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 18), 'None')
        
        (may_be_16683, more_types_in_union_16684) = may_be_none(dpi_16681, None_16682)

        if may_be_16683:

            if more_types_in_union_16684:
                # Runtime conditional SSA (line 2165)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 2166):
            
            # Assigning a Subscript to a Name (line 2166):
            
            # Assigning a Subscript to a Name (line 2166):
            
            # Obtaining the type of the subscript
            unicode_16685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2166, 27), 'unicode', u'savefig.dpi')
            # Getting the type of 'rcParams' (line 2166)
            rcParams_16686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 18), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 2166)
            getitem___16687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2166, 18), rcParams_16686, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2166)
            subscript_call_result_16688 = invoke(stypy.reporting.localization.Localization(__file__, 2166, 18), getitem___16687, unicode_16685)
            
            # Assigning a type to the variable 'dpi' (line 2166)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2166, 12), 'dpi', subscript_call_result_16688)

            if more_types_in_union_16684:
                # SSA join for if statement (line 2165)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'dpi' (line 2168)
        dpi_16689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2168, 11), 'dpi')
        unicode_16690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2168, 18), 'unicode', u'figure')
        # Applying the binary operator '==' (line 2168)
        result_eq_16691 = python_operator(stypy.reporting.localization.Localization(__file__, 2168, 11), '==', dpi_16689, unicode_16690)
        
        # Testing the type of an if condition (line 2168)
        if_condition_16692 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2168, 8), result_eq_16691)
        # Assigning a type to the variable 'if_condition_16692' (line 2168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2168, 8), 'if_condition_16692', if_condition_16692)
        # SSA begins for if statement (line 2168)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2169):
        
        # Assigning a Call to a Name (line 2169):
        
        # Assigning a Call to a Name (line 2169):
        
        # Call to getattr(...): (line 2169)
        # Processing the call arguments (line 2169)
        # Getting the type of 'self' (line 2169)
        self_16694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 26), 'self', False)
        # Obtaining the member 'figure' of a type (line 2169)
        figure_16695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2169, 26), self_16694, 'figure')
        unicode_16696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2169, 39), 'unicode', u'_original_dpi')
        # Getting the type of 'self' (line 2169)
        self_16697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 56), 'self', False)
        # Obtaining the member 'figure' of a type (line 2169)
        figure_16698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2169, 56), self_16697, 'figure')
        # Obtaining the member 'dpi' of a type (line 2169)
        dpi_16699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2169, 56), figure_16698, 'dpi')
        # Processing the call keyword arguments (line 2169)
        kwargs_16700 = {}
        # Getting the type of 'getattr' (line 2169)
        getattr_16693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 18), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2169)
        getattr_call_result_16701 = invoke(stypy.reporting.localization.Localization(__file__, 2169, 18), getattr_16693, *[figure_16695, unicode_16696, dpi_16699], **kwargs_16700)
        
        # Assigning a type to the variable 'dpi' (line 2169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 12), 'dpi', getattr_call_result_16701)
        # SSA join for if statement (line 2168)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 2171)
        # Getting the type of 'facecolor' (line 2171)
        facecolor_16702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 11), 'facecolor')
        # Getting the type of 'None' (line 2171)
        None_16703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 24), 'None')
        
        (may_be_16704, more_types_in_union_16705) = may_be_none(facecolor_16702, None_16703)

        if may_be_16704:

            if more_types_in_union_16705:
                # Runtime conditional SSA (line 2171)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 2172):
            
            # Assigning a Subscript to a Name (line 2172):
            
            # Assigning a Subscript to a Name (line 2172):
            
            # Obtaining the type of the subscript
            unicode_16706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2172, 33), 'unicode', u'savefig.facecolor')
            # Getting the type of 'rcParams' (line 2172)
            rcParams_16707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 24), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 2172)
            getitem___16708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2172, 24), rcParams_16707, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2172)
            subscript_call_result_16709 = invoke(stypy.reporting.localization.Localization(__file__, 2172, 24), getitem___16708, unicode_16706)
            
            # Assigning a type to the variable 'facecolor' (line 2172)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2172, 12), 'facecolor', subscript_call_result_16709)

            if more_types_in_union_16705:
                # SSA join for if statement (line 2171)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2173)
        # Getting the type of 'edgecolor' (line 2173)
        edgecolor_16710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 11), 'edgecolor')
        # Getting the type of 'None' (line 2173)
        None_16711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 24), 'None')
        
        (may_be_16712, more_types_in_union_16713) = may_be_none(edgecolor_16710, None_16711)

        if may_be_16712:

            if more_types_in_union_16713:
                # Runtime conditional SSA (line 2173)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 2174):
            
            # Assigning a Subscript to a Name (line 2174):
            
            # Assigning a Subscript to a Name (line 2174):
            
            # Obtaining the type of the subscript
            unicode_16714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2174, 33), 'unicode', u'savefig.edgecolor')
            # Getting the type of 'rcParams' (line 2174)
            rcParams_16715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 24), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 2174)
            getitem___16716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2174, 24), rcParams_16715, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2174)
            subscript_call_result_16717 = invoke(stypy.reporting.localization.Localization(__file__, 2174, 24), getitem___16716, unicode_16714)
            
            # Assigning a type to the variable 'edgecolor' (line 2174)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2174, 12), 'edgecolor', subscript_call_result_16717)

            if more_types_in_union_16713:
                # SSA join for if statement (line 2173)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Name (line 2176):
        
        # Assigning a Attribute to a Name (line 2176):
        
        # Assigning a Attribute to a Name (line 2176):
        # Getting the type of 'self' (line 2176)
        self_16718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 18), 'self')
        # Obtaining the member 'figure' of a type (line 2176)
        figure_16719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 18), self_16718, 'figure')
        # Obtaining the member 'dpi' of a type (line 2176)
        dpi_16720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 18), figure_16719, 'dpi')
        # Assigning a type to the variable 'origDPI' (line 2176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2176, 8), 'origDPI', dpi_16720)
        
        # Assigning a Call to a Name (line 2177):
        
        # Assigning a Call to a Name (line 2177):
        
        # Assigning a Call to a Name (line 2177):
        
        # Call to get_facecolor(...): (line 2177)
        # Processing the call keyword arguments (line 2177)
        kwargs_16724 = {}
        # Getting the type of 'self' (line 2177)
        self_16721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 24), 'self', False)
        # Obtaining the member 'figure' of a type (line 2177)
        figure_16722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2177, 24), self_16721, 'figure')
        # Obtaining the member 'get_facecolor' of a type (line 2177)
        get_facecolor_16723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2177, 24), figure_16722, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 2177)
        get_facecolor_call_result_16725 = invoke(stypy.reporting.localization.Localization(__file__, 2177, 24), get_facecolor_16723, *[], **kwargs_16724)
        
        # Assigning a type to the variable 'origfacecolor' (line 2177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2177, 8), 'origfacecolor', get_facecolor_call_result_16725)
        
        # Assigning a Call to a Name (line 2178):
        
        # Assigning a Call to a Name (line 2178):
        
        # Assigning a Call to a Name (line 2178):
        
        # Call to get_edgecolor(...): (line 2178)
        # Processing the call keyword arguments (line 2178)
        kwargs_16729 = {}
        # Getting the type of 'self' (line 2178)
        self_16726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 24), 'self', False)
        # Obtaining the member 'figure' of a type (line 2178)
        figure_16727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2178, 24), self_16726, 'figure')
        # Obtaining the member 'get_edgecolor' of a type (line 2178)
        get_edgecolor_16728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2178, 24), figure_16727, 'get_edgecolor')
        # Calling get_edgecolor(args, kwargs) (line 2178)
        get_edgecolor_call_result_16730 = invoke(stypy.reporting.localization.Localization(__file__, 2178, 24), get_edgecolor_16728, *[], **kwargs_16729)
        
        # Assigning a type to the variable 'origedgecolor' (line 2178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2178, 8), 'origedgecolor', get_edgecolor_call_result_16730)
        
        # Assigning a Name to a Attribute (line 2180):
        
        # Assigning a Name to a Attribute (line 2180):
        
        # Assigning a Name to a Attribute (line 2180):
        # Getting the type of 'dpi' (line 2180)
        dpi_16731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 26), 'dpi')
        # Getting the type of 'self' (line 2180)
        self_16732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 8), 'self')
        # Obtaining the member 'figure' of a type (line 2180)
        figure_16733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2180, 8), self_16732, 'figure')
        # Setting the type of the member 'dpi' of a type (line 2180)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2180, 8), figure_16733, 'dpi', dpi_16731)
        
        # Call to set_facecolor(...): (line 2181)
        # Processing the call arguments (line 2181)
        # Getting the type of 'facecolor' (line 2181)
        facecolor_16737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 34), 'facecolor', False)
        # Processing the call keyword arguments (line 2181)
        kwargs_16738 = {}
        # Getting the type of 'self' (line 2181)
        self_16734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 8), 'self', False)
        # Obtaining the member 'figure' of a type (line 2181)
        figure_16735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2181, 8), self_16734, 'figure')
        # Obtaining the member 'set_facecolor' of a type (line 2181)
        set_facecolor_16736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2181, 8), figure_16735, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 2181)
        set_facecolor_call_result_16739 = invoke(stypy.reporting.localization.Localization(__file__, 2181, 8), set_facecolor_16736, *[facecolor_16737], **kwargs_16738)
        
        
        # Call to set_edgecolor(...): (line 2182)
        # Processing the call arguments (line 2182)
        # Getting the type of 'edgecolor' (line 2182)
        edgecolor_16743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 34), 'edgecolor', False)
        # Processing the call keyword arguments (line 2182)
        kwargs_16744 = {}
        # Getting the type of 'self' (line 2182)
        self_16740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 8), 'self', False)
        # Obtaining the member 'figure' of a type (line 2182)
        figure_16741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 8), self_16740, 'figure')
        # Obtaining the member 'set_edgecolor' of a type (line 2182)
        set_edgecolor_16742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 8), figure_16741, 'set_edgecolor')
        # Calling set_edgecolor(args, kwargs) (line 2182)
        set_edgecolor_call_result_16745 = invoke(stypy.reporting.localization.Localization(__file__, 2182, 8), set_edgecolor_16742, *[edgecolor_16743], **kwargs_16744)
        
        
        # Assigning a Call to a Name (line 2184):
        
        # Assigning a Call to a Name (line 2184):
        
        # Assigning a Call to a Name (line 2184):
        
        # Call to pop(...): (line 2184)
        # Processing the call arguments (line 2184)
        unicode_16748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2184, 33), 'unicode', u'bbox_inches')
        # Getting the type of 'None' (line 2184)
        None_16749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 48), 'None', False)
        # Processing the call keyword arguments (line 2184)
        kwargs_16750 = {}
        # Getting the type of 'kwargs' (line 2184)
        kwargs_16746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 22), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 2184)
        pop_16747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 22), kwargs_16746, 'pop')
        # Calling pop(args, kwargs) (line 2184)
        pop_call_result_16751 = invoke(stypy.reporting.localization.Localization(__file__, 2184, 22), pop_16747, *[unicode_16748, None_16749], **kwargs_16750)
        
        # Assigning a type to the variable 'bbox_inches' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 8), 'bbox_inches', pop_call_result_16751)
        
        # Type idiom detected: calculating its left and rigth part (line 2185)
        # Getting the type of 'bbox_inches' (line 2185)
        bbox_inches_16752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 11), 'bbox_inches')
        # Getting the type of 'None' (line 2185)
        None_16753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 26), 'None')
        
        (may_be_16754, more_types_in_union_16755) = may_be_none(bbox_inches_16752, None_16753)

        if may_be_16754:

            if more_types_in_union_16755:
                # Runtime conditional SSA (line 2185)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 2186):
            
            # Assigning a Subscript to a Name (line 2186):
            
            # Assigning a Subscript to a Name (line 2186):
            
            # Obtaining the type of the subscript
            unicode_16756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2186, 35), 'unicode', u'savefig.bbox')
            # Getting the type of 'rcParams' (line 2186)
            rcParams_16757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 26), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 2186)
            getitem___16758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 26), rcParams_16757, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2186)
            subscript_call_result_16759 = invoke(stypy.reporting.localization.Localization(__file__, 2186, 26), getitem___16758, unicode_16756)
            
            # Assigning a type to the variable 'bbox_inches' (line 2186)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2186, 12), 'bbox_inches', subscript_call_result_16759)

            if more_types_in_union_16755:
                # SSA join for if statement (line 2185)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'bbox_inches' (line 2188)
        bbox_inches_16760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 11), 'bbox_inches')
        # Testing the type of an if condition (line 2188)
        if_condition_16761 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2188, 8), bbox_inches_16760)
        # Assigning a type to the variable 'if_condition_16761' (line 2188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 8), 'if_condition_16761', if_condition_16761)
        # SSA begins for if statement (line 2188)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'bbox_inches' (line 2190)
        bbox_inches_16762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2190, 15), 'bbox_inches')
        unicode_16763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2190, 30), 'unicode', u'tight')
        # Applying the binary operator '==' (line 2190)
        result_eq_16764 = python_operator(stypy.reporting.localization.Localization(__file__, 2190, 15), '==', bbox_inches_16762, unicode_16763)
        
        # Testing the type of an if condition (line 2190)
        if_condition_16765 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2190, 12), result_eq_16764)
        # Assigning a type to the variable 'if_condition_16765' (line 2190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2190, 12), 'if_condition_16765', if_condition_16765)
        # SSA begins for if statement (line 2190)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2201):
        
        # Assigning a Call to a Name (line 2201):
        
        # Assigning a Call to a Name (line 2201):
        
        # Call to print_method(...): (line 2201)
        # Processing the call arguments (line 2201)
        
        # Call to BytesIO(...): (line 2202)
        # Processing the call keyword arguments (line 2202)
        kwargs_16769 = {}
        # Getting the type of 'io' (line 2202)
        io_16767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 20), 'io', False)
        # Obtaining the member 'BytesIO' of a type (line 2202)
        BytesIO_16768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2202, 20), io_16767, 'BytesIO')
        # Calling BytesIO(args, kwargs) (line 2202)
        BytesIO_call_result_16770 = invoke(stypy.reporting.localization.Localization(__file__, 2202, 20), BytesIO_16768, *[], **kwargs_16769)
        
        # Processing the call keyword arguments (line 2201)
        # Getting the type of 'dpi' (line 2203)
        dpi_16771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 24), 'dpi', False)
        keyword_16772 = dpi_16771
        # Getting the type of 'facecolor' (line 2204)
        facecolor_16773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 30), 'facecolor', False)
        keyword_16774 = facecolor_16773
        # Getting the type of 'edgecolor' (line 2205)
        edgecolor_16775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 30), 'edgecolor', False)
        keyword_16776 = edgecolor_16775
        # Getting the type of 'orientation' (line 2206)
        orientation_16777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 32), 'orientation', False)
        keyword_16778 = orientation_16777
        # Getting the type of 'True' (line 2207)
        True_16779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 27), 'True', False)
        keyword_16780 = True_16779
        # Getting the type of 'kwargs' (line 2208)
        kwargs_16781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 22), 'kwargs', False)
        kwargs_16782 = {'edgecolor': keyword_16776, 'dryrun': keyword_16780, 'facecolor': keyword_16774, 'kwargs_16781': kwargs_16781, 'dpi': keyword_16772, 'orientation': keyword_16778}
        # Getting the type of 'print_method' (line 2201)
        print_method_16766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 25), 'print_method', False)
        # Calling print_method(args, kwargs) (line 2201)
        print_method_call_result_16783 = invoke(stypy.reporting.localization.Localization(__file__, 2201, 25), print_method_16766, *[BytesIO_call_result_16770], **kwargs_16782)
        
        # Assigning a type to the variable 'result' (line 2201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2201, 16), 'result', print_method_call_result_16783)
        
        # Assigning a Attribute to a Name (line 2209):
        
        # Assigning a Attribute to a Name (line 2209):
        
        # Assigning a Attribute to a Name (line 2209):
        # Getting the type of 'self' (line 2209)
        self_16784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 27), 'self')
        # Obtaining the member 'figure' of a type (line 2209)
        figure_16785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2209, 27), self_16784, 'figure')
        # Obtaining the member '_cachedRenderer' of a type (line 2209)
        _cachedRenderer_16786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2209, 27), figure_16785, '_cachedRenderer')
        # Assigning a type to the variable 'renderer' (line 2209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2209, 16), 'renderer', _cachedRenderer_16786)
        
        # Assigning a Call to a Name (line 2210):
        
        # Assigning a Call to a Name (line 2210):
        
        # Assigning a Call to a Name (line 2210):
        
        # Call to get_tightbbox(...): (line 2210)
        # Processing the call arguments (line 2210)
        # Getting the type of 'renderer' (line 2210)
        renderer_16790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 56), 'renderer', False)
        # Processing the call keyword arguments (line 2210)
        kwargs_16791 = {}
        # Getting the type of 'self' (line 2210)
        self_16787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 30), 'self', False)
        # Obtaining the member 'figure' of a type (line 2210)
        figure_16788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2210, 30), self_16787, 'figure')
        # Obtaining the member 'get_tightbbox' of a type (line 2210)
        get_tightbbox_16789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2210, 30), figure_16788, 'get_tightbbox')
        # Calling get_tightbbox(args, kwargs) (line 2210)
        get_tightbbox_call_result_16792 = invoke(stypy.reporting.localization.Localization(__file__, 2210, 30), get_tightbbox_16789, *[renderer_16790], **kwargs_16791)
        
        # Assigning a type to the variable 'bbox_inches' (line 2210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2210, 16), 'bbox_inches', get_tightbbox_call_result_16792)
        
        # Assigning a Call to a Name (line 2212):
        
        # Assigning a Call to a Name (line 2212):
        
        # Assigning a Call to a Name (line 2212):
        
        # Call to pop(...): (line 2212)
        # Processing the call arguments (line 2212)
        unicode_16795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2212, 42), 'unicode', u'bbox_extra_artists')
        # Getting the type of 'None' (line 2212)
        None_16796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 64), 'None', False)
        # Processing the call keyword arguments (line 2212)
        kwargs_16797 = {}
        # Getting the type of 'kwargs' (line 2212)
        kwargs_16793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 31), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 2212)
        pop_16794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2212, 31), kwargs_16793, 'pop')
        # Calling pop(args, kwargs) (line 2212)
        pop_call_result_16798 = invoke(stypy.reporting.localization.Localization(__file__, 2212, 31), pop_16794, *[unicode_16795, None_16796], **kwargs_16797)
        
        # Assigning a type to the variable 'bbox_artists' (line 2212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2212, 16), 'bbox_artists', pop_call_result_16798)
        
        # Type idiom detected: calculating its left and rigth part (line 2213)
        # Getting the type of 'bbox_artists' (line 2213)
        bbox_artists_16799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 19), 'bbox_artists')
        # Getting the type of 'None' (line 2213)
        None_16800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 35), 'None')
        
        (may_be_16801, more_types_in_union_16802) = may_be_none(bbox_artists_16799, None_16800)

        if may_be_16801:

            if more_types_in_union_16802:
                # Runtime conditional SSA (line 2213)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2214):
            
            # Assigning a Call to a Name (line 2214):
            
            # Assigning a Call to a Name (line 2214):
            
            # Call to get_default_bbox_extra_artists(...): (line 2214)
            # Processing the call keyword arguments (line 2214)
            kwargs_16806 = {}
            # Getting the type of 'self' (line 2214)
            self_16803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 35), 'self', False)
            # Obtaining the member 'figure' of a type (line 2214)
            figure_16804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 35), self_16803, 'figure')
            # Obtaining the member 'get_default_bbox_extra_artists' of a type (line 2214)
            get_default_bbox_extra_artists_16805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 35), figure_16804, 'get_default_bbox_extra_artists')
            # Calling get_default_bbox_extra_artists(args, kwargs) (line 2214)
            get_default_bbox_extra_artists_call_result_16807 = invoke(stypy.reporting.localization.Localization(__file__, 2214, 35), get_default_bbox_extra_artists_16805, *[], **kwargs_16806)
            
            # Assigning a type to the variable 'bbox_artists' (line 2214)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2214, 20), 'bbox_artists', get_default_bbox_extra_artists_call_result_16807)

            if more_types_in_union_16802:
                # SSA join for if statement (line 2213)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a List to a Name (line 2216):
        
        # Assigning a List to a Name (line 2216):
        
        # Assigning a List to a Name (line 2216):
        
        # Obtaining an instance of the builtin type 'list' (line 2216)
        list_16808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2216, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2216)
        
        # Assigning a type to the variable 'bbox_filtered' (line 2216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2216, 16), 'bbox_filtered', list_16808)
        
        # Getting the type of 'bbox_artists' (line 2217)
        bbox_artists_16809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 25), 'bbox_artists')
        # Testing the type of a for loop iterable (line 2217)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2217, 16), bbox_artists_16809)
        # Getting the type of the for loop variable (line 2217)
        for_loop_var_16810 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2217, 16), bbox_artists_16809)
        # Assigning a type to the variable 'a' (line 2217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2217, 16), 'a', for_loop_var_16810)
        # SSA begins for a for statement (line 2217)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 2218):
        
        # Assigning a Call to a Name (line 2218):
        
        # Assigning a Call to a Name (line 2218):
        
        # Call to get_window_extent(...): (line 2218)
        # Processing the call arguments (line 2218)
        # Getting the type of 'renderer' (line 2218)
        renderer_16813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 47), 'renderer', False)
        # Processing the call keyword arguments (line 2218)
        kwargs_16814 = {}
        # Getting the type of 'a' (line 2218)
        a_16811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 27), 'a', False)
        # Obtaining the member 'get_window_extent' of a type (line 2218)
        get_window_extent_16812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2218, 27), a_16811, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 2218)
        get_window_extent_call_result_16815 = invoke(stypy.reporting.localization.Localization(__file__, 2218, 27), get_window_extent_16812, *[renderer_16813], **kwargs_16814)
        
        # Assigning a type to the variable 'bbox' (line 2218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2218, 20), 'bbox', get_window_extent_call_result_16815)
        
        
        # Call to get_clip_on(...): (line 2219)
        # Processing the call keyword arguments (line 2219)
        kwargs_16818 = {}
        # Getting the type of 'a' (line 2219)
        a_16816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 23), 'a', False)
        # Obtaining the member 'get_clip_on' of a type (line 2219)
        get_clip_on_16817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2219, 23), a_16816, 'get_clip_on')
        # Calling get_clip_on(args, kwargs) (line 2219)
        get_clip_on_call_result_16819 = invoke(stypy.reporting.localization.Localization(__file__, 2219, 23), get_clip_on_16817, *[], **kwargs_16818)
        
        # Testing the type of an if condition (line 2219)
        if_condition_16820 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2219, 20), get_clip_on_call_result_16819)
        # Assigning a type to the variable 'if_condition_16820' (line 2219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2219, 20), 'if_condition_16820', if_condition_16820)
        # SSA begins for if statement (line 2219)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2220):
        
        # Assigning a Call to a Name (line 2220):
        
        # Assigning a Call to a Name (line 2220):
        
        # Call to get_clip_box(...): (line 2220)
        # Processing the call keyword arguments (line 2220)
        kwargs_16823 = {}
        # Getting the type of 'a' (line 2220)
        a_16821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 35), 'a', False)
        # Obtaining the member 'get_clip_box' of a type (line 2220)
        get_clip_box_16822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2220, 35), a_16821, 'get_clip_box')
        # Calling get_clip_box(args, kwargs) (line 2220)
        get_clip_box_call_result_16824 = invoke(stypy.reporting.localization.Localization(__file__, 2220, 35), get_clip_box_16822, *[], **kwargs_16823)
        
        # Assigning a type to the variable 'clip_box' (line 2220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2220, 24), 'clip_box', get_clip_box_call_result_16824)
        
        # Type idiom detected: calculating its left and rigth part (line 2221)
        # Getting the type of 'clip_box' (line 2221)
        clip_box_16825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 24), 'clip_box')
        # Getting the type of 'None' (line 2221)
        None_16826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 43), 'None')
        
        (may_be_16827, more_types_in_union_16828) = may_not_be_none(clip_box_16825, None_16826)

        if may_be_16827:

            if more_types_in_union_16828:
                # Runtime conditional SSA (line 2221)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2222):
            
            # Assigning a Call to a Name (line 2222):
            
            # Assigning a Call to a Name (line 2222):
            
            # Call to intersection(...): (line 2222)
            # Processing the call arguments (line 2222)
            # Getting the type of 'bbox' (line 2222)
            bbox_16831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 53), 'bbox', False)
            # Getting the type of 'clip_box' (line 2222)
            clip_box_16832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 59), 'clip_box', False)
            # Processing the call keyword arguments (line 2222)
            kwargs_16833 = {}
            # Getting the type of 'Bbox' (line 2222)
            Bbox_16829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 35), 'Bbox', False)
            # Obtaining the member 'intersection' of a type (line 2222)
            intersection_16830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2222, 35), Bbox_16829, 'intersection')
            # Calling intersection(args, kwargs) (line 2222)
            intersection_call_result_16834 = invoke(stypy.reporting.localization.Localization(__file__, 2222, 35), intersection_16830, *[bbox_16831, clip_box_16832], **kwargs_16833)
            
            # Assigning a type to the variable 'bbox' (line 2222)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2222, 28), 'bbox', intersection_call_result_16834)

            if more_types_in_union_16828:
                # SSA join for if statement (line 2221)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 2223):
        
        # Assigning a Call to a Name (line 2223):
        
        # Assigning a Call to a Name (line 2223):
        
        # Call to get_clip_path(...): (line 2223)
        # Processing the call keyword arguments (line 2223)
        kwargs_16837 = {}
        # Getting the type of 'a' (line 2223)
        a_16835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 36), 'a', False)
        # Obtaining the member 'get_clip_path' of a type (line 2223)
        get_clip_path_16836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2223, 36), a_16835, 'get_clip_path')
        # Calling get_clip_path(args, kwargs) (line 2223)
        get_clip_path_call_result_16838 = invoke(stypy.reporting.localization.Localization(__file__, 2223, 36), get_clip_path_16836, *[], **kwargs_16837)
        
        # Assigning a type to the variable 'clip_path' (line 2223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2223, 24), 'clip_path', get_clip_path_call_result_16838)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'clip_path' (line 2224)
        clip_path_16839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 27), 'clip_path')
        # Getting the type of 'None' (line 2224)
        None_16840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 44), 'None')
        # Applying the binary operator 'isnot' (line 2224)
        result_is_not_16841 = python_operator(stypy.reporting.localization.Localization(__file__, 2224, 27), 'isnot', clip_path_16839, None_16840)
        
        
        # Getting the type of 'bbox' (line 2224)
        bbox_16842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 53), 'bbox')
        # Getting the type of 'None' (line 2224)
        None_16843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 65), 'None')
        # Applying the binary operator 'isnot' (line 2224)
        result_is_not_16844 = python_operator(stypy.reporting.localization.Localization(__file__, 2224, 53), 'isnot', bbox_16842, None_16843)
        
        # Applying the binary operator 'and' (line 2224)
        result_and_keyword_16845 = python_operator(stypy.reporting.localization.Localization(__file__, 2224, 27), 'and', result_is_not_16841, result_is_not_16844)
        
        # Testing the type of an if condition (line 2224)
        if_condition_16846 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2224, 24), result_and_keyword_16845)
        # Assigning a type to the variable 'if_condition_16846' (line 2224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2224, 24), 'if_condition_16846', if_condition_16846)
        # SSA begins for if statement (line 2224)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2225):
        
        # Assigning a Call to a Name (line 2225):
        
        # Assigning a Call to a Name (line 2225):
        
        # Call to get_fully_transformed_path(...): (line 2225)
        # Processing the call keyword arguments (line 2225)
        kwargs_16849 = {}
        # Getting the type of 'clip_path' (line 2225)
        clip_path_16847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 40), 'clip_path', False)
        # Obtaining the member 'get_fully_transformed_path' of a type (line 2225)
        get_fully_transformed_path_16848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2225, 40), clip_path_16847, 'get_fully_transformed_path')
        # Calling get_fully_transformed_path(args, kwargs) (line 2225)
        get_fully_transformed_path_call_result_16850 = invoke(stypy.reporting.localization.Localization(__file__, 2225, 40), get_fully_transformed_path_16848, *[], **kwargs_16849)
        
        # Assigning a type to the variable 'clip_path' (line 2225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2225, 28), 'clip_path', get_fully_transformed_path_call_result_16850)
        
        # Assigning a Call to a Name (line 2226):
        
        # Assigning a Call to a Name (line 2226):
        
        # Assigning a Call to a Name (line 2226):
        
        # Call to intersection(...): (line 2226)
        # Processing the call arguments (line 2226)
        # Getting the type of 'bbox' (line 2226)
        bbox_16853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 53), 'bbox', False)
        
        # Call to get_extents(...): (line 2227)
        # Processing the call keyword arguments (line 2227)
        kwargs_16856 = {}
        # Getting the type of 'clip_path' (line 2227)
        clip_path_16854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 53), 'clip_path', False)
        # Obtaining the member 'get_extents' of a type (line 2227)
        get_extents_16855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2227, 53), clip_path_16854, 'get_extents')
        # Calling get_extents(args, kwargs) (line 2227)
        get_extents_call_result_16857 = invoke(stypy.reporting.localization.Localization(__file__, 2227, 53), get_extents_16855, *[], **kwargs_16856)
        
        # Processing the call keyword arguments (line 2226)
        kwargs_16858 = {}
        # Getting the type of 'Bbox' (line 2226)
        Bbox_16851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 35), 'Bbox', False)
        # Obtaining the member 'intersection' of a type (line 2226)
        intersection_16852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2226, 35), Bbox_16851, 'intersection')
        # Calling intersection(args, kwargs) (line 2226)
        intersection_call_result_16859 = invoke(stypy.reporting.localization.Localization(__file__, 2226, 35), intersection_16852, *[bbox_16853, get_extents_call_result_16857], **kwargs_16858)
        
        # Assigning a type to the variable 'bbox' (line 2226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 28), 'bbox', intersection_call_result_16859)
        # SSA join for if statement (line 2224)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2219)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'bbox' (line 2228)
        bbox_16860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 23), 'bbox')
        # Getting the type of 'None' (line 2228)
        None_16861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 35), 'None')
        # Applying the binary operator 'isnot' (line 2228)
        result_is_not_16862 = python_operator(stypy.reporting.localization.Localization(__file__, 2228, 23), 'isnot', bbox_16860, None_16861)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'bbox' (line 2228)
        bbox_16863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 45), 'bbox')
        # Obtaining the member 'width' of a type (line 2228)
        width_16864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 45), bbox_16863, 'width')
        int_16865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2228, 59), 'int')
        # Applying the binary operator '!=' (line 2228)
        result_ne_16866 = python_operator(stypy.reporting.localization.Localization(__file__, 2228, 45), '!=', width_16864, int_16865)
        
        
        # Getting the type of 'bbox' (line 2229)
        bbox_16867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 45), 'bbox')
        # Obtaining the member 'height' of a type (line 2229)
        height_16868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2229, 45), bbox_16867, 'height')
        int_16869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2229, 60), 'int')
        # Applying the binary operator '!=' (line 2229)
        result_ne_16870 = python_operator(stypy.reporting.localization.Localization(__file__, 2229, 45), '!=', height_16868, int_16869)
        
        # Applying the binary operator 'or' (line 2228)
        result_or_keyword_16871 = python_operator(stypy.reporting.localization.Localization(__file__, 2228, 45), 'or', result_ne_16866, result_ne_16870)
        
        # Applying the binary operator 'and' (line 2228)
        result_and_keyword_16872 = python_operator(stypy.reporting.localization.Localization(__file__, 2228, 23), 'and', result_is_not_16862, result_or_keyword_16871)
        
        # Testing the type of an if condition (line 2228)
        if_condition_16873 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2228, 20), result_and_keyword_16872)
        # Assigning a type to the variable 'if_condition_16873' (line 2228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 20), 'if_condition_16873', if_condition_16873)
        # SSA begins for if statement (line 2228)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2230)
        # Processing the call arguments (line 2230)
        # Getting the type of 'bbox' (line 2230)
        bbox_16876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 45), 'bbox', False)
        # Processing the call keyword arguments (line 2230)
        kwargs_16877 = {}
        # Getting the type of 'bbox_filtered' (line 2230)
        bbox_filtered_16874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 24), 'bbox_filtered', False)
        # Obtaining the member 'append' of a type (line 2230)
        append_16875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2230, 24), bbox_filtered_16874, 'append')
        # Calling append(args, kwargs) (line 2230)
        append_call_result_16878 = invoke(stypy.reporting.localization.Localization(__file__, 2230, 24), append_16875, *[bbox_16876], **kwargs_16877)
        
        # SSA join for if statement (line 2228)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'bbox_filtered' (line 2232)
        bbox_filtered_16879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 19), 'bbox_filtered')
        # Testing the type of an if condition (line 2232)
        if_condition_16880 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2232, 16), bbox_filtered_16879)
        # Assigning a type to the variable 'if_condition_16880' (line 2232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 16), 'if_condition_16880', if_condition_16880)
        # SSA begins for if statement (line 2232)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2233):
        
        # Assigning a Call to a Name (line 2233):
        
        # Assigning a Call to a Name (line 2233):
        
        # Call to union(...): (line 2233)
        # Processing the call arguments (line 2233)
        # Getting the type of 'bbox_filtered' (line 2233)
        bbox_filtered_16883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 39), 'bbox_filtered', False)
        # Processing the call keyword arguments (line 2233)
        kwargs_16884 = {}
        # Getting the type of 'Bbox' (line 2233)
        Bbox_16881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 28), 'Bbox', False)
        # Obtaining the member 'union' of a type (line 2233)
        union_16882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2233, 28), Bbox_16881, 'union')
        # Calling union(args, kwargs) (line 2233)
        union_call_result_16885 = invoke(stypy.reporting.localization.Localization(__file__, 2233, 28), union_16882, *[bbox_filtered_16883], **kwargs_16884)
        
        # Assigning a type to the variable '_bbox' (line 2233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2233, 20), '_bbox', union_call_result_16885)
        
        # Assigning a Call to a Name (line 2234):
        
        # Assigning a Call to a Name (line 2234):
        
        # Assigning a Call to a Name (line 2234):
        
        # Call to scale(...): (line 2234)
        # Processing the call arguments (line 2234)
        float_16890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2234, 45), 'float')
        # Getting the type of 'self' (line 2234)
        self_16891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 51), 'self', False)
        # Obtaining the member 'figure' of a type (line 2234)
        figure_16892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2234, 51), self_16891, 'figure')
        # Obtaining the member 'dpi' of a type (line 2234)
        dpi_16893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2234, 51), figure_16892, 'dpi')
        # Applying the binary operator 'div' (line 2234)
        result_div_16894 = python_operator(stypy.reporting.localization.Localization(__file__, 2234, 45), 'div', float_16890, dpi_16893)
        
        # Processing the call keyword arguments (line 2234)
        kwargs_16895 = {}
        
        # Call to Affine2D(...): (line 2234)
        # Processing the call keyword arguments (line 2234)
        kwargs_16887 = {}
        # Getting the type of 'Affine2D' (line 2234)
        Affine2D_16886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 28), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 2234)
        Affine2D_call_result_16888 = invoke(stypy.reporting.localization.Localization(__file__, 2234, 28), Affine2D_16886, *[], **kwargs_16887)
        
        # Obtaining the member 'scale' of a type (line 2234)
        scale_16889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2234, 28), Affine2D_call_result_16888, 'scale')
        # Calling scale(args, kwargs) (line 2234)
        scale_call_result_16896 = invoke(stypy.reporting.localization.Localization(__file__, 2234, 28), scale_16889, *[result_div_16894], **kwargs_16895)
        
        # Assigning a type to the variable 'trans' (line 2234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2234, 20), 'trans', scale_call_result_16896)
        
        # Assigning a Call to a Name (line 2235):
        
        # Assigning a Call to a Name (line 2235):
        
        # Assigning a Call to a Name (line 2235):
        
        # Call to TransformedBbox(...): (line 2235)
        # Processing the call arguments (line 2235)
        # Getting the type of '_bbox' (line 2235)
        _bbox_16898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 49), '_bbox', False)
        # Getting the type of 'trans' (line 2235)
        trans_16899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 56), 'trans', False)
        # Processing the call keyword arguments (line 2235)
        kwargs_16900 = {}
        # Getting the type of 'TransformedBbox' (line 2235)
        TransformedBbox_16897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 33), 'TransformedBbox', False)
        # Calling TransformedBbox(args, kwargs) (line 2235)
        TransformedBbox_call_result_16901 = invoke(stypy.reporting.localization.Localization(__file__, 2235, 33), TransformedBbox_16897, *[_bbox_16898, trans_16899], **kwargs_16900)
        
        # Assigning a type to the variable 'bbox_extra' (line 2235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2235, 20), 'bbox_extra', TransformedBbox_call_result_16901)
        
        # Assigning a Call to a Name (line 2236):
        
        # Assigning a Call to a Name (line 2236):
        
        # Assigning a Call to a Name (line 2236):
        
        # Call to union(...): (line 2236)
        # Processing the call arguments (line 2236)
        
        # Obtaining an instance of the builtin type 'list' (line 2236)
        list_16904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2236, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2236)
        # Adding element type (line 2236)
        # Getting the type of 'bbox_inches' (line 2236)
        bbox_inches_16905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 46), 'bbox_inches', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2236, 45), list_16904, bbox_inches_16905)
        # Adding element type (line 2236)
        # Getting the type of 'bbox_extra' (line 2236)
        bbox_extra_16906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 59), 'bbox_extra', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2236, 45), list_16904, bbox_extra_16906)
        
        # Processing the call keyword arguments (line 2236)
        kwargs_16907 = {}
        # Getting the type of 'Bbox' (line 2236)
        Bbox_16902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 34), 'Bbox', False)
        # Obtaining the member 'union' of a type (line 2236)
        union_16903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2236, 34), Bbox_16902, 'union')
        # Calling union(args, kwargs) (line 2236)
        union_call_result_16908 = invoke(stypy.reporting.localization.Localization(__file__, 2236, 34), union_16903, *[list_16904], **kwargs_16907)
        
        # Assigning a type to the variable 'bbox_inches' (line 2236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2236, 20), 'bbox_inches', union_call_result_16908)
        # SSA join for if statement (line 2232)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2238):
        
        # Assigning a Call to a Name (line 2238):
        
        # Assigning a Call to a Name (line 2238):
        
        # Call to pop(...): (line 2238)
        # Processing the call arguments (line 2238)
        unicode_16911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2238, 33), 'unicode', u'pad_inches')
        # Getting the type of 'None' (line 2238)
        None_16912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 47), 'None', False)
        # Processing the call keyword arguments (line 2238)
        kwargs_16913 = {}
        # Getting the type of 'kwargs' (line 2238)
        kwargs_16909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 22), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 2238)
        pop_16910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2238, 22), kwargs_16909, 'pop')
        # Calling pop(args, kwargs) (line 2238)
        pop_call_result_16914 = invoke(stypy.reporting.localization.Localization(__file__, 2238, 22), pop_16910, *[unicode_16911, None_16912], **kwargs_16913)
        
        # Assigning a type to the variable 'pad' (line 2238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2238, 16), 'pad', pop_call_result_16914)
        
        # Type idiom detected: calculating its left and rigth part (line 2239)
        # Getting the type of 'pad' (line 2239)
        pad_16915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 19), 'pad')
        # Getting the type of 'None' (line 2239)
        None_16916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 26), 'None')
        
        (may_be_16917, more_types_in_union_16918) = may_be_none(pad_16915, None_16916)

        if may_be_16917:

            if more_types_in_union_16918:
                # Runtime conditional SSA (line 2239)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 2240):
            
            # Assigning a Subscript to a Name (line 2240):
            
            # Assigning a Subscript to a Name (line 2240):
            
            # Obtaining the type of the subscript
            unicode_16919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2240, 35), 'unicode', u'savefig.pad_inches')
            # Getting the type of 'rcParams' (line 2240)
            rcParams_16920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 26), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 2240)
            getitem___16921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2240, 26), rcParams_16920, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2240)
            subscript_call_result_16922 = invoke(stypy.reporting.localization.Localization(__file__, 2240, 26), getitem___16921, unicode_16919)
            
            # Assigning a type to the variable 'pad' (line 2240)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2240, 20), 'pad', subscript_call_result_16922)

            if more_types_in_union_16918:
                # SSA join for if statement (line 2239)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 2242):
        
        # Assigning a Call to a Name (line 2242):
        
        # Assigning a Call to a Name (line 2242):
        
        # Call to padded(...): (line 2242)
        # Processing the call arguments (line 2242)
        # Getting the type of 'pad' (line 2242)
        pad_16925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 49), 'pad', False)
        # Processing the call keyword arguments (line 2242)
        kwargs_16926 = {}
        # Getting the type of 'bbox_inches' (line 2242)
        bbox_inches_16923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 30), 'bbox_inches', False)
        # Obtaining the member 'padded' of a type (line 2242)
        padded_16924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2242, 30), bbox_inches_16923, 'padded')
        # Calling padded(args, kwargs) (line 2242)
        padded_call_result_16927 = invoke(stypy.reporting.localization.Localization(__file__, 2242, 30), padded_16924, *[pad_16925], **kwargs_16926)
        
        # Assigning a type to the variable 'bbox_inches' (line 2242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2242, 16), 'bbox_inches', padded_call_result_16927)
        # SSA join for if statement (line 2190)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2244):
        
        # Assigning a Call to a Name (line 2244):
        
        # Assigning a Call to a Name (line 2244):
        
        # Call to adjust_bbox(...): (line 2244)
        # Processing the call arguments (line 2244)
        # Getting the type of 'self' (line 2244)
        self_16930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 50), 'self', False)
        # Obtaining the member 'figure' of a type (line 2244)
        figure_16931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2244, 50), self_16930, 'figure')
        # Getting the type of 'bbox_inches' (line 2244)
        bbox_inches_16932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 63), 'bbox_inches', False)
        # Getting the type of 'canvas' (line 2245)
        canvas_16933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 50), 'canvas', False)
        # Obtaining the member 'fixed_dpi' of a type (line 2245)
        fixed_dpi_16934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2245, 50), canvas_16933, 'fixed_dpi')
        # Processing the call keyword arguments (line 2244)
        kwargs_16935 = {}
        # Getting the type of 'tight_bbox' (line 2244)
        tight_bbox_16928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 27), 'tight_bbox', False)
        # Obtaining the member 'adjust_bbox' of a type (line 2244)
        adjust_bbox_16929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2244, 27), tight_bbox_16928, 'adjust_bbox')
        # Calling adjust_bbox(args, kwargs) (line 2244)
        adjust_bbox_call_result_16936 = invoke(stypy.reporting.localization.Localization(__file__, 2244, 27), adjust_bbox_16929, *[figure_16931, bbox_inches_16932, fixed_dpi_16934], **kwargs_16935)
        
        # Assigning a type to the variable 'restore_bbox' (line 2244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 12), 'restore_bbox', adjust_bbox_call_result_16936)
        
        # Assigning a Tuple to a Name (line 2247):
        
        # Assigning a Tuple to a Name (line 2247):
        
        # Assigning a Tuple to a Name (line 2247):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2247)
        tuple_16937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2247, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2247)
        # Adding element type (line 2247)
        # Getting the type of 'bbox_inches' (line 2247)
        bbox_inches_16938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 36), 'bbox_inches')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2247, 36), tuple_16937, bbox_inches_16938)
        # Adding element type (line 2247)
        # Getting the type of 'restore_bbox' (line 2247)
        restore_bbox_16939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 49), 'restore_bbox')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2247, 36), tuple_16937, restore_bbox_16939)
        
        # Assigning a type to the variable '_bbox_inches_restore' (line 2247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2247, 12), '_bbox_inches_restore', tuple_16937)
        # SSA branch for the else part of an if statement (line 2188)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 2249):
        
        # Assigning a Name to a Name (line 2249):
        
        # Assigning a Name to a Name (line 2249):
        # Getting the type of 'None' (line 2249)
        None_16940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2249, 35), 'None')
        # Assigning a type to the variable '_bbox_inches_restore' (line 2249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2249, 12), '_bbox_inches_restore', None_16940)
        # SSA join for if statement (line 2188)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Try-finally block (line 2251)
        
        # Assigning a Call to a Name (line 2252):
        
        # Assigning a Call to a Name (line 2252):
        
        # Assigning a Call to a Name (line 2252):
        
        # Call to print_method(...): (line 2252)
        # Processing the call arguments (line 2252)
        # Getting the type of 'filename' (line 2253)
        filename_16942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 16), 'filename', False)
        # Processing the call keyword arguments (line 2252)
        # Getting the type of 'dpi' (line 2254)
        dpi_16943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 20), 'dpi', False)
        keyword_16944 = dpi_16943
        # Getting the type of 'facecolor' (line 2255)
        facecolor_16945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 26), 'facecolor', False)
        keyword_16946 = facecolor_16945
        # Getting the type of 'edgecolor' (line 2256)
        edgecolor_16947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 26), 'edgecolor', False)
        keyword_16948 = edgecolor_16947
        # Getting the type of 'orientation' (line 2257)
        orientation_16949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 28), 'orientation', False)
        keyword_16950 = orientation_16949
        # Getting the type of '_bbox_inches_restore' (line 2258)
        _bbox_inches_restore_16951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 36), '_bbox_inches_restore', False)
        keyword_16952 = _bbox_inches_restore_16951
        # Getting the type of 'kwargs' (line 2259)
        kwargs_16953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 18), 'kwargs', False)
        kwargs_16954 = {'edgecolor': keyword_16948, 'facecolor': keyword_16946, 'kwargs_16953': kwargs_16953, 'bbox_inches_restore': keyword_16952, 'dpi': keyword_16944, 'orientation': keyword_16950}
        # Getting the type of 'print_method' (line 2252)
        print_method_16941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 21), 'print_method', False)
        # Calling print_method(args, kwargs) (line 2252)
        print_method_call_result_16955 = invoke(stypy.reporting.localization.Localization(__file__, 2252, 21), print_method_16941, *[filename_16942], **kwargs_16954)
        
        # Assigning a type to the variable 'result' (line 2252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2252, 12), 'result', print_method_call_result_16955)
        
        # finally branch of the try-finally block (line 2251)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'bbox_inches' (line 2261)
        bbox_inches_16956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 15), 'bbox_inches')
        # Getting the type of 'restore_bbox' (line 2261)
        restore_bbox_16957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 31), 'restore_bbox')
        # Applying the binary operator 'and' (line 2261)
        result_and_keyword_16958 = python_operator(stypy.reporting.localization.Localization(__file__, 2261, 15), 'and', bbox_inches_16956, restore_bbox_16957)
        
        # Testing the type of an if condition (line 2261)
        if_condition_16959 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2261, 12), result_and_keyword_16958)
        # Assigning a type to the variable 'if_condition_16959' (line 2261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 12), 'if_condition_16959', if_condition_16959)
        # SSA begins for if statement (line 2261)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to restore_bbox(...): (line 2262)
        # Processing the call keyword arguments (line 2262)
        kwargs_16961 = {}
        # Getting the type of 'restore_bbox' (line 2262)
        restore_bbox_16960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 16), 'restore_bbox', False)
        # Calling restore_bbox(args, kwargs) (line 2262)
        restore_bbox_call_result_16962 = invoke(stypy.reporting.localization.Localization(__file__, 2262, 16), restore_bbox_16960, *[], **kwargs_16961)
        
        # SSA join for if statement (line 2261)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2264):
        
        # Assigning a Name to a Attribute (line 2264):
        
        # Assigning a Name to a Attribute (line 2264):
        # Getting the type of 'origDPI' (line 2264)
        origDPI_16963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 30), 'origDPI')
        # Getting the type of 'self' (line 2264)
        self_16964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 12), 'self')
        # Obtaining the member 'figure' of a type (line 2264)
        figure_16965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2264, 12), self_16964, 'figure')
        # Setting the type of the member 'dpi' of a type (line 2264)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2264, 12), figure_16965, 'dpi', origDPI_16963)
        
        # Call to set_facecolor(...): (line 2265)
        # Processing the call arguments (line 2265)
        # Getting the type of 'origfacecolor' (line 2265)
        origfacecolor_16969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 38), 'origfacecolor', False)
        # Processing the call keyword arguments (line 2265)
        kwargs_16970 = {}
        # Getting the type of 'self' (line 2265)
        self_16966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 12), 'self', False)
        # Obtaining the member 'figure' of a type (line 2265)
        figure_16967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2265, 12), self_16966, 'figure')
        # Obtaining the member 'set_facecolor' of a type (line 2265)
        set_facecolor_16968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2265, 12), figure_16967, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 2265)
        set_facecolor_call_result_16971 = invoke(stypy.reporting.localization.Localization(__file__, 2265, 12), set_facecolor_16968, *[origfacecolor_16969], **kwargs_16970)
        
        
        # Call to set_edgecolor(...): (line 2266)
        # Processing the call arguments (line 2266)
        # Getting the type of 'origedgecolor' (line 2266)
        origedgecolor_16975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 38), 'origedgecolor', False)
        # Processing the call keyword arguments (line 2266)
        kwargs_16976 = {}
        # Getting the type of 'self' (line 2266)
        self_16972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 12), 'self', False)
        # Obtaining the member 'figure' of a type (line 2266)
        figure_16973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2266, 12), self_16972, 'figure')
        # Obtaining the member 'set_edgecolor' of a type (line 2266)
        set_edgecolor_16974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2266, 12), figure_16973, 'set_edgecolor')
        # Calling set_edgecolor(args, kwargs) (line 2266)
        set_edgecolor_call_result_16977 = invoke(stypy.reporting.localization.Localization(__file__, 2266, 12), set_edgecolor_16974, *[origedgecolor_16975], **kwargs_16976)
        
        
        # Call to set_canvas(...): (line 2267)
        # Processing the call arguments (line 2267)
        # Getting the type of 'self' (line 2267)
        self_16981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 35), 'self', False)
        # Processing the call keyword arguments (line 2267)
        kwargs_16982 = {}
        # Getting the type of 'self' (line 2267)
        self_16978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 12), 'self', False)
        # Obtaining the member 'figure' of a type (line 2267)
        figure_16979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 12), self_16978, 'figure')
        # Obtaining the member 'set_canvas' of a type (line 2267)
        set_canvas_16980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 12), figure_16979, 'set_canvas')
        # Calling set_canvas(args, kwargs) (line 2267)
        set_canvas_call_result_16983 = invoke(stypy.reporting.localization.Localization(__file__, 2267, 12), set_canvas_16980, *[self_16981], **kwargs_16982)
        
        
        # Assigning a Name to a Attribute (line 2268):
        
        # Assigning a Name to a Attribute (line 2268):
        
        # Assigning a Name to a Attribute (line 2268):
        # Getting the type of 'False' (line 2268)
        False_16984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 30), 'False')
        # Getting the type of 'self' (line 2268)
        self_16985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 12), 'self')
        # Setting the type of the member '_is_saving' of a type (line 2268)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2268, 12), self_16985, '_is_saving', False_16984)
        
        # Getting the type of 'result' (line 2270)
        result_16986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 8), 'stypy_return_type', result_16986)
        
        # ################# End of 'print_figure(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'print_figure' in the type store
        # Getting the type of 'stypy_return_type' (line 2107)
        stypy_return_type_16987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16987)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'print_figure'
        return stypy_return_type_16987


    @norecursion
    def get_default_filetype(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_default_filetype'
        module_type_store = module_type_store.open_function_context('get_default_filetype', 2272, 4, False)
        # Assigning a type to the variable 'self' (line 2273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2273, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.get_default_filetype.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.get_default_filetype.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.get_default_filetype.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.get_default_filetype.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.get_default_filetype')
        FigureCanvasBase.get_default_filetype.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasBase.get_default_filetype.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.get_default_filetype.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.get_default_filetype.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.get_default_filetype.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.get_default_filetype.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.get_default_filetype.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.get_default_filetype', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_default_filetype', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_default_filetype(...)' code ##################

        unicode_16988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2278, (-1)), 'unicode', u'\n        Get the default savefig file format as specified in rcParam\n        ``savefig.format``. Returned string excludes period. Overridden\n        in backends that only support a single file type.\n        ')
        
        # Obtaining the type of the subscript
        unicode_16989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2279, 24), 'unicode', u'savefig.format')
        # Getting the type of 'rcParams' (line 2279)
        rcParams_16990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 15), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 2279)
        getitem___16991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2279, 15), rcParams_16990, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2279)
        subscript_call_result_16992 = invoke(stypy.reporting.localization.Localization(__file__, 2279, 15), getitem___16991, unicode_16989)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2279, 8), 'stypy_return_type', subscript_call_result_16992)
        
        # ################# End of 'get_default_filetype(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_default_filetype' in the type store
        # Getting the type of 'stypy_return_type' (line 2272)
        stypy_return_type_16993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_16993)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_default_filetype'
        return stypy_return_type_16993


    @norecursion
    def get_window_title(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_window_title'
        module_type_store = module_type_store.open_function_context('get_window_title', 2281, 4, False)
        # Assigning a type to the variable 'self' (line 2282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2282, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.get_window_title.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.get_window_title.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.get_window_title.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.get_window_title.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.get_window_title')
        FigureCanvasBase.get_window_title.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasBase.get_window_title.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.get_window_title.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.get_window_title.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.get_window_title.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.get_window_title.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.get_window_title.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.get_window_title', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_title', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_title(...)' code ##################

        unicode_16994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2285, (-1)), 'unicode', u'\n        Get the title text of the window containing the figure.\n        Return None if there is no window (e.g., a PS backend).\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 2286)
        unicode_16995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2286, 25), 'unicode', u'manager')
        # Getting the type of 'self' (line 2286)
        self_16996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 19), 'self')
        
        (may_be_16997, more_types_in_union_16998) = may_provide_member(unicode_16995, self_16996)

        if may_be_16997:

            if more_types_in_union_16998:
                # Runtime conditional SSA (line 2286)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 2286)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2286, 8), 'self', remove_not_member_provider_from_union(self_16996, u'manager'))
            
            # Call to get_window_title(...): (line 2287)
            # Processing the call keyword arguments (line 2287)
            kwargs_17002 = {}
            # Getting the type of 'self' (line 2287)
            self_16999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 19), 'self', False)
            # Obtaining the member 'manager' of a type (line 2287)
            manager_17000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2287, 19), self_16999, 'manager')
            # Obtaining the member 'get_window_title' of a type (line 2287)
            get_window_title_17001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2287, 19), manager_17000, 'get_window_title')
            # Calling get_window_title(args, kwargs) (line 2287)
            get_window_title_call_result_17003 = invoke(stypy.reporting.localization.Localization(__file__, 2287, 19), get_window_title_17001, *[], **kwargs_17002)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2287)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2287, 12), 'stypy_return_type', get_window_title_call_result_17003)

            if more_types_in_union_16998:
                # SSA join for if statement (line 2286)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'get_window_title(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_title' in the type store
        # Getting the type of 'stypy_return_type' (line 2281)
        stypy_return_type_17004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2281, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17004)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_title'
        return stypy_return_type_17004


    @norecursion
    def set_window_title(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_window_title'
        module_type_store = module_type_store.open_function_context('set_window_title', 2289, 4, False)
        # Assigning a type to the variable 'self' (line 2290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2290, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.set_window_title.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.set_window_title.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.set_window_title.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.set_window_title.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.set_window_title')
        FigureCanvasBase.set_window_title.__dict__.__setitem__('stypy_param_names_list', ['title'])
        FigureCanvasBase.set_window_title.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.set_window_title.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.set_window_title.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.set_window_title.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.set_window_title.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.set_window_title.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.set_window_title', ['title'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_window_title', localization, ['title'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_window_title(...)' code ##################

        unicode_17005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2293, (-1)), 'unicode', u'\n        Set the title text of the window containing the figure.  Note that\n        this has no effect if there is no window (e.g., a PS backend).\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 2294)
        unicode_17006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2294, 25), 'unicode', u'manager')
        # Getting the type of 'self' (line 2294)
        self_17007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 19), 'self')
        
        (may_be_17008, more_types_in_union_17009) = may_provide_member(unicode_17006, self_17007)

        if may_be_17008:

            if more_types_in_union_17009:
                # Runtime conditional SSA (line 2294)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 2294)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 8), 'self', remove_not_member_provider_from_union(self_17007, u'manager'))
            
            # Call to set_window_title(...): (line 2295)
            # Processing the call arguments (line 2295)
            # Getting the type of 'title' (line 2295)
            title_17013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 42), 'title', False)
            # Processing the call keyword arguments (line 2295)
            kwargs_17014 = {}
            # Getting the type of 'self' (line 2295)
            self_17010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 12), 'self', False)
            # Obtaining the member 'manager' of a type (line 2295)
            manager_17011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2295, 12), self_17010, 'manager')
            # Obtaining the member 'set_window_title' of a type (line 2295)
            set_window_title_17012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2295, 12), manager_17011, 'set_window_title')
            # Calling set_window_title(args, kwargs) (line 2295)
            set_window_title_call_result_17015 = invoke(stypy.reporting.localization.Localization(__file__, 2295, 12), set_window_title_17012, *[title_17013], **kwargs_17014)
            

            if more_types_in_union_17009:
                # SSA join for if statement (line 2294)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'set_window_title(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_window_title' in the type store
        # Getting the type of 'stypy_return_type' (line 2289)
        stypy_return_type_17016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2289, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17016)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_window_title'
        return stypy_return_type_17016


    @norecursion
    def get_default_filename(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_default_filename'
        module_type_store = module_type_store.open_function_context('get_default_filename', 2297, 4, False)
        # Assigning a type to the variable 'self' (line 2298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2298, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.get_default_filename.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.get_default_filename.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.get_default_filename.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.get_default_filename.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.get_default_filename')
        FigureCanvasBase.get_default_filename.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasBase.get_default_filename.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.get_default_filename.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.get_default_filename.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.get_default_filename.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.get_default_filename.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.get_default_filename.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.get_default_filename', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_default_filename', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_default_filename(...)' code ##################

        unicode_17017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2301, (-1)), 'unicode', u'\n        Return a string, which includes extension, suitable for use as\n        a default filename.\n        ')
        
        # Assigning a BoolOp to a Name (line 2302):
        
        # Assigning a BoolOp to a Name (line 2302):
        
        # Assigning a BoolOp to a Name (line 2302):
        
        # Evaluating a boolean operation
        
        # Call to get_window_title(...): (line 2302)
        # Processing the call keyword arguments (line 2302)
        kwargs_17020 = {}
        # Getting the type of 'self' (line 2302)
        self_17018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 27), 'self', False)
        # Obtaining the member 'get_window_title' of a type (line 2302)
        get_window_title_17019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2302, 27), self_17018, 'get_window_title')
        # Calling get_window_title(args, kwargs) (line 2302)
        get_window_title_call_result_17021 = invoke(stypy.reporting.localization.Localization(__file__, 2302, 27), get_window_title_17019, *[], **kwargs_17020)
        
        unicode_17022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2302, 54), 'unicode', u'image')
        # Applying the binary operator 'or' (line 2302)
        result_or_keyword_17023 = python_operator(stypy.reporting.localization.Localization(__file__, 2302, 27), 'or', get_window_title_call_result_17021, unicode_17022)
        
        # Assigning a type to the variable 'default_basename' (line 2302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2302, 8), 'default_basename', result_or_keyword_17023)
        
        # Assigning a Call to a Name (line 2303):
        
        # Assigning a Call to a Name (line 2303):
        
        # Assigning a Call to a Name (line 2303):
        
        # Call to replace(...): (line 2303)
        # Processing the call arguments (line 2303)
        unicode_17026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2303, 52), 'unicode', u' ')
        unicode_17027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2303, 57), 'unicode', u'_')
        # Processing the call keyword arguments (line 2303)
        kwargs_17028 = {}
        # Getting the type of 'default_basename' (line 2303)
        default_basename_17024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2303, 27), 'default_basename', False)
        # Obtaining the member 'replace' of a type (line 2303)
        replace_17025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2303, 27), default_basename_17024, 'replace')
        # Calling replace(args, kwargs) (line 2303)
        replace_call_result_17029 = invoke(stypy.reporting.localization.Localization(__file__, 2303, 27), replace_17025, *[unicode_17026, unicode_17027], **kwargs_17028)
        
        # Assigning a type to the variable 'default_basename' (line 2303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2303, 8), 'default_basename', replace_call_result_17029)
        
        # Assigning a Call to a Name (line 2304):
        
        # Assigning a Call to a Name (line 2304):
        
        # Assigning a Call to a Name (line 2304):
        
        # Call to get_default_filetype(...): (line 2304)
        # Processing the call keyword arguments (line 2304)
        kwargs_17032 = {}
        # Getting the type of 'self' (line 2304)
        self_17030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 27), 'self', False)
        # Obtaining the member 'get_default_filetype' of a type (line 2304)
        get_default_filetype_17031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2304, 27), self_17030, 'get_default_filetype')
        # Calling get_default_filetype(args, kwargs) (line 2304)
        get_default_filetype_call_result_17033 = invoke(stypy.reporting.localization.Localization(__file__, 2304, 27), get_default_filetype_17031, *[], **kwargs_17032)
        
        # Assigning a type to the variable 'default_filetype' (line 2304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 8), 'default_filetype', get_default_filetype_call_result_17033)
        
        # Assigning a BinOp to a Name (line 2305):
        
        # Assigning a BinOp to a Name (line 2305):
        
        # Assigning a BinOp to a Name (line 2305):
        # Getting the type of 'default_basename' (line 2305)
        default_basename_17034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 27), 'default_basename')
        unicode_17035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2305, 46), 'unicode', u'.')
        # Applying the binary operator '+' (line 2305)
        result_add_17036 = python_operator(stypy.reporting.localization.Localization(__file__, 2305, 27), '+', default_basename_17034, unicode_17035)
        
        # Getting the type of 'default_filetype' (line 2305)
        default_filetype_17037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 52), 'default_filetype')
        # Applying the binary operator '+' (line 2305)
        result_add_17038 = python_operator(stypy.reporting.localization.Localization(__file__, 2305, 50), '+', result_add_17036, default_filetype_17037)
        
        # Assigning a type to the variable 'default_filename' (line 2305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2305, 8), 'default_filename', result_add_17038)
        
        # Assigning a Call to a Name (line 2307):
        
        # Assigning a Call to a Name (line 2307):
        
        # Assigning a Call to a Name (line 2307):
        
        # Call to expanduser(...): (line 2307)
        # Processing the call arguments (line 2307)
        
        # Obtaining the type of the subscript
        unicode_17042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2307, 47), 'unicode', u'savefig.directory')
        # Getting the type of 'rcParams' (line 2307)
        rcParams_17043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 38), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 2307)
        getitem___17044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 38), rcParams_17043, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2307)
        subscript_call_result_17045 = invoke(stypy.reporting.localization.Localization(__file__, 2307, 38), getitem___17044, unicode_17042)
        
        # Processing the call keyword arguments (line 2307)
        kwargs_17046 = {}
        # Getting the type of 'os' (line 2307)
        os_17039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 2307)
        path_17040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 19), os_17039, 'path')
        # Obtaining the member 'expanduser' of a type (line 2307)
        expanduser_17041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 19), path_17040, 'expanduser')
        # Calling expanduser(args, kwargs) (line 2307)
        expanduser_call_result_17047 = invoke(stypy.reporting.localization.Localization(__file__, 2307, 19), expanduser_17041, *[subscript_call_result_17045], **kwargs_17046)
        
        # Assigning a type to the variable 'save_dir' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 8), 'save_dir', expanduser_call_result_17047)
        
        # Assigning a Num to a Name (line 2310):
        
        # Assigning a Num to a Name (line 2310):
        
        # Assigning a Num to a Name (line 2310):
        int_17048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2310, 12), 'int')
        # Assigning a type to the variable 'i' (line 2310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2310, 8), 'i', int_17048)
        
        
        # Call to isfile(...): (line 2311)
        # Processing the call arguments (line 2311)
        
        # Call to join(...): (line 2311)
        # Processing the call arguments (line 2311)
        # Getting the type of 'save_dir' (line 2311)
        save_dir_17055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 42), 'save_dir', False)
        # Getting the type of 'default_filename' (line 2311)
        default_filename_17056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 52), 'default_filename', False)
        # Processing the call keyword arguments (line 2311)
        kwargs_17057 = {}
        # Getting the type of 'os' (line 2311)
        os_17052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 29), 'os', False)
        # Obtaining the member 'path' of a type (line 2311)
        path_17053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2311, 29), os_17052, 'path')
        # Obtaining the member 'join' of a type (line 2311)
        join_17054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2311, 29), path_17053, 'join')
        # Calling join(args, kwargs) (line 2311)
        join_call_result_17058 = invoke(stypy.reporting.localization.Localization(__file__, 2311, 29), join_17054, *[save_dir_17055, default_filename_17056], **kwargs_17057)
        
        # Processing the call keyword arguments (line 2311)
        kwargs_17059 = {}
        # Getting the type of 'os' (line 2311)
        os_17049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 14), 'os', False)
        # Obtaining the member 'path' of a type (line 2311)
        path_17050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2311, 14), os_17049, 'path')
        # Obtaining the member 'isfile' of a type (line 2311)
        isfile_17051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2311, 14), path_17050, 'isfile')
        # Calling isfile(args, kwargs) (line 2311)
        isfile_call_result_17060 = invoke(stypy.reporting.localization.Localization(__file__, 2311, 14), isfile_17051, *[join_call_result_17058], **kwargs_17059)
        
        # Testing the type of an if condition (line 2311)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2311, 8), isfile_call_result_17060)
        # SSA begins for while statement (line 2311)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a Call to a Name (line 2313):
        
        # Assigning a Call to a Name (line 2313):
        
        # Assigning a Call to a Name (line 2313):
        
        # Call to format(...): (line 2313)
        # Processing the call arguments (line 2313)
        # Getting the type of 'default_basename' (line 2313)
        default_basename_17063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 52), 'default_basename', False)
        # Getting the type of 'i' (line 2313)
        i_17064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 70), 'i', False)
        # Getting the type of 'default_filetype' (line 2313)
        default_filetype_17065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 73), 'default_filetype', False)
        # Processing the call keyword arguments (line 2313)
        kwargs_17066 = {}
        unicode_17061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2313, 31), 'unicode', u'{0}-{1}.{2}')
        # Obtaining the member 'format' of a type (line 2313)
        format_17062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2313, 31), unicode_17061, 'format')
        # Calling format(args, kwargs) (line 2313)
        format_call_result_17067 = invoke(stypy.reporting.localization.Localization(__file__, 2313, 31), format_17062, *[default_basename_17063, i_17064, default_filetype_17065], **kwargs_17066)
        
        # Assigning a type to the variable 'default_filename' (line 2313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2313, 12), 'default_filename', format_call_result_17067)
        
        # Getting the type of 'i' (line 2314)
        i_17068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 12), 'i')
        int_17069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2314, 17), 'int')
        # Applying the binary operator '+=' (line 2314)
        result_iadd_17070 = python_operator(stypy.reporting.localization.Localization(__file__, 2314, 12), '+=', i_17068, int_17069)
        # Assigning a type to the variable 'i' (line 2314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2314, 12), 'i', result_iadd_17070)
        
        # SSA join for while statement (line 2311)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'default_filename' (line 2316)
        default_filename_17071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 15), 'default_filename')
        # Assigning a type to the variable 'stypy_return_type' (line 2316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 8), 'stypy_return_type', default_filename_17071)
        
        # ################# End of 'get_default_filename(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_default_filename' in the type store
        # Getting the type of 'stypy_return_type' (line 2297)
        stypy_return_type_17072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17072)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_default_filename'
        return stypy_return_type_17072


    @norecursion
    def switch_backends(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'switch_backends'
        module_type_store = module_type_store.open_function_context('switch_backends', 2318, 4, False)
        # Assigning a type to the variable 'self' (line 2319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2319, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.switch_backends.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.switch_backends.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.switch_backends.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.switch_backends.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.switch_backends')
        FigureCanvasBase.switch_backends.__dict__.__setitem__('stypy_param_names_list', ['FigureCanvasClass'])
        FigureCanvasBase.switch_backends.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.switch_backends.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.switch_backends.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.switch_backends.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.switch_backends.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.switch_backends.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.switch_backends', ['FigureCanvasClass'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'switch_backends', localization, ['FigureCanvasClass'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'switch_backends(...)' code ##################

        unicode_17073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2326, (-1)), 'unicode', u'\n        Instantiate an instance of FigureCanvasClass\n\n        This is used for backend switching, e.g., to instantiate a\n        FigureCanvasPS from a FigureCanvasGTK.  Note, deep copying is\n        not done, so any changes to one of the instances (e.g., setting\n        figure size or line props), will be reflected in the other\n        ')
        
        # Assigning a Call to a Name (line 2327):
        
        # Assigning a Call to a Name (line 2327):
        
        # Assigning a Call to a Name (line 2327):
        
        # Call to FigureCanvasClass(...): (line 2327)
        # Processing the call arguments (line 2327)
        # Getting the type of 'self' (line 2327)
        self_17075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 38), 'self', False)
        # Obtaining the member 'figure' of a type (line 2327)
        figure_17076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2327, 38), self_17075, 'figure')
        # Processing the call keyword arguments (line 2327)
        kwargs_17077 = {}
        # Getting the type of 'FigureCanvasClass' (line 2327)
        FigureCanvasClass_17074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 20), 'FigureCanvasClass', False)
        # Calling FigureCanvasClass(args, kwargs) (line 2327)
        FigureCanvasClass_call_result_17078 = invoke(stypy.reporting.localization.Localization(__file__, 2327, 20), FigureCanvasClass_17074, *[figure_17076], **kwargs_17077)
        
        # Assigning a type to the variable 'newCanvas' (line 2327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 8), 'newCanvas', FigureCanvasClass_call_result_17078)
        
        # Assigning a Attribute to a Attribute (line 2328):
        
        # Assigning a Attribute to a Attribute (line 2328):
        
        # Assigning a Attribute to a Attribute (line 2328):
        # Getting the type of 'self' (line 2328)
        self_17079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 31), 'self')
        # Obtaining the member '_is_saving' of a type (line 2328)
        _is_saving_17080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2328, 31), self_17079, '_is_saving')
        # Getting the type of 'newCanvas' (line 2328)
        newCanvas_17081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 8), 'newCanvas')
        # Setting the type of the member '_is_saving' of a type (line 2328)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2328, 8), newCanvas_17081, '_is_saving', _is_saving_17080)
        # Getting the type of 'newCanvas' (line 2329)
        newCanvas_17082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2329, 15), 'newCanvas')
        # Assigning a type to the variable 'stypy_return_type' (line 2329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2329, 8), 'stypy_return_type', newCanvas_17082)
        
        # ################# End of 'switch_backends(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'switch_backends' in the type store
        # Getting the type of 'stypy_return_type' (line 2318)
        stypy_return_type_17083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17083)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'switch_backends'
        return stypy_return_type_17083


    @norecursion
    def mpl_connect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mpl_connect'
        module_type_store = module_type_store.open_function_context('mpl_connect', 2331, 4, False)
        # Assigning a type to the variable 'self' (line 2332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2332, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.mpl_connect.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.mpl_connect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.mpl_connect.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.mpl_connect.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.mpl_connect')
        FigureCanvasBase.mpl_connect.__dict__.__setitem__('stypy_param_names_list', ['s', 'func'])
        FigureCanvasBase.mpl_connect.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.mpl_connect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.mpl_connect.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.mpl_connect.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.mpl_connect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.mpl_connect.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.mpl_connect', ['s', 'func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mpl_connect', localization, ['s', 'func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mpl_connect(...)' code ##################

        unicode_17084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2376, (-1)), 'unicode', u"\n        Connect event with string *s* to *func*.  The signature of *func* is::\n\n          def func(event)\n\n        where event is a :class:`matplotlib.backend_bases.Event`.  The\n        following events are recognized\n\n        - 'button_press_event'\n        - 'button_release_event'\n        - 'draw_event'\n        - 'key_press_event'\n        - 'key_release_event'\n        - 'motion_notify_event'\n        - 'pick_event'\n        - 'resize_event'\n        - 'scroll_event'\n        - 'figure_enter_event',\n        - 'figure_leave_event',\n        - 'axes_enter_event',\n        - 'axes_leave_event'\n        - 'close_event'\n\n        For the location events (button and key press/release), if the\n        mouse is over the axes, the variable ``event.inaxes`` will be\n        set to the :class:`~matplotlib.axes.Axes` the event occurs is\n        over, and additionally, the variables ``event.xdata`` and\n        ``event.ydata`` will be defined.  This is the mouse location\n        in data coords.  See\n        :class:`~matplotlib.backend_bases.KeyEvent` and\n        :class:`~matplotlib.backend_bases.MouseEvent` for more info.\n\n        Return value is a connection id that can be used with\n        :meth:`~matplotlib.backend_bases.Event.mpl_disconnect`.\n\n        Examples\n        --------\n        Usage::\n\n            def on_press(event):\n                print('you pressed', event.button, event.xdata, event.ydata)\n\n            cid = canvas.mpl_connect('button_press_event', on_press)\n\n        ")
        
        
        # Getting the type of 's' (line 2377)
        s_17085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 11), 's')
        unicode_17086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2377, 16), 'unicode', u'idle_event')
        # Applying the binary operator '==' (line 2377)
        result_eq_17087 = python_operator(stypy.reporting.localization.Localization(__file__, 2377, 11), '==', s_17085, unicode_17086)
        
        # Testing the type of an if condition (line 2377)
        if_condition_17088 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2377, 8), result_eq_17087)
        # Assigning a type to the variable 'if_condition_17088' (line 2377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2377, 8), 'if_condition_17088', if_condition_17088)
        # SSA begins for if statement (line 2377)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn_deprecated(...): (line 2378)
        # Processing the call arguments (line 2378)
        float_17090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2378, 28), 'float')
        unicode_17091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2379, 16), 'unicode', u'idle_event is only implemented for the wx backend, and will be removed in matplotlib 2.1. Use the animations module instead.')
        # Processing the call keyword arguments (line 2378)
        kwargs_17092 = {}
        # Getting the type of 'warn_deprecated' (line 2378)
        warn_deprecated_17089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2378, 12), 'warn_deprecated', False)
        # Calling warn_deprecated(args, kwargs) (line 2378)
        warn_deprecated_call_result_17093 = invoke(stypy.reporting.localization.Localization(__file__, 2378, 12), warn_deprecated_17089, *[float_17090, unicode_17091], **kwargs_17092)
        
        # SSA join for if statement (line 2377)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to connect(...): (line 2383)
        # Processing the call arguments (line 2383)
        # Getting the type of 's' (line 2383)
        s_17097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 38), 's', False)
        # Getting the type of 'func' (line 2383)
        func_17098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 41), 'func', False)
        # Processing the call keyword arguments (line 2383)
        kwargs_17099 = {}
        # Getting the type of 'self' (line 2383)
        self_17094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 15), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 2383)
        callbacks_17095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2383, 15), self_17094, 'callbacks')
        # Obtaining the member 'connect' of a type (line 2383)
        connect_17096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2383, 15), callbacks_17095, 'connect')
        # Calling connect(args, kwargs) (line 2383)
        connect_call_result_17100 = invoke(stypy.reporting.localization.Localization(__file__, 2383, 15), connect_17096, *[s_17097, func_17098], **kwargs_17099)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2383, 8), 'stypy_return_type', connect_call_result_17100)
        
        # ################# End of 'mpl_connect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mpl_connect' in the type store
        # Getting the type of 'stypy_return_type' (line 2331)
        stypy_return_type_17101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2331, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17101)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mpl_connect'
        return stypy_return_type_17101


    @norecursion
    def mpl_disconnect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mpl_disconnect'
        module_type_store = module_type_store.open_function_context('mpl_disconnect', 2385, 4, False)
        # Assigning a type to the variable 'self' (line 2386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2386, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.mpl_disconnect.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.mpl_disconnect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.mpl_disconnect.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.mpl_disconnect.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.mpl_disconnect')
        FigureCanvasBase.mpl_disconnect.__dict__.__setitem__('stypy_param_names_list', ['cid'])
        FigureCanvasBase.mpl_disconnect.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.mpl_disconnect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.mpl_disconnect.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.mpl_disconnect.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.mpl_disconnect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.mpl_disconnect.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.mpl_disconnect', ['cid'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mpl_disconnect', localization, ['cid'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mpl_disconnect(...)' code ##################

        unicode_17102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2396, (-1)), 'unicode', u"\n        Disconnect callback id cid\n\n        Examples\n        --------\n        Usage::\n\n            cid = canvas.mpl_connect('button_press_event', on_press)\n            #...later\n            canvas.mpl_disconnect(cid)\n        ")
        
        # Call to disconnect(...): (line 2397)
        # Processing the call arguments (line 2397)
        # Getting the type of 'cid' (line 2397)
        cid_17106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 41), 'cid', False)
        # Processing the call keyword arguments (line 2397)
        kwargs_17107 = {}
        # Getting the type of 'self' (line 2397)
        self_17103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 15), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 2397)
        callbacks_17104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2397, 15), self_17103, 'callbacks')
        # Obtaining the member 'disconnect' of a type (line 2397)
        disconnect_17105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2397, 15), callbacks_17104, 'disconnect')
        # Calling disconnect(args, kwargs) (line 2397)
        disconnect_call_result_17108 = invoke(stypy.reporting.localization.Localization(__file__, 2397, 15), disconnect_17105, *[cid_17106], **kwargs_17107)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2397, 8), 'stypy_return_type', disconnect_call_result_17108)
        
        # ################# End of 'mpl_disconnect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mpl_disconnect' in the type store
        # Getting the type of 'stypy_return_type' (line 2385)
        stypy_return_type_17109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17109)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mpl_disconnect'
        return stypy_return_type_17109


    @norecursion
    def new_timer(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_timer'
        module_type_store = module_type_store.open_function_context('new_timer', 2399, 4, False)
        # Assigning a type to the variable 'self' (line 2400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2400, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.new_timer.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.new_timer.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.new_timer.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.new_timer.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.new_timer')
        FigureCanvasBase.new_timer.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasBase.new_timer.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        FigureCanvasBase.new_timer.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        FigureCanvasBase.new_timer.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.new_timer.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.new_timer.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.new_timer.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.new_timer', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_timer', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_timer(...)' code ##################

        unicode_17110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2414, (-1)), 'unicode', u"\n        Creates a new backend-specific subclass of\n        :class:`backend_bases.Timer`. This is useful for getting periodic\n        events through the backend's native event loop. Implemented only for\n        backends with GUIs.\n\n        Other Parameters\n        ----------------\n        interval : scalar\n            Timer interval in milliseconds\n        callbacks : list\n            Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``\n            will be executed by the timer every *interval*.\n\n        ")
        
        # Call to TimerBase(...): (line 2415)
        # Getting the type of 'args' (line 2415)
        args_17112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 26), 'args', False)
        # Processing the call keyword arguments (line 2415)
        # Getting the type of 'kwargs' (line 2415)
        kwargs_17113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 34), 'kwargs', False)
        kwargs_17114 = {'kwargs_17113': kwargs_17113}
        # Getting the type of 'TimerBase' (line 2415)
        TimerBase_17111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 15), 'TimerBase', False)
        # Calling TimerBase(args, kwargs) (line 2415)
        TimerBase_call_result_17115 = invoke(stypy.reporting.localization.Localization(__file__, 2415, 15), TimerBase_17111, *[args_17112], **kwargs_17114)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2415, 8), 'stypy_return_type', TimerBase_call_result_17115)
        
        # ################# End of 'new_timer(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_timer' in the type store
        # Getting the type of 'stypy_return_type' (line 2399)
        stypy_return_type_17116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17116)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_timer'
        return stypy_return_type_17116


    @norecursion
    def flush_events(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'flush_events'
        module_type_store = module_type_store.open_function_context('flush_events', 2417, 4, False)
        # Assigning a type to the variable 'self' (line 2418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.flush_events.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.flush_events.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.flush_events.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.flush_events.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.flush_events')
        FigureCanvasBase.flush_events.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasBase.flush_events.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.flush_events.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.flush_events.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.flush_events.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.flush_events.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.flush_events.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.flush_events', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'flush_events', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'flush_events(...)' code ##################

        unicode_17117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2421, (-1)), 'unicode', u'Flush the GUI events for the figure.\n\n        Interactive backends need to reimplement this method.\n        ')
        
        # ################# End of 'flush_events(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'flush_events' in the type store
        # Getting the type of 'stypy_return_type' (line 2417)
        stypy_return_type_17118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17118)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'flush_events'
        return stypy_return_type_17118


    @norecursion
    def start_event_loop(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_17119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2423, 39), 'int')
        defaults = [int_17119]
        # Create a new context for function 'start_event_loop'
        module_type_store = module_type_store.open_function_context('start_event_loop', 2423, 4, False)
        # Assigning a type to the variable 'self' (line 2424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2424, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.start_event_loop.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.start_event_loop.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.start_event_loop.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.start_event_loop.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.start_event_loop')
        FigureCanvasBase.start_event_loop.__dict__.__setitem__('stypy_param_names_list', ['timeout'])
        FigureCanvasBase.start_event_loop.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.start_event_loop.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.start_event_loop.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.start_event_loop.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.start_event_loop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.start_event_loop.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.start_event_loop', ['timeout'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'start_event_loop', localization, ['timeout'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'start_event_loop(...)' code ##################

        unicode_17120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2438, (-1)), 'unicode', u'Start a blocking event loop.\n\n        Such an event loop is used by interactive functions, such as `ginput`\n        and `waitforbuttonpress`, to wait for events.\n\n        The event loop blocks until a callback function triggers\n        `stop_event_loop`, or *timeout* is reached.\n\n        If *timeout* is negative, never timeout.\n\n        Only interactive backends need to reimplement this method and it relies\n        on `flush_events` being properly implemented.\n\n        Interactive backends should implement this in a more native way.\n        ')
        
        
        # Getting the type of 'timeout' (line 2439)
        timeout_17121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 11), 'timeout')
        int_17122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2439, 22), 'int')
        # Applying the binary operator '<=' (line 2439)
        result_le_17123 = python_operator(stypy.reporting.localization.Localization(__file__, 2439, 11), '<=', timeout_17121, int_17122)
        
        # Testing the type of an if condition (line 2439)
        if_condition_17124 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2439, 8), result_le_17123)
        # Assigning a type to the variable 'if_condition_17124' (line 2439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2439, 8), 'if_condition_17124', if_condition_17124)
        # SSA begins for if statement (line 2439)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 2440):
        
        # Assigning a Attribute to a Name (line 2440):
        
        # Assigning a Attribute to a Name (line 2440):
        # Getting the type of 'np' (line 2440)
        np_17125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 22), 'np')
        # Obtaining the member 'inf' of a type (line 2440)
        inf_17126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2440, 22), np_17125, 'inf')
        # Assigning a type to the variable 'timeout' (line 2440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2440, 12), 'timeout', inf_17126)
        # SSA join for if statement (line 2439)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 2441):
        
        # Assigning a Num to a Name (line 2441):
        
        # Assigning a Num to a Name (line 2441):
        float_17127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2441, 19), 'float')
        # Assigning a type to the variable 'timestep' (line 2441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2441, 8), 'timestep', float_17127)
        
        # Assigning a Num to a Name (line 2442):
        
        # Assigning a Num to a Name (line 2442):
        
        # Assigning a Num to a Name (line 2442):
        int_17128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2442, 18), 'int')
        # Assigning a type to the variable 'counter' (line 2442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2442, 8), 'counter', int_17128)
        
        # Assigning a Name to a Attribute (line 2443):
        
        # Assigning a Name to a Attribute (line 2443):
        
        # Assigning a Name to a Attribute (line 2443):
        # Getting the type of 'True' (line 2443)
        True_17129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 24), 'True')
        # Getting the type of 'self' (line 2443)
        self_17130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 8), 'self')
        # Setting the type of the member '_looping' of a type (line 2443)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2443, 8), self_17130, '_looping', True_17129)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2444)
        self_17131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 14), 'self')
        # Obtaining the member '_looping' of a type (line 2444)
        _looping_17132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2444, 14), self_17131, '_looping')
        
        # Getting the type of 'counter' (line 2444)
        counter_17133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 32), 'counter')
        # Getting the type of 'timestep' (line 2444)
        timestep_17134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 42), 'timestep')
        # Applying the binary operator '*' (line 2444)
        result_mul_17135 = python_operator(stypy.reporting.localization.Localization(__file__, 2444, 32), '*', counter_17133, timestep_17134)
        
        # Getting the type of 'timeout' (line 2444)
        timeout_17136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 53), 'timeout')
        # Applying the binary operator '<' (line 2444)
        result_lt_17137 = python_operator(stypy.reporting.localization.Localization(__file__, 2444, 32), '<', result_mul_17135, timeout_17136)
        
        # Applying the binary operator 'and' (line 2444)
        result_and_keyword_17138 = python_operator(stypy.reporting.localization.Localization(__file__, 2444, 14), 'and', _looping_17132, result_lt_17137)
        
        # Testing the type of an if condition (line 2444)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2444, 8), result_and_keyword_17138)
        # SSA begins for while statement (line 2444)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Call to flush_events(...): (line 2445)
        # Processing the call keyword arguments (line 2445)
        kwargs_17141 = {}
        # Getting the type of 'self' (line 2445)
        self_17139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2445, 12), 'self', False)
        # Obtaining the member 'flush_events' of a type (line 2445)
        flush_events_17140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2445, 12), self_17139, 'flush_events')
        # Calling flush_events(args, kwargs) (line 2445)
        flush_events_call_result_17142 = invoke(stypy.reporting.localization.Localization(__file__, 2445, 12), flush_events_17140, *[], **kwargs_17141)
        
        
        # Call to sleep(...): (line 2446)
        # Processing the call arguments (line 2446)
        # Getting the type of 'timestep' (line 2446)
        timestep_17145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 23), 'timestep', False)
        # Processing the call keyword arguments (line 2446)
        kwargs_17146 = {}
        # Getting the type of 'time' (line 2446)
        time_17143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 12), 'time', False)
        # Obtaining the member 'sleep' of a type (line 2446)
        sleep_17144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2446, 12), time_17143, 'sleep')
        # Calling sleep(args, kwargs) (line 2446)
        sleep_call_result_17147 = invoke(stypy.reporting.localization.Localization(__file__, 2446, 12), sleep_17144, *[timestep_17145], **kwargs_17146)
        
        
        # Getting the type of 'counter' (line 2447)
        counter_17148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 12), 'counter')
        int_17149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2447, 23), 'int')
        # Applying the binary operator '+=' (line 2447)
        result_iadd_17150 = python_operator(stypy.reporting.localization.Localization(__file__, 2447, 12), '+=', counter_17148, int_17149)
        # Assigning a type to the variable 'counter' (line 2447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2447, 12), 'counter', result_iadd_17150)
        
        # SSA join for while statement (line 2444)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'start_event_loop(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'start_event_loop' in the type store
        # Getting the type of 'stypy_return_type' (line 2423)
        stypy_return_type_17151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17151)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'start_event_loop'
        return stypy_return_type_17151


    @norecursion
    def stop_event_loop(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'stop_event_loop'
        module_type_store = module_type_store.open_function_context('stop_event_loop', 2449, 4, False)
        # Assigning a type to the variable 'self' (line 2450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2450, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureCanvasBase.stop_event_loop.__dict__.__setitem__('stypy_localization', localization)
        FigureCanvasBase.stop_event_loop.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureCanvasBase.stop_event_loop.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureCanvasBase.stop_event_loop.__dict__.__setitem__('stypy_function_name', 'FigureCanvasBase.stop_event_loop')
        FigureCanvasBase.stop_event_loop.__dict__.__setitem__('stypy_param_names_list', [])
        FigureCanvasBase.stop_event_loop.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureCanvasBase.stop_event_loop.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureCanvasBase.stop_event_loop.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureCanvasBase.stop_event_loop.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureCanvasBase.stop_event_loop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureCanvasBase.stop_event_loop.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureCanvasBase.stop_event_loop', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'stop_event_loop', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'stop_event_loop(...)' code ##################

        unicode_17152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2454, (-1)), 'unicode', u'Stop the current blocking event loop.\n\n        Interactive backends need to reimplement this to match\n        `start_event_loop`\n        ')
        
        # Assigning a Name to a Attribute (line 2455):
        
        # Assigning a Name to a Attribute (line 2455):
        
        # Assigning a Name to a Attribute (line 2455):
        # Getting the type of 'False' (line 2455)
        False_17153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 24), 'False')
        # Getting the type of 'self' (line 2455)
        self_17154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 8), 'self')
        # Setting the type of the member '_looping' of a type (line 2455)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2455, 8), self_17154, '_looping', False_17153)
        
        # ################# End of 'stop_event_loop(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'stop_event_loop' in the type store
        # Getting the type of 'stypy_return_type' (line 2449)
        stypy_return_type_17155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2449, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17155)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'stop_event_loop'
        return stypy_return_type_17155

    
    # Assigning a Call to a Name (line 2457):
    
    # Assigning a Call to a Name (line 2457):
    
    # Assigning a Call to a Name (line 2459):
    
    # Assigning a Call to a Name (line 2459):

# Assigning a type to the variable 'FigureCanvasBase' (line 1723)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 0), 'FigureCanvasBase', FigureCanvasBase)

# Assigning a List to a Name (line 1735):

# Obtaining an instance of the builtin type 'list' (line 1735)
list_17156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 13), 'list')
# Adding type elements to the builtin type 'list' instance (line 1735)
# Adding element type (line 1735)
unicode_17157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 8), 'unicode', u'resize_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17157)
# Adding element type (line 1735)
unicode_17158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 8), 'unicode', u'draw_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17158)
# Adding element type (line 1735)
unicode_17159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1738, 8), 'unicode', u'key_press_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17159)
# Adding element type (line 1735)
unicode_17160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1739, 8), 'unicode', u'key_release_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17160)
# Adding element type (line 1735)
unicode_17161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1740, 8), 'unicode', u'button_press_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17161)
# Adding element type (line 1735)
unicode_17162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1741, 8), 'unicode', u'button_release_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17162)
# Adding element type (line 1735)
unicode_17163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1742, 8), 'unicode', u'scroll_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17163)
# Adding element type (line 1735)
unicode_17164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1743, 8), 'unicode', u'motion_notify_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17164)
# Adding element type (line 1735)
unicode_17165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1744, 8), 'unicode', u'pick_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17165)
# Adding element type (line 1735)
unicode_17166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1745, 8), 'unicode', u'idle_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17166)
# Adding element type (line 1735)
unicode_17167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1746, 8), 'unicode', u'figure_enter_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17167)
# Adding element type (line 1735)
unicode_17168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1747, 8), 'unicode', u'figure_leave_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17168)
# Adding element type (line 1735)
unicode_17169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1748, 8), 'unicode', u'axes_enter_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17169)
# Adding element type (line 1735)
unicode_17170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1749, 8), 'unicode', u'axes_leave_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17170)
# Adding element type (line 1735)
unicode_17171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1750, 8), 'unicode', u'close_event')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 13), list_17156, unicode_17171)

# Getting the type of 'FigureCanvasBase'
FigureCanvasBase_17172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasBase')
# Setting the type of the member 'events' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasBase_17172, 'events', list_17156)

# Assigning a Name to a Name (line 1753):
# Getting the type of 'True' (line 1753)
True_17173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 20), 'True')
# Getting the type of 'FigureCanvasBase'
FigureCanvasBase_17174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasBase')
# Setting the type of the member 'supports_blit' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasBase_17174, 'supports_blit', True_17173)

# Assigning a Name to a Name (line 1754):
# Getting the type of 'None' (line 1754)
None_17175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 16), 'None')
# Getting the type of 'FigureCanvasBase'
FigureCanvasBase_17176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasBase')
# Setting the type of the member 'fixed_dpi' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasBase_17176, 'fixed_dpi', None_17175)

# Assigning a Name to a Name (line 1756):
# Getting the type of '_default_filetypes' (line 1756)
_default_filetypes_17177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 16), '_default_filetypes')
# Getting the type of 'FigureCanvasBase'
FigureCanvasBase_17178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasBase')
# Setting the type of the member 'filetypes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasBase_17178, 'filetypes', _default_filetypes_17177)

# Assigning a Name to a Name (line 1756):

# Getting the type of '_has_pil' (line 1757)
_has_pil_17179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 7), '_has_pil')
# Testing the type of an if condition (line 1757)
if_condition_17180 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1757, 4), _has_pil_17179)
# Assigning a type to the variable 'if_condition_17180' (line 1757)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1757, 4), 'if_condition_17180', if_condition_17180)
# SSA begins for if statement (line 1757)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Call to register_backend(...): (line 1759)
# Processing the call arguments (line 1759)
unicode_17182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1759, 25), 'unicode', u'jpg')
unicode_17183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1759, 32), 'unicode', u'matplotlib.backends.backend_agg')
unicode_17184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1760, 25), 'unicode', u'Joint Photographic Experts Group')
# Processing the call keyword arguments (line 1759)
kwargs_17185 = {}
# Getting the type of 'register_backend' (line 1759)
register_backend_17181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 8), 'register_backend', False)
# Calling register_backend(args, kwargs) (line 1759)
register_backend_call_result_17186 = invoke(stypy.reporting.localization.Localization(__file__, 1759, 8), register_backend_17181, *[unicode_17182, unicode_17183, unicode_17184], **kwargs_17185)


# Call to register_backend(...): (line 1761)
# Processing the call arguments (line 1761)
unicode_17188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1761, 25), 'unicode', u'jpeg')
unicode_17189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1761, 33), 'unicode', u'matplotlib.backends.backend_agg')
unicode_17190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1762, 25), 'unicode', u'Joint Photographic Experts Group')
# Processing the call keyword arguments (line 1761)
kwargs_17191 = {}
# Getting the type of 'register_backend' (line 1761)
register_backend_17187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 8), 'register_backend', False)
# Calling register_backend(args, kwargs) (line 1761)
register_backend_call_result_17192 = invoke(stypy.reporting.localization.Localization(__file__, 1761, 8), register_backend_17187, *[unicode_17188, unicode_17189, unicode_17190], **kwargs_17191)


# Call to register_backend(...): (line 1764)
# Processing the call arguments (line 1764)
unicode_17194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1764, 25), 'unicode', u'tif')
unicode_17195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1764, 32), 'unicode', u'matplotlib.backends.backend_agg')
unicode_17196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1765, 25), 'unicode', u'Tagged Image File Format')
# Processing the call keyword arguments (line 1764)
kwargs_17197 = {}
# Getting the type of 'register_backend' (line 1764)
register_backend_17193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 8), 'register_backend', False)
# Calling register_backend(args, kwargs) (line 1764)
register_backend_call_result_17198 = invoke(stypy.reporting.localization.Localization(__file__, 1764, 8), register_backend_17193, *[unicode_17194, unicode_17195, unicode_17196], **kwargs_17197)


# Call to register_backend(...): (line 1766)
# Processing the call arguments (line 1766)
unicode_17200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, 25), 'unicode', u'tiff')
unicode_17201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, 33), 'unicode', u'matplotlib.backends.backend_agg')
unicode_17202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1767, 25), 'unicode', u'Tagged Image File Format')
# Processing the call keyword arguments (line 1766)
kwargs_17203 = {}
# Getting the type of 'register_backend' (line 1766)
register_backend_17199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 8), 'register_backend', False)
# Calling register_backend(args, kwargs) (line 1766)
register_backend_call_result_17204 = invoke(stypy.reporting.localization.Localization(__file__, 1766, 8), register_backend_17199, *[unicode_17200, unicode_17201, unicode_17202], **kwargs_17203)

# SSA join for if statement (line 1757)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Call to a Name (line 2457):

# Call to (...): (line 2457)
# Processing the call arguments (line 2457)
# Getting the type of 'FigureCanvasBase'
FigureCanvasBase_17212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasBase', False)
# Obtaining the member 'start_event_loop' of a type
start_event_loop_17213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasBase_17212, 'start_event_loop')
# Processing the call keyword arguments (line 2457)
kwargs_17214 = {}

# Call to deprecated(...): (line 2457)
# Processing the call arguments (line 2457)
unicode_17207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2458, 8), 'unicode', u'2.1')
# Processing the call keyword arguments (line 2457)
unicode_17208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2458, 20), 'unicode', u'start_event_loop_default')
keyword_17209 = unicode_17208
kwargs_17210 = {'name': keyword_17209}
# Getting the type of 'cbook' (line 2457)
cbook_17205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2457, 31), 'cbook', False)
# Obtaining the member 'deprecated' of a type (line 2457)
deprecated_17206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2457, 31), cbook_17205, 'deprecated')
# Calling deprecated(args, kwargs) (line 2457)
deprecated_call_result_17211 = invoke(stypy.reporting.localization.Localization(__file__, 2457, 31), deprecated_17206, *[unicode_17207], **kwargs_17210)

# Calling (args, kwargs) (line 2457)
_call_result_17215 = invoke(stypy.reporting.localization.Localization(__file__, 2457, 31), deprecated_call_result_17211, *[start_event_loop_17213], **kwargs_17214)

# Getting the type of 'FigureCanvasBase'
FigureCanvasBase_17216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasBase')
# Setting the type of the member 'start_event_loop_default' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasBase_17216, 'start_event_loop_default', _call_result_17215)

# Assigning a Call to a Name (line 2459):

# Call to (...): (line 2459)
# Processing the call arguments (line 2459)
# Getting the type of 'FigureCanvasBase'
FigureCanvasBase_17224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasBase', False)
# Obtaining the member 'stop_event_loop' of a type
stop_event_loop_17225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasBase_17224, 'stop_event_loop')
# Processing the call keyword arguments (line 2459)
kwargs_17226 = {}

# Call to deprecated(...): (line 2459)
# Processing the call arguments (line 2459)
unicode_17219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2460, 8), 'unicode', u'2.1')
# Processing the call keyword arguments (line 2459)
unicode_17220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2460, 20), 'unicode', u'stop_event_loop_default')
keyword_17221 = unicode_17220
kwargs_17222 = {'name': keyword_17221}
# Getting the type of 'cbook' (line 2459)
cbook_17217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2459, 30), 'cbook', False)
# Obtaining the member 'deprecated' of a type (line 2459)
deprecated_17218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2459, 30), cbook_17217, 'deprecated')
# Calling deprecated(args, kwargs) (line 2459)
deprecated_call_result_17223 = invoke(stypy.reporting.localization.Localization(__file__, 2459, 30), deprecated_17218, *[unicode_17219], **kwargs_17222)

# Calling (args, kwargs) (line 2459)
_call_result_17227 = invoke(stypy.reporting.localization.Localization(__file__, 2459, 30), deprecated_call_result_17223, *[stop_event_loop_17225], **kwargs_17226)

# Getting the type of 'FigureCanvasBase'
FigureCanvasBase_17228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureCanvasBase')
# Setting the type of the member 'stop_event_loop_default' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureCanvasBase_17228, 'stop_event_loop_default', _call_result_17227)

@norecursion
def key_press_handler(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2463)
    None_17229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 45), 'None')
    defaults = [None_17229]
    # Create a new context for function 'key_press_handler'
    module_type_store = module_type_store.open_function_context('key_press_handler', 2463, 0, False)
    
    # Passed parameters checking function
    key_press_handler.stypy_localization = localization
    key_press_handler.stypy_type_of_self = None
    key_press_handler.stypy_type_store = module_type_store
    key_press_handler.stypy_function_name = 'key_press_handler'
    key_press_handler.stypy_param_names_list = ['event', 'canvas', 'toolbar']
    key_press_handler.stypy_varargs_param_name = None
    key_press_handler.stypy_kwargs_param_name = None
    key_press_handler.stypy_call_defaults = defaults
    key_press_handler.stypy_call_varargs = varargs
    key_press_handler.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'key_press_handler', ['event', 'canvas', 'toolbar'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'key_press_handler', localization, ['event', 'canvas', 'toolbar'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'key_press_handler(...)' code ##################

    unicode_17230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2477, (-1)), 'unicode', u'\n    Implement the default mpl key bindings for the canvas and toolbar\n    described at :ref:`key-event-handling`\n\n    Parameters\n    ----------\n    event : :class:`KeyEvent`\n        a key press/release event\n    canvas : :class:`FigureCanvasBase`\n        the backend-specific canvas instance\n    toolbar : :class:`NavigationToolbar2`\n        the navigation cursor toolbar\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 2480)
    # Getting the type of 'event' (line 2480)
    event_17231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 7), 'event')
    # Obtaining the member 'key' of a type (line 2480)
    key_17232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2480, 7), event_17231, 'key')
    # Getting the type of 'None' (line 2480)
    None_17233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 20), 'None')
    
    (may_be_17234, more_types_in_union_17235) = may_be_none(key_17232, None_17233)

    if may_be_17234:

        if more_types_in_union_17235:
            # Runtime conditional SSA (line 2480)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'stypy_return_type' (line 2481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2481, 8), 'stypy_return_type', types.NoneType)

        if more_types_in_union_17235:
            # SSA join for if statement (line 2480)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Subscript to a Name (line 2484):
    
    # Assigning a Subscript to a Name (line 2484):
    
    # Assigning a Subscript to a Name (line 2484):
    
    # Obtaining the type of the subscript
    unicode_17236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2484, 31), 'unicode', u'keymap.fullscreen')
    # Getting the type of 'rcParams' (line 2484)
    rcParams_17237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 22), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 2484)
    getitem___17238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2484, 22), rcParams_17237, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2484)
    subscript_call_result_17239 = invoke(stypy.reporting.localization.Localization(__file__, 2484, 22), getitem___17238, unicode_17236)
    
    # Assigning a type to the variable 'fullscreen_keys' (line 2484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2484, 4), 'fullscreen_keys', subscript_call_result_17239)
    
    # Assigning a Subscript to a Name (line 2485):
    
    # Assigning a Subscript to a Name (line 2485):
    
    # Assigning a Subscript to a Name (line 2485):
    
    # Obtaining the type of the subscript
    unicode_17240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2485, 25), 'unicode', u'keymap.home')
    # Getting the type of 'rcParams' (line 2485)
    rcParams_17241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 16), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 2485)
    getitem___17242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2485, 16), rcParams_17241, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2485)
    subscript_call_result_17243 = invoke(stypy.reporting.localization.Localization(__file__, 2485, 16), getitem___17242, unicode_17240)
    
    # Assigning a type to the variable 'home_keys' (line 2485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2485, 4), 'home_keys', subscript_call_result_17243)
    
    # Assigning a Subscript to a Name (line 2486):
    
    # Assigning a Subscript to a Name (line 2486):
    
    # Assigning a Subscript to a Name (line 2486):
    
    # Obtaining the type of the subscript
    unicode_17244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2486, 25), 'unicode', u'keymap.back')
    # Getting the type of 'rcParams' (line 2486)
    rcParams_17245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 16), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 2486)
    getitem___17246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2486, 16), rcParams_17245, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2486)
    subscript_call_result_17247 = invoke(stypy.reporting.localization.Localization(__file__, 2486, 16), getitem___17246, unicode_17244)
    
    # Assigning a type to the variable 'back_keys' (line 2486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2486, 4), 'back_keys', subscript_call_result_17247)
    
    # Assigning a Subscript to a Name (line 2487):
    
    # Assigning a Subscript to a Name (line 2487):
    
    # Assigning a Subscript to a Name (line 2487):
    
    # Obtaining the type of the subscript
    unicode_17248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2487, 28), 'unicode', u'keymap.forward')
    # Getting the type of 'rcParams' (line 2487)
    rcParams_17249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 19), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 2487)
    getitem___17250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2487, 19), rcParams_17249, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2487)
    subscript_call_result_17251 = invoke(stypy.reporting.localization.Localization(__file__, 2487, 19), getitem___17250, unicode_17248)
    
    # Assigning a type to the variable 'forward_keys' (line 2487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2487, 4), 'forward_keys', subscript_call_result_17251)
    
    # Assigning a Subscript to a Name (line 2488):
    
    # Assigning a Subscript to a Name (line 2488):
    
    # Assigning a Subscript to a Name (line 2488):
    
    # Obtaining the type of the subscript
    unicode_17252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2488, 24), 'unicode', u'keymap.pan')
    # Getting the type of 'rcParams' (line 2488)
    rcParams_17253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2488, 15), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 2488)
    getitem___17254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2488, 15), rcParams_17253, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2488)
    subscript_call_result_17255 = invoke(stypy.reporting.localization.Localization(__file__, 2488, 15), getitem___17254, unicode_17252)
    
    # Assigning a type to the variable 'pan_keys' (line 2488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2488, 4), 'pan_keys', subscript_call_result_17255)
    
    # Assigning a Subscript to a Name (line 2489):
    
    # Assigning a Subscript to a Name (line 2489):
    
    # Assigning a Subscript to a Name (line 2489):
    
    # Obtaining the type of the subscript
    unicode_17256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2489, 25), 'unicode', u'keymap.zoom')
    # Getting the type of 'rcParams' (line 2489)
    rcParams_17257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 16), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 2489)
    getitem___17258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2489, 16), rcParams_17257, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2489)
    subscript_call_result_17259 = invoke(stypy.reporting.localization.Localization(__file__, 2489, 16), getitem___17258, unicode_17256)
    
    # Assigning a type to the variable 'zoom_keys' (line 2489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2489, 4), 'zoom_keys', subscript_call_result_17259)
    
    # Assigning a Subscript to a Name (line 2490):
    
    # Assigning a Subscript to a Name (line 2490):
    
    # Assigning a Subscript to a Name (line 2490):
    
    # Obtaining the type of the subscript
    unicode_17260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2490, 25), 'unicode', u'keymap.save')
    # Getting the type of 'rcParams' (line 2490)
    rcParams_17261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 16), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 2490)
    getitem___17262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2490, 16), rcParams_17261, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2490)
    subscript_call_result_17263 = invoke(stypy.reporting.localization.Localization(__file__, 2490, 16), getitem___17262, unicode_17260)
    
    # Assigning a type to the variable 'save_keys' (line 2490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2490, 4), 'save_keys', subscript_call_result_17263)
    
    # Assigning a Subscript to a Name (line 2491):
    
    # Assigning a Subscript to a Name (line 2491):
    
    # Assigning a Subscript to a Name (line 2491):
    
    # Obtaining the type of the subscript
    unicode_17264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2491, 25), 'unicode', u'keymap.quit')
    # Getting the type of 'rcParams' (line 2491)
    rcParams_17265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2491, 16), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 2491)
    getitem___17266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2491, 16), rcParams_17265, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2491)
    subscript_call_result_17267 = invoke(stypy.reporting.localization.Localization(__file__, 2491, 16), getitem___17266, unicode_17264)
    
    # Assigning a type to the variable 'quit_keys' (line 2491)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2491, 4), 'quit_keys', subscript_call_result_17267)
    
    # Assigning a Subscript to a Name (line 2492):
    
    # Assigning a Subscript to a Name (line 2492):
    
    # Assigning a Subscript to a Name (line 2492):
    
    # Obtaining the type of the subscript
    unicode_17268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2492, 25), 'unicode', u'keymap.grid')
    # Getting the type of 'rcParams' (line 2492)
    rcParams_17269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 16), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 2492)
    getitem___17270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2492, 16), rcParams_17269, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2492)
    subscript_call_result_17271 = invoke(stypy.reporting.localization.Localization(__file__, 2492, 16), getitem___17270, unicode_17268)
    
    # Assigning a type to the variable 'grid_keys' (line 2492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2492, 4), 'grid_keys', subscript_call_result_17271)
    
    # Assigning a Subscript to a Name (line 2493):
    
    # Assigning a Subscript to a Name (line 2493):
    
    # Assigning a Subscript to a Name (line 2493):
    
    # Obtaining the type of the subscript
    unicode_17272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2493, 31), 'unicode', u'keymap.grid_minor')
    # Getting the type of 'rcParams' (line 2493)
    rcParams_17273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 22), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 2493)
    getitem___17274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2493, 22), rcParams_17273, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2493)
    subscript_call_result_17275 = invoke(stypy.reporting.localization.Localization(__file__, 2493, 22), getitem___17274, unicode_17272)
    
    # Assigning a type to the variable 'grid_minor_keys' (line 2493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2493, 4), 'grid_minor_keys', subscript_call_result_17275)
    
    # Assigning a Subscript to a Name (line 2494):
    
    # Assigning a Subscript to a Name (line 2494):
    
    # Assigning a Subscript to a Name (line 2494):
    
    # Obtaining the type of the subscript
    unicode_17276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2494, 34), 'unicode', u'keymap.yscale')
    # Getting the type of 'rcParams' (line 2494)
    rcParams_17277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 25), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 2494)
    getitem___17278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2494, 25), rcParams_17277, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2494)
    subscript_call_result_17279 = invoke(stypy.reporting.localization.Localization(__file__, 2494, 25), getitem___17278, unicode_17276)
    
    # Assigning a type to the variable 'toggle_yscale_keys' (line 2494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2494, 4), 'toggle_yscale_keys', subscript_call_result_17279)
    
    # Assigning a Subscript to a Name (line 2495):
    
    # Assigning a Subscript to a Name (line 2495):
    
    # Assigning a Subscript to a Name (line 2495):
    
    # Obtaining the type of the subscript
    unicode_17280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2495, 34), 'unicode', u'keymap.xscale')
    # Getting the type of 'rcParams' (line 2495)
    rcParams_17281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 25), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 2495)
    getitem___17282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2495, 25), rcParams_17281, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2495)
    subscript_call_result_17283 = invoke(stypy.reporting.localization.Localization(__file__, 2495, 25), getitem___17282, unicode_17280)
    
    # Assigning a type to the variable 'toggle_xscale_keys' (line 2495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2495, 4), 'toggle_xscale_keys', subscript_call_result_17283)
    
    # Assigning a Subscript to a Name (line 2496):
    
    # Assigning a Subscript to a Name (line 2496):
    
    # Assigning a Subscript to a Name (line 2496):
    
    # Obtaining the type of the subscript
    unicode_17284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2496, 24), 'unicode', u'keymap.all_axes')
    # Getting the type of 'rcParams' (line 2496)
    rcParams_17285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2496, 15), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 2496)
    getitem___17286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2496, 15), rcParams_17285, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2496)
    subscript_call_result_17287 = invoke(stypy.reporting.localization.Localization(__file__, 2496, 15), getitem___17286, unicode_17284)
    
    # Assigning a type to the variable 'all_keys' (line 2496)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2496, 4), 'all_keys', subscript_call_result_17287)
    
    
    # Getting the type of 'event' (line 2499)
    event_17288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2499, 7), 'event')
    # Obtaining the member 'key' of a type (line 2499)
    key_17289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2499, 7), event_17288, 'key')
    # Getting the type of 'fullscreen_keys' (line 2499)
    fullscreen_keys_17290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2499, 20), 'fullscreen_keys')
    # Applying the binary operator 'in' (line 2499)
    result_contains_17291 = python_operator(stypy.reporting.localization.Localization(__file__, 2499, 7), 'in', key_17289, fullscreen_keys_17290)
    
    # Testing the type of an if condition (line 2499)
    if_condition_17292 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2499, 4), result_contains_17291)
    # Assigning a type to the variable 'if_condition_17292' (line 2499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2499, 4), 'if_condition_17292', if_condition_17292)
    # SSA begins for if statement (line 2499)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 2500)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to full_screen_toggle(...): (line 2501)
    # Processing the call keyword arguments (line 2501)
    kwargs_17296 = {}
    # Getting the type of 'canvas' (line 2501)
    canvas_17293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2501, 12), 'canvas', False)
    # Obtaining the member 'manager' of a type (line 2501)
    manager_17294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2501, 12), canvas_17293, 'manager')
    # Obtaining the member 'full_screen_toggle' of a type (line 2501)
    full_screen_toggle_17295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2501, 12), manager_17294, 'full_screen_toggle')
    # Calling full_screen_toggle(args, kwargs) (line 2501)
    full_screen_toggle_call_result_17297 = invoke(stypy.reporting.localization.Localization(__file__, 2501, 12), full_screen_toggle_17295, *[], **kwargs_17296)
    
    # SSA branch for the except part of a try statement (line 2500)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 2500)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 2500)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2499)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'event' (line 2506)
    event_17298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2506, 7), 'event')
    # Obtaining the member 'key' of a type (line 2506)
    key_17299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2506, 7), event_17298, 'key')
    # Getting the type of 'quit_keys' (line 2506)
    quit_keys_17300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2506, 20), 'quit_keys')
    # Applying the binary operator 'in' (line 2506)
    result_contains_17301 = python_operator(stypy.reporting.localization.Localization(__file__, 2506, 7), 'in', key_17299, quit_keys_17300)
    
    # Testing the type of an if condition (line 2506)
    if_condition_17302 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2506, 4), result_contains_17301)
    # Assigning a type to the variable 'if_condition_17302' (line 2506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2506, 4), 'if_condition_17302', if_condition_17302)
    # SSA begins for if statement (line 2506)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to destroy_fig(...): (line 2507)
    # Processing the call arguments (line 2507)
    # Getting the type of 'canvas' (line 2507)
    canvas_17305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 24), 'canvas', False)
    # Obtaining the member 'figure' of a type (line 2507)
    figure_17306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2507, 24), canvas_17305, 'figure')
    # Processing the call keyword arguments (line 2507)
    kwargs_17307 = {}
    # Getting the type of 'Gcf' (line 2507)
    Gcf_17303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 8), 'Gcf', False)
    # Obtaining the member 'destroy_fig' of a type (line 2507)
    destroy_fig_17304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2507, 8), Gcf_17303, 'destroy_fig')
    # Calling destroy_fig(args, kwargs) (line 2507)
    destroy_fig_call_result_17308 = invoke(stypy.reporting.localization.Localization(__file__, 2507, 8), destroy_fig_17304, *[figure_17306], **kwargs_17307)
    
    # SSA join for if statement (line 2506)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2509)
    # Getting the type of 'toolbar' (line 2509)
    toolbar_17309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2509, 4), 'toolbar')
    # Getting the type of 'None' (line 2509)
    None_17310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2509, 22), 'None')
    
    (may_be_17311, more_types_in_union_17312) = may_not_be_none(toolbar_17309, None_17310)

    if may_be_17311:

        if more_types_in_union_17312:
            # Runtime conditional SSA (line 2509)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Getting the type of 'event' (line 2511)
        event_17313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 11), 'event')
        # Obtaining the member 'key' of a type (line 2511)
        key_17314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2511, 11), event_17313, 'key')
        # Getting the type of 'home_keys' (line 2511)
        home_keys_17315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 24), 'home_keys')
        # Applying the binary operator 'in' (line 2511)
        result_contains_17316 = python_operator(stypy.reporting.localization.Localization(__file__, 2511, 11), 'in', key_17314, home_keys_17315)
        
        # Testing the type of an if condition (line 2511)
        if_condition_17317 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2511, 8), result_contains_17316)
        # Assigning a type to the variable 'if_condition_17317' (line 2511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2511, 8), 'if_condition_17317', if_condition_17317)
        # SSA begins for if statement (line 2511)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to home(...): (line 2512)
        # Processing the call keyword arguments (line 2512)
        kwargs_17320 = {}
        # Getting the type of 'toolbar' (line 2512)
        toolbar_17318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2512, 12), 'toolbar', False)
        # Obtaining the member 'home' of a type (line 2512)
        home_17319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2512, 12), toolbar_17318, 'home')
        # Calling home(args, kwargs) (line 2512)
        home_call_result_17321 = invoke(stypy.reporting.localization.Localization(__file__, 2512, 12), home_17319, *[], **kwargs_17320)
        
        # SSA branch for the else part of an if statement (line 2511)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'event' (line 2515)
        event_17322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 13), 'event')
        # Obtaining the member 'key' of a type (line 2515)
        key_17323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2515, 13), event_17322, 'key')
        # Getting the type of 'back_keys' (line 2515)
        back_keys_17324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 26), 'back_keys')
        # Applying the binary operator 'in' (line 2515)
        result_contains_17325 = python_operator(stypy.reporting.localization.Localization(__file__, 2515, 13), 'in', key_17323, back_keys_17324)
        
        # Testing the type of an if condition (line 2515)
        if_condition_17326 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2515, 13), result_contains_17325)
        # Assigning a type to the variable 'if_condition_17326' (line 2515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2515, 13), 'if_condition_17326', if_condition_17326)
        # SSA begins for if statement (line 2515)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to back(...): (line 2516)
        # Processing the call keyword arguments (line 2516)
        kwargs_17329 = {}
        # Getting the type of 'toolbar' (line 2516)
        toolbar_17327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 12), 'toolbar', False)
        # Obtaining the member 'back' of a type (line 2516)
        back_17328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2516, 12), toolbar_17327, 'back')
        # Calling back(args, kwargs) (line 2516)
        back_call_result_17330 = invoke(stypy.reporting.localization.Localization(__file__, 2516, 12), back_17328, *[], **kwargs_17329)
        
        # SSA branch for the else part of an if statement (line 2515)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'event' (line 2518)
        event_17331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 13), 'event')
        # Obtaining the member 'key' of a type (line 2518)
        key_17332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2518, 13), event_17331, 'key')
        # Getting the type of 'forward_keys' (line 2518)
        forward_keys_17333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 26), 'forward_keys')
        # Applying the binary operator 'in' (line 2518)
        result_contains_17334 = python_operator(stypy.reporting.localization.Localization(__file__, 2518, 13), 'in', key_17332, forward_keys_17333)
        
        # Testing the type of an if condition (line 2518)
        if_condition_17335 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2518, 13), result_contains_17334)
        # Assigning a type to the variable 'if_condition_17335' (line 2518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2518, 13), 'if_condition_17335', if_condition_17335)
        # SSA begins for if statement (line 2518)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to forward(...): (line 2519)
        # Processing the call keyword arguments (line 2519)
        kwargs_17338 = {}
        # Getting the type of 'toolbar' (line 2519)
        toolbar_17336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2519, 12), 'toolbar', False)
        # Obtaining the member 'forward' of a type (line 2519)
        forward_17337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2519, 12), toolbar_17336, 'forward')
        # Calling forward(args, kwargs) (line 2519)
        forward_call_result_17339 = invoke(stypy.reporting.localization.Localization(__file__, 2519, 12), forward_17337, *[], **kwargs_17338)
        
        # SSA branch for the else part of an if statement (line 2518)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'event' (line 2521)
        event_17340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 13), 'event')
        # Obtaining the member 'key' of a type (line 2521)
        key_17341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2521, 13), event_17340, 'key')
        # Getting the type of 'pan_keys' (line 2521)
        pan_keys_17342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 26), 'pan_keys')
        # Applying the binary operator 'in' (line 2521)
        result_contains_17343 = python_operator(stypy.reporting.localization.Localization(__file__, 2521, 13), 'in', key_17341, pan_keys_17342)
        
        # Testing the type of an if condition (line 2521)
        if_condition_17344 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2521, 13), result_contains_17343)
        # Assigning a type to the variable 'if_condition_17344' (line 2521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2521, 13), 'if_condition_17344', if_condition_17344)
        # SSA begins for if statement (line 2521)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to pan(...): (line 2522)
        # Processing the call keyword arguments (line 2522)
        kwargs_17347 = {}
        # Getting the type of 'toolbar' (line 2522)
        toolbar_17345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 12), 'toolbar', False)
        # Obtaining the member 'pan' of a type (line 2522)
        pan_17346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2522, 12), toolbar_17345, 'pan')
        # Calling pan(args, kwargs) (line 2522)
        pan_call_result_17348 = invoke(stypy.reporting.localization.Localization(__file__, 2522, 12), pan_17346, *[], **kwargs_17347)
        
        
        # Call to _set_cursor(...): (line 2523)
        # Processing the call arguments (line 2523)
        # Getting the type of 'event' (line 2523)
        event_17351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2523, 32), 'event', False)
        # Processing the call keyword arguments (line 2523)
        kwargs_17352 = {}
        # Getting the type of 'toolbar' (line 2523)
        toolbar_17349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2523, 12), 'toolbar', False)
        # Obtaining the member '_set_cursor' of a type (line 2523)
        _set_cursor_17350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2523, 12), toolbar_17349, '_set_cursor')
        # Calling _set_cursor(args, kwargs) (line 2523)
        _set_cursor_call_result_17353 = invoke(stypy.reporting.localization.Localization(__file__, 2523, 12), _set_cursor_17350, *[event_17351], **kwargs_17352)
        
        # SSA branch for the else part of an if statement (line 2521)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'event' (line 2525)
        event_17354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 13), 'event')
        # Obtaining the member 'key' of a type (line 2525)
        key_17355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2525, 13), event_17354, 'key')
        # Getting the type of 'zoom_keys' (line 2525)
        zoom_keys_17356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 26), 'zoom_keys')
        # Applying the binary operator 'in' (line 2525)
        result_contains_17357 = python_operator(stypy.reporting.localization.Localization(__file__, 2525, 13), 'in', key_17355, zoom_keys_17356)
        
        # Testing the type of an if condition (line 2525)
        if_condition_17358 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2525, 13), result_contains_17357)
        # Assigning a type to the variable 'if_condition_17358' (line 2525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2525, 13), 'if_condition_17358', if_condition_17358)
        # SSA begins for if statement (line 2525)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to zoom(...): (line 2526)
        # Processing the call keyword arguments (line 2526)
        kwargs_17361 = {}
        # Getting the type of 'toolbar' (line 2526)
        toolbar_17359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2526, 12), 'toolbar', False)
        # Obtaining the member 'zoom' of a type (line 2526)
        zoom_17360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2526, 12), toolbar_17359, 'zoom')
        # Calling zoom(args, kwargs) (line 2526)
        zoom_call_result_17362 = invoke(stypy.reporting.localization.Localization(__file__, 2526, 12), zoom_17360, *[], **kwargs_17361)
        
        
        # Call to _set_cursor(...): (line 2527)
        # Processing the call arguments (line 2527)
        # Getting the type of 'event' (line 2527)
        event_17365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2527, 32), 'event', False)
        # Processing the call keyword arguments (line 2527)
        kwargs_17366 = {}
        # Getting the type of 'toolbar' (line 2527)
        toolbar_17363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2527, 12), 'toolbar', False)
        # Obtaining the member '_set_cursor' of a type (line 2527)
        _set_cursor_17364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2527, 12), toolbar_17363, '_set_cursor')
        # Calling _set_cursor(args, kwargs) (line 2527)
        _set_cursor_call_result_17367 = invoke(stypy.reporting.localization.Localization(__file__, 2527, 12), _set_cursor_17364, *[event_17365], **kwargs_17366)
        
        # SSA branch for the else part of an if statement (line 2525)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'event' (line 2529)
        event_17368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2529, 13), 'event')
        # Obtaining the member 'key' of a type (line 2529)
        key_17369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2529, 13), event_17368, 'key')
        # Getting the type of 'save_keys' (line 2529)
        save_keys_17370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2529, 26), 'save_keys')
        # Applying the binary operator 'in' (line 2529)
        result_contains_17371 = python_operator(stypy.reporting.localization.Localization(__file__, 2529, 13), 'in', key_17369, save_keys_17370)
        
        # Testing the type of an if condition (line 2529)
        if_condition_17372 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2529, 13), result_contains_17371)
        # Assigning a type to the variable 'if_condition_17372' (line 2529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2529, 13), 'if_condition_17372', if_condition_17372)
        # SSA begins for if statement (line 2529)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to save_figure(...): (line 2530)
        # Processing the call keyword arguments (line 2530)
        kwargs_17375 = {}
        # Getting the type of 'toolbar' (line 2530)
        toolbar_17373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2530, 12), 'toolbar', False)
        # Obtaining the member 'save_figure' of a type (line 2530)
        save_figure_17374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2530, 12), toolbar_17373, 'save_figure')
        # Calling save_figure(args, kwargs) (line 2530)
        save_figure_call_result_17376 = invoke(stypy.reporting.localization.Localization(__file__, 2530, 12), save_figure_17374, *[], **kwargs_17375)
        
        # SSA join for if statement (line 2529)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2525)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2521)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2518)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2515)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2511)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_17312:
            # SSA join for if statement (line 2509)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2532)
    # Getting the type of 'event' (line 2532)
    event_17377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2532, 7), 'event')
    # Obtaining the member 'inaxes' of a type (line 2532)
    inaxes_17378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2532, 7), event_17377, 'inaxes')
    # Getting the type of 'None' (line 2532)
    None_17379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2532, 23), 'None')
    
    (may_be_17380, more_types_in_union_17381) = may_be_none(inaxes_17378, None_17379)

    if may_be_17380:

        if more_types_in_union_17381:
            # Runtime conditional SSA (line 2532)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'stypy_return_type' (line 2533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2533, 8), 'stypy_return_type', types.NoneType)

        if more_types_in_union_17381:
            # SSA join for if statement (line 2532)
            module_type_store = module_type_store.join_ssa_context()


    

    @norecursion
    def _get_uniform_gridstate(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_uniform_gridstate'
        module_type_store = module_type_store.open_function_context('_get_uniform_gridstate', 2536, 4, False)
        
        # Passed parameters checking function
        _get_uniform_gridstate.stypy_localization = localization
        _get_uniform_gridstate.stypy_type_of_self = None
        _get_uniform_gridstate.stypy_type_store = module_type_store
        _get_uniform_gridstate.stypy_function_name = '_get_uniform_gridstate'
        _get_uniform_gridstate.stypy_param_names_list = ['ticks']
        _get_uniform_gridstate.stypy_varargs_param_name = None
        _get_uniform_gridstate.stypy_kwargs_param_name = None
        _get_uniform_gridstate.stypy_call_defaults = defaults
        _get_uniform_gridstate.stypy_call_varargs = varargs
        _get_uniform_gridstate.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_get_uniform_gridstate', ['ticks'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_uniform_gridstate', localization, ['ticks'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_uniform_gridstate(...)' code ##################

        
        
        # Call to all(...): (line 2539)
        # Processing the call arguments (line 2539)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 2539, 15, True)
        # Calculating comprehension expression
        # Getting the type of 'ticks' (line 2539)
        ticks_17385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 39), 'ticks', False)
        comprehension_17386 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2539, 15), ticks_17385)
        # Assigning a type to the variable 'tick' (line 2539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2539, 15), 'tick', comprehension_17386)
        # Getting the type of 'tick' (line 2539)
        tick_17383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 15), 'tick', False)
        # Obtaining the member 'gridOn' of a type (line 2539)
        gridOn_17384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2539, 15), tick_17383, 'gridOn')
        list_17387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2539, 15), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2539, 15), list_17387, gridOn_17384)
        # Processing the call keyword arguments (line 2539)
        kwargs_17388 = {}
        # Getting the type of 'all' (line 2539)
        all_17382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 11), 'all', False)
        # Calling all(args, kwargs) (line 2539)
        all_call_result_17389 = invoke(stypy.reporting.localization.Localization(__file__, 2539, 11), all_17382, *[list_17387], **kwargs_17388)
        
        # Testing the type of an if condition (line 2539)
        if_condition_17390 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2539, 8), all_call_result_17389)
        # Assigning a type to the variable 'if_condition_17390' (line 2539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2539, 8), 'if_condition_17390', if_condition_17390)
        # SSA begins for if statement (line 2539)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'True' (line 2540)
        True_17391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2540, 19), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 2540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2540, 12), 'stypy_return_type', True_17391)
        # SSA branch for the else part of an if statement (line 2539)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to any(...): (line 2541)
        # Processing the call arguments (line 2541)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 2541, 21, True)
        # Calculating comprehension expression
        # Getting the type of 'ticks' (line 2541)
        ticks_17395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 45), 'ticks', False)
        comprehension_17396 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2541, 21), ticks_17395)
        # Assigning a type to the variable 'tick' (line 2541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2541, 21), 'tick', comprehension_17396)
        # Getting the type of 'tick' (line 2541)
        tick_17393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 21), 'tick', False)
        # Obtaining the member 'gridOn' of a type (line 2541)
        gridOn_17394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2541, 21), tick_17393, 'gridOn')
        list_17397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2541, 21), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2541, 21), list_17397, gridOn_17394)
        # Processing the call keyword arguments (line 2541)
        kwargs_17398 = {}
        # Getting the type of 'any' (line 2541)
        any_17392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 17), 'any', False)
        # Calling any(args, kwargs) (line 2541)
        any_call_result_17399 = invoke(stypy.reporting.localization.Localization(__file__, 2541, 17), any_17392, *[list_17397], **kwargs_17398)
        
        # Applying the 'not' unary operator (line 2541)
        result_not__17400 = python_operator(stypy.reporting.localization.Localization(__file__, 2541, 13), 'not', any_call_result_17399)
        
        # Testing the type of an if condition (line 2541)
        if_condition_17401 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2541, 13), result_not__17400)
        # Assigning a type to the variable 'if_condition_17401' (line 2541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2541, 13), 'if_condition_17401', if_condition_17401)
        # SSA begins for if statement (line 2541)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'False' (line 2542)
        False_17402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2542, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 2542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2542, 12), 'stypy_return_type', False_17402)
        # SSA branch for the else part of an if statement (line 2541)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'None' (line 2544)
        None_17403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 2544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2544, 12), 'stypy_return_type', None_17403)
        # SSA join for if statement (line 2541)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2539)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_get_uniform_gridstate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_uniform_gridstate' in the type store
        # Getting the type of 'stypy_return_type' (line 2536)
        stypy_return_type_17404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2536, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17404)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_uniform_gridstate'
        return stypy_return_type_17404

    # Assigning a type to the variable '_get_uniform_gridstate' (line 2536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2536, 4), '_get_uniform_gridstate', _get_uniform_gridstate)
    
    # Assigning a Attribute to a Name (line 2546):
    
    # Assigning a Attribute to a Name (line 2546):
    
    # Assigning a Attribute to a Name (line 2546):
    # Getting the type of 'event' (line 2546)
    event_17405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 9), 'event')
    # Obtaining the member 'inaxes' of a type (line 2546)
    inaxes_17406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2546, 9), event_17405, 'inaxes')
    # Assigning a type to the variable 'ax' (line 2546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2546, 4), 'ax', inaxes_17406)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'event' (line 2551)
    event_17407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 8), 'event')
    # Obtaining the member 'key' of a type (line 2551)
    key_17408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2551, 8), event_17407, 'key')
    # Getting the type of 'grid_keys' (line 2551)
    grid_keys_17409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 21), 'grid_keys')
    # Applying the binary operator 'in' (line 2551)
    result_contains_17410 = python_operator(stypy.reporting.localization.Localization(__file__, 2551, 8), 'in', key_17408, grid_keys_17409)
    
    
    # Getting the type of 'None' (line 2553)
    None_17411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 16), 'None')
    
    # Obtaining an instance of the builtin type 'list' (line 2553)
    list_17412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2553, 28), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2553)
    # Adding element type (line 2553)
    
    # Call to _get_uniform_gridstate(...): (line 2553)
    # Processing the call arguments (line 2553)
    # Getting the type of 'ax' (line 2553)
    ax_17414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 52), 'ax', False)
    # Obtaining the member 'xaxis' of a type (line 2553)
    xaxis_17415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2553, 52), ax_17414, 'xaxis')
    # Obtaining the member 'minorTicks' of a type (line 2553)
    minorTicks_17416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2553, 52), xaxis_17415, 'minorTicks')
    # Processing the call keyword arguments (line 2553)
    kwargs_17417 = {}
    # Getting the type of '_get_uniform_gridstate' (line 2553)
    _get_uniform_gridstate_17413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 29), '_get_uniform_gridstate', False)
    # Calling _get_uniform_gridstate(args, kwargs) (line 2553)
    _get_uniform_gridstate_call_result_17418 = invoke(stypy.reporting.localization.Localization(__file__, 2553, 29), _get_uniform_gridstate_17413, *[minorTicks_17416], **kwargs_17417)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2553, 28), list_17412, _get_uniform_gridstate_call_result_17418)
    # Adding element type (line 2553)
    
    # Call to _get_uniform_gridstate(...): (line 2554)
    # Processing the call arguments (line 2554)
    # Getting the type of 'ax' (line 2554)
    ax_17420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 52), 'ax', False)
    # Obtaining the member 'yaxis' of a type (line 2554)
    yaxis_17421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2554, 52), ax_17420, 'yaxis')
    # Obtaining the member 'minorTicks' of a type (line 2554)
    minorTicks_17422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2554, 52), yaxis_17421, 'minorTicks')
    # Processing the call keyword arguments (line 2554)
    kwargs_17423 = {}
    # Getting the type of '_get_uniform_gridstate' (line 2554)
    _get_uniform_gridstate_17419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 29), '_get_uniform_gridstate', False)
    # Calling _get_uniform_gridstate(args, kwargs) (line 2554)
    _get_uniform_gridstate_call_result_17424 = invoke(stypy.reporting.localization.Localization(__file__, 2554, 29), _get_uniform_gridstate_17419, *[minorTicks_17422], **kwargs_17423)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2553, 28), list_17412, _get_uniform_gridstate_call_result_17424)
    
    # Applying the binary operator 'notin' (line 2553)
    result_contains_17425 = python_operator(stypy.reporting.localization.Localization(__file__, 2553, 16), 'notin', None_17411, list_17412)
    
    # Applying the binary operator 'and' (line 2551)
    result_and_keyword_17426 = python_operator(stypy.reporting.localization.Localization(__file__, 2551, 8), 'and', result_contains_17410, result_contains_17425)
    
    # Testing the type of an if condition (line 2551)
    if_condition_17427 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2551, 4), result_and_keyword_17426)
    # Assigning a type to the variable 'if_condition_17427' (line 2551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2551, 4), 'if_condition_17427', if_condition_17427)
    # SSA begins for if statement (line 2551)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2555):
    
    # Assigning a Call to a Name (line 2555):
    
    # Assigning a Call to a Name (line 2555):
    
    # Call to _get_uniform_gridstate(...): (line 2555)
    # Processing the call arguments (line 2555)
    # Getting the type of 'ax' (line 2555)
    ax_17429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 41), 'ax', False)
    # Obtaining the member 'xaxis' of a type (line 2555)
    xaxis_17430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2555, 41), ax_17429, 'xaxis')
    # Obtaining the member 'majorTicks' of a type (line 2555)
    majorTicks_17431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2555, 41), xaxis_17430, 'majorTicks')
    # Processing the call keyword arguments (line 2555)
    kwargs_17432 = {}
    # Getting the type of '_get_uniform_gridstate' (line 2555)
    _get_uniform_gridstate_17428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 18), '_get_uniform_gridstate', False)
    # Calling _get_uniform_gridstate(args, kwargs) (line 2555)
    _get_uniform_gridstate_call_result_17433 = invoke(stypy.reporting.localization.Localization(__file__, 2555, 18), _get_uniform_gridstate_17428, *[majorTicks_17431], **kwargs_17432)
    
    # Assigning a type to the variable 'x_state' (line 2555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2555, 8), 'x_state', _get_uniform_gridstate_call_result_17433)
    
    # Assigning a Call to a Name (line 2556):
    
    # Assigning a Call to a Name (line 2556):
    
    # Assigning a Call to a Name (line 2556):
    
    # Call to _get_uniform_gridstate(...): (line 2556)
    # Processing the call arguments (line 2556)
    # Getting the type of 'ax' (line 2556)
    ax_17435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 41), 'ax', False)
    # Obtaining the member 'yaxis' of a type (line 2556)
    yaxis_17436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2556, 41), ax_17435, 'yaxis')
    # Obtaining the member 'majorTicks' of a type (line 2556)
    majorTicks_17437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2556, 41), yaxis_17436, 'majorTicks')
    # Processing the call keyword arguments (line 2556)
    kwargs_17438 = {}
    # Getting the type of '_get_uniform_gridstate' (line 2556)
    _get_uniform_gridstate_17434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 18), '_get_uniform_gridstate', False)
    # Calling _get_uniform_gridstate(args, kwargs) (line 2556)
    _get_uniform_gridstate_call_result_17439 = invoke(stypy.reporting.localization.Localization(__file__, 2556, 18), _get_uniform_gridstate_17434, *[majorTicks_17437], **kwargs_17438)
    
    # Assigning a type to the variable 'y_state' (line 2556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2556, 8), 'y_state', _get_uniform_gridstate_call_result_17439)
    
    # Assigning a List to a Name (line 2557):
    
    # Assigning a List to a Name (line 2557):
    
    # Assigning a List to a Name (line 2557):
    
    # Obtaining an instance of the builtin type 'list' (line 2557)
    list_17440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2557, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2557)
    # Adding element type (line 2557)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2557)
    tuple_17441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2557, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2557)
    # Adding element type (line 2557)
    # Getting the type of 'False' (line 2557)
    False_17442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 18), 'False')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 18), tuple_17441, False_17442)
    # Adding element type (line 2557)
    # Getting the type of 'False' (line 2557)
    False_17443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 25), 'False')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 18), tuple_17441, False_17443)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 16), list_17440, tuple_17441)
    # Adding element type (line 2557)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2557)
    tuple_17444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2557, 34), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2557)
    # Adding element type (line 2557)
    # Getting the type of 'True' (line 2557)
    True_17445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 34), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 34), tuple_17444, True_17445)
    # Adding element type (line 2557)
    # Getting the type of 'False' (line 2557)
    False_17446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 40), 'False')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 34), tuple_17444, False_17446)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 16), list_17440, tuple_17444)
    # Adding element type (line 2557)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2557)
    tuple_17447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2557, 49), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2557)
    # Adding element type (line 2557)
    # Getting the type of 'True' (line 2557)
    True_17448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 49), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 49), tuple_17447, True_17448)
    # Adding element type (line 2557)
    # Getting the type of 'True' (line 2557)
    True_17449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 55), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 49), tuple_17447, True_17449)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 16), list_17440, tuple_17447)
    # Adding element type (line 2557)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2557)
    tuple_17450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2557, 63), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2557)
    # Adding element type (line 2557)
    # Getting the type of 'False' (line 2557)
    False_17451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 63), 'False')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 63), tuple_17450, False_17451)
    # Adding element type (line 2557)
    # Getting the type of 'True' (line 2557)
    True_17452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 70), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 63), tuple_17450, True_17452)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 16), list_17440, tuple_17450)
    
    # Assigning a type to the variable 'cycle' (line 2557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2557, 8), 'cycle', list_17440)
    
    
    # SSA begins for try-except statement (line 2558)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Subscript to a Tuple (line 2559):
    
    # Assigning a Subscript to a Name (line 2559):
    
    # Assigning a Subscript to a Name (line 2559):
    
    # Obtaining the type of the subscript
    int_17453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2559, 12), 'int')
    
    # Obtaining the type of the subscript
    
    # Call to index(...): (line 2560)
    # Processing the call arguments (line 2560)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2560)
    tuple_17456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2560, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2560)
    # Adding element type (line 2560)
    # Getting the type of 'x_state' (line 2560)
    x_state_17457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 36), 'x_state', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2560, 36), tuple_17456, x_state_17457)
    # Adding element type (line 2560)
    # Getting the type of 'y_state' (line 2560)
    y_state_17458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 45), 'y_state', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2560, 36), tuple_17456, y_state_17458)
    
    # Processing the call keyword arguments (line 2560)
    kwargs_17459 = {}
    # Getting the type of 'cycle' (line 2560)
    cycle_17454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 23), 'cycle', False)
    # Obtaining the member 'index' of a type (line 2560)
    index_17455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2560, 23), cycle_17454, 'index')
    # Calling index(args, kwargs) (line 2560)
    index_call_result_17460 = invoke(stypy.reporting.localization.Localization(__file__, 2560, 23), index_17455, *[tuple_17456], **kwargs_17459)
    
    int_17461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2560, 57), 'int')
    # Applying the binary operator '+' (line 2560)
    result_add_17462 = python_operator(stypy.reporting.localization.Localization(__file__, 2560, 23), '+', index_call_result_17460, int_17461)
    
    
    # Call to len(...): (line 2560)
    # Processing the call arguments (line 2560)
    # Getting the type of 'cycle' (line 2560)
    cycle_17464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 66), 'cycle', False)
    # Processing the call keyword arguments (line 2560)
    kwargs_17465 = {}
    # Getting the type of 'len' (line 2560)
    len_17463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 62), 'len', False)
    # Calling len(args, kwargs) (line 2560)
    len_call_result_17466 = invoke(stypy.reporting.localization.Localization(__file__, 2560, 62), len_17463, *[cycle_17464], **kwargs_17465)
    
    # Applying the binary operator '%' (line 2560)
    result_mod_17467 = python_operator(stypy.reporting.localization.Localization(__file__, 2560, 22), '%', result_add_17462, len_call_result_17466)
    
    # Getting the type of 'cycle' (line 2560)
    cycle_17468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 16), 'cycle')
    # Obtaining the member '__getitem__' of a type (line 2560)
    getitem___17469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2560, 16), cycle_17468, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2560)
    subscript_call_result_17470 = invoke(stypy.reporting.localization.Localization(__file__, 2560, 16), getitem___17469, result_mod_17467)
    
    # Obtaining the member '__getitem__' of a type (line 2559)
    getitem___17471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2559, 12), subscript_call_result_17470, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2559)
    subscript_call_result_17472 = invoke(stypy.reporting.localization.Localization(__file__, 2559, 12), getitem___17471, int_17453)
    
    # Assigning a type to the variable 'tuple_var_assignment_13738' (line 2559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2559, 12), 'tuple_var_assignment_13738', subscript_call_result_17472)
    
    # Assigning a Subscript to a Name (line 2559):
    
    # Assigning a Subscript to a Name (line 2559):
    
    # Obtaining the type of the subscript
    int_17473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2559, 12), 'int')
    
    # Obtaining the type of the subscript
    
    # Call to index(...): (line 2560)
    # Processing the call arguments (line 2560)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2560)
    tuple_17476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2560, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2560)
    # Adding element type (line 2560)
    # Getting the type of 'x_state' (line 2560)
    x_state_17477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 36), 'x_state', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2560, 36), tuple_17476, x_state_17477)
    # Adding element type (line 2560)
    # Getting the type of 'y_state' (line 2560)
    y_state_17478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 45), 'y_state', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2560, 36), tuple_17476, y_state_17478)
    
    # Processing the call keyword arguments (line 2560)
    kwargs_17479 = {}
    # Getting the type of 'cycle' (line 2560)
    cycle_17474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 23), 'cycle', False)
    # Obtaining the member 'index' of a type (line 2560)
    index_17475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2560, 23), cycle_17474, 'index')
    # Calling index(args, kwargs) (line 2560)
    index_call_result_17480 = invoke(stypy.reporting.localization.Localization(__file__, 2560, 23), index_17475, *[tuple_17476], **kwargs_17479)
    
    int_17481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2560, 57), 'int')
    # Applying the binary operator '+' (line 2560)
    result_add_17482 = python_operator(stypy.reporting.localization.Localization(__file__, 2560, 23), '+', index_call_result_17480, int_17481)
    
    
    # Call to len(...): (line 2560)
    # Processing the call arguments (line 2560)
    # Getting the type of 'cycle' (line 2560)
    cycle_17484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 66), 'cycle', False)
    # Processing the call keyword arguments (line 2560)
    kwargs_17485 = {}
    # Getting the type of 'len' (line 2560)
    len_17483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 62), 'len', False)
    # Calling len(args, kwargs) (line 2560)
    len_call_result_17486 = invoke(stypy.reporting.localization.Localization(__file__, 2560, 62), len_17483, *[cycle_17484], **kwargs_17485)
    
    # Applying the binary operator '%' (line 2560)
    result_mod_17487 = python_operator(stypy.reporting.localization.Localization(__file__, 2560, 22), '%', result_add_17482, len_call_result_17486)
    
    # Getting the type of 'cycle' (line 2560)
    cycle_17488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 16), 'cycle')
    # Obtaining the member '__getitem__' of a type (line 2560)
    getitem___17489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2560, 16), cycle_17488, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2560)
    subscript_call_result_17490 = invoke(stypy.reporting.localization.Localization(__file__, 2560, 16), getitem___17489, result_mod_17487)
    
    # Obtaining the member '__getitem__' of a type (line 2559)
    getitem___17491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2559, 12), subscript_call_result_17490, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2559)
    subscript_call_result_17492 = invoke(stypy.reporting.localization.Localization(__file__, 2559, 12), getitem___17491, int_17473)
    
    # Assigning a type to the variable 'tuple_var_assignment_13739' (line 2559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2559, 12), 'tuple_var_assignment_13739', subscript_call_result_17492)
    
    # Assigning a Name to a Name (line 2559):
    
    # Assigning a Name to a Name (line 2559):
    # Getting the type of 'tuple_var_assignment_13738' (line 2559)
    tuple_var_assignment_13738_17493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 12), 'tuple_var_assignment_13738')
    # Assigning a type to the variable 'x_state' (line 2559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2559, 12), 'x_state', tuple_var_assignment_13738_17493)
    
    # Assigning a Name to a Name (line 2559):
    
    # Assigning a Name to a Name (line 2559):
    # Getting the type of 'tuple_var_assignment_13739' (line 2559)
    tuple_var_assignment_13739_17494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 12), 'tuple_var_assignment_13739')
    # Assigning a type to the variable 'y_state' (line 2559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2559, 21), 'y_state', tuple_var_assignment_13739_17494)
    # SSA branch for the except part of a try statement (line 2558)
    # SSA branch for the except 'ValueError' branch of a try statement (line 2558)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA branch for the else branch of a try statement (line 2558)
    module_type_store.open_ssa_branch('except else')
    
    # Call to grid(...): (line 2566)
    # Processing the call arguments (line 2566)
    # Getting the type of 'x_state' (line 2566)
    x_state_17497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 20), 'x_state', False)
    # Processing the call keyword arguments (line 2566)
    
    # Getting the type of 'x_state' (line 2566)
    x_state_17498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 46), 'x_state', False)
    # Testing the type of an if expression (line 2566)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2566, 35), x_state_17498)
    # SSA begins for if expression (line 2566)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    unicode_17499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2566, 35), 'unicode', u'major')
    # SSA branch for the else part of an if expression (line 2566)
    module_type_store.open_ssa_branch('if expression else')
    unicode_17500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2566, 59), 'unicode', u'both')
    # SSA join for if expression (line 2566)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_17501 = union_type.UnionType.add(unicode_17499, unicode_17500)
    
    keyword_17502 = if_exp_17501
    unicode_17503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2566, 72), 'unicode', u'x')
    keyword_17504 = unicode_17503
    kwargs_17505 = {'which': keyword_17502, 'axis': keyword_17504}
    # Getting the type of 'ax' (line 2566)
    ax_17495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 12), 'ax', False)
    # Obtaining the member 'grid' of a type (line 2566)
    grid_17496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2566, 12), ax_17495, 'grid')
    # Calling grid(args, kwargs) (line 2566)
    grid_call_result_17506 = invoke(stypy.reporting.localization.Localization(__file__, 2566, 12), grid_17496, *[x_state_17497], **kwargs_17505)
    
    
    # Call to grid(...): (line 2567)
    # Processing the call arguments (line 2567)
    # Getting the type of 'y_state' (line 2567)
    y_state_17509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 20), 'y_state', False)
    # Processing the call keyword arguments (line 2567)
    
    # Getting the type of 'y_state' (line 2567)
    y_state_17510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 46), 'y_state', False)
    # Testing the type of an if expression (line 2567)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2567, 35), y_state_17510)
    # SSA begins for if expression (line 2567)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    unicode_17511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2567, 35), 'unicode', u'major')
    # SSA branch for the else part of an if expression (line 2567)
    module_type_store.open_ssa_branch('if expression else')
    unicode_17512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2567, 59), 'unicode', u'both')
    # SSA join for if expression (line 2567)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_17513 = union_type.UnionType.add(unicode_17511, unicode_17512)
    
    keyword_17514 = if_exp_17513
    unicode_17515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2567, 72), 'unicode', u'y')
    keyword_17516 = unicode_17515
    kwargs_17517 = {'which': keyword_17514, 'axis': keyword_17516}
    # Getting the type of 'ax' (line 2567)
    ax_17507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 12), 'ax', False)
    # Obtaining the member 'grid' of a type (line 2567)
    grid_17508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2567, 12), ax_17507, 'grid')
    # Calling grid(args, kwargs) (line 2567)
    grid_call_result_17518 = invoke(stypy.reporting.localization.Localization(__file__, 2567, 12), grid_17508, *[y_state_17509], **kwargs_17517)
    
    
    # Call to draw_idle(...): (line 2568)
    # Processing the call keyword arguments (line 2568)
    kwargs_17521 = {}
    # Getting the type of 'canvas' (line 2568)
    canvas_17519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2568, 12), 'canvas', False)
    # Obtaining the member 'draw_idle' of a type (line 2568)
    draw_idle_17520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2568, 12), canvas_17519, 'draw_idle')
    # Calling draw_idle(args, kwargs) (line 2568)
    draw_idle_call_result_17522 = invoke(stypy.reporting.localization.Localization(__file__, 2568, 12), draw_idle_17520, *[], **kwargs_17521)
    
    # SSA join for try-except statement (line 2558)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2551)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'event' (line 2570)
    event_17523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 8), 'event')
    # Obtaining the member 'key' of a type (line 2570)
    key_17524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2570, 8), event_17523, 'key')
    # Getting the type of 'grid_minor_keys' (line 2570)
    grid_minor_keys_17525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 21), 'grid_minor_keys')
    # Applying the binary operator 'in' (line 2570)
    result_contains_17526 = python_operator(stypy.reporting.localization.Localization(__file__, 2570, 8), 'in', key_17524, grid_minor_keys_17525)
    
    
    # Getting the type of 'None' (line 2572)
    None_17527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 16), 'None')
    
    # Obtaining an instance of the builtin type 'list' (line 2572)
    list_17528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 28), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2572)
    # Adding element type (line 2572)
    
    # Call to _get_uniform_gridstate(...): (line 2572)
    # Processing the call arguments (line 2572)
    # Getting the type of 'ax' (line 2572)
    ax_17530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 52), 'ax', False)
    # Obtaining the member 'xaxis' of a type (line 2572)
    xaxis_17531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2572, 52), ax_17530, 'xaxis')
    # Obtaining the member 'majorTicks' of a type (line 2572)
    majorTicks_17532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2572, 52), xaxis_17531, 'majorTicks')
    # Processing the call keyword arguments (line 2572)
    kwargs_17533 = {}
    # Getting the type of '_get_uniform_gridstate' (line 2572)
    _get_uniform_gridstate_17529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 29), '_get_uniform_gridstate', False)
    # Calling _get_uniform_gridstate(args, kwargs) (line 2572)
    _get_uniform_gridstate_call_result_17534 = invoke(stypy.reporting.localization.Localization(__file__, 2572, 29), _get_uniform_gridstate_17529, *[majorTicks_17532], **kwargs_17533)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2572, 28), list_17528, _get_uniform_gridstate_call_result_17534)
    # Adding element type (line 2572)
    
    # Call to _get_uniform_gridstate(...): (line 2573)
    # Processing the call arguments (line 2573)
    # Getting the type of 'ax' (line 2573)
    ax_17536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 52), 'ax', False)
    # Obtaining the member 'yaxis' of a type (line 2573)
    yaxis_17537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2573, 52), ax_17536, 'yaxis')
    # Obtaining the member 'majorTicks' of a type (line 2573)
    majorTicks_17538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2573, 52), yaxis_17537, 'majorTicks')
    # Processing the call keyword arguments (line 2573)
    kwargs_17539 = {}
    # Getting the type of '_get_uniform_gridstate' (line 2573)
    _get_uniform_gridstate_17535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 29), '_get_uniform_gridstate', False)
    # Calling _get_uniform_gridstate(args, kwargs) (line 2573)
    _get_uniform_gridstate_call_result_17540 = invoke(stypy.reporting.localization.Localization(__file__, 2573, 29), _get_uniform_gridstate_17535, *[majorTicks_17538], **kwargs_17539)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2572, 28), list_17528, _get_uniform_gridstate_call_result_17540)
    
    # Applying the binary operator 'notin' (line 2572)
    result_contains_17541 = python_operator(stypy.reporting.localization.Localization(__file__, 2572, 16), 'notin', None_17527, list_17528)
    
    # Applying the binary operator 'and' (line 2570)
    result_and_keyword_17542 = python_operator(stypy.reporting.localization.Localization(__file__, 2570, 8), 'and', result_contains_17526, result_contains_17541)
    
    # Testing the type of an if condition (line 2570)
    if_condition_17543 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2570, 4), result_and_keyword_17542)
    # Assigning a type to the variable 'if_condition_17543' (line 2570)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2570, 4), 'if_condition_17543', if_condition_17543)
    # SSA begins for if statement (line 2570)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2574):
    
    # Assigning a Call to a Name (line 2574):
    
    # Assigning a Call to a Name (line 2574):
    
    # Call to _get_uniform_gridstate(...): (line 2574)
    # Processing the call arguments (line 2574)
    # Getting the type of 'ax' (line 2574)
    ax_17545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 41), 'ax', False)
    # Obtaining the member 'xaxis' of a type (line 2574)
    xaxis_17546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2574, 41), ax_17545, 'xaxis')
    # Obtaining the member 'minorTicks' of a type (line 2574)
    minorTicks_17547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2574, 41), xaxis_17546, 'minorTicks')
    # Processing the call keyword arguments (line 2574)
    kwargs_17548 = {}
    # Getting the type of '_get_uniform_gridstate' (line 2574)
    _get_uniform_gridstate_17544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 18), '_get_uniform_gridstate', False)
    # Calling _get_uniform_gridstate(args, kwargs) (line 2574)
    _get_uniform_gridstate_call_result_17549 = invoke(stypy.reporting.localization.Localization(__file__, 2574, 18), _get_uniform_gridstate_17544, *[minorTicks_17547], **kwargs_17548)
    
    # Assigning a type to the variable 'x_state' (line 2574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2574, 8), 'x_state', _get_uniform_gridstate_call_result_17549)
    
    # Assigning a Call to a Name (line 2575):
    
    # Assigning a Call to a Name (line 2575):
    
    # Assigning a Call to a Name (line 2575):
    
    # Call to _get_uniform_gridstate(...): (line 2575)
    # Processing the call arguments (line 2575)
    # Getting the type of 'ax' (line 2575)
    ax_17551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 41), 'ax', False)
    # Obtaining the member 'yaxis' of a type (line 2575)
    yaxis_17552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2575, 41), ax_17551, 'yaxis')
    # Obtaining the member 'minorTicks' of a type (line 2575)
    minorTicks_17553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2575, 41), yaxis_17552, 'minorTicks')
    # Processing the call keyword arguments (line 2575)
    kwargs_17554 = {}
    # Getting the type of '_get_uniform_gridstate' (line 2575)
    _get_uniform_gridstate_17550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 18), '_get_uniform_gridstate', False)
    # Calling _get_uniform_gridstate(args, kwargs) (line 2575)
    _get_uniform_gridstate_call_result_17555 = invoke(stypy.reporting.localization.Localization(__file__, 2575, 18), _get_uniform_gridstate_17550, *[minorTicks_17553], **kwargs_17554)
    
    # Assigning a type to the variable 'y_state' (line 2575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2575, 8), 'y_state', _get_uniform_gridstate_call_result_17555)
    
    # Assigning a List to a Name (line 2576):
    
    # Assigning a List to a Name (line 2576):
    
    # Assigning a List to a Name (line 2576):
    
    # Obtaining an instance of the builtin type 'list' (line 2576)
    list_17556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2576, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2576)
    # Adding element type (line 2576)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2576)
    tuple_17557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2576, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2576)
    # Adding element type (line 2576)
    # Getting the type of 'False' (line 2576)
    False_17558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 18), 'False')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2576, 18), tuple_17557, False_17558)
    # Adding element type (line 2576)
    # Getting the type of 'False' (line 2576)
    False_17559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 25), 'False')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2576, 18), tuple_17557, False_17559)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2576, 16), list_17556, tuple_17557)
    # Adding element type (line 2576)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2576)
    tuple_17560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2576, 34), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2576)
    # Adding element type (line 2576)
    # Getting the type of 'True' (line 2576)
    True_17561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 34), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2576, 34), tuple_17560, True_17561)
    # Adding element type (line 2576)
    # Getting the type of 'False' (line 2576)
    False_17562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 40), 'False')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2576, 34), tuple_17560, False_17562)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2576, 16), list_17556, tuple_17560)
    # Adding element type (line 2576)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2576)
    tuple_17563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2576, 49), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2576)
    # Adding element type (line 2576)
    # Getting the type of 'True' (line 2576)
    True_17564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 49), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2576, 49), tuple_17563, True_17564)
    # Adding element type (line 2576)
    # Getting the type of 'True' (line 2576)
    True_17565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 55), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2576, 49), tuple_17563, True_17565)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2576, 16), list_17556, tuple_17563)
    # Adding element type (line 2576)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2576)
    tuple_17566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2576, 63), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2576)
    # Adding element type (line 2576)
    # Getting the type of 'False' (line 2576)
    False_17567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 63), 'False')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2576, 63), tuple_17566, False_17567)
    # Adding element type (line 2576)
    # Getting the type of 'True' (line 2576)
    True_17568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 70), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2576, 63), tuple_17566, True_17568)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2576, 16), list_17556, tuple_17566)
    
    # Assigning a type to the variable 'cycle' (line 2576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2576, 8), 'cycle', list_17556)
    
    
    # SSA begins for try-except statement (line 2577)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Subscript to a Tuple (line 2578):
    
    # Assigning a Subscript to a Name (line 2578):
    
    # Assigning a Subscript to a Name (line 2578):
    
    # Obtaining the type of the subscript
    int_17569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2578, 12), 'int')
    
    # Obtaining the type of the subscript
    
    # Call to index(...): (line 2579)
    # Processing the call arguments (line 2579)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2579)
    tuple_17572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2579, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2579)
    # Adding element type (line 2579)
    # Getting the type of 'x_state' (line 2579)
    x_state_17573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 36), 'x_state', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2579, 36), tuple_17572, x_state_17573)
    # Adding element type (line 2579)
    # Getting the type of 'y_state' (line 2579)
    y_state_17574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 45), 'y_state', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2579, 36), tuple_17572, y_state_17574)
    
    # Processing the call keyword arguments (line 2579)
    kwargs_17575 = {}
    # Getting the type of 'cycle' (line 2579)
    cycle_17570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 23), 'cycle', False)
    # Obtaining the member 'index' of a type (line 2579)
    index_17571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2579, 23), cycle_17570, 'index')
    # Calling index(args, kwargs) (line 2579)
    index_call_result_17576 = invoke(stypy.reporting.localization.Localization(__file__, 2579, 23), index_17571, *[tuple_17572], **kwargs_17575)
    
    int_17577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2579, 57), 'int')
    # Applying the binary operator '+' (line 2579)
    result_add_17578 = python_operator(stypy.reporting.localization.Localization(__file__, 2579, 23), '+', index_call_result_17576, int_17577)
    
    
    # Call to len(...): (line 2579)
    # Processing the call arguments (line 2579)
    # Getting the type of 'cycle' (line 2579)
    cycle_17580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 66), 'cycle', False)
    # Processing the call keyword arguments (line 2579)
    kwargs_17581 = {}
    # Getting the type of 'len' (line 2579)
    len_17579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 62), 'len', False)
    # Calling len(args, kwargs) (line 2579)
    len_call_result_17582 = invoke(stypy.reporting.localization.Localization(__file__, 2579, 62), len_17579, *[cycle_17580], **kwargs_17581)
    
    # Applying the binary operator '%' (line 2579)
    result_mod_17583 = python_operator(stypy.reporting.localization.Localization(__file__, 2579, 22), '%', result_add_17578, len_call_result_17582)
    
    # Getting the type of 'cycle' (line 2579)
    cycle_17584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 16), 'cycle')
    # Obtaining the member '__getitem__' of a type (line 2579)
    getitem___17585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2579, 16), cycle_17584, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2579)
    subscript_call_result_17586 = invoke(stypy.reporting.localization.Localization(__file__, 2579, 16), getitem___17585, result_mod_17583)
    
    # Obtaining the member '__getitem__' of a type (line 2578)
    getitem___17587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 12), subscript_call_result_17586, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2578)
    subscript_call_result_17588 = invoke(stypy.reporting.localization.Localization(__file__, 2578, 12), getitem___17587, int_17569)
    
    # Assigning a type to the variable 'tuple_var_assignment_13740' (line 2578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2578, 12), 'tuple_var_assignment_13740', subscript_call_result_17588)
    
    # Assigning a Subscript to a Name (line 2578):
    
    # Assigning a Subscript to a Name (line 2578):
    
    # Obtaining the type of the subscript
    int_17589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2578, 12), 'int')
    
    # Obtaining the type of the subscript
    
    # Call to index(...): (line 2579)
    # Processing the call arguments (line 2579)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2579)
    tuple_17592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2579, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2579)
    # Adding element type (line 2579)
    # Getting the type of 'x_state' (line 2579)
    x_state_17593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 36), 'x_state', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2579, 36), tuple_17592, x_state_17593)
    # Adding element type (line 2579)
    # Getting the type of 'y_state' (line 2579)
    y_state_17594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 45), 'y_state', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2579, 36), tuple_17592, y_state_17594)
    
    # Processing the call keyword arguments (line 2579)
    kwargs_17595 = {}
    # Getting the type of 'cycle' (line 2579)
    cycle_17590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 23), 'cycle', False)
    # Obtaining the member 'index' of a type (line 2579)
    index_17591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2579, 23), cycle_17590, 'index')
    # Calling index(args, kwargs) (line 2579)
    index_call_result_17596 = invoke(stypy.reporting.localization.Localization(__file__, 2579, 23), index_17591, *[tuple_17592], **kwargs_17595)
    
    int_17597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2579, 57), 'int')
    # Applying the binary operator '+' (line 2579)
    result_add_17598 = python_operator(stypy.reporting.localization.Localization(__file__, 2579, 23), '+', index_call_result_17596, int_17597)
    
    
    # Call to len(...): (line 2579)
    # Processing the call arguments (line 2579)
    # Getting the type of 'cycle' (line 2579)
    cycle_17600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 66), 'cycle', False)
    # Processing the call keyword arguments (line 2579)
    kwargs_17601 = {}
    # Getting the type of 'len' (line 2579)
    len_17599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 62), 'len', False)
    # Calling len(args, kwargs) (line 2579)
    len_call_result_17602 = invoke(stypy.reporting.localization.Localization(__file__, 2579, 62), len_17599, *[cycle_17600], **kwargs_17601)
    
    # Applying the binary operator '%' (line 2579)
    result_mod_17603 = python_operator(stypy.reporting.localization.Localization(__file__, 2579, 22), '%', result_add_17598, len_call_result_17602)
    
    # Getting the type of 'cycle' (line 2579)
    cycle_17604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 16), 'cycle')
    # Obtaining the member '__getitem__' of a type (line 2579)
    getitem___17605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2579, 16), cycle_17604, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2579)
    subscript_call_result_17606 = invoke(stypy.reporting.localization.Localization(__file__, 2579, 16), getitem___17605, result_mod_17603)
    
    # Obtaining the member '__getitem__' of a type (line 2578)
    getitem___17607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 12), subscript_call_result_17606, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2578)
    subscript_call_result_17608 = invoke(stypy.reporting.localization.Localization(__file__, 2578, 12), getitem___17607, int_17589)
    
    # Assigning a type to the variable 'tuple_var_assignment_13741' (line 2578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2578, 12), 'tuple_var_assignment_13741', subscript_call_result_17608)
    
    # Assigning a Name to a Name (line 2578):
    
    # Assigning a Name to a Name (line 2578):
    # Getting the type of 'tuple_var_assignment_13740' (line 2578)
    tuple_var_assignment_13740_17609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 12), 'tuple_var_assignment_13740')
    # Assigning a type to the variable 'x_state' (line 2578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2578, 12), 'x_state', tuple_var_assignment_13740_17609)
    
    # Assigning a Name to a Name (line 2578):
    
    # Assigning a Name to a Name (line 2578):
    # Getting the type of 'tuple_var_assignment_13741' (line 2578)
    tuple_var_assignment_13741_17610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 12), 'tuple_var_assignment_13741')
    # Assigning a type to the variable 'y_state' (line 2578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2578, 21), 'y_state', tuple_var_assignment_13741_17610)
    # SSA branch for the except part of a try statement (line 2577)
    # SSA branch for the except 'ValueError' branch of a try statement (line 2577)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA branch for the else branch of a try statement (line 2577)
    module_type_store.open_ssa_branch('except else')
    
    # Call to grid(...): (line 2584)
    # Processing the call arguments (line 2584)
    # Getting the type of 'x_state' (line 2584)
    x_state_17613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 20), 'x_state', False)
    # Processing the call keyword arguments (line 2584)
    unicode_17614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2584, 35), 'unicode', u'both')
    keyword_17615 = unicode_17614
    unicode_17616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2584, 48), 'unicode', u'x')
    keyword_17617 = unicode_17616
    kwargs_17618 = {'which': keyword_17615, 'axis': keyword_17617}
    # Getting the type of 'ax' (line 2584)
    ax_17611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 12), 'ax', False)
    # Obtaining the member 'grid' of a type (line 2584)
    grid_17612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2584, 12), ax_17611, 'grid')
    # Calling grid(args, kwargs) (line 2584)
    grid_call_result_17619 = invoke(stypy.reporting.localization.Localization(__file__, 2584, 12), grid_17612, *[x_state_17613], **kwargs_17618)
    
    
    # Call to grid(...): (line 2585)
    # Processing the call arguments (line 2585)
    # Getting the type of 'y_state' (line 2585)
    y_state_17622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 20), 'y_state', False)
    # Processing the call keyword arguments (line 2585)
    unicode_17623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2585, 35), 'unicode', u'both')
    keyword_17624 = unicode_17623
    unicode_17625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2585, 48), 'unicode', u'y')
    keyword_17626 = unicode_17625
    kwargs_17627 = {'which': keyword_17624, 'axis': keyword_17626}
    # Getting the type of 'ax' (line 2585)
    ax_17620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 12), 'ax', False)
    # Obtaining the member 'grid' of a type (line 2585)
    grid_17621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2585, 12), ax_17620, 'grid')
    # Calling grid(args, kwargs) (line 2585)
    grid_call_result_17628 = invoke(stypy.reporting.localization.Localization(__file__, 2585, 12), grid_17621, *[y_state_17622], **kwargs_17627)
    
    
    # Call to draw_idle(...): (line 2586)
    # Processing the call keyword arguments (line 2586)
    kwargs_17631 = {}
    # Getting the type of 'canvas' (line 2586)
    canvas_17629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 12), 'canvas', False)
    # Obtaining the member 'draw_idle' of a type (line 2586)
    draw_idle_17630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2586, 12), canvas_17629, 'draw_idle')
    # Calling draw_idle(args, kwargs) (line 2586)
    draw_idle_call_result_17632 = invoke(stypy.reporting.localization.Localization(__file__, 2586, 12), draw_idle_17630, *[], **kwargs_17631)
    
    # SSA join for try-except statement (line 2577)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2570)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'event' (line 2588)
    event_17633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 9), 'event')
    # Obtaining the member 'key' of a type (line 2588)
    key_17634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2588, 9), event_17633, 'key')
    # Getting the type of 'toggle_yscale_keys' (line 2588)
    toggle_yscale_keys_17635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 22), 'toggle_yscale_keys')
    # Applying the binary operator 'in' (line 2588)
    result_contains_17636 = python_operator(stypy.reporting.localization.Localization(__file__, 2588, 9), 'in', key_17634, toggle_yscale_keys_17635)
    
    # Testing the type of an if condition (line 2588)
    if_condition_17637 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2588, 9), result_contains_17636)
    # Assigning a type to the variable 'if_condition_17637' (line 2588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2588, 9), 'if_condition_17637', if_condition_17637)
    # SSA begins for if statement (line 2588)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2589):
    
    # Assigning a Call to a Name (line 2589):
    
    # Assigning a Call to a Name (line 2589):
    
    # Call to get_yscale(...): (line 2589)
    # Processing the call keyword arguments (line 2589)
    kwargs_17640 = {}
    # Getting the type of 'ax' (line 2589)
    ax_17638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 16), 'ax', False)
    # Obtaining the member 'get_yscale' of a type (line 2589)
    get_yscale_17639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 16), ax_17638, 'get_yscale')
    # Calling get_yscale(args, kwargs) (line 2589)
    get_yscale_call_result_17641 = invoke(stypy.reporting.localization.Localization(__file__, 2589, 16), get_yscale_17639, *[], **kwargs_17640)
    
    # Assigning a type to the variable 'scale' (line 2589)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2589, 8), 'scale', get_yscale_call_result_17641)
    
    
    # Getting the type of 'scale' (line 2590)
    scale_17642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 11), 'scale')
    unicode_17643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2590, 20), 'unicode', u'log')
    # Applying the binary operator '==' (line 2590)
    result_eq_17644 = python_operator(stypy.reporting.localization.Localization(__file__, 2590, 11), '==', scale_17642, unicode_17643)
    
    # Testing the type of an if condition (line 2590)
    if_condition_17645 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2590, 8), result_eq_17644)
    # Assigning a type to the variable 'if_condition_17645' (line 2590)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2590, 8), 'if_condition_17645', if_condition_17645)
    # SSA begins for if statement (line 2590)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_yscale(...): (line 2591)
    # Processing the call arguments (line 2591)
    unicode_17648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2591, 26), 'unicode', u'linear')
    # Processing the call keyword arguments (line 2591)
    kwargs_17649 = {}
    # Getting the type of 'ax' (line 2591)
    ax_17646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 12), 'ax', False)
    # Obtaining the member 'set_yscale' of a type (line 2591)
    set_yscale_17647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2591, 12), ax_17646, 'set_yscale')
    # Calling set_yscale(args, kwargs) (line 2591)
    set_yscale_call_result_17650 = invoke(stypy.reporting.localization.Localization(__file__, 2591, 12), set_yscale_17647, *[unicode_17648], **kwargs_17649)
    
    
    # Call to draw_idle(...): (line 2592)
    # Processing the call keyword arguments (line 2592)
    kwargs_17655 = {}
    # Getting the type of 'ax' (line 2592)
    ax_17651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 12), 'ax', False)
    # Obtaining the member 'figure' of a type (line 2592)
    figure_17652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2592, 12), ax_17651, 'figure')
    # Obtaining the member 'canvas' of a type (line 2592)
    canvas_17653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2592, 12), figure_17652, 'canvas')
    # Obtaining the member 'draw_idle' of a type (line 2592)
    draw_idle_17654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2592, 12), canvas_17653, 'draw_idle')
    # Calling draw_idle(args, kwargs) (line 2592)
    draw_idle_call_result_17656 = invoke(stypy.reporting.localization.Localization(__file__, 2592, 12), draw_idle_17654, *[], **kwargs_17655)
    
    # SSA branch for the else part of an if statement (line 2590)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'scale' (line 2593)
    scale_17657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 13), 'scale')
    unicode_17658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2593, 22), 'unicode', u'linear')
    # Applying the binary operator '==' (line 2593)
    result_eq_17659 = python_operator(stypy.reporting.localization.Localization(__file__, 2593, 13), '==', scale_17657, unicode_17658)
    
    # Testing the type of an if condition (line 2593)
    if_condition_17660 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2593, 13), result_eq_17659)
    # Assigning a type to the variable 'if_condition_17660' (line 2593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2593, 13), 'if_condition_17660', if_condition_17660)
    # SSA begins for if statement (line 2593)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 2594)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to set_yscale(...): (line 2595)
    # Processing the call arguments (line 2595)
    unicode_17663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2595, 30), 'unicode', u'log')
    # Processing the call keyword arguments (line 2595)
    kwargs_17664 = {}
    # Getting the type of 'ax' (line 2595)
    ax_17661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 16), 'ax', False)
    # Obtaining the member 'set_yscale' of a type (line 2595)
    set_yscale_17662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 16), ax_17661, 'set_yscale')
    # Calling set_yscale(args, kwargs) (line 2595)
    set_yscale_call_result_17665 = invoke(stypy.reporting.localization.Localization(__file__, 2595, 16), set_yscale_17662, *[unicode_17663], **kwargs_17664)
    
    # SSA branch for the except part of a try statement (line 2594)
    # SSA branch for the except 'ValueError' branch of a try statement (line 2594)
    # Storing handler type
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'ValueError' (line 2596)
    ValueError_17666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 19), 'ValueError')
    # Assigning a type to the variable 'exc' (line 2596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2596, 12), 'exc', ValueError_17666)
    
    # Call to warn(...): (line 2597)
    # Processing the call arguments (line 2597)
    
    # Call to str(...): (line 2597)
    # Processing the call arguments (line 2597)
    # Getting the type of 'exc' (line 2597)
    exc_17670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 34), 'exc', False)
    # Processing the call keyword arguments (line 2597)
    kwargs_17671 = {}
    # Getting the type of 'str' (line 2597)
    str_17669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 30), 'str', False)
    # Calling str(args, kwargs) (line 2597)
    str_call_result_17672 = invoke(stypy.reporting.localization.Localization(__file__, 2597, 30), str_17669, *[exc_17670], **kwargs_17671)
    
    # Processing the call keyword arguments (line 2597)
    kwargs_17673 = {}
    # Getting the type of 'warnings' (line 2597)
    warnings_17667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 16), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 2597)
    warn_17668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2597, 16), warnings_17667, 'warn')
    # Calling warn(args, kwargs) (line 2597)
    warn_call_result_17674 = invoke(stypy.reporting.localization.Localization(__file__, 2597, 16), warn_17668, *[str_call_result_17672], **kwargs_17673)
    
    
    # Call to set_yscale(...): (line 2598)
    # Processing the call arguments (line 2598)
    unicode_17677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2598, 30), 'unicode', u'linear')
    # Processing the call keyword arguments (line 2598)
    kwargs_17678 = {}
    # Getting the type of 'ax' (line 2598)
    ax_17675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 16), 'ax', False)
    # Obtaining the member 'set_yscale' of a type (line 2598)
    set_yscale_17676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2598, 16), ax_17675, 'set_yscale')
    # Calling set_yscale(args, kwargs) (line 2598)
    set_yscale_call_result_17679 = invoke(stypy.reporting.localization.Localization(__file__, 2598, 16), set_yscale_17676, *[unicode_17677], **kwargs_17678)
    
    # SSA join for try-except statement (line 2594)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to draw_idle(...): (line 2599)
    # Processing the call keyword arguments (line 2599)
    kwargs_17684 = {}
    # Getting the type of 'ax' (line 2599)
    ax_17680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 12), 'ax', False)
    # Obtaining the member 'figure' of a type (line 2599)
    figure_17681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2599, 12), ax_17680, 'figure')
    # Obtaining the member 'canvas' of a type (line 2599)
    canvas_17682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2599, 12), figure_17681, 'canvas')
    # Obtaining the member 'draw_idle' of a type (line 2599)
    draw_idle_17683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2599, 12), canvas_17682, 'draw_idle')
    # Calling draw_idle(args, kwargs) (line 2599)
    draw_idle_call_result_17685 = invoke(stypy.reporting.localization.Localization(__file__, 2599, 12), draw_idle_17683, *[], **kwargs_17684)
    
    # SSA join for if statement (line 2593)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2590)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2588)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'event' (line 2601)
    event_17686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 9), 'event')
    # Obtaining the member 'key' of a type (line 2601)
    key_17687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2601, 9), event_17686, 'key')
    # Getting the type of 'toggle_xscale_keys' (line 2601)
    toggle_xscale_keys_17688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 22), 'toggle_xscale_keys')
    # Applying the binary operator 'in' (line 2601)
    result_contains_17689 = python_operator(stypy.reporting.localization.Localization(__file__, 2601, 9), 'in', key_17687, toggle_xscale_keys_17688)
    
    # Testing the type of an if condition (line 2601)
    if_condition_17690 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2601, 9), result_contains_17689)
    # Assigning a type to the variable 'if_condition_17690' (line 2601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2601, 9), 'if_condition_17690', if_condition_17690)
    # SSA begins for if statement (line 2601)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2602):
    
    # Assigning a Call to a Name (line 2602):
    
    # Assigning a Call to a Name (line 2602):
    
    # Call to get_xscale(...): (line 2602)
    # Processing the call keyword arguments (line 2602)
    kwargs_17693 = {}
    # Getting the type of 'ax' (line 2602)
    ax_17691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 17), 'ax', False)
    # Obtaining the member 'get_xscale' of a type (line 2602)
    get_xscale_17692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2602, 17), ax_17691, 'get_xscale')
    # Calling get_xscale(args, kwargs) (line 2602)
    get_xscale_call_result_17694 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 17), get_xscale_17692, *[], **kwargs_17693)
    
    # Assigning a type to the variable 'scalex' (line 2602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 8), 'scalex', get_xscale_call_result_17694)
    
    
    # Getting the type of 'scalex' (line 2603)
    scalex_17695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 11), 'scalex')
    unicode_17696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2603, 21), 'unicode', u'log')
    # Applying the binary operator '==' (line 2603)
    result_eq_17697 = python_operator(stypy.reporting.localization.Localization(__file__, 2603, 11), '==', scalex_17695, unicode_17696)
    
    # Testing the type of an if condition (line 2603)
    if_condition_17698 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2603, 8), result_eq_17697)
    # Assigning a type to the variable 'if_condition_17698' (line 2603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2603, 8), 'if_condition_17698', if_condition_17698)
    # SSA begins for if statement (line 2603)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_xscale(...): (line 2604)
    # Processing the call arguments (line 2604)
    unicode_17701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2604, 26), 'unicode', u'linear')
    # Processing the call keyword arguments (line 2604)
    kwargs_17702 = {}
    # Getting the type of 'ax' (line 2604)
    ax_17699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 12), 'ax', False)
    # Obtaining the member 'set_xscale' of a type (line 2604)
    set_xscale_17700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2604, 12), ax_17699, 'set_xscale')
    # Calling set_xscale(args, kwargs) (line 2604)
    set_xscale_call_result_17703 = invoke(stypy.reporting.localization.Localization(__file__, 2604, 12), set_xscale_17700, *[unicode_17701], **kwargs_17702)
    
    
    # Call to draw_idle(...): (line 2605)
    # Processing the call keyword arguments (line 2605)
    kwargs_17708 = {}
    # Getting the type of 'ax' (line 2605)
    ax_17704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 12), 'ax', False)
    # Obtaining the member 'figure' of a type (line 2605)
    figure_17705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2605, 12), ax_17704, 'figure')
    # Obtaining the member 'canvas' of a type (line 2605)
    canvas_17706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2605, 12), figure_17705, 'canvas')
    # Obtaining the member 'draw_idle' of a type (line 2605)
    draw_idle_17707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2605, 12), canvas_17706, 'draw_idle')
    # Calling draw_idle(args, kwargs) (line 2605)
    draw_idle_call_result_17709 = invoke(stypy.reporting.localization.Localization(__file__, 2605, 12), draw_idle_17707, *[], **kwargs_17708)
    
    # SSA branch for the else part of an if statement (line 2603)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'scalex' (line 2606)
    scalex_17710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 13), 'scalex')
    unicode_17711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2606, 23), 'unicode', u'linear')
    # Applying the binary operator '==' (line 2606)
    result_eq_17712 = python_operator(stypy.reporting.localization.Localization(__file__, 2606, 13), '==', scalex_17710, unicode_17711)
    
    # Testing the type of an if condition (line 2606)
    if_condition_17713 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2606, 13), result_eq_17712)
    # Assigning a type to the variable 'if_condition_17713' (line 2606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2606, 13), 'if_condition_17713', if_condition_17713)
    # SSA begins for if statement (line 2606)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 2607)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to set_xscale(...): (line 2608)
    # Processing the call arguments (line 2608)
    unicode_17716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2608, 30), 'unicode', u'log')
    # Processing the call keyword arguments (line 2608)
    kwargs_17717 = {}
    # Getting the type of 'ax' (line 2608)
    ax_17714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 16), 'ax', False)
    # Obtaining the member 'set_xscale' of a type (line 2608)
    set_xscale_17715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 16), ax_17714, 'set_xscale')
    # Calling set_xscale(args, kwargs) (line 2608)
    set_xscale_call_result_17718 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 16), set_xscale_17715, *[unicode_17716], **kwargs_17717)
    
    # SSA branch for the except part of a try statement (line 2607)
    # SSA branch for the except 'ValueError' branch of a try statement (line 2607)
    module_type_store.open_ssa_branch('except')
    
    # Call to warn(...): (line 2610)
    # Processing the call arguments (line 2610)
    
    # Call to str(...): (line 2610)
    # Processing the call arguments (line 2610)
    # Getting the type of 'exc' (line 2610)
    exc_17722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 34), 'exc', False)
    # Processing the call keyword arguments (line 2610)
    kwargs_17723 = {}
    # Getting the type of 'str' (line 2610)
    str_17721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 30), 'str', False)
    # Calling str(args, kwargs) (line 2610)
    str_call_result_17724 = invoke(stypy.reporting.localization.Localization(__file__, 2610, 30), str_17721, *[exc_17722], **kwargs_17723)
    
    # Processing the call keyword arguments (line 2610)
    kwargs_17725 = {}
    # Getting the type of 'warnings' (line 2610)
    warnings_17719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 16), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 2610)
    warn_17720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2610, 16), warnings_17719, 'warn')
    # Calling warn(args, kwargs) (line 2610)
    warn_call_result_17726 = invoke(stypy.reporting.localization.Localization(__file__, 2610, 16), warn_17720, *[str_call_result_17724], **kwargs_17725)
    
    
    # Call to set_xscale(...): (line 2611)
    # Processing the call arguments (line 2611)
    unicode_17729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2611, 30), 'unicode', u'linear')
    # Processing the call keyword arguments (line 2611)
    kwargs_17730 = {}
    # Getting the type of 'ax' (line 2611)
    ax_17727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 16), 'ax', False)
    # Obtaining the member 'set_xscale' of a type (line 2611)
    set_xscale_17728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2611, 16), ax_17727, 'set_xscale')
    # Calling set_xscale(args, kwargs) (line 2611)
    set_xscale_call_result_17731 = invoke(stypy.reporting.localization.Localization(__file__, 2611, 16), set_xscale_17728, *[unicode_17729], **kwargs_17730)
    
    # SSA join for try-except statement (line 2607)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to draw_idle(...): (line 2612)
    # Processing the call keyword arguments (line 2612)
    kwargs_17736 = {}
    # Getting the type of 'ax' (line 2612)
    ax_17732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2612, 12), 'ax', False)
    # Obtaining the member 'figure' of a type (line 2612)
    figure_17733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2612, 12), ax_17732, 'figure')
    # Obtaining the member 'canvas' of a type (line 2612)
    canvas_17734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2612, 12), figure_17733, 'canvas')
    # Obtaining the member 'draw_idle' of a type (line 2612)
    draw_idle_17735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2612, 12), canvas_17734, 'draw_idle')
    # Calling draw_idle(args, kwargs) (line 2612)
    draw_idle_call_result_17737 = invoke(stypy.reporting.localization.Localization(__file__, 2612, 12), draw_idle_17735, *[], **kwargs_17736)
    
    # SSA join for if statement (line 2606)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2603)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2601)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Evaluating a boolean operation
    
    # Call to isdigit(...): (line 2614)
    # Processing the call keyword arguments (line 2614)
    kwargs_17741 = {}
    # Getting the type of 'event' (line 2614)
    event_17738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 10), 'event', False)
    # Obtaining the member 'key' of a type (line 2614)
    key_17739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2614, 10), event_17738, 'key')
    # Obtaining the member 'isdigit' of a type (line 2614)
    isdigit_17740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2614, 10), key_17739, 'isdigit')
    # Calling isdigit(args, kwargs) (line 2614)
    isdigit_call_result_17742 = invoke(stypy.reporting.localization.Localization(__file__, 2614, 10), isdigit_17740, *[], **kwargs_17741)
    
    
    # Getting the type of 'event' (line 2614)
    event_17743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 34), 'event')
    # Obtaining the member 'key' of a type (line 2614)
    key_17744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2614, 34), event_17743, 'key')
    unicode_17745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2614, 47), 'unicode', u'0')
    # Applying the binary operator '!=' (line 2614)
    result_ne_17746 = python_operator(stypy.reporting.localization.Localization(__file__, 2614, 34), '!=', key_17744, unicode_17745)
    
    # Applying the binary operator 'and' (line 2614)
    result_and_keyword_17747 = python_operator(stypy.reporting.localization.Localization(__file__, 2614, 10), 'and', isdigit_call_result_17742, result_ne_17746)
    
    
    # Getting the type of 'event' (line 2614)
    event_17748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 55), 'event')
    # Obtaining the member 'key' of a type (line 2614)
    key_17749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2614, 55), event_17748, 'key')
    # Getting the type of 'all_keys' (line 2614)
    all_keys_17750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 68), 'all_keys')
    # Applying the binary operator 'in' (line 2614)
    result_contains_17751 = python_operator(stypy.reporting.localization.Localization(__file__, 2614, 55), 'in', key_17749, all_keys_17750)
    
    # Applying the binary operator 'or' (line 2614)
    result_or_keyword_17752 = python_operator(stypy.reporting.localization.Localization(__file__, 2614, 9), 'or', result_and_keyword_17747, result_contains_17751)
    
    # Testing the type of an if condition (line 2614)
    if_condition_17753 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2614, 9), result_or_keyword_17752)
    # Assigning a type to the variable 'if_condition_17753' (line 2614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2614, 9), 'if_condition_17753', if_condition_17753)
    # SSA begins for if statement (line 2614)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Getting the type of 'event' (line 2618)
    event_17754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2618, 16), 'event')
    # Obtaining the member 'key' of a type (line 2618)
    key_17755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2618, 16), event_17754, 'key')
    # Getting the type of 'all_keys' (line 2618)
    all_keys_17756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2618, 29), 'all_keys')
    # Applying the binary operator 'in' (line 2618)
    result_contains_17757 = python_operator(stypy.reporting.localization.Localization(__file__, 2618, 16), 'in', key_17755, all_keys_17756)
    
    # Applying the 'not' unary operator (line 2618)
    result_not__17758 = python_operator(stypy.reporting.localization.Localization(__file__, 2618, 11), 'not', result_contains_17757)
    
    # Testing the type of an if condition (line 2618)
    if_condition_17759 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2618, 8), result_not__17758)
    # Assigning a type to the variable 'if_condition_17759' (line 2618)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2618, 8), 'if_condition_17759', if_condition_17759)
    # SSA begins for if statement (line 2618)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2619):
    
    # Assigning a BinOp to a Name (line 2619):
    
    # Assigning a BinOp to a Name (line 2619):
    
    # Call to int(...): (line 2619)
    # Processing the call arguments (line 2619)
    # Getting the type of 'event' (line 2619)
    event_17761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 20), 'event', False)
    # Obtaining the member 'key' of a type (line 2619)
    key_17762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2619, 20), event_17761, 'key')
    # Processing the call keyword arguments (line 2619)
    kwargs_17763 = {}
    # Getting the type of 'int' (line 2619)
    int_17760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 16), 'int', False)
    # Calling int(args, kwargs) (line 2619)
    int_call_result_17764 = invoke(stypy.reporting.localization.Localization(__file__, 2619, 16), int_17760, *[key_17762], **kwargs_17763)
    
    int_17765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2619, 33), 'int')
    # Applying the binary operator '-' (line 2619)
    result_sub_17766 = python_operator(stypy.reporting.localization.Localization(__file__, 2619, 16), '-', int_call_result_17764, int_17765)
    
    # Assigning a type to the variable 'n' (line 2619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2619, 12), 'n', result_sub_17766)
    # SSA join for if statement (line 2618)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to enumerate(...): (line 2620)
    # Processing the call arguments (line 2620)
    
    # Call to get_axes(...): (line 2620)
    # Processing the call keyword arguments (line 2620)
    kwargs_17771 = {}
    # Getting the type of 'canvas' (line 2620)
    canvas_17768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 30), 'canvas', False)
    # Obtaining the member 'figure' of a type (line 2620)
    figure_17769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2620, 30), canvas_17768, 'figure')
    # Obtaining the member 'get_axes' of a type (line 2620)
    get_axes_17770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2620, 30), figure_17769, 'get_axes')
    # Calling get_axes(args, kwargs) (line 2620)
    get_axes_call_result_17772 = invoke(stypy.reporting.localization.Localization(__file__, 2620, 30), get_axes_17770, *[], **kwargs_17771)
    
    # Processing the call keyword arguments (line 2620)
    kwargs_17773 = {}
    # Getting the type of 'enumerate' (line 2620)
    enumerate_17767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 20), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 2620)
    enumerate_call_result_17774 = invoke(stypy.reporting.localization.Localization(__file__, 2620, 20), enumerate_17767, *[get_axes_call_result_17772], **kwargs_17773)
    
    # Testing the type of a for loop iterable (line 2620)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2620, 8), enumerate_call_result_17774)
    # Getting the type of the for loop variable (line 2620)
    for_loop_var_17775 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2620, 8), enumerate_call_result_17774)
    # Assigning a type to the variable 'i' (line 2620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2620, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2620, 8), for_loop_var_17775))
    # Assigning a type to the variable 'a' (line 2620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2620, 8), 'a', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2620, 8), for_loop_var_17775))
    # SSA begins for a for statement (line 2620)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'event' (line 2623)
    event_17776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 15), 'event')
    # Obtaining the member 'x' of a type (line 2623)
    x_17777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2623, 15), event_17776, 'x')
    # Getting the type of 'None' (line 2623)
    None_17778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 30), 'None')
    # Applying the binary operator 'isnot' (line 2623)
    result_is_not_17779 = python_operator(stypy.reporting.localization.Localization(__file__, 2623, 15), 'isnot', x_17777, None_17778)
    
    
    # Getting the type of 'event' (line 2623)
    event_17780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 39), 'event')
    # Obtaining the member 'y' of a type (line 2623)
    y_17781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2623, 39), event_17780, 'y')
    # Getting the type of 'None' (line 2623)
    None_17782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 54), 'None')
    # Applying the binary operator 'isnot' (line 2623)
    result_is_not_17783 = python_operator(stypy.reporting.localization.Localization(__file__, 2623, 39), 'isnot', y_17781, None_17782)
    
    # Applying the binary operator 'and' (line 2623)
    result_and_keyword_17784 = python_operator(stypy.reporting.localization.Localization(__file__, 2623, 15), 'and', result_is_not_17779, result_is_not_17783)
    
    # Call to in_axes(...): (line 2624)
    # Processing the call arguments (line 2624)
    # Getting the type of 'event' (line 2624)
    event_17787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2624, 34), 'event', False)
    # Processing the call keyword arguments (line 2624)
    kwargs_17788 = {}
    # Getting the type of 'a' (line 2624)
    a_17785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2624, 24), 'a', False)
    # Obtaining the member 'in_axes' of a type (line 2624)
    in_axes_17786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2624, 24), a_17785, 'in_axes')
    # Calling in_axes(args, kwargs) (line 2624)
    in_axes_call_result_17789 = invoke(stypy.reporting.localization.Localization(__file__, 2624, 24), in_axes_17786, *[event_17787], **kwargs_17788)
    
    # Applying the binary operator 'and' (line 2623)
    result_and_keyword_17790 = python_operator(stypy.reporting.localization.Localization(__file__, 2623, 15), 'and', result_and_keyword_17784, in_axes_call_result_17789)
    
    # Testing the type of an if condition (line 2623)
    if_condition_17791 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2623, 12), result_and_keyword_17790)
    # Assigning a type to the variable 'if_condition_17791' (line 2623)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2623, 12), 'if_condition_17791', if_condition_17791)
    # SSA begins for if statement (line 2623)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'event' (line 2625)
    event_17792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2625, 19), 'event')
    # Obtaining the member 'key' of a type (line 2625)
    key_17793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2625, 19), event_17792, 'key')
    # Getting the type of 'all_keys' (line 2625)
    all_keys_17794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2625, 32), 'all_keys')
    # Applying the binary operator 'in' (line 2625)
    result_contains_17795 = python_operator(stypy.reporting.localization.Localization(__file__, 2625, 19), 'in', key_17793, all_keys_17794)
    
    # Testing the type of an if condition (line 2625)
    if_condition_17796 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2625, 16), result_contains_17795)
    # Assigning a type to the variable 'if_condition_17796' (line 2625)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2625, 16), 'if_condition_17796', if_condition_17796)
    # SSA begins for if statement (line 2625)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_navigate(...): (line 2626)
    # Processing the call arguments (line 2626)
    # Getting the type of 'True' (line 2626)
    True_17799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 35), 'True', False)
    # Processing the call keyword arguments (line 2626)
    kwargs_17800 = {}
    # Getting the type of 'a' (line 2626)
    a_17797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 20), 'a', False)
    # Obtaining the member 'set_navigate' of a type (line 2626)
    set_navigate_17798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2626, 20), a_17797, 'set_navigate')
    # Calling set_navigate(args, kwargs) (line 2626)
    set_navigate_call_result_17801 = invoke(stypy.reporting.localization.Localization(__file__, 2626, 20), set_navigate_17798, *[True_17799], **kwargs_17800)
    
    # SSA branch for the else part of an if statement (line 2625)
    module_type_store.open_ssa_branch('else')
    
    # Call to set_navigate(...): (line 2628)
    # Processing the call arguments (line 2628)
    
    # Getting the type of 'i' (line 2628)
    i_17804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 35), 'i', False)
    # Getting the type of 'n' (line 2628)
    n_17805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 40), 'n', False)
    # Applying the binary operator '==' (line 2628)
    result_eq_17806 = python_operator(stypy.reporting.localization.Localization(__file__, 2628, 35), '==', i_17804, n_17805)
    
    # Processing the call keyword arguments (line 2628)
    kwargs_17807 = {}
    # Getting the type of 'a' (line 2628)
    a_17802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 20), 'a', False)
    # Obtaining the member 'set_navigate' of a type (line 2628)
    set_navigate_17803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2628, 20), a_17802, 'set_navigate')
    # Calling set_navigate(args, kwargs) (line 2628)
    set_navigate_call_result_17808 = invoke(stypy.reporting.localization.Localization(__file__, 2628, 20), set_navigate_17803, *[result_eq_17806], **kwargs_17807)
    
    # SSA join for if statement (line 2625)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2623)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2614)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2601)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2588)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2570)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'key_press_handler(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'key_press_handler' in the type store
    # Getting the type of 'stypy_return_type' (line 2463)
    stypy_return_type_17809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_17809)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'key_press_handler'
    return stypy_return_type_17809

# Assigning a type to the variable 'key_press_handler' (line 2463)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2463, 0), 'key_press_handler', key_press_handler)
# Declaration of the 'NonGuiException' class
# Getting the type of 'Exception' (line 2631)
Exception_17810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 22), 'Exception')

class NonGuiException(Exception_17810, ):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2631, 0, False)
        # Assigning a type to the variable 'self' (line 2632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2632, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NonGuiException.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'NonGuiException' (line 2631)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2631, 0), 'NonGuiException', NonGuiException)
# Declaration of the 'FigureManagerBase' class

class FigureManagerBase(object, ):
    unicode_17811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2647, (-1)), 'unicode', u'\n    Helper class for pyplot mode, wraps everything up into a neat bundle\n\n    Attributes\n    ----------\n    canvas : :class:`FigureCanvasBase`\n        The backend-specific canvas instance\n\n    num : int or str\n        The figure number\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2648, 4, False)
        # Assigning a type to the variable 'self' (line 2649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2649, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerBase.__init__', ['canvas', 'num'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['canvas', 'num'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 2649):
        
        # Assigning a Name to a Attribute (line 2649):
        
        # Assigning a Name to a Attribute (line 2649):
        # Getting the type of 'canvas' (line 2649)
        canvas_17812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 22), 'canvas')
        # Getting the type of 'self' (line 2649)
        self_17813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 2649)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2649, 8), self_17813, 'canvas', canvas_17812)
        
        # Assigning a Name to a Attribute (line 2650):
        
        # Assigning a Name to a Attribute (line 2650):
        
        # Assigning a Name to a Attribute (line 2650):
        # Getting the type of 'self' (line 2650)
        self_17814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 25), 'self')
        # Getting the type of 'canvas' (line 2650)
        canvas_17815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 8), 'canvas')
        # Setting the type of the member 'manager' of a type (line 2650)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 8), canvas_17815, 'manager', self_17814)
        
        # Assigning a Name to a Attribute (line 2651):
        
        # Assigning a Name to a Attribute (line 2651):
        
        # Assigning a Name to a Attribute (line 2651):
        # Getting the type of 'num' (line 2651)
        num_17816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 19), 'num')
        # Getting the type of 'self' (line 2651)
        self_17817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 8), 'self')
        # Setting the type of the member 'num' of a type (line 2651)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2651, 8), self_17817, 'num', num_17816)
        
        # Assigning a Name to a Attribute (line 2653):
        
        # Assigning a Name to a Attribute (line 2653):
        
        # Assigning a Name to a Attribute (line 2653):
        # Getting the type of 'None' (line 2653)
        None_17818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 36), 'None')
        # Getting the type of 'self' (line 2653)
        self_17819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 8), 'self')
        # Setting the type of the member 'key_press_handler_id' of a type (line 2653)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2653, 8), self_17819, 'key_press_handler_id', None_17818)
        unicode_17820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2663, (-1)), 'unicode', u'\n        The returned id from connecting the default key handler via\n        :meth:`FigureCanvasBase.mpl_connect`.\n\n        To disable default key press handling::\n\n            manager, canvas = figure.canvas.manager, figure.canvas\n            canvas.mpl_disconnect(manager.key_press_handler_id)\n\n        ')
        
        
        
        # Obtaining the type of the subscript
        unicode_17821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2664, 20), 'unicode', u'toolbar')
        # Getting the type of 'rcParams' (line 2664)
        rcParams_17822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2664, 11), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 2664)
        getitem___17823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2664, 11), rcParams_17822, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2664)
        subscript_call_result_17824 = invoke(stypy.reporting.localization.Localization(__file__, 2664, 11), getitem___17823, unicode_17821)
        
        unicode_17825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2664, 34), 'unicode', u'toolmanager')
        # Applying the binary operator '!=' (line 2664)
        result_ne_17826 = python_operator(stypy.reporting.localization.Localization(__file__, 2664, 11), '!=', subscript_call_result_17824, unicode_17825)
        
        # Testing the type of an if condition (line 2664)
        if_condition_17827 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2664, 8), result_ne_17826)
        # Assigning a type to the variable 'if_condition_17827' (line 2664)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2664, 8), 'if_condition_17827', if_condition_17827)
        # SSA begins for if statement (line 2664)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 2665):
        
        # Assigning a Call to a Attribute (line 2665):
        
        # Assigning a Call to a Attribute (line 2665):
        
        # Call to mpl_connect(...): (line 2665)
        # Processing the call arguments (line 2665)
        unicode_17831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2666, 16), 'unicode', u'key_press_event')
        # Getting the type of 'self' (line 2667)
        self_17832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 16), 'self', False)
        # Obtaining the member 'key_press' of a type (line 2667)
        key_press_17833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 16), self_17832, 'key_press')
        # Processing the call keyword arguments (line 2665)
        kwargs_17834 = {}
        # Getting the type of 'self' (line 2665)
        self_17828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 40), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2665)
        canvas_17829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2665, 40), self_17828, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 2665)
        mpl_connect_17830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2665, 40), canvas_17829, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 2665)
        mpl_connect_call_result_17835 = invoke(stypy.reporting.localization.Localization(__file__, 2665, 40), mpl_connect_17830, *[unicode_17831, key_press_17833], **kwargs_17834)
        
        # Getting the type of 'self' (line 2665)
        self_17836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 12), 'self')
        # Setting the type of the member 'key_press_handler_id' of a type (line 2665)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2665, 12), self_17836, 'key_press_handler_id', mpl_connect_call_result_17835)
        # SSA join for if statement (line 2664)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def show(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'show'
        module_type_store = module_type_store.open_function_context('show', 2669, 4, False)
        # Assigning a type to the variable 'self' (line 2670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2670, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerBase.show.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerBase.show.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerBase.show.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerBase.show.__dict__.__setitem__('stypy_function_name', 'FigureManagerBase.show')
        FigureManagerBase.show.__dict__.__setitem__('stypy_param_names_list', [])
        FigureManagerBase.show.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerBase.show.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerBase.show.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerBase.show.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerBase.show.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerBase.show.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerBase.show', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'show', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'show(...)' code ##################

        unicode_17837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2675, (-1)), 'unicode', u'\n        For GUI backends, show the figure window and redraw.\n        For non-GUI backends, raise an exception to be caught\n        by :meth:`~matplotlib.figure.Figure.show`, for an\n        optional warning.\n        ')
        
        # Call to NonGuiException(...): (line 2676)
        # Processing the call keyword arguments (line 2676)
        kwargs_17839 = {}
        # Getting the type of 'NonGuiException' (line 2676)
        NonGuiException_17838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2676, 14), 'NonGuiException', False)
        # Calling NonGuiException(args, kwargs) (line 2676)
        NonGuiException_call_result_17840 = invoke(stypy.reporting.localization.Localization(__file__, 2676, 14), NonGuiException_17838, *[], **kwargs_17839)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2676, 8), NonGuiException_call_result_17840, 'raise parameter', BaseException)
        
        # ################# End of 'show(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'show' in the type store
        # Getting the type of 'stypy_return_type' (line 2669)
        stypy_return_type_17841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17841)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'show'
        return stypy_return_type_17841


    @norecursion
    def destroy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'destroy'
        module_type_store = module_type_store.open_function_context('destroy', 2678, 4, False)
        # Assigning a type to the variable 'self' (line 2679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2679, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerBase.destroy.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerBase.destroy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerBase.destroy.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerBase.destroy.__dict__.__setitem__('stypy_function_name', 'FigureManagerBase.destroy')
        FigureManagerBase.destroy.__dict__.__setitem__('stypy_param_names_list', [])
        FigureManagerBase.destroy.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerBase.destroy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerBase.destroy.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerBase.destroy.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerBase.destroy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerBase.destroy.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerBase.destroy', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'destroy', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'destroy(...)' code ##################

        pass
        
        # ################# End of 'destroy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'destroy' in the type store
        # Getting the type of 'stypy_return_type' (line 2678)
        stypy_return_type_17842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2678, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17842)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'destroy'
        return stypy_return_type_17842


    @norecursion
    def full_screen_toggle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'full_screen_toggle'
        module_type_store = module_type_store.open_function_context('full_screen_toggle', 2681, 4, False)
        # Assigning a type to the variable 'self' (line 2682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2682, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerBase.full_screen_toggle.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerBase.full_screen_toggle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerBase.full_screen_toggle.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerBase.full_screen_toggle.__dict__.__setitem__('stypy_function_name', 'FigureManagerBase.full_screen_toggle')
        FigureManagerBase.full_screen_toggle.__dict__.__setitem__('stypy_param_names_list', [])
        FigureManagerBase.full_screen_toggle.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerBase.full_screen_toggle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerBase.full_screen_toggle.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerBase.full_screen_toggle.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerBase.full_screen_toggle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerBase.full_screen_toggle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerBase.full_screen_toggle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'full_screen_toggle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'full_screen_toggle(...)' code ##################

        pass
        
        # ################# End of 'full_screen_toggle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'full_screen_toggle' in the type store
        # Getting the type of 'stypy_return_type' (line 2681)
        stypy_return_type_17843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17843)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'full_screen_toggle'
        return stypy_return_type_17843


    @norecursion
    def resize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'resize'
        module_type_store = module_type_store.open_function_context('resize', 2684, 4, False)
        # Assigning a type to the variable 'self' (line 2685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2685, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerBase.resize.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerBase.resize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerBase.resize.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerBase.resize.__dict__.__setitem__('stypy_function_name', 'FigureManagerBase.resize')
        FigureManagerBase.resize.__dict__.__setitem__('stypy_param_names_list', ['w', 'h'])
        FigureManagerBase.resize.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerBase.resize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerBase.resize.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerBase.resize.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerBase.resize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerBase.resize.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerBase.resize', ['w', 'h'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'resize', localization, ['w', 'h'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'resize(...)' code ##################

        unicode_17844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2685, 8), 'unicode', u'"For GUI backends, resize the window (in pixels).')
        
        # ################# End of 'resize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'resize' in the type store
        # Getting the type of 'stypy_return_type' (line 2684)
        stypy_return_type_17845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17845)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'resize'
        return stypy_return_type_17845


    @norecursion
    def key_press(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'key_press'
        module_type_store = module_type_store.open_function_context('key_press', 2687, 4, False)
        # Assigning a type to the variable 'self' (line 2688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2688, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerBase.key_press.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerBase.key_press.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerBase.key_press.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerBase.key_press.__dict__.__setitem__('stypy_function_name', 'FigureManagerBase.key_press')
        FigureManagerBase.key_press.__dict__.__setitem__('stypy_param_names_list', ['event'])
        FigureManagerBase.key_press.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerBase.key_press.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerBase.key_press.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerBase.key_press.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerBase.key_press.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerBase.key_press.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerBase.key_press', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'key_press', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'key_press(...)' code ##################

        unicode_17846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2691, (-1)), 'unicode', u'\n        Implement the default mpl key bindings defined at\n        :ref:`key-event-handling`\n        ')
        
        
        
        # Obtaining the type of the subscript
        unicode_17847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2692, 20), 'unicode', u'toolbar')
        # Getting the type of 'rcParams' (line 2692)
        rcParams_17848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2692, 11), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 2692)
        getitem___17849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2692, 11), rcParams_17848, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2692)
        subscript_call_result_17850 = invoke(stypy.reporting.localization.Localization(__file__, 2692, 11), getitem___17849, unicode_17847)
        
        unicode_17851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2692, 34), 'unicode', u'toolmanager')
        # Applying the binary operator '!=' (line 2692)
        result_ne_17852 = python_operator(stypy.reporting.localization.Localization(__file__, 2692, 11), '!=', subscript_call_result_17850, unicode_17851)
        
        # Testing the type of an if condition (line 2692)
        if_condition_17853 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2692, 8), result_ne_17852)
        # Assigning a type to the variable 'if_condition_17853' (line 2692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2692, 8), 'if_condition_17853', if_condition_17853)
        # SSA begins for if statement (line 2692)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to key_press_handler(...): (line 2693)
        # Processing the call arguments (line 2693)
        # Getting the type of 'event' (line 2693)
        event_17855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 30), 'event', False)
        # Getting the type of 'self' (line 2693)
        self_17856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 37), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2693)
        canvas_17857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2693, 37), self_17856, 'canvas')
        # Getting the type of 'self' (line 2693)
        self_17858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 50), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2693)
        canvas_17859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2693, 50), self_17858, 'canvas')
        # Obtaining the member 'toolbar' of a type (line 2693)
        toolbar_17860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2693, 50), canvas_17859, 'toolbar')
        # Processing the call keyword arguments (line 2693)
        kwargs_17861 = {}
        # Getting the type of 'key_press_handler' (line 2693)
        key_press_handler_17854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 12), 'key_press_handler', False)
        # Calling key_press_handler(args, kwargs) (line 2693)
        key_press_handler_call_result_17862 = invoke(stypy.reporting.localization.Localization(__file__, 2693, 12), key_press_handler_17854, *[event_17855, canvas_17857, toolbar_17860], **kwargs_17861)
        
        # SSA join for if statement (line 2692)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'key_press(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'key_press' in the type store
        # Getting the type of 'stypy_return_type' (line 2687)
        stypy_return_type_17863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2687, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17863)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'key_press'
        return stypy_return_type_17863


    @norecursion
    def show_popup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'show_popup'
        module_type_store = module_type_store.open_function_context('show_popup', 2695, 4, False)
        # Assigning a type to the variable 'self' (line 2696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2696, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerBase.show_popup.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerBase.show_popup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerBase.show_popup.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerBase.show_popup.__dict__.__setitem__('stypy_function_name', 'FigureManagerBase.show_popup')
        FigureManagerBase.show_popup.__dict__.__setitem__('stypy_param_names_list', ['msg'])
        FigureManagerBase.show_popup.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerBase.show_popup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerBase.show_popup.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerBase.show_popup.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerBase.show_popup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerBase.show_popup.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerBase.show_popup', ['msg'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'show_popup', localization, ['msg'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'show_popup(...)' code ##################

        unicode_17864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2696, 8), 'unicode', u'Display message in a popup -- GUI only.')
        
        # ################# End of 'show_popup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'show_popup' in the type store
        # Getting the type of 'stypy_return_type' (line 2695)
        stypy_return_type_17865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2695, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17865)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'show_popup'
        return stypy_return_type_17865


    @norecursion
    def get_window_title(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_window_title'
        module_type_store = module_type_store.open_function_context('get_window_title', 2698, 4, False)
        # Assigning a type to the variable 'self' (line 2699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2699, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerBase.get_window_title.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerBase.get_window_title.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerBase.get_window_title.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerBase.get_window_title.__dict__.__setitem__('stypy_function_name', 'FigureManagerBase.get_window_title')
        FigureManagerBase.get_window_title.__dict__.__setitem__('stypy_param_names_list', [])
        FigureManagerBase.get_window_title.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerBase.get_window_title.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerBase.get_window_title.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerBase.get_window_title.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerBase.get_window_title.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerBase.get_window_title.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerBase.get_window_title', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_title', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_title(...)' code ##################

        unicode_17866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2702, (-1)), 'unicode', u'Get the title text of the window containing the figure.\n\n        Return None for non-GUI (e.g., PS) backends.\n        ')
        unicode_17867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2703, 15), 'unicode', u'image')
        # Assigning a type to the variable 'stypy_return_type' (line 2703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2703, 8), 'stypy_return_type', unicode_17867)
        
        # ################# End of 'get_window_title(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_title' in the type store
        # Getting the type of 'stypy_return_type' (line 2698)
        stypy_return_type_17868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17868)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_title'
        return stypy_return_type_17868


    @norecursion
    def set_window_title(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_window_title'
        module_type_store = module_type_store.open_function_context('set_window_title', 2705, 4, False)
        # Assigning a type to the variable 'self' (line 2706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2706, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureManagerBase.set_window_title.__dict__.__setitem__('stypy_localization', localization)
        FigureManagerBase.set_window_title.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureManagerBase.set_window_title.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureManagerBase.set_window_title.__dict__.__setitem__('stypy_function_name', 'FigureManagerBase.set_window_title')
        FigureManagerBase.set_window_title.__dict__.__setitem__('stypy_param_names_list', ['title'])
        FigureManagerBase.set_window_title.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureManagerBase.set_window_title.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureManagerBase.set_window_title.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureManagerBase.set_window_title.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureManagerBase.set_window_title.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureManagerBase.set_window_title.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureManagerBase.set_window_title', ['title'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_window_title', localization, ['title'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_window_title(...)' code ##################

        unicode_17869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2709, (-1)), 'unicode', u'Set the title text of the window containing the figure.\n\n        This has no effect for non-GUI (e.g., PS) backends.\n        ')
        
        # ################# End of 'set_window_title(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_window_title' in the type store
        # Getting the type of 'stypy_return_type' (line 2705)
        stypy_return_type_17870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2705, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17870)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_window_title'
        return stypy_return_type_17870


# Assigning a type to the variable 'FigureManagerBase' (line 2635)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2635, 0), 'FigureManagerBase', FigureManagerBase)

# Assigning a Attribute to a Name (line 2712):

# Assigning a Attribute to a Name (line 2712):

# Assigning a Attribute to a Name (line 2712):
# Getting the type of 'tools' (line 2712)
tools_17871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2712, 10), 'tools')
# Obtaining the member 'cursors' of a type (line 2712)
cursors_17872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2712, 10), tools_17871, 'cursors')
# Assigning a type to the variable 'cursors' (line 2712)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2712, 0), 'cursors', cursors_17872)
# Declaration of the 'NavigationToolbar2' class

class NavigationToolbar2(object, ):
    unicode_17873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2754, (-1)), 'unicode', u'\n    Base class for the navigation cursor, version 2\n\n    backends must implement a canvas that handles connections for\n    \'button_press_event\' and \'button_release_event\'.  See\n    :meth:`FigureCanvasBase.mpl_connect` for more information\n\n\n    They must also define\n\n      :meth:`save_figure`\n         save the current figure\n\n      :meth:`set_cursor`\n         if you want the pointer icon to change\n\n      :meth:`_init_toolbar`\n         create your toolbar widget\n\n      :meth:`draw_rubberband` (optional)\n         draw the zoom to rect "rubberband" rectangle\n\n      :meth:`press`  (optional)\n         whenever a mouse button is pressed, you\'ll be notified with\n         the event\n\n      :meth:`release` (optional)\n         whenever a mouse button is released, you\'ll be notified with\n         the event\n\n      :meth:`set_message` (optional)\n         display message\n\n      :meth:`set_history_buttons` (optional)\n         you can change the history back / forward buttons to\n         indicate disabled / enabled state.\n\n    That\'s it, we\'ll do the rest!\n    ')
    
    # Assigning a Tuple to a Name (line 2763):
    
    # Assigning a Tuple to a Name (line 2763):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2775, 4, False)
        # Assigning a type to the variable 'self' (line 2776)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2776, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.__init__', ['canvas'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['canvas'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 2776):
        
        # Assigning a Name to a Attribute (line 2776):
        
        # Assigning a Name to a Attribute (line 2776):
        # Getting the type of 'canvas' (line 2776)
        canvas_17874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 22), 'canvas')
        # Getting the type of 'self' (line 2776)
        self_17875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 2776)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2776, 8), self_17875, 'canvas', canvas_17874)
        
        # Assigning a Name to a Attribute (line 2777):
        
        # Assigning a Name to a Attribute (line 2777):
        
        # Assigning a Name to a Attribute (line 2777):
        # Getting the type of 'self' (line 2777)
        self_17876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2777, 25), 'self')
        # Getting the type of 'canvas' (line 2777)
        canvas_17877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2777, 8), 'canvas')
        # Setting the type of the member 'toolbar' of a type (line 2777)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2777, 8), canvas_17877, 'toolbar', self_17876)
        
        # Assigning a Call to a Attribute (line 2779):
        
        # Assigning a Call to a Attribute (line 2779):
        
        # Assigning a Call to a Attribute (line 2779):
        
        # Call to Stack(...): (line 2779)
        # Processing the call keyword arguments (line 2779)
        kwargs_17880 = {}
        # Getting the type of 'cbook' (line 2779)
        cbook_17878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 22), 'cbook', False)
        # Obtaining the member 'Stack' of a type (line 2779)
        Stack_17879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2779, 22), cbook_17878, 'Stack')
        # Calling Stack(args, kwargs) (line 2779)
        Stack_call_result_17881 = invoke(stypy.reporting.localization.Localization(__file__, 2779, 22), Stack_17879, *[], **kwargs_17880)
        
        # Getting the type of 'self' (line 2779)
        self_17882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 8), 'self')
        # Setting the type of the member '_views' of a type (line 2779)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2779, 8), self_17882, '_views', Stack_call_result_17881)
        
        # Assigning a Call to a Attribute (line 2780):
        
        # Assigning a Call to a Attribute (line 2780):
        
        # Assigning a Call to a Attribute (line 2780):
        
        # Call to Stack(...): (line 2780)
        # Processing the call keyword arguments (line 2780)
        kwargs_17885 = {}
        # Getting the type of 'cbook' (line 2780)
        cbook_17883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 26), 'cbook', False)
        # Obtaining the member 'Stack' of a type (line 2780)
        Stack_17884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2780, 26), cbook_17883, 'Stack')
        # Calling Stack(args, kwargs) (line 2780)
        Stack_call_result_17886 = invoke(stypy.reporting.localization.Localization(__file__, 2780, 26), Stack_17884, *[], **kwargs_17885)
        
        # Getting the type of 'self' (line 2780)
        self_17887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 8), 'self')
        # Setting the type of the member '_positions' of a type (line 2780)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2780, 8), self_17887, '_positions', Stack_call_result_17886)
        
        # Assigning a Name to a Attribute (line 2781):
        
        # Assigning a Name to a Attribute (line 2781):
        
        # Assigning a Name to a Attribute (line 2781):
        # Getting the type of 'None' (line 2781)
        None_17888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 24), 'None')
        # Getting the type of 'self' (line 2781)
        self_17889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 8), 'self')
        # Setting the type of the member '_xypress' of a type (line 2781)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2781, 8), self_17889, '_xypress', None_17888)
        
        # Assigning a Name to a Attribute (line 2783):
        
        # Assigning a Name to a Attribute (line 2783):
        
        # Assigning a Name to a Attribute (line 2783):
        # Getting the type of 'None' (line 2783)
        None_17890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2783, 24), 'None')
        # Getting the type of 'self' (line 2783)
        self_17891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2783, 8), 'self')
        # Setting the type of the member '_idPress' of a type (line 2783)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2783, 8), self_17891, '_idPress', None_17890)
        
        # Assigning a Name to a Attribute (line 2784):
        
        # Assigning a Name to a Attribute (line 2784):
        
        # Assigning a Name to a Attribute (line 2784):
        # Getting the type of 'None' (line 2784)
        None_17892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 26), 'None')
        # Getting the type of 'self' (line 2784)
        self_17893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 8), 'self')
        # Setting the type of the member '_idRelease' of a type (line 2784)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2784, 8), self_17893, '_idRelease', None_17892)
        
        # Assigning a Name to a Attribute (line 2785):
        
        # Assigning a Name to a Attribute (line 2785):
        
        # Assigning a Name to a Attribute (line 2785):
        # Getting the type of 'None' (line 2785)
        None_17894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2785, 23), 'None')
        # Getting the type of 'self' (line 2785)
        self_17895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2785, 8), 'self')
        # Setting the type of the member '_active' of a type (line 2785)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2785, 8), self_17895, '_active', None_17894)
        
        # Assigning a Attribute to a Attribute (line 2787):
        
        # Assigning a Attribute to a Attribute (line 2787):
        
        # Assigning a Attribute to a Attribute (line 2787):
        # Getting the type of 'cursors' (line 2787)
        cursors_17896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 27), 'cursors')
        # Obtaining the member 'POINTER' of a type (line 2787)
        POINTER_17897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2787, 27), cursors_17896, 'POINTER')
        # Getting the type of 'self' (line 2787)
        self_17898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 8), 'self')
        # Setting the type of the member '_lastCursor' of a type (line 2787)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2787, 8), self_17898, '_lastCursor', POINTER_17897)
        
        # Call to _init_toolbar(...): (line 2788)
        # Processing the call keyword arguments (line 2788)
        kwargs_17901 = {}
        # Getting the type of 'self' (line 2788)
        self_17899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 8), 'self', False)
        # Obtaining the member '_init_toolbar' of a type (line 2788)
        _init_toolbar_17900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2788, 8), self_17899, '_init_toolbar')
        # Calling _init_toolbar(args, kwargs) (line 2788)
        _init_toolbar_call_result_17902 = invoke(stypy.reporting.localization.Localization(__file__, 2788, 8), _init_toolbar_17900, *[], **kwargs_17901)
        
        
        # Assigning a Call to a Attribute (line 2789):
        
        # Assigning a Call to a Attribute (line 2789):
        
        # Assigning a Call to a Attribute (line 2789):
        
        # Call to mpl_connect(...): (line 2789)
        # Processing the call arguments (line 2789)
        unicode_17906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2790, 12), 'unicode', u'motion_notify_event')
        # Getting the type of 'self' (line 2790)
        self_17907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 35), 'self', False)
        # Obtaining the member 'mouse_move' of a type (line 2790)
        mouse_move_17908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2790, 35), self_17907, 'mouse_move')
        # Processing the call keyword arguments (line 2789)
        kwargs_17909 = {}
        # Getting the type of 'self' (line 2789)
        self_17903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 23), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2789)
        canvas_17904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2789, 23), self_17903, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 2789)
        mpl_connect_17905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2789, 23), canvas_17904, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 2789)
        mpl_connect_call_result_17910 = invoke(stypy.reporting.localization.Localization(__file__, 2789, 23), mpl_connect_17905, *[unicode_17906, mouse_move_17908], **kwargs_17909)
        
        # Getting the type of 'self' (line 2789)
        self_17911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 8), 'self')
        # Setting the type of the member '_idDrag' of a type (line 2789)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2789, 8), self_17911, '_idDrag', mpl_connect_call_result_17910)
        
        # Assigning a List to a Attribute (line 2792):
        
        # Assigning a List to a Attribute (line 2792):
        
        # Assigning a List to a Attribute (line 2792):
        
        # Obtaining an instance of the builtin type 'list' (line 2792)
        list_17912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2792, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2792)
        
        # Getting the type of 'self' (line 2792)
        self_17913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2792, 8), 'self')
        # Setting the type of the member '_ids_zoom' of a type (line 2792)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2792, 8), self_17913, '_ids_zoom', list_17912)
        
        # Assigning a Name to a Attribute (line 2793):
        
        # Assigning a Name to a Attribute (line 2793):
        
        # Assigning a Name to a Attribute (line 2793):
        # Getting the type of 'None' (line 2793)
        None_17914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2793, 26), 'None')
        # Getting the type of 'self' (line 2793)
        self_17915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2793, 8), 'self')
        # Setting the type of the member '_zoom_mode' of a type (line 2793)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2793, 8), self_17915, '_zoom_mode', None_17914)
        
        # Assigning a Name to a Attribute (line 2795):
        
        # Assigning a Name to a Attribute (line 2795):
        
        # Assigning a Name to a Attribute (line 2795):
        # Getting the type of 'None' (line 2795)
        None_17916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 31), 'None')
        # Getting the type of 'self' (line 2795)
        self_17917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 8), 'self')
        # Setting the type of the member '_button_pressed' of a type (line 2795)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2795, 8), self_17917, '_button_pressed', None_17916)
        
        # Assigning a Str to a Attribute (line 2798):
        
        # Assigning a Str to a Attribute (line 2798):
        
        # Assigning a Str to a Attribute (line 2798):
        unicode_17918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2798, 20), 'unicode', u'')
        # Getting the type of 'self' (line 2798)
        self_17919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 8), 'self')
        # Setting the type of the member 'mode' of a type (line 2798)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2798, 8), self_17919, 'mode', unicode_17918)
        
        # Call to set_history_buttons(...): (line 2799)
        # Processing the call keyword arguments (line 2799)
        kwargs_17922 = {}
        # Getting the type of 'self' (line 2799)
        self_17920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2799, 8), 'self', False)
        # Obtaining the member 'set_history_buttons' of a type (line 2799)
        set_history_buttons_17921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2799, 8), self_17920, 'set_history_buttons')
        # Calling set_history_buttons(args, kwargs) (line 2799)
        set_history_buttons_call_result_17923 = invoke(stypy.reporting.localization.Localization(__file__, 2799, 8), set_history_buttons_17921, *[], **kwargs_17922)
        

        @norecursion
        def define_home(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'define_home'
            module_type_store = module_type_store.open_function_context('define_home', 2801, 8, False)
            
            # Passed parameters checking function
            define_home.stypy_localization = localization
            define_home.stypy_type_of_self = None
            define_home.stypy_type_store = module_type_store
            define_home.stypy_function_name = 'define_home'
            define_home.stypy_param_names_list = ['event']
            define_home.stypy_varargs_param_name = None
            define_home.stypy_kwargs_param_name = None
            define_home.stypy_call_defaults = defaults
            define_home.stypy_call_varargs = varargs
            define_home.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'define_home', ['event'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'define_home', localization, ['event'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'define_home(...)' code ##################

            
            # Call to push_current(...): (line 2803)
            # Processing the call keyword arguments (line 2803)
            kwargs_17926 = {}
            # Getting the type of 'self' (line 2803)
            self_17924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2803, 12), 'self', False)
            # Obtaining the member 'push_current' of a type (line 2803)
            push_current_17925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2803, 12), self_17924, 'push_current')
            # Calling push_current(args, kwargs) (line 2803)
            push_current_call_result_17927 = invoke(stypy.reporting.localization.Localization(__file__, 2803, 12), push_current_17925, *[], **kwargs_17926)
            
            
            # Call to mpl_disconnect(...): (line 2806)
            # Processing the call arguments (line 2806)
            # Getting the type of 'define_home' (line 2806)
            define_home_17930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 34), 'define_home', False)
            # Processing the call keyword arguments (line 2806)
            kwargs_17931 = {}
            # Getting the type of 'canvas' (line 2806)
            canvas_17928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 12), 'canvas', False)
            # Obtaining the member 'mpl_disconnect' of a type (line 2806)
            mpl_disconnect_17929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2806, 12), canvas_17928, 'mpl_disconnect')
            # Calling mpl_disconnect(args, kwargs) (line 2806)
            mpl_disconnect_call_result_17932 = invoke(stypy.reporting.localization.Localization(__file__, 2806, 12), mpl_disconnect_17929, *[define_home_17930], **kwargs_17931)
            
            
            # ################# End of 'define_home(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'define_home' in the type store
            # Getting the type of 'stypy_return_type' (line 2801)
            stypy_return_type_17933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2801, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_17933)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'define_home'
            return stypy_return_type_17933

        # Assigning a type to the variable 'define_home' (line 2801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2801, 8), 'define_home', define_home)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_message(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_message'
        module_type_store = module_type_store.open_function_context('set_message', 2808, 4, False)
        # Assigning a type to the variable 'self' (line 2809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2809, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.set_message.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.set_message.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.set_message.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.set_message.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.set_message')
        NavigationToolbar2.set_message.__dict__.__setitem__('stypy_param_names_list', ['s'])
        NavigationToolbar2.set_message.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.set_message.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.set_message.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.set_message.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.set_message.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.set_message.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.set_message', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_message', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_message(...)' code ##################

        unicode_17934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2809, 8), 'unicode', u'Display a message on toolbar or in status bar.')
        
        # ################# End of 'set_message(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_message' in the type store
        # Getting the type of 'stypy_return_type' (line 2808)
        stypy_return_type_17935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17935)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_message'
        return stypy_return_type_17935


    @norecursion
    def back(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'back'
        module_type_store = module_type_store.open_function_context('back', 2811, 4, False)
        # Assigning a type to the variable 'self' (line 2812)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2812, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.back.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.back.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.back.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.back.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.back')
        NavigationToolbar2.back.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2.back.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        NavigationToolbar2.back.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.back.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.back.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.back.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.back.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.back', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'back', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'back(...)' code ##################

        unicode_17936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2812, 8), 'unicode', u'move back up the view lim stack')
        
        # Call to back(...): (line 2813)
        # Processing the call keyword arguments (line 2813)
        kwargs_17940 = {}
        # Getting the type of 'self' (line 2813)
        self_17937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 8), 'self', False)
        # Obtaining the member '_views' of a type (line 2813)
        _views_17938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2813, 8), self_17937, '_views')
        # Obtaining the member 'back' of a type (line 2813)
        back_17939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2813, 8), _views_17938, 'back')
        # Calling back(args, kwargs) (line 2813)
        back_call_result_17941 = invoke(stypy.reporting.localization.Localization(__file__, 2813, 8), back_17939, *[], **kwargs_17940)
        
        
        # Call to back(...): (line 2814)
        # Processing the call keyword arguments (line 2814)
        kwargs_17945 = {}
        # Getting the type of 'self' (line 2814)
        self_17942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2814, 8), 'self', False)
        # Obtaining the member '_positions' of a type (line 2814)
        _positions_17943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2814, 8), self_17942, '_positions')
        # Obtaining the member 'back' of a type (line 2814)
        back_17944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2814, 8), _positions_17943, 'back')
        # Calling back(args, kwargs) (line 2814)
        back_call_result_17946 = invoke(stypy.reporting.localization.Localization(__file__, 2814, 8), back_17944, *[], **kwargs_17945)
        
        
        # Call to set_history_buttons(...): (line 2815)
        # Processing the call keyword arguments (line 2815)
        kwargs_17949 = {}
        # Getting the type of 'self' (line 2815)
        self_17947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 8), 'self', False)
        # Obtaining the member 'set_history_buttons' of a type (line 2815)
        set_history_buttons_17948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2815, 8), self_17947, 'set_history_buttons')
        # Calling set_history_buttons(args, kwargs) (line 2815)
        set_history_buttons_call_result_17950 = invoke(stypy.reporting.localization.Localization(__file__, 2815, 8), set_history_buttons_17948, *[], **kwargs_17949)
        
        
        # Call to _update_view(...): (line 2816)
        # Processing the call keyword arguments (line 2816)
        kwargs_17953 = {}
        # Getting the type of 'self' (line 2816)
        self_17951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2816, 8), 'self', False)
        # Obtaining the member '_update_view' of a type (line 2816)
        _update_view_17952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2816, 8), self_17951, '_update_view')
        # Calling _update_view(args, kwargs) (line 2816)
        _update_view_call_result_17954 = invoke(stypy.reporting.localization.Localization(__file__, 2816, 8), _update_view_17952, *[], **kwargs_17953)
        
        
        # ################# End of 'back(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'back' in the type store
        # Getting the type of 'stypy_return_type' (line 2811)
        stypy_return_type_17955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2811, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17955)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'back'
        return stypy_return_type_17955


    @norecursion
    def dynamic_update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'dynamic_update'
        module_type_store = module_type_store.open_function_context('dynamic_update', 2818, 4, False)
        # Assigning a type to the variable 'self' (line 2819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2819, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.dynamic_update.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.dynamic_update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.dynamic_update.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.dynamic_update.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.dynamic_update')
        NavigationToolbar2.dynamic_update.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2.dynamic_update.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.dynamic_update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.dynamic_update.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.dynamic_update.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.dynamic_update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.dynamic_update.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.dynamic_update', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'dynamic_update', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'dynamic_update(...)' code ##################

        
        # Call to draw_idle(...): (line 2820)
        # Processing the call keyword arguments (line 2820)
        kwargs_17959 = {}
        # Getting the type of 'self' (line 2820)
        self_17956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2820)
        canvas_17957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2820, 8), self_17956, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 2820)
        draw_idle_17958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2820, 8), canvas_17957, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 2820)
        draw_idle_call_result_17960 = invoke(stypy.reporting.localization.Localization(__file__, 2820, 8), draw_idle_17958, *[], **kwargs_17959)
        
        
        # ################# End of 'dynamic_update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'dynamic_update' in the type store
        # Getting the type of 'stypy_return_type' (line 2818)
        stypy_return_type_17961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17961)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'dynamic_update'
        return stypy_return_type_17961


    @norecursion
    def draw_rubberband(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_rubberband'
        module_type_store = module_type_store.open_function_context('draw_rubberband', 2822, 4, False)
        # Assigning a type to the variable 'self' (line 2823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2823, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.draw_rubberband.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.draw_rubberband.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.draw_rubberband.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.draw_rubberband.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.draw_rubberband')
        NavigationToolbar2.draw_rubberband.__dict__.__setitem__('stypy_param_names_list', ['event', 'x0', 'y0', 'x1', 'y1'])
        NavigationToolbar2.draw_rubberband.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.draw_rubberband.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.draw_rubberband.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.draw_rubberband.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.draw_rubberband.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.draw_rubberband.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.draw_rubberband', ['event', 'x0', 'y0', 'x1', 'y1'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_rubberband', localization, ['event', 'x0', 'y0', 'x1', 'y1'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_rubberband(...)' code ##################

        unicode_17962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2826, (-1)), 'unicode', u'Draw a rectangle rubberband to indicate zoom limits.\n\n        Note that it is not guaranteed that ``x0 <= x1`` and ``y0 <= y1``.\n        ')
        
        # ################# End of 'draw_rubberband(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_rubberband' in the type store
        # Getting the type of 'stypy_return_type' (line 2822)
        stypy_return_type_17963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2822, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17963)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_rubberband'
        return stypy_return_type_17963


    @norecursion
    def remove_rubberband(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'remove_rubberband'
        module_type_store = module_type_store.open_function_context('remove_rubberband', 2828, 4, False)
        # Assigning a type to the variable 'self' (line 2829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2829, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.remove_rubberband.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.remove_rubberband.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.remove_rubberband.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.remove_rubberband.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.remove_rubberband')
        NavigationToolbar2.remove_rubberband.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2.remove_rubberband.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.remove_rubberband.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.remove_rubberband.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.remove_rubberband.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.remove_rubberband.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.remove_rubberband.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.remove_rubberband', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'remove_rubberband', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'remove_rubberband(...)' code ##################

        unicode_17964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2829, 8), 'unicode', u'Remove the rubberband.')
        
        # ################# End of 'remove_rubberband(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'remove_rubberband' in the type store
        # Getting the type of 'stypy_return_type' (line 2828)
        stypy_return_type_17965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2828, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17965)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'remove_rubberband'
        return stypy_return_type_17965


    @norecursion
    def forward(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'forward'
        module_type_store = module_type_store.open_function_context('forward', 2831, 4, False)
        # Assigning a type to the variable 'self' (line 2832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2832, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.forward.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.forward.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.forward.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.forward.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.forward')
        NavigationToolbar2.forward.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2.forward.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        NavigationToolbar2.forward.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.forward.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.forward.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.forward.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.forward.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.forward', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'forward', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'forward(...)' code ##################

        unicode_17966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2832, 8), 'unicode', u'Move forward in the view lim stack.')
        
        # Call to forward(...): (line 2833)
        # Processing the call keyword arguments (line 2833)
        kwargs_17970 = {}
        # Getting the type of 'self' (line 2833)
        self_17967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 8), 'self', False)
        # Obtaining the member '_views' of a type (line 2833)
        _views_17968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2833, 8), self_17967, '_views')
        # Obtaining the member 'forward' of a type (line 2833)
        forward_17969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2833, 8), _views_17968, 'forward')
        # Calling forward(args, kwargs) (line 2833)
        forward_call_result_17971 = invoke(stypy.reporting.localization.Localization(__file__, 2833, 8), forward_17969, *[], **kwargs_17970)
        
        
        # Call to forward(...): (line 2834)
        # Processing the call keyword arguments (line 2834)
        kwargs_17975 = {}
        # Getting the type of 'self' (line 2834)
        self_17972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2834, 8), 'self', False)
        # Obtaining the member '_positions' of a type (line 2834)
        _positions_17973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2834, 8), self_17972, '_positions')
        # Obtaining the member 'forward' of a type (line 2834)
        forward_17974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2834, 8), _positions_17973, 'forward')
        # Calling forward(args, kwargs) (line 2834)
        forward_call_result_17976 = invoke(stypy.reporting.localization.Localization(__file__, 2834, 8), forward_17974, *[], **kwargs_17975)
        
        
        # Call to set_history_buttons(...): (line 2835)
        # Processing the call keyword arguments (line 2835)
        kwargs_17979 = {}
        # Getting the type of 'self' (line 2835)
        self_17977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2835, 8), 'self', False)
        # Obtaining the member 'set_history_buttons' of a type (line 2835)
        set_history_buttons_17978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2835, 8), self_17977, 'set_history_buttons')
        # Calling set_history_buttons(args, kwargs) (line 2835)
        set_history_buttons_call_result_17980 = invoke(stypy.reporting.localization.Localization(__file__, 2835, 8), set_history_buttons_17978, *[], **kwargs_17979)
        
        
        # Call to _update_view(...): (line 2836)
        # Processing the call keyword arguments (line 2836)
        kwargs_17983 = {}
        # Getting the type of 'self' (line 2836)
        self_17981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2836, 8), 'self', False)
        # Obtaining the member '_update_view' of a type (line 2836)
        _update_view_17982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2836, 8), self_17981, '_update_view')
        # Calling _update_view(args, kwargs) (line 2836)
        _update_view_call_result_17984 = invoke(stypy.reporting.localization.Localization(__file__, 2836, 8), _update_view_17982, *[], **kwargs_17983)
        
        
        # ################# End of 'forward(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'forward' in the type store
        # Getting the type of 'stypy_return_type' (line 2831)
        stypy_return_type_17985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2831, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_17985)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'forward'
        return stypy_return_type_17985


    @norecursion
    def home(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'home'
        module_type_store = module_type_store.open_function_context('home', 2838, 4, False)
        # Assigning a type to the variable 'self' (line 2839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2839, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.home.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.home.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.home.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.home.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.home')
        NavigationToolbar2.home.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2.home.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        NavigationToolbar2.home.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.home.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.home.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.home.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.home.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.home', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'home', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'home(...)' code ##################

        unicode_17986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2839, 8), 'unicode', u'Restore the original view.')
        
        # Call to home(...): (line 2840)
        # Processing the call keyword arguments (line 2840)
        kwargs_17990 = {}
        # Getting the type of 'self' (line 2840)
        self_17987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 8), 'self', False)
        # Obtaining the member '_views' of a type (line 2840)
        _views_17988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2840, 8), self_17987, '_views')
        # Obtaining the member 'home' of a type (line 2840)
        home_17989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2840, 8), _views_17988, 'home')
        # Calling home(args, kwargs) (line 2840)
        home_call_result_17991 = invoke(stypy.reporting.localization.Localization(__file__, 2840, 8), home_17989, *[], **kwargs_17990)
        
        
        # Call to home(...): (line 2841)
        # Processing the call keyword arguments (line 2841)
        kwargs_17995 = {}
        # Getting the type of 'self' (line 2841)
        self_17992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 8), 'self', False)
        # Obtaining the member '_positions' of a type (line 2841)
        _positions_17993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2841, 8), self_17992, '_positions')
        # Obtaining the member 'home' of a type (line 2841)
        home_17994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2841, 8), _positions_17993, 'home')
        # Calling home(args, kwargs) (line 2841)
        home_call_result_17996 = invoke(stypy.reporting.localization.Localization(__file__, 2841, 8), home_17994, *[], **kwargs_17995)
        
        
        # Call to set_history_buttons(...): (line 2842)
        # Processing the call keyword arguments (line 2842)
        kwargs_17999 = {}
        # Getting the type of 'self' (line 2842)
        self_17997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 8), 'self', False)
        # Obtaining the member 'set_history_buttons' of a type (line 2842)
        set_history_buttons_17998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2842, 8), self_17997, 'set_history_buttons')
        # Calling set_history_buttons(args, kwargs) (line 2842)
        set_history_buttons_call_result_18000 = invoke(stypy.reporting.localization.Localization(__file__, 2842, 8), set_history_buttons_17998, *[], **kwargs_17999)
        
        
        # Call to _update_view(...): (line 2843)
        # Processing the call keyword arguments (line 2843)
        kwargs_18003 = {}
        # Getting the type of 'self' (line 2843)
        self_18001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 8), 'self', False)
        # Obtaining the member '_update_view' of a type (line 2843)
        _update_view_18002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2843, 8), self_18001, '_update_view')
        # Calling _update_view(args, kwargs) (line 2843)
        _update_view_call_result_18004 = invoke(stypy.reporting.localization.Localization(__file__, 2843, 8), _update_view_18002, *[], **kwargs_18003)
        
        
        # ################# End of 'home(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'home' in the type store
        # Getting the type of 'stypy_return_type' (line 2838)
        stypy_return_type_18005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2838, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18005)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'home'
        return stypy_return_type_18005


    @norecursion
    def _init_toolbar(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_init_toolbar'
        module_type_store = module_type_store.open_function_context('_init_toolbar', 2845, 4, False)
        # Assigning a type to the variable 'self' (line 2846)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2846, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2._init_toolbar.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2._init_toolbar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2._init_toolbar.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2._init_toolbar.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2._init_toolbar')
        NavigationToolbar2._init_toolbar.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2._init_toolbar.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2._init_toolbar.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2._init_toolbar.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2._init_toolbar.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2._init_toolbar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2._init_toolbar.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2._init_toolbar', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_init_toolbar', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_init_toolbar(...)' code ##################

        unicode_18006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2864, (-1)), 'unicode', u'\n        This is where you actually build the GUI widgets (called by\n        __init__).  The icons ``home.xpm``, ``back.xpm``, ``forward.xpm``,\n        ``hand.xpm``, ``zoom_to_rect.xpm`` and ``filesave.xpm`` are standard\n        across backends (there are ppm versions in CVS also).\n\n        You just need to set the callbacks\n\n        home         : self.home\n        back         : self.back\n        forward      : self.forward\n        hand         : self.pan\n        zoom_to_rect : self.zoom\n        filesave     : self.save_figure\n\n        You only need to define the last one - the others are in the base\n        class implementation.\n\n        ')
        # Getting the type of 'NotImplementedError' (line 2865)
        NotImplementedError_18007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2865, 14), 'NotImplementedError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2865, 8), NotImplementedError_18007, 'raise parameter', BaseException)
        
        # ################# End of '_init_toolbar(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_init_toolbar' in the type store
        # Getting the type of 'stypy_return_type' (line 2845)
        stypy_return_type_18008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18008)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_init_toolbar'
        return stypy_return_type_18008


    @norecursion
    def _set_cursor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_cursor'
        module_type_store = module_type_store.open_function_context('_set_cursor', 2867, 4, False)
        # Assigning a type to the variable 'self' (line 2868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2868, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2._set_cursor.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2._set_cursor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2._set_cursor.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2._set_cursor.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2._set_cursor')
        NavigationToolbar2._set_cursor.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2._set_cursor.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2._set_cursor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2._set_cursor.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2._set_cursor.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2._set_cursor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2._set_cursor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2._set_cursor', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_cursor', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_cursor(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'event' (line 2868)
        event_18009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2868, 15), 'event')
        # Obtaining the member 'inaxes' of a type (line 2868)
        inaxes_18010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2868, 15), event_18009, 'inaxes')
        # Applying the 'not' unary operator (line 2868)
        result_not__18011 = python_operator(stypy.reporting.localization.Localization(__file__, 2868, 11), 'not', inaxes_18010)
        
        
        # Getting the type of 'self' (line 2868)
        self_18012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2868, 35), 'self')
        # Obtaining the member '_active' of a type (line 2868)
        _active_18013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2868, 35), self_18012, '_active')
        # Applying the 'not' unary operator (line 2868)
        result_not__18014 = python_operator(stypy.reporting.localization.Localization(__file__, 2868, 31), 'not', _active_18013)
        
        # Applying the binary operator 'or' (line 2868)
        result_or_keyword_18015 = python_operator(stypy.reporting.localization.Localization(__file__, 2868, 11), 'or', result_not__18011, result_not__18014)
        
        # Testing the type of an if condition (line 2868)
        if_condition_18016 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2868, 8), result_or_keyword_18015)
        # Assigning a type to the variable 'if_condition_18016' (line 2868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2868, 8), 'if_condition_18016', if_condition_18016)
        # SSA begins for if statement (line 2868)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 2869)
        self_18017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2869, 15), 'self')
        # Obtaining the member '_lastCursor' of a type (line 2869)
        _lastCursor_18018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2869, 15), self_18017, '_lastCursor')
        # Getting the type of 'cursors' (line 2869)
        cursors_18019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2869, 35), 'cursors')
        # Obtaining the member 'POINTER' of a type (line 2869)
        POINTER_18020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2869, 35), cursors_18019, 'POINTER')
        # Applying the binary operator '!=' (line 2869)
        result_ne_18021 = python_operator(stypy.reporting.localization.Localization(__file__, 2869, 15), '!=', _lastCursor_18018, POINTER_18020)
        
        # Testing the type of an if condition (line 2869)
        if_condition_18022 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2869, 12), result_ne_18021)
        # Assigning a type to the variable 'if_condition_18022' (line 2869)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2869, 12), 'if_condition_18022', if_condition_18022)
        # SSA begins for if statement (line 2869)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_cursor(...): (line 2870)
        # Processing the call arguments (line 2870)
        # Getting the type of 'cursors' (line 2870)
        cursors_18025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2870, 32), 'cursors', False)
        # Obtaining the member 'POINTER' of a type (line 2870)
        POINTER_18026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2870, 32), cursors_18025, 'POINTER')
        # Processing the call keyword arguments (line 2870)
        kwargs_18027 = {}
        # Getting the type of 'self' (line 2870)
        self_18023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2870, 16), 'self', False)
        # Obtaining the member 'set_cursor' of a type (line 2870)
        set_cursor_18024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2870, 16), self_18023, 'set_cursor')
        # Calling set_cursor(args, kwargs) (line 2870)
        set_cursor_call_result_18028 = invoke(stypy.reporting.localization.Localization(__file__, 2870, 16), set_cursor_18024, *[POINTER_18026], **kwargs_18027)
        
        
        # Assigning a Attribute to a Attribute (line 2871):
        
        # Assigning a Attribute to a Attribute (line 2871):
        
        # Assigning a Attribute to a Attribute (line 2871):
        # Getting the type of 'cursors' (line 2871)
        cursors_18029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2871, 35), 'cursors')
        # Obtaining the member 'POINTER' of a type (line 2871)
        POINTER_18030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2871, 35), cursors_18029, 'POINTER')
        # Getting the type of 'self' (line 2871)
        self_18031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2871, 16), 'self')
        # Setting the type of the member '_lastCursor' of a type (line 2871)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2871, 16), self_18031, '_lastCursor', POINTER_18030)
        # SSA join for if statement (line 2869)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2868)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2873)
        self_18032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2873, 16), 'self')
        # Obtaining the member '_active' of a type (line 2873)
        _active_18033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2873, 16), self_18032, '_active')
        unicode_18034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2873, 32), 'unicode', u'ZOOM')
        # Applying the binary operator '==' (line 2873)
        result_eq_18035 = python_operator(stypy.reporting.localization.Localization(__file__, 2873, 16), '==', _active_18033, unicode_18034)
        
        
        # Getting the type of 'self' (line 2874)
        self_18036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2874, 24), 'self')
        # Obtaining the member '_lastCursor' of a type (line 2874)
        _lastCursor_18037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2874, 24), self_18036, '_lastCursor')
        # Getting the type of 'cursors' (line 2874)
        cursors_18038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2874, 44), 'cursors')
        # Obtaining the member 'SELECT_REGION' of a type (line 2874)
        SELECT_REGION_18039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2874, 44), cursors_18038, 'SELECT_REGION')
        # Applying the binary operator '!=' (line 2874)
        result_ne_18040 = python_operator(stypy.reporting.localization.Localization(__file__, 2874, 24), '!=', _lastCursor_18037, SELECT_REGION_18039)
        
        # Applying the binary operator 'and' (line 2873)
        result_and_keyword_18041 = python_operator(stypy.reporting.localization.Localization(__file__, 2873, 16), 'and', result_eq_18035, result_ne_18040)
        
        # Testing the type of an if condition (line 2873)
        if_condition_18042 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2873, 12), result_and_keyword_18041)
        # Assigning a type to the variable 'if_condition_18042' (line 2873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2873, 12), 'if_condition_18042', if_condition_18042)
        # SSA begins for if statement (line 2873)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_cursor(...): (line 2875)
        # Processing the call arguments (line 2875)
        # Getting the type of 'cursors' (line 2875)
        cursors_18045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2875, 32), 'cursors', False)
        # Obtaining the member 'SELECT_REGION' of a type (line 2875)
        SELECT_REGION_18046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2875, 32), cursors_18045, 'SELECT_REGION')
        # Processing the call keyword arguments (line 2875)
        kwargs_18047 = {}
        # Getting the type of 'self' (line 2875)
        self_18043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2875, 16), 'self', False)
        # Obtaining the member 'set_cursor' of a type (line 2875)
        set_cursor_18044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2875, 16), self_18043, 'set_cursor')
        # Calling set_cursor(args, kwargs) (line 2875)
        set_cursor_call_result_18048 = invoke(stypy.reporting.localization.Localization(__file__, 2875, 16), set_cursor_18044, *[SELECT_REGION_18046], **kwargs_18047)
        
        
        # Assigning a Attribute to a Attribute (line 2876):
        
        # Assigning a Attribute to a Attribute (line 2876):
        
        # Assigning a Attribute to a Attribute (line 2876):
        # Getting the type of 'cursors' (line 2876)
        cursors_18049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2876, 35), 'cursors')
        # Obtaining the member 'SELECT_REGION' of a type (line 2876)
        SELECT_REGION_18050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2876, 35), cursors_18049, 'SELECT_REGION')
        # Getting the type of 'self' (line 2876)
        self_18051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2876, 16), 'self')
        # Setting the type of the member '_lastCursor' of a type (line 2876)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2876, 16), self_18051, '_lastCursor', SELECT_REGION_18050)
        # SSA branch for the else part of an if statement (line 2873)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2877)
        self_18052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2877, 18), 'self')
        # Obtaining the member '_active' of a type (line 2877)
        _active_18053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2877, 18), self_18052, '_active')
        unicode_18054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2877, 34), 'unicode', u'PAN')
        # Applying the binary operator '==' (line 2877)
        result_eq_18055 = python_operator(stypy.reporting.localization.Localization(__file__, 2877, 18), '==', _active_18053, unicode_18054)
        
        
        # Getting the type of 'self' (line 2878)
        self_18056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 18), 'self')
        # Obtaining the member '_lastCursor' of a type (line 2878)
        _lastCursor_18057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2878, 18), self_18056, '_lastCursor')
        # Getting the type of 'cursors' (line 2878)
        cursors_18058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 38), 'cursors')
        # Obtaining the member 'MOVE' of a type (line 2878)
        MOVE_18059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2878, 38), cursors_18058, 'MOVE')
        # Applying the binary operator '!=' (line 2878)
        result_ne_18060 = python_operator(stypy.reporting.localization.Localization(__file__, 2878, 18), '!=', _lastCursor_18057, MOVE_18059)
        
        # Applying the binary operator 'and' (line 2877)
        result_and_keyword_18061 = python_operator(stypy.reporting.localization.Localization(__file__, 2877, 18), 'and', result_eq_18055, result_ne_18060)
        
        # Testing the type of an if condition (line 2877)
        if_condition_18062 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2877, 17), result_and_keyword_18061)
        # Assigning a type to the variable 'if_condition_18062' (line 2877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2877, 17), 'if_condition_18062', if_condition_18062)
        # SSA begins for if statement (line 2877)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_cursor(...): (line 2879)
        # Processing the call arguments (line 2879)
        # Getting the type of 'cursors' (line 2879)
        cursors_18065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2879, 32), 'cursors', False)
        # Obtaining the member 'MOVE' of a type (line 2879)
        MOVE_18066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2879, 32), cursors_18065, 'MOVE')
        # Processing the call keyword arguments (line 2879)
        kwargs_18067 = {}
        # Getting the type of 'self' (line 2879)
        self_18063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2879, 16), 'self', False)
        # Obtaining the member 'set_cursor' of a type (line 2879)
        set_cursor_18064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2879, 16), self_18063, 'set_cursor')
        # Calling set_cursor(args, kwargs) (line 2879)
        set_cursor_call_result_18068 = invoke(stypy.reporting.localization.Localization(__file__, 2879, 16), set_cursor_18064, *[MOVE_18066], **kwargs_18067)
        
        
        # Assigning a Attribute to a Attribute (line 2880):
        
        # Assigning a Attribute to a Attribute (line 2880):
        
        # Assigning a Attribute to a Attribute (line 2880):
        # Getting the type of 'cursors' (line 2880)
        cursors_18069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2880, 35), 'cursors')
        # Obtaining the member 'MOVE' of a type (line 2880)
        MOVE_18070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2880, 35), cursors_18069, 'MOVE')
        # Getting the type of 'self' (line 2880)
        self_18071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2880, 16), 'self')
        # Setting the type of the member '_lastCursor' of a type (line 2880)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2880, 16), self_18071, '_lastCursor', MOVE_18070)
        # SSA join for if statement (line 2877)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2873)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2868)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_set_cursor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_cursor' in the type store
        # Getting the type of 'stypy_return_type' (line 2867)
        stypy_return_type_18072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2867, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18072)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_cursor'
        return stypy_return_type_18072


    @norecursion
    def mouse_move(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mouse_move'
        module_type_store = module_type_store.open_function_context('mouse_move', 2882, 4, False)
        # Assigning a type to the variable 'self' (line 2883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2883, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.mouse_move.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.mouse_move.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.mouse_move.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.mouse_move.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.mouse_move')
        NavigationToolbar2.mouse_move.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2.mouse_move.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.mouse_move.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.mouse_move.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.mouse_move.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.mouse_move.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.mouse_move.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.mouse_move', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mouse_move', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mouse_move(...)' code ##################

        
        # Call to _set_cursor(...): (line 2883)
        # Processing the call arguments (line 2883)
        # Getting the type of 'event' (line 2883)
        event_18075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2883, 25), 'event', False)
        # Processing the call keyword arguments (line 2883)
        kwargs_18076 = {}
        # Getting the type of 'self' (line 2883)
        self_18073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2883, 8), 'self', False)
        # Obtaining the member '_set_cursor' of a type (line 2883)
        _set_cursor_18074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2883, 8), self_18073, '_set_cursor')
        # Calling _set_cursor(args, kwargs) (line 2883)
        _set_cursor_call_result_18077 = invoke(stypy.reporting.localization.Localization(__file__, 2883, 8), _set_cursor_18074, *[event_18075], **kwargs_18076)
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'event' (line 2885)
        event_18078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2885, 11), 'event')
        # Obtaining the member 'inaxes' of a type (line 2885)
        inaxes_18079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2885, 11), event_18078, 'inaxes')
        
        # Call to get_navigate(...): (line 2885)
        # Processing the call keyword arguments (line 2885)
        kwargs_18083 = {}
        # Getting the type of 'event' (line 2885)
        event_18080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2885, 28), 'event', False)
        # Obtaining the member 'inaxes' of a type (line 2885)
        inaxes_18081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2885, 28), event_18080, 'inaxes')
        # Obtaining the member 'get_navigate' of a type (line 2885)
        get_navigate_18082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2885, 28), inaxes_18081, 'get_navigate')
        # Calling get_navigate(args, kwargs) (line 2885)
        get_navigate_call_result_18084 = invoke(stypy.reporting.localization.Localization(__file__, 2885, 28), get_navigate_18082, *[], **kwargs_18083)
        
        # Applying the binary operator 'and' (line 2885)
        result_and_keyword_18085 = python_operator(stypy.reporting.localization.Localization(__file__, 2885, 11), 'and', inaxes_18079, get_navigate_call_result_18084)
        
        # Testing the type of an if condition (line 2885)
        if_condition_18086 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2885, 8), result_and_keyword_18085)
        # Assigning a type to the variable 'if_condition_18086' (line 2885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2885, 8), 'if_condition_18086', if_condition_18086)
        # SSA begins for if statement (line 2885)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 2887)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 2888):
        
        # Assigning a Call to a Name (line 2888):
        
        # Assigning a Call to a Name (line 2888):
        
        # Call to format_coord(...): (line 2888)
        # Processing the call arguments (line 2888)
        # Getting the type of 'event' (line 2888)
        event_18090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2888, 46), 'event', False)
        # Obtaining the member 'xdata' of a type (line 2888)
        xdata_18091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2888, 46), event_18090, 'xdata')
        # Getting the type of 'event' (line 2888)
        event_18092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2888, 59), 'event', False)
        # Obtaining the member 'ydata' of a type (line 2888)
        ydata_18093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2888, 59), event_18092, 'ydata')
        # Processing the call keyword arguments (line 2888)
        kwargs_18094 = {}
        # Getting the type of 'event' (line 2888)
        event_18087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2888, 20), 'event', False)
        # Obtaining the member 'inaxes' of a type (line 2888)
        inaxes_18088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2888, 20), event_18087, 'inaxes')
        # Obtaining the member 'format_coord' of a type (line 2888)
        format_coord_18089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2888, 20), inaxes_18088, 'format_coord')
        # Calling format_coord(args, kwargs) (line 2888)
        format_coord_call_result_18095 = invoke(stypy.reporting.localization.Localization(__file__, 2888, 20), format_coord_18089, *[xdata_18091, ydata_18093], **kwargs_18094)
        
        # Assigning a type to the variable 's' (line 2888)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2888, 16), 's', format_coord_call_result_18095)
        # SSA branch for the except part of a try statement (line 2887)
        # SSA branch for the except 'Tuple' branch of a try statement (line 2887)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 2887)
        module_type_store.open_ssa_branch('except else')
        
        # Assigning a ListComp to a Name (line 2892):
        
        # Assigning a ListComp to a Name (line 2892):
        
        # Assigning a ListComp to a Name (line 2892):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'event' (line 2892)
        event_18107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2892, 38), 'event')
        # Obtaining the member 'inaxes' of a type (line 2892)
        inaxes_18108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2892, 38), event_18107, 'inaxes')
        # Obtaining the member 'mouseover_set' of a type (line 2892)
        mouseover_set_18109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2892, 38), inaxes_18108, 'mouseover_set')
        comprehension_18110 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2892, 27), mouseover_set_18109)
        # Assigning a type to the variable 'a' (line 2892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2892, 27), 'a', comprehension_18110)
        
        # Evaluating a boolean operation
        
        # Call to contains(...): (line 2893)
        # Processing the call arguments (line 2893)
        # Getting the type of 'event' (line 2893)
        event_18099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2893, 41), 'event', False)
        # Processing the call keyword arguments (line 2893)
        kwargs_18100 = {}
        # Getting the type of 'a' (line 2893)
        a_18097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2893, 30), 'a', False)
        # Obtaining the member 'contains' of a type (line 2893)
        contains_18098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2893, 30), a_18097, 'contains')
        # Calling contains(args, kwargs) (line 2893)
        contains_call_result_18101 = invoke(stypy.reporting.localization.Localization(__file__, 2893, 30), contains_18098, *[event_18099], **kwargs_18100)
        
        
        # Call to get_visible(...): (line 2893)
        # Processing the call keyword arguments (line 2893)
        kwargs_18104 = {}
        # Getting the type of 'a' (line 2893)
        a_18102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2893, 52), 'a', False)
        # Obtaining the member 'get_visible' of a type (line 2893)
        get_visible_18103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2893, 52), a_18102, 'get_visible')
        # Calling get_visible(args, kwargs) (line 2893)
        get_visible_call_result_18105 = invoke(stypy.reporting.localization.Localization(__file__, 2893, 52), get_visible_18103, *[], **kwargs_18104)
        
        # Applying the binary operator 'and' (line 2893)
        result_and_keyword_18106 = python_operator(stypy.reporting.localization.Localization(__file__, 2893, 30), 'and', contains_call_result_18101, get_visible_call_result_18105)
        
        # Getting the type of 'a' (line 2892)
        a_18096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2892, 27), 'a')
        list_18111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2892, 27), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2892, 27), list_18111, a_18096)
        # Assigning a type to the variable 'artists' (line 2892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2892, 16), 'artists', list_18111)
        
        # Getting the type of 'artists' (line 2895)
        artists_18112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2895, 19), 'artists')
        # Testing the type of an if condition (line 2895)
        if_condition_18113 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2895, 16), artists_18112)
        # Assigning a type to the variable 'if_condition_18113' (line 2895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2895, 16), 'if_condition_18113', if_condition_18113)
        # SSA begins for if statement (line 2895)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2896):
        
        # Assigning a Call to a Name (line 2896):
        
        # Assigning a Call to a Name (line 2896):
        
        # Call to max(...): (line 2896)
        # Processing the call arguments (line 2896)
        # Getting the type of 'artists' (line 2896)
        artists_18115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2896, 28), 'artists', False)
        # Processing the call keyword arguments (line 2896)

        @norecursion
        def _stypy_temp_lambda_6(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_6'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_6', 2896, 41, True)
            # Passed parameters checking function
            _stypy_temp_lambda_6.stypy_localization = localization
            _stypy_temp_lambda_6.stypy_type_of_self = None
            _stypy_temp_lambda_6.stypy_type_store = module_type_store
            _stypy_temp_lambda_6.stypy_function_name = '_stypy_temp_lambda_6'
            _stypy_temp_lambda_6.stypy_param_names_list = ['x']
            _stypy_temp_lambda_6.stypy_varargs_param_name = None
            _stypy_temp_lambda_6.stypy_kwargs_param_name = None
            _stypy_temp_lambda_6.stypy_call_defaults = defaults
            _stypy_temp_lambda_6.stypy_call_varargs = varargs
            _stypy_temp_lambda_6.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_6', ['x'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_6', ['x'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'x' (line 2896)
            x_18116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2896, 51), 'x', False)
            # Obtaining the member 'zorder' of a type (line 2896)
            zorder_18117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2896, 51), x_18116, 'zorder')
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 2896)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2896, 41), 'stypy_return_type', zorder_18117)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_6' in the type store
            # Getting the type of 'stypy_return_type' (line 2896)
            stypy_return_type_18118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2896, 41), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_18118)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_6'
            return stypy_return_type_18118

        # Assigning a type to the variable '_stypy_temp_lambda_6' (line 2896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2896, 41), '_stypy_temp_lambda_6', _stypy_temp_lambda_6)
        # Getting the type of '_stypy_temp_lambda_6' (line 2896)
        _stypy_temp_lambda_6_18119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2896, 41), '_stypy_temp_lambda_6')
        keyword_18120 = _stypy_temp_lambda_6_18119
        kwargs_18121 = {'key': keyword_18120}
        # Getting the type of 'max' (line 2896)
        max_18114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2896, 24), 'max', False)
        # Calling max(args, kwargs) (line 2896)
        max_call_result_18122 = invoke(stypy.reporting.localization.Localization(__file__, 2896, 24), max_18114, *[artists_18115], **kwargs_18121)
        
        # Assigning a type to the variable 'a' (line 2896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2896, 20), 'a', max_call_result_18122)
        
        
        # Getting the type of 'a' (line 2897)
        a_18123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2897, 23), 'a')
        # Getting the type of 'event' (line 2897)
        event_18124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2897, 32), 'event')
        # Obtaining the member 'inaxes' of a type (line 2897)
        inaxes_18125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2897, 32), event_18124, 'inaxes')
        # Obtaining the member 'patch' of a type (line 2897)
        patch_18126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2897, 32), inaxes_18125, 'patch')
        # Applying the binary operator 'isnot' (line 2897)
        result_is_not_18127 = python_operator(stypy.reporting.localization.Localization(__file__, 2897, 23), 'isnot', a_18123, patch_18126)
        
        # Testing the type of an if condition (line 2897)
        if_condition_18128 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2897, 20), result_is_not_18127)
        # Assigning a type to the variable 'if_condition_18128' (line 2897)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2897, 20), 'if_condition_18128', if_condition_18128)
        # SSA begins for if statement (line 2897)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2898):
        
        # Assigning a Call to a Name (line 2898):
        
        # Assigning a Call to a Name (line 2898):
        
        # Call to get_cursor_data(...): (line 2898)
        # Processing the call arguments (line 2898)
        # Getting the type of 'event' (line 2898)
        event_18131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2898, 49), 'event', False)
        # Processing the call keyword arguments (line 2898)
        kwargs_18132 = {}
        # Getting the type of 'a' (line 2898)
        a_18129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2898, 31), 'a', False)
        # Obtaining the member 'get_cursor_data' of a type (line 2898)
        get_cursor_data_18130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2898, 31), a_18129, 'get_cursor_data')
        # Calling get_cursor_data(args, kwargs) (line 2898)
        get_cursor_data_call_result_18133 = invoke(stypy.reporting.localization.Localization(__file__, 2898, 31), get_cursor_data_18130, *[event_18131], **kwargs_18132)
        
        # Assigning a type to the variable 'data' (line 2898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2898, 24), 'data', get_cursor_data_call_result_18133)
        
        # Type idiom detected: calculating its left and rigth part (line 2899)
        # Getting the type of 'data' (line 2899)
        data_18134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2899, 24), 'data')
        # Getting the type of 'None' (line 2899)
        None_18135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2899, 39), 'None')
        
        (may_be_18136, more_types_in_union_18137) = may_not_be_none(data_18134, None_18135)

        if may_be_18136:

            if more_types_in_union_18137:
                # Runtime conditional SSA (line 2899)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 's' (line 2900)
            s_18138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 28), 's')
            unicode_18139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2900, 33), 'unicode', u' [%s]')
            
            # Call to format_cursor_data(...): (line 2900)
            # Processing the call arguments (line 2900)
            # Getting the type of 'data' (line 2900)
            data_18142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 64), 'data', False)
            # Processing the call keyword arguments (line 2900)
            kwargs_18143 = {}
            # Getting the type of 'a' (line 2900)
            a_18140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 43), 'a', False)
            # Obtaining the member 'format_cursor_data' of a type (line 2900)
            format_cursor_data_18141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2900, 43), a_18140, 'format_cursor_data')
            # Calling format_cursor_data(args, kwargs) (line 2900)
            format_cursor_data_call_result_18144 = invoke(stypy.reporting.localization.Localization(__file__, 2900, 43), format_cursor_data_18141, *[data_18142], **kwargs_18143)
            
            # Applying the binary operator '%' (line 2900)
            result_mod_18145 = python_operator(stypy.reporting.localization.Localization(__file__, 2900, 33), '%', unicode_18139, format_cursor_data_call_result_18144)
            
            # Applying the binary operator '+=' (line 2900)
            result_iadd_18146 = python_operator(stypy.reporting.localization.Localization(__file__, 2900, 28), '+=', s_18138, result_mod_18145)
            # Assigning a type to the variable 's' (line 2900)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2900, 28), 's', result_iadd_18146)
            

            if more_types_in_union_18137:
                # SSA join for if statement (line 2899)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 2897)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2895)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to len(...): (line 2902)
        # Processing the call arguments (line 2902)
        # Getting the type of 'self' (line 2902)
        self_18148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 23), 'self', False)
        # Obtaining the member 'mode' of a type (line 2902)
        mode_18149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2902, 23), self_18148, 'mode')
        # Processing the call keyword arguments (line 2902)
        kwargs_18150 = {}
        # Getting the type of 'len' (line 2902)
        len_18147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 19), 'len', False)
        # Calling len(args, kwargs) (line 2902)
        len_call_result_18151 = invoke(stypy.reporting.localization.Localization(__file__, 2902, 19), len_18147, *[mode_18149], **kwargs_18150)
        
        # Testing the type of an if condition (line 2902)
        if_condition_18152 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2902, 16), len_call_result_18151)
        # Assigning a type to the variable 'if_condition_18152' (line 2902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2902, 16), 'if_condition_18152', if_condition_18152)
        # SSA begins for if statement (line 2902)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_message(...): (line 2903)
        # Processing the call arguments (line 2903)
        unicode_18155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2903, 37), 'unicode', u'%s, %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2903)
        tuple_18156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2903, 49), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2903)
        # Adding element type (line 2903)
        # Getting the type of 'self' (line 2903)
        self_18157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 49), 'self', False)
        # Obtaining the member 'mode' of a type (line 2903)
        mode_18158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2903, 49), self_18157, 'mode')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2903, 49), tuple_18156, mode_18158)
        # Adding element type (line 2903)
        # Getting the type of 's' (line 2903)
        s_18159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 60), 's', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2903, 49), tuple_18156, s_18159)
        
        # Applying the binary operator '%' (line 2903)
        result_mod_18160 = python_operator(stypy.reporting.localization.Localization(__file__, 2903, 37), '%', unicode_18155, tuple_18156)
        
        # Processing the call keyword arguments (line 2903)
        kwargs_18161 = {}
        # Getting the type of 'self' (line 2903)
        self_18153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 20), 'self', False)
        # Obtaining the member 'set_message' of a type (line 2903)
        set_message_18154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2903, 20), self_18153, 'set_message')
        # Calling set_message(args, kwargs) (line 2903)
        set_message_call_result_18162 = invoke(stypy.reporting.localization.Localization(__file__, 2903, 20), set_message_18154, *[result_mod_18160], **kwargs_18161)
        
        # SSA branch for the else part of an if statement (line 2902)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_message(...): (line 2905)
        # Processing the call arguments (line 2905)
        # Getting the type of 's' (line 2905)
        s_18165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2905, 37), 's', False)
        # Processing the call keyword arguments (line 2905)
        kwargs_18166 = {}
        # Getting the type of 'self' (line 2905)
        self_18163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2905, 20), 'self', False)
        # Obtaining the member 'set_message' of a type (line 2905)
        set_message_18164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2905, 20), self_18163, 'set_message')
        # Calling set_message(args, kwargs) (line 2905)
        set_message_call_result_18167 = invoke(stypy.reporting.localization.Localization(__file__, 2905, 20), set_message_18164, *[s_18165], **kwargs_18166)
        
        # SSA join for if statement (line 2902)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for try-except statement (line 2887)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2885)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_message(...): (line 2907)
        # Processing the call arguments (line 2907)
        # Getting the type of 'self' (line 2907)
        self_18170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2907, 29), 'self', False)
        # Obtaining the member 'mode' of a type (line 2907)
        mode_18171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2907, 29), self_18170, 'mode')
        # Processing the call keyword arguments (line 2907)
        kwargs_18172 = {}
        # Getting the type of 'self' (line 2907)
        self_18168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2907, 12), 'self', False)
        # Obtaining the member 'set_message' of a type (line 2907)
        set_message_18169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2907, 12), self_18168, 'set_message')
        # Calling set_message(args, kwargs) (line 2907)
        set_message_call_result_18173 = invoke(stypy.reporting.localization.Localization(__file__, 2907, 12), set_message_18169, *[mode_18171], **kwargs_18172)
        
        # SSA join for if statement (line 2885)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'mouse_move(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mouse_move' in the type store
        # Getting the type of 'stypy_return_type' (line 2882)
        stypy_return_type_18174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2882, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18174)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mouse_move'
        return stypy_return_type_18174


    @norecursion
    def pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pan'
        module_type_store = module_type_store.open_function_context('pan', 2909, 4, False)
        # Assigning a type to the variable 'self' (line 2910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2910, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.pan.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.pan.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.pan')
        NavigationToolbar2.pan.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2.pan.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        NavigationToolbar2.pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.pan.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.pan', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pan', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pan(...)' code ##################

        unicode_18175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2910, 8), 'unicode', u'Activate the pan/zoom tool. pan with left button, zoom with right')
        
        
        # Getting the type of 'self' (line 2914)
        self_18176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2914, 11), 'self')
        # Obtaining the member '_active' of a type (line 2914)
        _active_18177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2914, 11), self_18176, '_active')
        unicode_18178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2914, 27), 'unicode', u'PAN')
        # Applying the binary operator '==' (line 2914)
        result_eq_18179 = python_operator(stypy.reporting.localization.Localization(__file__, 2914, 11), '==', _active_18177, unicode_18178)
        
        # Testing the type of an if condition (line 2914)
        if_condition_18180 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2914, 8), result_eq_18179)
        # Assigning a type to the variable 'if_condition_18180' (line 2914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2914, 8), 'if_condition_18180', if_condition_18180)
        # SSA begins for if statement (line 2914)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 2915):
        
        # Assigning a Name to a Attribute (line 2915):
        
        # Assigning a Name to a Attribute (line 2915):
        # Getting the type of 'None' (line 2915)
        None_18181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2915, 27), 'None')
        # Getting the type of 'self' (line 2915)
        self_18182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2915, 12), 'self')
        # Setting the type of the member '_active' of a type (line 2915)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2915, 12), self_18182, '_active', None_18181)
        # SSA branch for the else part of an if statement (line 2914)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Attribute (line 2917):
        
        # Assigning a Str to a Attribute (line 2917):
        
        # Assigning a Str to a Attribute (line 2917):
        unicode_18183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2917, 27), 'unicode', u'PAN')
        # Getting the type of 'self' (line 2917)
        self_18184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2917, 12), 'self')
        # Setting the type of the member '_active' of a type (line 2917)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2917, 12), self_18184, '_active', unicode_18183)
        # SSA join for if statement (line 2914)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 2918)
        self_18185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2918, 11), 'self')
        # Obtaining the member '_idPress' of a type (line 2918)
        _idPress_18186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2918, 11), self_18185, '_idPress')
        # Getting the type of 'None' (line 2918)
        None_18187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2918, 32), 'None')
        # Applying the binary operator 'isnot' (line 2918)
        result_is_not_18188 = python_operator(stypy.reporting.localization.Localization(__file__, 2918, 11), 'isnot', _idPress_18186, None_18187)
        
        # Testing the type of an if condition (line 2918)
        if_condition_18189 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2918, 8), result_is_not_18188)
        # Assigning a type to the variable 'if_condition_18189' (line 2918)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2918, 8), 'if_condition_18189', if_condition_18189)
        # SSA begins for if statement (line 2918)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 2919):
        
        # Assigning a Call to a Attribute (line 2919):
        
        # Assigning a Call to a Attribute (line 2919):
        
        # Call to mpl_disconnect(...): (line 2919)
        # Processing the call arguments (line 2919)
        # Getting the type of 'self' (line 2919)
        self_18193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2919, 55), 'self', False)
        # Obtaining the member '_idPress' of a type (line 2919)
        _idPress_18194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2919, 55), self_18193, '_idPress')
        # Processing the call keyword arguments (line 2919)
        kwargs_18195 = {}
        # Getting the type of 'self' (line 2919)
        self_18190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2919, 28), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2919)
        canvas_18191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2919, 28), self_18190, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 2919)
        mpl_disconnect_18192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2919, 28), canvas_18191, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 2919)
        mpl_disconnect_call_result_18196 = invoke(stypy.reporting.localization.Localization(__file__, 2919, 28), mpl_disconnect_18192, *[_idPress_18194], **kwargs_18195)
        
        # Getting the type of 'self' (line 2919)
        self_18197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2919, 12), 'self')
        # Setting the type of the member '_idPress' of a type (line 2919)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2919, 12), self_18197, '_idPress', mpl_disconnect_call_result_18196)
        
        # Assigning a Str to a Attribute (line 2920):
        
        # Assigning a Str to a Attribute (line 2920):
        
        # Assigning a Str to a Attribute (line 2920):
        unicode_18198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2920, 24), 'unicode', u'')
        # Getting the type of 'self' (line 2920)
        self_18199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2920, 12), 'self')
        # Setting the type of the member 'mode' of a type (line 2920)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2920, 12), self_18199, 'mode', unicode_18198)
        # SSA join for if statement (line 2918)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 2922)
        self_18200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 11), 'self')
        # Obtaining the member '_idRelease' of a type (line 2922)
        _idRelease_18201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2922, 11), self_18200, '_idRelease')
        # Getting the type of 'None' (line 2922)
        None_18202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 34), 'None')
        # Applying the binary operator 'isnot' (line 2922)
        result_is_not_18203 = python_operator(stypy.reporting.localization.Localization(__file__, 2922, 11), 'isnot', _idRelease_18201, None_18202)
        
        # Testing the type of an if condition (line 2922)
        if_condition_18204 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2922, 8), result_is_not_18203)
        # Assigning a type to the variable 'if_condition_18204' (line 2922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2922, 8), 'if_condition_18204', if_condition_18204)
        # SSA begins for if statement (line 2922)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 2923):
        
        # Assigning a Call to a Attribute (line 2923):
        
        # Assigning a Call to a Attribute (line 2923):
        
        # Call to mpl_disconnect(...): (line 2923)
        # Processing the call arguments (line 2923)
        # Getting the type of 'self' (line 2923)
        self_18208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2923, 57), 'self', False)
        # Obtaining the member '_idRelease' of a type (line 2923)
        _idRelease_18209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2923, 57), self_18208, '_idRelease')
        # Processing the call keyword arguments (line 2923)
        kwargs_18210 = {}
        # Getting the type of 'self' (line 2923)
        self_18205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2923, 30), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2923)
        canvas_18206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2923, 30), self_18205, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 2923)
        mpl_disconnect_18207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2923, 30), canvas_18206, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 2923)
        mpl_disconnect_call_result_18211 = invoke(stypy.reporting.localization.Localization(__file__, 2923, 30), mpl_disconnect_18207, *[_idRelease_18209], **kwargs_18210)
        
        # Getting the type of 'self' (line 2923)
        self_18212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2923, 12), 'self')
        # Setting the type of the member '_idRelease' of a type (line 2923)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2923, 12), self_18212, '_idRelease', mpl_disconnect_call_result_18211)
        
        # Assigning a Str to a Attribute (line 2924):
        
        # Assigning a Str to a Attribute (line 2924):
        
        # Assigning a Str to a Attribute (line 2924):
        unicode_18213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2924, 24), 'unicode', u'')
        # Getting the type of 'self' (line 2924)
        self_18214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2924, 12), 'self')
        # Setting the type of the member 'mode' of a type (line 2924)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2924, 12), self_18214, 'mode', unicode_18213)
        # SSA join for if statement (line 2922)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 2926)
        self_18215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2926, 11), 'self')
        # Obtaining the member '_active' of a type (line 2926)
        _active_18216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2926, 11), self_18215, '_active')
        # Testing the type of an if condition (line 2926)
        if_condition_18217 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2926, 8), _active_18216)
        # Assigning a type to the variable 'if_condition_18217' (line 2926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2926, 8), 'if_condition_18217', if_condition_18217)
        # SSA begins for if statement (line 2926)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 2927):
        
        # Assigning a Call to a Attribute (line 2927):
        
        # Assigning a Call to a Attribute (line 2927):
        
        # Call to mpl_connect(...): (line 2927)
        # Processing the call arguments (line 2927)
        unicode_18221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2928, 16), 'unicode', u'button_press_event')
        # Getting the type of 'self' (line 2928)
        self_18222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2928, 38), 'self', False)
        # Obtaining the member 'press_pan' of a type (line 2928)
        press_pan_18223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2928, 38), self_18222, 'press_pan')
        # Processing the call keyword arguments (line 2927)
        kwargs_18224 = {}
        # Getting the type of 'self' (line 2927)
        self_18218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 28), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2927)
        canvas_18219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2927, 28), self_18218, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 2927)
        mpl_connect_18220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2927, 28), canvas_18219, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 2927)
        mpl_connect_call_result_18225 = invoke(stypy.reporting.localization.Localization(__file__, 2927, 28), mpl_connect_18220, *[unicode_18221, press_pan_18223], **kwargs_18224)
        
        # Getting the type of 'self' (line 2927)
        self_18226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 12), 'self')
        # Setting the type of the member '_idPress' of a type (line 2927)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2927, 12), self_18226, '_idPress', mpl_connect_call_result_18225)
        
        # Assigning a Call to a Attribute (line 2929):
        
        # Assigning a Call to a Attribute (line 2929):
        
        # Assigning a Call to a Attribute (line 2929):
        
        # Call to mpl_connect(...): (line 2929)
        # Processing the call arguments (line 2929)
        unicode_18230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2930, 16), 'unicode', u'button_release_event')
        # Getting the type of 'self' (line 2930)
        self_18231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2930, 40), 'self', False)
        # Obtaining the member 'release_pan' of a type (line 2930)
        release_pan_18232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2930, 40), self_18231, 'release_pan')
        # Processing the call keyword arguments (line 2929)
        kwargs_18233 = {}
        # Getting the type of 'self' (line 2929)
        self_18227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2929, 30), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2929)
        canvas_18228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2929, 30), self_18227, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 2929)
        mpl_connect_18229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2929, 30), canvas_18228, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 2929)
        mpl_connect_call_result_18234 = invoke(stypy.reporting.localization.Localization(__file__, 2929, 30), mpl_connect_18229, *[unicode_18230, release_pan_18232], **kwargs_18233)
        
        # Getting the type of 'self' (line 2929)
        self_18235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2929, 12), 'self')
        # Setting the type of the member '_idRelease' of a type (line 2929)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2929, 12), self_18235, '_idRelease', mpl_connect_call_result_18234)
        
        # Assigning a Str to a Attribute (line 2931):
        
        # Assigning a Str to a Attribute (line 2931):
        
        # Assigning a Str to a Attribute (line 2931):
        unicode_18236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2931, 24), 'unicode', u'pan/zoom')
        # Getting the type of 'self' (line 2931)
        self_18237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 12), 'self')
        # Setting the type of the member 'mode' of a type (line 2931)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2931, 12), self_18237, 'mode', unicode_18236)
        
        # Call to widgetlock(...): (line 2932)
        # Processing the call arguments (line 2932)
        # Getting the type of 'self' (line 2932)
        self_18241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 35), 'self', False)
        # Processing the call keyword arguments (line 2932)
        kwargs_18242 = {}
        # Getting the type of 'self' (line 2932)
        self_18238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2932)
        canvas_18239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2932, 12), self_18238, 'canvas')
        # Obtaining the member 'widgetlock' of a type (line 2932)
        widgetlock_18240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2932, 12), canvas_18239, 'widgetlock')
        # Calling widgetlock(args, kwargs) (line 2932)
        widgetlock_call_result_18243 = invoke(stypy.reporting.localization.Localization(__file__, 2932, 12), widgetlock_18240, *[self_18241], **kwargs_18242)
        
        # SSA branch for the else part of an if statement (line 2926)
        module_type_store.open_ssa_branch('else')
        
        # Call to release(...): (line 2934)
        # Processing the call arguments (line 2934)
        # Getting the type of 'self' (line 2934)
        self_18248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2934, 43), 'self', False)
        # Processing the call keyword arguments (line 2934)
        kwargs_18249 = {}
        # Getting the type of 'self' (line 2934)
        self_18244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2934, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2934)
        canvas_18245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2934, 12), self_18244, 'canvas')
        # Obtaining the member 'widgetlock' of a type (line 2934)
        widgetlock_18246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2934, 12), canvas_18245, 'widgetlock')
        # Obtaining the member 'release' of a type (line 2934)
        release_18247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2934, 12), widgetlock_18246, 'release')
        # Calling release(args, kwargs) (line 2934)
        release_call_result_18250 = invoke(stypy.reporting.localization.Localization(__file__, 2934, 12), release_18247, *[self_18248], **kwargs_18249)
        
        # SSA join for if statement (line 2926)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to get_axes(...): (line 2936)
        # Processing the call keyword arguments (line 2936)
        kwargs_18255 = {}
        # Getting the type of 'self' (line 2936)
        self_18251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2936, 17), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2936)
        canvas_18252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2936, 17), self_18251, 'canvas')
        # Obtaining the member 'figure' of a type (line 2936)
        figure_18253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2936, 17), canvas_18252, 'figure')
        # Obtaining the member 'get_axes' of a type (line 2936)
        get_axes_18254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2936, 17), figure_18253, 'get_axes')
        # Calling get_axes(args, kwargs) (line 2936)
        get_axes_call_result_18256 = invoke(stypy.reporting.localization.Localization(__file__, 2936, 17), get_axes_18254, *[], **kwargs_18255)
        
        # Testing the type of a for loop iterable (line 2936)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2936, 8), get_axes_call_result_18256)
        # Getting the type of the for loop variable (line 2936)
        for_loop_var_18257 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2936, 8), get_axes_call_result_18256)
        # Assigning a type to the variable 'a' (line 2936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2936, 8), 'a', for_loop_var_18257)
        # SSA begins for a for statement (line 2936)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_navigate_mode(...): (line 2937)
        # Processing the call arguments (line 2937)
        # Getting the type of 'self' (line 2937)
        self_18260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2937, 32), 'self', False)
        # Obtaining the member '_active' of a type (line 2937)
        _active_18261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2937, 32), self_18260, '_active')
        # Processing the call keyword arguments (line 2937)
        kwargs_18262 = {}
        # Getting the type of 'a' (line 2937)
        a_18258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2937, 12), 'a', False)
        # Obtaining the member 'set_navigate_mode' of a type (line 2937)
        set_navigate_mode_18259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2937, 12), a_18258, 'set_navigate_mode')
        # Calling set_navigate_mode(args, kwargs) (line 2937)
        set_navigate_mode_call_result_18263 = invoke(stypy.reporting.localization.Localization(__file__, 2937, 12), set_navigate_mode_18259, *[_active_18261], **kwargs_18262)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_message(...): (line 2939)
        # Processing the call arguments (line 2939)
        # Getting the type of 'self' (line 2939)
        self_18266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2939, 25), 'self', False)
        # Obtaining the member 'mode' of a type (line 2939)
        mode_18267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2939, 25), self_18266, 'mode')
        # Processing the call keyword arguments (line 2939)
        kwargs_18268 = {}
        # Getting the type of 'self' (line 2939)
        self_18264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2939, 8), 'self', False)
        # Obtaining the member 'set_message' of a type (line 2939)
        set_message_18265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2939, 8), self_18264, 'set_message')
        # Calling set_message(args, kwargs) (line 2939)
        set_message_call_result_18269 = invoke(stypy.reporting.localization.Localization(__file__, 2939, 8), set_message_18265, *[mode_18267], **kwargs_18268)
        
        
        # ################# End of 'pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pan' in the type store
        # Getting the type of 'stypy_return_type' (line 2909)
        stypy_return_type_18270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2909, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18270)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pan'
        return stypy_return_type_18270


    @norecursion
    def press(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'press'
        module_type_store = module_type_store.open_function_context('press', 2941, 4, False)
        # Assigning a type to the variable 'self' (line 2942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2942, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.press.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.press.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.press.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.press.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.press')
        NavigationToolbar2.press.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2.press.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.press.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.press.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.press.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.press.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.press.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.press', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'press', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'press(...)' code ##################

        unicode_18271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2942, 8), 'unicode', u'Called whenver a mouse button is pressed.')
        
        # ################# End of 'press(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'press' in the type store
        # Getting the type of 'stypy_return_type' (line 2941)
        stypy_return_type_18272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2941, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18272)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'press'
        return stypy_return_type_18272


    @norecursion
    def press_pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'press_pan'
        module_type_store = module_type_store.open_function_context('press_pan', 2944, 4, False)
        # Assigning a type to the variable 'self' (line 2945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2945, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.press_pan.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.press_pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.press_pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.press_pan.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.press_pan')
        NavigationToolbar2.press_pan.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2.press_pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.press_pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.press_pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.press_pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.press_pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.press_pan.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.press_pan', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'press_pan', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'press_pan(...)' code ##################

        unicode_18273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2945, 8), 'unicode', u'Callback for mouse button press in pan/zoom mode.')
        
        
        # Getting the type of 'event' (line 2947)
        event_18274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 11), 'event')
        # Obtaining the member 'button' of a type (line 2947)
        button_18275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2947, 11), event_18274, 'button')
        int_18276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2947, 27), 'int')
        # Applying the binary operator '==' (line 2947)
        result_eq_18277 = python_operator(stypy.reporting.localization.Localization(__file__, 2947, 11), '==', button_18275, int_18276)
        
        # Testing the type of an if condition (line 2947)
        if_condition_18278 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2947, 8), result_eq_18277)
        # Assigning a type to the variable 'if_condition_18278' (line 2947)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2947, 8), 'if_condition_18278', if_condition_18278)
        # SSA begins for if statement (line 2947)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 2948):
        
        # Assigning a Num to a Attribute (line 2948):
        
        # Assigning a Num to a Attribute (line 2948):
        int_18279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2948, 35), 'int')
        # Getting the type of 'self' (line 2948)
        self_18280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 12), 'self')
        # Setting the type of the member '_button_pressed' of a type (line 2948)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2948, 12), self_18280, '_button_pressed', int_18279)
        # SSA branch for the else part of an if statement (line 2947)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'event' (line 2949)
        event_18281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2949, 13), 'event')
        # Obtaining the member 'button' of a type (line 2949)
        button_18282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2949, 13), event_18281, 'button')
        int_18283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2949, 29), 'int')
        # Applying the binary operator '==' (line 2949)
        result_eq_18284 = python_operator(stypy.reporting.localization.Localization(__file__, 2949, 13), '==', button_18282, int_18283)
        
        # Testing the type of an if condition (line 2949)
        if_condition_18285 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2949, 13), result_eq_18284)
        # Assigning a type to the variable 'if_condition_18285' (line 2949)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2949, 13), 'if_condition_18285', if_condition_18285)
        # SSA begins for if statement (line 2949)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 2950):
        
        # Assigning a Num to a Attribute (line 2950):
        
        # Assigning a Num to a Attribute (line 2950):
        int_18286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2950, 35), 'int')
        # Getting the type of 'self' (line 2950)
        self_18287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2950, 12), 'self')
        # Setting the type of the member '_button_pressed' of a type (line 2950)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2950, 12), self_18287, '_button_pressed', int_18286)
        # SSA branch for the else part of an if statement (line 2949)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 2952):
        
        # Assigning a Name to a Attribute (line 2952):
        
        # Assigning a Name to a Attribute (line 2952):
        # Getting the type of 'None' (line 2952)
        None_18288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2952, 35), 'None')
        # Getting the type of 'self' (line 2952)
        self_18289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2952, 12), 'self')
        # Setting the type of the member '_button_pressed' of a type (line 2952)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2952, 12), self_18289, '_button_pressed', None_18288)
        # Assigning a type to the variable 'stypy_return_type' (line 2953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2953, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2949)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2947)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 2955):
        
        # Assigning a Attribute to a Name (line 2955):
        
        # Assigning a Attribute to a Name (line 2955):
        # Getting the type of 'event' (line 2955)
        event_18290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2955, 15), 'event')
        # Obtaining the member 'x' of a type (line 2955)
        x_18291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2955, 15), event_18290, 'x')
        # Assigning a type to the variable 'tuple_assignment_13742' (line 2955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2955, 8), 'tuple_assignment_13742', x_18291)
        
        # Assigning a Attribute to a Name (line 2955):
        
        # Assigning a Attribute to a Name (line 2955):
        # Getting the type of 'event' (line 2955)
        event_18292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2955, 24), 'event')
        # Obtaining the member 'y' of a type (line 2955)
        y_18293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2955, 24), event_18292, 'y')
        # Assigning a type to the variable 'tuple_assignment_13743' (line 2955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2955, 8), 'tuple_assignment_13743', y_18293)
        
        # Assigning a Name to a Name (line 2955):
        
        # Assigning a Name to a Name (line 2955):
        # Getting the type of 'tuple_assignment_13742' (line 2955)
        tuple_assignment_13742_18294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2955, 8), 'tuple_assignment_13742')
        # Assigning a type to the variable 'x' (line 2955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2955, 8), 'x', tuple_assignment_13742_18294)
        
        # Assigning a Name to a Name (line 2955):
        
        # Assigning a Name to a Name (line 2955):
        # Getting the type of 'tuple_assignment_13743' (line 2955)
        tuple_assignment_13743_18295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2955, 8), 'tuple_assignment_13743')
        # Assigning a type to the variable 'y' (line 2955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2955, 11), 'y', tuple_assignment_13743_18295)
        
        # Assigning a List to a Attribute (line 2956):
        
        # Assigning a List to a Attribute (line 2956):
        
        # Assigning a List to a Attribute (line 2956):
        
        # Obtaining an instance of the builtin type 'list' (line 2956)
        list_18296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2956, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2956)
        
        # Getting the type of 'self' (line 2956)
        self_18297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 8), 'self')
        # Setting the type of the member '_xypress' of a type (line 2956)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2956, 8), self_18297, '_xypress', list_18296)
        
        
        # Call to enumerate(...): (line 2957)
        # Processing the call arguments (line 2957)
        
        # Call to get_axes(...): (line 2957)
        # Processing the call keyword arguments (line 2957)
        kwargs_18303 = {}
        # Getting the type of 'self' (line 2957)
        self_18299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 30), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2957)
        canvas_18300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2957, 30), self_18299, 'canvas')
        # Obtaining the member 'figure' of a type (line 2957)
        figure_18301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2957, 30), canvas_18300, 'figure')
        # Obtaining the member 'get_axes' of a type (line 2957)
        get_axes_18302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2957, 30), figure_18301, 'get_axes')
        # Calling get_axes(args, kwargs) (line 2957)
        get_axes_call_result_18304 = invoke(stypy.reporting.localization.Localization(__file__, 2957, 30), get_axes_18302, *[], **kwargs_18303)
        
        # Processing the call keyword arguments (line 2957)
        kwargs_18305 = {}
        # Getting the type of 'enumerate' (line 2957)
        enumerate_18298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 20), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 2957)
        enumerate_call_result_18306 = invoke(stypy.reporting.localization.Localization(__file__, 2957, 20), enumerate_18298, *[get_axes_call_result_18304], **kwargs_18305)
        
        # Testing the type of a for loop iterable (line 2957)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2957, 8), enumerate_call_result_18306)
        # Getting the type of the for loop variable (line 2957)
        for_loop_var_18307 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2957, 8), enumerate_call_result_18306)
        # Assigning a type to the variable 'i' (line 2957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2957, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2957, 8), for_loop_var_18307))
        # Assigning a type to the variable 'a' (line 2957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2957, 8), 'a', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2957, 8), for_loop_var_18307))
        # SSA begins for a for statement (line 2957)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x' (line 2958)
        x_18308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 16), 'x')
        # Getting the type of 'None' (line 2958)
        None_18309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 25), 'None')
        # Applying the binary operator 'isnot' (line 2958)
        result_is_not_18310 = python_operator(stypy.reporting.localization.Localization(__file__, 2958, 16), 'isnot', x_18308, None_18309)
        
        
        # Getting the type of 'y' (line 2958)
        y_18311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 34), 'y')
        # Getting the type of 'None' (line 2958)
        None_18312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 43), 'None')
        # Applying the binary operator 'isnot' (line 2958)
        result_is_not_18313 = python_operator(stypy.reporting.localization.Localization(__file__, 2958, 34), 'isnot', y_18311, None_18312)
        
        # Applying the binary operator 'and' (line 2958)
        result_and_keyword_18314 = python_operator(stypy.reporting.localization.Localization(__file__, 2958, 16), 'and', result_is_not_18310, result_is_not_18313)
        
        # Call to in_axes(...): (line 2958)
        # Processing the call arguments (line 2958)
        # Getting the type of 'event' (line 2958)
        event_18317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 62), 'event', False)
        # Processing the call keyword arguments (line 2958)
        kwargs_18318 = {}
        # Getting the type of 'a' (line 2958)
        a_18315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 52), 'a', False)
        # Obtaining the member 'in_axes' of a type (line 2958)
        in_axes_18316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2958, 52), a_18315, 'in_axes')
        # Calling in_axes(args, kwargs) (line 2958)
        in_axes_call_result_18319 = invoke(stypy.reporting.localization.Localization(__file__, 2958, 52), in_axes_18316, *[event_18317], **kwargs_18318)
        
        # Applying the binary operator 'and' (line 2958)
        result_and_keyword_18320 = python_operator(stypy.reporting.localization.Localization(__file__, 2958, 16), 'and', result_and_keyword_18314, in_axes_call_result_18319)
        
        # Call to get_navigate(...): (line 2959)
        # Processing the call keyword arguments (line 2959)
        kwargs_18323 = {}
        # Getting the type of 'a' (line 2959)
        a_18321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2959, 20), 'a', False)
        # Obtaining the member 'get_navigate' of a type (line 2959)
        get_navigate_18322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2959, 20), a_18321, 'get_navigate')
        # Calling get_navigate(args, kwargs) (line 2959)
        get_navigate_call_result_18324 = invoke(stypy.reporting.localization.Localization(__file__, 2959, 20), get_navigate_18322, *[], **kwargs_18323)
        
        # Applying the binary operator 'and' (line 2958)
        result_and_keyword_18325 = python_operator(stypy.reporting.localization.Localization(__file__, 2958, 16), 'and', result_and_keyword_18320, get_navigate_call_result_18324)
        
        # Call to can_pan(...): (line 2959)
        # Processing the call keyword arguments (line 2959)
        kwargs_18328 = {}
        # Getting the type of 'a' (line 2959)
        a_18326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2959, 41), 'a', False)
        # Obtaining the member 'can_pan' of a type (line 2959)
        can_pan_18327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2959, 41), a_18326, 'can_pan')
        # Calling can_pan(args, kwargs) (line 2959)
        can_pan_call_result_18329 = invoke(stypy.reporting.localization.Localization(__file__, 2959, 41), can_pan_18327, *[], **kwargs_18328)
        
        # Applying the binary operator 'and' (line 2958)
        result_and_keyword_18330 = python_operator(stypy.reporting.localization.Localization(__file__, 2958, 16), 'and', result_and_keyword_18325, can_pan_call_result_18329)
        
        # Testing the type of an if condition (line 2958)
        if_condition_18331 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2958, 12), result_and_keyword_18330)
        # Assigning a type to the variable 'if_condition_18331' (line 2958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2958, 12), 'if_condition_18331', if_condition_18331)
        # SSA begins for if statement (line 2958)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to start_pan(...): (line 2960)
        # Processing the call arguments (line 2960)
        # Getting the type of 'x' (line 2960)
        x_18334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2960, 28), 'x', False)
        # Getting the type of 'y' (line 2960)
        y_18335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2960, 31), 'y', False)
        # Getting the type of 'event' (line 2960)
        event_18336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2960, 34), 'event', False)
        # Obtaining the member 'button' of a type (line 2960)
        button_18337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2960, 34), event_18336, 'button')
        # Processing the call keyword arguments (line 2960)
        kwargs_18338 = {}
        # Getting the type of 'a' (line 2960)
        a_18332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2960, 16), 'a', False)
        # Obtaining the member 'start_pan' of a type (line 2960)
        start_pan_18333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2960, 16), a_18332, 'start_pan')
        # Calling start_pan(args, kwargs) (line 2960)
        start_pan_call_result_18339 = invoke(stypy.reporting.localization.Localization(__file__, 2960, 16), start_pan_18333, *[x_18334, y_18335, button_18337], **kwargs_18338)
        
        
        # Call to append(...): (line 2961)
        # Processing the call arguments (line 2961)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2961)
        tuple_18343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2961, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2961)
        # Adding element type (line 2961)
        # Getting the type of 'a' (line 2961)
        a_18344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2961, 38), 'a', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2961, 38), tuple_18343, a_18344)
        # Adding element type (line 2961)
        # Getting the type of 'i' (line 2961)
        i_18345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2961, 41), 'i', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2961, 38), tuple_18343, i_18345)
        
        # Processing the call keyword arguments (line 2961)
        kwargs_18346 = {}
        # Getting the type of 'self' (line 2961)
        self_18340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2961, 16), 'self', False)
        # Obtaining the member '_xypress' of a type (line 2961)
        _xypress_18341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2961, 16), self_18340, '_xypress')
        # Obtaining the member 'append' of a type (line 2961)
        append_18342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2961, 16), _xypress_18341, 'append')
        # Calling append(args, kwargs) (line 2961)
        append_call_result_18347 = invoke(stypy.reporting.localization.Localization(__file__, 2961, 16), append_18342, *[tuple_18343], **kwargs_18346)
        
        
        # Call to mpl_disconnect(...): (line 2962)
        # Processing the call arguments (line 2962)
        # Getting the type of 'self' (line 2962)
        self_18351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2962, 43), 'self', False)
        # Obtaining the member '_idDrag' of a type (line 2962)
        _idDrag_18352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2962, 43), self_18351, '_idDrag')
        # Processing the call keyword arguments (line 2962)
        kwargs_18353 = {}
        # Getting the type of 'self' (line 2962)
        self_18348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2962, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2962)
        canvas_18349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2962, 16), self_18348, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 2962)
        mpl_disconnect_18350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2962, 16), canvas_18349, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 2962)
        mpl_disconnect_call_result_18354 = invoke(stypy.reporting.localization.Localization(__file__, 2962, 16), mpl_disconnect_18350, *[_idDrag_18352], **kwargs_18353)
        
        
        # Assigning a Call to a Attribute (line 2963):
        
        # Assigning a Call to a Attribute (line 2963):
        
        # Assigning a Call to a Attribute (line 2963):
        
        # Call to mpl_connect(...): (line 2963)
        # Processing the call arguments (line 2963)
        unicode_18358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2963, 55), 'unicode', u'motion_notify_event')
        # Getting the type of 'self' (line 2964)
        self_18359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2964, 55), 'self', False)
        # Obtaining the member 'drag_pan' of a type (line 2964)
        drag_pan_18360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2964, 55), self_18359, 'drag_pan')
        # Processing the call keyword arguments (line 2963)
        kwargs_18361 = {}
        # Getting the type of 'self' (line 2963)
        self_18355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2963, 31), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2963)
        canvas_18356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2963, 31), self_18355, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 2963)
        mpl_connect_18357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2963, 31), canvas_18356, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 2963)
        mpl_connect_call_result_18362 = invoke(stypy.reporting.localization.Localization(__file__, 2963, 31), mpl_connect_18357, *[unicode_18358, drag_pan_18360], **kwargs_18361)
        
        # Getting the type of 'self' (line 2963)
        self_18363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2963, 16), 'self')
        # Setting the type of the member '_idDrag' of a type (line 2963)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2963, 16), self_18363, '_idDrag', mpl_connect_call_result_18362)
        # SSA join for if statement (line 2958)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to press(...): (line 2966)
        # Processing the call arguments (line 2966)
        # Getting the type of 'event' (line 2966)
        event_18366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2966, 19), 'event', False)
        # Processing the call keyword arguments (line 2966)
        kwargs_18367 = {}
        # Getting the type of 'self' (line 2966)
        self_18364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2966, 8), 'self', False)
        # Obtaining the member 'press' of a type (line 2966)
        press_18365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2966, 8), self_18364, 'press')
        # Calling press(args, kwargs) (line 2966)
        press_call_result_18368 = invoke(stypy.reporting.localization.Localization(__file__, 2966, 8), press_18365, *[event_18366], **kwargs_18367)
        
        
        # ################# End of 'press_pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'press_pan' in the type store
        # Getting the type of 'stypy_return_type' (line 2944)
        stypy_return_type_18369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2944, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18369)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'press_pan'
        return stypy_return_type_18369


    @norecursion
    def press_zoom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'press_zoom'
        module_type_store = module_type_store.open_function_context('press_zoom', 2968, 4, False)
        # Assigning a type to the variable 'self' (line 2969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2969, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.press_zoom.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.press_zoom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.press_zoom.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.press_zoom.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.press_zoom')
        NavigationToolbar2.press_zoom.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2.press_zoom.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.press_zoom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.press_zoom.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.press_zoom.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.press_zoom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.press_zoom.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.press_zoom', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'press_zoom', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'press_zoom(...)' code ##################

        unicode_18370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2969, 8), 'unicode', u'Callback for mouse button press in zoom to rect mode.')
        
        
        # Getting the type of 'self' (line 2972)
        self_18371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 11), 'self')
        # Obtaining the member '_ids_zoom' of a type (line 2972)
        _ids_zoom_18372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2972, 11), self_18371, '_ids_zoom')
        
        # Obtaining an instance of the builtin type 'list' (line 2972)
        list_18373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2972, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2972)
        
        # Applying the binary operator '!=' (line 2972)
        result_ne_18374 = python_operator(stypy.reporting.localization.Localization(__file__, 2972, 11), '!=', _ids_zoom_18372, list_18373)
        
        # Testing the type of an if condition (line 2972)
        if_condition_18375 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2972, 8), result_ne_18374)
        # Assigning a type to the variable 'if_condition_18375' (line 2972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2972, 8), 'if_condition_18375', if_condition_18375)
        # SSA begins for if statement (line 2972)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 2973)
        self_18376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2973, 27), 'self')
        # Obtaining the member '_ids_zoom' of a type (line 2973)
        _ids_zoom_18377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2973, 27), self_18376, '_ids_zoom')
        # Testing the type of a for loop iterable (line 2973)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2973, 12), _ids_zoom_18377)
        # Getting the type of the for loop variable (line 2973)
        for_loop_var_18378 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2973, 12), _ids_zoom_18377)
        # Assigning a type to the variable 'zoom_id' (line 2973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2973, 12), 'zoom_id', for_loop_var_18378)
        # SSA begins for a for statement (line 2973)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to mpl_disconnect(...): (line 2974)
        # Processing the call arguments (line 2974)
        # Getting the type of 'zoom_id' (line 2974)
        zoom_id_18382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2974, 43), 'zoom_id', False)
        # Processing the call keyword arguments (line 2974)
        kwargs_18383 = {}
        # Getting the type of 'self' (line 2974)
        self_18379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2974, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2974)
        canvas_18380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2974, 16), self_18379, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 2974)
        mpl_disconnect_18381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2974, 16), canvas_18380, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 2974)
        mpl_disconnect_call_result_18384 = invoke(stypy.reporting.localization.Localization(__file__, 2974, 16), mpl_disconnect_18381, *[zoom_id_18382], **kwargs_18383)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to release(...): (line 2975)
        # Processing the call arguments (line 2975)
        # Getting the type of 'event' (line 2975)
        event_18387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2975, 25), 'event', False)
        # Processing the call keyword arguments (line 2975)
        kwargs_18388 = {}
        # Getting the type of 'self' (line 2975)
        self_18385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2975, 12), 'self', False)
        # Obtaining the member 'release' of a type (line 2975)
        release_18386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2975, 12), self_18385, 'release')
        # Calling release(args, kwargs) (line 2975)
        release_call_result_18389 = invoke(stypy.reporting.localization.Localization(__file__, 2975, 12), release_18386, *[event_18387], **kwargs_18388)
        
        
        # Call to draw(...): (line 2976)
        # Processing the call keyword arguments (line 2976)
        kwargs_18392 = {}
        # Getting the type of 'self' (line 2976)
        self_18390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2976, 12), 'self', False)
        # Obtaining the member 'draw' of a type (line 2976)
        draw_18391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2976, 12), self_18390, 'draw')
        # Calling draw(args, kwargs) (line 2976)
        draw_call_result_18393 = invoke(stypy.reporting.localization.Localization(__file__, 2976, 12), draw_18391, *[], **kwargs_18392)
        
        
        # Assigning a Name to a Attribute (line 2977):
        
        # Assigning a Name to a Attribute (line 2977):
        
        # Assigning a Name to a Attribute (line 2977):
        # Getting the type of 'None' (line 2977)
        None_18394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2977, 28), 'None')
        # Getting the type of 'self' (line 2977)
        self_18395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2977, 12), 'self')
        # Setting the type of the member '_xypress' of a type (line 2977)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2977, 12), self_18395, '_xypress', None_18394)
        
        # Assigning a Name to a Attribute (line 2978):
        
        # Assigning a Name to a Attribute (line 2978):
        
        # Assigning a Name to a Attribute (line 2978):
        # Getting the type of 'None' (line 2978)
        None_18396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 35), 'None')
        # Getting the type of 'self' (line 2978)
        self_18397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 12), 'self')
        # Setting the type of the member '_button_pressed' of a type (line 2978)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2978, 12), self_18397, '_button_pressed', None_18396)
        
        # Assigning a List to a Attribute (line 2979):
        
        # Assigning a List to a Attribute (line 2979):
        
        # Assigning a List to a Attribute (line 2979):
        
        # Obtaining an instance of the builtin type 'list' (line 2979)
        list_18398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2979, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2979)
        
        # Getting the type of 'self' (line 2979)
        self_18399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 12), 'self')
        # Setting the type of the member '_ids_zoom' of a type (line 2979)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2979, 12), self_18399, '_ids_zoom', list_18398)
        # Assigning a type to the variable 'stypy_return_type' (line 2980)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2980, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2972)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 2982)
        event_18400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2982, 11), 'event')
        # Obtaining the member 'button' of a type (line 2982)
        button_18401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2982, 11), event_18400, 'button')
        int_18402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2982, 27), 'int')
        # Applying the binary operator '==' (line 2982)
        result_eq_18403 = python_operator(stypy.reporting.localization.Localization(__file__, 2982, 11), '==', button_18401, int_18402)
        
        # Testing the type of an if condition (line 2982)
        if_condition_18404 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2982, 8), result_eq_18403)
        # Assigning a type to the variable 'if_condition_18404' (line 2982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2982, 8), 'if_condition_18404', if_condition_18404)
        # SSA begins for if statement (line 2982)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 2983):
        
        # Assigning a Num to a Attribute (line 2983):
        
        # Assigning a Num to a Attribute (line 2983):
        int_18405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2983, 35), 'int')
        # Getting the type of 'self' (line 2983)
        self_18406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2983, 12), 'self')
        # Setting the type of the member '_button_pressed' of a type (line 2983)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2983, 12), self_18406, '_button_pressed', int_18405)
        # SSA branch for the else part of an if statement (line 2982)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'event' (line 2984)
        event_18407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2984, 13), 'event')
        # Obtaining the member 'button' of a type (line 2984)
        button_18408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2984, 13), event_18407, 'button')
        int_18409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2984, 29), 'int')
        # Applying the binary operator '==' (line 2984)
        result_eq_18410 = python_operator(stypy.reporting.localization.Localization(__file__, 2984, 13), '==', button_18408, int_18409)
        
        # Testing the type of an if condition (line 2984)
        if_condition_18411 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2984, 13), result_eq_18410)
        # Assigning a type to the variable 'if_condition_18411' (line 2984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2984, 13), 'if_condition_18411', if_condition_18411)
        # SSA begins for if statement (line 2984)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 2985):
        
        # Assigning a Num to a Attribute (line 2985):
        
        # Assigning a Num to a Attribute (line 2985):
        int_18412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2985, 35), 'int')
        # Getting the type of 'self' (line 2985)
        self_18413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 12), 'self')
        # Setting the type of the member '_button_pressed' of a type (line 2985)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2985, 12), self_18413, '_button_pressed', int_18412)
        # SSA branch for the else part of an if statement (line 2984)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 2987):
        
        # Assigning a Name to a Attribute (line 2987):
        
        # Assigning a Name to a Attribute (line 2987):
        # Getting the type of 'None' (line 2987)
        None_18414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 35), 'None')
        # Getting the type of 'self' (line 2987)
        self_18415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 12), 'self')
        # Setting the type of the member '_button_pressed' of a type (line 2987)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2987, 12), self_18415, '_button_pressed', None_18414)
        # Assigning a type to the variable 'stypy_return_type' (line 2988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2988, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2984)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2982)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 2990):
        
        # Assigning a Attribute to a Name (line 2990):
        
        # Assigning a Attribute to a Name (line 2990):
        # Getting the type of 'event' (line 2990)
        event_18416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 15), 'event')
        # Obtaining the member 'x' of a type (line 2990)
        x_18417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2990, 15), event_18416, 'x')
        # Assigning a type to the variable 'tuple_assignment_13744' (line 2990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2990, 8), 'tuple_assignment_13744', x_18417)
        
        # Assigning a Attribute to a Name (line 2990):
        
        # Assigning a Attribute to a Name (line 2990):
        # Getting the type of 'event' (line 2990)
        event_18418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 24), 'event')
        # Obtaining the member 'y' of a type (line 2990)
        y_18419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2990, 24), event_18418, 'y')
        # Assigning a type to the variable 'tuple_assignment_13745' (line 2990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2990, 8), 'tuple_assignment_13745', y_18419)
        
        # Assigning a Name to a Name (line 2990):
        
        # Assigning a Name to a Name (line 2990):
        # Getting the type of 'tuple_assignment_13744' (line 2990)
        tuple_assignment_13744_18420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 8), 'tuple_assignment_13744')
        # Assigning a type to the variable 'x' (line 2990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2990, 8), 'x', tuple_assignment_13744_18420)
        
        # Assigning a Name to a Name (line 2990):
        
        # Assigning a Name to a Name (line 2990):
        # Getting the type of 'tuple_assignment_13745' (line 2990)
        tuple_assignment_13745_18421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 8), 'tuple_assignment_13745')
        # Assigning a type to the variable 'y' (line 2990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2990, 11), 'y', tuple_assignment_13745_18421)
        
        # Assigning a List to a Attribute (line 2991):
        
        # Assigning a List to a Attribute (line 2991):
        
        # Assigning a List to a Attribute (line 2991):
        
        # Obtaining an instance of the builtin type 'list' (line 2991)
        list_18422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2991, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2991)
        
        # Getting the type of 'self' (line 2991)
        self_18423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2991, 8), 'self')
        # Setting the type of the member '_xypress' of a type (line 2991)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2991, 8), self_18423, '_xypress', list_18422)
        
        
        # Call to enumerate(...): (line 2992)
        # Processing the call arguments (line 2992)
        
        # Call to get_axes(...): (line 2992)
        # Processing the call keyword arguments (line 2992)
        kwargs_18429 = {}
        # Getting the type of 'self' (line 2992)
        self_18425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2992, 30), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2992)
        canvas_18426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2992, 30), self_18425, 'canvas')
        # Obtaining the member 'figure' of a type (line 2992)
        figure_18427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2992, 30), canvas_18426, 'figure')
        # Obtaining the member 'get_axes' of a type (line 2992)
        get_axes_18428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2992, 30), figure_18427, 'get_axes')
        # Calling get_axes(args, kwargs) (line 2992)
        get_axes_call_result_18430 = invoke(stypy.reporting.localization.Localization(__file__, 2992, 30), get_axes_18428, *[], **kwargs_18429)
        
        # Processing the call keyword arguments (line 2992)
        kwargs_18431 = {}
        # Getting the type of 'enumerate' (line 2992)
        enumerate_18424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2992, 20), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 2992)
        enumerate_call_result_18432 = invoke(stypy.reporting.localization.Localization(__file__, 2992, 20), enumerate_18424, *[get_axes_call_result_18430], **kwargs_18431)
        
        # Testing the type of a for loop iterable (line 2992)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2992, 8), enumerate_call_result_18432)
        # Getting the type of the for loop variable (line 2992)
        for_loop_var_18433 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2992, 8), enumerate_call_result_18432)
        # Assigning a type to the variable 'i' (line 2992)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2992, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2992, 8), for_loop_var_18433))
        # Assigning a type to the variable 'a' (line 2992)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2992, 8), 'a', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2992, 8), for_loop_var_18433))
        # SSA begins for a for statement (line 2992)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x' (line 2993)
        x_18434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2993, 16), 'x')
        # Getting the type of 'None' (line 2993)
        None_18435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2993, 25), 'None')
        # Applying the binary operator 'isnot' (line 2993)
        result_is_not_18436 = python_operator(stypy.reporting.localization.Localization(__file__, 2993, 16), 'isnot', x_18434, None_18435)
        
        
        # Getting the type of 'y' (line 2993)
        y_18437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2993, 34), 'y')
        # Getting the type of 'None' (line 2993)
        None_18438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2993, 43), 'None')
        # Applying the binary operator 'isnot' (line 2993)
        result_is_not_18439 = python_operator(stypy.reporting.localization.Localization(__file__, 2993, 34), 'isnot', y_18437, None_18438)
        
        # Applying the binary operator 'and' (line 2993)
        result_and_keyword_18440 = python_operator(stypy.reporting.localization.Localization(__file__, 2993, 16), 'and', result_is_not_18436, result_is_not_18439)
        
        # Call to in_axes(...): (line 2993)
        # Processing the call arguments (line 2993)
        # Getting the type of 'event' (line 2993)
        event_18443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2993, 62), 'event', False)
        # Processing the call keyword arguments (line 2993)
        kwargs_18444 = {}
        # Getting the type of 'a' (line 2993)
        a_18441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2993, 52), 'a', False)
        # Obtaining the member 'in_axes' of a type (line 2993)
        in_axes_18442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2993, 52), a_18441, 'in_axes')
        # Calling in_axes(args, kwargs) (line 2993)
        in_axes_call_result_18445 = invoke(stypy.reporting.localization.Localization(__file__, 2993, 52), in_axes_18442, *[event_18443], **kwargs_18444)
        
        # Applying the binary operator 'and' (line 2993)
        result_and_keyword_18446 = python_operator(stypy.reporting.localization.Localization(__file__, 2993, 16), 'and', result_and_keyword_18440, in_axes_call_result_18445)
        
        # Call to get_navigate(...): (line 2994)
        # Processing the call keyword arguments (line 2994)
        kwargs_18449 = {}
        # Getting the type of 'a' (line 2994)
        a_18447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2994, 20), 'a', False)
        # Obtaining the member 'get_navigate' of a type (line 2994)
        get_navigate_18448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2994, 20), a_18447, 'get_navigate')
        # Calling get_navigate(args, kwargs) (line 2994)
        get_navigate_call_result_18450 = invoke(stypy.reporting.localization.Localization(__file__, 2994, 20), get_navigate_18448, *[], **kwargs_18449)
        
        # Applying the binary operator 'and' (line 2993)
        result_and_keyword_18451 = python_operator(stypy.reporting.localization.Localization(__file__, 2993, 16), 'and', result_and_keyword_18446, get_navigate_call_result_18450)
        
        # Call to can_zoom(...): (line 2994)
        # Processing the call keyword arguments (line 2994)
        kwargs_18454 = {}
        # Getting the type of 'a' (line 2994)
        a_18452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2994, 41), 'a', False)
        # Obtaining the member 'can_zoom' of a type (line 2994)
        can_zoom_18453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2994, 41), a_18452, 'can_zoom')
        # Calling can_zoom(args, kwargs) (line 2994)
        can_zoom_call_result_18455 = invoke(stypy.reporting.localization.Localization(__file__, 2994, 41), can_zoom_18453, *[], **kwargs_18454)
        
        # Applying the binary operator 'and' (line 2993)
        result_and_keyword_18456 = python_operator(stypy.reporting.localization.Localization(__file__, 2993, 16), 'and', result_and_keyword_18451, can_zoom_call_result_18455)
        
        # Testing the type of an if condition (line 2993)
        if_condition_18457 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2993, 12), result_and_keyword_18456)
        # Assigning a type to the variable 'if_condition_18457' (line 2993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2993, 12), 'if_condition_18457', if_condition_18457)
        # SSA begins for if statement (line 2993)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2995)
        # Processing the call arguments (line 2995)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2995)
        tuple_18461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2995, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2995)
        # Adding element type (line 2995)
        # Getting the type of 'x' (line 2995)
        x_18462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 38), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2995, 38), tuple_18461, x_18462)
        # Adding element type (line 2995)
        # Getting the type of 'y' (line 2995)
        y_18463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 41), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2995, 38), tuple_18461, y_18463)
        # Adding element type (line 2995)
        # Getting the type of 'a' (line 2995)
        a_18464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 44), 'a', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2995, 38), tuple_18461, a_18464)
        # Adding element type (line 2995)
        # Getting the type of 'i' (line 2995)
        i_18465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 47), 'i', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2995, 38), tuple_18461, i_18465)
        # Adding element type (line 2995)
        
        # Call to _get_view(...): (line 2995)
        # Processing the call keyword arguments (line 2995)
        kwargs_18468 = {}
        # Getting the type of 'a' (line 2995)
        a_18466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 50), 'a', False)
        # Obtaining the member '_get_view' of a type (line 2995)
        _get_view_18467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2995, 50), a_18466, '_get_view')
        # Calling _get_view(args, kwargs) (line 2995)
        _get_view_call_result_18469 = invoke(stypy.reporting.localization.Localization(__file__, 2995, 50), _get_view_18467, *[], **kwargs_18468)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2995, 38), tuple_18461, _get_view_call_result_18469)
        
        # Processing the call keyword arguments (line 2995)
        kwargs_18470 = {}
        # Getting the type of 'self' (line 2995)
        self_18458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 16), 'self', False)
        # Obtaining the member '_xypress' of a type (line 2995)
        _xypress_18459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2995, 16), self_18458, '_xypress')
        # Obtaining the member 'append' of a type (line 2995)
        append_18460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2995, 16), _xypress_18459, 'append')
        # Calling append(args, kwargs) (line 2995)
        append_call_result_18471 = invoke(stypy.reporting.localization.Localization(__file__, 2995, 16), append_18460, *[tuple_18461], **kwargs_18470)
        
        # SSA join for if statement (line 2993)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2997):
        
        # Assigning a Call to a Name (line 2997):
        
        # Assigning a Call to a Name (line 2997):
        
        # Call to mpl_connect(...): (line 2997)
        # Processing the call arguments (line 2997)
        unicode_18475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2997, 38), 'unicode', u'motion_notify_event')
        # Getting the type of 'self' (line 2997)
        self_18476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2997, 61), 'self', False)
        # Obtaining the member 'drag_zoom' of a type (line 2997)
        drag_zoom_18477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2997, 61), self_18476, 'drag_zoom')
        # Processing the call keyword arguments (line 2997)
        kwargs_18478 = {}
        # Getting the type of 'self' (line 2997)
        self_18472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2997, 14), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2997)
        canvas_18473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2997, 14), self_18472, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 2997)
        mpl_connect_18474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2997, 14), canvas_18473, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 2997)
        mpl_connect_call_result_18479 = invoke(stypy.reporting.localization.Localization(__file__, 2997, 14), mpl_connect_18474, *[unicode_18475, drag_zoom_18477], **kwargs_18478)
        
        # Assigning a type to the variable 'id1' (line 2997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2997, 8), 'id1', mpl_connect_call_result_18479)
        
        # Assigning a Call to a Name (line 2998):
        
        # Assigning a Call to a Name (line 2998):
        
        # Assigning a Call to a Name (line 2998):
        
        # Call to mpl_connect(...): (line 2998)
        # Processing the call arguments (line 2998)
        unicode_18483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2998, 38), 'unicode', u'key_press_event')
        # Getting the type of 'self' (line 2999)
        self_18484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2999, 38), 'self', False)
        # Obtaining the member '_switch_on_zoom_mode' of a type (line 2999)
        _switch_on_zoom_mode_18485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2999, 38), self_18484, '_switch_on_zoom_mode')
        # Processing the call keyword arguments (line 2998)
        kwargs_18486 = {}
        # Getting the type of 'self' (line 2998)
        self_18480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2998, 14), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2998)
        canvas_18481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2998, 14), self_18480, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 2998)
        mpl_connect_18482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2998, 14), canvas_18481, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 2998)
        mpl_connect_call_result_18487 = invoke(stypy.reporting.localization.Localization(__file__, 2998, 14), mpl_connect_18482, *[unicode_18483, _switch_on_zoom_mode_18485], **kwargs_18486)
        
        # Assigning a type to the variable 'id2' (line 2998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2998, 8), 'id2', mpl_connect_call_result_18487)
        
        # Assigning a Call to a Name (line 3000):
        
        # Assigning a Call to a Name (line 3000):
        
        # Assigning a Call to a Name (line 3000):
        
        # Call to mpl_connect(...): (line 3000)
        # Processing the call arguments (line 3000)
        unicode_18491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3000, 38), 'unicode', u'key_release_event')
        # Getting the type of 'self' (line 3001)
        self_18492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3001, 38), 'self', False)
        # Obtaining the member '_switch_off_zoom_mode' of a type (line 3001)
        _switch_off_zoom_mode_18493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3001, 38), self_18492, '_switch_off_zoom_mode')
        # Processing the call keyword arguments (line 3000)
        kwargs_18494 = {}
        # Getting the type of 'self' (line 3000)
        self_18488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 14), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3000)
        canvas_18489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3000, 14), self_18488, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 3000)
        mpl_connect_18490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3000, 14), canvas_18489, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 3000)
        mpl_connect_call_result_18495 = invoke(stypy.reporting.localization.Localization(__file__, 3000, 14), mpl_connect_18490, *[unicode_18491, _switch_off_zoom_mode_18493], **kwargs_18494)
        
        # Assigning a type to the variable 'id3' (line 3000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3000, 8), 'id3', mpl_connect_call_result_18495)
        
        # Assigning a Tuple to a Attribute (line 3003):
        
        # Assigning a Tuple to a Attribute (line 3003):
        
        # Assigning a Tuple to a Attribute (line 3003):
        
        # Obtaining an instance of the builtin type 'tuple' (line 3003)
        tuple_18496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3003, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3003)
        # Adding element type (line 3003)
        # Getting the type of 'id1' (line 3003)
        id1_18497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 25), 'id1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3003, 25), tuple_18496, id1_18497)
        # Adding element type (line 3003)
        # Getting the type of 'id2' (line 3003)
        id2_18498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 30), 'id2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3003, 25), tuple_18496, id2_18498)
        # Adding element type (line 3003)
        # Getting the type of 'id3' (line 3003)
        id3_18499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 35), 'id3')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3003, 25), tuple_18496, id3_18499)
        
        # Getting the type of 'self' (line 3003)
        self_18500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 8), 'self')
        # Setting the type of the member '_ids_zoom' of a type (line 3003)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3003, 8), self_18500, '_ids_zoom', tuple_18496)
        
        # Assigning a Attribute to a Attribute (line 3004):
        
        # Assigning a Attribute to a Attribute (line 3004):
        
        # Assigning a Attribute to a Attribute (line 3004):
        # Getting the type of 'event' (line 3004)
        event_18501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3004, 26), 'event')
        # Obtaining the member 'key' of a type (line 3004)
        key_18502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3004, 26), event_18501, 'key')
        # Getting the type of 'self' (line 3004)
        self_18503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3004, 8), 'self')
        # Setting the type of the member '_zoom_mode' of a type (line 3004)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3004, 8), self_18503, '_zoom_mode', key_18502)
        
        # Call to press(...): (line 3006)
        # Processing the call arguments (line 3006)
        # Getting the type of 'event' (line 3006)
        event_18506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 19), 'event', False)
        # Processing the call keyword arguments (line 3006)
        kwargs_18507 = {}
        # Getting the type of 'self' (line 3006)
        self_18504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 8), 'self', False)
        # Obtaining the member 'press' of a type (line 3006)
        press_18505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3006, 8), self_18504, 'press')
        # Calling press(args, kwargs) (line 3006)
        press_call_result_18508 = invoke(stypy.reporting.localization.Localization(__file__, 3006, 8), press_18505, *[event_18506], **kwargs_18507)
        
        
        # ################# End of 'press_zoom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'press_zoom' in the type store
        # Getting the type of 'stypy_return_type' (line 2968)
        stypy_return_type_18509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18509)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'press_zoom'
        return stypy_return_type_18509


    @norecursion
    def _switch_on_zoom_mode(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_switch_on_zoom_mode'
        module_type_store = module_type_store.open_function_context('_switch_on_zoom_mode', 3008, 4, False)
        # Assigning a type to the variable 'self' (line 3009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3009, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2._switch_on_zoom_mode.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2._switch_on_zoom_mode.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2._switch_on_zoom_mode.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2._switch_on_zoom_mode.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2._switch_on_zoom_mode')
        NavigationToolbar2._switch_on_zoom_mode.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2._switch_on_zoom_mode.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2._switch_on_zoom_mode.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2._switch_on_zoom_mode.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2._switch_on_zoom_mode.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2._switch_on_zoom_mode.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2._switch_on_zoom_mode.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2._switch_on_zoom_mode', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_switch_on_zoom_mode', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_switch_on_zoom_mode(...)' code ##################

        
        # Assigning a Attribute to a Attribute (line 3009):
        
        # Assigning a Attribute to a Attribute (line 3009):
        
        # Assigning a Attribute to a Attribute (line 3009):
        # Getting the type of 'event' (line 3009)
        event_18510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 26), 'event')
        # Obtaining the member 'key' of a type (line 3009)
        key_18511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3009, 26), event_18510, 'key')
        # Getting the type of 'self' (line 3009)
        self_18512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 8), 'self')
        # Setting the type of the member '_zoom_mode' of a type (line 3009)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3009, 8), self_18512, '_zoom_mode', key_18511)
        
        # Call to mouse_move(...): (line 3010)
        # Processing the call arguments (line 3010)
        # Getting the type of 'event' (line 3010)
        event_18515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 24), 'event', False)
        # Processing the call keyword arguments (line 3010)
        kwargs_18516 = {}
        # Getting the type of 'self' (line 3010)
        self_18513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 8), 'self', False)
        # Obtaining the member 'mouse_move' of a type (line 3010)
        mouse_move_18514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3010, 8), self_18513, 'mouse_move')
        # Calling mouse_move(args, kwargs) (line 3010)
        mouse_move_call_result_18517 = invoke(stypy.reporting.localization.Localization(__file__, 3010, 8), mouse_move_18514, *[event_18515], **kwargs_18516)
        
        
        # ################# End of '_switch_on_zoom_mode(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_switch_on_zoom_mode' in the type store
        # Getting the type of 'stypy_return_type' (line 3008)
        stypy_return_type_18518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3008, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18518)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_switch_on_zoom_mode'
        return stypy_return_type_18518


    @norecursion
    def _switch_off_zoom_mode(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_switch_off_zoom_mode'
        module_type_store = module_type_store.open_function_context('_switch_off_zoom_mode', 3012, 4, False)
        # Assigning a type to the variable 'self' (line 3013)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3013, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2._switch_off_zoom_mode.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2._switch_off_zoom_mode.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2._switch_off_zoom_mode.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2._switch_off_zoom_mode.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2._switch_off_zoom_mode')
        NavigationToolbar2._switch_off_zoom_mode.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2._switch_off_zoom_mode.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2._switch_off_zoom_mode.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2._switch_off_zoom_mode.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2._switch_off_zoom_mode.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2._switch_off_zoom_mode.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2._switch_off_zoom_mode.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2._switch_off_zoom_mode', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_switch_off_zoom_mode', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_switch_off_zoom_mode(...)' code ##################

        
        # Assigning a Name to a Attribute (line 3013):
        
        # Assigning a Name to a Attribute (line 3013):
        
        # Assigning a Name to a Attribute (line 3013):
        # Getting the type of 'None' (line 3013)
        None_18519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 26), 'None')
        # Getting the type of 'self' (line 3013)
        self_18520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 8), 'self')
        # Setting the type of the member '_zoom_mode' of a type (line 3013)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3013, 8), self_18520, '_zoom_mode', None_18519)
        
        # Call to mouse_move(...): (line 3014)
        # Processing the call arguments (line 3014)
        # Getting the type of 'event' (line 3014)
        event_18523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3014, 24), 'event', False)
        # Processing the call keyword arguments (line 3014)
        kwargs_18524 = {}
        # Getting the type of 'self' (line 3014)
        self_18521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3014, 8), 'self', False)
        # Obtaining the member 'mouse_move' of a type (line 3014)
        mouse_move_18522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3014, 8), self_18521, 'mouse_move')
        # Calling mouse_move(args, kwargs) (line 3014)
        mouse_move_call_result_18525 = invoke(stypy.reporting.localization.Localization(__file__, 3014, 8), mouse_move_18522, *[event_18523], **kwargs_18524)
        
        
        # ################# End of '_switch_off_zoom_mode(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_switch_off_zoom_mode' in the type store
        # Getting the type of 'stypy_return_type' (line 3012)
        stypy_return_type_18526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18526)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_switch_off_zoom_mode'
        return stypy_return_type_18526


    @norecursion
    def push_current(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'push_current'
        module_type_store = module_type_store.open_function_context('push_current', 3016, 4, False)
        # Assigning a type to the variable 'self' (line 3017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3017, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.push_current.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.push_current.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.push_current.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.push_current.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.push_current')
        NavigationToolbar2.push_current.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2.push_current.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.push_current.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.push_current.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.push_current.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.push_current.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.push_current.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.push_current', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'push_current', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'push_current(...)' code ##################

        unicode_18527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3017, 8), 'unicode', u'Push the current view limits and position onto the stack.')
        
        # Assigning a List to a Name (line 3018):
        
        # Assigning a List to a Name (line 3018):
        
        # Assigning a List to a Name (line 3018):
        
        # Obtaining an instance of the builtin type 'list' (line 3018)
        list_18528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3018, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3018)
        
        # Assigning a type to the variable 'views' (line 3018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3018, 8), 'views', list_18528)
        
        # Assigning a List to a Name (line 3019):
        
        # Assigning a List to a Name (line 3019):
        
        # Assigning a List to a Name (line 3019):
        
        # Obtaining an instance of the builtin type 'list' (line 3019)
        list_18529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3019, 14), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3019)
        
        # Assigning a type to the variable 'pos' (line 3019)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3019, 8), 'pos', list_18529)
        
        
        # Call to get_axes(...): (line 3020)
        # Processing the call keyword arguments (line 3020)
        kwargs_18534 = {}
        # Getting the type of 'self' (line 3020)
        self_18530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 17), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3020)
        canvas_18531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3020, 17), self_18530, 'canvas')
        # Obtaining the member 'figure' of a type (line 3020)
        figure_18532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3020, 17), canvas_18531, 'figure')
        # Obtaining the member 'get_axes' of a type (line 3020)
        get_axes_18533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3020, 17), figure_18532, 'get_axes')
        # Calling get_axes(args, kwargs) (line 3020)
        get_axes_call_result_18535 = invoke(stypy.reporting.localization.Localization(__file__, 3020, 17), get_axes_18533, *[], **kwargs_18534)
        
        # Testing the type of a for loop iterable (line 3020)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3020, 8), get_axes_call_result_18535)
        # Getting the type of the for loop variable (line 3020)
        for_loop_var_18536 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3020, 8), get_axes_call_result_18535)
        # Assigning a type to the variable 'a' (line 3020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3020, 8), 'a', for_loop_var_18536)
        # SSA begins for a for statement (line 3020)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 3021)
        # Processing the call arguments (line 3021)
        
        # Call to _get_view(...): (line 3021)
        # Processing the call keyword arguments (line 3021)
        kwargs_18541 = {}
        # Getting the type of 'a' (line 3021)
        a_18539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 25), 'a', False)
        # Obtaining the member '_get_view' of a type (line 3021)
        _get_view_18540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3021, 25), a_18539, '_get_view')
        # Calling _get_view(args, kwargs) (line 3021)
        _get_view_call_result_18542 = invoke(stypy.reporting.localization.Localization(__file__, 3021, 25), _get_view_18540, *[], **kwargs_18541)
        
        # Processing the call keyword arguments (line 3021)
        kwargs_18543 = {}
        # Getting the type of 'views' (line 3021)
        views_18537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 12), 'views', False)
        # Obtaining the member 'append' of a type (line 3021)
        append_18538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3021, 12), views_18537, 'append')
        # Calling append(args, kwargs) (line 3021)
        append_call_result_18544 = invoke(stypy.reporting.localization.Localization(__file__, 3021, 12), append_18538, *[_get_view_call_result_18542], **kwargs_18543)
        
        
        # Call to append(...): (line 3023)
        # Processing the call arguments (line 3023)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3024)
        tuple_18547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3024, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3024)
        # Adding element type (line 3024)
        
        # Call to frozen(...): (line 3024)
        # Processing the call keyword arguments (line 3024)
        kwargs_18554 = {}
        
        # Call to get_position(...): (line 3024)
        # Processing the call arguments (line 3024)
        # Getting the type of 'True' (line 3024)
        True_18550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 31), 'True', False)
        # Processing the call keyword arguments (line 3024)
        kwargs_18551 = {}
        # Getting the type of 'a' (line 3024)
        a_18548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 16), 'a', False)
        # Obtaining the member 'get_position' of a type (line 3024)
        get_position_18549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3024, 16), a_18548, 'get_position')
        # Calling get_position(args, kwargs) (line 3024)
        get_position_call_result_18552 = invoke(stypy.reporting.localization.Localization(__file__, 3024, 16), get_position_18549, *[True_18550], **kwargs_18551)
        
        # Obtaining the member 'frozen' of a type (line 3024)
        frozen_18553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3024, 16), get_position_call_result_18552, 'frozen')
        # Calling frozen(args, kwargs) (line 3024)
        frozen_call_result_18555 = invoke(stypy.reporting.localization.Localization(__file__, 3024, 16), frozen_18553, *[], **kwargs_18554)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3024, 16), tuple_18547, frozen_call_result_18555)
        # Adding element type (line 3024)
        
        # Call to frozen(...): (line 3025)
        # Processing the call keyword arguments (line 3025)
        kwargs_18561 = {}
        
        # Call to get_position(...): (line 3025)
        # Processing the call keyword arguments (line 3025)
        kwargs_18558 = {}
        # Getting the type of 'a' (line 3025)
        a_18556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 16), 'a', False)
        # Obtaining the member 'get_position' of a type (line 3025)
        get_position_18557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3025, 16), a_18556, 'get_position')
        # Calling get_position(args, kwargs) (line 3025)
        get_position_call_result_18559 = invoke(stypy.reporting.localization.Localization(__file__, 3025, 16), get_position_18557, *[], **kwargs_18558)
        
        # Obtaining the member 'frozen' of a type (line 3025)
        frozen_18560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3025, 16), get_position_call_result_18559, 'frozen')
        # Calling frozen(args, kwargs) (line 3025)
        frozen_call_result_18562 = invoke(stypy.reporting.localization.Localization(__file__, 3025, 16), frozen_18560, *[], **kwargs_18561)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3024, 16), tuple_18547, frozen_call_result_18562)
        
        # Processing the call keyword arguments (line 3023)
        kwargs_18563 = {}
        # Getting the type of 'pos' (line 3023)
        pos_18545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3023, 12), 'pos', False)
        # Obtaining the member 'append' of a type (line 3023)
        append_18546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3023, 12), pos_18545, 'append')
        # Calling append(args, kwargs) (line 3023)
        append_call_result_18564 = invoke(stypy.reporting.localization.Localization(__file__, 3023, 12), append_18546, *[tuple_18547], **kwargs_18563)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to push(...): (line 3026)
        # Processing the call arguments (line 3026)
        # Getting the type of 'views' (line 3026)
        views_18568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 25), 'views', False)
        # Processing the call keyword arguments (line 3026)
        kwargs_18569 = {}
        # Getting the type of 'self' (line 3026)
        self_18565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 8), 'self', False)
        # Obtaining the member '_views' of a type (line 3026)
        _views_18566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3026, 8), self_18565, '_views')
        # Obtaining the member 'push' of a type (line 3026)
        push_18567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3026, 8), _views_18566, 'push')
        # Calling push(args, kwargs) (line 3026)
        push_call_result_18570 = invoke(stypy.reporting.localization.Localization(__file__, 3026, 8), push_18567, *[views_18568], **kwargs_18569)
        
        
        # Call to push(...): (line 3027)
        # Processing the call arguments (line 3027)
        # Getting the type of 'pos' (line 3027)
        pos_18574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3027, 29), 'pos', False)
        # Processing the call keyword arguments (line 3027)
        kwargs_18575 = {}
        # Getting the type of 'self' (line 3027)
        self_18571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3027, 8), 'self', False)
        # Obtaining the member '_positions' of a type (line 3027)
        _positions_18572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3027, 8), self_18571, '_positions')
        # Obtaining the member 'push' of a type (line 3027)
        push_18573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3027, 8), _positions_18572, 'push')
        # Calling push(args, kwargs) (line 3027)
        push_call_result_18576 = invoke(stypy.reporting.localization.Localization(__file__, 3027, 8), push_18573, *[pos_18574], **kwargs_18575)
        
        
        # Call to set_history_buttons(...): (line 3028)
        # Processing the call keyword arguments (line 3028)
        kwargs_18579 = {}
        # Getting the type of 'self' (line 3028)
        self_18577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3028, 8), 'self', False)
        # Obtaining the member 'set_history_buttons' of a type (line 3028)
        set_history_buttons_18578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3028, 8), self_18577, 'set_history_buttons')
        # Calling set_history_buttons(args, kwargs) (line 3028)
        set_history_buttons_call_result_18580 = invoke(stypy.reporting.localization.Localization(__file__, 3028, 8), set_history_buttons_18578, *[], **kwargs_18579)
        
        
        # ################# End of 'push_current(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'push_current' in the type store
        # Getting the type of 'stypy_return_type' (line 3016)
        stypy_return_type_18581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3016, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18581)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'push_current'
        return stypy_return_type_18581


    @norecursion
    def release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'release'
        module_type_store = module_type_store.open_function_context('release', 3030, 4, False)
        # Assigning a type to the variable 'self' (line 3031)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3031, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.release.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.release.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.release.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.release')
        NavigationToolbar2.release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2.release.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.release.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.release.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'release(...)' code ##################

        unicode_18582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3031, 8), 'unicode', u'Callback for mouse button release.')
        
        # ################# End of 'release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'release' in the type store
        # Getting the type of 'stypy_return_type' (line 3030)
        stypy_return_type_18583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3030, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18583)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'release'
        return stypy_return_type_18583


    @norecursion
    def release_pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'release_pan'
        module_type_store = module_type_store.open_function_context('release_pan', 3033, 4, False)
        # Assigning a type to the variable 'self' (line 3034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3034, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.release_pan.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.release_pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.release_pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.release_pan.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.release_pan')
        NavigationToolbar2.release_pan.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2.release_pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.release_pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.release_pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.release_pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.release_pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.release_pan.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.release_pan', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'release_pan', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'release_pan(...)' code ##################

        unicode_18584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3034, 8), 'unicode', u'Callback for mouse button release in pan/zoom mode.')
        
        # Type idiom detected: calculating its left and rigth part (line 3036)
        # Getting the type of 'self' (line 3036)
        self_18585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3036, 11), 'self')
        # Obtaining the member '_button_pressed' of a type (line 3036)
        _button_pressed_18586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3036, 11), self_18585, '_button_pressed')
        # Getting the type of 'None' (line 3036)
        None_18587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3036, 35), 'None')
        
        (may_be_18588, more_types_in_union_18589) = may_be_none(_button_pressed_18586, None_18587)

        if may_be_18588:

            if more_types_in_union_18589:
                # Runtime conditional SSA (line 3036)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 3037)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3037, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_18589:
                # SSA join for if statement (line 3036)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to mpl_disconnect(...): (line 3038)
        # Processing the call arguments (line 3038)
        # Getting the type of 'self' (line 3038)
        self_18593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3038, 35), 'self', False)
        # Obtaining the member '_idDrag' of a type (line 3038)
        _idDrag_18594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3038, 35), self_18593, '_idDrag')
        # Processing the call keyword arguments (line 3038)
        kwargs_18595 = {}
        # Getting the type of 'self' (line 3038)
        self_18590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3038, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3038)
        canvas_18591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3038, 8), self_18590, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 3038)
        mpl_disconnect_18592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3038, 8), canvas_18591, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 3038)
        mpl_disconnect_call_result_18596 = invoke(stypy.reporting.localization.Localization(__file__, 3038, 8), mpl_disconnect_18592, *[_idDrag_18594], **kwargs_18595)
        
        
        # Assigning a Call to a Attribute (line 3039):
        
        # Assigning a Call to a Attribute (line 3039):
        
        # Assigning a Call to a Attribute (line 3039):
        
        # Call to mpl_connect(...): (line 3039)
        # Processing the call arguments (line 3039)
        unicode_18600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3040, 12), 'unicode', u'motion_notify_event')
        # Getting the type of 'self' (line 3040)
        self_18601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3040, 35), 'self', False)
        # Obtaining the member 'mouse_move' of a type (line 3040)
        mouse_move_18602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3040, 35), self_18601, 'mouse_move')
        # Processing the call keyword arguments (line 3039)
        kwargs_18603 = {}
        # Getting the type of 'self' (line 3039)
        self_18597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3039, 23), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3039)
        canvas_18598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3039, 23), self_18597, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 3039)
        mpl_connect_18599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3039, 23), canvas_18598, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 3039)
        mpl_connect_call_result_18604 = invoke(stypy.reporting.localization.Localization(__file__, 3039, 23), mpl_connect_18599, *[unicode_18600, mouse_move_18602], **kwargs_18603)
        
        # Getting the type of 'self' (line 3039)
        self_18605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3039, 8), 'self')
        # Setting the type of the member '_idDrag' of a type (line 3039)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3039, 8), self_18605, '_idDrag', mpl_connect_call_result_18604)
        
        # Getting the type of 'self' (line 3041)
        self_18606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3041, 22), 'self')
        # Obtaining the member '_xypress' of a type (line 3041)
        _xypress_18607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3041, 22), self_18606, '_xypress')
        # Testing the type of a for loop iterable (line 3041)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3041, 8), _xypress_18607)
        # Getting the type of the for loop variable (line 3041)
        for_loop_var_18608 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3041, 8), _xypress_18607)
        # Assigning a type to the variable 'a' (line 3041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3041, 8), 'a', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3041, 8), for_loop_var_18608))
        # Assigning a type to the variable 'ind' (line 3041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3041, 8), 'ind', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3041, 8), for_loop_var_18608))
        # SSA begins for a for statement (line 3041)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to end_pan(...): (line 3042)
        # Processing the call keyword arguments (line 3042)
        kwargs_18611 = {}
        # Getting the type of 'a' (line 3042)
        a_18609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3042, 12), 'a', False)
        # Obtaining the member 'end_pan' of a type (line 3042)
        end_pan_18610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3042, 12), a_18609, 'end_pan')
        # Calling end_pan(args, kwargs) (line 3042)
        end_pan_call_result_18612 = invoke(stypy.reporting.localization.Localization(__file__, 3042, 12), end_pan_18610, *[], **kwargs_18611)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 3043)
        self_18613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3043, 15), 'self')
        # Obtaining the member '_xypress' of a type (line 3043)
        _xypress_18614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3043, 15), self_18613, '_xypress')
        # Applying the 'not' unary operator (line 3043)
        result_not__18615 = python_operator(stypy.reporting.localization.Localization(__file__, 3043, 11), 'not', _xypress_18614)
        
        # Testing the type of an if condition (line 3043)
        if_condition_18616 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3043, 8), result_not__18615)
        # Assigning a type to the variable 'if_condition_18616' (line 3043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3043, 8), 'if_condition_18616', if_condition_18616)
        # SSA begins for if statement (line 3043)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 3044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3044, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 3043)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Attribute (line 3045):
        
        # Assigning a List to a Attribute (line 3045):
        
        # Assigning a List to a Attribute (line 3045):
        
        # Obtaining an instance of the builtin type 'list' (line 3045)
        list_18617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3045, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3045)
        
        # Getting the type of 'self' (line 3045)
        self_18618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3045, 8), 'self')
        # Setting the type of the member '_xypress' of a type (line 3045)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3045, 8), self_18618, '_xypress', list_18617)
        
        # Assigning a Name to a Attribute (line 3046):
        
        # Assigning a Name to a Attribute (line 3046):
        
        # Assigning a Name to a Attribute (line 3046):
        # Getting the type of 'None' (line 3046)
        None_18619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3046, 31), 'None')
        # Getting the type of 'self' (line 3046)
        self_18620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3046, 8), 'self')
        # Setting the type of the member '_button_pressed' of a type (line 3046)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3046, 8), self_18620, '_button_pressed', None_18619)
        
        # Call to push_current(...): (line 3047)
        # Processing the call keyword arguments (line 3047)
        kwargs_18623 = {}
        # Getting the type of 'self' (line 3047)
        self_18621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3047, 8), 'self', False)
        # Obtaining the member 'push_current' of a type (line 3047)
        push_current_18622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3047, 8), self_18621, 'push_current')
        # Calling push_current(args, kwargs) (line 3047)
        push_current_call_result_18624 = invoke(stypy.reporting.localization.Localization(__file__, 3047, 8), push_current_18622, *[], **kwargs_18623)
        
        
        # Call to release(...): (line 3048)
        # Processing the call arguments (line 3048)
        # Getting the type of 'event' (line 3048)
        event_18627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3048, 21), 'event', False)
        # Processing the call keyword arguments (line 3048)
        kwargs_18628 = {}
        # Getting the type of 'self' (line 3048)
        self_18625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3048, 8), 'self', False)
        # Obtaining the member 'release' of a type (line 3048)
        release_18626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3048, 8), self_18625, 'release')
        # Calling release(args, kwargs) (line 3048)
        release_call_result_18629 = invoke(stypy.reporting.localization.Localization(__file__, 3048, 8), release_18626, *[event_18627], **kwargs_18628)
        
        
        # Call to draw(...): (line 3049)
        # Processing the call keyword arguments (line 3049)
        kwargs_18632 = {}
        # Getting the type of 'self' (line 3049)
        self_18630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3049, 8), 'self', False)
        # Obtaining the member 'draw' of a type (line 3049)
        draw_18631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3049, 8), self_18630, 'draw')
        # Calling draw(args, kwargs) (line 3049)
        draw_call_result_18633 = invoke(stypy.reporting.localization.Localization(__file__, 3049, 8), draw_18631, *[], **kwargs_18632)
        
        
        # ################# End of 'release_pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'release_pan' in the type store
        # Getting the type of 'stypy_return_type' (line 3033)
        stypy_return_type_18634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3033, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18634)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'release_pan'
        return stypy_return_type_18634


    @norecursion
    def drag_pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'drag_pan'
        module_type_store = module_type_store.open_function_context('drag_pan', 3051, 4, False)
        # Assigning a type to the variable 'self' (line 3052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3052, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.drag_pan.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.drag_pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.drag_pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.drag_pan.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.drag_pan')
        NavigationToolbar2.drag_pan.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2.drag_pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.drag_pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.drag_pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.drag_pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.drag_pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.drag_pan.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.drag_pan', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'drag_pan', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'drag_pan(...)' code ##################

        unicode_18635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3052, 8), 'unicode', u'Callback for dragging in pan/zoom mode.')
        
        # Getting the type of 'self' (line 3053)
        self_18636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 22), 'self')
        # Obtaining the member '_xypress' of a type (line 3053)
        _xypress_18637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3053, 22), self_18636, '_xypress')
        # Testing the type of a for loop iterable (line 3053)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3053, 8), _xypress_18637)
        # Getting the type of the for loop variable (line 3053)
        for_loop_var_18638 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3053, 8), _xypress_18637)
        # Assigning a type to the variable 'a' (line 3053)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3053, 8), 'a', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3053, 8), for_loop_var_18638))
        # Assigning a type to the variable 'ind' (line 3053)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3053, 8), 'ind', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3053, 8), for_loop_var_18638))
        # SSA begins for a for statement (line 3053)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to drag_pan(...): (line 3056)
        # Processing the call arguments (line 3056)
        # Getting the type of 'self' (line 3056)
        self_18641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3056, 23), 'self', False)
        # Obtaining the member '_button_pressed' of a type (line 3056)
        _button_pressed_18642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3056, 23), self_18641, '_button_pressed')
        # Getting the type of 'event' (line 3056)
        event_18643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3056, 45), 'event', False)
        # Obtaining the member 'key' of a type (line 3056)
        key_18644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3056, 45), event_18643, 'key')
        # Getting the type of 'event' (line 3056)
        event_18645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3056, 56), 'event', False)
        # Obtaining the member 'x' of a type (line 3056)
        x_18646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3056, 56), event_18645, 'x')
        # Getting the type of 'event' (line 3056)
        event_18647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3056, 65), 'event', False)
        # Obtaining the member 'y' of a type (line 3056)
        y_18648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3056, 65), event_18647, 'y')
        # Processing the call keyword arguments (line 3056)
        kwargs_18649 = {}
        # Getting the type of 'a' (line 3056)
        a_18639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3056, 12), 'a', False)
        # Obtaining the member 'drag_pan' of a type (line 3056)
        drag_pan_18640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3056, 12), a_18639, 'drag_pan')
        # Calling drag_pan(args, kwargs) (line 3056)
        drag_pan_call_result_18650 = invoke(stypy.reporting.localization.Localization(__file__, 3056, 12), drag_pan_18640, *[_button_pressed_18642, key_18644, x_18646, y_18648], **kwargs_18649)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw_idle(...): (line 3057)
        # Processing the call keyword arguments (line 3057)
        kwargs_18654 = {}
        # Getting the type of 'self' (line 3057)
        self_18651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3057, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3057)
        canvas_18652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3057, 8), self_18651, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 3057)
        draw_idle_18653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3057, 8), canvas_18652, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 3057)
        draw_idle_call_result_18655 = invoke(stypy.reporting.localization.Localization(__file__, 3057, 8), draw_idle_18653, *[], **kwargs_18654)
        
        
        # ################# End of 'drag_pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'drag_pan' in the type store
        # Getting the type of 'stypy_return_type' (line 3051)
        stypy_return_type_18656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18656)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'drag_pan'
        return stypy_return_type_18656


    @norecursion
    def drag_zoom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'drag_zoom'
        module_type_store = module_type_store.open_function_context('drag_zoom', 3059, 4, False)
        # Assigning a type to the variable 'self' (line 3060)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3060, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.drag_zoom.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.drag_zoom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.drag_zoom.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.drag_zoom.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.drag_zoom')
        NavigationToolbar2.drag_zoom.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2.drag_zoom.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.drag_zoom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.drag_zoom.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.drag_zoom.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.drag_zoom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.drag_zoom.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.drag_zoom', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'drag_zoom', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'drag_zoom(...)' code ##################

        unicode_18657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3060, 8), 'unicode', u'Callback for dragging in zoom mode.')
        
        # Getting the type of 'self' (line 3061)
        self_18658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 11), 'self')
        # Obtaining the member '_xypress' of a type (line 3061)
        _xypress_18659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3061, 11), self_18658, '_xypress')
        # Testing the type of an if condition (line 3061)
        if_condition_18660 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3061, 8), _xypress_18659)
        # Assigning a type to the variable 'if_condition_18660' (line 3061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3061, 8), 'if_condition_18660', if_condition_18660)
        # SSA begins for if statement (line 3061)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 3062):
        
        # Assigning a Attribute to a Name (line 3062):
        
        # Assigning a Attribute to a Name (line 3062):
        # Getting the type of 'event' (line 3062)
        event_18661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3062, 19), 'event')
        # Obtaining the member 'x' of a type (line 3062)
        x_18662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3062, 19), event_18661, 'x')
        # Assigning a type to the variable 'tuple_assignment_13746' (line 3062)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3062, 12), 'tuple_assignment_13746', x_18662)
        
        # Assigning a Attribute to a Name (line 3062):
        
        # Assigning a Attribute to a Name (line 3062):
        # Getting the type of 'event' (line 3062)
        event_18663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3062, 28), 'event')
        # Obtaining the member 'y' of a type (line 3062)
        y_18664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3062, 28), event_18663, 'y')
        # Assigning a type to the variable 'tuple_assignment_13747' (line 3062)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3062, 12), 'tuple_assignment_13747', y_18664)
        
        # Assigning a Name to a Name (line 3062):
        
        # Assigning a Name to a Name (line 3062):
        # Getting the type of 'tuple_assignment_13746' (line 3062)
        tuple_assignment_13746_18665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3062, 12), 'tuple_assignment_13746')
        # Assigning a type to the variable 'x' (line 3062)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3062, 12), 'x', tuple_assignment_13746_18665)
        
        # Assigning a Name to a Name (line 3062):
        
        # Assigning a Name to a Name (line 3062):
        # Getting the type of 'tuple_assignment_13747' (line 3062)
        tuple_assignment_13747_18666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3062, 12), 'tuple_assignment_13747')
        # Assigning a type to the variable 'y' (line 3062)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3062, 15), 'y', tuple_assignment_13747_18666)
        
        # Assigning a Subscript to a Tuple (line 3063):
        
        # Assigning a Subscript to a Name (line 3063):
        
        # Assigning a Subscript to a Name (line 3063):
        
        # Obtaining the type of the subscript
        int_18667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3063, 12), 'int')
        
        # Obtaining the type of the subscript
        int_18668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3063, 55), 'int')
        # Getting the type of 'self' (line 3063)
        self_18669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 41), 'self')
        # Obtaining the member '_xypress' of a type (line 3063)
        _xypress_18670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 41), self_18669, '_xypress')
        # Obtaining the member '__getitem__' of a type (line 3063)
        getitem___18671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 41), _xypress_18670, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3063)
        subscript_call_result_18672 = invoke(stypy.reporting.localization.Localization(__file__, 3063, 41), getitem___18671, int_18668)
        
        # Obtaining the member '__getitem__' of a type (line 3063)
        getitem___18673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 12), subscript_call_result_18672, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3063)
        subscript_call_result_18674 = invoke(stypy.reporting.localization.Localization(__file__, 3063, 12), getitem___18673, int_18667)
        
        # Assigning a type to the variable 'tuple_var_assignment_13748' (line 3063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3063, 12), 'tuple_var_assignment_13748', subscript_call_result_18674)
        
        # Assigning a Subscript to a Name (line 3063):
        
        # Assigning a Subscript to a Name (line 3063):
        
        # Obtaining the type of the subscript
        int_18675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3063, 12), 'int')
        
        # Obtaining the type of the subscript
        int_18676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3063, 55), 'int')
        # Getting the type of 'self' (line 3063)
        self_18677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 41), 'self')
        # Obtaining the member '_xypress' of a type (line 3063)
        _xypress_18678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 41), self_18677, '_xypress')
        # Obtaining the member '__getitem__' of a type (line 3063)
        getitem___18679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 41), _xypress_18678, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3063)
        subscript_call_result_18680 = invoke(stypy.reporting.localization.Localization(__file__, 3063, 41), getitem___18679, int_18676)
        
        # Obtaining the member '__getitem__' of a type (line 3063)
        getitem___18681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 12), subscript_call_result_18680, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3063)
        subscript_call_result_18682 = invoke(stypy.reporting.localization.Localization(__file__, 3063, 12), getitem___18681, int_18675)
        
        # Assigning a type to the variable 'tuple_var_assignment_13749' (line 3063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3063, 12), 'tuple_var_assignment_13749', subscript_call_result_18682)
        
        # Assigning a Subscript to a Name (line 3063):
        
        # Assigning a Subscript to a Name (line 3063):
        
        # Obtaining the type of the subscript
        int_18683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3063, 12), 'int')
        
        # Obtaining the type of the subscript
        int_18684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3063, 55), 'int')
        # Getting the type of 'self' (line 3063)
        self_18685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 41), 'self')
        # Obtaining the member '_xypress' of a type (line 3063)
        _xypress_18686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 41), self_18685, '_xypress')
        # Obtaining the member '__getitem__' of a type (line 3063)
        getitem___18687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 41), _xypress_18686, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3063)
        subscript_call_result_18688 = invoke(stypy.reporting.localization.Localization(__file__, 3063, 41), getitem___18687, int_18684)
        
        # Obtaining the member '__getitem__' of a type (line 3063)
        getitem___18689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 12), subscript_call_result_18688, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3063)
        subscript_call_result_18690 = invoke(stypy.reporting.localization.Localization(__file__, 3063, 12), getitem___18689, int_18683)
        
        # Assigning a type to the variable 'tuple_var_assignment_13750' (line 3063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3063, 12), 'tuple_var_assignment_13750', subscript_call_result_18690)
        
        # Assigning a Subscript to a Name (line 3063):
        
        # Assigning a Subscript to a Name (line 3063):
        
        # Obtaining the type of the subscript
        int_18691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3063, 12), 'int')
        
        # Obtaining the type of the subscript
        int_18692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3063, 55), 'int')
        # Getting the type of 'self' (line 3063)
        self_18693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 41), 'self')
        # Obtaining the member '_xypress' of a type (line 3063)
        _xypress_18694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 41), self_18693, '_xypress')
        # Obtaining the member '__getitem__' of a type (line 3063)
        getitem___18695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 41), _xypress_18694, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3063)
        subscript_call_result_18696 = invoke(stypy.reporting.localization.Localization(__file__, 3063, 41), getitem___18695, int_18692)
        
        # Obtaining the member '__getitem__' of a type (line 3063)
        getitem___18697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 12), subscript_call_result_18696, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3063)
        subscript_call_result_18698 = invoke(stypy.reporting.localization.Localization(__file__, 3063, 12), getitem___18697, int_18691)
        
        # Assigning a type to the variable 'tuple_var_assignment_13751' (line 3063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3063, 12), 'tuple_var_assignment_13751', subscript_call_result_18698)
        
        # Assigning a Subscript to a Name (line 3063):
        
        # Assigning a Subscript to a Name (line 3063):
        
        # Obtaining the type of the subscript
        int_18699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3063, 12), 'int')
        
        # Obtaining the type of the subscript
        int_18700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3063, 55), 'int')
        # Getting the type of 'self' (line 3063)
        self_18701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 41), 'self')
        # Obtaining the member '_xypress' of a type (line 3063)
        _xypress_18702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 41), self_18701, '_xypress')
        # Obtaining the member '__getitem__' of a type (line 3063)
        getitem___18703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 41), _xypress_18702, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3063)
        subscript_call_result_18704 = invoke(stypy.reporting.localization.Localization(__file__, 3063, 41), getitem___18703, int_18700)
        
        # Obtaining the member '__getitem__' of a type (line 3063)
        getitem___18705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 12), subscript_call_result_18704, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3063)
        subscript_call_result_18706 = invoke(stypy.reporting.localization.Localization(__file__, 3063, 12), getitem___18705, int_18699)
        
        # Assigning a type to the variable 'tuple_var_assignment_13752' (line 3063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3063, 12), 'tuple_var_assignment_13752', subscript_call_result_18706)
        
        # Assigning a Name to a Name (line 3063):
        
        # Assigning a Name to a Name (line 3063):
        # Getting the type of 'tuple_var_assignment_13748' (line 3063)
        tuple_var_assignment_13748_18707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 12), 'tuple_var_assignment_13748')
        # Assigning a type to the variable 'lastx' (line 3063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3063, 12), 'lastx', tuple_var_assignment_13748_18707)
        
        # Assigning a Name to a Name (line 3063):
        
        # Assigning a Name to a Name (line 3063):
        # Getting the type of 'tuple_var_assignment_13749' (line 3063)
        tuple_var_assignment_13749_18708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 12), 'tuple_var_assignment_13749')
        # Assigning a type to the variable 'lasty' (line 3063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3063, 19), 'lasty', tuple_var_assignment_13749_18708)
        
        # Assigning a Name to a Name (line 3063):
        
        # Assigning a Name to a Name (line 3063):
        # Getting the type of 'tuple_var_assignment_13750' (line 3063)
        tuple_var_assignment_13750_18709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 12), 'tuple_var_assignment_13750')
        # Assigning a type to the variable 'a' (line 3063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3063, 26), 'a', tuple_var_assignment_13750_18709)
        
        # Assigning a Name to a Name (line 3063):
        
        # Assigning a Name to a Name (line 3063):
        # Getting the type of 'tuple_var_assignment_13751' (line 3063)
        tuple_var_assignment_13751_18710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 12), 'tuple_var_assignment_13751')
        # Assigning a type to the variable 'ind' (line 3063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3063, 29), 'ind', tuple_var_assignment_13751_18710)
        
        # Assigning a Name to a Name (line 3063):
        
        # Assigning a Name to a Name (line 3063):
        # Getting the type of 'tuple_var_assignment_13752' (line 3063)
        tuple_var_assignment_13752_18711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 12), 'tuple_var_assignment_13752')
        # Assigning a type to the variable 'view' (line 3063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3063, 34), 'view', tuple_var_assignment_13752_18711)
        
        # Assigning a Call to a Tuple (line 3064):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to clip(...): (line 3064)
        # Processing the call arguments (line 3064)
        
        # Obtaining an instance of the builtin type 'list' (line 3065)
        list_18714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3065, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3065)
        # Adding element type (line 3065)
        
        # Obtaining an instance of the builtin type 'list' (line 3065)
        list_18715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3065, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3065)
        # Adding element type (line 3065)
        # Getting the type of 'lastx' (line 3065)
        lastx_18716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3065, 18), 'lastx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3065, 17), list_18715, lastx_18716)
        # Adding element type (line 3065)
        # Getting the type of 'lasty' (line 3065)
        lasty_18717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3065, 25), 'lasty', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3065, 17), list_18715, lasty_18717)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3065, 16), list_18714, list_18715)
        # Adding element type (line 3065)
        
        # Obtaining an instance of the builtin type 'list' (line 3065)
        list_18718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3065, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3065)
        # Adding element type (line 3065)
        # Getting the type of 'x' (line 3065)
        x_18719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3065, 34), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3065, 33), list_18718, x_18719)
        # Adding element type (line 3065)
        # Getting the type of 'y' (line 3065)
        y_18720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3065, 37), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3065, 33), list_18718, y_18720)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3065, 16), list_18714, list_18718)
        
        # Getting the type of 'a' (line 3065)
        a_18721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3065, 42), 'a', False)
        # Obtaining the member 'bbox' of a type (line 3065)
        bbox_18722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3065, 42), a_18721, 'bbox')
        # Obtaining the member 'min' of a type (line 3065)
        min_18723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3065, 42), bbox_18722, 'min')
        # Getting the type of 'a' (line 3065)
        a_18724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3065, 54), 'a', False)
        # Obtaining the member 'bbox' of a type (line 3065)
        bbox_18725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3065, 54), a_18724, 'bbox')
        # Obtaining the member 'max' of a type (line 3065)
        max_18726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3065, 54), bbox_18725, 'max')
        # Processing the call keyword arguments (line 3064)
        kwargs_18727 = {}
        # Getting the type of 'np' (line 3064)
        np_18712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 33), 'np', False)
        # Obtaining the member 'clip' of a type (line 3064)
        clip_18713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3064, 33), np_18712, 'clip')
        # Calling clip(args, kwargs) (line 3064)
        clip_call_result_18728 = invoke(stypy.reporting.localization.Localization(__file__, 3064, 33), clip_18713, *[list_18714, min_18723, max_18726], **kwargs_18727)
        
        # Assigning a type to the variable 'call_assignment_13753' (line 3064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'call_assignment_13753', clip_call_result_18728)
        
        # Assigning a Call to a Name (line 3064):
        
        # Assigning a Call to a Name (line 3064):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_18731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3064, 12), 'int')
        # Processing the call keyword arguments
        kwargs_18732 = {}
        # Getting the type of 'call_assignment_13753' (line 3064)
        call_assignment_13753_18729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'call_assignment_13753', False)
        # Obtaining the member '__getitem__' of a type (line 3064)
        getitem___18730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3064, 12), call_assignment_13753_18729, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_18733 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___18730, *[int_18731], **kwargs_18732)
        
        # Assigning a type to the variable 'call_assignment_13754' (line 3064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'call_assignment_13754', getitem___call_result_18733)
        
        # Assigning a Name to a Tuple (line 3064):
        
        # Assigning a Subscript to a Name (line 3064):
        
        # Obtaining the type of the subscript
        int_18734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3064, 12), 'int')
        # Getting the type of 'call_assignment_13754' (line 3064)
        call_assignment_13754_18735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'call_assignment_13754')
        # Obtaining the member '__getitem__' of a type (line 3064)
        getitem___18736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3064, 12), call_assignment_13754_18735, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3064)
        subscript_call_result_18737 = invoke(stypy.reporting.localization.Localization(__file__, 3064, 12), getitem___18736, int_18734)
        
        # Assigning a type to the variable 'tuple_var_assignment_13769' (line 3064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'tuple_var_assignment_13769', subscript_call_result_18737)
        
        # Assigning a Subscript to a Name (line 3064):
        
        # Obtaining the type of the subscript
        int_18738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3064, 12), 'int')
        # Getting the type of 'call_assignment_13754' (line 3064)
        call_assignment_13754_18739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'call_assignment_13754')
        # Obtaining the member '__getitem__' of a type (line 3064)
        getitem___18740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3064, 12), call_assignment_13754_18739, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3064)
        subscript_call_result_18741 = invoke(stypy.reporting.localization.Localization(__file__, 3064, 12), getitem___18740, int_18738)
        
        # Assigning a type to the variable 'tuple_var_assignment_13770' (line 3064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'tuple_var_assignment_13770', subscript_call_result_18741)
        
        # Assigning a Name to a Name (line 3064):
        # Getting the type of 'tuple_var_assignment_13769' (line 3064)
        tuple_var_assignment_13769_18742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'tuple_var_assignment_13769')
        # Assigning a type to the variable 'x1' (line 3064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3064, 13), 'x1', tuple_var_assignment_13769_18742)
        
        # Assigning a Name to a Name (line 3064):
        # Getting the type of 'tuple_var_assignment_13770' (line 3064)
        tuple_var_assignment_13770_18743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'tuple_var_assignment_13770')
        # Assigning a type to the variable 'y1' (line 3064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3064, 17), 'y1', tuple_var_assignment_13770_18743)
        
        # Assigning a Call to a Name (line 3064):
        
        # Assigning a Call to a Name (line 3064):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_18746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3064, 12), 'int')
        # Processing the call keyword arguments
        kwargs_18747 = {}
        # Getting the type of 'call_assignment_13753' (line 3064)
        call_assignment_13753_18744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'call_assignment_13753', False)
        # Obtaining the member '__getitem__' of a type (line 3064)
        getitem___18745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3064, 12), call_assignment_13753_18744, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_18748 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___18745, *[int_18746], **kwargs_18747)
        
        # Assigning a type to the variable 'call_assignment_13755' (line 3064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'call_assignment_13755', getitem___call_result_18748)
        
        # Assigning a Name to a Tuple (line 3064):
        
        # Assigning a Subscript to a Name (line 3064):
        
        # Obtaining the type of the subscript
        int_18749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3064, 12), 'int')
        # Getting the type of 'call_assignment_13755' (line 3064)
        call_assignment_13755_18750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'call_assignment_13755')
        # Obtaining the member '__getitem__' of a type (line 3064)
        getitem___18751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3064, 12), call_assignment_13755_18750, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3064)
        subscript_call_result_18752 = invoke(stypy.reporting.localization.Localization(__file__, 3064, 12), getitem___18751, int_18749)
        
        # Assigning a type to the variable 'tuple_var_assignment_13771' (line 3064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'tuple_var_assignment_13771', subscript_call_result_18752)
        
        # Assigning a Subscript to a Name (line 3064):
        
        # Obtaining the type of the subscript
        int_18753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3064, 12), 'int')
        # Getting the type of 'call_assignment_13755' (line 3064)
        call_assignment_13755_18754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'call_assignment_13755')
        # Obtaining the member '__getitem__' of a type (line 3064)
        getitem___18755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3064, 12), call_assignment_13755_18754, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3064)
        subscript_call_result_18756 = invoke(stypy.reporting.localization.Localization(__file__, 3064, 12), getitem___18755, int_18753)
        
        # Assigning a type to the variable 'tuple_var_assignment_13772' (line 3064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'tuple_var_assignment_13772', subscript_call_result_18756)
        
        # Assigning a Name to a Name (line 3064):
        # Getting the type of 'tuple_var_assignment_13771' (line 3064)
        tuple_var_assignment_13771_18757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'tuple_var_assignment_13771')
        # Assigning a type to the variable 'x2' (line 3064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3064, 23), 'x2', tuple_var_assignment_13771_18757)
        
        # Assigning a Name to a Name (line 3064):
        # Getting the type of 'tuple_var_assignment_13772' (line 3064)
        tuple_var_assignment_13772_18758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 12), 'tuple_var_assignment_13772')
        # Assigning a type to the variable 'y2' (line 3064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3064, 27), 'y2', tuple_var_assignment_13772_18758)
        
        
        # Getting the type of 'self' (line 3066)
        self_18759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 15), 'self')
        # Obtaining the member '_zoom_mode' of a type (line 3066)
        _zoom_mode_18760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3066, 15), self_18759, '_zoom_mode')
        unicode_18761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3066, 34), 'unicode', u'x')
        # Applying the binary operator '==' (line 3066)
        result_eq_18762 = python_operator(stypy.reporting.localization.Localization(__file__, 3066, 15), '==', _zoom_mode_18760, unicode_18761)
        
        # Testing the type of an if condition (line 3066)
        if_condition_18763 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3066, 12), result_eq_18762)
        # Assigning a type to the variable 'if_condition_18763' (line 3066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3066, 12), 'if_condition_18763', if_condition_18763)
        # SSA begins for if statement (line 3066)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 3067):
        
        # Assigning a Subscript to a Name (line 3067):
        
        # Assigning a Subscript to a Name (line 3067):
        
        # Obtaining the type of the subscript
        int_18764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3067, 16), 'int')
        # Getting the type of 'a' (line 3067)
        a_18765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3067, 25), 'a')
        # Obtaining the member 'bbox' of a type (line 3067)
        bbox_18766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3067, 25), a_18765, 'bbox')
        # Obtaining the member 'intervaly' of a type (line 3067)
        intervaly_18767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3067, 25), bbox_18766, 'intervaly')
        # Obtaining the member '__getitem__' of a type (line 3067)
        getitem___18768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3067, 16), intervaly_18767, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3067)
        subscript_call_result_18769 = invoke(stypy.reporting.localization.Localization(__file__, 3067, 16), getitem___18768, int_18764)
        
        # Assigning a type to the variable 'tuple_var_assignment_13756' (line 3067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3067, 16), 'tuple_var_assignment_13756', subscript_call_result_18769)
        
        # Assigning a Subscript to a Name (line 3067):
        
        # Assigning a Subscript to a Name (line 3067):
        
        # Obtaining the type of the subscript
        int_18770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3067, 16), 'int')
        # Getting the type of 'a' (line 3067)
        a_18771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3067, 25), 'a')
        # Obtaining the member 'bbox' of a type (line 3067)
        bbox_18772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3067, 25), a_18771, 'bbox')
        # Obtaining the member 'intervaly' of a type (line 3067)
        intervaly_18773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3067, 25), bbox_18772, 'intervaly')
        # Obtaining the member '__getitem__' of a type (line 3067)
        getitem___18774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3067, 16), intervaly_18773, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3067)
        subscript_call_result_18775 = invoke(stypy.reporting.localization.Localization(__file__, 3067, 16), getitem___18774, int_18770)
        
        # Assigning a type to the variable 'tuple_var_assignment_13757' (line 3067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3067, 16), 'tuple_var_assignment_13757', subscript_call_result_18775)
        
        # Assigning a Name to a Name (line 3067):
        
        # Assigning a Name to a Name (line 3067):
        # Getting the type of 'tuple_var_assignment_13756' (line 3067)
        tuple_var_assignment_13756_18776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3067, 16), 'tuple_var_assignment_13756')
        # Assigning a type to the variable 'y1' (line 3067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3067, 16), 'y1', tuple_var_assignment_13756_18776)
        
        # Assigning a Name to a Name (line 3067):
        
        # Assigning a Name to a Name (line 3067):
        # Getting the type of 'tuple_var_assignment_13757' (line 3067)
        tuple_var_assignment_13757_18777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3067, 16), 'tuple_var_assignment_13757')
        # Assigning a type to the variable 'y2' (line 3067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3067, 20), 'y2', tuple_var_assignment_13757_18777)
        # SSA branch for the else part of an if statement (line 3066)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 3068)
        self_18778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3068, 17), 'self')
        # Obtaining the member '_zoom_mode' of a type (line 3068)
        _zoom_mode_18779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3068, 17), self_18778, '_zoom_mode')
        unicode_18780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3068, 36), 'unicode', u'y')
        # Applying the binary operator '==' (line 3068)
        result_eq_18781 = python_operator(stypy.reporting.localization.Localization(__file__, 3068, 17), '==', _zoom_mode_18779, unicode_18780)
        
        # Testing the type of an if condition (line 3068)
        if_condition_18782 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3068, 17), result_eq_18781)
        # Assigning a type to the variable 'if_condition_18782' (line 3068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3068, 17), 'if_condition_18782', if_condition_18782)
        # SSA begins for if statement (line 3068)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 3069):
        
        # Assigning a Subscript to a Name (line 3069):
        
        # Assigning a Subscript to a Name (line 3069):
        
        # Obtaining the type of the subscript
        int_18783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3069, 16), 'int')
        # Getting the type of 'a' (line 3069)
        a_18784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3069, 25), 'a')
        # Obtaining the member 'bbox' of a type (line 3069)
        bbox_18785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3069, 25), a_18784, 'bbox')
        # Obtaining the member 'intervalx' of a type (line 3069)
        intervalx_18786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3069, 25), bbox_18785, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 3069)
        getitem___18787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3069, 16), intervalx_18786, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3069)
        subscript_call_result_18788 = invoke(stypy.reporting.localization.Localization(__file__, 3069, 16), getitem___18787, int_18783)
        
        # Assigning a type to the variable 'tuple_var_assignment_13758' (line 3069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3069, 16), 'tuple_var_assignment_13758', subscript_call_result_18788)
        
        # Assigning a Subscript to a Name (line 3069):
        
        # Assigning a Subscript to a Name (line 3069):
        
        # Obtaining the type of the subscript
        int_18789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3069, 16), 'int')
        # Getting the type of 'a' (line 3069)
        a_18790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3069, 25), 'a')
        # Obtaining the member 'bbox' of a type (line 3069)
        bbox_18791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3069, 25), a_18790, 'bbox')
        # Obtaining the member 'intervalx' of a type (line 3069)
        intervalx_18792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3069, 25), bbox_18791, 'intervalx')
        # Obtaining the member '__getitem__' of a type (line 3069)
        getitem___18793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3069, 16), intervalx_18792, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3069)
        subscript_call_result_18794 = invoke(stypy.reporting.localization.Localization(__file__, 3069, 16), getitem___18793, int_18789)
        
        # Assigning a type to the variable 'tuple_var_assignment_13759' (line 3069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3069, 16), 'tuple_var_assignment_13759', subscript_call_result_18794)
        
        # Assigning a Name to a Name (line 3069):
        
        # Assigning a Name to a Name (line 3069):
        # Getting the type of 'tuple_var_assignment_13758' (line 3069)
        tuple_var_assignment_13758_18795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3069, 16), 'tuple_var_assignment_13758')
        # Assigning a type to the variable 'x1' (line 3069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3069, 16), 'x1', tuple_var_assignment_13758_18795)
        
        # Assigning a Name to a Name (line 3069):
        
        # Assigning a Name to a Name (line 3069):
        # Getting the type of 'tuple_var_assignment_13759' (line 3069)
        tuple_var_assignment_13759_18796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3069, 16), 'tuple_var_assignment_13759')
        # Assigning a type to the variable 'x2' (line 3069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3069, 20), 'x2', tuple_var_assignment_13759_18796)
        # SSA join for if statement (line 3068)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3066)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw_rubberband(...): (line 3070)
        # Processing the call arguments (line 3070)
        # Getting the type of 'event' (line 3070)
        event_18799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 33), 'event', False)
        # Getting the type of 'x1' (line 3070)
        x1_18800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 40), 'x1', False)
        # Getting the type of 'y1' (line 3070)
        y1_18801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 44), 'y1', False)
        # Getting the type of 'x2' (line 3070)
        x2_18802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 48), 'x2', False)
        # Getting the type of 'y2' (line 3070)
        y2_18803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 52), 'y2', False)
        # Processing the call keyword arguments (line 3070)
        kwargs_18804 = {}
        # Getting the type of 'self' (line 3070)
        self_18797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 12), 'self', False)
        # Obtaining the member 'draw_rubberband' of a type (line 3070)
        draw_rubberband_18798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3070, 12), self_18797, 'draw_rubberband')
        # Calling draw_rubberband(args, kwargs) (line 3070)
        draw_rubberband_call_result_18805 = invoke(stypy.reporting.localization.Localization(__file__, 3070, 12), draw_rubberband_18798, *[event_18799, x1_18800, y1_18801, x2_18802, y2_18803], **kwargs_18804)
        
        # SSA join for if statement (line 3061)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'drag_zoom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'drag_zoom' in the type store
        # Getting the type of 'stypy_return_type' (line 3059)
        stypy_return_type_18806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3059, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18806)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'drag_zoom'
        return stypy_return_type_18806


    @norecursion
    def release_zoom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'release_zoom'
        module_type_store = module_type_store.open_function_context('release_zoom', 3072, 4, False)
        # Assigning a type to the variable 'self' (line 3073)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3073, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.release_zoom.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.release_zoom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.release_zoom.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.release_zoom.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.release_zoom')
        NavigationToolbar2.release_zoom.__dict__.__setitem__('stypy_param_names_list', ['event'])
        NavigationToolbar2.release_zoom.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.release_zoom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.release_zoom.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.release_zoom.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.release_zoom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.release_zoom.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.release_zoom', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'release_zoom', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'release_zoom(...)' code ##################

        unicode_18807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3073, 8), 'unicode', u'Callback for mouse button release in zoom to rect mode.')
        
        # Getting the type of 'self' (line 3074)
        self_18808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3074, 23), 'self')
        # Obtaining the member '_ids_zoom' of a type (line 3074)
        _ids_zoom_18809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3074, 23), self_18808, '_ids_zoom')
        # Testing the type of a for loop iterable (line 3074)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3074, 8), _ids_zoom_18809)
        # Getting the type of the for loop variable (line 3074)
        for_loop_var_18810 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3074, 8), _ids_zoom_18809)
        # Assigning a type to the variable 'zoom_id' (line 3074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3074, 8), 'zoom_id', for_loop_var_18810)
        # SSA begins for a for statement (line 3074)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to mpl_disconnect(...): (line 3075)
        # Processing the call arguments (line 3075)
        # Getting the type of 'zoom_id' (line 3075)
        zoom_id_18814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3075, 39), 'zoom_id', False)
        # Processing the call keyword arguments (line 3075)
        kwargs_18815 = {}
        # Getting the type of 'self' (line 3075)
        self_18811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3075, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3075)
        canvas_18812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3075, 12), self_18811, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 3075)
        mpl_disconnect_18813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3075, 12), canvas_18812, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 3075)
        mpl_disconnect_call_result_18816 = invoke(stypy.reporting.localization.Localization(__file__, 3075, 12), mpl_disconnect_18813, *[zoom_id_18814], **kwargs_18815)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Attribute (line 3076):
        
        # Assigning a List to a Attribute (line 3076):
        
        # Assigning a List to a Attribute (line 3076):
        
        # Obtaining an instance of the builtin type 'list' (line 3076)
        list_18817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3076, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3076)
        
        # Getting the type of 'self' (line 3076)
        self_18818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 8), 'self')
        # Setting the type of the member '_ids_zoom' of a type (line 3076)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3076, 8), self_18818, '_ids_zoom', list_18817)
        
        # Call to remove_rubberband(...): (line 3078)
        # Processing the call keyword arguments (line 3078)
        kwargs_18821 = {}
        # Getting the type of 'self' (line 3078)
        self_18819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3078, 8), 'self', False)
        # Obtaining the member 'remove_rubberband' of a type (line 3078)
        remove_rubberband_18820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3078, 8), self_18819, 'remove_rubberband')
        # Calling remove_rubberband(args, kwargs) (line 3078)
        remove_rubberband_call_result_18822 = invoke(stypy.reporting.localization.Localization(__file__, 3078, 8), remove_rubberband_18820, *[], **kwargs_18821)
        
        
        
        # Getting the type of 'self' (line 3080)
        self_18823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 15), 'self')
        # Obtaining the member '_xypress' of a type (line 3080)
        _xypress_18824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3080, 15), self_18823, '_xypress')
        # Applying the 'not' unary operator (line 3080)
        result_not__18825 = python_operator(stypy.reporting.localization.Localization(__file__, 3080, 11), 'not', _xypress_18824)
        
        # Testing the type of an if condition (line 3080)
        if_condition_18826 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3080, 8), result_not__18825)
        # Assigning a type to the variable 'if_condition_18826' (line 3080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3080, 8), 'if_condition_18826', if_condition_18826)
        # SSA begins for if statement (line 3080)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 3081)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3081, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 3080)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Name (line 3083):
        
        # Assigning a List to a Name (line 3083):
        
        # Assigning a List to a Name (line 3083):
        
        # Obtaining an instance of the builtin type 'list' (line 3083)
        list_18827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3083, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3083)
        
        # Assigning a type to the variable 'last_a' (line 3083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3083, 8), 'last_a', list_18827)
        
        # Getting the type of 'self' (line 3085)
        self_18828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3085, 27), 'self')
        # Obtaining the member '_xypress' of a type (line 3085)
        _xypress_18829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3085, 27), self_18828, '_xypress')
        # Testing the type of a for loop iterable (line 3085)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3085, 8), _xypress_18829)
        # Getting the type of the for loop variable (line 3085)
        for_loop_var_18830 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3085, 8), _xypress_18829)
        # Assigning a type to the variable 'cur_xypress' (line 3085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3085, 8), 'cur_xypress', for_loop_var_18830)
        # SSA begins for a for statement (line 3085)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Tuple to a Tuple (line 3086):
        
        # Assigning a Attribute to a Name (line 3086):
        
        # Assigning a Attribute to a Name (line 3086):
        # Getting the type of 'event' (line 3086)
        event_18831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3086, 19), 'event')
        # Obtaining the member 'x' of a type (line 3086)
        x_18832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3086, 19), event_18831, 'x')
        # Assigning a type to the variable 'tuple_assignment_13760' (line 3086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3086, 12), 'tuple_assignment_13760', x_18832)
        
        # Assigning a Attribute to a Name (line 3086):
        
        # Assigning a Attribute to a Name (line 3086):
        # Getting the type of 'event' (line 3086)
        event_18833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3086, 28), 'event')
        # Obtaining the member 'y' of a type (line 3086)
        y_18834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3086, 28), event_18833, 'y')
        # Assigning a type to the variable 'tuple_assignment_13761' (line 3086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3086, 12), 'tuple_assignment_13761', y_18834)
        
        # Assigning a Name to a Name (line 3086):
        
        # Assigning a Name to a Name (line 3086):
        # Getting the type of 'tuple_assignment_13760' (line 3086)
        tuple_assignment_13760_18835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3086, 12), 'tuple_assignment_13760')
        # Assigning a type to the variable 'x' (line 3086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3086, 12), 'x', tuple_assignment_13760_18835)
        
        # Assigning a Name to a Name (line 3086):
        
        # Assigning a Name to a Name (line 3086):
        # Getting the type of 'tuple_assignment_13761' (line 3086)
        tuple_assignment_13761_18836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3086, 12), 'tuple_assignment_13761')
        # Assigning a type to the variable 'y' (line 3086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3086, 15), 'y', tuple_assignment_13761_18836)
        
        # Assigning a Name to a Tuple (line 3087):
        
        # Assigning a Subscript to a Name (line 3087):
        
        # Assigning a Subscript to a Name (line 3087):
        
        # Obtaining the type of the subscript
        int_18837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3087, 12), 'int')
        # Getting the type of 'cur_xypress' (line 3087)
        cur_xypress_18838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 41), 'cur_xypress')
        # Obtaining the member '__getitem__' of a type (line 3087)
        getitem___18839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3087, 12), cur_xypress_18838, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3087)
        subscript_call_result_18840 = invoke(stypy.reporting.localization.Localization(__file__, 3087, 12), getitem___18839, int_18837)
        
        # Assigning a type to the variable 'tuple_var_assignment_13762' (line 3087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3087, 12), 'tuple_var_assignment_13762', subscript_call_result_18840)
        
        # Assigning a Subscript to a Name (line 3087):
        
        # Assigning a Subscript to a Name (line 3087):
        
        # Obtaining the type of the subscript
        int_18841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3087, 12), 'int')
        # Getting the type of 'cur_xypress' (line 3087)
        cur_xypress_18842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 41), 'cur_xypress')
        # Obtaining the member '__getitem__' of a type (line 3087)
        getitem___18843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3087, 12), cur_xypress_18842, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3087)
        subscript_call_result_18844 = invoke(stypy.reporting.localization.Localization(__file__, 3087, 12), getitem___18843, int_18841)
        
        # Assigning a type to the variable 'tuple_var_assignment_13763' (line 3087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3087, 12), 'tuple_var_assignment_13763', subscript_call_result_18844)
        
        # Assigning a Subscript to a Name (line 3087):
        
        # Assigning a Subscript to a Name (line 3087):
        
        # Obtaining the type of the subscript
        int_18845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3087, 12), 'int')
        # Getting the type of 'cur_xypress' (line 3087)
        cur_xypress_18846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 41), 'cur_xypress')
        # Obtaining the member '__getitem__' of a type (line 3087)
        getitem___18847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3087, 12), cur_xypress_18846, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3087)
        subscript_call_result_18848 = invoke(stypy.reporting.localization.Localization(__file__, 3087, 12), getitem___18847, int_18845)
        
        # Assigning a type to the variable 'tuple_var_assignment_13764' (line 3087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3087, 12), 'tuple_var_assignment_13764', subscript_call_result_18848)
        
        # Assigning a Subscript to a Name (line 3087):
        
        # Assigning a Subscript to a Name (line 3087):
        
        # Obtaining the type of the subscript
        int_18849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3087, 12), 'int')
        # Getting the type of 'cur_xypress' (line 3087)
        cur_xypress_18850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 41), 'cur_xypress')
        # Obtaining the member '__getitem__' of a type (line 3087)
        getitem___18851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3087, 12), cur_xypress_18850, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3087)
        subscript_call_result_18852 = invoke(stypy.reporting.localization.Localization(__file__, 3087, 12), getitem___18851, int_18849)
        
        # Assigning a type to the variable 'tuple_var_assignment_13765' (line 3087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3087, 12), 'tuple_var_assignment_13765', subscript_call_result_18852)
        
        # Assigning a Subscript to a Name (line 3087):
        
        # Assigning a Subscript to a Name (line 3087):
        
        # Obtaining the type of the subscript
        int_18853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3087, 12), 'int')
        # Getting the type of 'cur_xypress' (line 3087)
        cur_xypress_18854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 41), 'cur_xypress')
        # Obtaining the member '__getitem__' of a type (line 3087)
        getitem___18855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3087, 12), cur_xypress_18854, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3087)
        subscript_call_result_18856 = invoke(stypy.reporting.localization.Localization(__file__, 3087, 12), getitem___18855, int_18853)
        
        # Assigning a type to the variable 'tuple_var_assignment_13766' (line 3087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3087, 12), 'tuple_var_assignment_13766', subscript_call_result_18856)
        
        # Assigning a Name to a Name (line 3087):
        
        # Assigning a Name to a Name (line 3087):
        # Getting the type of 'tuple_var_assignment_13762' (line 3087)
        tuple_var_assignment_13762_18857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 12), 'tuple_var_assignment_13762')
        # Assigning a type to the variable 'lastx' (line 3087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3087, 12), 'lastx', tuple_var_assignment_13762_18857)
        
        # Assigning a Name to a Name (line 3087):
        
        # Assigning a Name to a Name (line 3087):
        # Getting the type of 'tuple_var_assignment_13763' (line 3087)
        tuple_var_assignment_13763_18858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 12), 'tuple_var_assignment_13763')
        # Assigning a type to the variable 'lasty' (line 3087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3087, 19), 'lasty', tuple_var_assignment_13763_18858)
        
        # Assigning a Name to a Name (line 3087):
        
        # Assigning a Name to a Name (line 3087):
        # Getting the type of 'tuple_var_assignment_13764' (line 3087)
        tuple_var_assignment_13764_18859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 12), 'tuple_var_assignment_13764')
        # Assigning a type to the variable 'a' (line 3087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3087, 26), 'a', tuple_var_assignment_13764_18859)
        
        # Assigning a Name to a Name (line 3087):
        
        # Assigning a Name to a Name (line 3087):
        # Getting the type of 'tuple_var_assignment_13765' (line 3087)
        tuple_var_assignment_13765_18860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 12), 'tuple_var_assignment_13765')
        # Assigning a type to the variable 'ind' (line 3087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3087, 29), 'ind', tuple_var_assignment_13765_18860)
        
        # Assigning a Name to a Name (line 3087):
        
        # Assigning a Name to a Name (line 3087):
        # Getting the type of 'tuple_var_assignment_13766' (line 3087)
        tuple_var_assignment_13766_18861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 12), 'tuple_var_assignment_13766')
        # Assigning a type to the variable 'view' (line 3087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3087, 34), 'view', tuple_var_assignment_13766_18861)
        
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        
        # Call to abs(...): (line 3091)
        # Processing the call arguments (line 3091)
        # Getting the type of 'x' (line 3091)
        x_18863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 21), 'x', False)
        # Getting the type of 'lastx' (line 3091)
        lastx_18864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 25), 'lastx', False)
        # Applying the binary operator '-' (line 3091)
        result_sub_18865 = python_operator(stypy.reporting.localization.Localization(__file__, 3091, 21), '-', x_18863, lastx_18864)
        
        # Processing the call keyword arguments (line 3091)
        kwargs_18866 = {}
        # Getting the type of 'abs' (line 3091)
        abs_18862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 17), 'abs', False)
        # Calling abs(args, kwargs) (line 3091)
        abs_call_result_18867 = invoke(stypy.reporting.localization.Localization(__file__, 3091, 17), abs_18862, *[result_sub_18865], **kwargs_18866)
        
        int_18868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 34), 'int')
        # Applying the binary operator '<' (line 3091)
        result_lt_18869 = python_operator(stypy.reporting.localization.Localization(__file__, 3091, 17), '<', abs_call_result_18867, int_18868)
        
        
        # Getting the type of 'self' (line 3091)
        self_18870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 40), 'self')
        # Obtaining the member '_zoom_mode' of a type (line 3091)
        _zoom_mode_18871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3091, 40), self_18870, '_zoom_mode')
        unicode_18872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 57), 'unicode', u'y')
        # Applying the binary operator '!=' (line 3091)
        result_ne_18873 = python_operator(stypy.reporting.localization.Localization(__file__, 3091, 40), '!=', _zoom_mode_18871, unicode_18872)
        
        # Applying the binary operator 'and' (line 3091)
        result_and_keyword_18874 = python_operator(stypy.reporting.localization.Localization(__file__, 3091, 17), 'and', result_lt_18869, result_ne_18873)
        
        
        # Evaluating a boolean operation
        
        
        # Call to abs(...): (line 3092)
        # Processing the call arguments (line 3092)
        # Getting the type of 'y' (line 3092)
        y_18876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 25), 'y', False)
        # Getting the type of 'lasty' (line 3092)
        lasty_18877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 29), 'lasty', False)
        # Applying the binary operator '-' (line 3092)
        result_sub_18878 = python_operator(stypy.reporting.localization.Localization(__file__, 3092, 25), '-', y_18876, lasty_18877)
        
        # Processing the call keyword arguments (line 3092)
        kwargs_18879 = {}
        # Getting the type of 'abs' (line 3092)
        abs_18875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 21), 'abs', False)
        # Calling abs(args, kwargs) (line 3092)
        abs_call_result_18880 = invoke(stypy.reporting.localization.Localization(__file__, 3092, 21), abs_18875, *[result_sub_18878], **kwargs_18879)
        
        int_18881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3092, 38), 'int')
        # Applying the binary operator '<' (line 3092)
        result_lt_18882 = python_operator(stypy.reporting.localization.Localization(__file__, 3092, 21), '<', abs_call_result_18880, int_18881)
        
        
        # Getting the type of 'self' (line 3092)
        self_18883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 44), 'self')
        # Obtaining the member '_zoom_mode' of a type (line 3092)
        _zoom_mode_18884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3092, 44), self_18883, '_zoom_mode')
        unicode_18885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3092, 61), 'unicode', u'x')
        # Applying the binary operator '!=' (line 3092)
        result_ne_18886 = python_operator(stypy.reporting.localization.Localization(__file__, 3092, 44), '!=', _zoom_mode_18884, unicode_18885)
        
        # Applying the binary operator 'and' (line 3092)
        result_and_keyword_18887 = python_operator(stypy.reporting.localization.Localization(__file__, 3092, 21), 'and', result_lt_18882, result_ne_18886)
        
        # Applying the binary operator 'or' (line 3091)
        result_or_keyword_18888 = python_operator(stypy.reporting.localization.Localization(__file__, 3091, 16), 'or', result_and_keyword_18874, result_and_keyword_18887)
        
        # Testing the type of an if condition (line 3091)
        if_condition_18889 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3091, 12), result_or_keyword_18888)
        # Assigning a type to the variable 'if_condition_18889' (line 3091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3091, 12), 'if_condition_18889', if_condition_18889)
        # SSA begins for if statement (line 3091)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 3093):
        
        # Assigning a Name to a Attribute (line 3093):
        
        # Assigning a Name to a Attribute (line 3093):
        # Getting the type of 'None' (line 3093)
        None_18890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3093, 32), 'None')
        # Getting the type of 'self' (line 3093)
        self_18891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3093, 16), 'self')
        # Setting the type of the member '_xypress' of a type (line 3093)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3093, 16), self_18891, '_xypress', None_18890)
        
        # Call to release(...): (line 3094)
        # Processing the call arguments (line 3094)
        # Getting the type of 'event' (line 3094)
        event_18894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3094, 29), 'event', False)
        # Processing the call keyword arguments (line 3094)
        kwargs_18895 = {}
        # Getting the type of 'self' (line 3094)
        self_18892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3094, 16), 'self', False)
        # Obtaining the member 'release' of a type (line 3094)
        release_18893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3094, 16), self_18892, 'release')
        # Calling release(args, kwargs) (line 3094)
        release_call_result_18896 = invoke(stypy.reporting.localization.Localization(__file__, 3094, 16), release_18893, *[event_18894], **kwargs_18895)
        
        
        # Call to draw(...): (line 3095)
        # Processing the call keyword arguments (line 3095)
        kwargs_18899 = {}
        # Getting the type of 'self' (line 3095)
        self_18897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 16), 'self', False)
        # Obtaining the member 'draw' of a type (line 3095)
        draw_18898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3095, 16), self_18897, 'draw')
        # Calling draw(args, kwargs) (line 3095)
        draw_call_result_18900 = invoke(stypy.reporting.localization.Localization(__file__, 3095, 16), draw_18898, *[], **kwargs_18899)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3096, 16), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 3091)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 3099):
        
        # Assigning a Name to a Name (line 3099):
        
        # Assigning a Name to a Name (line 3099):
        # Getting the type of 'False' (line 3099)
        False_18901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 27), 'False')
        # Assigning a type to the variable 'tuple_assignment_13767' (line 3099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3099, 12), 'tuple_assignment_13767', False_18901)
        
        # Assigning a Name to a Name (line 3099):
        
        # Assigning a Name to a Name (line 3099):
        # Getting the type of 'False' (line 3099)
        False_18902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 34), 'False')
        # Assigning a type to the variable 'tuple_assignment_13768' (line 3099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3099, 12), 'tuple_assignment_13768', False_18902)
        
        # Assigning a Name to a Name (line 3099):
        
        # Assigning a Name to a Name (line 3099):
        # Getting the type of 'tuple_assignment_13767' (line 3099)
        tuple_assignment_13767_18903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 12), 'tuple_assignment_13767')
        # Assigning a type to the variable 'twinx' (line 3099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3099, 12), 'twinx', tuple_assignment_13767_18903)
        
        # Assigning a Name to a Name (line 3099):
        
        # Assigning a Name to a Name (line 3099):
        # Getting the type of 'tuple_assignment_13768' (line 3099)
        tuple_assignment_13768_18904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 12), 'tuple_assignment_13768')
        # Assigning a type to the variable 'twiny' (line 3099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3099, 19), 'twiny', tuple_assignment_13768_18904)
        
        # Getting the type of 'last_a' (line 3100)
        last_a_18905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 15), 'last_a')
        # Testing the type of an if condition (line 3100)
        if_condition_18906 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3100, 12), last_a_18905)
        # Assigning a type to the variable 'if_condition_18906' (line 3100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3100, 12), 'if_condition_18906', if_condition_18906)
        # SSA begins for if statement (line 3100)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'last_a' (line 3101)
        last_a_18907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3101, 26), 'last_a')
        # Testing the type of a for loop iterable (line 3101)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3101, 16), last_a_18907)
        # Getting the type of the for loop variable (line 3101)
        for_loop_var_18908 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3101, 16), last_a_18907)
        # Assigning a type to the variable 'la' (line 3101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3101, 16), 'la', for_loop_var_18908)
        # SSA begins for a for statement (line 3101)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to joined(...): (line 3102)
        # Processing the call arguments (line 3102)
        # Getting the type of 'a' (line 3102)
        a_18914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3102, 52), 'a', False)
        # Getting the type of 'la' (line 3102)
        la_18915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3102, 55), 'la', False)
        # Processing the call keyword arguments (line 3102)
        kwargs_18916 = {}
        
        # Call to get_shared_x_axes(...): (line 3102)
        # Processing the call keyword arguments (line 3102)
        kwargs_18911 = {}
        # Getting the type of 'a' (line 3102)
        a_18909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3102, 23), 'a', False)
        # Obtaining the member 'get_shared_x_axes' of a type (line 3102)
        get_shared_x_axes_18910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3102, 23), a_18909, 'get_shared_x_axes')
        # Calling get_shared_x_axes(args, kwargs) (line 3102)
        get_shared_x_axes_call_result_18912 = invoke(stypy.reporting.localization.Localization(__file__, 3102, 23), get_shared_x_axes_18910, *[], **kwargs_18911)
        
        # Obtaining the member 'joined' of a type (line 3102)
        joined_18913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3102, 23), get_shared_x_axes_call_result_18912, 'joined')
        # Calling joined(args, kwargs) (line 3102)
        joined_call_result_18917 = invoke(stypy.reporting.localization.Localization(__file__, 3102, 23), joined_18913, *[a_18914, la_18915], **kwargs_18916)
        
        # Testing the type of an if condition (line 3102)
        if_condition_18918 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3102, 20), joined_call_result_18917)
        # Assigning a type to the variable 'if_condition_18918' (line 3102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3102, 20), 'if_condition_18918', if_condition_18918)
        # SSA begins for if statement (line 3102)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3103):
        
        # Assigning a Name to a Name (line 3103):
        
        # Assigning a Name to a Name (line 3103):
        # Getting the type of 'True' (line 3103)
        True_18919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 32), 'True')
        # Assigning a type to the variable 'twinx' (line 3103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3103, 24), 'twinx', True_18919)
        # SSA join for if statement (line 3102)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to joined(...): (line 3104)
        # Processing the call arguments (line 3104)
        # Getting the type of 'a' (line 3104)
        a_18925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3104, 52), 'a', False)
        # Getting the type of 'la' (line 3104)
        la_18926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3104, 55), 'la', False)
        # Processing the call keyword arguments (line 3104)
        kwargs_18927 = {}
        
        # Call to get_shared_y_axes(...): (line 3104)
        # Processing the call keyword arguments (line 3104)
        kwargs_18922 = {}
        # Getting the type of 'a' (line 3104)
        a_18920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3104, 23), 'a', False)
        # Obtaining the member 'get_shared_y_axes' of a type (line 3104)
        get_shared_y_axes_18921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3104, 23), a_18920, 'get_shared_y_axes')
        # Calling get_shared_y_axes(args, kwargs) (line 3104)
        get_shared_y_axes_call_result_18923 = invoke(stypy.reporting.localization.Localization(__file__, 3104, 23), get_shared_y_axes_18921, *[], **kwargs_18922)
        
        # Obtaining the member 'joined' of a type (line 3104)
        joined_18924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3104, 23), get_shared_y_axes_call_result_18923, 'joined')
        # Calling joined(args, kwargs) (line 3104)
        joined_call_result_18928 = invoke(stypy.reporting.localization.Localization(__file__, 3104, 23), joined_18924, *[a_18925, la_18926], **kwargs_18927)
        
        # Testing the type of an if condition (line 3104)
        if_condition_18929 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3104, 20), joined_call_result_18928)
        # Assigning a type to the variable 'if_condition_18929' (line 3104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3104, 20), 'if_condition_18929', if_condition_18929)
        # SSA begins for if statement (line 3104)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3105):
        
        # Assigning a Name to a Name (line 3105):
        
        # Assigning a Name to a Name (line 3105):
        # Getting the type of 'True' (line 3105)
        True_18930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 32), 'True')
        # Assigning a type to the variable 'twiny' (line 3105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3105, 24), 'twiny', True_18930)
        # SSA join for if statement (line 3104)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3100)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 3106)
        # Processing the call arguments (line 3106)
        # Getting the type of 'a' (line 3106)
        a_18933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3106, 26), 'a', False)
        # Processing the call keyword arguments (line 3106)
        kwargs_18934 = {}
        # Getting the type of 'last_a' (line 3106)
        last_a_18931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3106, 12), 'last_a', False)
        # Obtaining the member 'append' of a type (line 3106)
        append_18932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3106, 12), last_a_18931, 'append')
        # Calling append(args, kwargs) (line 3106)
        append_call_result_18935 = invoke(stypy.reporting.localization.Localization(__file__, 3106, 12), append_18932, *[a_18933], **kwargs_18934)
        
        
        
        # Getting the type of 'self' (line 3108)
        self_18936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3108, 15), 'self')
        # Obtaining the member '_button_pressed' of a type (line 3108)
        _button_pressed_18937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3108, 15), self_18936, '_button_pressed')
        int_18938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3108, 39), 'int')
        # Applying the binary operator '==' (line 3108)
        result_eq_18939 = python_operator(stypy.reporting.localization.Localization(__file__, 3108, 15), '==', _button_pressed_18937, int_18938)
        
        # Testing the type of an if condition (line 3108)
        if_condition_18940 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3108, 12), result_eq_18939)
        # Assigning a type to the variable 'if_condition_18940' (line 3108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3108, 12), 'if_condition_18940', if_condition_18940)
        # SSA begins for if statement (line 3108)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 3109):
        
        # Assigning a Str to a Name (line 3109):
        
        # Assigning a Str to a Name (line 3109):
        unicode_18941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3109, 28), 'unicode', u'in')
        # Assigning a type to the variable 'direction' (line 3109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3109, 16), 'direction', unicode_18941)
        # SSA branch for the else part of an if statement (line 3108)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 3110)
        self_18942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 17), 'self')
        # Obtaining the member '_button_pressed' of a type (line 3110)
        _button_pressed_18943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3110, 17), self_18942, '_button_pressed')
        int_18944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3110, 41), 'int')
        # Applying the binary operator '==' (line 3110)
        result_eq_18945 = python_operator(stypy.reporting.localization.Localization(__file__, 3110, 17), '==', _button_pressed_18943, int_18944)
        
        # Testing the type of an if condition (line 3110)
        if_condition_18946 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3110, 17), result_eq_18945)
        # Assigning a type to the variable 'if_condition_18946' (line 3110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3110, 17), 'if_condition_18946', if_condition_18946)
        # SSA begins for if statement (line 3110)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 3111):
        
        # Assigning a Str to a Name (line 3111):
        
        # Assigning a Str to a Name (line 3111):
        unicode_18947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3111, 28), 'unicode', u'out')
        # Assigning a type to the variable 'direction' (line 3111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3111, 16), 'direction', unicode_18947)
        # SSA branch for the else part of an if statement (line 3110)
        module_type_store.open_ssa_branch('else')
        # SSA join for if statement (line 3110)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3108)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _set_view_from_bbox(...): (line 3115)
        # Processing the call arguments (line 3115)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3115)
        tuple_18950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3115, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3115)
        # Adding element type (line 3115)
        # Getting the type of 'lastx' (line 3115)
        lastx_18951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 35), 'lastx', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3115, 35), tuple_18950, lastx_18951)
        # Adding element type (line 3115)
        # Getting the type of 'lasty' (line 3115)
        lasty_18952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 42), 'lasty', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3115, 35), tuple_18950, lasty_18952)
        # Adding element type (line 3115)
        # Getting the type of 'x' (line 3115)
        x_18953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 49), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3115, 35), tuple_18950, x_18953)
        # Adding element type (line 3115)
        # Getting the type of 'y' (line 3115)
        y_18954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 52), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3115, 35), tuple_18950, y_18954)
        
        # Getting the type of 'direction' (line 3115)
        direction_18955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 56), 'direction', False)
        # Getting the type of 'self' (line 3116)
        self_18956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 34), 'self', False)
        # Obtaining the member '_zoom_mode' of a type (line 3116)
        _zoom_mode_18957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3116, 34), self_18956, '_zoom_mode')
        # Getting the type of 'twinx' (line 3116)
        twinx_18958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 51), 'twinx', False)
        # Getting the type of 'twiny' (line 3116)
        twiny_18959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 58), 'twiny', False)
        # Processing the call keyword arguments (line 3115)
        kwargs_18960 = {}
        # Getting the type of 'a' (line 3115)
        a_18948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 12), 'a', False)
        # Obtaining the member '_set_view_from_bbox' of a type (line 3115)
        _set_view_from_bbox_18949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3115, 12), a_18948, '_set_view_from_bbox')
        # Calling _set_view_from_bbox(args, kwargs) (line 3115)
        _set_view_from_bbox_call_result_18961 = invoke(stypy.reporting.localization.Localization(__file__, 3115, 12), _set_view_from_bbox_18949, *[tuple_18950, direction_18955, _zoom_mode_18957, twinx_18958, twiny_18959], **kwargs_18960)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw(...): (line 3118)
        # Processing the call keyword arguments (line 3118)
        kwargs_18964 = {}
        # Getting the type of 'self' (line 3118)
        self_18962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 8), 'self', False)
        # Obtaining the member 'draw' of a type (line 3118)
        draw_18963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3118, 8), self_18962, 'draw')
        # Calling draw(args, kwargs) (line 3118)
        draw_call_result_18965 = invoke(stypy.reporting.localization.Localization(__file__, 3118, 8), draw_18963, *[], **kwargs_18964)
        
        
        # Assigning a Name to a Attribute (line 3119):
        
        # Assigning a Name to a Attribute (line 3119):
        
        # Assigning a Name to a Attribute (line 3119):
        # Getting the type of 'None' (line 3119)
        None_18966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 24), 'None')
        # Getting the type of 'self' (line 3119)
        self_18967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 8), 'self')
        # Setting the type of the member '_xypress' of a type (line 3119)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3119, 8), self_18967, '_xypress', None_18966)
        
        # Assigning a Name to a Attribute (line 3120):
        
        # Assigning a Name to a Attribute (line 3120):
        
        # Assigning a Name to a Attribute (line 3120):
        # Getting the type of 'None' (line 3120)
        None_18968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 31), 'None')
        # Getting the type of 'self' (line 3120)
        self_18969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 8), 'self')
        # Setting the type of the member '_button_pressed' of a type (line 3120)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3120, 8), self_18969, '_button_pressed', None_18968)
        
        # Assigning a Name to a Attribute (line 3122):
        
        # Assigning a Name to a Attribute (line 3122):
        
        # Assigning a Name to a Attribute (line 3122):
        # Getting the type of 'None' (line 3122)
        None_18970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 26), 'None')
        # Getting the type of 'self' (line 3122)
        self_18971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 8), 'self')
        # Setting the type of the member '_zoom_mode' of a type (line 3122)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3122, 8), self_18971, '_zoom_mode', None_18970)
        
        # Call to push_current(...): (line 3124)
        # Processing the call keyword arguments (line 3124)
        kwargs_18974 = {}
        # Getting the type of 'self' (line 3124)
        self_18972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 8), 'self', False)
        # Obtaining the member 'push_current' of a type (line 3124)
        push_current_18973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3124, 8), self_18972, 'push_current')
        # Calling push_current(args, kwargs) (line 3124)
        push_current_call_result_18975 = invoke(stypy.reporting.localization.Localization(__file__, 3124, 8), push_current_18973, *[], **kwargs_18974)
        
        
        # Call to release(...): (line 3125)
        # Processing the call arguments (line 3125)
        # Getting the type of 'event' (line 3125)
        event_18978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 21), 'event', False)
        # Processing the call keyword arguments (line 3125)
        kwargs_18979 = {}
        # Getting the type of 'self' (line 3125)
        self_18976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 8), 'self', False)
        # Obtaining the member 'release' of a type (line 3125)
        release_18977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3125, 8), self_18976, 'release')
        # Calling release(args, kwargs) (line 3125)
        release_call_result_18980 = invoke(stypy.reporting.localization.Localization(__file__, 3125, 8), release_18977, *[event_18978], **kwargs_18979)
        
        
        # ################# End of 'release_zoom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'release_zoom' in the type store
        # Getting the type of 'stypy_return_type' (line 3072)
        stypy_return_type_18981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3072, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_18981)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'release_zoom'
        return stypy_return_type_18981


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 3127, 4, False)
        # Assigning a type to the variable 'self' (line 3128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3128, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.draw.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.draw.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.draw')
        NavigationToolbar2.draw.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.draw.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.draw', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_18982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3128, 8), 'unicode', u'Redraw the canvases, update the locators.')
        
        
        # Call to get_axes(...): (line 3129)
        # Processing the call keyword arguments (line 3129)
        kwargs_18987 = {}
        # Getting the type of 'self' (line 3129)
        self_18983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 17), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3129)
        canvas_18984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3129, 17), self_18983, 'canvas')
        # Obtaining the member 'figure' of a type (line 3129)
        figure_18985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3129, 17), canvas_18984, 'figure')
        # Obtaining the member 'get_axes' of a type (line 3129)
        get_axes_18986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3129, 17), figure_18985, 'get_axes')
        # Calling get_axes(args, kwargs) (line 3129)
        get_axes_call_result_18988 = invoke(stypy.reporting.localization.Localization(__file__, 3129, 17), get_axes_18986, *[], **kwargs_18987)
        
        # Testing the type of a for loop iterable (line 3129)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3129, 8), get_axes_call_result_18988)
        # Getting the type of the for loop variable (line 3129)
        for_loop_var_18989 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3129, 8), get_axes_call_result_18988)
        # Assigning a type to the variable 'a' (line 3129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3129, 8), 'a', for_loop_var_18989)
        # SSA begins for a for statement (line 3129)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 3130):
        
        # Assigning a Call to a Name (line 3130):
        
        # Assigning a Call to a Name (line 3130):
        
        # Call to getattr(...): (line 3130)
        # Processing the call arguments (line 3130)
        # Getting the type of 'a' (line 3130)
        a_18991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3130, 28), 'a', False)
        unicode_18992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3130, 31), 'unicode', u'xaxis')
        # Getting the type of 'None' (line 3130)
        None_18993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3130, 40), 'None', False)
        # Processing the call keyword arguments (line 3130)
        kwargs_18994 = {}
        # Getting the type of 'getattr' (line 3130)
        getattr_18990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3130, 20), 'getattr', False)
        # Calling getattr(args, kwargs) (line 3130)
        getattr_call_result_18995 = invoke(stypy.reporting.localization.Localization(__file__, 3130, 20), getattr_18990, *[a_18991, unicode_18992, None_18993], **kwargs_18994)
        
        # Assigning a type to the variable 'xaxis' (line 3130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3130, 12), 'xaxis', getattr_call_result_18995)
        
        # Assigning a Call to a Name (line 3131):
        
        # Assigning a Call to a Name (line 3131):
        
        # Assigning a Call to a Name (line 3131):
        
        # Call to getattr(...): (line 3131)
        # Processing the call arguments (line 3131)
        # Getting the type of 'a' (line 3131)
        a_18997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 28), 'a', False)
        unicode_18998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3131, 31), 'unicode', u'yaxis')
        # Getting the type of 'None' (line 3131)
        None_18999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 40), 'None', False)
        # Processing the call keyword arguments (line 3131)
        kwargs_19000 = {}
        # Getting the type of 'getattr' (line 3131)
        getattr_18996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 20), 'getattr', False)
        # Calling getattr(args, kwargs) (line 3131)
        getattr_call_result_19001 = invoke(stypy.reporting.localization.Localization(__file__, 3131, 20), getattr_18996, *[a_18997, unicode_18998, None_18999], **kwargs_19000)
        
        # Assigning a type to the variable 'yaxis' (line 3131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3131, 12), 'yaxis', getattr_call_result_19001)
        
        # Assigning a List to a Name (line 3132):
        
        # Assigning a List to a Name (line 3132):
        
        # Assigning a List to a Name (line 3132):
        
        # Obtaining an instance of the builtin type 'list' (line 3132)
        list_19002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3132, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3132)
        
        # Assigning a type to the variable 'locators' (line 3132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3132, 12), 'locators', list_19002)
        
        # Type idiom detected: calculating its left and rigth part (line 3133)
        # Getting the type of 'xaxis' (line 3133)
        xaxis_19003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 12), 'xaxis')
        # Getting the type of 'None' (line 3133)
        None_19004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 28), 'None')
        
        (may_be_19005, more_types_in_union_19006) = may_not_be_none(xaxis_19003, None_19004)

        if may_be_19005:

            if more_types_in_union_19006:
                # Runtime conditional SSA (line 3133)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to append(...): (line 3134)
            # Processing the call arguments (line 3134)
            
            # Call to get_major_locator(...): (line 3134)
            # Processing the call keyword arguments (line 3134)
            kwargs_19011 = {}
            # Getting the type of 'xaxis' (line 3134)
            xaxis_19009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 32), 'xaxis', False)
            # Obtaining the member 'get_major_locator' of a type (line 3134)
            get_major_locator_19010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3134, 32), xaxis_19009, 'get_major_locator')
            # Calling get_major_locator(args, kwargs) (line 3134)
            get_major_locator_call_result_19012 = invoke(stypy.reporting.localization.Localization(__file__, 3134, 32), get_major_locator_19010, *[], **kwargs_19011)
            
            # Processing the call keyword arguments (line 3134)
            kwargs_19013 = {}
            # Getting the type of 'locators' (line 3134)
            locators_19007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 16), 'locators', False)
            # Obtaining the member 'append' of a type (line 3134)
            append_19008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3134, 16), locators_19007, 'append')
            # Calling append(args, kwargs) (line 3134)
            append_call_result_19014 = invoke(stypy.reporting.localization.Localization(__file__, 3134, 16), append_19008, *[get_major_locator_call_result_19012], **kwargs_19013)
            
            
            # Call to append(...): (line 3135)
            # Processing the call arguments (line 3135)
            
            # Call to get_minor_locator(...): (line 3135)
            # Processing the call keyword arguments (line 3135)
            kwargs_19019 = {}
            # Getting the type of 'xaxis' (line 3135)
            xaxis_19017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3135, 32), 'xaxis', False)
            # Obtaining the member 'get_minor_locator' of a type (line 3135)
            get_minor_locator_19018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3135, 32), xaxis_19017, 'get_minor_locator')
            # Calling get_minor_locator(args, kwargs) (line 3135)
            get_minor_locator_call_result_19020 = invoke(stypy.reporting.localization.Localization(__file__, 3135, 32), get_minor_locator_19018, *[], **kwargs_19019)
            
            # Processing the call keyword arguments (line 3135)
            kwargs_19021 = {}
            # Getting the type of 'locators' (line 3135)
            locators_19015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3135, 16), 'locators', False)
            # Obtaining the member 'append' of a type (line 3135)
            append_19016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3135, 16), locators_19015, 'append')
            # Calling append(args, kwargs) (line 3135)
            append_call_result_19022 = invoke(stypy.reporting.localization.Localization(__file__, 3135, 16), append_19016, *[get_minor_locator_call_result_19020], **kwargs_19021)
            

            if more_types_in_union_19006:
                # SSA join for if statement (line 3133)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 3136)
        # Getting the type of 'yaxis' (line 3136)
        yaxis_19023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 12), 'yaxis')
        # Getting the type of 'None' (line 3136)
        None_19024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 28), 'None')
        
        (may_be_19025, more_types_in_union_19026) = may_not_be_none(yaxis_19023, None_19024)

        if may_be_19025:

            if more_types_in_union_19026:
                # Runtime conditional SSA (line 3136)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to append(...): (line 3137)
            # Processing the call arguments (line 3137)
            
            # Call to get_major_locator(...): (line 3137)
            # Processing the call keyword arguments (line 3137)
            kwargs_19031 = {}
            # Getting the type of 'yaxis' (line 3137)
            yaxis_19029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 32), 'yaxis', False)
            # Obtaining the member 'get_major_locator' of a type (line 3137)
            get_major_locator_19030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3137, 32), yaxis_19029, 'get_major_locator')
            # Calling get_major_locator(args, kwargs) (line 3137)
            get_major_locator_call_result_19032 = invoke(stypy.reporting.localization.Localization(__file__, 3137, 32), get_major_locator_19030, *[], **kwargs_19031)
            
            # Processing the call keyword arguments (line 3137)
            kwargs_19033 = {}
            # Getting the type of 'locators' (line 3137)
            locators_19027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 16), 'locators', False)
            # Obtaining the member 'append' of a type (line 3137)
            append_19028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3137, 16), locators_19027, 'append')
            # Calling append(args, kwargs) (line 3137)
            append_call_result_19034 = invoke(stypy.reporting.localization.Localization(__file__, 3137, 16), append_19028, *[get_major_locator_call_result_19032], **kwargs_19033)
            
            
            # Call to append(...): (line 3138)
            # Processing the call arguments (line 3138)
            
            # Call to get_minor_locator(...): (line 3138)
            # Processing the call keyword arguments (line 3138)
            kwargs_19039 = {}
            # Getting the type of 'yaxis' (line 3138)
            yaxis_19037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3138, 32), 'yaxis', False)
            # Obtaining the member 'get_minor_locator' of a type (line 3138)
            get_minor_locator_19038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3138, 32), yaxis_19037, 'get_minor_locator')
            # Calling get_minor_locator(args, kwargs) (line 3138)
            get_minor_locator_call_result_19040 = invoke(stypy.reporting.localization.Localization(__file__, 3138, 32), get_minor_locator_19038, *[], **kwargs_19039)
            
            # Processing the call keyword arguments (line 3138)
            kwargs_19041 = {}
            # Getting the type of 'locators' (line 3138)
            locators_19035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3138, 16), 'locators', False)
            # Obtaining the member 'append' of a type (line 3138)
            append_19036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3138, 16), locators_19035, 'append')
            # Calling append(args, kwargs) (line 3138)
            append_call_result_19042 = invoke(stypy.reporting.localization.Localization(__file__, 3138, 16), append_19036, *[get_minor_locator_call_result_19040], **kwargs_19041)
            

            if more_types_in_union_19026:
                # SSA join for if statement (line 3136)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'locators' (line 3140)
        locators_19043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3140, 23), 'locators')
        # Testing the type of a for loop iterable (line 3140)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3140, 12), locators_19043)
        # Getting the type of the for loop variable (line 3140)
        for_loop_var_19044 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3140, 12), locators_19043)
        # Assigning a type to the variable 'loc' (line 3140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3140, 12), 'loc', for_loop_var_19044)
        # SSA begins for a for statement (line 3140)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to refresh(...): (line 3141)
        # Processing the call keyword arguments (line 3141)
        kwargs_19047 = {}
        # Getting the type of 'loc' (line 3141)
        loc_19045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 16), 'loc', False)
        # Obtaining the member 'refresh' of a type (line 3141)
        refresh_19046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3141, 16), loc_19045, 'refresh')
        # Calling refresh(args, kwargs) (line 3141)
        refresh_call_result_19048 = invoke(stypy.reporting.localization.Localization(__file__, 3141, 16), refresh_19046, *[], **kwargs_19047)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw_idle(...): (line 3142)
        # Processing the call keyword arguments (line 3142)
        kwargs_19052 = {}
        # Getting the type of 'self' (line 3142)
        self_19049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3142, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3142)
        canvas_19050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3142, 8), self_19049, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 3142)
        draw_idle_19051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3142, 8), canvas_19050, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 3142)
        draw_idle_call_result_19053 = invoke(stypy.reporting.localization.Localization(__file__, 3142, 8), draw_idle_19051, *[], **kwargs_19052)
        
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 3127)
        stypy_return_type_19054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3127, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19054)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_19054


    @norecursion
    def _update_view(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_view'
        module_type_store = module_type_store.open_function_context('_update_view', 3144, 4, False)
        # Assigning a type to the variable 'self' (line 3145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3145, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2._update_view.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2._update_view.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2._update_view.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2._update_view.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2._update_view')
        NavigationToolbar2._update_view.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2._update_view.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2._update_view.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2._update_view.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2._update_view.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2._update_view.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2._update_view.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2._update_view', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_view', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_view(...)' code ##################

        unicode_19055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3147, (-1)), 'unicode', u'Update the viewlim and position from the view and\n        position stack for each axes.\n        ')
        
        # Assigning a Call to a Name (line 3149):
        
        # Assigning a Call to a Name (line 3149):
        
        # Assigning a Call to a Name (line 3149):
        
        # Call to _views(...): (line 3149)
        # Processing the call keyword arguments (line 3149)
        kwargs_19058 = {}
        # Getting the type of 'self' (line 3149)
        self_19056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3149, 16), 'self', False)
        # Obtaining the member '_views' of a type (line 3149)
        _views_19057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3149, 16), self_19056, '_views')
        # Calling _views(args, kwargs) (line 3149)
        _views_call_result_19059 = invoke(stypy.reporting.localization.Localization(__file__, 3149, 16), _views_19057, *[], **kwargs_19058)
        
        # Assigning a type to the variable 'views' (line 3149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3149, 8), 'views', _views_call_result_19059)
        
        # Type idiom detected: calculating its left and rigth part (line 3150)
        # Getting the type of 'views' (line 3150)
        views_19060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3150, 11), 'views')
        # Getting the type of 'None' (line 3150)
        None_19061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3150, 20), 'None')
        
        (may_be_19062, more_types_in_union_19063) = may_be_none(views_19060, None_19061)

        if may_be_19062:

            if more_types_in_union_19063:
                # Runtime conditional SSA (line 3150)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 3151)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3151, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_19063:
                # SSA join for if statement (line 3150)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 3152):
        
        # Assigning a Call to a Name (line 3152):
        
        # Assigning a Call to a Name (line 3152):
        
        # Call to _positions(...): (line 3152)
        # Processing the call keyword arguments (line 3152)
        kwargs_19066 = {}
        # Getting the type of 'self' (line 3152)
        self_19064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3152, 14), 'self', False)
        # Obtaining the member '_positions' of a type (line 3152)
        _positions_19065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3152, 14), self_19064, '_positions')
        # Calling _positions(args, kwargs) (line 3152)
        _positions_call_result_19067 = invoke(stypy.reporting.localization.Localization(__file__, 3152, 14), _positions_19065, *[], **kwargs_19066)
        
        # Assigning a type to the variable 'pos' (line 3152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3152, 8), 'pos', _positions_call_result_19067)
        
        # Type idiom detected: calculating its left and rigth part (line 3153)
        # Getting the type of 'pos' (line 3153)
        pos_19068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3153, 11), 'pos')
        # Getting the type of 'None' (line 3153)
        None_19069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3153, 18), 'None')
        
        (may_be_19070, more_types_in_union_19071) = may_be_none(pos_19068, None_19069)

        if may_be_19070:

            if more_types_in_union_19071:
                # Runtime conditional SSA (line 3153)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 3154)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3154, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_19071:
                # SSA join for if statement (line 3153)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to enumerate(...): (line 3155)
        # Processing the call arguments (line 3155)
        
        # Call to get_axes(...): (line 3155)
        # Processing the call keyword arguments (line 3155)
        kwargs_19077 = {}
        # Getting the type of 'self' (line 3155)
        self_19073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 30), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3155)
        canvas_19074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3155, 30), self_19073, 'canvas')
        # Obtaining the member 'figure' of a type (line 3155)
        figure_19075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3155, 30), canvas_19074, 'figure')
        # Obtaining the member 'get_axes' of a type (line 3155)
        get_axes_19076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3155, 30), figure_19075, 'get_axes')
        # Calling get_axes(args, kwargs) (line 3155)
        get_axes_call_result_19078 = invoke(stypy.reporting.localization.Localization(__file__, 3155, 30), get_axes_19076, *[], **kwargs_19077)
        
        # Processing the call keyword arguments (line 3155)
        kwargs_19079 = {}
        # Getting the type of 'enumerate' (line 3155)
        enumerate_19072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 20), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 3155)
        enumerate_call_result_19080 = invoke(stypy.reporting.localization.Localization(__file__, 3155, 20), enumerate_19072, *[get_axes_call_result_19078], **kwargs_19079)
        
        # Testing the type of a for loop iterable (line 3155)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3155, 8), enumerate_call_result_19080)
        # Getting the type of the for loop variable (line 3155)
        for_loop_var_19081 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3155, 8), enumerate_call_result_19080)
        # Assigning a type to the variable 'i' (line 3155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3155, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3155, 8), for_loop_var_19081))
        # Assigning a type to the variable 'a' (line 3155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3155, 8), 'a', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3155, 8), for_loop_var_19081))
        # SSA begins for a for statement (line 3155)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to _set_view(...): (line 3156)
        # Processing the call arguments (line 3156)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 3156)
        i_19084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 30), 'i', False)
        # Getting the type of 'views' (line 3156)
        views_19085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 24), 'views', False)
        # Obtaining the member '__getitem__' of a type (line 3156)
        getitem___19086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3156, 24), views_19085, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3156)
        subscript_call_result_19087 = invoke(stypy.reporting.localization.Localization(__file__, 3156, 24), getitem___19086, i_19084)
        
        # Processing the call keyword arguments (line 3156)
        kwargs_19088 = {}
        # Getting the type of 'a' (line 3156)
        a_19082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 12), 'a', False)
        # Obtaining the member '_set_view' of a type (line 3156)
        _set_view_19083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3156, 12), a_19082, '_set_view')
        # Calling _set_view(args, kwargs) (line 3156)
        _set_view_call_result_19089 = invoke(stypy.reporting.localization.Localization(__file__, 3156, 12), _set_view_19083, *[subscript_call_result_19087], **kwargs_19088)
        
        
        # Call to set_position(...): (line 3158)
        # Processing the call arguments (line 3158)
        
        # Obtaining the type of the subscript
        int_19092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3158, 34), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 3158)
        i_19093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3158, 31), 'i', False)
        # Getting the type of 'pos' (line 3158)
        pos_19094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3158, 27), 'pos', False)
        # Obtaining the member '__getitem__' of a type (line 3158)
        getitem___19095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3158, 27), pos_19094, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3158)
        subscript_call_result_19096 = invoke(stypy.reporting.localization.Localization(__file__, 3158, 27), getitem___19095, i_19093)
        
        # Obtaining the member '__getitem__' of a type (line 3158)
        getitem___19097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3158, 27), subscript_call_result_19096, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3158)
        subscript_call_result_19098 = invoke(stypy.reporting.localization.Localization(__file__, 3158, 27), getitem___19097, int_19092)
        
        unicode_19099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3158, 38), 'unicode', u'original')
        # Processing the call keyword arguments (line 3158)
        kwargs_19100 = {}
        # Getting the type of 'a' (line 3158)
        a_19090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3158, 12), 'a', False)
        # Obtaining the member 'set_position' of a type (line 3158)
        set_position_19091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3158, 12), a_19090, 'set_position')
        # Calling set_position(args, kwargs) (line 3158)
        set_position_call_result_19101 = invoke(stypy.reporting.localization.Localization(__file__, 3158, 12), set_position_19091, *[subscript_call_result_19098, unicode_19099], **kwargs_19100)
        
        
        # Call to set_position(...): (line 3159)
        # Processing the call arguments (line 3159)
        
        # Obtaining the type of the subscript
        int_19104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3159, 34), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 3159)
        i_19105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 31), 'i', False)
        # Getting the type of 'pos' (line 3159)
        pos_19106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 27), 'pos', False)
        # Obtaining the member '__getitem__' of a type (line 3159)
        getitem___19107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3159, 27), pos_19106, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3159)
        subscript_call_result_19108 = invoke(stypy.reporting.localization.Localization(__file__, 3159, 27), getitem___19107, i_19105)
        
        # Obtaining the member '__getitem__' of a type (line 3159)
        getitem___19109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3159, 27), subscript_call_result_19108, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3159)
        subscript_call_result_19110 = invoke(stypy.reporting.localization.Localization(__file__, 3159, 27), getitem___19109, int_19104)
        
        unicode_19111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3159, 38), 'unicode', u'active')
        # Processing the call keyword arguments (line 3159)
        kwargs_19112 = {}
        # Getting the type of 'a' (line 3159)
        a_19102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 12), 'a', False)
        # Obtaining the member 'set_position' of a type (line 3159)
        set_position_19103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3159, 12), a_19102, 'set_position')
        # Calling set_position(args, kwargs) (line 3159)
        set_position_call_result_19113 = invoke(stypy.reporting.localization.Localization(__file__, 3159, 12), set_position_19103, *[subscript_call_result_19110, unicode_19111], **kwargs_19112)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw_idle(...): (line 3161)
        # Processing the call keyword arguments (line 3161)
        kwargs_19117 = {}
        # Getting the type of 'self' (line 3161)
        self_19114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3161, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3161)
        canvas_19115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3161, 8), self_19114, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 3161)
        draw_idle_19116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3161, 8), canvas_19115, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 3161)
        draw_idle_call_result_19118 = invoke(stypy.reporting.localization.Localization(__file__, 3161, 8), draw_idle_19116, *[], **kwargs_19117)
        
        
        # ################# End of '_update_view(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_view' in the type store
        # Getting the type of 'stypy_return_type' (line 3144)
        stypy_return_type_19119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19119)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_view'
        return stypy_return_type_19119


    @norecursion
    def save_figure(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'save_figure'
        module_type_store = module_type_store.open_function_context('save_figure', 3163, 4, False)
        # Assigning a type to the variable 'self' (line 3164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3164, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.save_figure.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.save_figure.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.save_figure.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.save_figure.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.save_figure')
        NavigationToolbar2.save_figure.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2.save_figure.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        NavigationToolbar2.save_figure.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.save_figure.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.save_figure.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.save_figure.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.save_figure.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.save_figure', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'save_figure', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'save_figure(...)' code ##################

        unicode_19120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3164, 8), 'unicode', u'Save the current figure.')
        # Getting the type of 'NotImplementedError' (line 3165)
        NotImplementedError_19121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3165, 14), 'NotImplementedError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3165, 8), NotImplementedError_19121, 'raise parameter', BaseException)
        
        # ################# End of 'save_figure(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'save_figure' in the type store
        # Getting the type of 'stypy_return_type' (line 3163)
        stypy_return_type_19122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3163, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19122)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'save_figure'
        return stypy_return_type_19122


    @norecursion
    def set_cursor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_cursor'
        module_type_store = module_type_store.open_function_context('set_cursor', 3167, 4, False)
        # Assigning a type to the variable 'self' (line 3168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3168, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.set_cursor.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.set_cursor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.set_cursor.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.set_cursor.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.set_cursor')
        NavigationToolbar2.set_cursor.__dict__.__setitem__('stypy_param_names_list', ['cursor'])
        NavigationToolbar2.set_cursor.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.set_cursor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.set_cursor.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.set_cursor.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.set_cursor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.set_cursor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.set_cursor', ['cursor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_cursor', localization, ['cursor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_cursor(...)' code ##################

        unicode_19123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3174, (-1)), 'unicode', u'Set the current cursor to one of the :class:`Cursors` enums values.\n\n        If required by the backend, this method should trigger an update in\n        the backend event loop after the cursor is set, as this method may be\n        called e.g. before a long-running task during which the GUI is not\n        updated.\n        ')
        
        # ################# End of 'set_cursor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_cursor' in the type store
        # Getting the type of 'stypy_return_type' (line 3167)
        stypy_return_type_19124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3167, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19124)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_cursor'
        return stypy_return_type_19124


    @norecursion
    def update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update'
        module_type_store = module_type_store.open_function_context('update', 3176, 4, False)
        # Assigning a type to the variable 'self' (line 3177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3177, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.update.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.update.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.update.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.update')
        NavigationToolbar2.update.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2.update.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.update.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.update.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.update.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.update', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update(...)' code ##################

        unicode_19125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3177, 8), 'unicode', u'Reset the axes stack.')
        
        # Call to clear(...): (line 3178)
        # Processing the call keyword arguments (line 3178)
        kwargs_19129 = {}
        # Getting the type of 'self' (line 3178)
        self_19126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3178, 8), 'self', False)
        # Obtaining the member '_views' of a type (line 3178)
        _views_19127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3178, 8), self_19126, '_views')
        # Obtaining the member 'clear' of a type (line 3178)
        clear_19128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3178, 8), _views_19127, 'clear')
        # Calling clear(args, kwargs) (line 3178)
        clear_call_result_19130 = invoke(stypy.reporting.localization.Localization(__file__, 3178, 8), clear_19128, *[], **kwargs_19129)
        
        
        # Call to clear(...): (line 3179)
        # Processing the call keyword arguments (line 3179)
        kwargs_19134 = {}
        # Getting the type of 'self' (line 3179)
        self_19131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3179, 8), 'self', False)
        # Obtaining the member '_positions' of a type (line 3179)
        _positions_19132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3179, 8), self_19131, '_positions')
        # Obtaining the member 'clear' of a type (line 3179)
        clear_19133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3179, 8), _positions_19132, 'clear')
        # Calling clear(args, kwargs) (line 3179)
        clear_call_result_19135 = invoke(stypy.reporting.localization.Localization(__file__, 3179, 8), clear_19133, *[], **kwargs_19134)
        
        
        # Call to set_history_buttons(...): (line 3180)
        # Processing the call keyword arguments (line 3180)
        kwargs_19138 = {}
        # Getting the type of 'self' (line 3180)
        self_19136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3180, 8), 'self', False)
        # Obtaining the member 'set_history_buttons' of a type (line 3180)
        set_history_buttons_19137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3180, 8), self_19136, 'set_history_buttons')
        # Calling set_history_buttons(args, kwargs) (line 3180)
        set_history_buttons_call_result_19139 = invoke(stypy.reporting.localization.Localization(__file__, 3180, 8), set_history_buttons_19137, *[], **kwargs_19138)
        
        
        # ################# End of 'update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update' in the type store
        # Getting the type of 'stypy_return_type' (line 3176)
        stypy_return_type_19140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3176, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19140)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update'
        return stypy_return_type_19140


    @norecursion
    def zoom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'zoom'
        module_type_store = module_type_store.open_function_context('zoom', 3182, 4, False)
        # Assigning a type to the variable 'self' (line 3183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3183, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.zoom.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.zoom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.zoom.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.zoom.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.zoom')
        NavigationToolbar2.zoom.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2.zoom.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        NavigationToolbar2.zoom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.zoom.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.zoom.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.zoom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.zoom.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.zoom', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'zoom', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'zoom(...)' code ##################

        unicode_19141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3183, 8), 'unicode', u'Activate zoom to rect mode.')
        
        
        # Getting the type of 'self' (line 3184)
        self_19142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 11), 'self')
        # Obtaining the member '_active' of a type (line 3184)
        _active_19143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3184, 11), self_19142, '_active')
        unicode_19144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3184, 27), 'unicode', u'ZOOM')
        # Applying the binary operator '==' (line 3184)
        result_eq_19145 = python_operator(stypy.reporting.localization.Localization(__file__, 3184, 11), '==', _active_19143, unicode_19144)
        
        # Testing the type of an if condition (line 3184)
        if_condition_19146 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3184, 8), result_eq_19145)
        # Assigning a type to the variable 'if_condition_19146' (line 3184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3184, 8), 'if_condition_19146', if_condition_19146)
        # SSA begins for if statement (line 3184)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 3185):
        
        # Assigning a Name to a Attribute (line 3185):
        
        # Assigning a Name to a Attribute (line 3185):
        # Getting the type of 'None' (line 3185)
        None_19147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3185, 27), 'None')
        # Getting the type of 'self' (line 3185)
        self_19148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3185, 12), 'self')
        # Setting the type of the member '_active' of a type (line 3185)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3185, 12), self_19148, '_active', None_19147)
        # SSA branch for the else part of an if statement (line 3184)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Attribute (line 3187):
        
        # Assigning a Str to a Attribute (line 3187):
        
        # Assigning a Str to a Attribute (line 3187):
        unicode_19149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3187, 27), 'unicode', u'ZOOM')
        # Getting the type of 'self' (line 3187)
        self_19150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3187, 12), 'self')
        # Setting the type of the member '_active' of a type (line 3187)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3187, 12), self_19150, '_active', unicode_19149)
        # SSA join for if statement (line 3184)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 3189)
        self_19151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 11), 'self')
        # Obtaining the member '_idPress' of a type (line 3189)
        _idPress_19152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3189, 11), self_19151, '_idPress')
        # Getting the type of 'None' (line 3189)
        None_19153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 32), 'None')
        # Applying the binary operator 'isnot' (line 3189)
        result_is_not_19154 = python_operator(stypy.reporting.localization.Localization(__file__, 3189, 11), 'isnot', _idPress_19152, None_19153)
        
        # Testing the type of an if condition (line 3189)
        if_condition_19155 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3189, 8), result_is_not_19154)
        # Assigning a type to the variable 'if_condition_19155' (line 3189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3189, 8), 'if_condition_19155', if_condition_19155)
        # SSA begins for if statement (line 3189)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 3190):
        
        # Assigning a Call to a Attribute (line 3190):
        
        # Assigning a Call to a Attribute (line 3190):
        
        # Call to mpl_disconnect(...): (line 3190)
        # Processing the call arguments (line 3190)
        # Getting the type of 'self' (line 3190)
        self_19159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3190, 55), 'self', False)
        # Obtaining the member '_idPress' of a type (line 3190)
        _idPress_19160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3190, 55), self_19159, '_idPress')
        # Processing the call keyword arguments (line 3190)
        kwargs_19161 = {}
        # Getting the type of 'self' (line 3190)
        self_19156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3190, 28), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3190)
        canvas_19157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3190, 28), self_19156, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 3190)
        mpl_disconnect_19158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3190, 28), canvas_19157, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 3190)
        mpl_disconnect_call_result_19162 = invoke(stypy.reporting.localization.Localization(__file__, 3190, 28), mpl_disconnect_19158, *[_idPress_19160], **kwargs_19161)
        
        # Getting the type of 'self' (line 3190)
        self_19163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3190, 12), 'self')
        # Setting the type of the member '_idPress' of a type (line 3190)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3190, 12), self_19163, '_idPress', mpl_disconnect_call_result_19162)
        
        # Assigning a Str to a Attribute (line 3191):
        
        # Assigning a Str to a Attribute (line 3191):
        
        # Assigning a Str to a Attribute (line 3191):
        unicode_19164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3191, 24), 'unicode', u'')
        # Getting the type of 'self' (line 3191)
        self_19165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3191, 12), 'self')
        # Setting the type of the member 'mode' of a type (line 3191)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3191, 12), self_19165, 'mode', unicode_19164)
        # SSA join for if statement (line 3189)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 3193)
        self_19166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3193, 11), 'self')
        # Obtaining the member '_idRelease' of a type (line 3193)
        _idRelease_19167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3193, 11), self_19166, '_idRelease')
        # Getting the type of 'None' (line 3193)
        None_19168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3193, 34), 'None')
        # Applying the binary operator 'isnot' (line 3193)
        result_is_not_19169 = python_operator(stypy.reporting.localization.Localization(__file__, 3193, 11), 'isnot', _idRelease_19167, None_19168)
        
        # Testing the type of an if condition (line 3193)
        if_condition_19170 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3193, 8), result_is_not_19169)
        # Assigning a type to the variable 'if_condition_19170' (line 3193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3193, 8), 'if_condition_19170', if_condition_19170)
        # SSA begins for if statement (line 3193)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 3194):
        
        # Assigning a Call to a Attribute (line 3194):
        
        # Assigning a Call to a Attribute (line 3194):
        
        # Call to mpl_disconnect(...): (line 3194)
        # Processing the call arguments (line 3194)
        # Getting the type of 'self' (line 3194)
        self_19174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3194, 57), 'self', False)
        # Obtaining the member '_idRelease' of a type (line 3194)
        _idRelease_19175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3194, 57), self_19174, '_idRelease')
        # Processing the call keyword arguments (line 3194)
        kwargs_19176 = {}
        # Getting the type of 'self' (line 3194)
        self_19171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3194, 30), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3194)
        canvas_19172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3194, 30), self_19171, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 3194)
        mpl_disconnect_19173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3194, 30), canvas_19172, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 3194)
        mpl_disconnect_call_result_19177 = invoke(stypy.reporting.localization.Localization(__file__, 3194, 30), mpl_disconnect_19173, *[_idRelease_19175], **kwargs_19176)
        
        # Getting the type of 'self' (line 3194)
        self_19178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3194, 12), 'self')
        # Setting the type of the member '_idRelease' of a type (line 3194)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3194, 12), self_19178, '_idRelease', mpl_disconnect_call_result_19177)
        
        # Assigning a Str to a Attribute (line 3195):
        
        # Assigning a Str to a Attribute (line 3195):
        
        # Assigning a Str to a Attribute (line 3195):
        unicode_19179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3195, 24), 'unicode', u'')
        # Getting the type of 'self' (line 3195)
        self_19180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3195, 12), 'self')
        # Setting the type of the member 'mode' of a type (line 3195)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3195, 12), self_19180, 'mode', unicode_19179)
        # SSA join for if statement (line 3193)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 3197)
        self_19181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3197, 11), 'self')
        # Obtaining the member '_active' of a type (line 3197)
        _active_19182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3197, 11), self_19181, '_active')
        # Testing the type of an if condition (line 3197)
        if_condition_19183 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3197, 8), _active_19182)
        # Assigning a type to the variable 'if_condition_19183' (line 3197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3197, 8), 'if_condition_19183', if_condition_19183)
        # SSA begins for if statement (line 3197)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 3198):
        
        # Assigning a Call to a Attribute (line 3198):
        
        # Assigning a Call to a Attribute (line 3198):
        
        # Call to mpl_connect(...): (line 3198)
        # Processing the call arguments (line 3198)
        unicode_19187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3198, 52), 'unicode', u'button_press_event')
        # Getting the type of 'self' (line 3199)
        self_19188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3199, 52), 'self', False)
        # Obtaining the member 'press_zoom' of a type (line 3199)
        press_zoom_19189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3199, 52), self_19188, 'press_zoom')
        # Processing the call keyword arguments (line 3198)
        kwargs_19190 = {}
        # Getting the type of 'self' (line 3198)
        self_19184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3198, 28), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3198)
        canvas_19185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3198, 28), self_19184, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 3198)
        mpl_connect_19186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3198, 28), canvas_19185, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 3198)
        mpl_connect_call_result_19191 = invoke(stypy.reporting.localization.Localization(__file__, 3198, 28), mpl_connect_19186, *[unicode_19187, press_zoom_19189], **kwargs_19190)
        
        # Getting the type of 'self' (line 3198)
        self_19192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3198, 12), 'self')
        # Setting the type of the member '_idPress' of a type (line 3198)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3198, 12), self_19192, '_idPress', mpl_connect_call_result_19191)
        
        # Assigning a Call to a Attribute (line 3200):
        
        # Assigning a Call to a Attribute (line 3200):
        
        # Assigning a Call to a Attribute (line 3200):
        
        # Call to mpl_connect(...): (line 3200)
        # Processing the call arguments (line 3200)
        unicode_19196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3200, 54), 'unicode', u'button_release_event')
        # Getting the type of 'self' (line 3201)
        self_19197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3201, 54), 'self', False)
        # Obtaining the member 'release_zoom' of a type (line 3201)
        release_zoom_19198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3201, 54), self_19197, 'release_zoom')
        # Processing the call keyword arguments (line 3200)
        kwargs_19199 = {}
        # Getting the type of 'self' (line 3200)
        self_19193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3200, 30), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3200)
        canvas_19194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3200, 30), self_19193, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 3200)
        mpl_connect_19195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3200, 30), canvas_19194, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 3200)
        mpl_connect_call_result_19200 = invoke(stypy.reporting.localization.Localization(__file__, 3200, 30), mpl_connect_19195, *[unicode_19196, release_zoom_19198], **kwargs_19199)
        
        # Getting the type of 'self' (line 3200)
        self_19201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3200, 12), 'self')
        # Setting the type of the member '_idRelease' of a type (line 3200)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3200, 12), self_19201, '_idRelease', mpl_connect_call_result_19200)
        
        # Assigning a Str to a Attribute (line 3202):
        
        # Assigning a Str to a Attribute (line 3202):
        
        # Assigning a Str to a Attribute (line 3202):
        unicode_19202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3202, 24), 'unicode', u'zoom rect')
        # Getting the type of 'self' (line 3202)
        self_19203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3202, 12), 'self')
        # Setting the type of the member 'mode' of a type (line 3202)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3202, 12), self_19203, 'mode', unicode_19202)
        
        # Call to widgetlock(...): (line 3203)
        # Processing the call arguments (line 3203)
        # Getting the type of 'self' (line 3203)
        self_19207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3203, 35), 'self', False)
        # Processing the call keyword arguments (line 3203)
        kwargs_19208 = {}
        # Getting the type of 'self' (line 3203)
        self_19204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3203, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3203)
        canvas_19205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3203, 12), self_19204, 'canvas')
        # Obtaining the member 'widgetlock' of a type (line 3203)
        widgetlock_19206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3203, 12), canvas_19205, 'widgetlock')
        # Calling widgetlock(args, kwargs) (line 3203)
        widgetlock_call_result_19209 = invoke(stypy.reporting.localization.Localization(__file__, 3203, 12), widgetlock_19206, *[self_19207], **kwargs_19208)
        
        # SSA branch for the else part of an if statement (line 3197)
        module_type_store.open_ssa_branch('else')
        
        # Call to release(...): (line 3205)
        # Processing the call arguments (line 3205)
        # Getting the type of 'self' (line 3205)
        self_19214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3205, 43), 'self', False)
        # Processing the call keyword arguments (line 3205)
        kwargs_19215 = {}
        # Getting the type of 'self' (line 3205)
        self_19210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3205, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3205)
        canvas_19211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3205, 12), self_19210, 'canvas')
        # Obtaining the member 'widgetlock' of a type (line 3205)
        widgetlock_19212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3205, 12), canvas_19211, 'widgetlock')
        # Obtaining the member 'release' of a type (line 3205)
        release_19213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3205, 12), widgetlock_19212, 'release')
        # Calling release(args, kwargs) (line 3205)
        release_call_result_19216 = invoke(stypy.reporting.localization.Localization(__file__, 3205, 12), release_19213, *[self_19214], **kwargs_19215)
        
        # SSA join for if statement (line 3197)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to get_axes(...): (line 3207)
        # Processing the call keyword arguments (line 3207)
        kwargs_19221 = {}
        # Getting the type of 'self' (line 3207)
        self_19217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3207, 17), 'self', False)
        # Obtaining the member 'canvas' of a type (line 3207)
        canvas_19218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3207, 17), self_19217, 'canvas')
        # Obtaining the member 'figure' of a type (line 3207)
        figure_19219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3207, 17), canvas_19218, 'figure')
        # Obtaining the member 'get_axes' of a type (line 3207)
        get_axes_19220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3207, 17), figure_19219, 'get_axes')
        # Calling get_axes(args, kwargs) (line 3207)
        get_axes_call_result_19222 = invoke(stypy.reporting.localization.Localization(__file__, 3207, 17), get_axes_19220, *[], **kwargs_19221)
        
        # Testing the type of a for loop iterable (line 3207)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3207, 8), get_axes_call_result_19222)
        # Getting the type of the for loop variable (line 3207)
        for_loop_var_19223 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3207, 8), get_axes_call_result_19222)
        # Assigning a type to the variable 'a' (line 3207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3207, 8), 'a', for_loop_var_19223)
        # SSA begins for a for statement (line 3207)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_navigate_mode(...): (line 3208)
        # Processing the call arguments (line 3208)
        # Getting the type of 'self' (line 3208)
        self_19226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3208, 32), 'self', False)
        # Obtaining the member '_active' of a type (line 3208)
        _active_19227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3208, 32), self_19226, '_active')
        # Processing the call keyword arguments (line 3208)
        kwargs_19228 = {}
        # Getting the type of 'a' (line 3208)
        a_19224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3208, 12), 'a', False)
        # Obtaining the member 'set_navigate_mode' of a type (line 3208)
        set_navigate_mode_19225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3208, 12), a_19224, 'set_navigate_mode')
        # Calling set_navigate_mode(args, kwargs) (line 3208)
        set_navigate_mode_call_result_19229 = invoke(stypy.reporting.localization.Localization(__file__, 3208, 12), set_navigate_mode_19225, *[_active_19227], **kwargs_19228)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_message(...): (line 3210)
        # Processing the call arguments (line 3210)
        # Getting the type of 'self' (line 3210)
        self_19232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3210, 25), 'self', False)
        # Obtaining the member 'mode' of a type (line 3210)
        mode_19233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3210, 25), self_19232, 'mode')
        # Processing the call keyword arguments (line 3210)
        kwargs_19234 = {}
        # Getting the type of 'self' (line 3210)
        self_19230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3210, 8), 'self', False)
        # Obtaining the member 'set_message' of a type (line 3210)
        set_message_19231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3210, 8), self_19230, 'set_message')
        # Calling set_message(args, kwargs) (line 3210)
        set_message_call_result_19235 = invoke(stypy.reporting.localization.Localization(__file__, 3210, 8), set_message_19231, *[mode_19233], **kwargs_19234)
        
        
        # ################# End of 'zoom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'zoom' in the type store
        # Getting the type of 'stypy_return_type' (line 3182)
        stypy_return_type_19236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3182, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19236)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'zoom'
        return stypy_return_type_19236


    @norecursion
    def set_history_buttons(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_history_buttons'
        module_type_store = module_type_store.open_function_context('set_history_buttons', 3212, 4, False)
        # Assigning a type to the variable 'self' (line 3213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3213, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NavigationToolbar2.set_history_buttons.__dict__.__setitem__('stypy_localization', localization)
        NavigationToolbar2.set_history_buttons.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NavigationToolbar2.set_history_buttons.__dict__.__setitem__('stypy_type_store', module_type_store)
        NavigationToolbar2.set_history_buttons.__dict__.__setitem__('stypy_function_name', 'NavigationToolbar2.set_history_buttons')
        NavigationToolbar2.set_history_buttons.__dict__.__setitem__('stypy_param_names_list', [])
        NavigationToolbar2.set_history_buttons.__dict__.__setitem__('stypy_varargs_param_name', None)
        NavigationToolbar2.set_history_buttons.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NavigationToolbar2.set_history_buttons.__dict__.__setitem__('stypy_call_defaults', defaults)
        NavigationToolbar2.set_history_buttons.__dict__.__setitem__('stypy_call_varargs', varargs)
        NavigationToolbar2.set_history_buttons.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NavigationToolbar2.set_history_buttons.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NavigationToolbar2.set_history_buttons', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_history_buttons', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_history_buttons(...)' code ##################

        unicode_19237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3213, 8), 'unicode', u'Enable or disable the back/forward button.')
        
        # ################# End of 'set_history_buttons(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_history_buttons' in the type store
        # Getting the type of 'stypy_return_type' (line 3212)
        stypy_return_type_19238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3212, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19238)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_history_buttons'
        return stypy_return_type_19238


# Assigning a type to the variable 'NavigationToolbar2' (line 2715)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2715, 0), 'NavigationToolbar2', NavigationToolbar2)

# Assigning a Tuple to a Name (line 2763):

# Obtaining an instance of the builtin type 'tuple' (line 2764)
tuple_19239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2764, 8), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2764)
# Adding element type (line 2764)

# Obtaining an instance of the builtin type 'tuple' (line 2764)
tuple_19240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2764, 9), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2764)
# Adding element type (line 2764)
unicode_19241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2764, 9), 'unicode', u'Home')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 9), tuple_19240, unicode_19241)
# Adding element type (line 2764)
unicode_19242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2764, 17), 'unicode', u'Reset original view')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 9), tuple_19240, unicode_19242)
# Adding element type (line 2764)
unicode_19243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2764, 40), 'unicode', u'home')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 9), tuple_19240, unicode_19243)
# Adding element type (line 2764)
unicode_19244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2764, 48), 'unicode', u'home')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 9), tuple_19240, unicode_19244)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 8), tuple_19239, tuple_19240)
# Adding element type (line 2764)

# Obtaining an instance of the builtin type 'tuple' (line 2765)
tuple_19245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2765, 9), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2765)
# Adding element type (line 2765)
unicode_19246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2765, 9), 'unicode', u'Back')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2765, 9), tuple_19245, unicode_19246)
# Adding element type (line 2765)
unicode_19247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2765, 17), 'unicode', u'Back to  previous view')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2765, 9), tuple_19245, unicode_19247)
# Adding element type (line 2765)
unicode_19248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2765, 43), 'unicode', u'back')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2765, 9), tuple_19245, unicode_19248)
# Adding element type (line 2765)
unicode_19249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2765, 51), 'unicode', u'back')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2765, 9), tuple_19245, unicode_19249)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 8), tuple_19239, tuple_19245)
# Adding element type (line 2764)

# Obtaining an instance of the builtin type 'tuple' (line 2766)
tuple_19250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2766, 9), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2766)
# Adding element type (line 2766)
unicode_19251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2766, 9), 'unicode', u'Forward')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2766, 9), tuple_19250, unicode_19251)
# Adding element type (line 2766)
unicode_19252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2766, 20), 'unicode', u'Forward to next view')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2766, 9), tuple_19250, unicode_19252)
# Adding element type (line 2766)
unicode_19253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2766, 44), 'unicode', u'forward')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2766, 9), tuple_19250, unicode_19253)
# Adding element type (line 2766)
unicode_19254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2766, 55), 'unicode', u'forward')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2766, 9), tuple_19250, unicode_19254)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 8), tuple_19239, tuple_19250)
# Adding element type (line 2764)

# Obtaining an instance of the builtin type 'tuple' (line 2767)
tuple_19255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2767, 9), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2767)
# Adding element type (line 2767)
# Getting the type of 'None' (line 2767)
None_19256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 9), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2767, 9), tuple_19255, None_19256)
# Adding element type (line 2767)
# Getting the type of 'None' (line 2767)
None_19257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 15), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2767, 9), tuple_19255, None_19257)
# Adding element type (line 2767)
# Getting the type of 'None' (line 2767)
None_19258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 21), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2767, 9), tuple_19255, None_19258)
# Adding element type (line 2767)
# Getting the type of 'None' (line 2767)
None_19259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 27), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2767, 9), tuple_19255, None_19259)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 8), tuple_19239, tuple_19255)
# Adding element type (line 2764)

# Obtaining an instance of the builtin type 'tuple' (line 2768)
tuple_19260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2768, 9), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2768)
# Adding element type (line 2768)
unicode_19261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2768, 9), 'unicode', u'Pan')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2768, 9), tuple_19260, unicode_19261)
# Adding element type (line 2768)
unicode_19262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2768, 16), 'unicode', u'Pan axes with left mouse, zoom with right')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2768, 9), tuple_19260, unicode_19262)
# Adding element type (line 2768)
unicode_19263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2768, 61), 'unicode', u'move')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2768, 9), tuple_19260, unicode_19263)
# Adding element type (line 2768)
unicode_19264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2768, 69), 'unicode', u'pan')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2768, 9), tuple_19260, unicode_19264)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 8), tuple_19239, tuple_19260)
# Adding element type (line 2764)

# Obtaining an instance of the builtin type 'tuple' (line 2769)
tuple_19265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2769, 9), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2769)
# Adding element type (line 2769)
unicode_19266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2769, 9), 'unicode', u'Zoom')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2769, 9), tuple_19265, unicode_19266)
# Adding element type (line 2769)
unicode_19267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2769, 17), 'unicode', u'Zoom to rectangle')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2769, 9), tuple_19265, unicode_19267)
# Adding element type (line 2769)
unicode_19268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2769, 38), 'unicode', u'zoom_to_rect')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2769, 9), tuple_19265, unicode_19268)
# Adding element type (line 2769)
unicode_19269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2769, 54), 'unicode', u'zoom')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2769, 9), tuple_19265, unicode_19269)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 8), tuple_19239, tuple_19265)
# Adding element type (line 2764)

# Obtaining an instance of the builtin type 'tuple' (line 2770)
tuple_19270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2770, 9), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2770)
# Adding element type (line 2770)
unicode_19271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2770, 9), 'unicode', u'Subplots')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2770, 9), tuple_19270, unicode_19271)
# Adding element type (line 2770)
unicode_19272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2770, 21), 'unicode', u'Configure subplots')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2770, 9), tuple_19270, unicode_19272)
# Adding element type (line 2770)
unicode_19273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2770, 43), 'unicode', u'subplots')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2770, 9), tuple_19270, unicode_19273)
# Adding element type (line 2770)
unicode_19274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2770, 55), 'unicode', u'configure_subplots')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2770, 9), tuple_19270, unicode_19274)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 8), tuple_19239, tuple_19270)
# Adding element type (line 2764)

# Obtaining an instance of the builtin type 'tuple' (line 2771)
tuple_19275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2771, 9), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2771)
# Adding element type (line 2771)
# Getting the type of 'None' (line 2771)
None_19276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 9), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2771, 9), tuple_19275, None_19276)
# Adding element type (line 2771)
# Getting the type of 'None' (line 2771)
None_19277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 15), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2771, 9), tuple_19275, None_19277)
# Adding element type (line 2771)
# Getting the type of 'None' (line 2771)
None_19278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 21), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2771, 9), tuple_19275, None_19278)
# Adding element type (line 2771)
# Getting the type of 'None' (line 2771)
None_19279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 27), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2771, 9), tuple_19275, None_19279)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 8), tuple_19239, tuple_19275)
# Adding element type (line 2764)

# Obtaining an instance of the builtin type 'tuple' (line 2772)
tuple_19280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2772, 9), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 2772)
# Adding element type (line 2772)
unicode_19281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2772, 9), 'unicode', u'Save')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2772, 9), tuple_19280, unicode_19281)
# Adding element type (line 2772)
unicode_19282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2772, 17), 'unicode', u'Save the figure')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2772, 9), tuple_19280, unicode_19282)
# Adding element type (line 2772)
unicode_19283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2772, 36), 'unicode', u'filesave')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2772, 9), tuple_19280, unicode_19283)
# Adding element type (line 2772)
unicode_19284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2772, 48), 'unicode', u'save_figure')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2772, 9), tuple_19280, unicode_19284)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 8), tuple_19239, tuple_19280)

# Getting the type of 'NavigationToolbar2'
NavigationToolbar2_19285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'NavigationToolbar2')
# Setting the type of the member 'toolitems' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), NavigationToolbar2_19285, 'toolitems', tuple_19239)
# Declaration of the 'ToolContainerBase' class

class ToolContainerBase(object, ):
    unicode_19286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3224, (-1)), 'unicode', u'\n    Base class for all tool containers, e.g. toolbars.\n\n    Attributes\n    ----------\n    toolmanager : `ToolManager`\n        The tools with which this `ToolContainer` wants to communicate.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3226, 4, False)
        # Assigning a type to the variable 'self' (line 3227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3227, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolContainerBase.__init__', ['toolmanager'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['toolmanager'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 3227):
        
        # Assigning a Name to a Attribute (line 3227):
        
        # Assigning a Name to a Attribute (line 3227):
        # Getting the type of 'toolmanager' (line 3227)
        toolmanager_19287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3227, 27), 'toolmanager')
        # Getting the type of 'self' (line 3227)
        self_19288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3227, 8), 'self')
        # Setting the type of the member 'toolmanager' of a type (line 3227)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3227, 8), self_19288, 'toolmanager', toolmanager_19287)
        
        # Call to toolmanager_connect(...): (line 3228)
        # Processing the call arguments (line 3228)
        unicode_19292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3228, 45), 'unicode', u'tool_removed_event')
        # Getting the type of 'self' (line 3229)
        self_19293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3229, 45), 'self', False)
        # Obtaining the member '_remove_tool_cbk' of a type (line 3229)
        _remove_tool_cbk_19294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3229, 45), self_19293, '_remove_tool_cbk')
        # Processing the call keyword arguments (line 3228)
        kwargs_19295 = {}
        # Getting the type of 'self' (line 3228)
        self_19289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3228, 8), 'self', False)
        # Obtaining the member 'toolmanager' of a type (line 3228)
        toolmanager_19290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3228, 8), self_19289, 'toolmanager')
        # Obtaining the member 'toolmanager_connect' of a type (line 3228)
        toolmanager_connect_19291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3228, 8), toolmanager_19290, 'toolmanager_connect')
        # Calling toolmanager_connect(args, kwargs) (line 3228)
        toolmanager_connect_call_result_19296 = invoke(stypy.reporting.localization.Localization(__file__, 3228, 8), toolmanager_connect_19291, *[unicode_19292, _remove_tool_cbk_19294], **kwargs_19295)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _tool_toggled_cbk(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_tool_toggled_cbk'
        module_type_store = module_type_store.open_function_context('_tool_toggled_cbk', 3231, 4, False)
        # Assigning a type to the variable 'self' (line 3232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3232, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolContainerBase._tool_toggled_cbk.__dict__.__setitem__('stypy_localization', localization)
        ToolContainerBase._tool_toggled_cbk.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolContainerBase._tool_toggled_cbk.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolContainerBase._tool_toggled_cbk.__dict__.__setitem__('stypy_function_name', 'ToolContainerBase._tool_toggled_cbk')
        ToolContainerBase._tool_toggled_cbk.__dict__.__setitem__('stypy_param_names_list', ['event'])
        ToolContainerBase._tool_toggled_cbk.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolContainerBase._tool_toggled_cbk.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolContainerBase._tool_toggled_cbk.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolContainerBase._tool_toggled_cbk.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolContainerBase._tool_toggled_cbk.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolContainerBase._tool_toggled_cbk.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolContainerBase._tool_toggled_cbk', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_tool_toggled_cbk', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_tool_toggled_cbk(...)' code ##################

        unicode_19297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3236, (-1)), 'unicode', u"\n        Captures the 'tool_trigger_[name]'\n\n        This only gets used for toggled tools\n        ")
        
        # Call to toggle_toolitem(...): (line 3237)
        # Processing the call arguments (line 3237)
        # Getting the type of 'event' (line 3237)
        event_19300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3237, 29), 'event', False)
        # Obtaining the member 'tool' of a type (line 3237)
        tool_19301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3237, 29), event_19300, 'tool')
        # Obtaining the member 'name' of a type (line 3237)
        name_19302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3237, 29), tool_19301, 'name')
        # Getting the type of 'event' (line 3237)
        event_19303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3237, 46), 'event', False)
        # Obtaining the member 'tool' of a type (line 3237)
        tool_19304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3237, 46), event_19303, 'tool')
        # Obtaining the member 'toggled' of a type (line 3237)
        toggled_19305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3237, 46), tool_19304, 'toggled')
        # Processing the call keyword arguments (line 3237)
        kwargs_19306 = {}
        # Getting the type of 'self' (line 3237)
        self_19298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3237, 8), 'self', False)
        # Obtaining the member 'toggle_toolitem' of a type (line 3237)
        toggle_toolitem_19299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3237, 8), self_19298, 'toggle_toolitem')
        # Calling toggle_toolitem(args, kwargs) (line 3237)
        toggle_toolitem_call_result_19307 = invoke(stypy.reporting.localization.Localization(__file__, 3237, 8), toggle_toolitem_19299, *[name_19302, toggled_19305], **kwargs_19306)
        
        
        # ################# End of '_tool_toggled_cbk(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_tool_toggled_cbk' in the type store
        # Getting the type of 'stypy_return_type' (line 3231)
        stypy_return_type_19308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3231, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19308)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_tool_toggled_cbk'
        return stypy_return_type_19308


    @norecursion
    def add_tool(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_19309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3239, 45), 'int')
        defaults = [int_19309]
        # Create a new context for function 'add_tool'
        module_type_store = module_type_store.open_function_context('add_tool', 3239, 4, False)
        # Assigning a type to the variable 'self' (line 3240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3240, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolContainerBase.add_tool.__dict__.__setitem__('stypy_localization', localization)
        ToolContainerBase.add_tool.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolContainerBase.add_tool.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolContainerBase.add_tool.__dict__.__setitem__('stypy_function_name', 'ToolContainerBase.add_tool')
        ToolContainerBase.add_tool.__dict__.__setitem__('stypy_param_names_list', ['tool', 'group', 'position'])
        ToolContainerBase.add_tool.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolContainerBase.add_tool.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolContainerBase.add_tool.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolContainerBase.add_tool.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolContainerBase.add_tool.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolContainerBase.add_tool.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolContainerBase.add_tool', ['tool', 'group', 'position'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_tool', localization, ['tool', 'group', 'position'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_tool(...)' code ##################

        unicode_19310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3251, (-1)), 'unicode', u'\n        Adds a tool to this container\n\n        Parameters\n        ----------\n        tool : tool_like\n            The tool to add, see `ToolManager.get_tool`.\n        group : str\n            The name of the group to add this tool to.\n        position : int (optional)\n            The position within the group to place this tool.  Defaults to end.\n        ')
        
        # Assigning a Call to a Name (line 3252):
        
        # Assigning a Call to a Name (line 3252):
        
        # Assigning a Call to a Name (line 3252):
        
        # Call to get_tool(...): (line 3252)
        # Processing the call arguments (line 3252)
        # Getting the type of 'tool' (line 3252)
        tool_19314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3252, 41), 'tool', False)
        # Processing the call keyword arguments (line 3252)
        kwargs_19315 = {}
        # Getting the type of 'self' (line 3252)
        self_19311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3252, 15), 'self', False)
        # Obtaining the member 'toolmanager' of a type (line 3252)
        toolmanager_19312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3252, 15), self_19311, 'toolmanager')
        # Obtaining the member 'get_tool' of a type (line 3252)
        get_tool_19313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3252, 15), toolmanager_19312, 'get_tool')
        # Calling get_tool(args, kwargs) (line 3252)
        get_tool_call_result_19316 = invoke(stypy.reporting.localization.Localization(__file__, 3252, 15), get_tool_19313, *[tool_19314], **kwargs_19315)
        
        # Assigning a type to the variable 'tool' (line 3252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3252, 8), 'tool', get_tool_call_result_19316)
        
        # Assigning a Call to a Name (line 3253):
        
        # Assigning a Call to a Name (line 3253):
        
        # Assigning a Call to a Name (line 3253):
        
        # Call to _get_image_filename(...): (line 3253)
        # Processing the call arguments (line 3253)
        # Getting the type of 'tool' (line 3253)
        tool_19319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3253, 41), 'tool', False)
        # Obtaining the member 'image' of a type (line 3253)
        image_19320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3253, 41), tool_19319, 'image')
        # Processing the call keyword arguments (line 3253)
        kwargs_19321 = {}
        # Getting the type of 'self' (line 3253)
        self_19317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3253, 16), 'self', False)
        # Obtaining the member '_get_image_filename' of a type (line 3253)
        _get_image_filename_19318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3253, 16), self_19317, '_get_image_filename')
        # Calling _get_image_filename(args, kwargs) (line 3253)
        _get_image_filename_call_result_19322 = invoke(stypy.reporting.localization.Localization(__file__, 3253, 16), _get_image_filename_19318, *[image_19320], **kwargs_19321)
        
        # Assigning a type to the variable 'image' (line 3253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3253, 8), 'image', _get_image_filename_call_result_19322)
        
        # Assigning a Compare to a Name (line 3254):
        
        # Assigning a Compare to a Name (line 3254):
        
        # Assigning a Compare to a Name (line 3254):
        
        
        # Call to getattr(...): (line 3254)
        # Processing the call arguments (line 3254)
        # Getting the type of 'tool' (line 3254)
        tool_19324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3254, 25), 'tool', False)
        unicode_19325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3254, 31), 'unicode', u'toggled')
        # Getting the type of 'None' (line 3254)
        None_19326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3254, 42), 'None', False)
        # Processing the call keyword arguments (line 3254)
        kwargs_19327 = {}
        # Getting the type of 'getattr' (line 3254)
        getattr_19323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3254, 17), 'getattr', False)
        # Calling getattr(args, kwargs) (line 3254)
        getattr_call_result_19328 = invoke(stypy.reporting.localization.Localization(__file__, 3254, 17), getattr_19323, *[tool_19324, unicode_19325, None_19326], **kwargs_19327)
        
        # Getting the type of 'None' (line 3254)
        None_19329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3254, 55), 'None')
        # Applying the binary operator 'isnot' (line 3254)
        result_is_not_19330 = python_operator(stypy.reporting.localization.Localization(__file__, 3254, 17), 'isnot', getattr_call_result_19328, None_19329)
        
        # Assigning a type to the variable 'toggle' (line 3254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3254, 8), 'toggle', result_is_not_19330)
        
        # Call to add_toolitem(...): (line 3255)
        # Processing the call arguments (line 3255)
        # Getting the type of 'tool' (line 3255)
        tool_19333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3255, 26), 'tool', False)
        # Obtaining the member 'name' of a type (line 3255)
        name_19334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3255, 26), tool_19333, 'name')
        # Getting the type of 'group' (line 3255)
        group_19335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3255, 37), 'group', False)
        # Getting the type of 'position' (line 3255)
        position_19336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3255, 44), 'position', False)
        # Getting the type of 'image' (line 3256)
        image_19337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3256, 26), 'image', False)
        # Getting the type of 'tool' (line 3256)
        tool_19338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3256, 33), 'tool', False)
        # Obtaining the member 'description' of a type (line 3256)
        description_19339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3256, 33), tool_19338, 'description')
        # Getting the type of 'toggle' (line 3256)
        toggle_19340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3256, 51), 'toggle', False)
        # Processing the call keyword arguments (line 3255)
        kwargs_19341 = {}
        # Getting the type of 'self' (line 3255)
        self_19331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3255, 8), 'self', False)
        # Obtaining the member 'add_toolitem' of a type (line 3255)
        add_toolitem_19332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3255, 8), self_19331, 'add_toolitem')
        # Calling add_toolitem(args, kwargs) (line 3255)
        add_toolitem_call_result_19342 = invoke(stypy.reporting.localization.Localization(__file__, 3255, 8), add_toolitem_19332, *[name_19334, group_19335, position_19336, image_19337, description_19339, toggle_19340], **kwargs_19341)
        
        
        # Getting the type of 'toggle' (line 3257)
        toggle_19343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3257, 11), 'toggle')
        # Testing the type of an if condition (line 3257)
        if_condition_19344 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3257, 8), toggle_19343)
        # Assigning a type to the variable 'if_condition_19344' (line 3257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3257, 8), 'if_condition_19344', if_condition_19344)
        # SSA begins for if statement (line 3257)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to toolmanager_connect(...): (line 3258)
        # Processing the call arguments (line 3258)
        unicode_19348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3258, 49), 'unicode', u'tool_trigger_%s')
        # Getting the type of 'tool' (line 3258)
        tool_19349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3258, 69), 'tool', False)
        # Obtaining the member 'name' of a type (line 3258)
        name_19350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3258, 69), tool_19349, 'name')
        # Applying the binary operator '%' (line 3258)
        result_mod_19351 = python_operator(stypy.reporting.localization.Localization(__file__, 3258, 49), '%', unicode_19348, name_19350)
        
        # Getting the type of 'self' (line 3259)
        self_19352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3259, 49), 'self', False)
        # Obtaining the member '_tool_toggled_cbk' of a type (line 3259)
        _tool_toggled_cbk_19353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3259, 49), self_19352, '_tool_toggled_cbk')
        # Processing the call keyword arguments (line 3258)
        kwargs_19354 = {}
        # Getting the type of 'self' (line 3258)
        self_19345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3258, 12), 'self', False)
        # Obtaining the member 'toolmanager' of a type (line 3258)
        toolmanager_19346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3258, 12), self_19345, 'toolmanager')
        # Obtaining the member 'toolmanager_connect' of a type (line 3258)
        toolmanager_connect_19347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3258, 12), toolmanager_19346, 'toolmanager_connect')
        # Calling toolmanager_connect(args, kwargs) (line 3258)
        toolmanager_connect_call_result_19355 = invoke(stypy.reporting.localization.Localization(__file__, 3258, 12), toolmanager_connect_19347, *[result_mod_19351, _tool_toggled_cbk_19353], **kwargs_19354)
        
        
        # Getting the type of 'tool' (line 3261)
        tool_19356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3261, 15), 'tool')
        # Obtaining the member 'toggled' of a type (line 3261)
        toggled_19357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3261, 15), tool_19356, 'toggled')
        # Testing the type of an if condition (line 3261)
        if_condition_19358 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3261, 12), toggled_19357)
        # Assigning a type to the variable 'if_condition_19358' (line 3261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3261, 12), 'if_condition_19358', if_condition_19358)
        # SSA begins for if statement (line 3261)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to toggle_toolitem(...): (line 3262)
        # Processing the call arguments (line 3262)
        # Getting the type of 'tool' (line 3262)
        tool_19361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 37), 'tool', False)
        # Obtaining the member 'name' of a type (line 3262)
        name_19362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3262, 37), tool_19361, 'name')
        # Getting the type of 'True' (line 3262)
        True_19363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 48), 'True', False)
        # Processing the call keyword arguments (line 3262)
        kwargs_19364 = {}
        # Getting the type of 'self' (line 3262)
        self_19359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 16), 'self', False)
        # Obtaining the member 'toggle_toolitem' of a type (line 3262)
        toggle_toolitem_19360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3262, 16), self_19359, 'toggle_toolitem')
        # Calling toggle_toolitem(args, kwargs) (line 3262)
        toggle_toolitem_call_result_19365 = invoke(stypy.reporting.localization.Localization(__file__, 3262, 16), toggle_toolitem_19360, *[name_19362, True_19363], **kwargs_19364)
        
        # SSA join for if statement (line 3261)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3257)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'add_tool(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_tool' in the type store
        # Getting the type of 'stypy_return_type' (line 3239)
        stypy_return_type_19366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3239, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19366)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_tool'
        return stypy_return_type_19366


    @norecursion
    def _remove_tool_cbk(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_remove_tool_cbk'
        module_type_store = module_type_store.open_function_context('_remove_tool_cbk', 3264, 4, False)
        # Assigning a type to the variable 'self' (line 3265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3265, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolContainerBase._remove_tool_cbk.__dict__.__setitem__('stypy_localization', localization)
        ToolContainerBase._remove_tool_cbk.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolContainerBase._remove_tool_cbk.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolContainerBase._remove_tool_cbk.__dict__.__setitem__('stypy_function_name', 'ToolContainerBase._remove_tool_cbk')
        ToolContainerBase._remove_tool_cbk.__dict__.__setitem__('stypy_param_names_list', ['event'])
        ToolContainerBase._remove_tool_cbk.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolContainerBase._remove_tool_cbk.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolContainerBase._remove_tool_cbk.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolContainerBase._remove_tool_cbk.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolContainerBase._remove_tool_cbk.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolContainerBase._remove_tool_cbk.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolContainerBase._remove_tool_cbk', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_remove_tool_cbk', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_remove_tool_cbk(...)' code ##################

        unicode_19367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3265, 8), 'unicode', u"Captures the 'tool_removed_event' signal and removes the tool.")
        
        # Call to remove_toolitem(...): (line 3266)
        # Processing the call arguments (line 3266)
        # Getting the type of 'event' (line 3266)
        event_19370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3266, 29), 'event', False)
        # Obtaining the member 'tool' of a type (line 3266)
        tool_19371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3266, 29), event_19370, 'tool')
        # Obtaining the member 'name' of a type (line 3266)
        name_19372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3266, 29), tool_19371, 'name')
        # Processing the call keyword arguments (line 3266)
        kwargs_19373 = {}
        # Getting the type of 'self' (line 3266)
        self_19368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3266, 8), 'self', False)
        # Obtaining the member 'remove_toolitem' of a type (line 3266)
        remove_toolitem_19369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3266, 8), self_19368, 'remove_toolitem')
        # Calling remove_toolitem(args, kwargs) (line 3266)
        remove_toolitem_call_result_19374 = invoke(stypy.reporting.localization.Localization(__file__, 3266, 8), remove_toolitem_19369, *[name_19372], **kwargs_19373)
        
        
        # ################# End of '_remove_tool_cbk(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_remove_tool_cbk' in the type store
        # Getting the type of 'stypy_return_type' (line 3264)
        stypy_return_type_19375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3264, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19375)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_remove_tool_cbk'
        return stypy_return_type_19375


    @norecursion
    def _get_image_filename(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_image_filename'
        module_type_store = module_type_store.open_function_context('_get_image_filename', 3268, 4, False)
        # Assigning a type to the variable 'self' (line 3269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3269, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolContainerBase._get_image_filename.__dict__.__setitem__('stypy_localization', localization)
        ToolContainerBase._get_image_filename.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolContainerBase._get_image_filename.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolContainerBase._get_image_filename.__dict__.__setitem__('stypy_function_name', 'ToolContainerBase._get_image_filename')
        ToolContainerBase._get_image_filename.__dict__.__setitem__('stypy_param_names_list', ['image'])
        ToolContainerBase._get_image_filename.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolContainerBase._get_image_filename.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolContainerBase._get_image_filename.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolContainerBase._get_image_filename.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolContainerBase._get_image_filename.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolContainerBase._get_image_filename.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolContainerBase._get_image_filename', ['image'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_image_filename', localization, ['image'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_image_filename(...)' code ##################

        unicode_19376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3269, 8), 'unicode', u'Find the image based on its name.')
        
        # Assigning a Call to a Name (line 3272):
        
        # Assigning a Call to a Name (line 3272):
        
        # Assigning a Call to a Name (line 3272):
        
        # Call to join(...): (line 3272)
        # Processing the call arguments (line 3272)
        
        # Obtaining the type of the subscript
        unicode_19380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3272, 40), 'unicode', u'datapath')
        # Getting the type of 'rcParams' (line 3272)
        rcParams_19381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 31), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 3272)
        getitem___19382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3272, 31), rcParams_19381, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3272)
        subscript_call_result_19383 = invoke(stypy.reporting.localization.Localization(__file__, 3272, 31), getitem___19382, unicode_19380)
        
        unicode_19384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3272, 53), 'unicode', u'images')
        # Processing the call keyword arguments (line 3272)
        kwargs_19385 = {}
        # Getting the type of 'os' (line 3272)
        os_19377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 18), 'os', False)
        # Obtaining the member 'path' of a type (line 3272)
        path_19378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3272, 18), os_19377, 'path')
        # Obtaining the member 'join' of a type (line 3272)
        join_19379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3272, 18), path_19378, 'join')
        # Calling join(args, kwargs) (line 3272)
        join_call_result_19386 = invoke(stypy.reporting.localization.Localization(__file__, 3272, 18), join_19379, *[subscript_call_result_19383, unicode_19384], **kwargs_19385)
        
        # Assigning a type to the variable 'basedir' (line 3272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3272, 8), 'basedir', join_call_result_19386)
        
        # Type idiom detected: calculating its left and rigth part (line 3273)
        # Getting the type of 'image' (line 3273)
        image_19387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3273, 8), 'image')
        # Getting the type of 'None' (line 3273)
        None_19388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3273, 24), 'None')
        
        (may_be_19389, more_types_in_union_19390) = may_not_be_none(image_19387, None_19388)

        if may_be_19389:

            if more_types_in_union_19390:
                # Runtime conditional SSA (line 3273)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 3274):
            
            # Assigning a Call to a Name (line 3274):
            
            # Assigning a Call to a Name (line 3274):
            
            # Call to join(...): (line 3274)
            # Processing the call arguments (line 3274)
            # Getting the type of 'basedir' (line 3274)
            basedir_19394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 33), 'basedir', False)
            # Getting the type of 'image' (line 3274)
            image_19395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 42), 'image', False)
            # Processing the call keyword arguments (line 3274)
            kwargs_19396 = {}
            # Getting the type of 'os' (line 3274)
            os_19391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 20), 'os', False)
            # Obtaining the member 'path' of a type (line 3274)
            path_19392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3274, 20), os_19391, 'path')
            # Obtaining the member 'join' of a type (line 3274)
            join_19393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3274, 20), path_19392, 'join')
            # Calling join(args, kwargs) (line 3274)
            join_call_result_19397 = invoke(stypy.reporting.localization.Localization(__file__, 3274, 20), join_19393, *[basedir_19394, image_19395], **kwargs_19396)
            
            # Assigning a type to the variable 'fname' (line 3274)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3274, 12), 'fname', join_call_result_19397)

            if more_types_in_union_19390:
                # Runtime conditional SSA for else branch (line 3273)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_19389) or more_types_in_union_19390):
            
            # Assigning a Name to a Name (line 3276):
            
            # Assigning a Name to a Name (line 3276):
            
            # Assigning a Name to a Name (line 3276):
            # Getting the type of 'None' (line 3276)
            None_19398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3276, 20), 'None')
            # Assigning a type to the variable 'fname' (line 3276)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3276, 12), 'fname', None_19398)

            if (may_be_19389 and more_types_in_union_19390):
                # SSA join for if statement (line 3273)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'fname' (line 3277)
        fname_19399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3277, 15), 'fname')
        # Assigning a type to the variable 'stypy_return_type' (line 3277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3277, 8), 'stypy_return_type', fname_19399)
        
        # ################# End of '_get_image_filename(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_image_filename' in the type store
        # Getting the type of 'stypy_return_type' (line 3268)
        stypy_return_type_19400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3268, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19400)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_image_filename'
        return stypy_return_type_19400


    @norecursion
    def trigger_tool(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'trigger_tool'
        module_type_store = module_type_store.open_function_context('trigger_tool', 3279, 4, False)
        # Assigning a type to the variable 'self' (line 3280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3280, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolContainerBase.trigger_tool.__dict__.__setitem__('stypy_localization', localization)
        ToolContainerBase.trigger_tool.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolContainerBase.trigger_tool.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolContainerBase.trigger_tool.__dict__.__setitem__('stypy_function_name', 'ToolContainerBase.trigger_tool')
        ToolContainerBase.trigger_tool.__dict__.__setitem__('stypy_param_names_list', ['name'])
        ToolContainerBase.trigger_tool.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolContainerBase.trigger_tool.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolContainerBase.trigger_tool.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolContainerBase.trigger_tool.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolContainerBase.trigger_tool.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolContainerBase.trigger_tool.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolContainerBase.trigger_tool', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'trigger_tool', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'trigger_tool(...)' code ##################

        unicode_19401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3287, (-1)), 'unicode', u'\n        Trigger the tool\n\n        Parameters\n        ----------\n        name : String\n            Name (id) of the tool triggered from within the container\n        ')
        
        # Call to trigger_tool(...): (line 3288)
        # Processing the call arguments (line 3288)
        # Getting the type of 'name' (line 3288)
        name_19405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 38), 'name', False)
        # Processing the call keyword arguments (line 3288)
        # Getting the type of 'self' (line 3288)
        self_19406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 51), 'self', False)
        keyword_19407 = self_19406
        kwargs_19408 = {'sender': keyword_19407}
        # Getting the type of 'self' (line 3288)
        self_19402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 8), 'self', False)
        # Obtaining the member 'toolmanager' of a type (line 3288)
        toolmanager_19403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3288, 8), self_19402, 'toolmanager')
        # Obtaining the member 'trigger_tool' of a type (line 3288)
        trigger_tool_19404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3288, 8), toolmanager_19403, 'trigger_tool')
        # Calling trigger_tool(args, kwargs) (line 3288)
        trigger_tool_call_result_19409 = invoke(stypy.reporting.localization.Localization(__file__, 3288, 8), trigger_tool_19404, *[name_19405], **kwargs_19408)
        
        
        # ################# End of 'trigger_tool(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'trigger_tool' in the type store
        # Getting the type of 'stypy_return_type' (line 3279)
        stypy_return_type_19410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3279, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19410)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'trigger_tool'
        return stypy_return_type_19410


    @norecursion
    def add_toolitem(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_toolitem'
        module_type_store = module_type_store.open_function_context('add_toolitem', 3290, 4, False)
        # Assigning a type to the variable 'self' (line 3291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3291, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolContainerBase.add_toolitem.__dict__.__setitem__('stypy_localization', localization)
        ToolContainerBase.add_toolitem.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolContainerBase.add_toolitem.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolContainerBase.add_toolitem.__dict__.__setitem__('stypy_function_name', 'ToolContainerBase.add_toolitem')
        ToolContainerBase.add_toolitem.__dict__.__setitem__('stypy_param_names_list', ['name', 'group', 'position', 'image', 'description', 'toggle'])
        ToolContainerBase.add_toolitem.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolContainerBase.add_toolitem.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolContainerBase.add_toolitem.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolContainerBase.add_toolitem.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolContainerBase.add_toolitem.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolContainerBase.add_toolitem.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolContainerBase.add_toolitem', ['name', 'group', 'position', 'image', 'description', 'toggle'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_toolitem', localization, ['name', 'group', 'position', 'image', 'description', 'toggle'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_toolitem(...)' code ##################

        unicode_19411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3317, (-1)), 'unicode', u"\n        Add a toolitem to the container\n\n        This method must get implemented per backend\n\n        The callback associated with the button click event,\n        must be **EXACTLY** `self.trigger_tool(name)`\n\n        Parameters\n        ----------\n        name : string\n            Name of the tool to add, this gets used as the tool's ID and as the\n            default label of the buttons\n        group : String\n            Name of the group that this tool belongs to\n        position : Int\n            Position of the tool within its group, if -1 it goes at the End\n        image_file : String\n            Filename of the image for the button or `None`\n        description : String\n            Description of the tool, used for the tooltips\n        toggle : Bool\n            * `True` : The button is a toggle (change the pressed/unpressed\n              state between consecutive clicks)\n            * `False` : The button is a normal button (returns to unpressed\n              state after release)\n        ")
        # Getting the type of 'NotImplementedError' (line 3318)
        NotImplementedError_19412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3318, 14), 'NotImplementedError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3318, 8), NotImplementedError_19412, 'raise parameter', BaseException)
        
        # ################# End of 'add_toolitem(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_toolitem' in the type store
        # Getting the type of 'stypy_return_type' (line 3290)
        stypy_return_type_19413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3290, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19413)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_toolitem'
        return stypy_return_type_19413


    @norecursion
    def toggle_toolitem(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'toggle_toolitem'
        module_type_store = module_type_store.open_function_context('toggle_toolitem', 3320, 4, False)
        # Assigning a type to the variable 'self' (line 3321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3321, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolContainerBase.toggle_toolitem.__dict__.__setitem__('stypy_localization', localization)
        ToolContainerBase.toggle_toolitem.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolContainerBase.toggle_toolitem.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolContainerBase.toggle_toolitem.__dict__.__setitem__('stypy_function_name', 'ToolContainerBase.toggle_toolitem')
        ToolContainerBase.toggle_toolitem.__dict__.__setitem__('stypy_param_names_list', ['name', 'toggled'])
        ToolContainerBase.toggle_toolitem.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolContainerBase.toggle_toolitem.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolContainerBase.toggle_toolitem.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolContainerBase.toggle_toolitem.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolContainerBase.toggle_toolitem.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolContainerBase.toggle_toolitem.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolContainerBase.toggle_toolitem', ['name', 'toggled'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'toggle_toolitem', localization, ['name', 'toggled'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'toggle_toolitem(...)' code ##################

        unicode_19414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3330, (-1)), 'unicode', u'\n        Toggle the toolitem without firing event\n\n        Parameters\n        ----------\n        name : String\n            Id of the tool to toggle\n        toggled : bool\n            Whether to set this tool as toggled or not.\n        ')
        # Getting the type of 'NotImplementedError' (line 3331)
        NotImplementedError_19415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 14), 'NotImplementedError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3331, 8), NotImplementedError_19415, 'raise parameter', BaseException)
        
        # ################# End of 'toggle_toolitem(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'toggle_toolitem' in the type store
        # Getting the type of 'stypy_return_type' (line 3320)
        stypy_return_type_19416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3320, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19416)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'toggle_toolitem'
        return stypy_return_type_19416


    @norecursion
    def remove_toolitem(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'remove_toolitem'
        module_type_store = module_type_store.open_function_context('remove_toolitem', 3333, 4, False)
        # Assigning a type to the variable 'self' (line 3334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3334, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolContainerBase.remove_toolitem.__dict__.__setitem__('stypy_localization', localization)
        ToolContainerBase.remove_toolitem.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolContainerBase.remove_toolitem.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolContainerBase.remove_toolitem.__dict__.__setitem__('stypy_function_name', 'ToolContainerBase.remove_toolitem')
        ToolContainerBase.remove_toolitem.__dict__.__setitem__('stypy_param_names_list', ['name'])
        ToolContainerBase.remove_toolitem.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolContainerBase.remove_toolitem.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolContainerBase.remove_toolitem.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolContainerBase.remove_toolitem.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolContainerBase.remove_toolitem.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolContainerBase.remove_toolitem.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolContainerBase.remove_toolitem', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'remove_toolitem', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'remove_toolitem(...)' code ##################

        unicode_19417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3345, (-1)), 'unicode', u'\n        Remove a toolitem from the `ToolContainer`\n\n        This method must get implemented per backend\n\n        Called when `ToolManager` emits a `tool_removed_event`\n\n        Parameters\n        ----------\n        name : string\n            Name of the tool to remove\n        ')
        # Getting the type of 'NotImplementedError' (line 3346)
        NotImplementedError_19418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3346, 14), 'NotImplementedError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3346, 8), NotImplementedError_19418, 'raise parameter', BaseException)
        
        # ################# End of 'remove_toolitem(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'remove_toolitem' in the type store
        # Getting the type of 'stypy_return_type' (line 3333)
        stypy_return_type_19419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3333, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19419)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'remove_toolitem'
        return stypy_return_type_19419


# Assigning a type to the variable 'ToolContainerBase' (line 3216)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3216, 0), 'ToolContainerBase', ToolContainerBase)
# Declaration of the 'StatusbarBase' class

class StatusbarBase(object, ):
    unicode_19420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3350, 4), 'unicode', u'Base class for the statusbar')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3351, 4, False)
        # Assigning a type to the variable 'self' (line 3352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3352, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StatusbarBase.__init__', ['toolmanager'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['toolmanager'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 3352):
        
        # Assigning a Name to a Attribute (line 3352):
        
        # Assigning a Name to a Attribute (line 3352):
        # Getting the type of 'toolmanager' (line 3352)
        toolmanager_19421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3352, 27), 'toolmanager')
        # Getting the type of 'self' (line 3352)
        self_19422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3352, 8), 'self')
        # Setting the type of the member 'toolmanager' of a type (line 3352)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3352, 8), self_19422, 'toolmanager', toolmanager_19421)
        
        # Call to toolmanager_connect(...): (line 3353)
        # Processing the call arguments (line 3353)
        unicode_19426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3353, 45), 'unicode', u'tool_message_event')
        # Getting the type of 'self' (line 3354)
        self_19427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 45), 'self', False)
        # Obtaining the member '_message_cbk' of a type (line 3354)
        _message_cbk_19428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3354, 45), self_19427, '_message_cbk')
        # Processing the call keyword arguments (line 3353)
        kwargs_19429 = {}
        # Getting the type of 'self' (line 3353)
        self_19423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3353, 8), 'self', False)
        # Obtaining the member 'toolmanager' of a type (line 3353)
        toolmanager_19424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3353, 8), self_19423, 'toolmanager')
        # Obtaining the member 'toolmanager_connect' of a type (line 3353)
        toolmanager_connect_19425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3353, 8), toolmanager_19424, 'toolmanager_connect')
        # Calling toolmanager_connect(args, kwargs) (line 3353)
        toolmanager_connect_call_result_19430 = invoke(stypy.reporting.localization.Localization(__file__, 3353, 8), toolmanager_connect_19425, *[unicode_19426, _message_cbk_19428], **kwargs_19429)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _message_cbk(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_message_cbk'
        module_type_store = module_type_store.open_function_context('_message_cbk', 3356, 4, False)
        # Assigning a type to the variable 'self' (line 3357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3357, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StatusbarBase._message_cbk.__dict__.__setitem__('stypy_localization', localization)
        StatusbarBase._message_cbk.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StatusbarBase._message_cbk.__dict__.__setitem__('stypy_type_store', module_type_store)
        StatusbarBase._message_cbk.__dict__.__setitem__('stypy_function_name', 'StatusbarBase._message_cbk')
        StatusbarBase._message_cbk.__dict__.__setitem__('stypy_param_names_list', ['event'])
        StatusbarBase._message_cbk.__dict__.__setitem__('stypy_varargs_param_name', None)
        StatusbarBase._message_cbk.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StatusbarBase._message_cbk.__dict__.__setitem__('stypy_call_defaults', defaults)
        StatusbarBase._message_cbk.__dict__.__setitem__('stypy_call_varargs', varargs)
        StatusbarBase._message_cbk.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StatusbarBase._message_cbk.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StatusbarBase._message_cbk', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_message_cbk', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_message_cbk(...)' code ##################

        unicode_19431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3357, 8), 'unicode', u"Captures the 'tool_message_event' and set the message")
        
        # Call to set_message(...): (line 3358)
        # Processing the call arguments (line 3358)
        # Getting the type of 'event' (line 3358)
        event_19434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3358, 25), 'event', False)
        # Obtaining the member 'message' of a type (line 3358)
        message_19435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3358, 25), event_19434, 'message')
        # Processing the call keyword arguments (line 3358)
        kwargs_19436 = {}
        # Getting the type of 'self' (line 3358)
        self_19432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3358, 8), 'self', False)
        # Obtaining the member 'set_message' of a type (line 3358)
        set_message_19433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3358, 8), self_19432, 'set_message')
        # Calling set_message(args, kwargs) (line 3358)
        set_message_call_result_19437 = invoke(stypy.reporting.localization.Localization(__file__, 3358, 8), set_message_19433, *[message_19435], **kwargs_19436)
        
        
        # ################# End of '_message_cbk(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_message_cbk' in the type store
        # Getting the type of 'stypy_return_type' (line 3356)
        stypy_return_type_19438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3356, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19438)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_message_cbk'
        return stypy_return_type_19438


    @norecursion
    def set_message(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_message'
        module_type_store = module_type_store.open_function_context('set_message', 3360, 4, False)
        # Assigning a type to the variable 'self' (line 3361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3361, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StatusbarBase.set_message.__dict__.__setitem__('stypy_localization', localization)
        StatusbarBase.set_message.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StatusbarBase.set_message.__dict__.__setitem__('stypy_type_store', module_type_store)
        StatusbarBase.set_message.__dict__.__setitem__('stypy_function_name', 'StatusbarBase.set_message')
        StatusbarBase.set_message.__dict__.__setitem__('stypy_param_names_list', ['s'])
        StatusbarBase.set_message.__dict__.__setitem__('stypy_varargs_param_name', None)
        StatusbarBase.set_message.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StatusbarBase.set_message.__dict__.__setitem__('stypy_call_defaults', defaults)
        StatusbarBase.set_message.__dict__.__setitem__('stypy_call_varargs', varargs)
        StatusbarBase.set_message.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StatusbarBase.set_message.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StatusbarBase.set_message', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_message', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_message(...)' code ##################

        unicode_19439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3368, (-1)), 'unicode', u'\n        Display a message on toolbar or in status bar\n\n        Parameters\n        ----------\n        s : str\n            Message text\n        ')
        pass
        
        # ################# End of 'set_message(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_message' in the type store
        # Getting the type of 'stypy_return_type' (line 3360)
        stypy_return_type_19440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3360, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_19440)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_message'
        return stypy_return_type_19440


# Assigning a type to the variable 'StatusbarBase' (line 3349)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3349, 0), 'StatusbarBase', StatusbarBase)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
